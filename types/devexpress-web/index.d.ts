// Type definitions for DevExpress ASP.NET 192.3
// Project: https://devexpress.com/
// Definitions by: DevExpress Inc. <https://devexpress.com/>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.3

/// <reference types="jquery"/>
/// <reference types="knockout"/>

/**
 * A client-side equivalent of the ASPxDiagram control.
 */
declare class ASPxClientDiagram extends ASPxClientControl {
    /**
     * Fires when the diagram's data is changed.
     */
    DiagramChanged: ASPxClientEvent<ASPxClientEventHandler<ASPxClientDiagram>>;
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientDiagram>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientDiagram>>;
    /**
     * Fires on the client if any unhandled server error occurs during server-side processing of a callback sent by the ASPxClientDiagram.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientDiagram>>;
    /**
     * Imports the diagram data.
     * @param data The diagram data in JSON format.
     */
    Import(data: string): void;
    /**
     * Exports the diagram data in JSON format.
     */
    Export(): string;
    /**
     * Exports the diagram to an image format.
     * @param format The image format. Acceptable values: svg, png, jpg.
     * @param callback A function to be executed after a diagram image is prepared and allows you to save the image.
     */
    ExportTo(format: string, callback: (arg: string) => void): void;
    /**
     * Allows you to enable/disable full-screen mode.
     * @param fullscreen true to activate full-screen mode; false to deactivate full-screen mode.
     */
    SetFullscreenMode(fullscreen: boolean): void;
}
/**
 * Represents the client ASPxGaugeControl.
 */
declare class ASPxClientGaugeControl extends ASPxClientControl {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientGaugeControl>>;
    /**
     * Occurs on the client after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientGaugeControl>>;
    /**
     * Fires when errors have occurred during callback processing.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientGaugeControl>>;
    /**
     * Sends a callback to the server and generates the server-side ASPxGaugeControl.CustomCallback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side ASPxGaugeControl.CustomCallback event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(parameter: string, onSuccess?: (arg: string) => void): void;
    /**
     * Converts the specified object to the ASPxClientGaugeControl type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientGaugeControl;
}
/**
 * Contains style settings related to media elements in ASPxHtmlEditor.
 */
declare class ASPxClientHtmlEditorCommandStyleSettings {
    /**
     * Gets or sets a media element's CSS class name.
     */
    className: string;
    /**
     * Gets or sets an element's width.
     */
    width: string;
    /**
     * Gets or sets an element's height.
     */
    height: string;
    /**
     * Gets or sets a media element's border width.
     */
    borderWidth: string;
    /**
     * Gets or sets a media element's border color.
     */
    borderColor: string;
    /**
     * Gets or sets a media element's border style.
     */
    borderStyle: string;
    /**
     * Gets or sets an element's top margin.
     */
    marginTop: string;
    /**
     * Gets or sets an element's right margin.
     */
    marginRight: string;
    /**
     * Gets or sets an element's bottom margin.
     */
    marginBottom: string;
    /**
     * Gets or sets an element's left margin.
     */
    marginLeft: string;
    /**
     * Gets or sets a media element's background color.
     */
    backgroundColor: string;
    /**
     * Gets or sets the element's text alignment.
     */
    textAlign: string;
    /**
     * Gets or sets the element's vertical alignment.
     */
    verticalAlign: string;
}
/**
 * The base class for parameters used in the ASPxHtmlEditor's client-side commands.
 */
declare class ASPxClientHtmlEditorCommandArguments {
    constructor(htmlEditor: ASPxClientHtmlEditor, selectedElement?: any);
    /**
     * Gets the currently selected element in the ASPxHtmlEditor.
     */
    selectedElement: any;
}
/**
 * Contains settings related to the ASPxClientCommandConsts.INSERTIMAGE_COMMAND command parameter.
 */
declare class ASPxClientHtmlEditorInsertImageCommandArguments extends ASPxClientHtmlEditorCommandArguments {
    /**
     * Initializes a new instance of the ASPxClientHtmlEditorInsertImageCommandArguments class.
     * @param htmlEditor An HTML editor in which you want to insert an element.
     * @param elementToReplace An object containing the currently selected element in the HTML editor. This element will be replaced with the inserted image.
     */
    constructor(htmlEditor: ASPxClientHtmlEditor, elementToReplace: any);
    /**
     * Specifies the source of the target image.
     */
    src: string;
    /**
     * Creates an alternate text for the target image.
     */
    alt: string;
    /**
     * Determines if the target image is wrapped with text.
     */
    useFloat: boolean;
    /**
     * Determines the position of the target image.
     */
    align: string;
    /**
     * Contains the style settings specifying the appearance of the target image.
     */
    styleSettings: ASPxClientHtmlEditorCommandStyleSettings;
}
/**
 * Contains settings related to the ASPxClientCommandConsts.CHANGEIMAGE_COMMAND command parameter.
 */
declare class ASPxClientHtmlEditorChangeImageCommandArguments extends ASPxClientHtmlEditorInsertImageCommandArguments {
    /**
     * Initializes a new instance of the ASPxClientHtmlEditorChangeImageCommandArguments class.
     * @param htmlEditor The html editor in which the target element is located.
     * @param selectedElement The image that is about to be changed.
     */
    constructor(htmlEditor: ASPxClientHtmlEditor, selectedElement: any);
}
/**
 * Contains settings related to the ASPxClientCommandConsts.INSERTLINK_COMMAND command parameter.
 */
declare class ASPxClientHtmlEditorInsertLinkCommandArguments extends ASPxClientHtmlEditorCommandArguments {
    /**
     * Initializes a new instance of the ASPxClientHtmlEditorInsertLinkCommandArguments class.
     * @param htmlEditor An HTML editor in which you want to insert an element.
     * @param selectedElement An object containing the currently selected element in the HTML editor. This element will be replaced with the inserted link.
     */
    constructor(htmlEditor: ASPxClientHtmlEditor, selectedElement: any);
    /**
     * Specifies the url of the page the target link goes to.
     */
    url: string;
    /**
     * Specifiies the text of the target link.
     */
    text: string;
    /**
     * Determines where to open the target link.
     */
    target: string;
    /**
     * Defines the title of the target link.
     */
    title: string;
    /**
     * Contains the style settings defining the appearance of the target link element.
     */
    styleSettings: ASPxClientHtmlEditorCommandStyleSettings;
}
/**
 * The base class for parameters related to inserting or changing media elements in the ASPxHtmlEditor.
 */
declare class ASPxClientHtmlEditorChangeMediaElementCommandArguments extends ASPxClientHtmlEditorCommandArguments {
    protected constructor(htmlEditor: ASPxClientHtmlEditor, selectedElement: any);
    /**
     * Defines the <a href="http://www.w3schools.com/tags/att_global_id.asp">HTML &quot;id&quot;</a> attribute of the target media element.
     */
    id: string;
    /**
     * Defines the source of the target media element.
     */
    src: string;
    /**
     * Determines the position of the target media element.
     */
    align: string;
    /**
     * Contains the style settings defining the appearance of the target media element.
     */
    styleSettings: ASPxClientHtmlEditorCommandStyleSettings;
    /**
     * Returns the name of the client-side command corresponding to the parameter.
     */
    GetCommandName(): string;
}
/**
 * The base class for parameters related to inserting or changing HTML5 media elements (Audio and Video) in the ASPxHtmlEditor.
 */
declare class ASPxClientHtmlEditorChangeHtml5MediaElementCommandArguments extends ASPxClientHtmlEditorChangeMediaElementCommandArguments {
    protected constructor(htmlEditor: ASPxClientHtmlEditor, selectedElement: any);
    /**
     * Determines if a media file will start playing automatically.
     */
    autoPlay: boolean;
    /**
     * Determines if a media file repeats indefinitely, or stops when it reaches the last frame.
     */
    loop: boolean;
    /**
     * Determines if the media player controls should be displayed.
     */
    showPlayerControls: boolean;
    /**
     * Determines how a media file should be loaded when the page loads.
     */
    preloadMode: string;
}
/**
 * Contains settings related to the ASPxClientCommandConsts.INSERTAUDIO_COMMAND command parameter.
 */
declare class ASPxClientHtmlEditorInsertAudioCommandArguments extends ASPxClientHtmlEditorChangeHtml5MediaElementCommandArguments {
    constructor(htmlEditor: ASPxClientHtmlEditor, elementToReplace?: any);
}
/**
 * Contains settings related to the ASPxClientCommandConsts.CHANGEAUDIO_COMMAND command parameter.
 */
declare class ASPxClientHtmlEditorChangeAudioCommandArguments extends ASPxClientHtmlEditorInsertAudioCommandArguments {
    private constructor(htmlEditor: ASPxClientHtmlEditor, selectedElement: any);
}
/**
 * Contains settings related to the ASPxClientCommandConsts.INSERTVIDEO_COMMAND command parameter.
 */
declare class ASPxClientHtmlEditorInsertVideoCommandArguments extends ASPxClientHtmlEditorChangeHtml5MediaElementCommandArguments {
    constructor(htmlEditor: ASPxClientHtmlEditor, elementToReplace?: any);
    /**
     * Defines the URL of an image that is shown while the video file is downloading, or until an end-user clicks the play button.
     */
    posterUrl: string;
}
/**
 * Contains settings related to the ASPxClientCommandConsts.CHANGEVIDEO_COMMAND command parameter.
 */
declare class ASPxClientHtmlEditorChangeVideoCommandArguments extends ASPxClientHtmlEditorInsertVideoCommandArguments {
    private constructor(htmlEditor: ASPxClientHtmlEditor, selectedElement: any);
}
/**
 * Contains settings related to the ASPxClientCommandConsts.INSERTFLASH_COMMAND command parameter.
 */
declare class ASPxClientHtmlEditorInsertFlashCommandArguments extends ASPxClientHtmlEditorChangeMediaElementCommandArguments {
    constructor(htmlEditor: ASPxClientHtmlEditor, elementToReplace?: any);
    /**
     * Determines if the target flash element will start playing automatically.
     */
    autoPlay: boolean;
    /**
     * Defines if the target flash element repeats indefinitely, or stops when it reaches the last frame.
     */
    loop: boolean;
    /**
     * Determines if the flash related items are displayed in the context menu of the target flash element.
     */
    enableFlashMenu: boolean;
    /**
     * Determines if the target flash element can be displayed in the fullscreen mode.
     */
    allowFullscreen: boolean;
    /**
     * Defines the rendering quality level used for the target flash element.
     */
    quality: string;
}
/**
 * Contains settings related to the ASPxClientCommandConsts.CHANGEFLASH_COMMAND command parameter.
 */
declare class ASPxClientHtmlEditorChangeFlashCommandArguments extends ASPxClientHtmlEditorInsertFlashCommandArguments {
    private constructor(htmlEditor: ASPxClientHtmlEditor, selectedElement: any);
}
/**
 * Contains settings related to the ASPxClientCommandConsts.INSERTYOUTUBEVIDEO_COMMAND command parameter.
 */
declare class ASPxClientHtmlEditorInsertYouTubeVideoCommandArguments extends ASPxClientHtmlEditorChangeMediaElementCommandArguments {
    constructor(htmlEditor: ASPxClientHtmlEditor, elementToReplace?: any);
    /**
     * Determines if suggested videos are shown after the target YouTube video finishes.
     */
    showRelatedVideos: boolean;
    /**
     * Determines if the target YouTube video title and player actions (Watch later, Share) are shown.
     */
    showVideoInfo: boolean;
    /**
     * Determines if the privacy-enhanced mode is enabled for the target YouTube video.
     */
    enablePrivacyEnhancedMode: boolean;
    /**
     * Determines if the player controls are displayed for the target YouTube video.
     */
    showPlayerControls: boolean;
    /**
     * Determines if the target YouTube video can be displayed in fullscreen mode.
     */
    allowFullscreen: boolean;
}
/**
 * Contains settings related to the ASPxClientCommandConsts.CHANGEYOUTUBEVIDEO_COMMAND command parameter.
 */
declare class ASPxClientHtmlEditorChangeYouTubeVideoCommandArguments extends ASPxClientHtmlEditorInsertYouTubeVideoCommandArguments {
    private constructor(htmlEditor: ASPxClientHtmlEditor, selectedElement: any);
}
/**
 * Contains settings related to the ASPxClientCommandConsts.TABLEPROPERTIES_DIALOG_COMMAND command parameter.
 */
declare class ASPxClientHtmlEditorTablePropertiesCommandArguments extends ASPxClientHtmlEditorCommandArguments {
    /**
     * Initializes a new instance of the ASPxClientHtmlEditorTablePropertiesCommandArguments class with specified settings.
     * @param htmlEditor The HTML editor executing a command.
     * @param selectedElement An object containing the currently selected element in the HTML editor.
     */
    constructor(htmlEditor: ASPxClientHtmlEditor, selectedElement: any);
    /**
     * Contains the style settings defining the appearance of the target table element.
     */
    styleSettings: ASPxClientHtmlEditorCommandStyleSettings;
    /**
     * Determines the position of the target table element.
     */
    align: string;
    /**
     * Gets or sets a table cell padding.
     */
    cellPadding: number;
    /**
     * Gets or sets the table cell spacing.
     */
    cellSpacing: number;
    /**
     * Gets or sets a value that is the table caption.
     */
    caption: string;
    /**
     * Gets or sets a value indicating whether the first row/column serves as the table's header.
     */
    headers: string;
    /**
     * Gets or sets the table's summary.
     */
    summary: string;
}
/**
 * Contains settings related to the ASPxClientCommandConsts.INSERTTABLE_COMMAND command parameter.
 */
declare class ASPxClientHtmlEditorInsertTableCommandArguments extends ASPxClientHtmlEditorTablePropertiesCommandArguments {
    /**
     * Initializes a new instance of the ASPxClientHtmlEditorInsertTableCommandArguments class with specified settings.
     * @param htmlEditor The HTML editor executing a command.
     * @param elementToReplace The element that will be replaced by the inserted table element.
     */
    constructor(htmlEditor: ASPxClientHtmlEditor, elementToReplace: any);
    /**
     * Gets or sets the count of columns in the table.
     */
    columns: number;
    /**
     * Gets or sets the count of rows in the table.
     */
    rows: number;
    /**
     * Gets or sets a value indicating whether all table columns should have equal width.
     */
    isEqualColumnWidth: boolean;
}
/**
 * Contains settings related to the ASPxClientCommandConsts.TABLECELLPROPERTIES_DIALOG_COMMAND command parameter.
 */
declare class ASPxClientHtmlEditorTableCellPropertiesCommandArguments extends ASPxClientHtmlEditorCommandArguments {
    /**
     * Initializes a new instance of the ASPxClientHtmlEditorTableCellPropertiesCommandArguments class with specified settings.
     * @param htmlEditor The HTML editor executing a command.
     * @param selectedElement An object containing the currently selected element in the HTML editor.
     */
    constructor(htmlEditor: ASPxClientHtmlEditor, selectedElement: any);
    /**
     * Contains the style settings defining the appearance of the target cell element.
     */
    styleSettings: ASPxClientHtmlEditorCommandStyleSettings;
    /**
     * Gets or sets a value that indicates whether the cell settings should be applied to all cells in the table.
     */
    applyForAll: boolean;
}
/**
 * Contains settings related to the ASPxClientCommandConsts.TABLEROWPROPERTIES_DIALOG_COMMAND command parameter.
 */
declare class ASPxClientHtmlEditorTableRowPropertiesCommandArguments extends ASPxClientHtmlEditorCommandArguments {
    /**
     * Initializes a new instance of the ASPxClientHtmlEditorTableRowPropertiesCommandArguments class with specified settings.
     * @param htmlEditor The html editor in which the target element is located.
     * @param selectedElement The element currently selected in the HTML editor.
     */
    constructor(htmlEditor: ASPxClientHtmlEditor, selectedElement: any);
    /**
     * Contains the style settings specifying the appearance of the specified table row.
     */
    styleSettings: ASPxClientHtmlEditorCommandStyleSettings;
}
/**
 * Contains settings related to the ASPxClientCommandConsts.TABLECOLUMNPROPERTIES_DIALOG_COMMAND command parameter.
 */
declare class ASPxClientHtmlEditorTableColumnPropertiesCommandArguments extends ASPxClientHtmlEditorCommandArguments {
    /**
     * Initializes a new instance of the ASPxClientHtmlEditorTableColumnPropertiesCommandArguments class with specified settings.
     * @param htmlEditor The HTML editor executing a command.
     * @param selectedElement An object containing the currently selected element in the HTML editor.
     */
    constructor(htmlEditor: ASPxClientHtmlEditor, selectedElement: any);
    /**
     * Contains the style settings defining the appearance of the target column element.
     */
    styleSettings: ASPxClientHtmlEditorCommandStyleSettings;
}
/**
 * Declares client constants that contain the names of the ASPxHtmlEditor's default client commands.
 */
declare class ASPxClientCommandConsts {
    /**
     * Identifies a command that shows a search panel.
     */
    static SHOWSEARCHPANEL_COMMAND: string;
    /**
     * Identifies a command that invokes the Find and Replace dialog.
     */
    static FINDANDREPLACE_DIALOG_COMMAND: string;
    /**
     * Identifies a command that applies the bold text formatting to the selected text. If it's already applied, cancels it.
     */
    static BOLD_COMMAND: string;
    /**
     * Identifies a command that makes the selected text italic or regular type depending on the current state.
     */
    static ITALIC_COMMAND: string;
    /**
     * Identifies a command that applies the underline text formatting to the selected text. If it's already applied, cancels it.
     */
    static UNDERLINE_COMMAND: string;
    /**
     * Identifies a command that applies the strike through text formatting to the selected text. If it's already applied, cancels it.
     */
    static STRIKETHROUGH_COMMAND: string;
    /**
     * Identifies a command that applies the superscript text formatting to the selected text. If it's already applied, cancels it.
     */
    static SUPERSCRIPT_COMMAND: string;
    /**
     * Identifies a command that applies the subscript text formatting to the selected text. If it's already applied, cancels it.
     */
    static SUBSCRIPT_COMMAND: string;
    /**
     * Identifies a command that centers the content of the currently focused paragraph.
     */
    static JUSTIFYCENTER_COMMAND: string;
    /**
     * Identifies a command that left justifies the content of the currently focused paragraph.
     */
    static JUSTIFYLEFT_COMMAND: string;
    /**
     * Identifies a command that creates an indent for the selected paragarph.
     */
    static INDENT_COMMAND: string;
    /**
     * Identifies a command that creates an outdent for the focused paragarph.
     */
    static OUTDENT_COMMAND: string;
    /**
     * Identifies a command that right justifies the content of the currently focused paragraph.
     */
    static JUSTIFYRIGHT_COMMAND: string;
    /**
     * Identifies a command that fully justifies the content of the currently focused paragraph (aligned with both the left and right margines).
     */
    static JUSTIFYFULL_COMMAND: string;
    /**
     * Identifies a command that changes the size of the selected text.
     */
    static FONTSIZE_COMMAND: string;
    /**
     * Identifies a command that changes the font of the selected text.
     */
    static FONTNAME_COMMAND: string;
    /**
     * Identifies a command that changes the color of a fore color pickers and sets the selected text fore color.
     */
    static FONTCOLOR_COMMAND: string;
    /**
     * Identifies a command that changes the color of a back color pickers and sets the selected text back color.
     */
    static BACKCOLOR_COMMAND: string;
    /**
     * Identifies a command that wraps the selected paragraph in the specified html tag.
     */
    static FORMATBLOCK_COMMAND: string;
    /**
     * Identifies a command that wraps the currently selected text content in a specific html tag with a css class assigned to it.
     */
    static APPLYCSS_COMMAND: string;
    /**
     * Identifies a command that removes all formatting from the selected content.
     */
    static REMOVEFORMAT_COMMAND: string;
    /**
     * Identifies a command that cancels the last action.
     */
    static UNDO_COMMAND: string;
    /**
     * Identifies a command that returns a previously canceled action.
     */
    static REDO_COMMAND: string;
    /**
     * Identifies a command that copies the selected content.
     */
    static COPY_COMMAND: string;
    /**
     * Identifies a command that pastes the content of the clipboard at the current cursor position.
     */
    static PASTE_COMMAND: string;
    /**
     * Identifies a command that pastes a specified content taking into account that it was copied from Word.
     */
    static PASTEFROMWORD_COMMAND: string;
    /**
     * Identifies a command that invokes the Paste from Word dialog.
     */
    static PASTEFROMWORDDIALOG_COMMAND: string;
    /**
     * Identifies a command that cuts the selected content.
     */
    static CUT_COMMAND: string;
    /**
     * Identifies a command that selects all content inside the html editor.
     */
    static SELECT_ALL: string;
    /**
     * Identifies a command that deletes the selected content.
     */
    static DELETE_COMMAND: string;
    /**
     * Identifies a command that can be used to correctly insert HTML code into the editor.
     */
    static PASTEHTML_COMMAND: string;
    /**
     * Identifies a command that inserts a new ordered list.
     */
    static INSERTORDEREDLIST_COMMAND: string;
    /**
     * Identifies a command that inserts a new unordered list.
     */
    static INSERTUNORDEREDLIST_COMMAND: string;
    /**
     * Identifies a command that restarts the current ordered list.
     */
    static RESTARTORDEREDLIST_COMMAND: string;
    /**
     * Identifies a command that continues a disrupted ordered list.
     */
    static CONTINUEORDEREDLIST_COMMAND: string;
    /**
     * Identifies a command that removes a hyperlink from the selected text or image.
     */
    static UNLINK_COMMAND: string;
    /**
     * Identifies a command that inserts a new hyperlink.
     */
    static INSERTLINK_COMMAND: string;
    /**
     * Identifies a command that inserts a new image.
     */
    static INSERTIMAGE_COMMAND: string;
    /**
     * Identifies a command that changes the selected image.
     */
    static CHANGEIMAGE_COMMAND: string;
    /**
     * Identifies a command that initiates spell checking.
     */
    static CHECKSPELLING_COMMAND: string;
    /**
     * Identifies a command that invokes the Insert Image dialog.
     */
    static INSERTIMAGE_DIALOG_COMMAND: string;
    /**
     * Identifies a command that invokes the Change Image dialog.
     */
    static CHANGEIMAGE_DIALOG_COMMAND: string;
    /**
     * Identifies a command that invokes the Insert Link dialog.
     */
    static INSERTLINK_DIALOG_COMMAND: string;
    /**
     * Identifies a command that invokes the Change Link dialog.
     */
    static CHANGELINK_DIALOG_COMMAND: string;
    /**
     * Identifies a command that invokes the Insert Table dialog.
     */
    static INSERTTABLE_DIALOG_COMMAND: string;
    /**
     * Identifies a command that invokes the Table Properties dialog.
     */
    static TABLEPROPERTIES_DIALOG_COMMAND: string;
    /**
     * Identifies a command that invokes the Cell Properties dialog.
     */
    static TABLECELLPROPERTIES_DIALOG_COMMAND: string;
    /**
     * Identifies a command that invokes the Column Properties dialog.
     */
    static TABLECOLUMNPROPERTIES_DIALOG_COMMAND: string;
    /**
     * Identifies a command that invokes the Row Properties dialog.
     */
    static TABLEROWPROPERTIES_DIALOG_COMMAND: string;
    /**
     * Identifies a command that invokes a default browser Print dialog, allowing an end-user to print the content of the html editor.
     */
    static PRINT_COMMAND: string;
    /**
     * Identifies a command that toggles the full-screen mode.
     */
    static FULLSCREEN_COMMAND: string;
    /**
     * Identifies a command that inserts a new table.
     */
    static INSERTTABLE_COMMAND: string;
    /**
     * Identifies a command that changes the selected table.
     */
    static CHANGETABLE_COMMAND: string;
    /**
     * Identifies a command that changes the selected table cell.
     */
    static CHANGETABLECELL_COMMAND: string;
    /**
     * Identifies a command that changes the selected table row.
     */
    static CHANGETABLEROW_COMMAND: string;
    /**
     * Identifies a command that changes the selected table column.
     */
    static CHANGETABLECOLUMN_COMMAND: string;
    /**
     * Identifies a command that deletes the currently selected table.
     */
    static DELETETABLE_COMMAND: string;
    /**
     * Identifies a command that deletes the currently selected table row.
     */
    static DELETETABLEROW_COMMAND: string;
    /**
     * Identifies a command that deletes the currently selected table column.
     */
    static DELETETABLECOLUMN_COMMAND: string;
    /**
     * Identifies a command that inserts a new column to the left from the currently focused one.
     */
    static INSERTTABLECOLUMNTOLEFT_COMMAND: string;
    /**
     * Identifies a command that inserts a new column to the right from the currently focused one.
     */
    static INSERTTABLECOLUMNTORIGHT_COMMAND: string;
    /**
     * Identifies a command that inserts a new row below the currently focused one.
     */
    static INSERTTABLEROWBELOW_COMMAND: string;
    /**
     * Identifies a command that inserts a new row above the currently focused one.
     */
    static INSERTTABLEROWABOVE_COMMAND: string;
    /**
     * Identifies a command that splits the current table cell horizontally.
     */
    static SPLITTABLECELLHORIZONTALLY_COMMAND: string;
    /**
     * Identifies a command that splits the current table cell vertically.
     */
    static SPLITTABLECELLVERTICALLY_COMMAND: string;
    /**
     * Identifies a command that merges the focused table cell with the one to the right.
     */
    static MERGETABLECELLRIGHT_COMMAND: string;
    /**
     * Identifies a command that merges the focused table cell with the one below.
     */
    static MERGETABLECELLDOWN_COMMAND: string;
    /**
     * Identifies a command that invokes a custom dialog.
     */
    static CUSTOMDIALOG_COMMAND: string;
    /**
     * Identifies a command that exports the html editor content.
     */
    static EXPORT_COMMAND: string;
    /**
     * Identifies a command that inserts a new audio element.
     */
    static INSERTAUDIO_COMMAND: string;
    /**
     * Identifies a command that inserts a new video.
     */
    static INSERTVIDEO_COMMAND: string;
    /**
     * Identifies a command that inserts a new flash element.
     */
    static INSERTFLASH_COMMAND: string;
    /**
     * Identifies a command that inserts a new YouTube video.
     */
    static INSERTYOUTUBEVIDEO_COMMAND: string;
    /**
     * Identifies a command that changes the selected audio element.
     */
    static CHANGEAUDIO_COMMAND: string;
    /**
     * Identifies a command that changes the selected video element.
     */
    static CHANGEVIDEO_COMMAND: string;
    /**
     * Identifies a command that changes the selected flash element.
     */
    static CHANGEFLASH_COMMAND: string;
    /**
     * Identifies a command that changes the selected YouTube video element.
     */
    static CHANGEYOUTUBEVIDEO_COMMAND: string;
    /**
     * Identifies a command that invokes the Insert Audio dialog.
     */
    static INSERTAUDIO_DIALOG_COMMAND: string;
    /**
     * Identifies a command that invokes the Insert Video dialog.
     */
    static INSERTVIDEO_DIALOG_COMMAND: string;
    /**
     * Identifies a command that invokes the Insert Flash dialog.
     */
    static INSERTFLASH_DIALOG_COMMAND: string;
    /**
     * Identifies a command that invokes the Insert YouTube Video dialog.
     */
    static INSERTYOUTUBEVIDEO_DIALOG_COMMAND: string;
    /**
     * Identifies a command that invokes the Change Audio dialog.
     */
    static CHANGEAUDIO_DIALOG_COMMAND: string;
    /**
     * Identifies a command that invokes the Change Video dialog.
     */
    static CHANGEVIDEO_DIALOG_COMMAND: string;
    /**
     * Identifies a command that invokes the Change Flash dialog.
     */
    static CHANGEFLASH_DIALOG_COMMAND: string;
    /**
     * Identifies a command that invokes the Change YouTube Video dialog.
     */
    static CHANGEYOUTUBEVIDEO_DIALOG_COMMAND: string;
    /**
     * Identifies a command that pastes the content of the clipboard to the current cursor position, taking into account that the ASPxHtmlEditorHtmlEditingSettings.PasteMode property is set to SourceFormatting.
     */
    static PASTEHTMLSOURCEFORMATTING_COMMAND: string;
    /**
     * Identifies a command that pastes the content of the clipboard to the current cursor position, taking into account that the ASPxHtmlEditorHtmlEditingSettings.PasteMode property is set to PlainText.
     */
    static PASTEHTMLPLAINTEXT_COMMAND: string;
    /**
     * Identifies a command that pastes the content of the clipboard to the current cursor position, taking into account that the ASPxHtmlEditorHtmlEditingSettings.PasteMode property is set to MergeFormatting.
     */
    static PASTEHTMLMERGEFORMATTING_COMMAND: string;
    /**
     * Identifies a command that inserts a new placeholder.
     */
    static INSERTPLACEHOLDER_COMMAND: string;
    /**
     * Identifies a command that changes the selected placeholder.
     */
    static CHANGEPLACEHOLDER_COMMAND: string;
    /**
     * Identifies a command that invokes the Insert Placeholder dialog.
     */
    static INSERTPLACEHOLDER_DIALOG_COMMAND: string;
    /**
     * Identifies a command that invokes the Change Placeholder dialog.
     */
    static CHANGEPLACEHOLDER_DIALOG_COMMAND: string;
    /**
     * Identifies a command that updates the editor content.
     */
    static UPDATEDOCUMENT_COMMAND: string;
    /**
     * Identifies a command that changes properties of the element selected in the tag inspector.
     */
    static CHANGEELEMENTPROPERTIES_COMMAND: string;
    /**
     * Identifies a command that invokes the Change Element Properties dialog.
     */
    static CHANGEELEMENTPROPERTIES_DIALOG_COMMAND: string;
    /**
     * Identifies a command that comments the selected HTML code. If no code is selected, it comments the focused tag.
     */
    static COMMENT_COMMAND: string;
    /**
     * Identifies a command that uncomments the selected HTML code. If no code is selected, the command uncomments the currently focused tag.
     */
    static UNCOMMENTHTML_COMMAND: string;
    /**
     * Identifies a command that formats the current HTML document.
     */
    static FORMATDOCUMENT_COMMAND: string;
    /**
     * Identifies a command that applies the indent formatting to the selected content.
     */
    static INDENTLINE_COMMAND: string;
    /**
     * Identifies a command that applies the outdent formatting to the focused content.
     */
    static OUTDENTLINE_COMMAND: string;
    /**
     * Identifies a command that collapses the selected HTML tag.
     */
    static COLLAPSETAG_COMMAND: string;
    /**
     * Identifies a command that expands the selected HTML tag.
     */
    static EXPANDTAG_COMMAND: string;
    /**
     * Identifies a command that shows intellisense for the HTML code editor.
     */
    static SHOWINTELLISENSE_COMMAND: string;
}
/**
 * A method that will handle the client ASPxClientHtmlEditor.DialogInitialized event.
 * @param source An object representing the event's source.
 * @param e An ASPxClientHtmlEditorDialogInitializedEventArgs object that contains event data.
 */
interface ASPxClientHtmlEditorDialogInitializedEventHandler<Sender> { (source: Sender, e: ASPxClientHtmlEditorDialogInitializedEventArgs): void; }
/**
 * Provides data for the ASPxClientHtmlEditor.DialogInitialized client event.
 */
declare class ASPxClientHtmlEditorDialogInitializedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the name of the dialog that has been initialized.
     */
    dialogName: string;
    /**
     * Gets a dialog object related to the event.
     */
    dialog: ASPxClientHtmlEditorDialogBase;
}
/**
 * Provides data for the event that fires when the HTML Editor dialogs are closed or are going to be closed.
 */
declare class ASPxClientHtmlEditorDialogCloseEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the dialog name related to the event.
     */
    dialogName: string;
    /**
     * Gets the dialog object related to the event.
     */
    dialog: ASPxClientHtmlEditorDialogBase;
    /**
     * Gets a string that contains specific information (if any) passed from the client side for server-side processing.
     */
    parameter: any;
}
/**
 * A method that will handle the ASPxClientHtmlEditor.DialogClosing event.
 * @param source The event source.
 * @param e An ASPxClientHtmlEditorDialogClosingEventArgs object that contains event data.
 */
interface ASPxClientHtmlEditorDialogClosingEventHandler<Sender> { (source: Sender, e: ASPxClientHtmlEditorDialogClosingEventArgs): void; }
/**
 * Provides data for the ASPxClientHtmlEditor.DialogClosing event.
 */
declare class ASPxClientHtmlEditorDialogClosingEventArgs extends ASPxClientHtmlEditorDialogCloseEventArgs {
    /**
     * Gets or sets a value indicating whether the action which raised the event should be canceled.
     */
    cancel: boolean;
}
/**
 * A method that will handle the ASPxClientHtmlEditor.DialogClosed event.
 * @param source The event source.
 * @param e An ASPxClientHtmlEditorDialogClosedEventArgs object that contains event data.
 */
interface ASPxClientHtmlEditorDialogClosedEventHandler<Sender> { (source: Sender, e: ASPxClientHtmlEditorDialogClosedEventArgs): void; }
/**
 * Provides data for the ASPxClientHtmlEditor.DialogClosed event.
 */
declare class ASPxClientHtmlEditorDialogClosedEventArgs extends ASPxClientHtmlEditorDialogCloseEventArgs {
}
/**
 * A method that will handle the client ASPxClientHtmlEditor.CommandExecuted event.
 * @param source The event's source.
 * @param e An ASPxClientHtmlEditorCommandExecutingEventArgs object that contains event data.
 */
interface ASPxClientHtmlEditorCommandExecutingEventHandler<Sender> { (source: Sender, e: ASPxClientHtmlEditorCommandExecutingEventArgs): void; }
/**
 * Provides data for the ASPxClientHtmlEditor.CommandExecuting event.
 */
declare class ASPxClientHtmlEditorCommandExecutingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientHtmlEditorCommandExecutingEventArgs object with the specified settings.
     * @param commandName A string value that identifies the command currently being executed. Initializes the ASPxClientHtmlEditorCommandExecutingEventArgs.commandName property.
     * @param parameter An object that contains the command specific information needed for handling the command execution. Initializes the ASPxClientHtmlEditorCommandExecutingEventArgs.parameter property.
     */
    constructor(commandName: string, parameter: any);
    /**
     * Gets the name of the processed command.
     */
    commandName: string;
    /**
     * Gets an optional parameter that complements the processed command.
     */
    parameter: any;
}
/**
 * A method that will handle the corresponding client event.
 * @param source The event source. This parameter identifies the editor which raised the event.
 * @param e An ASPxClientHtmlEditorCommandEventArgs object that contains event data.
 */
interface ASPxClientHtmlEditorCommandEventHandler<Sender> { (source: Sender, e: ASPxClientHtmlEditorCommandEventArgs): void; }
/**
 * Provides data for client events that relate to command processing (ASPxClientHtmlEditor.CommandExecuted, ASPxClientHtmlEditor.CustomCommand).
 */
declare class ASPxClientHtmlEditorCommandEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientHtmlEditorCommandEventArgs object with the specified settings. For internal use only.
     * @param commandName A string value that identifies the executed command. Initializes the ASPxClientHtmlEditorCommandEventArgs.commandName property.
     * @param parameter An object that can contain a command specific infomation needed for handling of the command execution. Initializes the ASPxClientHtmlEditorCommandEventArgs.parameter property.
     */
    constructor(commandName: string, parameter: any);
    /**
     * Gets the name of the processed command.
     */
    commandName: string;
    /**
     * Gets an optional parameter that complements the processed command.
     */
    parameter: any;
}
/**
 * A method that will handle the client ASPxClientHtmlEditor.CustomDialogOpened event.
 * @param source An object representing the event's source.
 * @param e An ASPxClientHtmlEditorCustomDialogEventArgs object that contains event data.
 */
interface ASPxClientHtmlEditorCustomDialogEventHandler<Sender> { (source: Sender, e: ASPxClientHtmlEditorCustomDialogEventArgs): void; }
/**
 * Provides data for client events that relate to custom dialog operations.
 */
declare class ASPxClientHtmlEditorCustomDialogEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientHtmlEditorCustomDialogEventArgs class.
     * @param name A string value that specifies the custom dialog's name. Initializes the ASPxClientHtmlEditorCustomDialogEventArgs.name property.
     */
    constructor(name: string);
    /**
     * Gets the name that uniquely identifies the processed custom dialog.
     */
    name: string;
}
/**
 * Provides data for client events that relate to closing a custom dialog.
 */
declare class ASPxClientHtmlEditorCustomDialogCloseEventArgsBase extends ASPxClientHtmlEditorCustomDialogEventArgs {
    /**
     * Initializes a new instance of the ASPxClientHtmlEditorCustomDialogCloseEventArgsBase class with the specified settings.
     * @param name A string value that specifies the custom dialog's name. This value is assigned to the ASPxClientHtmlEditorCustomDialogEventArgs.name property.
     * @param status An object that specifies a status that is returned to the parent control when the custom dialog is closed. This value is assigned to the ASPxClientHtmlEditorCustomDialogCloseEventArgsBase.status property.
     */
    constructor(name: string, status: any);
    /**
     * Gets the status of the closed custom dialog.
     */
    status: any;
}
/**
 * A method that will handle the client ASPxClientHtmlEditor.CustomDialogClosing event.
 * @param source An object representing the event's source.
 * @param e An ASPxClientHtmlEditorCustomDialogClosingEventArgs object that contains event data.
 */
interface ASPxClientHtmlEditorCustomDialogClosingEventHandler<Sender> { (source: Sender, e: ASPxClientHtmlEditorCustomDialogClosingEventArgs): void; }
/**
 * Provides data for the ASPxClientHtmlEditor.CustomDialogClosing client event.
 */
declare class ASPxClientHtmlEditorCustomDialogClosingEventArgs extends ASPxClientHtmlEditorCustomDialogCloseEventArgsBase {
    /**
     * Initializes a new instance of the ASPxClientHtmlEditorCustomDialogClosingEventArgs class with the specified settings.
     * @param name A string value that specifies the custom dialog's name. This value is assigned to the ASPxClientHtmlEditorCustomDialogEventArgs.name property.
     * @param status An object that specifies a status that is returned to the parent control when the custom dialog is closed. This value is assigned to the ASPxClientHtmlEditorCustomDialogCloseEventArgsBase.status property.
     */
    constructor(name: string, status: any);
    /**
     * Gets or sets a value specifying whether the event was handled.
     */
    handled: boolean;
}
/**
 * A method that will handle the client ASPxClientHtmlEditor.CustomDialogClosed event.
 * @param source An object representing the event's source.
 * @param e An ASPxClientHtmlEditorCustomDialogClosedEventArgs object that contains event data.
 */
interface ASPxClientHtmlEditorCustomDialogClosedEventHandler<Sender> { (source: Sender, e: ASPxClientHtmlEditorCustomDialogClosedEventArgs): void; }
/**
 * Provides data for the ASPxClientHtmlEditor.CustomDialogClosed client event.
 */
declare class ASPxClientHtmlEditorCustomDialogClosedEventArgs extends ASPxClientHtmlEditorCustomDialogCloseEventArgsBase {
    /**
     * Initializes a new instance of the ASPxClientHtmlEditorCustomDialogClosedEventArgs class with the specified settings.
     * @param name A string value that specifies the custom dialog's name. This value is assigned to the ASPxClientHtmlEditorCustomDialogEventArgs.name property.
     * @param status An object that specifies a status that is returned to the parent control when the custom dialog is closed. This value is assigned to the ASPxClientHtmlEditorCustomDialogCloseEventArgsBase.status property.
     * @param data An object that specifies the data that is returned to the parent control when the custom dialog is closed. This value is assigned to the ASPxClientHtmlEditorCustomDialogClosedEventArgs.data property.
     */
    constructor(name: string, status: any, data: any);
    /**
     * Gets an object associated with the closed dialog.
     */
    data: any;
}
/**
 * A method that will handle the client ASPxClientHtmlEditor.Validation event.
 * @param source An object representing the event's source.
 * @param e An ASPxClientHtmlEditorValidationEventArgs object that contains event data.
 */
interface ASPxClientHtmlEditorValidationEventHandler<Sender> { (source: Sender, e: ASPxClientHtmlEditorValidationEventArgs): void; }
/**
 * Provides data for the ASPxClientHtmlEditor.Validation client event.
 */
declare class ASPxClientHtmlEditorValidationEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientHtmlEditorValidationEventArgs class.
     * @param html A string value that specifies the HTML content to validate. This value is assigned to the ASPxClientHtmlEditorValidationEventArgs.html property.
     * @param isValid true if the validation has been completed successfully; otherwise, false. This value is assigned to the ASPxClientHtmlEditorValidationEventArgs.isValid property.
     * @param errorText A string value representing the error description. This value is assigned to the ASPxClientHtmlEditorValidationEventArgs.errorText property.
     */
    constructor(html: string, isValid: boolean, errorText: boolean);
    /**
     * Gets or sets the HTML markup that is the ASPxHtmlEditor's content.
     */
    html: string;
    /**
     * Gets or sets a value specifying whether the validated value is valid.
     */
    isValid: boolean;
    /**
     * Gets or sets the error text to be displayed within the editor's error frame if the editor's validation fails.
     */
    errorText: string;
}
/**
 * A method that will handle the client ASPxClientHtmlEditor.ActiveTabChanged event.
 * @param source The event's source.
 * @param e An ASPxClientHtmlEditorTabEventArgs object that contains event data.
 */
interface ASPxClientHtmlEditorTabEventHandler<Sender> { (source: Sender, e: ASPxClientHtmlEditorTabEventArgs): void; }
/**
 * Provides data for the ASPxClientHtmlEditor.ActiveTabChanged event that concerns manipulations on tabs.
 */
declare class ASPxClientHtmlEditorTabEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new object of the ASPxClientHtmlEditorTabEventArgs type with the specified setting.
     * @param name A string value that uniquely identifies the name of a tab related to the event.
     */
    constructor(name: string);
    /**
     * Gets the name that uniquely identifies an editor tab.
     */
    name: string;
}
/**
 * A method that will handle the client ASPxClientHtmlEditor.ActiveTabChanging event.
 * @param source The event's source.
 * @param e An ASPxClientHtmlEditorTabCancelEventArgs object that contains event data.
 */
interface ASPxClientHtmlEditorTabCancelEventHandler<Sender> { (source: Sender, e: ASPxClientHtmlEditorTabCancelEventArgs): void; }
/**
 * Provides data for the cancellable ASPxClientHtmlEditor.ActiveTabChanging event that concerns manipulations on tabs.
 */
declare class ASPxClientHtmlEditorTabCancelEventArgs extends ASPxClientHtmlEditorTabEventArgs {
    /**
     * Initializes a new object of the ASPxClientHtmlEditorTabCancelEventArgs type with the specified setting.
     * @param name A string value that uniquely identifies the name of a tab related to the event.
     */
    constructor(name: string);
    /**
     * Gets or sets a value indicating whether the action which raised the event, should be canceled.
     */
    cancel: boolean;
}
/**
 * A method that will handle the ASPxClientHtmlEditor.BeforePaste event.
 * @param source The event source. This parameter identifies the HTML editor object that raised the event.
 * @param e An ASPxClientHtmlEditorBeforePasteEventArgs object that contains event data.
 */
interface ASPxClientHtmlEditorBeforePasteEventHandler<Sender> { (source: Sender, e: ASPxClientHtmlEditorBeforePasteEventArgs): void; }
/**
 * Provides data for the ASPxClientHtmlEditor.BeforePaste event.
 */
declare class ASPxClientHtmlEditorBeforePasteEventArgs extends ASPxClientEventArgs {
    /**
     * Initialize a new instance of the ASPxClientHtmlEditorBeforePasteEventArgs class with the specified settings.
     * @param commandName A string value identifying the command's name.
     * @param html A string value that specifies the HTML content to paste.
     */
    constructor(commandName: string, html: string);
    /**
     * Gets the name of the processed command.
     */
    commandName: string;
    /**
     * Gets or sets the HTML markup that is about to be pasted to the ASPxHtmlEditor's content.
     */
    html: string;
}
/**
 * Represents a client-side equivalent of the ASPxHtmlEditor control.
 */
declare class ASPxClientHtmlEditor extends ASPxClientControl {
    /**
     * Occurs on the client side after a dialog has been initialized.
     */
    DialogInitialized: ASPxClientEvent<ASPxClientHtmlEditorDialogInitializedEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Fires on the client side before a dialog is going to be closed.
     */
    DialogClosing: ASPxClientEvent<ASPxClientHtmlEditorDialogClosingEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Occurs on the client side after a dialog is closed.
     */
    DialogClosed: ASPxClientEvent<ASPxClientHtmlEditorDialogClosedEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Occurs before a default or custom command has been executed and allows you to cancel the action.
     */
    CommandExecuting: ASPxClientEvent<ASPxClientHtmlEditorCommandExecutingEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Enables you to implement a custom command's logic.
     */
    CustomCommand: ASPxClientEvent<ASPxClientHtmlEditorCommandEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Occurs after a default or custom command has been executed on the client side.
     */
    CommandExecuted: ASPxClientEvent<ASPxClientHtmlEditorCommandEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Fires on the client side when the editor's Design View Area receives input focus.
     */
    GotFocus: ASPxClientEvent<ASPxClientEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Fires on the client side when the editor's Design View Area loses input focus.
     */
    LostFocus: ASPxClientEvent<ASPxClientEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Occurs on the client when a selection is changed within the ASPxHtmlEditor.
     */
    SelectionChanged: ASPxClientEvent<ASPxClientEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Occurs on the client side when the content of the editor changes.
     */
    HtmlChanged: ASPxClientEvent<ASPxClientEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Occurs on the client side after a custom dialog is opened.
     */
    CustomDialogOpened: ASPxClientEvent<ASPxClientHtmlEditorCustomDialogEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Fires on the client side before a custom dialog is closed.
     */
    CustomDialogClosing: ASPxClientEvent<ASPxClientHtmlEditorCustomDialogClosingEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Occurs on the client side after a custom dialog is closed.
     */
    CustomDialogClosed: ASPxClientEvent<ASPxClientHtmlEditorCustomDialogClosedEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Allows you to specify whether the value entered into the ASPxHtmlEditor is valid.
     */
    Validation: ASPxClientEvent<ASPxClientHtmlEditorValidationEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Occurs on the client side before a context menu is shown.
     */
    ContextMenuShowing: ASPxClientEvent<ASPxClientEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientHtmlEditor.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Fires after a callback, sent by the ASPxClientHtmlEditor.PerformDataCallback method, has been processed within the ASPxHtmlEditor.CustomDataCallback event handler.
     */
    CustomDataCallback: ASPxClientEvent<ASPxClientCustomDataCallbackEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Occurs on the client side after the editor content is spell checked.
     */
    SpellingChecked: ASPxClientEvent<ASPxClientEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Fires on the client side after the active tab has been changed within a control.
     */
    ActiveTabChanged: ASPxClientEvent<ASPxClientHtmlEditorTabEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Fires on the client side before the active tab is changed within a control.
     */
    ActiveTabChanging: ASPxClientEvent<ASPxClientHtmlEditorTabCancelEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Occurs before an HTML code is pasted to editor content, and allows you to modify it.
     */
    BeforePaste: ASPxClientEvent<ASPxClientHtmlEditorBeforePasteEventHandler<ASPxClientHtmlEditor>>;
    /**
     * Returns the document object generated by an iframe element within a design view area.
     */
    GetDesignViewDocument(): any;
    /**
     * Provides access to the client ASPxPopupControl object that is a Html Editor's dialog.
     */
    GetDialogPopupControl(): ASPxClientPopupControl;
    /**
     * Returns the document object generated by an iframe element within a preview area.
     */
    GetPreviewDocument(): any;
    /**
     * Returns a collection of client context menu objects.
     */
    GetContextMenu(): ASPxClientPopupMenu;
    /**
     * Returns a value indicating whether an editor is enabled.
     */
    GetEnabled(): boolean;
    /**
     * Specifies whether an editor is enabled.
     * @param value true to enable the editor; false to disable it.
     */
    SetEnabled(value: boolean): void;
    /**
     * Sets input focus to the ASPxHtmlEditor's edit region.
     */
    Focus(): void;
    /**
     * Gets the HTML markup that represents the editor's content.
     */
    GetHtml(): string;
    /**
     * Sets the HTML markup that represents the editor's content.
     * @param html A string value that specifies the HTML markup.
     * @param clearUndoHistory true to clear the undo stack; otherwise, false.
     */
    SetHtml(html: string, clearUndoHistory?: boolean): void;
    /**
     * Replaces placeholders with the specified values. A string value that is the resulting HTML code with the placeholders replaced.
     * @param html A string value that specifies the HTML code to process.
     * @param placeholders An array of objects that specify the placeholders and values to replace them.
     */
    ReplacePlaceholders(html: string, placeholders: any[]): string;
    /**
     * Creates a parameter for ASPxHtmlEditor's client-side commands related to changing media elements. An ASPxClientHtmlEditorChangeMediaElementCommandArguments object which contains the current settings of the changed element.
     * @param element An element that is being changed.
     */
    CreateChangeMediaElementCommandArguments(element: any): ASPxClientHtmlEditorChangeMediaElementCommandArguments;
    /**
     * Executes the specified command. true, if the specified command has been completed successfully; otherwise, false.
     * @param commandName A string value that specifies the command to perform.
     * @param parameter A string value specifying additional information about the command to perform.
     * @param addToUndoHistory true, to add the specified command to the undo stack; otherwise, false.
     */
    ExecuteCommand(commandName: string, parameter: any, addToUndoHistory: boolean): boolean;
    /**
     * Adds the current editor state to the undo/redo history.
     */
    SaveToUndoHistory(): void;
    /**
     * Returns the selection in the ASPxHtmlEditor.
     */
    GetSelection(): ASPxClientHtmlEditorSelection;
    /**
     * Restores the selection within the ASPxHtmlEditor.
     */
    RestoreSelection(): boolean;
    /**
     * Sets the value of the combo box within the HtmlEditor on the client side.
     * @param commandName A string value that identifies the combo box's command name within the HtmlEditor's control collection.
     * @param value A string value that specifies the combo box's new value.
     */
    SetToolbarComboBoxValue(commandName: string, value: string): void;
    /**
     * Sets the value of the dropdown item picker in the HtmlEditor on the client side.
     * @param commandName A string value that identifies the dropdown item picker by its command name. This value is contained in the ToolbarDropDownItemPicker.CommandName property.
     * @param value A string value that specifies the dropdown item picker's new value, i.e., the ToolbarCustomItem.Value property value of the newly selected ToolbarItemPickerItem object.
     */
    SetToolbarDropDownItemPickerValue(commandName: string, value: string): void;
    /**
     * Specifies the visibility of a ribbon context tab category specified by its name.
     * @param categoryName A String value that is the RibbonContextTabCategory.Name property value of the required category.
     * @param active true to make a category visible; false to make it hidden.
     */
    SetRibbonContextTabCategoryVisible(categoryName: string, active: string): void;
    /**
     * Provides access to an object implementing the HtmlEditor's ribbon UI.
     */
    GetRibbon(): ASPxClientRibbon;
    /**
     * Gets a value that indicates whether the editor's value passes validation.
     */
    GetIsValid(): boolean;
    /**
     * Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
     */
    GetErrorText(): string;
    /**
     * Sets a value that specifies whether the editor's value passes validation.
     * @param isValid true if the editor's value passes validation; otherwise, false.
     */
    SetIsValid(isValid: boolean): void;
    /**
     * Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
     * @param errorText A string value representing the error text.
     */
    SetErrorText(errorText: string): void;
    /**
     * Performs validation of the editor's content.
     */
    Validate(): void;
    /**
     * Returns a toolbar specified by its name. An ASPxClientMenu object that is the toolbar with the specified name.
     * @param name A string value specifying the toolbar name.
     */
    GetToolbarByName(name: string): ASPxClientMenu;
    /**
     * Set an active tab specified by its name.
     * @param name A string value that is the name of the tab.
     */
    SetActiveTabByName(name: string): void;
    /**
     * Returns the name of the active HTML editor tab.
     */
    GetActiveTabName(): string;
    /**
     * Reconnect the control to an external ribbon.
     */
    ReconnectToExternalRibbon(): void;
    /**
     * Sends a callback to the server and generates the server-side ASPxHtmlEditor.CustomDataCallback event passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side ASPxHtmlEditor.CustomDataCallback event.
     * @param onCallback A ASPxClientDataCallback object that represents the JavaScript function which receives the callback data as a parameter.
     */
    PerformDataCallback(parameter: string, onCallback: ASPxClientDataCallback): void;
    /**
     * Converts the specified object to the ASPxClientHtmlEditor type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientHtmlEditor;
    /**
     * Programmatically closes a custom dialog, supplying it with specific parameters.
     * @param status An object representing a custom dialog's closing status.
     * @param data An object representing custom data associated with a custom dialog.
     */
    static CustomDialogComplete(status: any, data: any): void;
    /**
     * Highlights the text with the specified text color and background color.
     * @param text A string value specifying the text to be highlighted.
     * @param searchContainer An object specifying the container where the specified text should be searched.
     * @param color A string value specifying the text color.
     * @param backgroundColor A string value specifying the background color.
     */
    static HighlightText(text: string, searchContainer: any, color?: string, backgroundColor?: string): void;
}
/**
 * Provides client functionality for dialogs within the  ASPxHtmlEditor.
 */
declare class ASPxClientHtmlEditorDialogBase {
    /**
     * Provides access to the client ASPxFormLayout object that arranges all editors in the Html Editor's dialogs.
     */
    GetFormLayout(): ASPxClientFormLayout;
    /**
     * Provides access to the client object of the "OK" button in the Html Editor's dialogs.
     */
    GetOkButton(): ASPxClientButton;
    /**
     * Provides access to the client object of the "Cancel" button in the Html Editor's dialogs.
     */
    GetCancelButton(): ASPxClientButton;
}
/**
 * Provides client functionality for Html Editor dialogs operated with its elements.
 */
declare class ASPxClientHtmlEditorEditElementDialog extends ASPxClientHtmlEditorDialogBase {
    /**
     * Provides access to the client object of the "Border style" combo box in the Html Editor's dialogs (Style Settings).
     */
    GetBorderStyleComboBox(): ASPxClientComboBox;
    /**
     * Provides access to the client object of the "Border width" spin editor in the Html Editor's dialogs (Style Settings).
     */
    GetBorderWidthSpinEdit(): ASPxClientSpinEdit;
    /**
     * Provides access to the client object of the "Border color" color editor in the Html Editor's dialogs (Style Settings).
     */
    GetBorderColorColorEdit(): ASPxClientColorEdit;
    /**
     * Provides access to the client object of the "Top margin" text box in the Html Editor's dialogs (Style Settings).
     */
    GetTopMarginTextBox(): ASPxClientTextBox;
    /**
     * Provides access to the client object of the "Bottom margin" text box in the Html Editor's dialogs (Style Settings).
     */
    GetBottomMarginTextBox(): ASPxClientTextBox;
    /**
     * Provides access to the client object of the "Left margin" text box in the Html Editor's dialogs (Style Settings).
     */
    GetLeftMarginTextBox(): ASPxClientTextBox;
    /**
     * Provides access to the client object of the "Right margin" text box in the Html Editor's dialogs (Style Settings).
     */
    GetRightMarginTextBox(): ASPxClientTextBox;
    /**
     * Provides access to the client object of the "CSS class" combo box in the Html Editor's dialogs (Style Settings).
     */
    GetCssClassNameComboBox(): ASPxClientComboBox;
}
/**
 * Provides client functionality for the Change Element Properties dialog within the  ASPxHtmlEditor.
 */
declare class ASPxClientHtmlEditorChangeElementPropertiesDialog extends ASPxClientHtmlEditorEditElementDialog {
    /**
     * Provides access to the client object of the "ID" text box in the Html Editor's "Change Element Properties" dialog.
     */
    GetIdTextBox(): ASPxClientTextBox;
    /**
     * Provides access to the client object of the "Title" text box in the Html Editor's "Change Element Properties" dialog.
     */
    GetTitleTextBox(): ASPxClientTextBox;
    /**
     * Provides access to the client object of the "Direction" combo box in the Html Editor's "Change Element Properties" dialog.
     */
    GetDirectionComboBox(): ASPxClientComboBox;
    /**
     * Provides access to the client object of the "Value" text box in the Html Editor's "Change Element Properties" dialog.
     */
    GetValueTextBox(): ASPxClientTextBox;
    /**
     * Provides access to the client object of the "Tab index" text box in the Html Editor's "Change Element Properties" dialog.
     */
    GetTabIndexTextBox(): ASPxClientTextBox;
    /**
     * Provides access to the client object of the "Disabled" check box in the Html Editor's "Change Element Properties" dialog.
     */
    GetDisabledCheckBox(): ASPxClientCheckBox;
    /**
     * Provides access to the client object of the "Input type" combo box in the Html Editor's "Change Element Properties" dialog.
     */
    GetInputTypeComboBox(): ASPxClientComboBox;
    /**
     * Provides access to the client object of the "For" text box in the Html Editor's "Change Element Properties" dialog.
     */
    GetForTextBox(): ASPxClientTextBox;
    /**
     * Provides access to the client object of the "Name" text box in the Html Editor's "Change Element Properties" dialog.
     */
    GetNameTextBox(): ASPxClientTextBox;
    /**
     * Provides access to the client object of the "Method" text box in the Html Editor's "Change Element Properties" dialog.
     */
    GetMethodTextBox(): ASPxClientTextBox;
    /**
     * Provides access to the client object of the "Action" text box in the Html Editor's "Change Element Properties" dialog.
     */
    GetActionTextBox(): ASPxClientTextBox;
    /**
     * Provides access to the client object of the "Checked" check box in the Html Editor's "Change Element Properties" dialog.
     */
    GetCheckedCheckBox(): ASPxClientCheckBox;
    /**
     * Provides access to the client object of the "Max length" text box in the Html Editor's "Change Element Properties" dialog.
     */
    GetMaxLengthTextBox(): ASPxClientTextBox;
    /**
     * Provides access to the client object of the "Size" text box in the Html Editor's "Change Element Properties" dialog.
     */
    GetSizeTextBox(): ASPxClientTextBox;
    /**
     * Provides access to the client object of the "Readonly" check box in the Html Editor's "Change Element Properties" dialog.
     */
    GetReadonlyCheckBox(): ASPxClientCheckBox;
    /**
     * Provides access to the client object of the "Src" text box in the Html Editor's "Change Element Properties" dialog.
     */
    GetSrcTextBox(): ASPxClientTextBox;
    /**
     * Provides access to the client object of the "Accept" text box in the Html Editor's "Change Element Properties" dialog.
     */
    GetAcceptTextBox(): ASPxClientTextBox;
    /**
     * Provides access to the client object of the "Alt" text box in the Html Editor's "Change Element Properties" dialog.
     */
    GetAltTextBox(): ASPxClientTextBox;
    /**
     * Provides access to the client object of the "Start" spin editor in the Html Editor's "Change Element Properties" dialog.
     */
    GetStartSpinEdit(): ASPxClientTextBox;
    /**
     * Provides access to the client object of the "Width" spin editor in the Html Editor's "Change Element Properties" dialog.
     */
    GetWidthValueSpinEdit(): ASPxClientSpinEdit;
    /**
     * Provides access to the client ASPxComboBox object that allows you to specify the element width measurement unit in the Html Editor's "Change Element Properties" dialog.
     */
    GetWidthValueTypeComboBox(): ASPxClientComboBox;
    /**
     * Provides access to the client object of the "Height" spin editor in the Html Editor's "Change Element Properties" dialog.
     */
    GetHeightValueSpinEdit(): ASPxClientSpinEdit;
    /**
     * Provides access to the client ASPxComboBox object that allows to specify the element height measurement unit in the Html Editor's "Change Element Properties" dialog.
     */
    GetHeightValueTypeComboBox(): ASPxClientComboBox;
}
/**
 * Provides client functionality for the Link dialog within the ASPxHtmlEditor.
 */
declare class ASPxClientHtmlEditorLinkDialog extends ASPxClientHtmlEditorDialogBase {
    /**
     * Provides access to the client object of the "E-mail to" text box in the Html Editor's Link dialog.
     */
    GetEmailTextBox(): ASPxClientTextBox;
    /**
     * Provides access to the client object of the "Text" text box in the Html Editor's Link dialog.
     */
    GetTextTextBox(): ASPxClientTextBox;
    /**
     * Provides access to the client object of the "ToolTip" text box in the Html Editor's Link dialog.
     */
    GetTooltipTextBox(): ASPxClientTextBox;
    /**
     * Provides access to the client object of the "Subject" text box in the Html Editor's Link dialog.
     */
    GetSubjectTextBox(): ASPxClientTextBox;
    /**
     * Provides access to the client object of the "URL" text box in the Html Editor's Link dialog.
     */
    GetUrlTextBox(): ASPxClientTextBox;
    /**
     * Provides access to the client object of the file manager used in the Link dialog's "Select Document" popup window.
     */
    GetFileManager(): ASPxClientFileManager;
    /**
     * Provides access to the client object of the "Cancel" button in the Link dialog's "Select Document" popup window.
     */
    GetSelectDocumentPopupCancelButton(): ASPxClientButton;
    /**
     * Provides access to the client object of the "Select" button in the Link dialog's "Select Document" popup window.
     */
    GetSelectDocumentPopupSelectButton(): ASPxClientButton;
    /**
     * Provides access to the client popup control object that is the "Select Document" popup window in the Html Editor's Link dialog.
     */
    GetSelectDocumentPopupControl(): ASPxClientPopupControl;
    /**
     * Provides access to the client object of the "Open in new window" check box in the Html Editor's Link dialog.
     */
    GetOpenInNewWindowCheckBox(): ASPxClientCheckBox;
    /**
     * Provides access to the client radio button list object used to specify the link type in the Html Editor's Link dialog.
     */
    GetLinkTypeRadioButtonList(): ASPxClientRadioButtonList;
}
/**
 * Provides client functionality for the Placeholder dialog within the ASPxHtmlEditor.
 */
declare class ASPxClientHtmlEditorPlaceholderDialog extends ASPxClientHtmlEditorDialogBase {
    /**
     * Provides access to the ASPxListBox client object that lists placeholder names in the Html Editor's Placeholder dialog.
     */
    GetPlaceholderNameListBox(): ASPxClientListBox;
}
/**
 * Provides client functionality for the Paste From Word dialog within the ASPxHtmlEditor.
 */
declare class ASPxClientHtmlEditorPasteFromWordDialog extends ASPxClientHtmlEditorDialogBase {
    /**
     * Provides access to the client object of the "Remove font family" check box in the Html Editor's Flash dialog.
     */
    GetRemoveFontFamilyCheckBox(): ASPxClientCheckBox;
}
/**
 * Provides client functionality for the media dialogs within the ASPxHtmlEditor.
 */
declare class ASPxClientHtmlEditorMediaDialogBase extends ASPxClientHtmlEditorEditElementDialog {
    /**
     * Provides access to the client object of the media file selector that allows you to insert/change media files in the Html Editor's Audio/Video/Flash dialogs.
     */
    GetMediaFileSelector(): ASPxClientMediaFileSelector;
    /**
     * Provides access to the client object of the "More options" check box in the Html Editor's Audio/Video/Flash/Image dialogs.
     */
    GetMoreOptionsCheckBox(): ASPxClientCheckBox;
    /**
     * Provides access to the client object of the "Width" spin editor in the Html Editor's Audio/Video/Flash dialogs.
     */
    GetWidthSpinEdit(): ASPxClientSpinEdit;
    /**
     * Provides access to the client object of the "Height" spin editor in the Html Editor's Audio/Video/Flash dialogs.
     */
    GetHeightSpinEdit(): ASPxClientSpinEdit;
    /**
     * Provides access to the client object of the "Position" combo box in the Html Editor's Audio/Video/Flash/Image dialogs.
     */
    GetPositionComboBox(): ASPxClientComboBox;
}
/**
 * Provides client functionality for the Image dialog within the  ASPxHtmlEditor.
 */
declare class ASPxClientHtmlEditorImageDialog extends ASPxClientHtmlEditorMediaDialogBase {
    /**
     * Provides access to the client object of the "Size" combo box in the Html Editor's Image dialog.
     */
    GetSizeComboBox(): ASPxClientComboBox;
    /**
     * Provides access to the client object of the "Create thumbnail" check box in the Html Editor's Image dialog.
     */
    GetCreateThumbnailCheckBox(): ASPxClientCheckBox;
    /**
     * Provides access to the client object of the "New image name" text box in the Html Editor's Image dialog.
     */
    GetThumbnailNameTextBox(): ASPxClientTextBox;
    /**
     * Provides access to the client object of the "Wrap text around image" check box in the Html Editor's Image dialog.
     */
    GetWrapTextCheckBox(): ASPxClientCheckBox;
    /**
     * Provides access to the client object of the "Description" text box in the Html Editor's Image dialog.
     */
    GetDescriptionTextBox(): ASPxClientTextBox;
}
/**
 * Provides client functionality for the Flash dialog within the  ASPxHtmlEditor.
 */
declare class ASPxClientHtmlEditorFlashDialog extends ASPxClientHtmlEditorMediaDialogBase {
    /**
     * Provides access to the client object of the "Quality" combo box in the Html Editor's Flash dialog.
     */
    GetQualityComboBox(): ASPxClientComboBox;
    /**
     * Provides access to the client object of the "Auto play" check box in the Html Editor's Flash dialog.
     */
    GetAutoPlayCheckBox(): ASPxClientCheckBox;
    /**
     * Provides access to the client object of the "Enable flash menu" check box in the Html Editor's Flash dialog.
     */
    GetEnableFlashMenuCheckBox(): ASPxClientCheckBox;
    /**
     * Provides access to the client object of the "Loop" check box in the Html Editor's Flash dialog.
     */
    GetLoopCheckBox(): ASPxClientCheckBox;
    /**
     * Provides access to the client object of the "Allow fullscreen" check box in the Html Editor's Flash dialog.
     */
    GetAllowFullscreenCheckBox(): ASPxClientCheckBox;
}
/**
 * Provides client functionality for the Audio dialog within the  ASPxHtmlEditor.
 */
declare class ASPxClientHtmlEditorAudioDialog extends ASPxClientHtmlEditorMediaDialogBase {
    /**
     * Provides access to the client object of the "Auto play" check box in the Html Editor's Audio dialogs.
     */
    GetAutoPlayCheckBox(): ASPxClientCheckBox;
    /**
     * Provides access to the client object of the "Preload mode" combo box in the Html Editor's Audio dialogs.
     */
    GetPreloadModeComboBox(): ASPxClientComboBox;
    /**
     * Provides access to the client object of the "Loop" check box in the Html Editor's Audio dialogs.
     */
    GetLoopCheckBox(): ASPxClientCheckBox;
    /**
     * Provides access to the client object of the "Show player controls" check box in the Html Editor's Audio dialogs.
     */
    GetShowPlayerControlsCheckBox(): ASPxClientCheckBox;
}
/**
 * Provides client functionality for the Video dialog within the ASPxHtmlEditor.
 */
declare class ASPxClientHtmlEditorVideoDialog extends ASPxClientHtmlEditorMediaDialogBase {
    /**
     * Provides access to the client object of the "Auto play" check box in the Html Editor's Video dialog.
     */
    GetAutoPlayCheckBox(): ASPxClientCheckBox;
    /**
     * Provides access to the client object of the "Preload mode" combo box in the Html Editor's Video dialog.
     */
    GetPreloadModeComboBox(): ASPxClientComboBox;
    /**
     * Provides access to the client object of the "Loop" check box in the Html Editor's Video dialog.
     */
    GetLoopCheckBox(): ASPxClientCheckBox;
    /**
     * Provides access to the client object of the "Show player controls" check box in the Html Editor's Video dialog.
     */
    GetShowPlayerControlsCheckBox(): ASPxClientCheckBox;
    /**
     * Provides access to the client object of the "Poster URL" text box in the Html Editor's Video dialog.
     */
    GetPosterTextBox(): ASPxClientTextBox;
}
/**
 * Provides client functionality for the YouTube Video dialog within the ASPxHtmlEditor.
 */
declare class ASPxClientHtmlEditorYouTubeDialog extends ASPxClientHtmlEditorEditElementDialog {
    /**
     * Provides access to the client object of the "Enable privacy-enhanced mode" check box in the Html Editor's YouTube Video dialog.
     */
    GetConfidentModeCheckBox(): ASPxClientCheckBox;
    /**
     * Provides access to the client object of the "Show suggested videos when the video finishes" check box in the Html Editor's YouTube Video dialog.
     */
    GetShowSameVideosCheckBox(): ASPxClientCheckBox;
    /**
     * Provides access to the client object of the "Show video title and player actions" check box in the Html Editor's YouTube Video dialog.
     */
    GetShowVideoNameCheckBox(): ASPxClientCheckBox;
    /**
     * Provides access to the client object of the "Show player controls" check box in the Html Editor's YouTube Video dialog.
     */
    GetShowPlayerControlsCheckBox(): ASPxClientCheckBox;
    /**
     * Provides access to the client object of the "Allow fullscreen" check box in the Html Editor's "Insert YouTube Video" dialog.
     */
    GetAllowFullscreenCheckBox(): ASPxClientCheckBox;
}
/**
 * Provides base client functionality for the Table dialog within the ASPxHtmlEditor.
 */
declare class ASPxClientHtmlEditorTableDialogBase extends ASPxClientHtmlEditorDialogBase {
    /**
     * Provides access to the client object of the "Background color" color editor in the Html Editor's Table dialogs.
     */
    GetBackgroundColorColorEdit(): ASPxClientColorEdit;
}
/**
 * Provides client functionality for the Table dialog within the ASPxHtmlEditor.
 */
declare class ASPxClientHtmlEditorTableDialog extends ASPxClientHtmlEditorTableDialogBase {
    /**
     * Provides access to the client object of the "Width" combo box in the Html Editor's Table dialogs.
     */
    GetWidthTypeComboBox(): ASPxClientComboBox;
    /**
     * Provides access to the client object of the spin editor in the Html Editor's Table dialogs that allows you to specify the table width value.
     */
    GetWidthValueSpinEdit(): ASPxClientSpinEdit;
    /**
     * Provides access to the client object of the combo box in the Html Editor's Table dialogs that allows you to specify the table width measurement unit.
     */
    GetWidthValueTypeComboBox(): ASPxClientComboBox;
    /**
     * Provides access to the client object of the "Height" combo box in the Html Editor's Table dialogs.
     */
    GetHeightTypeComboBox(): ASPxClientComboBox;
    /**
     * Provides access to the client object of the spin editor in the Html Editor's Table dialogs that allows you specify the table height value.
     */
    GetHeightValueSpinEdit(): ASPxClientSpinEdit;
    /**
     * Provides access to the client object of the combo box in the Html Editor's Table dialogs that allows you to specify the table height measurement unit.
     */
    GetHeightValueTypeComboBox(): ASPxClientComboBox;
    /**
     * Provides access to the client object of the "Cell padding" spin editor in the Html Editor's Table dialogs.
     */
    GetCellPaddingSpinEdit(): ASPxClientSpinEdit;
    /**
     * Provides access to the client object of the "Cell spacing" spin editor in the Html Editor's Table dialogs.
     */
    GetCellSpacingSpinEdit(): ASPxClientSpinEdit;
    /**
     * Provides access to the client object of the "Alignment" combo box in the Html Editor's Table dialogs.
     */
    GetAlignmentComboBox(): ASPxClientComboBox;
    /**
     * Provides access to the client object of the "Border Color" color editor in the Html Editor's Table dialogs.
     */
    GetBorderColorColorEdit(): ASPxClientColorEdit;
    /**
     * Provides access to the client object of the "Border size" spin editor in the Html Editor's Table dialogs.
     */
    GetBorderWidthSpinEdit(): ASPxClientSpinEdit;
    /**
     * Provides access to the client object of the "Headers" combo box in the Html Editor's Table dialogs.
     */
    GetHeadersComboBox(): ASPxClientComboBox;
    /**
     * Provides access to the client object of the "Caption" text box in the Html Editor's Table dialogs.
     */
    GetCaptionTextBox(): ASPxClientTextBox;
    /**
     * Provides access to the client object of the "Summary" text box in the Html Editor's Table dialogs.
     */
    GetSummaryTextBox(): ASPxClientTextBox;
    /**
     * Provides access to the client object of the "Accessibility" check box related to the Html Editor's Table dialogs.
     */
    GetAccessibilityCheckBox(): ASPxClientCheckBox;
}
/**
 * Provides client functionality for the Insert Table dialog within the  ASPxHtmlEditor.
 */
declare class ASPxClientHtmlEditorInsertTableDialog extends ASPxClientHtmlEditorTableDialog {
    /**
     * Provides access to the client object of the "Columns" spin editor in the Html Editor's Table dialogs.
     */
    GetColumnCountSpinEdit(): ASPxClientSpinEdit;
    /**
     * Provides access to the client object of the "Rows" spin editor in the Html Editor's Table dialogs.
     */
    GetRowCountSpinEdit(): ASPxClientSpinEdit;
    /**
     * Provides access to the client object of the "Equal column widths" check box in the Html Editor's Table dialogs.
     */
    GetEqualWidthCheckBox(): ASPxClientCheckBox;
}
/**
 * Provides client functionality for Table dialogs within the ASPxHtmlEditor.
 */
declare class ASPxClientHtmlEditorTableElementPropertiesDialog extends ASPxClientHtmlEditorTableDialogBase {
    /**
     * Provides access to the client object of the "Horizontal" combo box in the Html Editor's Row/Column/Cell Properties dialog's Alignment group.
     */
    GetHorizontalAlignmentComboBox(): ASPxClientComboBox;
    /**
     * Provides access to the client object of the "Vertical" combo box in the Html Editor's Row/Column/Cell Properties dialog's Alignment group.
     */
    GetVerticalAlignmentComboBox(): ASPxClientComboBox;
}
/**
 * Provides client functionality for the Cell Properties dialog within the ASPxHtmlEditor.
 */
declare class ASPxClientHtmlEditorTableCellPropertiesDialog extends ASPxClientHtmlEditorTableElementPropertiesDialog {
    /**
     * Provides access to the client object of the "Apply to all cells in the table" check box in the Html Editor's Cell Properties dialog.
     */
    GetApplyToAllCellsCheckBox(): ASPxClientCheckBox;
}
/**
 * Provides client functionality for the Row Properties dialog within the ASPxHtmlEditor.
 */
declare class ASPxClientHtmlEditorTableRowPropertiesDialog extends ASPxClientHtmlEditorTableElementPropertiesDialog {
    /**
     * Provides access to the client object of the "Height" combo box in the Html Editor's "Row Properties" dialog.
     */
    GetHeightTypeComboBox(): ASPxClientComboBox;
    /**
     * Provides access to the client ASPxSpinEdit object that allows you to specify the row height in the Html Editor's "Row Properties" dialog.
     */
    GetHeightValueSpinEdit(): ASPxClientSpinEdit;
    /**
     * Provides access to the client ASPxComboBox object that allows you to specify the row height measurement unit in the Html Editor's "Row Properties" dialog.
     */
    GetHeightValueTypeComboBox(): ASPxClientComboBox;
}
/**
 * Provides client functionality for the Column Properties dialog within the ASPxHtmlEditor.
 */
declare class ASPxClientHtmlEditorTableColumnPropertiesDialog extends ASPxClientHtmlEditorTableElementPropertiesDialog {
    /**
     * Provides access to the client object of the "Width" combo box in the Html Editor's "Column Properties" dialog.
     */
    GetWidthTypeComboBox(): ASPxClientComboBox;
    /**
     * Provides access to the client object of the spin editor that allows you to set the column width value in the Html Editor's "Column Properties" dialog.
     */
    GetWidthValueSpinEdit(): ASPxClientSpinEdit;
    /**
     * Provides access to the client object of the combo box that allows you to specify the column width measurement unit in the Html Editor's "Column Properties" dialog.
     */
    GetWidthValueTypeComboBox(): ASPxClientComboBox;
}
/**
 * Lists the values that specify how a media file should be loaded when the page loads.
 */
declare class ASPxClientHtmlEditorMediaPreloadMode {
    /**
     * The browser does not load a media file when the page loads.
     */
    static readonly None: string;
    /**
     * The browser loads the entire video when the page loads.
     */
    static readonly Auto: string;
    /**
     * The browser loads only metadata when the page loads.
     */
    static readonly Metadata: string;
}
/**
 * A selection in the ASPxHtmlEditor.
 */
declare class ASPxClientHtmlEditorSelection {
    /**
     * Returns a DOM element that relates to the current selection.
     */
    GetSelectedElement(): any;
    /**
     * Returns the HTML markup specifying the currently selected ASPxHtmlEditor content.
     */
    GetHtml(): string;
    /**
     * Returns the text within the currently selected ASPxHtmlEditor content.
     */
    GetText(): string;
    /**
     * Returns an array of the currently selected elements.
     */
    GetElements(): any[];
    /**
     * Sets the new HTML markup in place of the currently selected within ASPxHtmlEditor content.
     * @param html A string value specifying the new HTML markup.
     * @param addToHistory true to add this operation to the history; otherwise, false.
     */
    SetHtml(html: string, addToHistory: boolean): void;
}
declare class ASPxClientPivotGridControlCollection extends ASPxClientControlCollection {
    static GetPivotGridControlCollection(): ASPxClientPivotGridControlCollection;
}
/**
 * The client-side equivalent of the ASPxPivotGrid control.
 */
declare class ASPxClientPivotGrid extends ASPxClientControl {
    /**
     * Occurs on the client after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientPivotGrid>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientPivotGrid.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientPivotGrid>>;
    /** @deprecated Use the EndCallback event instead */
    /**
     * Fires after a callback that has been processed on the server returns back to the client.
     */
    AfterCallback: ASPxClientEvent<ASPxClientEventHandler<ASPxClientPivotGrid>>;
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientPivotGrid>>;
    /** @deprecated Use the BeginCallback event instead */
    /**
     * Fires before a callback is sent to the server for server-side processing.
     */
    BeforeCallback: ASPxClientEvent<ASPxClientEventHandler<ASPxClientPivotGrid>>;
    /**
     * Indicates whether the Defer Layout Update check box is enabled.
     */
    IsDeferUpdatesChecked(): boolean;
    /**
     * Indicates whether the Filter Editor (Prefilter) is visible.
     */
    IsPrefilterVisible(): boolean;
    /**
     * Shows the Filter Editor.
     */
    ShowPrefilter(): void;
    /**
     * Hides the Filter Editor.
     */
    HidePrefilter(): void;
    /**
     * Clears the filter expression applied using the Prefilter (Filter Editor).
     */
    ClearPrefilter(): void;
    /**
     * Enables or disables the current filter applied by the Filter Editor (Prefilter).
     */
    ChangePrefilterEnabled(): void;
    /**
     * Fires on the client side after the customization form's visible state has been changed.
     */
    CustomizationFieldsVisibleChanged: ASPxClientEvent<ASPxClientEventHandler<ASPxClientPivotGrid>>;
    /**
     * Occurs when a cell is clicked.
     */
    CellClick: ASPxClientEvent<ASPxClientClickEventHandler<ASPxClientPivotGrid>>;
    /**
     * Occurs when a cell is double clicked.
     */
    CellDblClick: ASPxClientEvent<ASPxClientClickEventHandler<ASPxClientPivotGrid>>;
    /**
     * Occurs when a custom menu item has been clicked.
     */
    PopupMenuItemClick: ASPxClientEvent<ASPxClientPivotMenuItemClickEventHandler<ASPxClientPivotGrid>>;
    /**
     * Returns a value that specifies whether the customization form is visible.
     */
    GetCustomizationFieldsVisibility(): boolean;
    /**
     * Specifies the visibility of the customization form.
     * @param value true to display the customization form; false to hide the customization form.
     */
    SetCustomizationFieldsVisibility(value: boolean): void;
    /**
     * Switches the customization form's visible state.
     */
    ChangeCustomizationFieldsVisibility(): void;
    /**
     * Sends a callback to the server and generates the server-side ASPxPivotGrid.CustomCallback event, passing it the specified argument.
     * @param args A string value that represents any information that needs to be sent to the server-side ASPxPivotGrid.CustomCallback event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(args: string, onSuccess?: (arg: string) => void): void;
    /**
     * Converts the specified object to the ASPxClientPivotGrid type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientPivotGrid;
}
/**
 * A method that will handle the ASPxClientPivotGrid.CellClick or ASPxClientPivotGrid.CellDblClick event.
 * @param source The event source.
 * @param e An ASPxClientClickEventArgs object that contains event data.
 */
interface ASPxClientClickEventHandler<Sender> { (source: Sender, e: ASPxClientClickEventArgs): void; }
/**
 * Provides data for the ASPxClientPivotGrid.CellClick and ASPxClientPivotGrid.CellDblClick client events.
 */
declare class ASPxClientClickEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientClickEventArgs class.
     * @param value An object that represents the processed cell's value. This value is assigned to the ASPxClientClickEventArgs.Value property.
     * @param columnIndex An integer value that identifies a column. This value is assigned to the ASPxClientClickEventArgs.ColumnIndex property.
     * @param rowIndex An integer value that identifies a row. This value is assigned to the ASPxClientClickEventArgs.RowIndex property.
     * @param columnValue An object that represents a column field value. This value is assigned to the ASPxClientClickEventArgs.ColumnValue property.
     * @param rowValue An object that represents a row field value. This value is assigned to the ASPxClientClickEventArgs.RowValue property.
     * @param columnFieldName A String value that represents a column field name. This value is assigned to the ASPxClientClickEventArgs.ColumnFieldName property.
     * @param rowFieldName A String value that represents a row field name. This value is assigned to the ASPxClientClickEventArgs.RowFieldName property.
     * @param columnValueType A String value that represents a column value type. This value is assigned to the ASPxClientClickEventArgs.ColumnValueType property.
     * @param rowValueType A String value that represents a row value type. This value is assigned to the ASPxClientClickEventArgs.RowValueType property.
     * @param dataIndex An integer value that identifies the data field by its index. This value is assigned to the ASPxClientClickEventArgs.DataIndex property.
     */
    constructor(value: any, columnIndex: number, rowIndex: number, columnValue: any, rowValue: any, columnFieldName: string, rowFieldName: string, columnValueType: string, rowValueType: string, dataIndex: number);
    /**
     * Provides access to the parameters associated with the ASPxClientPivotGrid.CellClick and ASPxClientPivotGrid.CellDblClick events.
     */
    HtmlEvent: any;
    /**
     * Gets the processed cell's value.
     */
    Value: any;
    /**
     * Gets the index of a column that owns the processed cell.
     */
    ColumnIndex: number;
    /**
     * Gets the index of a row that owns the processed cell.
     */
    RowIndex: number;
    /**
     * Gets a column field value.
     */
    ColumnValue: any;
    /**
     * Gets a row field value.
     */
    RowValue: any;
    /**
     * Gets a column field name.
     */
    ColumnFieldName: string;
    /**
     * Gets a row field name.
     */
    RowFieldName: string;
    /**
     * Gets a column value type.
     */
    ColumnValueType: string;
    /**
     * Gets a row value type.
     */
    RowValueType: string;
    /**
     * Gets the index of the data field which corresponds to the clicked summary value.
     */
    DataIndex: number;
}
/**
 * A method that will handle the ASPxClientPivotGrid.PopupMenuItemClick event.
 * @param source The event source.
 * @param e An ASPxClientPivotMenuItemClickEventArgs object that contains event data.
 */
interface ASPxClientPivotMenuItemClickEventHandler<Sender> { (source: Sender, e: ASPxClientPivotMenuItemClickEventArgs): void; }
/**
 * Provides data for the ASPxClientPivotGrid.PopupMenuItemClick event.
 */
declare class ASPxClientPivotMenuItemClickEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the context menu's type.
     */
    MenuType: string;
    /**
     * Gets the name of the menu item currently being clicked.
     */
    MenuItemName: string;
    /**
     * Gets the field's unique indentifier.
     */
    FieldID: string;
    /**
     * Gets the index of the field value for which the popup menu has been invoked.
     */
    FieldValueIndex: number;
    Area: string;
}
/**
 * A client-side equivalent of the ASPxPivotCustomizationControl control.
 */
declare class ASPxClientPivotCustomization extends ASPxClientControl {
    /**
     * Returns an HTML element that represents the root of the control's hierarchy.
     */
    GetMainContainer(): any;
    /**
     * Returns a client-side equivalent of the owner Pivot Grid Control.
     */
    GetPivotGrid(): ASPxClientPivotGrid;
    /**
     * Specifies the Customization Control's height.
     * @param value An integer value that specifies the Customization Control's height.
     */
    SetHeight(value: number): void;
    /**
     * Specifies the Customization Control's width.
     * @param value An integer value that specifies the Customization Control's width.
     */
    SetWidth(value: number): void;
    /**
     * Recalculates the Customization Control height.
     */
    UpdateHeight(): void;
    /**
     * Specifies the Customization Control's layout.
     * @param layout A string that specifies the Customization Control's layout.
     */
    SetLayout(layout: string): void;
}
/**
 * Lists file document formats.
 */
declare enum DocumentFormat {
    /**
     * The document's format is undefined.
     */
    Undefined = 0,
    /**
     * The plain text format.
     */
    PlainText = 1,
    /**
     * The Rich Text Format (RTF).
     */
    Rtf = 2,
    /**
     * The HTML format.
     */
    Html = 3,
    /**
     * The OpenXML file format (aka default MS Office 2007 format or .docx)
     */
    OpenXml = 4,
    /**
     * The MHT format - web page archive format used to save HTML code with resources represented by external links (images etc.), in a single file
     */
    Mht = 5,
    /**
     * The WordprocessingML format (.xml, implemented in MS Office 2003).
     */
    WordML = 6,
    /**
     * The OpenDocument text format (.odt, implemented by OpenOffice.org office suite).
     */
    OpenDocument = 7,
    /**
     * EPUB&#174; - standard format for electronic books and other digital publications.
     */
    ePub = 9,
    /**
     * MS Word 97-2003 binary file format.
     */
    Doc = 10
}
/**
 * Contains spell checking related settings.
 */
declare class SpellingInfo {
    /**
     * Gets a value specifying the spell checking state.
     */
    readonly spellCheckerState: SpellCheckerState;
    /**
     * Provides access to an array containing misspelled intervals.
     */
    readonly misspelledIntervals: MisspelledInterval[];
}
/**
 * Lists values specifying the spell checking state.
 */
declare enum SpellCheckerState {
    /**
     * Spell checking is disabled.
     */
    Disabled = 0,
    /**
     * Spell checking is in progress.
     */
    InProgress = 1,
    /**
     * Spell checking is completed.
     */
    Done = 2
}
/**
 * Contains the settings defining a misspelled interval.
 */
declare class MisspelledInterval {
    /**
     * Gets the start position of the misspelled word in the interval.
     */
    readonly start: number;
    /**
     * Gets the length of the misspelled interval.
     */
    readonly length: number;
    /**
     * Gets the text buffer interval occupied by the current element.
     */
    readonly interval: Interval;
    /**
     * Gets the spelling error type.
     */
    readonly errorType: SpellingErrorType;
    /**
     * Gets an erroneous word found during spell check.
     */
    readonly word: string;
    /**
     * Gets a list of suggested words to replace the misspelled word.
     */
    readonly suggestions: string[];
}
/**
 * Lists values specifying the spelling error type.
 */
declare enum SpellingErrorType {
    /**
     * A misspelled word is found.
     */
    Misspelling = 0,
    /**
     * A repeating word is found.
     */
    Repeating = 1
}
/**
 * Serves as a base for objects implementing different element styles.
 */
declare class StyleBase {
    /**
     * Gets or sets the name of the style.
     */
    readonly name: string;
    /**
     * Gets whether the specified style is marked as deleted.
     */
    readonly isDeleted: boolean;
}
/**
 * Defines the paragraph style settings.
 */
declare class ParagraphStyle extends StyleBase {
    /**
     * Gets or sets the linked style for the current style.
     */
    readonly linkedStyle: CharacterStyle;
    /**
     * Gets or sets the default style for a paragraph that immediately follows the current paragraph.
     */
    readonly nextStyle: ParagraphStyle;
    /**
     * Gets the index of the list item associated with the paragraph formatted with the current style.
     */
    readonly listIndex: number;
    /**
     * Gets the index of the list level applied to the paragraph formatted with the current style.
     */
    readonly listLevelIndex: number;
    /**
     * Gets or sets the style from which the current style inherits.
     */
    readonly parent: ParagraphStyle;
}
/**
 * Contains characteristics of a character style in a document.
 */
declare class CharacterStyle extends StyleBase {
    /**
     * Gets or sets the linked style for the current style.
     */
    readonly linkedStyle: ParagraphStyle;
    /**
     * Gets the style form which the current style inherits.
     */
    readonly parent: CharacterStyle;
}
/**
 * Defines the table style settings.
 */
declare class TableStyle extends StyleBase {
    /**
     * Gets or sets the style from which the current style inherits.
     */
    readonly parent: TableStyle;
}
/**
 * Contains a set properties providing the current information about certain document structural elements.
 */
declare class RichEditDocument {
    /**
     * Provides the information about the active sub-document.
     */
    readonly activeSubDocument: SubDocument;
    /**
     * Provides access to the document's main sub-document.
     */
    readonly mainSubDocument: SubDocument;
    /**
     * Provides access to the document's sub-documents.
     */
    readonly subDocuments: SubDocument[];
    /**
     * Provides information about sections in the current document.
     */
    readonly sectionsInfo: Section[];
    /**
     * Provides information about paragraph styles in the current document.
     */
    readonly paragraphStylesInfo: ParagraphStyle[];
    /**
     * Provides information about character styles in the current document.
     */
    readonly characterStylesInfo: CharacterStyle[];
    /**
     * Provides information about numbered paragraphs in the document.
     */
    readonly abstractNumberingListsInfo: AbstractNumberingList[];
    /**
     * Provides information about table styles in the current document.
     */
    readonly tableStylesInfo: TableStyle[];
    /**
     * Provides information about spell checking in the current document.
     */
    readonly spellingInfo: SpellingInfo;
    /**
     * Returns the sub-document with the specified identifier. A SubDocument value specifying the sub-document.
     * @param subDocumentId An integer value specifying the required sub-document.
     */
    getSubDocumentById(subDocumentId: number): SubDocument;
}
/**
 * An abstract numbering list definition that defines the appearance and behavior of numbered paragraphs in a document.
 */
declare class AbstractNumberingList {
    /**
     * Gets or sets a value indicating whether an abstract numbering list is deleted.
     */
    deleted: boolean;
}
/**
 * Defines a paragraph in the document.
 */
declare class Paragraph {
    /**
     * Gets the paragraph's index.
     */
    readonly index: number;
    /**
     * Gets the paragraph's character length.
     */
    readonly length: number;
    /**
     * Gets the paragraph's start position in the document.
     */
    readonly start: number;
    /**
     * Gets the text buffer interval occupied by the current paragraph element.
     */
    readonly interval: Interval;
    /**
     * Gets the name of the paragraph style applied to the current paragraph (see StyleBase.name).
     */
    readonly styleName: string;
    /**
     * Gets the index of a list applied to the paragraph.
     */
    readonly listIndex: number;
    /**
     * Gets the index of the list level applied to the current paragraph in the numbering list.
     */
    readonly listLevelIndex: number;
}
/**
 * Defines a field in the document.
 */
declare class Field {
    /**
     * Gets the field's start position in a document.
     */
    readonly start: number;
    /**
     * Gets the field length in a document.
     */
    readonly length: number;
    /**
     * Gets the text buffer interval occupied by the field code element.
     */
    readonly codeInterval: Interval;
    /**
     * Gets the text buffer interval occupied by the field result element.
     */
    readonly resultInterval: Interval;
    /**
     * Gets the text buffer interval occupied by the current field element.
     */
    readonly interval: Interval;
    /**
     * Gets or sets a URI to navigate to when the hyperlink (represented by the current field) is activated.
     */
    readonly hyperlinkUri: string;
    /**
     * Returns a value specifying whether the field is a hyperlink.
     */
    readonly isHyperlink: boolean;
    /**
     * Gets or sets the text for the tooltip displayed when the mouse hovers over a hyperlink field.
     */
    readonly hyperlinkTip: string;
    /**
     * Gets or sets the name of a bookmark (or a hyperlink) in the current document which shall be the target of the hyperlink field.
     */
    readonly hyperlinkAnchor: string;
    /**
     * Gets a value specifying whether a field's code or result is dispalyed.
     */
    readonly showCode: boolean;
    /**
     * Gets the index of the field
     */
    readonly index: number;
}
/**
 * Defines a bookmark in the document.
 */
declare class Bookmark {
    /**
     * Gets the bookmark's start position in a document.
     */
    readonly start: number;
    /**
     * Gets the bookmark's length.
     */
    readonly length: number;
    /**
     * Gets the text buffer interval occupied by the current bookmark element.
     */
    readonly interval: Interval;
    /**
     * Gets the name of a bookmark in the document.
     */
    readonly name: string;
}
/**
 * Defines a section in the document.
 */
declare class Section {
    /**
     * Gets the section's start position in the document.
     */
    readonly start: number;
    /**
     * Gets the section's character length.
     */
    readonly length: number;
    /**
     * Gets the text buffer interval occupied by the current section element.
     */
    readonly interval: Interval;
    /**
     * Provides access to the section's headers.
     */
    readonly headers: HeaderFooter[];
    /**
     * Provides access to the section's footers.
     */
    readonly footers: HeaderFooter[];
}
/**
 * Contains settings defining a header or footer in a document.
 */
declare class HeaderFooter {
    /**
     * Gets the type of the header (footer).
     */
    readonly type: HeaderFooterType;
    /**
     * Provides access to an object implementing the basic document functionality that is common to the header, footer and the main document body.
     */
    readonly subDocument: SubDocument;
}
/**
 * Contains in-line picture settings.
 */
declare class InlinePictureInfo {
    /**
     * Gets the image identifier.
     */
    readonly id: number;
    /**
     * Gets the image position.
     */
    readonly position: number;
    /**
     * Gets the initial image width.
     */
    readonly initialWidth: number;
    /**
     * Gets the initial image height.
     */
    readonly initialHeight: number;
    /**
     * Gets the X-scaling factor of the inline image.
     */
    readonly scaleX: number;
    /**
     * Gets the Y-scaling factor of the inline image.
     */
    readonly scaleY: number;
    /**
     * Gets the actual image width.
     */
    readonly actualWidth: number;
    readonly actualHeigth: number;
    /**
     * Gets the actual image height.
     */
    readonly actualHeight: number;
}
/**
 * Lists the header/footer types.
 */
declare enum HeaderFooterType {
    /**
     * A header/footer displayed on the first page of the section.
     */
    First = 0,
    /**
     * A header/footer displayed on odd pages of the section.
     */
    Odd = 1,
    /**
     * A header/footer displayed on even pages of the section.
     */
    Even = 2,
    /**
     * A header/footer that is displayed on all pages of the section if the document does not distinguish between first, odd and even pages. Actually, this is an alias for the Odd type.
     */
    Primary = 1
}
/**
 * Contains the settings defining a file to save to.
 */
declare class RichEditFileInfo {
    /**
     * Gets or sets the file's folder name.
     */
    folderPath: string;
    /**
     * Gets or sets the file name.
     */
    fileName: string;
    /**
     * Gets or sets the file's document format.
     */
    documentFormat: DocumentFormat;
}
/**
 * Defines a table in the document.
 */
declare class Table {
    /**
     * Gets the table's start position in the document.
     */
    readonly start: number;
    /**
     * Gets the table length in characters.
     */
    readonly length: number;
    /**
     * Gets an index of the table.
     */
    readonly index: number;
    /**
     * Gets the text buffer interval occupied by the current table element.
     */
    readonly interval: Interval;
    /**
     * Provides access to a collection of table rows.
     */
    readonly rows: TableRow[];
    /**
     * Gets the name of the style applied to the table (see StyleBase.name).
     */
    readonly styleName: string;
}
/**
 * Defines a table row in the document.
 */
declare class TableRow {
    /**
     * Gets the table row's start position in the document.
     */
    readonly start: number;
    /**
     * Gets the table row's character length.
     */
    readonly length: number;
    /**
     * Gets the text buffer interval occupied by the current table row element.
     */
    readonly interval: Interval;
    /**
     * Provides information about the table row's cells.
     */
    readonly cells: TableCell[];
}
/**
 * Defines a table cell in the document.
 */
declare class TableCell {
    /**
     * Gets the table cell's start position in the document.
     */
    readonly start: number;
    /**
     * Gets the table cell's character length.
     */
    readonly length: number;
    /**
     * Gets the text buffer interval occupied by the current table cell element.
     */
    readonly interval: Interval;
}
/**
 * Exposes the settings providing the information about the essential document functionality.
 */
declare class SubDocument {
    /**
     * Gets the sub-document identifier.
     */
    readonly id: number;
    /**
     * Gets a value specifying the sub-document type.
     */
    readonly type: SubDocumentType;
    /**
     * Provides information about paragraphs contained in the document.
     */
    readonly paragraphsInfo: Paragraph[];
    /**
     * Provides information about fields in the current document.
     */
    readonly fieldsInfo: Field[];
    /**
     * Provides information about tables contained in the document.
     */
    readonly tablesInfo: Table[];
    /**
     * Provides information about document bookmarks.
     */
    readonly bookmarksInfo: Bookmark[];
    /**
     * Provides access to an array of objects containing in-line picture settings.
     */
    readonly inlinePicturesInfo: InlinePictureInfo[];
    /**
     * Gets the document's textual representation.
     */
    readonly text: string;
    /**
     * Gets the character length of the document.
     */
    readonly length: number;
    /**
     * Provides information about floating text boxes contained within the sub-document if it is the main sub-document or header/footer.
     */
    readonly floatingTextBoxesInfo: FloatingTextBoxInfo[];
    /**
     * Provides information about floating pictures in the sub-document.
     */
    readonly floatingPicturesInfo: FloatingPictureInfo[];
    /**
     * Return the document's textual representation contained in the specified interval. A string value specifying the text contained in the specified interval.
     * @param interval A text buffer interval that contains the target text.
     */
    getTextByInterval(interval: Interval): string;
    /**
     * Returns information specific for floating text boxes about the sub-document.
     */
    getFloatingTextBoxInfo(): FloatingTextBoxInfo;
    /**
     * Returns an array of fields that match the search conditions. An array of the Field objects.
     * @param arg A position or interval indicating where to search fields.
     */
    findFields(arg: number | Interval): Field[];
    /**
     * Returns an array of tables that match the search conditions. An array of the Table objects.
     * @param arg Contains a position or interval indicating where to search tables.
     */
    findTables(arg: number | Interval): Table[];
    /**
     * Returns an array of paragraphs that match the search conditions. An array of the Paragraph objects.
     * @param arg Contains a position or interval(s) where to search paragraphs.
     */
    findParagraphs(arg: number | Interval | Interval[]): Paragraph[];
    /**
     * Returns an array of bookmarks that match the search conditions. An array of the Bookmark objects.
     * @param arg Contains a position or interval(s) where to search bookmarks, or a bookmark name, or a regular expression.
     */
    findBookmarks(arg: number | Interval | Interval[] | string | RegExp): Bookmark[];
}
/**
 * Lists values specifying the sub-document type.
 */
declare enum SubDocumentType {
    /**
     * The main document body.
     */
    Main = 0,
    /**
     * A header.
     */
    Header = 1,
    /**
     * A footer.
     */
    Footer = 2,
    /**
     * A text box.
     */
    TextBox = 3
}
/**
 * Contains floating objects base settings.
 */
declare class FloatingObjectInfo {
    /**
     * Gets the position of the floating object's anchor in the parent sub-document.
     */
    readonly position: number;
    /**
     * Gets the parent sub-document what stores the current floating object.
     */
    readonly parentSubDocument: SubDocument;
}
/**
 * Contains floating text boxes settings.
 */
declare class FloatingTextBoxInfo extends FloatingObjectInfo {
    /**
     * Gets the sub-document representing the floating text box's content.
     */
    readonly contentSubDocument: SubDocument;
}
/**
 * Contains floating pictures settings.
 */
declare class FloatingPictureInfo extends FloatingObjectInfo {
}
/**
 * Contains a set of methods and properties to work with the document selection.
 */
declare class RichEditSelection {
    /**
     * Gets or sets an array of document intervals in the selection.
     */
    intervals: Interval[];
    /**
     * Selects the specified interval(s).
     * @param arg The interval(s) or position to select.
     */
    setSelection(arg: number | Interval | Interval[]): void;
    /**
     * Gets whether a floating picture or text box is selected.
     */
    readonly isFloatingObjectSelected: boolean;
    /**
     * Gets whether only a text box is selected.
     */
    readonly isTextBoxSelected: boolean;
    /**
     * Gets whether only a picture is selected.
     */
    readonly isPictureSelected: boolean;
    /**
     * Gets or sets a value specifying whether the current selection is collapsed (and represents the cursor position).
     */
    collapsed: boolean;
    /**
     * Gets the maximum position of a document interval in the selection.
     */
    getIntervalMaxPosition(): number;
    /**
     * Moves the cursor to the next line and allows you to extend the selection.
     * @param extendSelection true to extend the selection; otherwise, false.
     */
    goToNextLine(extendSelection?: boolean): void;
    /**
     * Moves the cursor to the end of the line in which the cursor is located and allows you to extend the selection.
     * @param extendSelection true to extend the selection; otherwise, false.
     */
    goToLineEnd(extendSelection?: boolean): void;
    /**
     * Moves the cursor to the start of the line in which the cursor is located and allows you to extend the selection.
     * @param extendSelection true to extend the selection; otherwise, false.
     */
    goToLineStart(extendSelection?: boolean): void;
    /**
     * Moves the cursor to the previous line and allows you to extend the selection.
     * @param extendSelection true to extend the selection; otherwise, false.
     */
    goToPreviousLine(extendSelection?: boolean): void;
    /**
     * Moves the cursor to the next character and allows you to extend the selection.
     * @param extendSelection true to extend the selection; otherwise, false.
     */
    goToNextCharacter(extendSelection?: boolean): void;
    /**
     * Moves the cursor to the previous character and allows you to extend the selection.
     * @param extendSelection true to extend the selection; otherwise, false.
     */
    goToPreviousCharacter(extendSelection?: boolean): void;
    /**
     * Selects the line in which the cursor is located and allows you to extend the entire selection with the currently existing selection.
     * @param extendSelection true to extend the selection; otherwise, false.
     */
    selectLine(extendSelection?: boolean): void;
    /**
     * Moves the cursor to the beginning of the next page and allows you to extend the selection.
     * @param extendSelection true to extend the selection; otherwise, false.
     */
    goToNextPage(extendSelection?: boolean): void;
    /**
     * Moves the cursor to the beginning of the previous page and allows you to extend the selection.
     * @param extendSelection true to extend the selection; otherwise, false.
     */
    goToPreviousPage(extendSelection?: boolean): void;
    /**
     * Moves the cursor to the start of the document and allows you to extend the selection.
     * @param extendSelection true to extend the selection; otherwise, false.
     */
    goToDocumentStart(extendSelection?: boolean): void;
    /**
     * Moves the cursor to the end of the document and allows you to extend the selection.
     * @param extendSelection true to extend the selection; otherwise, false.
     */
    goToDocumentEnd(extendSelection?: boolean): void;
    /**
     * Moves the cursor to the next word and allows you to extend the selection.
     * @param extendSelection true to extend the selection; otherwise, false.
     */
    goToNextWord(extendSelection?: boolean): void;
    /**
     * Moves the cursor to the previous word and allows you to extend the selection.
     * @param extendSelection true to extend the selection; otherwise, false.
     */
    goToPrevWord(extendSelection?: boolean): void;
    /**
     * Moves the cursor to the start of the paragraph in which the cursor is located and allows you to extend the selection.
     * @param extendSelection true to extend the selection; otherwise, false.
     */
    goToParagraphStart(extendSelection?: boolean): void;
    /**
     * Moves the cursor to the end of the paragraph in which the cursor is located and allows you to extend the selection.
     * @param extendSelection true to extend the selection; otherwise, false.
     */
    goToParagraphEnd(extendSelection?: boolean): void;
    /**
     * Selects the paragraph in which the cursor is located.
     */
    selectParagraph(): void;
    /**
     * Moves the cursor to the next page break mark and extends the selection.
     * @param extendSelection true to extend the selection; otherwise, false.
     */
    goToStartNextPageCommand(extendSelection?: boolean): void;
    /**
     * Moves the cursor to the previous page break mark and extends the selection.
     * @param extendSelection true to extend the selection; otherwise, false.
     */
    goToStartPrevPageCommand(extendSelection?: boolean): void;
    /**
     * Selects the table cell in which the cursor is located and allows you to extend the entire selection with the currently existing selection.
     * @param extendSelection true to extend the selection; otherwise, false.
     */
    selectTableCell(extendSelection?: boolean): void;
    /**
     * Selects the table row in which the cursor is located and allows you to extend the entire selection with the currently existing selection.
     * @param extendSelection true to extend the selection; otherwise, false.
     */
    selectTableRow(extendSelection?: boolean): void;
    /**
     * Selects the entire table in which the cursor is located and allows you to extend the entire selection with the currently existing selection.
     * @param extendSelection true to extend the selection; otherwise, false.
     */
    selectTable(extendSelection?: boolean): void;
    /**
     * Selects the editor's entire content.
     */
    selectAll(): void;
    /**
     * Makes the main sub-document active and moves the cursor to its beginning.
     */
    setMainSubDocumentAsActive(): void;
    /**
     * Creates a footer sub-document (if it was not created before) and sets the footer as the active sub-document. Moves the cursor to the footer's start position.
     * @param pageIndex An integer value specifying the active page's index.
     */
    setFooterSubDocumentAsActiveByPageIndex(pageIndex: number): void;
    /**
     * Creates a header sub-document (if it was not created before) and sets the header as the active sub-document. Moves the cursor to the header's start position.
     * @param pageIndex An integer value specifying the active page's index.
     */
    setHeaderSubDocumentAsActiveByPageIndex(pageIndex: number): void;
    /**
     * Makes the specified text box active.
     */
    setTextBoxSubDocumentAsActive(arg: number | FloatingTextBoxInfo): void;
    /**
     * Makes the specified sub-document active.
     * @param id An integer value identifying the target sub-document by its id.
     */
    setActiveSubDocumentById(id: number): boolean;
}
/**
 * Defines a document's interval.
 */
declare class Interval {
    /**
     * Gets the interval's start position in the document.
     */
    start: number;
    /**
     * Gets the interval's character length.
     */
    length: number;
    /**
     * Initiates a new Interval object instance with the specified settings.
     * @param start The interval's start position.
     * @param length The interval's length.
     */
    constructor(start?: number, length?: number);
}
/**
 * Defines a simple state common to most of the client commands.
 */
declare class SimpleCommandState {
    /**
     * Specifies a command availability.
     */
    enabled: boolean;
    /**
     * Specifies a command visibility.
     */
    visible: boolean;
}
/**
 * Defines the state of a command.
 */
declare class CommandState<T> extends SimpleCommandState {
    /**
     * Specifies a command value.
     */
    value: T;
}
/**
 * Serves as a base for objects that implement different client command functionalities.
 */
declare class CommandBase {
}
/**
 * Serves as a base for objects that implement different dialog-related client command functionalities.
 */
declare class CommandDialogBase extends CommandBase {
}
/**
 * Serves as a base for commands with a simple common command state.
 */
declare abstract class CommandWithSimpleStateBase extends CommandBase {
    /**
     * Gets information about the command's state.
     */
    abstract getState(): SimpleCommandState;
}
/**
 * Serves as a base for dialog-related commands with a simple common command state.
 */
declare abstract class CommandWithSimpleStateDialogBase {
    /**
     * Gets information about the command's state.
     */
    abstract getState(): SimpleCommandState;
}
/**
 * Serves as a base for commands with the Boolean state.
 */
declare abstract class CommandWithBooleanStateBase extends CommandBase {
    /**
     * Gets information about the command's state.
     */
    abstract getState(): CommandState<boolean>;
}
/**
 * A command to invoke the Bookmark dialog.
 */
declare class OpenInsertBookmarkDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the OpenInsertBookmarkDialogCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to insert a new bookmark that references the current selection.
 */
declare class InsertBookmarkCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertBookmarkCommand command with the specified parameters. true if the command has been successfully executed; false if the command execution has failed.
     * @param name A string value specifying a name of the created bookmark.
     * @param start An integer value specifying the start position of the bookmark's range.
     * @param length An integer value specifying the length of the bookmark's range.
     */
    execute(name: string, start: number, length: number): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to delete a specific bookmark.
 */
declare class DeleteBookmarkCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the DeleteBookmarkCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param name A string value specifying a name of the deleted bookmark.
     */
    execute(name: string): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * Gets a command to navigate to the specified bookmark in the document.
 */
declare class GoToBookmarkCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the GoToBookmarkCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param name A string value specifying the bookmark's name
     */
    execute(name: string): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to paste the text from the clipboard over the selection.
 */
declare class PasteCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the PasteCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to copy the selected text and place it to the clipboard.
 */
declare class CopyCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the CopyCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to cut the selected text and place it to the clipboard.
 */
declare class CutCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the CutCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to insert an empty document field at the current position in the document.
 */
declare class CreateFieldCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the CreateFieldCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param code A string value specifying the field code receiving to the created field.
     */
    execute(code?: string): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to update the field's result.
 */
declare class UpdateFieldCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the UpdateFieldCommand command. true if the command has been successfully executed; false if the command execution has failed.
     * @param callback A callback function that is performed when updating of all fields in the selection is completed.
     */
    execute(callback?: () => void): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to display the selected field's field codes.
 */
declare class ShowFieldCodesCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the ShowFieldCodesCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param showFieldCodes true to display field codes, false to hide field codes.
     */
    execute(showFieldCodes?: boolean): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to display all field codes in place of the fields in the document.
 */
declare class ShowAllFieldCodesCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the ShowAllFieldCodesCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param showFieldCodes true to display field codes, false to hide field codes.
     */
    execute(showFieldCodes?: boolean): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to update all fields in the selected range.
 */
declare class UpdateAllFieldsCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the UpdateAllFieldsCommand command. true if the command has been successfully executed; false if the command execution has failed.
     * @param callback A callback function that is performed when updating of all fields in the document is completed.
     */
    execute(callback?: () => void): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to insert a DATE field displaying the current date.
 */
declare class CreateDateFieldCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the CreateDateFieldCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to insert a TIME field displaying the current time.
 */
declare class CreateTimeFieldCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the CreateTimeFieldCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to insert a PAGE field displaying the current page number.
 */
declare class CreatePageFieldCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the CreatePageFieldCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to insert a caption for a figure.
 */
declare class InsertFiguresCaptionCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertFiguresCaptionCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to insert a caption for a table.
 */
declare class InsertTablesCaptionCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertTablesCaptionCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to insert a caption for an equation.
 */
declare class InsertEquationsCaptionCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertEquationsCaptionCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to create a table of figures.
 */
declare class InsertTableOfFiguresCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertTableOfFiguresCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to create a table of tables.
 */
declare class InsertTableOfTablesCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertTableOfTablesCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to create a table of equations.
 */
declare class InsertTableOfEquationsCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertTableOfEquationsCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to insert a table of contents.
 */
declare class InsertTableOfContentsCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertTableOfContentsCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to update a table of contents.
 */
declare class UpdateTableOfContentsCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the UpdateTableOfContentsCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to navigate to the next data record of the bound data source.
 */
declare class GoToDataRecordCommand extends CommandBase {
    /**
     * Executes the GoToDataRecordCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param activeRecordIndex An integer value specifying index of the next data record.
     */
    execute(activeRecordIndex: number): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<DataRecordOptions>;
}
/**
 * Contains the settings defining a data record.
 */
declare class DataRecordOptions {
    /**
     * Gets or sets the index of the active data record.
     */
    activeRecordIndex: number;
    /**
     * Gets or sets the count of data source records.
     */
    recordCount: number;
}
/**
 * A command to navigate to the first data record of the bound data source.
 */
declare class GoToFirstDataRecordCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the GoToFirstDataRecordCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to navigate to the previous data record of the bound data source.
 */
declare class GoToPreviousDataRecordCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the GoToPreviousDataRecordCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to navigate to the next data record of the bound data source.
 */
declare class GoToNextDataRecordCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the GoToNextDataRecordCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to navigate to the last data record of the bound data source.
 */
declare class GoToLastDataRecordCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the GoToLastDataRecordCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to display or hide actual data in MERGEFIELD fields.
 */
declare class ShowMergedDataCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ShowMergedDataCommand command. true if the command has been successfully executed; false if the command execution has failed.
     */
    execute(showMergedData?: boolean): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to invoke the Insert Merge Field dialog.
 */
declare class MergeFieldDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the MergeFieldDialogCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to insert a MERGEFIELD field (with a data source column name) at the current position in the document.
 */
declare class CreateMergeFieldCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the CreateMergeFieldCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param fieldName A string value specifying the name of the merge field.
     */
    execute(fieldName: string): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * Gets a command to invoke the Export Range dialog to start a mail merge.
 */
declare class MailMergeDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the MailMergeDialogCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to start the mail merge process and download the resulting document containing the merged information.
 */
declare class MailMergeAndDownloadCommand {
    /**
     * Executes the MailMergeAndDownloadCommand command with the specified parameters. true if the command has been successfully executed; false if the command execution has failed.
     * @param fileExtension A string value specifying the file extension of the resulting document.
     * @param settings A MailMergeSettings object containing settings to set up mail merge operations.
     */
    execute(fileExtension: string | DocumentFormat, settings?: MailMergeSettings): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<MailMergeSettings>;
}
/**
 * A command to start the mail merge process and save the resulting merged document to the server.
 */
declare class MailMergeAndSaveAsCommand {
    /**
     * Executes the MailMergeAndSaveAsCommand command with the specified parameters. true if the command has been successfully executed; false if the command execution has failed.
     * @param filePath The path to a saved file, or an object that contains the saved file information.
     * @param settings An object that contains settings to set up the mail merge operation.
     */
    execute(filePath: string | RichEditFileInfo, settings?: MailMergeSettings): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<MailMergeSettings>;
}
/**
 * A command to insert a NUMPAGES field displaying the total number of pages.
 */
declare class CreatePageCountFieldCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the CreatePageCountFieldCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * Contains settings to set up mail merge operations.
 */
declare class MailMergeSettings {
    /**
     * Specifies which data rows should be exported into a merged document.
     */
    range: MailMergeExportRange;
    /**
     * Gets or sets the index of the row from which the exported range starts.
     */
    exportFrom: number;
    /**
     * Gets or sets the number of data rows in the exported mail-merge range.
     */
    exportRecordsCount: number;
    /**
     * Gets or sets the merge mode.
     */
    mergeMode: MergeMode;
}
/**
 * Lists delimiters that start the new merged range.
 */
declare enum MergeMode {
    /**
     * Specifies that the next merged range starts with a new paragraph.
     */
    NewParagraph = 0,
    /**
     * Specifies that the next merged range starts with a new section. The section break type is obtained from the previous section break or set to the NextPage by default. For headers and footers, it is the only allowed option.
     */
    NewSection = 1,
    /**
     * Enables you to join rows, which result from a mail merge involving a table with merged fields, into a whole table.
     */
    JoinTables = 2
}
/**
 * Lists values that specify the range for mail-merge document export.
 */
declare enum MailMergeExportRange {
    /**
     * Specifies that all data source records will be included into the exported merged document.
     */
    AllRecords = 0,
    /**
     * Specifies that only the current data source record will be included into the exported merged document.
     */
    CurrentRecord = 1,
    /**
     * Specifies that a specific range of data source records will be included into the exported merged document.
     */
    Range = 2
}
/**
 * A command to create a new empty document.
 */
declare class FileNewCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the FileNewCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to open the file, specifying its path.
 */
declare class FileOpenCommand {
    /**
     * Executes the FileOpenCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param path A string value specifying path to the opening file.
     */
    execute(path: string): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to invoke the File Open dialog allowing one to select and load a document file into RichEdit.
 */
declare class FileOpenDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the FileOpenDialogCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to save the document to a file.
 */
declare class FileSaveCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the FileSaveCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to invoke the Save As dialog that prompts for a file name and saves the current document in a file with the specified path.
 */
declare class FileSaveAsCommand {
    /**
     * Executes the FileSaveAsCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     */
    execute(path: string | RichEditFileInfo): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to download the document file, specifying its extension.
 */
declare class FileDownloadCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the FileDownloadCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param fileExtension A string value specifying the extension of the downloading file.
     */
    execute(fileExtension: string | DocumentFormat): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to open the file's Save As dialog.
 */
declare class FileSaveAsDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the FileSaveAsDialogCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to invoke a browser-specific Print dialog allowing one to print the current document.
 */
declare class FilePrintCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the FilePrintCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to invoke the Search Panel allowing end-users to search text and navigate through search results.
 */
declare class OpenFindPanelCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the OpenFindPanelCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to invoke the Find and Replace dialog.
 */
declare class OpenFindAndReplaceDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the OpenFindAndReplaceDialogCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to find all matches of the specified text in the document.
 */
declare class FindAllCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the FindAllCommand command with the specified parameters. true if the command has been successfully executed; false if the command execution has failed.
     * @param text A string value specifying text to find.
     * @param matchCase true, to perform a case-sensitive search; otherwise, false.
     * @param highlightResults true, to highlight the search results; otherwise, false.
     * @param results An array of Interval objects containing the search results.
     */
    execute(text: string, matchCase: boolean, highlightResults: boolean, results?: Interval[]): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to hide the search results.
 */
declare class HideFindResultsCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the HideFindResultsCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to search for a specific text and replace all matches in the document with the specified string.
 */
declare class ReplaceAllCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the ReplaceAllCommand command with the specified parameters. true if the command has been successfully executed; false if the command execution has failed.
     * @param text A string value specifying a text to replace.
     * @param replaceText A string value specifying the inserted text.
     * @param matchCase true, to perform a case-sensitive search; otherwise, false.
     */
    execute(text: string, replaceText: string, matchCase: boolean): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to search for a specific text and replace the next match in the document with the specified string.
 */
declare class ReplaceNextCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the ReplaceNextCommand command with the specified parameters. true if the command has been successfully executed; false if the command execution has failed.
     * @param text A string value specifying a text to replace.
     * @param replaceText A string value specifying the inserted text.
     * @param matchCase true, to perform a case-sensitive search; otherwise, false.
     */
    execute(text: string, replaceText: string, matchCase: boolean): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to invoke the Layout dialog.
 */
declare class OpenLayoutOptionsDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the OpenLayoutOptionsDialogCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to insert a floating text box.
 */
declare class InsertFloatingTextBoxCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertFloatingTextBoxCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A base class for commands that modify floating object settings.
 */
declare class ChangeFloatingObjectPropertyCommandBase<T> {
    /**
     * Executes a command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param settings An object that contains settings for the execute method.
     */
    execute(settings: T): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<T>;
}
/**
 * A command to lock a floating object's anchor.
 */
declare class ChangeFloatingObjectLockAnchorCommand extends ChangeFloatingObjectPropertyCommandBase<boolean> {
    /**
     * Executes the ChangeFloatingObjectLockAnchorCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param lockAnchor true to lock the anchor; false, otherwise.
     */
    execute(lockAnchor: boolean): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to modify a floating object's alignment position.
 */
declare class ChangeFloatingObjectAlignmentPositionCommand extends ChangeFloatingObjectPropertyCommandBase<FloatingObjectAlignmentPositionSettings> {
    /**
     * Executes the ChangeFloatingObjectAlignmentPositionCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param settings A FloatingObjectAlignmentPositionSettings object specifying alignment position settings.
     */
    execute(settings: FloatingObjectAlignmentPositionSettings): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<FloatingObjectAlignmentPositionSettings>;
}
/**
 * A command to change a floating object's absolute position.
 */
declare class ChangeFloatingObjectAbsolutePositionCommand extends ChangeFloatingObjectPropertyCommandBase<FloatingObjectAbsolutePositionSettings> {
    /**
     * Executes the ChangeFloatingObjectAbsolutePositionCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param settings A FloatingObjectAbsolutePositionSettings object specifying object position settings.
     */
    execute(settings: FloatingObjectAbsolutePositionSettings): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<FloatingObjectAbsolutePositionSettings>;
}
/**
 * A command to modify a floating object's relative position.
 */
declare class ChangeFloatingObjectRelativePositionCommand extends ChangeFloatingObjectPropertyCommandBase<FloatingObjectRelativePositionSettings> {
    /**
     * Executes the ChangeFloatingObjectRelativePositionCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param settings A FloatingObjectRelativePositionSettings object specifying relative positioin settings.
     */
    execute(settings: FloatingObjectRelativePositionSettings): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<FloatingObjectRelativePositionSettings>;
}
/**
 * A command to modify a floating object's text wrapping settings.
 */
declare class ChangeFloatingObjectTextWrappingCommand {
    /**
     * Executes the ChangeFloatingObjectTextWrappingCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param settings A FloatingObjectTextWrappingSettings object specifying text wrapping settings.
     */
    execute(settings: FloatingObjectTextWrappingSettings): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<FloatingObjectTextWrappingSettings>;
}
/**
 * A command to change a floating object's absolute size.
 */
declare class ChangeFloatingObjectAbsoluteSizeCommand extends ChangeFloatingObjectPropertyCommandBase<FloatingObjectAbsoluteSizeSettings> {
    /**
     * Executes the ChangeFloatingObjectAbsoluteSizeCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param settings A FloatingObjectAbsoluteSizeSettings object specifying absolute size settings.
     */
    execute(settings: FloatingObjectAbsoluteSizeSettings): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<FloatingObjectAbsoluteSizeSettings>;
}
/**
 * A command to modify a text box' relative size settings.
 */
declare class ChangeTextBoxRelativeSizeCommand extends ChangeFloatingObjectPropertyCommandBase<TextBoxRelativeSizeSettings> {
    /**
     * Executes the ChangeTextBoxRelativeSizeCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param settings A TextBoxRelativeSizeSettings object specifying relative size settings.
     */
    execute(settings: TextBoxRelativeSizeSettings): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<TextBoxRelativeSizeSettings>;
}
/**
 * A command to rotate a floating object.
 */
declare class ChangeFloatingObjectRotationCommand extends ChangeFloatingObjectPropertyCommandBase<number> {
    /**
     * Executes the ChangeFloatingObjectRotationCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param rotation An integer value specifying the angle of rotation.
     */
    execute(rotation: number): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<number>;
}
/**
 * A command to lock a floating object's aspect ratio.
 */
declare class ChangeFloatingObjectLockAspectRatioCommand extends ChangeFloatingObjectPropertyCommandBase<boolean> {
    /**
     * Executes the ChangeFloatingObjectLockAspectRatioCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param lockAspectRatio true to lock the aspect ratio and maintain the proportions; otherwise, false.
     */
    execute(lockAspectRatio: boolean): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to modify a floating object's background fill color.
 */
declare class ChangeFloatingObjectFillColorCommand extends CommandBase {
    /**
     * Executes the ChangeFloatingObjectFillColorCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param color A string value specifying the color.
     */
    execute(color: string): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<string>;
}
/**
 * A command to modify a floating object's outline color.
 */
declare class ChangeFloatingObjectOutlineColorCommand extends CommandBase {
    /**
     * Executes the ChangeFloatingObjectOutlineColorCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param color A string value specifying the color.
     */
    execute(color: string): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<string>;
}
/**
 * A command to modify a floating object's outline width.
 */
declare class ChangeFloatingObjectOutlineWidthCommand extends CommandBase {
    /**
     * Executes the ChangeFloatingObjectOutlineWidthCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param width An integer value specifying the outline width.
     */
    execute(width: number): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<number>;
}
/**
 * A command to modify a text box' content margins.
 */
declare class ChangeTextBoxContentMarginsCommand extends CommandBase {
    /**
     * Executes the ChangeTextBoxContentMarginsCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param settings A Margins object specifying margin settings.
     */
    execute(settings: Margins): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<Margins>;
}
/**
 * A command to resize the shape to fit the text in the text box.
 */
declare class ChangeTextBoxResizeShapeToFitTextCommand extends CommandBase {
    /**
     * Executes the ChangeTextBoxResizeShapeToFitTextCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param resizeShapeToFitText true, to resize the shape to fit the text; otherwise, false.
     */
    execute(resizeShapeToFitText: boolean): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * Contains alignment position settings for floating objects.
 */
declare class FloatingObjectAlignmentPositionSettings {
    /**
     * Gets or sets a value specifying how a floating object is horizontally aligned relative to an element specified by the FloatingObjectAlignmentPositionSettings.horizontalPositionAlignment property.
     */
    horizontalPositionAlignment: FloatingObjectHorizontalPositionAlignment;
    /**
     * Gets or sets a value specifying to what element the horizontal alignment of a floating object is relative.
     */
    horizontalPositionType: FloatingObjectHorizontalPositionType;
    /**
     * Gets or sets a value specifying how a floating object is vertically aligned relative to an element specified by the FloatingObjectAlignmentPositionSettings.verticalPositionAlignment property.
     */
    verticalPositionAlignment: FloatingObjectVerticalPositionAlignment;
    /**
     * Gets or sets a value specifying to what element the vertical alignment of a floating object is relative.
     */
    verticalPositionType: FloatingObjectVerticalPositionType;
}
/**
 * Contains page margin settings.
 */
declare class FloatingObjectAbsolutePositionSettings {
    /**
     * Gets or sets a floating object's horizontal position relative to an element specified by the FloatingObjectAbsolutePositionSettings.horizontalPositionType property.
     */
    horizontalAbsolutePosition: number;
    /**
     * Gets or sets a value specifying to what element the horizontal position of a floating object is relative.
     */
    horizontalPositionType: FloatingObjectHorizontalPositionType;
    /**
     * Gets or sets a floating object's vertical position relative to an element specified by the FloatingObjectAbsolutePositionSettings.verticalPositionType property.
     */
    verticalAbsolutePosition: number;
    /**
     * Gets or sets a value specifying to what element the vertical position of a floating object is relative.
     */
    verticalPositionType: FloatingObjectVerticalPositionType;
}
/**
 * Contains relative position settings for floating objects.
 */
declare class FloatingObjectRelativePositionSettings {
    /**
     * Gets or sets the horizontal distance between the edge of a floating object and the element specified by the FloatingObjectRelativePositionSettings.horizontalRelativePosition property
     */
    horizontalRelativePosition: number;
    /**
     * Gets or sets a value specifying to what element the horizontal position of a floating object is relative.
     */
    horizontalPositionType: FloatingObjectHorizontalPositionType;
    /**
     * Gets or sets the horizontal distance between the edge of a floating object and the element specified by the FloatingObjectRelativePositionSettings.verticalRelativePosition property
     */
    verticalRelativePosition: number;
    /**
     * Gets or sets a value specifying to what element the vertical position of a floating object is relative.
     */
    verticalPositionType: FloatingObjectVerticalPositionType;
}
/**
 * Contains text wrapping settings for floating objects.
 */
declare class FloatingObjectTextWrappingSettings {
    /**
     * Gets or sets a value specifying how text is wrapped around a floating object.
     */
    floatingObjectTextWrapType: FloatingObjectTextWrapType;
    /**
     * Gets or sets a value specifying how text can wrap around a floating object's left and right sides.
     */
    floatingObjectTextWrapSide: FloatingObjectTextWrapSide;
    /**
     * Gets or sets the left offset of text wrapping.
     */
    leftDistance: number;
    /**
     * Gets or sets the right offset of text wrapping.
     */
    rightDistance: number;
    /**
     * Gets or sets the top offset of text wrapping.
     */
    topDistance: number;
    /**
     * Gets or sets the bottom offset of text wrapping.
     */
    bottomDistance: number;
}
/**
 * Contains absolute size settings for floating objects.
 */
declare class FloatingObjectAbsoluteSizeSettings {
    /**
     * Gets or sets a floating object's absolute width.
     */
    absoluteWidth: number;
    /**
     * Gets or sets a floating object's absolute height.
     */
    absoluteHeight: number;
}
/**
 * Contains relative size settings for floating objects.
 */
declare class TextBoxRelativeSizeSettings {
    /**
     * Gets or sets the percentage specifying a floating object's width relative to the element defined by the TextBoxRelativeSizeSettings.relativeWidthType property.
     */
    relativeWidth: number;
    /**
     * Gets or sets a value specifying to what element the floating object width is relative.
     */
    relativeWidthType: FloatingObjectRelativeWidthType;
    /**
     * Gets or sets the percentage specifying a floating object's height relative to the element defined by the TextBoxRelativeSizeSettings.relativeHeightType property.
     */
    relativeHeight: number;
    /**
     * Gets or sets a value specifying to what element the floating object height is relative.
     */
    relativeHeightType: FloatingObjectRelativeHeightType;
}
/**
 * Lists values specifying to what element the floating object width is relative.
 */
declare enum FloatingObjectRelativeWidthType {
    /**
     * Relative to margin.
     */
    Margin = 0,
    /**
     * Relative to page.
     */
    Page = 1,
    /**
     * Relative to left margin.
     */
    LeftMargin = 2,
    /**
     * Relative to right margin.
     */
    RightMargin = 3,
    /**
     * Relative to inside margin.
     */
    InsideMargin = 4,
    /**
     * Relative to outside margin.
     */
    OutsideMargin = 5
}
/**
 * Lists values specifying to what element the floating object height is relative.
 */
declare enum FloatingObjectRelativeHeightType {
    /**
     * Relative to margin.
     */
    Margin = 0,
    /**
     * Relative to page.
     */
    Page = 1,
    /**
     * Relative to top margin.
     */
    TopMargin = 2,
    /**
     * Relative to bottom margin.
     */
    BottomMargin = 3,
    /**
     * Relative to inside margin.
     */
    InsideMargin = 4,
    /**
     * Relative to outside margin.
     */
    OutsideMargin = 5
}
/**
 * Lists values specifying how text is wrapped around a floating object.
 */
declare enum FloatingObjectTextWrapType {
    /**
     * The text does not wrap around the shape.
     */
    None = 0,
    /**
     * The text is displayed above and below the shape and does not wrap around the sides.
     */
    TopAndBottom = 1,
    /**
     * The text wraps tightly around the shape.
     */
    Tight = 2,
    /**
     * The text wraps tightly around the shape and can fill in the transparent background space inside the shape.
     */
    Through = 3,
    /**
     * The text wraps around the rectangular borders of the shape.
     */
    Square = 4
}
/**
 * Lists values specifying how text can wrap around a floating object's left and right sides.
 */
declare enum FloatingObjectTextWrapSide {
    /**
     * Wraps text to both the left and right of the shape.
     */
    Both = 0,
    /**
     * Wraps text to the left of the shape.
     */
    Left = 1,
    /**
     * Wraps text to the right of the shape.
     */
    Right = 2,
    /**
     * Wraps text on the side that is the greater distance from the shape to the margin.
     */
    Largest = 3
}
/**
 * Lists values specifying to what element the horizontal position of a floating object is relative.
 */
declare enum FloatingObjectHorizontalPositionType {
    /**
     * Relative to page.
     */
    Page = 0,
    /**
     * Relative to character.
     */
    Character = 1,
    /**
     * Relative to column.
     */
    Column = 2,
    /**
     * Relative to margin.
     */
    Margin = 3,
    /**
     * Relative to left margin.
     */
    LeftMargin = 4,
    /**
     * Relative to right margin.
     */
    RightMargin = 5,
    /**
     * Relative to inside margin.
     */
    InsideMargin = 6,
    /**
     * Relative to outside margin.
     */
    OutsideMargin = 7
}
/**
 * Lists values specifying how a floating object is horizontally aligned relative to the specified element.
 */
declare enum FloatingObjectHorizontalPositionAlignment {
    /**
     * The shape is not horizontally aligned.
     */
    None = 0,
    /**
     * The shape is left-aligned relative to its FloatingObjectAlignmentPositionSettings.horizontalPositionType.
     */
    Left = 1,
    /**
     * The shape is centered relative to its FloatingObjectAlignmentPositionSettings.horizontalPositionType.
     */
    Center = 2,
    /**
     * The shape is right-aligned relative to its FloatingObjectAlignmentPositionSettings.horizontalPositionType.
     */
    Right = 3,
    /**
     * The shape is aligned inside relative to its FloatingObjectAlignmentPositionSettings.horizontalPositionType.
     */
    Inside = 4,
    /**
     * The shape is aligned outside relative to its FloatingObjectAlignmentPositionSettings.horizontalPositionType.
     */
    Outside = 5
}
/**
 * Lists values specifying to what element the vertical position of a floating object is relative.
 */
declare enum FloatingObjectVerticalPositionType {
    /**
     * Relative to page.
     */
    Page = 0,
    /**
     * Relative to line.
     */
    Line = 1,
    /**
     * Relative to paragraph.
     */
    Paragraph = 2,
    /**
     * Relative to margin.
     */
    Margin = 3,
    /**
     * Relative to top margin.
     */
    TopMargin = 4,
    /**
     * Relative to bottom margin.
     */
    BottomMargin = 5,
    /**
     * Relative to inside margin.
     */
    InsideMargin = 6,
    /**
     * Relative to outside margin.
     */
    OutsideMargin = 7
}
/**
 * Lists values specifying how a floating object is vertically aligned relative to the specified element.
 */
declare enum FloatingObjectVerticalPositionAlignment {
    /**
     * The shape is not vertically aligned.
     */
    None = 0,
    /**
     * The shape is top aligned relative to its FloatingObjectAlignmentPositionSettings.verticalPositionType.
     */
    Top = 1,
    /**
     * The shape is centered relative to its FloatingObjectAlignmentPositionSettings.verticalPositionType.
     */
    Center = 2,
    /**
     * The shape is aligned to the bottom relative to its FloatingObjectAlignmentPositionSettings.verticalPositionType.
     */
    Bottom = 3,
    /**
     * The shape is aligned inside relative to its FloatingObjectAlignmentPositionSettings.verticalPositionType.
     */
    Inside = 4,
    /**
     * The shape is aligned outside relative to its FloatingObjectAlignmentPositionSettings.verticalPositionType.
     */
    Outside = 5
}
/**
 * A command to cancel changes caused by the previous command.
 */
declare class UndoCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the UndoCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to reverse actions of the previous undo command.
 */
declare class RedoCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the RedoCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to add an HTML formatted content in place of a selected range.
 */
declare class InsertHtmlCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertHtmlCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param html A string that specifies the inserted HTML code.
     */
    execute(html: string): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to invoke the Hyperlink dialog.
 */
declare class OpenInsertHyperlinkDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the OpenInsertHyperlinkDialogCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to insert a hyperlink at the current position in the document.
 */
declare class InsertHyperlinkCommand {
    /**
     * Executes the InsertHyperlinkCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param settings A HyperlinkSettings object specifying hyperlink settings.
     */
    execute(settings: HyperlinkSettings): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<HyperlinkSettings>;
}
/**
 * A command to delete the selected hyperlink.
 */
declare class DeleteHyperlinkCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the DeleteHyperlinkCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to delete all hyperlinks in a selected range.
 */
declare class DeleteHyperlinksCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the DeleteHyperlinksCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to navigate to the document bookmark or URI (uniform resource identifier) specified for the hyperlink.
 */
declare class OpenHyperlinkCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the OpenHyperlinkCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to change the specified hyperlink.
 */
declare class ChangeHyperlinkCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the ChangeHyperlinkCommand command with the specified parameters. true if the command has been successfully executed; false if the command execution has failed.
     * @param fieldIndex An integer value specifying the field's index in the specified sub-document.
     * @param hyperlinkSettings An object specifying the hyperlink's properties.
     * @param subDocumentId A nullable value specifying the sub-document.
     */
    execute(fieldIndex: number, hyperlinkSettings: HyperlinkSettings, subDocumentId?: number): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * Contains settings to define a hyperlink.
 */
declare class HyperlinkSettings {
    /**
     * Specifies a hyperlink text.
     */
    text: string;
    /**
     * Specifies a tooltip text.
     */
    tooltip: string;
    /**
     * Specifies a hyperlink's destination.
     */
    url: string;
    /**
     * Specifies a hyperlink's bookmark.
     */
    bookmark: string;
    /**
     * Initializes a new instance of the HyperlinkSettings object.
     * @param url A hyperlink URL.
     * @param bookmark A bookmark name.
     * @param tooltip A tooltip text.
     * @param text A hyperlink text.
     */
    constructor(url?: string, bookmark?: string, tooltip?: string, text?: string);
}
/**
 * A command to insert a page break at the current position in the document.
 */
declare class InsertPageBreakCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertPageBreakCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to insert a column break at the current position in the document.
 */
declare class InsertColumnBreakCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertColumnBreakCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to insert a section break and start a new section on the next page.
 */
declare class InsertSectionBreakNextPageCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertSectionBreakNextPageCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to insert a section break and start a new section on the next even-numbered page.
 */
declare class InsertSectionBreakEvenPageCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertSectionBreakEvenPageCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to insert a section break and start a new section on the next odd-numbered page.
 */
declare class InsertSectionBreakOddPageCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertSectionBreakOddPageCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to insert the line break at the current position in the document.
 */
declare class InsertLineBreakCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertLineBreakCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to increment the indent level of paragraphs in a selected range.
 */
declare class IncreaseIndentCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the IncreaseIndentCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to decrement the indent level of paragraphs in a selected range.
 */
declare class DecreaseIndentCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the DecreaseIndentCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to toggle the visibility of hidden symbols.
 */
declare class ShowHiddenSymbolsCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ShowHiddenSymbolsCommand command. true if the command has been successfully executed; false if the command execution has failed.
     * @param show true, to show hidden symbols; otherwise, false.
     */
    execute(show?: boolean): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to toggle left paragraph alignment on and off.
 */
declare class ToggleParagraphAlignmentLeftCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleParagraphAlignmentLeftCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to toggle centered paragraph alignment on and off.
 */
declare class ToggleParagraphAlignmentCenterCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleParagraphAlignmentCenterCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to toggle right paragraph alignment on and off.
 */
declare class ToggleParagraphAlignmentRightCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleParagraphAlignmentRightCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to toggle justified paragraph alignment on and off.
 */
declare class ToggleParagraphAlignmentJustifyCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleParagraphAlignmentJustifyCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to format a current paragraph with single line spacing.
 */
declare class SetSingleParagraphSpacingCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the SetSingleParagraphSpacingCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to format a current paragraph with one and a half line spacing.
 */
declare class SetSesquialteralParagraphSpacingCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the SetSesquialteralParagraphSpacingCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to format a current paragraph with double line spacing.
 */
declare class SetDoubleParagraphSpacingCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the SetDoubleParagraphSpacingCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to add spacing before a paragraph.
 */
declare class AddSpacingBeforeParagraphCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the AddSpacingBeforeParagraphCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to add spacing after a paragraph.
 */
declare class AddSpacingAfterParagraphCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the AddSpacingAfterParagraphCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to remove spacing before the selected paragraph.
 */
declare class RemoveSpacingBeforeParagraphCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the RemoveSpacingBeforeParagraphCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to remove spacing after the selected paragraph.
 */
declare class RemoveSpacingAfterParagraphCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the RemoveSpacingAfterParagraphCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to change the background color of paragraphs in a selected range.
 */
declare class ChangeParagraphBackColorCommand extends CommandBase {
    /**
     * Executes the ChangeParagraphBackColorCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param color A string specifying a background color of the paragraphs in a selected range. May be specified as a color name or a hex color value.
     */
    execute(color: string): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<string>;
}
/**
 * A command to invoke the Paragraph dialog allowing end-users to set paragraph formatting.
 */
declare class OpenParagraphFormattingDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the OpenParagraphFormattingDialogCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to change the formatting of paragraphs in a selected range.
 */
declare class ChangeParagraphFormattingCommand extends CommandBase {
    /**
     * Executes the ChangeParagraphFormattingCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param settings A ParagraphFormattingSettings object specifying paragraph formatting settings.
     */
    execute(settings: ParagraphFormattingSettings): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<ParagraphFormattingSettings>;
}
/**
 * A command to increment the left indentation of paragraphs in a selected range.
 */
declare class IncrementParagraphLeftIndentCommand extends CommandBase {
    /**
     * Executes the IncrementParagraphLeftIndentCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to decrement the left indentation of paragraphs in a selected range.
 */
declare class DecrementParagraphLeftIndentCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the DecrementParagraphLeftIndentCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to invoke the Tabs paragraph dialog.
 */
declare class OpenTabsDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the OpenTabsDialogCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to change paragraph tab stops.
 */
declare class ChangeTabsCommand {
    /**
     * Executes the ChangeTabsCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param settings A TabsSettings object maintaining the information about tab stops.
     */
    execute(settings: TabsSettings): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<TabsSettings>;
}
/**
 * A command to apply a paragraph level to the selected text
 */
declare class SetParagraphLevelCommand extends CommandBase {
    /**
     * Executes the SetParagraphLevelCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param level An integer value specifying the applied style. The value should be in the range from 0 to 9.
     */
    execute(level: number): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<number>;
}
/**
 * Contains the information about tab stops.
 */
declare class TabsSettings {
    /**
     * Specifies the default distance between tab stops.
     */
    defaultTabStop: number;
    /**
     * Gets or sets a list of tab stops.
     */
    tabs: TabSettings[];
}
/**
 * Contains settings of a tab stop.
 */
declare class TabSettings {
    /**
     * Specifies the tab alignment type.
     */
    alignment: TabAlign;
    /**
     * Specifies the tab leader symbol.
     */
    leader: TabLeaderType;
    /**
     * Specifies the position of the tab stop.
     */
    position: number;
    /**
     * Specifies whether the individual tab stop is in effect.
     */
    deleted: boolean;
}
/**
 * List alignment types for tab stops.
 */
declare enum TabAlign {
    /**
     * Text is left aligned with the tab stop.
     */
    Left = 0,
    /**
     * Text is centered on the tab stop.
     */
    Center = 1,
    /**
     * Text is right aligned with the tab stop.
     */
    Right = 2,
    /**
     * The decimal point is located at the tab stop.
     */
    Decimal = 3,
    /**
     * For internal use only.
     */
    Numbering = 4
}
/**
 * Lists repeated characters used to fill in the space created by a tab which ends at the tab stop.
 */
declare enum TabLeaderType {
    /**
     * No leader characters are used.
     */
    None = 0,
    /**
     * The dot is used as a tab leader character.
     */
    Dots = 1,
    /**
     * The middle dot (interpunct) is used as a tab leader character.
     */
    MiddleDots = 2,
    /**
     * The hyphen is used as a tab leader character.
     */
    Hyphens = 3,
    /**
     * The underscore is used as a tab leader character.
     */
    Underline = 4,
    /**
     * The line is used as a tab leader character.
     */
    ThickLine = 5,
    /**
     * The equal sign is used as a tab leader character.
     */
    EqualSign = 6
}
/**
 * Contains paragraph formatting settings.
 */
declare class ParagraphFormattingSettings {
    /**
     * Specifies the paragraph alignment.
     */
    alignment: ParagraphAlignment;
    /**
     * Specifies the paragraph's outline level.
     */
    outlineLevel: number;
    /**
     * Specifies the paragraph's right indent.
     */
    rightIndent: number;
    /**
     * Specifies the spacing before the paragraph.
     */
    spacingBefore: number;
    /**
     * Specifies the spacing after the paragraph.
     */
    spacingAfter: number;
    /**
     * Specifies a spacing between lines in the paragraph.
     */
    lineSpacingType: ParagraphLineSpacingType;
    /**
     * Specifies whether and how the paragraph's first line is indented.
     */
    firstLineIndentType: ParagraphFirstLineIndent;
    /**
     * Specifies the indent of the paragraph's first line.
     */
    firstLineIndent: number;
    /**
     * Specifies whether to remove an additional space (contextual spacing) between paragraphs of the same style.
     */
    contextualSpacing: boolean;
    /**
     * Specifies whether all lines in a paragraph should appear on the same page.
     */
    keepLinesTogether: boolean;
    /**
     * Specifies whether a page break is inserted before the paragraph.
     */
    pageBreakBefore: boolean;
    /**
     * Specifies the left indent for text in a paragraph.
     */
    leftIndent: number;
    /**
     * Specifies a line spacing value.
     */
    lineSpacing: number;
    /**
     * Specifies the paragraph background color.
     */
    backColor: string;
}
/**
 * Lists values specifying the paragraph alignment.
 */
declare enum ParagraphAlignment {
    /**
     * Text is aligned to the left of the paragraph.
     */
    Left = 0,
    /**
     * Text is aligned to the right of the paragraph.
     */
    Right = 1,
    /**
     * Text is aligned to the center of the paragraph.
     */
    Center = 2,
    /**
     * Text is justified to the entire width of the paragraph.
     */
    Justify = 3
}
/**
 * Lists values specifying the type of paragraph line spacing.
 */
declare enum ParagraphLineSpacingType {
    /**
     * This option accommodates the largest font in that line, plus a small amount of extra space. The amount of extra space varies depending on the font that is used.
     */
    Single = 0,
    /**
     * This option is one-and-one-half times that of single line spacing.
     */
    Sesquialteral = 1,
    /**
     * This option is twice that of single line spacing.
     */
    Double = 2,
    /**
     * This option sets line spacing that can be expressed in numbers greater than 1. For example, setting line spacing to 1.15 will increase the space by 15 percent, and setting line spacing to 3 increases the space by 300 percent (triple spacing). The multiplication value is specified by the lineSpacing property.
     */
    Multiple = 3,
    /**
     * This option sets fixed line spacing, specified by the ParagraphFormattingSettings.lineSpacing property.
     */
    Exactly = 4,
    /**
     * The line spacing can be greater than or equal to, but never less than, the specified ParagraphFormattingSettings.lineSpacing value.
     */
    AtLeast = 5
}
/**
 * Lists values specifying the indent for the first line in a paragraph.
 */
declare enum ParagraphFirstLineIndent {
    /**
     * The first line of a paragraph doesn't have any indent.
     */
    None = 0,
    /**
     * The first line of a paragraph is indented to the right by the value specified by the ParagraphFormattingSettings.firstLineIndent property.
     */
    Indented = 1,
    /**
     * The first line of a paragraph is indented to the left, by the value specified by the ParagraphFormattingSettings.firstLineIndent property.
     */
    Hanging = 2
}
/**
 * A command to toggle between the bulleted paragraph and normal text.
 */
declare class ToggleBulletedListCommand extends CommandBase {
    /**
     * Executes the ToggleBulletedListCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to toggle between the numbered paragraph and normal text.
 */
declare class ToggleNumberingListCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleNumberingListCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to toggle between the multilevel list style and normal text.
 */
declare class ToggleMultilevelListCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleMultilevelListCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to invoke the Bulleted and Numbering dialog.
 */
declare class OpenNumberingListDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the OpenNumberingListDialogCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to invoke the Customize Numbered List dialog.
 */
declare class OpenCustomNumberingListDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the OpenCustomNumberingListDialogCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param abstractNumberingListIndex An integer value specifying index of abstract numbering list.
     */
    execute(abstractNumberingListIndex: number): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to customize the numbered list parameters.
 */
declare class ChangeCustomNumberingListCommand {
    /**
     * Executes the ChangeCustomNumberingListCommand command with the specified parameters. true if the command has been successfully executed; false if the command execution has failed.
     * @param abstractNumberingListIndex An integer value specifying the numbering list index.
     * @param listLevelSettings An array of ListLevelSettings objects defining settings for list levels.
     */
    execute(abstractNumberingListIndex: number, listLevelSettings: ListLevelSettings[]): boolean;
    /**
     * Gets information about the command's state. An object that contains the command's state.
     * @param abstractNumberingListIndex An integer value specifying the index of the abstract numbering list item whose state to return.
     */
    getState(abstractNumberingListIndex: number): CommandState<ListLevelSettings[]>;
}
/**
 * A command to restart the numbering list.
 */
declare class RestartNumberingListCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the RestartNumberingListCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to increment the indent level of paragraphs in a selected numbered list.
 */
declare class IncrementNumberingIndentCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the IncrementNumberingIndentCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to decrement the indent level of paragraphs in a selected numbered list.
 */
declare class DecrementNumberingIndentCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the DecrementNumberingIndentCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to continue the list's numbering.
 */
declare class ContinueNumberingListCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the ContinueNumberingListCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to insert numeration to a paragraph making it a numbering list item.
 */
declare class InsertNumerationCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the ChangePageMarginsCommand command with the specified parameters. true if the command has been successfully executed; false if the command execution has failed.
     * @param numberingListIndex The list index.
     * @param isAbstractNumberingList true, for abstract lists; otherwise, false.
     */
    execute(numberingListIndex: number, isAbstractNumberingList?: boolean): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to remove the selected numeration.
 */
declare class RemoveNumerationCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the RemoveNumerationCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * Contains settings to define individual bulleted or numbered list levels.
 */
declare class ListLevelSettings {
    /**
     * Gets or sets the pattern used to format the list level for display purposes.
     */
    displayFormatString: string;
    /**
     * Gets or sets the numbering format used for the current list level's paragraph.
     */
    format: ListLevelFormat;
    /**
     * Gets the list level item's start position in the document.
     */
    start: number;
    /**
     * Gets or sets the paragraph text alignment within numbered list levels.
     */
    alignment: ListLevelNumberAlignment;
    /**
     * Gets or sets the character inserted after the number for a numbered list item.
     */
    separator: string;
    /**
     * Gets or sets the left indent for text within the current list level's paragraph.
     */
    leftIndent: number;
    /**
     * Gets or sets a value specifying the indent of the first line of the current list level's paragraph.
     */
    firstLineIndent: number;
    /**
     * Gets or sets a value specifying whether and how the first line of the current list level's paragraph is indented.
     */
    firstLineIndentType: ParagraphFirstLineIndent;
    /**
     * Gets or sets the font name of the current list level's paragraph.
     */
    fontName: string;
    /**
     * Gets or sets the font color of the current list level's paragraph.
     */
    fontColor: string;
    /**
     * Gets or sets the font size of the current list level's paragraph.
     */
    fontSize: number;
    /**
     * Gets or sets whether the font formatting of the current list level's paragraph is bold.
     */
    fontBold: boolean;
    /**
     * Gets or sets whether the font formatting of the current list level's paragraph is italic.
     */
    fontItalic: boolean;
}
/**
 * Lists values that specify the numbering format used for a group of automatically numbered objects, such as pages.
 */
declare enum ListLevelFormat {
    /**
     * Specifies that the sequence shall consist of decimal numbering. Example: 1, 2, 3, ... , 9, 10, 11
     */
    Decimal = 0,
    /**
     * Specifies that the sequence shall consist of hiragana characters in the traditional a-i-u-e-o order. Currently not supported.
     */
    AIUEOHiragana = 1,
    /**
     * Specifies that the sequence shall consist of full-width hiragana characters in the traditional a-i-u-e-o order. Currently not supported.
     */
    AIUEOFullWidthHiragana = 2,
    /**
     * Specifies that the sequence shall consist of ascending Abjad numerals. Currently not supported.
     */
    ArabicAbjad = 3,
    /**
     * Specifies that the sequence shall consist of characters in the Arabic alphabet. Currently not supported.
     */
    ArabicAlpha = 4,
    /**
     * Specifies that the sequence shall consist of bullet characters.
     */
    Bullet = 5,
    /**
     * Specifies that the sequence shall consist of cardinal text of the current language. Example: one, two, three. The following languages are currently supported: English, French, German, Italian, Russian, Swedish and Turkish.
     */
    CardinalText = 6,
    /**
     * Specifies that the sequence shall consist of characters as defined in the Chicago Manual of Style. Currently not supported.
     */
    Chicago = 7,
    /**
     * Specifies that the sequence shall consist of ascending numbers from the Chinese counting system. Currently not supported.
     */
    ChineseCounting = 8,
    /**
     * Specifies that the sequence shall consist of sequential numbers from the Chinese counting thousand system. Currently not supported.
     */
    ChineseCountingThousand = 9,
    /**
     * Specifies that the sequence shall consist of sequential numbers from the Chinese simplified legal format. Currently not supported.
     */
    ChineseLegalSimplified = 10,
    /**
     * Specifies that the sequence shall consist of sequential numbers from the Korean Chosung format. Currently not supported.
     */
    Chosung = 11,
    /**
     * Specifies that the sequence shall consist of decimal numbering enclosed in a circle, using the enclosed alphanumeric glyph character. Once the specified sequence reaches 21, the numbers may be replaced with non-enclosed equivalents. Currently not supported.
     */
    DecimalEnclosedCircle = 12,
    /**
     * Specifies that the sequence shall consist of decimal numbering enclosed in a circle, using the enclosed alphanumeric glyph character. Currently not supported.
     */
    DecimalEnclosedCircleChinese = 13,
    /**
     * Specifies that the sequence shall consist of decimal numbering followed by a period, using the enclosed alphanumeric glyph character. Currently not supported.
     */
    DecimalEnclosedFullstop = 14,
    /**
     * Specifies that the sequence shall consist of decimal numbering enclosed in parentheses.
     */
    DecimalEnclosedParentheses = 15,
    /**
     * Specifies that the sequence shall consist of double-byte Arabic numbering. Currently not supported.
     */
    DecimalFullWidth = 16,
    /**
     * Specifies that the sequence shall consist of an alternative set of double-byte Arabic numbering, if one exists in the current font. Currently not supported.
     */
    DecimalFullWidth2 = 17,
    /**
     * Specifies that the sequence shall consist of single-byte Arabic numbering. Example: 1, 2, 3
     */
    DecimalHalfWidth = 18,
    /**
     * Specifies that the sequence shall consist of Arabic numbering with a zero added to numbers one through nine. Example: 01, 02, 03, ..., 09, 10
     */
    DecimalZero = 19,
    /**
     * Specifies that the sequence shall consist of sequential numbers from the Korean Ganada format. Currently not supported.
     */
    Ganada = 20,
    /**
     * Specifies that the sequence shall consist of Hebrew numerals. Currently not supported.
     */
    Hebrew1 = 21,
    /**
     * Specifies that the sequence shall consist of the Hebrew alphabet. Currently not supported.
     */
    Hebrew2 = 22,
    /**
     * Specifies that the sequence shall consist of hexadecimal numbering. Example: 1, 2, 3, ... , 9, A, B
     */
    Hex = 23,
    /**
     * Specifies that the sequence shall consist of Hindi consonants. Currently not supported.
     */
    HindiConsonants = 24,
    /**
     * Specifies that the sequence shall consist of sequential numbers from the Hindi counting system. Currently not supported.
     */
    HindiDescriptive = 25,
    /**
     * Specifies that the sequence shall consist of Hindi numbers. Currently not supported.
     */
    HindiNumbers = 26,
    /**
     * Specifies that the sequence shall consist of Hindi vowels. Currently not supported.
     */
    HindiVowels = 27,
    /**
     * Specifies that the sequence shall consist of sequential numerical ideographs enclosed in a circle, using the appropriate character. Currently not supported.
     */
    IdeographDigital = 28,
    /**
     * Specifies that the sequence shall consist of sequential numerical ideographs enclosed in a circle, using the appropriate character. Currently not supported.
     */
    IdeographEnclosedCircle = 29,
    /**
     * Specifies that the sequence shall consist of traditional sequential numerical legal ideographs. Currently not supported.
     */
    IdeographLegalTraditional = 30,
    /**
     * Specifies that the sequence shall consist of traditional sequential numerical ideographs. Currently not supported.
     */
    IdeographTraditional = 31,
    /**
     * Specifies that the sequence shall consist of traditional sequential numerical ideographs. Currently not supported.
     */
    IdeographZodiac = 32,
    /**
     * Specifies that the sequence shall consist of traditional sequential zodiac ideographs. Currently not supported.
     */
    IdeographZodiacTraditional = 33,
    /**
     * Specifies that the sequence shall consist of the iroha. Currently not supported.
     */
    Iroha = 34,
    /**
     * Specifies that the sequence shall consist of the full-width forms of the iroha. Currently not supported.
     */
    IrohaFullWidth = 35,
    /**
     * Specifies that the sequence shall consist of the full-width forms of the iroha. Currently not supported.
     */
    JapaneseCounting = 36,
    /**
     * Specifies that the sequence shall consist of sequential numbers from the Japanese digital ten thousand counting system. Currently not supported.
     */
    JapaneseDigitalTenThousand = 37,
    /**
     * Specifies that the sequence shall consist of sequential numbers from the Japanese legal counting system. Currently not supported.
     */
    JapaneseLegal = 38,
    /**
     * Specifies that the sequence shall consist of sequential numbers from the Korean counting system. Currently not supported.
     */
    KoreanCounting = 39,
    /**
     * Specifies that the sequence shall consist of sequential numbers from the Korean digital counting system. Currently not supported.
     */
    KoreanDigital = 40,
    /**
     * Specifies that the sequence shall consist of sequential numbers from the Korean digital counting system. Currently not supported.
     */
    KoreanDigital2 = 41,
    /**
     * Specifies that the sequence shall consist of sequential numbers from the Korean legal numbering system. Currently not supported.
     */
    KoreanLegal = 42,
    /**
     * Specifies that the sequence shall consist of the letters of the Latin alphabet in lower case. Example: a, b, c
     */
    LowerLetter = 43,
    /**
     * Specifies that the sequence shall consist of lowercase roman numerals. Example: i, ii, iii
     */
    LowerRoman = 44,
    /**
     * Specifies the default numbering sequence (specifies that the sequence consists of decimal numbering).
     */
    None = 45,
    /**
     * Specifies that the sequence shall consist of Arabic numbering surrounded by dash characters. Example: - 1 -, - 2 -, - 3 -
     */
    NumberInDash = 46,
    /**
     * Specifies that the sequence shall consist of ordinals of the current language. Example: 1st, 2nd, 3rd. The following languages are currently supported: English, French, German, Italian, Russian, Swedish and Turkish.
     */
    Ordinal = 47,
    /**
     * Specifies that the sequence shall consist of ordinal text of the current language. Example: first, second, third. The following languages are currently supported: English, French, German, Italian, Russian, Swedish and Turkish.
     */
    OrdinalText = 48,
    /**
     * Specifies that the sequence shall consist of the letters of the Russian alphabet in lower case. Example: &#x430;, &#x431;, &#x432;
     */
    RussianLower = 49,
    /**
     * Specifies that the sequence shall consist of the letters of the Russian alphabet in upper case. Example: &#x410;, &#x411;, &#x412;
     */
    RussianUpper = 50,
    /**
     * Specifies that the sequence shall consist of sequential numbers from the Taiwanese counting system. Currently not supported.
     */
    TaiwaneseCounting = 51,
    /**
     * Specifies that the sequence shall consist of sequential numbers from the Taiwanese counting thousand system. Currently not supported.
     */
    TaiwaneseCountingThousand = 52,
    /**
     * Specifies that the sequence shall consist of sequential numbers from the Taiwanese digital counting system. Currently not supported.
     */
    TaiwaneseDigital = 53,
    /**
     * Specifies that the sequence shall consist of sequential numbers from the Thai counting system. Currently not supported.
     */
    ThaiDescriptive = 54,
    /**
     * Specifies that the sequence shall consist of Thai letters. Currently not supported.
     */
    ThaiLetters = 55,
    /**
     * Specifies that the sequence shall consist of Thai numerals. Currently not supported.
     */
    ThaiNumbers = 56,
    /**
     * Specifies that the sequence shall consist of the letters of the Latin alphabet in upper case. Example: A, B, C
     */
    UpperLetter = 57,
    /**
     * Specifies that the sequence shall consist of uppercase roman numerals. Example: I, II, III
     */
    UpperRoman = 58,
    /**
     * Specifies that the sequence shall consist of Vietnamese numerals. Currently not supported.
     */
    VietnameseDescriptive = 59
}
/**
 * Lists values that specify the paragraph text alignment within numbered list levels.
 */
declare enum ListLevelNumberAlignment {
    /**
     * Text is aligned to the left of the list level's paragraph.
     */
    Left = 0,
    /**
     * Text is aligned to the center of the list level's paragraph.
     */
    Center = 1,
    /**
     * Text is aligned to the right of the list level's paragraph.
     */
    Right = 2
}
/**
 * A command to invoke the Insert Image dialog.
 */
declare class OpenInsertPictureDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the OpenInsertPictureDialogCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to insert a picture from a file.
 */
declare class InsertPictureCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertPictureCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param imageUrl A string value specifying picture's Url.
     */
    execute(imageUrl: string): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to invoke the Symbols dialog.
 */
declare class OpenInsertSymbolDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the OpenInsertSymbolDialogCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to insert a character into the document.
 */
declare class InsertSymbolCommand {
    /**
     * Executes the InsertSymbolCommand command with the specified parameters. true if the command has been successfully executed; false if the command execution has failed.
     * @param symbol A string value specifying symbols to insert.
     * @param fontName A string value specifying the font of symbols to insert.
     */
    execute(symbol: string, fontName: string): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to insert a paragraph break at the current position in the document.
 */
declare class InsertParagraphCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertParagraphCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to insert text at the current position in the document.
 */
declare class InsertTextCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertTextCommand command with the specified parameters. true if the command has been successfully executed; false if the command execution has failed.
     * @param text A string value specifying a text to insert.
     * @param subDocumentId An integer value specifying the sub-document.
     */
    execute(text: string, interval?: Interval | number, subDocumentId?: number): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to delete the text in a selected range.
 */
declare class DeleteCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the DeleteCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to remove the previous word.
 */
declare class RemovePrevWordCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the RemovePrevWordCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to remove the next word.
 */
declare class RemoveNextWordCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the RemoveNextWordCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to move the cursor backwards and erase the character in that space.
 */
declare class BackspaceCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the BackspaceCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to scale pictures in a selected range.
 */
declare class ChangePictureScaleCommand extends CommandBase {
    /**
     * Executes the ChangePictureScaleCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param scale The picture scale.
     * @param x The picture scale object or the x-scale factor as a percent.
     * @param y The y-scale factor as a percent.
     */
    execute(x: number | Scale, y?: number): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<Scale>;
}
/**
 * A command to move the selected range to a specific position in the document.
 */
declare class MoveContentCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the MoveContentCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param position An integer value specifying position to insert selected text.
     */
    execute(position: number): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to copy the selected text and place it to the specified position.
 */
declare class CopyContentCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the CopyContentCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param position An integer value specifying a position of the inserted text.
     */
    execute(position: number): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to insert a tab character at the current position in the document.
 */
declare class InsertTabCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertTabCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to add a non-breaking space in place of a selected range.
 */
declare class InsertNonBreakingSpaceCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertNonBreakingSpaceCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * Defines the scaling settings.
 */
declare class Scale {
    /**
     * Specifies the image's x-scale factor as a percent.
     */
    x: number;
    /**
     * Specifies the image's y-scale factor as a percent.
     */
    y: number;
}
/**
 * A command to change page margin settings.
 */
declare class ChangePageMarginsCommand extends CommandBase {
    /**
     * Executes the ChangePageMarginsCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param left The margin settings object or the left margin in twips.
     * @param top The top margin in twips.
     * @param right The right margin in twips.
     * @param bottom The bottom margin in twips.
     */
    execute(left?: number | Margins, top?: number, right?: number, bottom?: number): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<Margins>;
}
/**
 * A command to invoke the Margins tab of the Page Setup dialog.
 */
declare class OpenPageMarginsDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the OpenPageMarginsDialogCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to change the page orientation.
 */
declare class ChangePageOrientationCommand extends CommandBase {
    /**
     * Executes the ChangePageOrientationCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param orientation The page orientation.
     */
    execute(orientation: Orientation): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<Orientation>;
}
/**
 * A command to invoke the Paper tab of the Page Setup dialog.
 */
declare class OpenPagePaperSizeDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the OpenPagePaperSizeDialogCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to set the page size.
 */
declare class SetPageSizeDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the SetPageSizeDialogCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to change the page size.
 */
declare class ChangePageSizeCommand extends CommandBase {
    /**
     * Executes the ChangePageSizeCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param size The page size.
     * @param width The page size object or the page width.
     * @param height The page height.
     */
    execute(width: number | Size, height?: number): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<Size>;
}
/**
 * A command to change the number of section columns having the same width.
 */
declare class ChangeSectionEqualColumnCountCommand extends CommandBase {
    /**
     * Executes the ChangeSectionEqualColumnCountCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param columnCount An interger number specifying the number of section columns having the same width.
     */
    execute(columnCount: number): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<number>;
}
/**
 * A command to invoke the Columns dialog.
 */
declare class OpenSectionColumnsDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the OpenSectionColumnsDialogCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to change the settings of individual section columns.
 */
declare class ChangeSectionColumnsCommand {
    /**
     * Executes the ChangeSectionColumnsCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param columns An array of SectionColumn objects.
     */
    execute(columns: SectionColumn[]): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<SectionColumn[]>;
}
/**
 * A command to change the background color of the page.
 */
declare class ChangePageColorCommand extends CommandBase {
    /**
     * Executes the ChangePageColorCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param color A string specifying a background color of all pages contained in the document. May be specified as a color name or a hex color value.
     */
    execute(color: string): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<string>;
}
/**
 * A command to activate the page header and begin editing.
 */
declare class InsertHeaderCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertHeaderCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to activate the page footer and begin editing.
 */
declare class InsertFooterCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertFooterCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to link a header/footer to the previous section, so it has the same content.
 */
declare class LinkHeaderFooterToPreviousCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the LinkHeaderFooterToPreviousCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to navigate to the page footer from the page header in the header/footer editing mode.
 */
declare class GoToFooterCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the GoToFooterCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to navigate to the page header from the page footer in the header/footer editing mode.
 */
declare class GoToHeaderCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the GoToHeaderCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to navigate to the next page header or footer in the header/footer editing mode.
 */
declare class GoToNextHeaderFooterCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the GoToNextHeaderFooterCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to navigate to the previous page header or footer in the header/footer editing mode.
 */
declare class GoToPreviousHeaderFooterCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the GoToPreviousHeaderFooterCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to change the header/footer edit mode, so it allows creation of a different header or footer for the first page of a document or section.
 */
declare class SetDifferentFirstPageHeaderFooterCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the SetDifferentFirstPageHeaderFooterCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param differentFirstPage true to apply a different text for the first page's header and footer, false to remove the difference.
     */
    execute(differentFirstPage?: boolean): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to change the header/footer edit mode so it allows creation of a different header or footer for odd and even pages of a document or section.
 */
declare class SetDifferentOddAndEvenPagesHeaderFooterCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the SetDifferentOddAndEvenPagesHeaderFooterCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param differentOddAndEvenPages true to apply a different text for the header and footer of the odd and even pages , false to remove the difference.
     */
    execute(differentOddAndEvenPages?: boolean): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to finish header/footer editing.
 */
declare class CloseHeaderFooterCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the CloseHeaderFooterCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * Defines a section column in the document.
 */
declare class SectionColumn {
    /**
     * Specifies the width of the section column.
     */
    width: number;
    /**
     * Specifies the space between adjacent section columns.
     */
    spacing: number;
}
/**
 * Defines the size settings.
 */
declare class Size {
    /**
     * Gets or sets the width value in twips.
     */
    width: number;
    /**
     * Gets or sets the height value in twips.
     */
    height: number;
}
/**
 * Defines the margin settings.
 */
declare class Margins {
    /**
     * Gets or sets the left margin.
     */
    left: number;
    /**
     * Gets or sets the top margin.
     */
    top: number;
    /**
     * Gets or sets the right margin.
     */
    right: number;
    /**
     * Gets or sets the bottom margin.
     */
    bottom: number;
}
/**
 * Lists values specifying the page orientation.
 */
declare enum Orientation {
    /**
     * Worksheet page orientation is landscape.
     */
    Landscape = 0,
    /**
     * Worksheet page orientation is portrait.
     */
    Portrait = 1
}
/**
 * A command to add an RTF formatted content in the selected position.
 */
declare class InsertRtfCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertRtfCommand command with the specified parameters. true if the command has been successfully executed; false if the command execution has failed.
     * @param rtfText A string representing the RTF formatted content to insert.
     * @param position A value specifying the position to insert in the specified sub-document.
     * @param subDocumentId A value identifying the target sub-document.
     * @param callback A callback function that passes the inserted content's Interval object and the bool parameter that displays whether the RTF formatted string is valid.
     */
    execute(rtfText: string, position: number, subDocumentId?: number, callback?: (interval: Interval, isRtfValid: boolean) => void): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to receive a document's content in RTF format.
 */
declare class GetRtfCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the GetRtfCommand command with the specified parameters. true if the command has been successfully executed; false if the command execution has failed.
     * @param interval An object specifying the required interval in the specified sub-document.
     * @param callback A function that passes the RTF formatted string as a parameter.
     * @param subDocumentId A value identifying the target sub-document.
     */
    execute(interval: Interval, callback: (rtf: string) => void, subDocumentId?: number): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to assign a shortcut to the specified client command.
 */
declare class AssignShortcutCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the AssignShortcutCommand command with the specified parameters. true if the command has been successfully executed; false if the command execution has failed.
     * @param keyCode A specifically generated code that uniquely identifies the combination of keys specified for a shortcut. This code is specified using the ASPxClientUtils.GetShortcutCode method.
     * @param callback A callback function to execute when a shortcut is activated.
     */
    execute(keyCode: number, callback: () => void): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to invoke the Spelling dialog window.
 */
declare class OpenSpellingDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the OpenSpellingDialogCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to invoke the Insert Table dialog.
 */
declare class OpenInsertTableDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the OpenInsertTableDialogCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to invoke the Insert Table dialog.
 */
declare class InsertTableCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertTableCommand command with the specified parameters. true if the command has been successfully executed; false if the command execution has failed.
     * @param columnCount An integer value specifying a number of columns in a generated table.
     * @param rowCount An integer value specifying a number of rows in a generated table.
     */
    execute(columnCount: number, rowCount: number): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to invoke the Table Properties dialog.
 */
declare class OpenTableFormattingDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the OpenTableFormattingDialogCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to change the selected table's formatting.
 */
declare class ChangeTableFormattingCommand {
    /**
     * Executes the ChangeTableFormattingCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param settings A TableFormattingSettings object containing the settings to format a table.
     */
    execute(settings: TableFormattingSettings): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<TableFormattingSettings>;
}
/**
 * A command to change the selected table's preferred row height.
 */
declare class ChangeTableRowPreferredHeightCommand extends CommandBase {
    /**
     * Executes the ChangeTableRowPreferredHeightCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param preferredHeight A TableHeightUnit object specifying preferred height of the selected table rows.
     */
    execute(preferredHeight: TableHeightUnit): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<TableHeightUnit>;
}
/**
 * A command to change the preferred cell width of the selected table rows.
 */
declare class ChangeTableCellPreferredWidthCommand extends CommandBase {
    /**
     * Executes the ChangeTableCellPreferredWidthCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param preferredWidth A TableWidthUnit object specifying preferred width of the selected table rows.
     */
    execute(preferredWidth: TableWidthUnit): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<TableWidthUnit>;
}
/**
 * A command to change the selected table's preferred column width.
 */
declare class ChangeTableColumnPreferredWidthCommand extends CommandBase {
    /**
     * Executes the ChangeTableColumnPreferredWidthCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param preferredWidth A TableWidthUnit object specifying preferred width of the selected table columns.
     */
    execute(preferredWidth: TableWidthUnit): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<TableWidthUnit>;
}
/**
 * A command to change the cell formatting of the selected table elements.
 */
declare class ChangeTableCellFormattingCommand {
    /**
     * Executes the ChangeTableCellFormattingCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param settings A TableFormattingSettings object specifying cell formatting of the selected table elements.
     */
    execute(settings: TableCellFormattingSettings): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<TableCellFormattingSettings>;
}
/**
 * A command to insert a table column to the left of the current position in the table.
 */
declare class InsertTableColumnToTheLeftCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertTableColumnToTheLeftCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to insert a table column to the right of the current position in the table.
 */
declare class InsertTableColumnToTheRightCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertTableColumnToTheRightCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to insert a row in a table below the selected row.
 */
declare class InsertTableRowBelowCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertTableRowBelowCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to insert a row in a table above the selected row.
 */
declare class InsertTableRowAboveCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertTableRowAboveCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to delete the selected table rows.
 */
declare class DeleteTableRowsCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the DeleteTableRowsCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to delete the selected table columns.
 */
declare class DeleteTableColumnsCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the DeleteTableColumnsCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to insert table cells with a horizontal shift into the selected table.
 */
declare class InsertTableCellWithShiftToTheLeftCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertTableCellWithShiftToTheLeftCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to delete the selected table cells with a horizontal shift.
 */
declare class DeleteTableCellsWithShiftHorizontallyCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the DeleteTableCellsWithShiftHorizontallyCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to delete the selected table cells with a vertical shift.
 */
declare class DeleteTableCellsWithShiftVerticallyCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the DeleteTableCellsWithShiftVerticallyCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to delete the selected table.
 */
declare class DeleteTableCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the DeleteTableCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to invoke the Insert Cells dialog.
 */
declare class InsertTableCellsDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertTableCellsDialogCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to invoke the Delete Cells dialog.
 */
declare class DeleteTableCellsDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the DeleteTableCellsDialogCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to merge the selected table cells.
 */
declare class MergeTableCellsCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the MergeTableCellsCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to invoke the Split Cells dialog.
 */
declare class SplitTableCellsDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the SplitTableCellsDialogCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to split the selected table cells based on the specified options.
 */
declare class SplitTableCellsCommand {
    /**
     * Executes the SplitTableCellsCommand command with the specified parameters. true if the command has been successfully executed; false if the command execution has failed.
     * @param rowCount An integer value specifying a number of rows in the split table cells.
     * @param columnCount An integer value specifying a number of columns in the split table cells.
     * @param mergeBeforeSplit true to merge the selected cells before the splitting; otherwise, false.
     */
    execute(rowCount: number, columnCount: number, mergeBeforeSplit: boolean): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to insert table cells with a vertical shift into the selected table.
 */
declare class InsertTableCellsWithShiftToTheVerticallyCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the InsertTableCellsWithShiftToTheVerticallyCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to invoke the Borders and Shading table dialog.
 */
declare class OpenTableBordersAndShadingDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the OpenTableBordersAndShadingDialogCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to change borders and shading of the selected table elements.
 */
declare class ChangeTableBordersAndShadingCommand {
    /**
     * Executes the ChangeTableBordersAndShadingCommand command with the specified parameters. true if the command has been successfully executed; false if the command execution has failed.
     * @param settings A TableBorderSettings object with settings specifying table borders.
     * @param applyToWholeTable true to apply the border settings to the whole table, false to apply the border settings to the selected cells.
     */
    execute(settings: TableBordersSettings, applyToWholeTable: boolean): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<TableBordersSettings>;
}
/**
 * A command to apply top-left alignment for the selected table cells.
 */
declare class ToggleTableCellAlignTopLeftCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleTableCellAlignTopLeftCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to apply top-center alignment for the selected table cells.
 */
declare class ToggleTableCellAlignTopCenterCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleTableCellAlignTopCenterCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to apply top-right alignment for the selected table cells.
 */
declare class ToggleTableCellAlignTopRightCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleTableCellAlignTopRightCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to apply middle-left alignment for the selected table cells.
 */
declare class ToggleTableCellAlignMiddleLeftCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleTableCellAlignMiddleLeftCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to apply middle-center alignment for the selected table cells.
 */
declare class ToggleTableCellAlignMiddleCenterCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleTableCellAlignMiddleCenterCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to apply middle-right alignment for the selected table cells.
 */
declare class ToggleTableCellAlignMiddleRightCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleTableCellAlignMiddleRightCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to apply bottom-left alignment for the selected table cells.
 */
declare class ToggleTableCellAlignBottomLeftCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleTableCellAlignBottomLeftCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to apply bottom-center alignment for the selected table cells.
 */
declare class ToggleTableCellAlignBottomCenterCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleTableCellAlignBottomCenterCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to apply bottom-right alignment for the selected table cells.
 */
declare class ToggleTableCellAlignBottomRightCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleTableCellAlignBottomRightCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to change the selected table's style.
 */
declare class ChangeTableStyleCommand extends CommandBase {
    /**
     * Executes the ChangeTableStyleCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param style A TableStyle object specifying the style applying to the table.
     */
    execute(style: string | TableStyle): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<TableStyle>;
}
/**
 * A command to toggle top borders for selected cells on/off.
 */
declare class ToggleTableCellTopBorderCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleTableCellTopBorderCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to toggle right borders for selected cells on/off.
 */
declare class ToggleTableCellRightBorderCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleTableCellRightBorderCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to toggle bottom borders for selected cells on/off.
 */
declare class ToggleTableCellBottomBorderCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleTableCellBottomBorderCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to toggle left borders for selected cells on/off.
 */
declare class ToggleTableCellLeftBorderCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleTableCellLeftBorderCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to remove the borders of the selected table cells.
 */
declare class RemoveTableCellBordersCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the RemoveTableCellBordersCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to toggle all borders for selected cells on/off.
 */
declare class ToggleTableCellAllBordersCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleTableCellAllBordersCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to toggle inner borders for selected cells on/off.
 */
declare class ToggleTableCellInsideBordersCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleTableCellInsideBordersCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to toggle inner horizontal borders for selected cells on/off.
 */
declare class ToggleTableCellInsideHorizontalBordersCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleTableCellInsideHorizontalBordersCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to toggle inner vertical borders for selected cells on/off.
 */
declare class ToggleTableCellInsideVerticalBordersCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleTableCellInsideVerticalBordersCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to toggle outer borders for selected cells on/off.
 */
declare class ToggleTableCellOutsideBordersCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ToggleTableCellOutsideBordersCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to change the selected table's style options.
 */
declare class ChangeTableLookCommand extends CommandBase {
    /**
     * Executes the ChangeTableLookCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param settings A TableLookSettings object containing the settings that modify the table appearance.
     */
    execute(settings: TableLookSettings): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<TableLookSettings>;
}
/**
 * A command to change the repository item's table border style.
 */
declare class ChangeTableBorderRepositoryItemCommand extends CommandBase {
    /**
     * Executes the ChangeTableBorderRepositoryItemCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param settings A TableBorderSettings object specifying the repository item's table border style.
     */
    execute(settings: TableBorderSettings): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<TableBorderSettings>;
}
/**
 * A command to change cell shading in the selected table elements.
 */
declare class ChangeTableCellShadingCommand extends CommandBase {
    /**
     * Executes the ChangeTableCellShadingCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param color A string specifying the color of the selected cells' shading. May be specified as a color name or a hex color value.
     */
    execute(color: string): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<string>;
}
/**
 * A command to toggle the display of grid lines for a table with no borders applied - on/off.
 */
declare class ShowTableGridLinesCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ShowTableGridLinesCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param showTableGridLines true to display table grid lines, false to hide table grid lines.
     */
    execute(showTableGridLines?: boolean): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to fit the specified table to its contents.
 */
declare class ToggleTableAutoFitContentsCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the ToggleTableAutoFitContentsCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to fit the specified table to a document's window.
 */
declare class ToggleTableAutoFitWindowCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the ToggleTableAutoFitWindowCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to disable automatic adjusting of the selected table.
 */
declare class ToggleTableFixedColumnWidthCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the ToggleTableFixedColumnWidthCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * Contains the table style settings that modify the table appearance.
 */
declare class TableLookSettings {
    /**
     * Specifies whether special formatting is applied to the first row of the table.
     */
    applyFirstRow: boolean;
    /**
     * Specifies whether special formatting is applied to the last row of the table.
     */
    applyLastRow: boolean;
    /**
     * Specifies whether special formatting is applied to the first column of the table.
     */
    applyFirstColumn: boolean;
    /**
     * Specifies whether special formatting is applied to the last column of the table.
     */
    applyLastColumn: boolean;
    /**
     * Specifies whether row banding formatting is not applied to the table.
     */
    doNotApplyRowBanding: boolean;
    /**
     * Specifies whether column banding formatting is not applied to the table.
     */
    doNotApplyColumnBanding: boolean;
}
/**
 * Contains settings to define table borders.
 */
declare class TableBordersSettings {
    /**
     * Gets or sets the top border's settings.
     */
    top: TableBorderSettings;
    /**
     * Gets or sets the right border's settings.
     */
    right: TableBorderSettings;
    /**
     * Gets or sets the bottom border's settings.
     */
    bottom: TableBorderSettings;
    /**
     * Gets or sets the left border's settings.
     */
    left: TableBorderSettings;
    /**
     * Gets or sets the inside horizontal border's settings.
     */
    insideHorizontal: TableBorderSettings;
    /**
     * Gets or sets the inside vertical border's settings.
     */
    insideVertical: TableBorderSettings;
    /**
     * Gets or sets the background color of table borders.
     */
    backgroundColor: string;
}
/**
 * Contains settings to define a table border.
 */
declare class TableBorderSettings {
    /**
     * Gets or sets the border color.
     */
    color: string;
    /**
     * Gets or sets the border line width in twips.
     */
    width: number;
    /**
     * Gets or sets the border line style.
     */
    style: BorderLineStyle;
}
/**
 * Lists values to specify the line styles for table cell borders.
 */
declare enum BorderLineStyle {
    /**
     * No border.
     */
    Nil = -1,
    /**
     * No border.
     */
    None = 0,
    /**
     * A single solid line.
     */
    Single = 1,
    /**
     * Single line.
     */
    Thick = 2,
    /**
     * Double solid lines.
     */
    Double = 3,
    /**
     * Dots.
     */
    Dotted = 4,
    /**
     * Dashes.
     */
    Dashed = 5,
    /**
     * A dash followed by a dot.
     */
    DotDash = 6,
    /**
     * A dash followed by two dots.
     */
    DotDotDash = 7,
    /**
     * Triple line.
     */
    Triple = 8,
    /**
     * An internal single thin solid line surrounded by a single thick solid line with a small gap between them.
     */
    ThinThickSmallGap = 9,
    /**
     * An internal single thick solid line surrounded by a single thin solid line with a small gap between them.
     */
    ThickThinSmallGap = 10,
    /**
     * An internal single thin solid line surrounded by a single thick solid line surrounded by a single thin solid line with a small gap between all lines.
     */
    ThinThickThinSmallGap = 11,
    /**
     * An internal single thin solid line surrounded by a single thick solid line with a medium gap between them.
     */
    ThinThickMediumGap = 12,
    /**
     * An internal single thick solid line surrounded by a single thin solid line with a medium gap between them.
     */
    ThickThinMediumGap = 13,
    /**
     * An internal single thin solid line surrounded by a single thick solid line surrounded by a single thin solid line with a medium gap between all lines.
     */
    ThinThickThinMediumGap = 14,
    /**
     * An internal single thin solid line surrounded by a single thick solid line with a large gap between them.
     */
    ThinThickLargeGap = 15,
    /**
     * An internal single thick solid line surrounded by a single thin solid line with a large gap between them.
     */
    ThickThinLargeGap = 16,
    /**
     * An internal single thin solid line surrounded by a single thick solid line surrounded by a single thin solid line with a large gap between all lines.
     */
    ThinThickThinLargeGap = 17,
    /**
     * Wavy line.
     */
    Wave = 18,
    /**
     * Double wavy solid lines.
     */
    DoubleWave = 19,
    /**
     * A dash followed by a small gap.
     */
    DashSmallGap = 20,
    /**
     * A series of alternating thin and thick strokes, resembling a barber pole.
     */
    DashDotStroked = 21,
    /**
     * A line border consisting of three staged gradient lines around the cell, getting darker towards the cell.
     */
    ThreeDEmboss = 22,
    /**
     * A line border consisting of three staged gradient lines around the cell, getting darker away from the cell.
     */
    ThreeDEngrave = 23,
    /**
     * The border appears to be outset.
     */
    Outset = 24,
    /**
     * The border appears to be inset.
     */
    Inset = 25,
    /**
     * Apples Art Border
     */
    Apples = 26,
    /**
     * Arched Scallops Art Border.
     */
    ArchedScallops = 27,
    /**
     * Baby Pacifier Art Border.
     */
    BabyPacifier = 28,
    /**
     * Baby Rattle Art Border.
     */
    BabyRattle = 29,
    /**
     * Three Color Balloons Art Border.
     */
    Balloons3Colors = 30,
    /**
     * Hot Air Balloons Art Border.
     */
    BalloonsHotAir = 31,
    /**
     * Black Dash Art Border.
     */
    BasicBlackDashes = 32,
    /**
     * Black Dot Art Border.
     */
    BasicBlackDots = 33,
    /**
     * Black Square Art Border.
     */
    BasicBlackSquares = 34,
    /**
     * Thin Line Art Border.
     */
    BasicThinLines = 35,
    /**
     * White Dash Art Border.
     */
    BasicWhiteDashes = 36,
    /**
     * White Dot Art Border.
     */
    BasicWhiteDots = 37,
    /**
     * White Square Art Border.
     */
    BasicWhiteSquares = 38,
    /**
     * Wide Inline Art Border.
     */
    BasicWideInline = 39,
    /**
     * Wide Midline Art Border.
     */
    BasicWideMidline = 40,
    /**
     * Wide Outline Art Border.
     */
    BasicWideOutline = 41,
    /**
     * Bats Art Border.
     */
    Bats = 42,
    /**
     * Birds Art Border.
     */
    Birds = 43,
    /**
     * Birds Flying Art Border.
     */
    BirdsFlight = 44,
    /**
     * Cabin Art Border.
     */
    Cabins = 45,
    /**
     * Cake Art Border.
     */
    CakeSlice = 46,
    /**
     * Candy Corn Art Border.
     */
    CandyCorn = 47,
    /**
     * Knot Work Art Border.
     */
    CelticKnotwork = 48,
    /**
     * Certificate Banner Art Border.
     */
    CertificateBanner = 49,
    /**
     * Chain Link Art Border.
     */
    ChainLink = 50,
    /**
     * Champagne Bottle Art Border.
     */
    ChampagneBottle = 51,
    /**
     * Black and White Bar Art Border.
     */
    CheckedBarBlack = 52,
    /**
     * Color Checked Bar Art Border.
     */
    CheckedBarColor = 53,
    /**
     * Checkerboard Art Border.
     */
    Checkered = 54,
    /**
     * Christmas Tree Art Border.
     */
    ChristmasTree = 55,
    /**
     * Circles And Lines Art Border.
     */
    CirclesLines = 56,
    /**
     * Circles and Rectangles Art Border.
     */
    CirclesRectangles = 57,
    /**
     * Wave Art Border.
     */
    ClassicalWave = 58,
    /**
     * Clocks Art Border.
     */
    Clocks = 59,
    /**
     * Compass Art Border.
     */
    Compass = 60,
    /**
     * Confetti Art Border.
     */
    Confetti = 61,
    /**
     * Confetti Art Border.
     */
    ConfettiGrays = 62,
    /**
     * Confetti Art Border.
     */
    ConfettiOutline = 63,
    /**
     * Confetti Streamers Art Border.
     */
    ConfettiStreamers = 64,
    /**
     * Confetti Art Border.
     */
    ConfettiWhite = 65,
    /**
     * Corner Triangle Art Border.
     */
    CornerTriangles = 66,
    /**
     * Dashed Line Art Border.
     */
    CouponCutoutDashes = 67,
    /**
     * Dotted Line Art Border.
     */
    CouponCutoutDots = 68,
    /**
     * Maze Art Border.
     */
    CrazyMaze = 69,
    /**
     * Butterfly Art Border.
     */
    CreaturesButterfly = 70,
    /**
     * Fish Art Border.
     */
    CreaturesFish = 71,
    /**
     * Insects Art Border.
     */
    CreaturesInsects = 72,
    /**
     * Ladybug Art Border.
     */
    CreaturesLadyBug = 73,
    /**
     * Cross-stitch Art Border.
     */
    CrossStitch = 74,
    /**
     * Cupid Art Border.
     */
    Cup = 75,
    /**
     * Archway Art Border.
     */
    DecoArch = 76,
    /**
     * Color Archway Art Border.
     */
    DecoArchColor = 77,
    /**
     * Blocks Art Border.
     */
    DecoBlocks = 78,
    /**
     * Gray Diamond Art Border.
     */
    DiamondsGray = 79,
    /**
     * Double D Art Border.
     */
    DoubleD = 80,
    /**
     * Diamond Art Border.
     */
    DoubleDiamonds = 81,
    /**
     * Earth Art Border.
     */
    Earth1 = 82,
    /**
     * Earth Art Border.
     */
    Earth2 = 83,
    /**
     * Shadowed Square Art Border.
     */
    EclipsingSquares1 = 84,
    /**
     * Shadowed Square Art Border.
     */
    EclipsingSquares2 = 85,
    /**
     * Painted Egg Art Border.
     */
    EggsBlack = 86,
    /**
     * Fans Art Border.
     */
    Fans = 87,
    /**
     * Film Reel Art Border.
     */
    Film = 88,
    /**
     * Firecracker Art Border.
     */
    Firecrackers = 89,
    /**
     * Flowers Art Border.
     */
    FlowersBlockPrint = 90,
    /**
     * Daisy Art Border.
     */
    FlowersDaisies = 91,
    /**
     * Flowers Art Border.
     */
    FlowersModern1 = 92,
    /**
     * Flowers Art Border.
     */
    FlowersModern2 = 93,
    /**
     * Pansy Art Border.
     */
    FlowersPansy = 94,
    /**
     * Red Rose Art Border.
     */
    FlowersRedRose = 95,
    /**
     * Roses Art Border.
     */
    FlowersRoses = 96,
    /**
     * Flowers in a Teacup Art Border.
     */
    FlowersTeacup = 97,
    /**
     * Small Flower Art Border.
     */
    FlowersTiny = 98,
    /**
     * Gems Art Border.
     */
    Gems = 99,
    /**
     * Gingerbread Man Art Border.
     */
    GingerbreadMan = 100,
    /**
     * Triangle Gradient Art Border.
     */
    Gradient = 101,
    /**
     * Handmade Art Border.
     */
    Handmade1 = 102,
    /**
     * Handmade Art Border.
     */
    Handmade2 = 103,
    /**
     * Heart-Shaped Balloon Art Border.
     */
    HeartBalloon = 104,
    /**
     * Gray Heart Art Border.
     */
    HeartGray = 105,
    /**
     * Hearts Art Border.
     */
    Hearts = 106,
    /**
     * Pattern Art Border.
     */
    HeebieJeebies = 107,
    /**
     * Holly Art Border.
     */
    Holly = 108,
    /**
     * House Art Border.
     */
    HouseFunky = 109,
    /**
     * Circular Art Border.
     */
    Hypnotic = 110,
    /**
     * Ice Cream Cone Art Border.
     */
    IceCreamCones = 111,
    /**
     * Light Bulb Art Border.
     */
    LightBulb = 112,
    /**
     * Lightning Art Border.
     */
    Lightning1 = 113,
    /**
     * Lightning Art Border.
     */
    Lightning2 = 114,
    /**
     * Maple Leaf Art Border.
     */
    MapleLeaf = 115,
    /**
     * Muffin Art Border.
     */
    MapleMuffins = 116,
    /**
     * Map Pins Art Border.
     */
    MapPins = 117,
    /**
     * Marquee Art Border.
     */
    Marquee = 118,
    /**
     * Marquee Art Border.
     */
    MarqueeToothed = 119,
    /**
     * Moon Art Border.
     */
    Moons = 120,
    /**
     * Mosaic Art Border.
     */
    Mosaic = 121,
    /**
     * Musical Note Art Border.
     */
    MusicNotes = 122,
    /**
     * Patterned Art Border.
     */
    Northwest = 123,
    /**
     * Oval Art Border.
     */
    Ovals = 124,
    /**
     * Package Art Border.
     */
    Packages = 125,
    /**
     * Black Palm Tree Art Border.
     */
    PalmsBlack = 126,
    /**
     * Color Palm Tree Art Border.
     */
    PalmsColor = 127,
    /**
     * Paper Clip Art Border.
     */
    PaperClips = 128,
    /**
     * Papyrus Art Border.
     */
    Papyrus = 129,
    /**
     * Party Favor Art Border.
     */
    PartyFavor = 130,
    /**
     * Party Glass Art Border.
     */
    PartyGlass = 131,
    /**
     * Pencils Art Border.
     */
    Pencils = 132,
    /**
     * Character Art Border.
     */
    People = 133,
    /**
     * Character With Hat Art Border.
     */
    PeopleHats = 134,
    /**
     * Waving Character Border.
     */
    PeopleWaving = 135,
    /**
     * Poinsettia Art Border.
     */
    Poinsettias = 136,
    /**
     * Postage Stamp Art Border.
     */
    PostageStamp = 137,
    /**
     * Pumpkin Art Border.
     */
    Pumpkin1 = 138,
    /**
     * Push Pin Art Border.
     */
    PushPinNote1 = 139,
    /**
     * Push Pin Art Border.
     */
    PushPinNote2 = 140,
    /**
     * Pyramid Art Border.
     */
    Pyramids = 141,
    /**
     * Pyramid Art Border.
     */
    PyramidsAbove = 142,
    /**
     * Quadrants Art Border.
     */
    Quadrants = 143,
    /**
     * Rings Art Border.
     */
    Rings = 144,
    /**
     * Safari Art Border.
     */
    Safari = 145,
    /**
     * Saw tooth Art Border.
     */
    Sawtooth = 146,
    /**
     * Gray Saw tooth Art Border.
     */
    SawtoothGray = 147,
    /**
     * Scared Cat Art Border.
     */
    ScaredCat = 148,
    /**
     * Umbrella Art Border.
     */
    Seattle = 149,
    /**
     * Shadowed Squares Art Border.
     */
    ShadowedSquares = 150,
    /**
     * Shark Tooth Art Border.
     */
    SharksTeeth = 151,
    /**
     * Bird Tracks Art Border.
     */
    ShorebirdTracks = 152,
    /**
     * Rocket Art Border.
     */
    Skyrocket = 153,
    /**
     * Snowflake Art Border.
     */
    SnowflakeFancy = 154,
    /**
     * Snowflake Art Border.
     */
    Snowflakes = 155,
    /**
     * Sombrero Art Border.
     */
    Sombrero = 156,
    /**
     * Southwest-themed Art Border.
     */
    Southwest = 157,
    /**
     * Stars Art Border.
     */
    Stars = 158,
    /**
     * 3-D Stars Art Border.
     */
    Stars3d = 159,
    /**
     * Stars Art Border.
     */
    StarsBlack = 160,
    /**
     * Stars With Shadows Art Border.
     */
    StarsShadowed = 161,
    /**
     * Stars On Top Art Border.
     */
    StarsTop = 162,
    /**
     * Sun Art Border.
     */
    Sun = 163,
    /**
     * Whirligig Art Border.
     */
    Swirligig = 164,
    /**
     * Torn Paper Art Border.
     */
    TornPaper = 165,
    /**
     * Black Torn Paper Art Border.
     */
    TornPaperBlack = 166,
    /**
     * Tree Art Border.
     */
    Trees = 167,
    /**
     * Triangle Art Border.
     */
    TriangleParty = 168,
    /**
     * Triangles Art Border.
     */
    Triangles = 169,
    /**
     * Tribal Art Border One.
     */
    Tribal1 = 170,
    /**
     * Tribal Art Border Two.
     */
    Tribal2 = 171,
    /**
     * Tribal Art Border Three.
     */
    Tribal3 = 172,
    /**
     * Tribal Art Border Four.
     */
    Tribal4 = 173,
    /**
     * Tribal Art Border Five.
     */
    Tribal5 = 174,
    /**
     * Tribal Art Border Six.
     */
    Tribal6 = 175,
    /**
     * Twisted Lines Art Border.
     */
    TwistedLines1 = 176,
    /**
     * Twisted Lines Art Border.
     */
    TwistedLines2 = 177,
    /**
     * Vine Art Border.
     */
    Vine = 178,
    /**
     * Wavy Line Art Border.
     */
    Waveline = 179,
    /**
     * Weaving Angles Art Border.
     */
    WeavingAngles = 180,
    /**
     * Weaving Braid Art Border.
     */
    WeavingBraid = 181,
    /**
     * Weaving Ribbon Art Border.
     */
    WeavingRibbon = 182,
    /**
     * Weaving Strips Art Border.
     */
    WeavingStrips = 183,
    /**
     * White Flowers Art Border.
     */
    WhiteFlowers = 184,
    /**
     * Woodwork Art Border.
     */
    Woodwork = 185,
    /**
     * Crisscross Art Border.
     */
    XIllusions = 186,
    /**
     * Triangle Art Border.
     */
    ZanyTriangles = 187,
    /**
     * Zigzag Art Border.
     */
    ZigZag = 188,
    /**
     * Zigzag stitch.
     */
    ZigZagStitch = 189
}
/**
 * Contains the settings to define the table cell formatting.
 */
declare class TableCellFormattingSettings {
    /**
     * Gets or sets a table cell's preferred width.
     */
    preferredWidth: TableWidthUnit;
    /**
     * Gets or sets the vertical alignment of a table cell's content.
     */
    verticalAlignment: TableCellVerticalAlignment;
    /**
     * Sspecifies whether text is wrapped in a table cell.
     */
    noWrap: boolean;
    /**
     * Gets or sets a table cell's left margin in twips.
     */
    marginLeft: number;
    /**
     * Gets or sets a table cell's right margin in twips.
     */
    marginRight: number;
    /**
     * Gets or sets a table cell's top margin in twips.
     */
    marginTop: number;
    /**
     * Gets or sets a table cell's bottom margin in twips.
     */
    marginBottom: number;
    /**
     * Specifies whether a table cell's margins are inherited from the table level settings.
     */
    marginsSameAsTable: boolean;
}
/**
 * Lists possible vertical alignments for cell content.
 */
declare enum TableCellVerticalAlignment {
    /**
     * The cell content is vertically aligned at the top.
     */
    Top = 0,
    /**
     * The cell content is vertically justified.
     */
    Both = 1,
    /**
     * The cell content is centered vertically.
     */
    Center = 2,
    /**
     * The cell content is vertically aligned at the bottom.
     */
    Bottom = 3
}
/**
 * Contains the settings to format a table.
 */
declare class TableFormattingSettings {
    /**
     * Gets or sets the preferred width of cells in the table.
     */
    preferredWidth: TableWidthUnit;
    /**
     * Gets or sets the alignment of table rows.
     */
    alignment: TableRowAlignment;
    /**
     * Gets or sets the table's left indent in twips.
     */
    indent: number;
    /**
     * Gets or sets the spacing between table cells in twips.
     */
    spacingBetweenCells: number;
    /**
     * Gets or sets a value specifying whether spacing is allowed between table cells.
     */
    allowSpacingBetweenCells: boolean;
    /**
     * Gets or sets a value that specifying whether to allow automatic resizing of table cells to fit their contents.
     */
    resizeToFitContent: boolean;
    /**
     * Gets or sets the default left margin for cells in the table in twips.
     */
    defaultCellMarginLeft: number;
    /**
     * Gets or sets the default right margin for cells in the table in twips.
     */
    defaultCellMarginRight: number;
    /**
     * Gets or sets the default top margin for cells in the table in twips.
     */
    defaultCellMarginTop: number;
    /**
     * Gets or sets the default bottom margin for cells in the table in twips.
     */
    defaultCellMarginBottom: number;
}
/**
 * Contains settings defining the table width's measurement units and value.
 */
declare class TableWidthUnit {
    /**
     * Gets or sets the table width value in twips.
     */
    value: number;
    /**
     * Gets or sets the unit type for the table width.
     */
    type: TableWidthUnitType;
}
/**
 * Contains settings defining the table height's measurement units and value.
 */
declare class TableHeightUnit {
    /**
     * Gets or sets the table height value in twips.
     */
    value: number;
    /**
     * Gets or sets the unit type for the table height.
     */
    type: TableHeightUnitType;
}
/**
 * Lists values that specify unit types for the table height.
 */
declare enum TableHeightUnitType {
    /**
     * The minimum height will be the specified height. The height can be increased, if needed, to accommodate the content.
     */
    Minimum = 0,
    /**
     * The height increases automatically to accommodate the content.
     */
    Auto = 1,
    /**
     * The exact height as specified. If the text cannot fit the height, it will appear truncated.
     */
    Exact = 2
}
/**
 * Lists alignments allowed for the table row.
 */
declare enum TableRowAlignment {
    /**
     * Justified.
     */
    Both = 0,
    /**
     * Align center.
     */
    Center = 1,
    /**
     * Distribute all characters equally.
     */
    Distribute = 2,
    /**
     * Align left.
     */
    Left = 3,
    /**
     * Align to the list tab.
     */
    NumTab = 4,
    /**
     * Align right.
     */
    Right = 5
}
/**
 * Lists values that specify unit types for the table width.
 */
declare enum TableWidthUnitType {
    /**
     * Not set.
     */
    Nil = 0,
    /**
     * Automatically determined width.
     */
    Auto = 1,
    /**
     * Width in fiftieths of a percent.
     */
    FiftiethsOfPercent = 2,
    /**
     * Width in units of measurements that are currently in effect for the document.
     */
    ModelUnits = 3
}
/**
 * A command to change the font name of characters in a selected range.
 */
declare class ChangeFontNameCommand extends CommandBase {
    /**
     * Executes the ChangeFontNameCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param fontName A string specifying the font name.
     */
    execute(fontName: string): boolean;
    /**
     * Lists names of fonts available in the control.
     */
    readonly fontNames: string[];
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<string>;
}
/**
 * A command to change the font size of characters in a selected range.
 */
declare class ChangeFontSizeCommand extends CommandBase {
    /**
     * Executes the ChangeFontSizeCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param fontSize An integer number specifying the font size in points.
     */
    execute(fontSize: number): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<number>;
}
/**
 * A command to increase the font size of characters in a selected range to the closest larger predefined value.
 */
declare class IncreaseFontSizeCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the IncreaseFontSizeCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to decrease the font size of characters in a selected range to the closest smaller predefined value.
 */
declare class DecreaseFontSizeCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the DecreaseFontSizeCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to convert the selected text to upper case.
 */
declare class MakeTextUpperCaseCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the MakeTextUpperCaseCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to convert the selected text to lower case.
 */
declare class MakeTextLowerCaseCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the MakeTextLowerCaseCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to capitalize each word in the selected sentence.
 */
declare class CapitalizeEachWordTextCaseCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the CapitalizeEachWordTextCaseCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to toggle the case for each character - upper case becomes lower, lower case becomes upper.
 */
declare class ToggleTextCaseCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the ToggleTextCaseCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to change the bold formatting of characters in a selected range.
 */
declare class ChangeFontBoldCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ChangeFontBoldCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param fontBold true to apply bold formatting to the text, false to remove bold formatting.
     */
    execute(fontBold?: boolean): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to change the italic formatting of characters in a selected range.
 */
declare class ChangeFontItalicCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ChangeFontItalicCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param fontItalic true to apply italic formatting to the text, false to remove italic formatting.
     */
    execute(fontItalic?: boolean): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to change the underline formatting of characters in a selected range.
 */
declare class ChangeFontUnderlineCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ChangeFontUnderlineCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param fontUnderline true to apply underline formatting to the text, false to remove underline formatting.
     */
    execute(fontUnderline?: boolean): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to change the strikeout formatting of characters in a selected range.
 */
declare class ChangeFontStrikeoutCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ChangeFontStrikeoutCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param fontStrikeout true to apply strikeout formatting to the text, false to remove strikeout formatting.
     */
    execute(fontStrikeout?: boolean): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to change the superscript formatting of characters in a selected range.
 */
declare class ChangeFontSuperscriptCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ChangeFontSuperscriptCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param fontSuperscript true to apply superscript formatting to the text, false to remove superscript formatting.
     */
    execute(fontSuperscript?: boolean): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to change the subscript formatting of characters in the selected range.
 */
declare class ChangeFontSubscriptCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ChangeFontSubscriptCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param fontSubscript true to apply subscript formatting to the text, false to remove subscript formatting.
     */
    execute(fontSubscript?: boolean): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to change the font color of characters in a selected range.
 */
declare class ChangeFontForeColorCommand extends CommandBase {
    /**
     * Executes the ChangeFontForeColorCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param color A string specifying the font color. May be specified as a color name or a hex color value.
     */
    execute(color: string): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<string>;
}
/**
 * A command to change the background color of characters in a selected range.
 */
declare class ChangeFontBackColorCommand extends CommandBase {
    /**
     * Executes the ChangeFontBackColorCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param color A string specifying the background font color. May be specified as a color name or a hex color value.
     */
    execute(color: string): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<string>;
}
/**
 * A command to reset the selected text's formatting to default.
 */
declare class ClearFormattingCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the ClearFormattingCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to change the selected range's style.
 */
declare class ChangeStyleCommand extends CommandBase {
    /**
     * Executes the ChangeStyleCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param style An object that contains the style settings object, or the style name.
     * @param isParagraphStyle true to apply style settings to a paragraph; otherwise, false.
     */
    execute(style: string | StyleBase, isParagraphStyle?: boolean): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<StyleBase>;
}
/**
 * A command to invoke the Font dialog allowing end-users to change the font, size and style of the selected text.
 */
declare class OpenFontFormattingDialogCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the OpenFontFormattingDialogCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to convert the text of all selected sentences to sentence case.
 */
declare class MakeTextSentenceCaseCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the MakeTextSentenceCaseCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to switch the text case at the current position in the document.
 */
declare class SwitchTextCaseCommand extends CommandWithSimpleStateBase {
    /**
     * Executes the SwitchTextCaseCommand command.
     */
    execute(): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * A command to change the font formatting of characters in a selected range.
 */
declare class ChangeFontFormattingCommand extends CommandBase {
    /**
     * Executes the ChangeFontFormattingCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param settings A  FontFormattingSettings object specifying font formatting settings.
     */
    execute(settings: FontFormattingSettings): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<FontFormattingSettings>;
}
/**
 * Contains settings to define the font formatting.
 */
declare class FontFormattingSettings {
    /**
     * Gets or sets the character(s) font name.
     */
    fontName: string;
    /**
     * Gets or sets the character(s) font size (in points).
     */
    size: number;
    /**
     * Gets or sets the foreground color of characters.
     */
    foreColor: string;
    /**
     * Gets or sets the character background color.
     */
    backColor: string;
    /**
     * Gets or sets the type of underline applied to the character(s).
     */
    underline: boolean;
    /**
     * Gets or sets the color of the underline for the specified characters.
     */
    underlineColor: string;
    /**
     * Gets or sets whether the character formatting is bold.
     */
    bold: boolean;
    /**
     * Gets or sets a value indicating whether a character(s) is italicized.
     */
    italic: boolean;
    /**
     * Gets or sets a value specifying whether the strikeout formatting is applied to a character(s).
     */
    strikeout: boolean;
    /**
     * Gets or sets whether only word characters are underlined.
     */
    underlineWordsOnly: boolean;
    /**
     * Gets or sets a value specifying character script formatting.
     */
    script: CharacterFormattingScript;
    /**
     * Gets or sets a value indicating whether all characters are capital letters.
     */
    allCaps: boolean;
    /**
     * Gets or sets a value indicating whether a character(s) is hidden.
     */
    hidden: boolean;
}
/**
 * Lists values specifying character script formatting.
 */
declare enum CharacterFormattingScript {
    /**
     * Specifies that the text is not formatted as subscript or as superscript.
     */
    Normal = 0,
    /**
     * Formats text as subscript.
     */
    Subscript = 1,
    /**
     * Formats text as superscript.
     */
    Superscript = 2
}
/**
 * A command to toggle the horizontal ruler's visibility.
 */
declare class ShowHorizontalRulerCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ShowHorizontalRulerCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param show true, to show the horizontal ruler; otherwise, false.
     */
    execute(show?: boolean): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to toggle the fullscreen mode.
 */
declare class SetFullscreenCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ChangePageMarginsCommand command. true if the command has been successfully executed; false if the command execution has failed.
     * @param show true, to enable fullscreen mode; otherwise, false.
     */
    execute(show?: boolean): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to change the Rich Edit's document view type.
 */
declare class ChangeViewTypeCommand extends CommandWithBooleanStateBase {
    /**
     * Executes the ChangeViewTypeCommand command with the specified parameter. A Boolean value identifying whether method execution was successful or failed.
     * @param viewType A string value specifying the Rich Edit's document view type.
     */
    execute(viewType: ViewType): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): CommandState<boolean>;
}
/**
 * A command to force synchronizing the server document model with the client model and execute a callback function if it is necessary.
 */
declare class ForceSyncWithServerCommand extends CommandBase {
    /**
     * Executes the ForceSyncWithServerCommand command with the specified parameter. true if the command has been successfully executed; false if the command execution has failed.
     * @param callback A callback function that is performed when the server model is updated.
     */
    execute(callback: () => void): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * Lists values specifying the Rich Edit's document view type.
 */
declare enum ViewType {
    /**
     * The simple view is enabled.
     */
    Simple = 0,
    /**
     * The print layout is enabled.
     */
    PrintLayout = 1
}
/**
 * A command to insert content created on the server to the client model.
 */
declare class InsertContentFromServerCommand extends CommandBase {
    /**
     * Executes the InsertContentFromServerCommand command with the specified parameters. true if the command has been successfully executed; false if the command execution has failed.
     * @param requestId An integer value identifying the request to the server.
     * @param position An integer value specifying position where to insert content to the active sub-document.
     * @param subDocumentId An integer value identifying the target sub-document.
     */
    execute(requestId: string, position?: number, subDocumentId?: number): boolean;
    /**
     * Gets information about the command's state.
     */
    getState(): SimpleCommandState;
}
/**
 * Contains a set of the available client commands.
 */
declare class RichEditCommands {
    /**
     * Gets a command to prevent the control UI from being updated until the RichEditCommands.endUpdate method is called.
     */
    beginUpdate(): void;
    /**
     * Re-enables render operations after a call to the RichEditCommands.beginUpdate method and forces immediate re-rendering.
     */
    endUpdate(): void;
    /**
     * Gets a command to create a new empty document.
     */
    readonly fileNew: FileNewCommand;
    /**
     * Gets a command to open a document stored in the specified file.
     */
    readonly fileOpen: FileOpenCommand;
    /**
     * Gets a command to invoke the File Open dialog allowing one to select and load a document file into RichEdit.
     */
    readonly fileOpenDialog: FileOpenDialogCommand;
    /**
     * Gets a command to save the document at its original location on the server.
     */
    readonly fileSave: FileSaveCommand;
    /**
     * Gets a command to download the document specifying the file's extension.
     */
    readonly fileDownload: FileDownloadCommand;
    /**
     * Gets a command to save a document in a file with the specified path.
     */
    readonly fileSaveAs: FileSaveAsCommand;
    /**
     * Gets a command to invoke the Save As dialog that prompts for a file name and saves the current document in a file with the specified path.
     */
    readonly fileSaveAsDialog: FileSaveAsDialogCommand;
    /**
     * Gets a command to invoke a browser-specific Print dialog allowing one to print the current document.
     */
    readonly filePrint: FilePrintCommand;
    /**
     * Gets a command to cancel changes caused by the previous command.
     */
    readonly undo: UndoCommand;
    /**
     * Gets a command to reverse actions of the previous RichEditCommands.undo command.
     */
    readonly redo: RedoCommand;
    /**
     * Gets a command to copy the selected text and place it to the clipboard.
     */
    readonly copy: CopyCommand;
    /**
     * Gets a command to paste the text from the clipboard over the selection.
     */
    readonly paste: PasteCommand;
    /**
     * Gets a command to cut the selected text and place it to the clipboard.
     */
    readonly cut: CutCommand;
    /**
     * Gets a command to change the font name of characters in a selected range.
     */
    readonly changeFontName: ChangeFontNameCommand;
    /**
     * Gets a command to change the font size (in points) of characters in a selected range.
     */
    readonly changeFontSize: ChangeFontSizeCommand;
    /**
     * Gets a command to increase the font size of characters in a selected range to the closest larger predefined value (in points).
     */
    readonly increaseFontSize: IncreaseFontSizeCommand;
    /**
     * Gets a command to decrease the selected range's font size to the closest smaller predefined value (in points).
     */
    readonly decreaseFontSize: DecreaseFontSizeCommand;
    /**
     * Gets a command to convert selected text to upper case.
     */
    readonly makeTextUpperCase: MakeTextUpperCaseCommand;
    /**
     * Gets a command to convert selected text to lower case.
     */
    readonly makeTextLowerCase: MakeTextLowerCaseCommand;
    /**
     * Gets a command to capitalize each word in the selected sentence.
     */
    readonly capitalizeEachWordTextCase: CapitalizeEachWordTextCaseCommand;
    /**
     * Gets a command to toggle case for each character - upper case becomes lower, lower case becomes upper.
     */
    readonly toggleTextCase: ToggleTextCaseCommand;
    /**
     * Gets a command to change the bold formatting of characters in a selected range.
     */
    readonly changeFontBold: ChangeFontBoldCommand;
    /**
     * Gets a command to change the italic formatting of characters in a selected range.
     */
    readonly changeFontItalic: ChangeFontItalicCommand;
    /**
     * Gets a command to change the underline formatting of characters in a selected range.
     */
    readonly changeFontUnderline: ChangeFontUnderlineCommand;
    /**
     * Gets a command to change the strikeout formatting of characters in a selected range.
     */
    readonly changeFontStrikeout: ChangeFontStrikeoutCommand;
    /**
     * Gets a command to change the superscript formatting of characters in a selected range.
     */
    readonly changeFontSuperscript: ChangeFontSuperscriptCommand;
    /**
     * Gets a command to change the subscript formatting of characters in a selected range.
     */
    readonly changeFontSubscript: ChangeFontSubscriptCommand;
    /**
     * Gets a command to change the font color of characters in a selected range.
     */
    readonly changeFontForeColor: ChangeFontForeColorCommand;
    /**
     * Gets a command to change the background color of characters in a selected range.
     */
    readonly changeFontBackColor: ChangeFontBackColorCommand;
    /**
     * Gets a command to reset textual and paragraph formatting in the selected range to default values.
     */
    readonly clearFormatting: ClearFormattingCommand;
    /**
     * Gets a command to apply a character or paragraph style settings to text in a selected range.
     */
    readonly changeStyle: ChangeStyleCommand;
    /**
     * Gets a command to toggle between the bulleted paragraph and normal text.
     */
    readonly toggleBulletedList: ToggleBulletedListCommand;
    /**
     * Gets a command to toggle between the numbered paragraph and normal text.
     */
    readonly toggleNumberingList: ToggleNumberingListCommand;
    /**
     * Gets a command to toggle between the multilevel list style and normal text.
     */
    readonly toggleMultilevelList: ToggleMultilevelListCommand;
    /**
     * Gets a command to increment the indent level of paragraphs in a selected range.
     */
    readonly increaseIndent: IncreaseIndentCommand;
    /**
     * Gets a command to decrease the indent level of paragraphs in a selected range.
     */
    readonly decreaseIndent: DecreaseIndentCommand;
    /**
     * Gets a command to toggle hidden symbol visibility.
     */
    readonly showHiddenSymbols: ShowHiddenSymbolsCommand;
    /**
     * Gets a command to toggle left paragraph alignment on and off.
     */
    readonly toggleParagraphAlignmentLeft: ToggleParagraphAlignmentLeftCommand;
    /**
     * Gets a command to toggle centered paragraph alignment on and off.
     */
    readonly toggleParagraphAlignmentCenter: ToggleParagraphAlignmentCenterCommand;
    /**
     * Gets a command to toggle right paragraph alignment on and off.
     */
    readonly toggleParagraphAlignmentRight: ToggleParagraphAlignmentRightCommand;
    /**
     * Gets a command to toggle justified paragraph alignment on and off.
     */
    readonly toggleParagraphAlignmentJustify: ToggleParagraphAlignmentJustifyCommand;
    /**
     * Gets a command to format a current paragraph with single line spacing.
     */
    readonly setSingleParagraphSpacing: SetSingleParagraphSpacingCommand;
    /**
     * Gets a command to format a current paragraph with one and a half line spacing.
     */
    readonly setSesquialteralParagraphSpacing: SetSesquialteralParagraphSpacingCommand;
    /**
     * Gets a command to format a selected paragraph with double line spacing.
     */
    readonly setDoubleParagraphSpacing: SetDoubleParagraphSpacingCommand;
    /**
     * Gets a command to add spacing before a paragraph.
     */
    readonly addSpacingBeforeParagraph: AddSpacingBeforeParagraphCommand;
    /**
     * Gets a command to add spacing after a paragraph.
     */
    readonly addSpacingAfterParagraph: AddSpacingAfterParagraphCommand;
    /**
     * Gets a command to remove spacing before the selected paragraph.
     */
    readonly removeSpacingBeforeParagraph: RemoveSpacingBeforeParagraphCommand;
    /**
     * Gets a command to remove spacing after the selected paragraph.
     */
    readonly removeSpacingAfterParagraph: RemoveSpacingAfterParagraphCommand;
    /**
     * Gets a command to change the background color of paragraphs in a selected range.
     */
    readonly changeParagraphBackColor: ChangeParagraphBackColorCommand;
    /**
     * Gets a command to invoke the Font dialog window.
     */
    readonly openFontFormattingDialog: OpenFontFormattingDialogCommand;
    /**
     * Gets a command to change the font formatting of characters in a selected range.
     */
    readonly changeFontFormatting: ChangeFontFormattingCommand;
    /**
     * Gets a command to invoke the Indents And Spacing tab of the Paragraph dialog window.
     */
    readonly openParagraphFormattingDialog: OpenParagraphFormattingDialogCommand;
    /**
     * Gets a command to apply formatting settings to paragraphs within a selected range.
     */
    readonly changeParagraphFormatting: ChangeParagraphFormattingCommand;
    /**
     * Gets a command to insert a page break at the current position in the document.
     */
    readonly insertPageBreak: InsertPageBreakCommand;
    /**
     * Gets a command to invoke the Insert Table dialog window.
     */
    readonly openInsertTableDialog: OpenInsertTableDialogCommand;
    /**
     * Gets a command to insert a rectangular table of the specified size.
     */
    readonly insertTable: InsertTableCommand;
    /**
     * Gets a command to invoke the Insert Image dialog window.
     */
    readonly openInsertPictureDialog: OpenInsertPictureDialogCommand;
    /**
     * Gets a command to insert an inline picture stored by the specified web address.
     */
    readonly insertPicture: InsertPictureCommand;
    /**
     * Gets a command to invoke the Bookmark dialog window.
     */
    readonly openInsertBookmarkDialog: OpenInsertBookmarkDialogCommand;
    /**
     * Gets a command to insert a new bookmark that references the current selection.
     */
    readonly insertBookmark: InsertBookmarkCommand;
    /**
     * Gets a command to delete a specific bookmark.
     */
    readonly deleteBookmark: DeleteBookmarkCommand;
    /**
     * Gets a command to navigate to the specified bookmark.
     */
    readonly goToBookmark: GoToBookmarkCommand;
    /**
     * Gets a command to invoke the Hyperlink dialog window.
     */
    readonly openInsertHyperlinkDialog: OpenInsertHyperlinkDialogCommand;
    /**
     * Gets a command to insert and update a hyperlink field in place of a selected range.
     */
    readonly insertHyperlink: InsertHyperlinkCommand;
    /**
     * Gets a command to delete the selected hyperlink.
     */
    readonly deleteHyperlink: DeleteHyperlinkCommand;
    /**
     * Gets a command to delete all hyperlinks in the selected range.
     */
    readonly deleteHyperlinks: DeleteHyperlinksCommand;
    /**
     * Gets a command to go to a bookmark or URI contained within the selected hyperlink.
     */
    readonly openHyperlink: OpenHyperlinkCommand;
    /**
     * Gets a command to invoke the Symbols dialog window.
     */
    readonly openInsertSymbolDialog: OpenInsertSymbolDialogCommand;
    /**
     * Gets a command to insert characters into a document instead of a selected range.
     */
    readonly insertSymbol: InsertSymbolCommand;
    /**
     * Gets a command to apply page margins settings to sections located within a selected range.
     */
    readonly changePageMargins: ChangePageMarginsCommand;
    /**
     * Gets a command to invoke the Margins tab of the Page Setup dialog window.
     */
    readonly openPageMarginsDialog: OpenPageMarginsDialogCommand;
    /**
     * Gets a command to apply page orientation settings to sections located within a selected range.
     */
    readonly changePageOrientation: ChangePageOrientationCommand;
    /**
     * Gets a command to invoke the Page Setup dialog.
     */
    readonly setPageSizeDialog: SetPageSizeDialogCommand;
    /**
     * Gets a command to invoke the Paper tab of the Page Setup dialog window.
     */
    readonly openPagePaperSizeDialog: OpenPagePaperSizeDialogCommand;
    /**
     * Gets a command to apply page size settings to sections located within a selected range.
     */
    readonly changePageSize: ChangePageSizeCommand;
    /**
     * Gets a command to change the number of columns having the same width in a section.
     */
    readonly changeSectionEqualColumnCount: ChangeSectionEqualColumnCountCommand;
    /**
     * Gets a command to invoke the Columns dialog window.
     */
    readonly openSectionColumnsDialog: OpenSectionColumnsDialogCommand;
    /**
     * Gets a command to apply column layout settings to a section.
     */
    readonly changeSectionColumns: ChangeSectionColumnsCommand;
    /**
     * Gets a command to insert a column break at the current position in the document.
     */
    readonly insertColumnBreak: InsertColumnBreakCommand;
    /**
     * Gets a command to insert a section break and starts a new section on the next page.
     */
    readonly insertSectionBreakNextPage: InsertSectionBreakNextPageCommand;
    /**
     * Gets a command to insert a section break and starts a new section on the next even-numbered page.
     */
    readonly insertSectionBreakEvenPage: InsertSectionBreakEvenPageCommand;
    /**
     * Gets a command to insert a section break and starts a new section on the next odd-numbered page.
     */
    readonly insertSectionBreakOddPage: InsertSectionBreakOddPageCommand;
    /**
     * Gets a command to set the background color of all pages contained in the document.
     */
    readonly changePageColor: ChangePageColorCommand;
    /**
     * Gets a command to toggle the horizontal ruler's visibility.
     */
    readonly showHorizontalRuler: ShowHorizontalRulerCommand;
    /**
     * Gets a command to toggle the fullscreen mode.
     */
    readonly setFullscreen: SetFullscreenCommand;
    /**
     * Gets a command to change the Rich Edit's document view type.
     */
    readonly changeViewType: ChangeViewTypeCommand;
    /**
     * Gets a command to force synchronizing the server document model with the client model and execute a callback function if it is necessary.
     */
    readonly forceSyncWithServer: ForceSyncWithServerCommand;
    /**
     * Gets a command to insert content created on the server to the client model.
     */
    readonly insertContentFromServer: InsertContentFromServerCommand;
    /**
     * Gets a command to invoke the Bulleted and Numbering dialog window.
     */
    readonly openNumberingListDialog: OpenNumberingListDialogCommand;
    /**
     * Gets a command to insert a paragraph break at the current position in the document.
     */
    readonly insertParagraph: InsertParagraphCommand;
    /**
     * Gets a command to insert text in place of a selected range.
     */
    readonly insertText: InsertTextCommand;
    /**
     * Gets a command to delete text and in-line objects in a selected range.
     */
    readonly delete: DeleteCommand;
    /**
     * Gets a command to remove the previous word.
     */
    readonly removePrevWord: RemovePrevWordCommand;
    /**
     * Gets a command to remove the next word.
     */
    readonly removeNextWord: RemoveNextWordCommand;
    /**
     * Gets a command to move the cursor backwards and erase characters in a selected range.
     */
    readonly backspace: BackspaceCommand;
    /**
     * Gets a command to insert the line break at the current position in the document.
     */
    readonly insertLineBreak: InsertLineBreakCommand;
    /**
     * Gets a command to scale a selected in-line picture.
     */
    readonly changePictureScale: ChangePictureScaleCommand;
    /**
     * Gets a command to increment the left indent of paragraphs in a selected range.
     */
    readonly incrementParagraphLeftIndent: IncrementParagraphLeftIndentCommand;
    /**
     * Gets a command to decrement the paragraph's left indent position.
     */
    readonly decrementParagraphLeftIndent: DecrementParagraphLeftIndentCommand;
    /**
     * Gets a command to move the selected range.
     */
    readonly moveContent: MoveContentCommand;
    /**
     * Gets a command to copy the selected text and place it to the specified position.
     */
    readonly copyContent: CopyContentCommand;
    /**
     * Gets a command to insert a tab character at the current position in the document.
     */
    readonly insertTab: InsertTabCommand;
    /**
     * Gets a command to add a non-breaking space in place of a selected range
     */
    readonly insertNonBreakingSpace: InsertNonBreakingSpaceCommand;
    /**
     * Gets a command to invoke the Tabs dialog window.
     */
    readonly openTabsDialog: OpenTabsDialogCommand;
    /**
     * Gets a command to change the default tab stop value of a document and apply custom tab settings to the selected paragraphs.
     */
    readonly changeTabs: ChangeTabsCommand;
    /**
     * Gets a command to invoke the Customize Numbered List dialog window.
     */
    readonly openCustomNumberingListDialog: OpenCustomNumberingListDialogCommand;
    /**
     * Gets a command to customize the numbered list parameters.
     */
    readonly changeCustomNumberingList: ChangeCustomNumberingListCommand;
    /**
     * Gets a command to restart the numbering list.
     */
    readonly restartNumberingList: RestartNumberingListCommand;
    /**
     * Gets a command to increment the indent level of paragraphs in a selected numbered list.
     */
    readonly incrementNumberingIndent: IncrementNumberingIndentCommand;
    /**
     * Gets a command to decrement the indent level of paragraphs in a selected numbered list.
     */
    readonly decrementNumberingIndent: DecrementNumberingIndentCommand;
    /**
     * Gets a command to add a field at the current position in a document.
     */
    readonly createField: CreateFieldCommand;
    /**
     * Gets a command to update each field's result in the selection.
     */
    readonly updateField: UpdateFieldCommand;
    /**
     * Gets a command to display the selected field's codes.
     */
    readonly showFieldCodes: ShowFieldCodesCommand;
    /**
     * Gets a command to display all field codes in place of the fields in the document.
     */
    readonly showAllFieldCodes: ShowAllFieldCodesCommand;
    /**
     * Gets a command to continue the list's numbering.
     */
    readonly continueNumberingList: ContinueNumberingListCommand;
    /**
     * Gets a command to insert numeration to a paragraph making it a numbering list item.
     */
    readonly insertNumeration: InsertNumerationCommand;
    /**
     * Gets a command to exclude the selected paragraphs from the numbered list.
     */
    readonly removeNumeration: RemoveNumerationCommand;
    /**
     * Gets a command to update all fields in the document.
     */
    readonly updateAllFields: UpdateAllFieldsCommand;
    /**
     * Gets a command to insert and update a field with a DATE code.
     */
    readonly createDateField: CreateDateFieldCommand;
    /**
     * Gets a command to replace the selection with a TIME field displaying the current time.
     */
    readonly createTimeField: CreateTimeFieldCommand;
    /**
     * Gets a command to replace the selection with a PAGE field displaying the current page number.
     */
    readonly createPageField: CreatePageFieldCommand;
    /**
     * Gets a command to add a caption (numbered label) to a figure.
     */
    readonly insertFiguresCaption: InsertFiguresCaptionCommand;
    /**
     * Gets a command to add a caption (numbered label) to a table.
     */
    readonly insertTablesCaption: InsertTablesCaptionCommand;
    /**
     * Gets a command to add a caption (numbered label) to an equation.
     */
    readonly insertEquationsCaption: InsertEquationsCaptionCommand;
    /**
     * Gets a command to create a table of figures on the base of figures captions.
     */
    readonly insertTableOfFigures: InsertTableOfFiguresCommand;
    /**
     * Gets a command to create a table of tables on the base of tables captions.
     */
    readonly insertTableOfTables: InsertTableOfTablesCommand;
    /**
     * Gets a command to create a table of equations on the base of equation captions.
     */
    readonly insertTableOfEquations: InsertTableOfEquationsCommand;
    /**
     * Gets a command to insert a table of contents.
     */
    readonly insertTableOfContents: InsertTableOfContentsCommand;
    /**
     * Gets a command that changes the specified hyperlink.
     */
    readonly changeHyperlink: ChangeHyperlinkCommand;
    /**
     * Gets a command to update a table of contents.
     */
    readonly updateTableOfContents: UpdateTableOfContentsCommand;
    /**
     * Gets a command to apply a paragraph level to the selected text
     */
    readonly setParagraphLevel: SetParagraphLevelCommand;
    /**
     * Gets a command changing all selected text to the sentence case capitalization.
     */
    readonly makeTextSentenceCase: MakeTextSentenceCaseCommand;
    /**
     * Gets a command to switch the text capitalization in the selection.
     */
    readonly switchTextCase: SwitchTextCaseCommand;
    /**
     * Gets a command to navigate to the first data record.
     */
    readonly goToFirstDataRecord: GoToFirstDataRecordCommand;
    /**
     * Gets a command to navigate to the previous data record of the bound data source.
     */
    readonly goToPreviousDataRecord: GoToPreviousDataRecordCommand;
    /**
     * Gets a command to navigate to the next data record of the bound data source.
     */
    readonly goToNextDataRecord: GoToNextDataRecordCommand;
    /**
     * Gets a command to open the specified data record.
     */
    readonly goToDataRecord: GoToDataRecordCommand;
    /**
     * Gets a command to navigate to the last data record of the bound data source.
     */
    readonly goToLastDataRecord: GoToLastDataRecordCommand;
    /**
     * Gets a command to display or hide actual data in MERGEFIELD fields.
     */
    readonly showMergedData: ShowMergedDataCommand;
    /**
     * Gets a command to invoke the Insert Merge Field dialog window.
     */
    readonly mergeFieldDialog: MergeFieldDialogCommand;
    /**
     * Gets a command to replace the selection with a MERGEFIELD (a data source column name is passed with a parameter).
     */
    readonly createMergeField: CreateMergeFieldCommand;
    /**
     * Gets a command to invoke the Export Range dialog window to start a mail merge.
     */
    readonly mailMergeDialog: MailMergeDialogCommand;
    /**
     * Gets a command to perform a mail merge and download the merged document.
     */
    readonly mailMergeAndDownload: MailMergeAndDownloadCommand;
    /**
     * Gets a command to perform a mail merge and save the merged document to the server.
     */
    readonly mailMergeAndSaveAs: MailMergeAndSaveAsCommand;
    /**
     * Gets a command to create a header sub-document (if it is not yet created) and set it as an active sub-document instead of the main sub-document.
     */
    readonly insertHeader: InsertHeaderCommand;
    /**
     * Gets a command to create a footer sub-document (if it is not yet created) and set it as an active sub-document instead of the main sub-document.
     */
    readonly insertFooter: InsertFooterCommand;
    /**
     * Gets a command to link a header/footer to the previous section, so it has the same content.
     */
    readonly linkHeaderFooterToPrevious: LinkHeaderFooterToPreviousCommand;
    /**
     * Gets a command to substitute a header sub-document with a footer sub-document of the same page as an active sub-document.
     */
    readonly goToFooter: GoToFooterCommand;
    /**
     * Gets a command to substitute a footer sub-document with a header sub-document of the same page as an active sub-document.
     */
    readonly goToHeader: GoToHeaderCommand;
    /**
     * Gets a command to substitute a current header/footer with a header/footer of the next section as an active sub-document.
     */
    readonly goToNextHeaderFooter: GoToNextHeaderFooterCommand;
    /**
     * Gets a command to substitute a current header/footer with a header/footer of the previous section as an active sub-document.
     */
    readonly goToPreviousHeaderFooter: GoToPreviousHeaderFooterCommand;
    /**
     * Gets a command to enable (or disable if it is enabled) a different page header and footer for the first page of the current section.
     */
    readonly setDifferentFirstPageHeaderFooter: SetDifferentFirstPageHeaderFooterCommand;
    /**
     * Gets a command to enable (or disable if it is enabled) a different page header and footer for odd and even pages of the current section.
     */
    readonly setDifferentOddAndEvenPagesHeaderFooter: SetDifferentOddAndEvenPagesHeaderFooterCommand;
    /**
     * Gets a command to substitute a header/footer sub-document with the main sub-document as an active sub-document.
     */
    readonly closeHeaderFooter: CloseHeaderFooterCommand;
    /**
     * Gets a command to replace the selection with a NUMPAGES field displaying the total number of pages.
     */
    readonly createPageCountField: CreatePageCountFieldCommand;
    /**
     * Gets a command to invoke the Table tab of the Table Properties dialog window.
     */
    readonly openTableFormattingDialog: OpenTableFormattingDialogCommand;
    /**
     * Gets a command to change the selected table's formatting.
     */
    readonly changeTableFormatting: ChangeTableFormattingCommand;
    /**
     * Gets a command to change the selected table rows' preferred height.
     */
    readonly changeTableRowPreferredHeight: ChangeTableRowPreferredHeightCommand;
    /**
     * Gets a command to change the preferred cell width of the selected table rows.
     */
    readonly changeTableCellPreferredWidth: ChangeTableCellPreferredWidthCommand;
    /**
     * Gets a command to apply (or cancel) border settings of the inside borders for the selected cells.
     */
    readonly toggleTableCellInsideBorders: ToggleTableCellInsideBordersCommand;
    /**
     * Gets a command to change the selected table columns' preferred width.
     */
    readonly changeTableColumnPreferredWidth: ChangeTableColumnPreferredWidthCommand;
    /**
     * Gets a command to change the cell formatting of the selected table elements.
     */
    readonly changeTableCellFormatting: ChangeTableCellFormattingCommand;
    /**
     * Gets a command to insert a table column to the left of the current position in the table.
     */
    readonly insertTableColumnToTheLeft: InsertTableColumnToTheLeftCommand;
    /**
     * Gets a command to insert a table column to the right of the current position in the table.
     */
    readonly insertTableColumnToTheRight: InsertTableColumnToTheRightCommand;
    /**
     * Gets a command to insert a row in the table below the selected row.
     */
    readonly insertTableRowBelow: InsertTableRowBelowCommand;
    /**
     * Gets a command to insert a row in the table above the selected row.
     */
    readonly insertTableRowAbove: InsertTableRowAboveCommand;
    /**
     * Gets a command to delete the selected rows in the table.
     */
    readonly deleteTableRows: DeleteTableRowsCommand;
    /**
     * Gets a command to delete the selected columns in the table.
     */
    readonly deleteTableColumns: DeleteTableColumnsCommand;
    /**
     * Gets a command to insert table cells with a horizontal shift into the selected table.
     */
    readonly insertTableCellWithShiftToTheLeft: InsertTableCellWithShiftToTheLeftCommand;
    /**
     * Gets a command to delete the selected table cells with a horizontal shift.
     */
    readonly deleteTableCellsWithShiftHorizontally: DeleteTableCellsWithShiftHorizontallyCommand;
    /**
     * Gets a command to delete the selected table cells with a vertical shift.
     */
    readonly deleteTableCellsWithShiftVertically: DeleteTableCellsWithShiftVerticallyCommand;
    /**
     * Gets a command to delete the selected table.
     */
    readonly deleteTable: DeleteTableCommand;
    /**
     * Gets a command to invoke the Insert Cells dialog window.
     */
    readonly insertTableCellsDialog: InsertTableCellsDialogCommand;
    /**
     * Gets a command to invoke the Delete Cells dialog window.
     */
    readonly deleteTableCellsDialog: DeleteTableCellsDialogCommand;
    /**
     * Gets a command to merge the selected cells.
     */
    readonly mergeTableCells: MergeTableCellsCommand;
    /**
     * Gets a command to invoke the Split Cells dialog window.
     */
    readonly splitTableCellsDialog: SplitTableCellsDialogCommand;
    /**
     * Gets a command to split the selected table cells.
     */
    readonly splitTableCells: SplitTableCellsCommand;
    /**
     * Gets a command to insert table cells with a vertical shift into the selected table.
     */
    readonly insertTableCellsWithShiftToTheVertically: InsertTableCellsWithShiftToTheVerticallyCommand;
    /**
     * Gets a command to invoke the Borders tab of the Borders and Shading dialog window.
     */
    readonly openTableBordersAndShadingDialog: OpenTableBordersAndShadingDialogCommand;
    /**
     * Gets a command to change the selected table's borders and shading.
     */
    readonly changeTableBordersAndShading: ChangeTableBordersAndShadingCommand;
    /**
     * Gets a command to apply top-left alignment for the selected cells.
     */
    readonly toggleTableCellAlignTopLeft: ToggleTableCellAlignTopLeftCommand;
    /**
     * Gets a command to apply top-center alignment for the selected cells.
     */
    readonly toggleTableCellAlignTopCenter: ToggleTableCellAlignTopCenterCommand;
    /**
     * Gets a command to apply top-right alignment for the selected cells.
     */
    readonly toggleTableCellAlignTopRight: ToggleTableCellAlignTopRightCommand;
    /**
     * Gets a command to apply middle-left alignment for the selected cells.
     */
    readonly toggleTableCellAlignMiddleLeft: ToggleTableCellAlignMiddleLeftCommand;
    /**
     * Gets a command to apply middle-center alignment for the selected cells.
     */
    readonly toggleTableCellAlignMiddleCenter: ToggleTableCellAlignMiddleCenterCommand;
    /**
     * Gets a command to apply middle-right alignment for the selected cells.
     */
    readonly toggleTableCellAlignMiddleRight: ToggleTableCellAlignMiddleRightCommand;
    /**
     * Gets a command to apply bottom-left alignment for the selected cells.
     */
    readonly toggleTableCellAlignBottomLeft: ToggleTableCellAlignBottomLeftCommand;
    /**
     * Gets a command to apply bottom-center alignment for the selected cells.
     */
    readonly toggleTableCellAlignBottomCenter: ToggleTableCellAlignBottomCenterCommand;
    /**
     * Gets a command to apply bottom-right alignment for the selected cells.
     */
    readonly toggleTableCellAlignBottomRight: ToggleTableCellAlignBottomRightCommand;
    /**
     * Gets a command to change the selected table's style.
     */
    readonly changeTableStyle: ChangeTableStyleCommand;
    /**
     * Gets a command to apply (or cancel) border settings of the top border for the selected cells.
     */
    readonly toggleTableCellTopBorder: ToggleTableCellTopBorderCommand;
    /**
     * Gets a command to apply (or cancel) border settings of the right border for the selected cells.
     */
    readonly toggleTableCellRightBorder: ToggleTableCellRightBorderCommand;
    /**
     * Gets a command to apply (or cancel) border settings of the bottom border for the selected cells.
     */
    readonly toggleTableCellBottomBorder: ToggleTableCellBottomBorderCommand;
    /**
     * Gets a command to apply (or cancel) border settings of the left border for the selected cells.
     */
    readonly toggleTableCellLeftBorder: ToggleTableCellLeftBorderCommand;
    /**
     * Gets a command to remove the borders of the selected table cells.
     */
    readonly removeTableCellBorders: RemoveTableCellBordersCommand;
    /**
     * Gets a command to apply (or cancel) border settings to all borders of the selected cells.
     */
    readonly toggleTableCellAllBorders: ToggleTableCellAllBordersCommand;
    /**
     * Gets a command to apply (or cancel) border settings of the inside horizontal borders for the selected cells.
     */
    readonly toggleTableCellInsideHorizontalBorders: ToggleTableCellInsideHorizontalBordersCommand;
    /**
     * Gets a command to apply (or cancel) border settings of the inside vertical borders for the selected cells.
     */
    readonly toggleTableCellInsideVerticalBorders: ToggleTableCellInsideVerticalBordersCommand;
    /**
     * Gets a command to apply (or cancel) border settings of the outside borders for the selected cells.
     */
    readonly toggleTableCellOutsideBorders: ToggleTableCellOutsideBordersCommand;
    /**
     * Gets a command to change the selected table's style options.
     */
    readonly changeTableLook: ChangeTableLookCommand;
    /**
     * Gets a command to apply borders' drawing settings.
     */
    readonly changeTableBorderRepositoryItem: ChangeTableBorderRepositoryItemCommand;
    /**
     * Gets a command to change cell shading in selected table cells.
     */
    readonly changeTableCellShading: ChangeTableCellShadingCommand;
    /**
     * Gets a command to toggle the display of grid lines for a table with no borders applied - on/off.
     */
    readonly showTableGridLines: ShowTableGridLinesCommand;
    /**
     * Gets a command that fits the specified table to its contents.
     */
    readonly toggleTableAutoFitContents: ToggleTableAutoFitContentsCommand;
    /**
     * Gets a command that fits the specified table to a document's window.
     */
    readonly toggleTableAutoFitWindow: ToggleTableAutoFitWindowCommand;
    /**
     * Gets a command that disables automatic adjusting of the selected table.
     */
    readonly toggleTableFixedColumnWidth: ToggleTableFixedColumnWidthCommand;
    /**
     * Gets a command to invoke the Search Panel allowing end-users to search text and navigate through search results.
     */
    readonly openFindPanel: OpenFindPanelCommand;
    /**
     * Gets a command to invoke the Find and Replace dialog window.
     */
    readonly openFindAndReplaceDialog: OpenFindAndReplaceDialogCommand;
    /**
     * Gets a command to find all matches of the specified text in the document.
     */
    readonly findAll: FindAllCommand;
    /**
     * Gets a command to hide the search results.
     */
    readonly hideFindResults: HideFindResultsCommand;
    /**
     * Gets a command to replace all matches of the specified text with new characters.
     */
    readonly replaceAll: ReplaceAllCommand;
    /**
     * Gets a command to find and replace a next match of the specified text after the cursor position with new characters.
     */
    readonly replaceNext: ReplaceNextCommand;
    /**
     * Gets a command to invoke the Spelling dialog window.
     */
    readonly openSpellingDialog: OpenSpellingDialogCommand;
    /**
     * Gets a command to assign a shortcut to the specified client command.
     */
    readonly assignShortcut: AssignShortcutCommand;
    /**
     * Gets a command to invoke the Layout dialog window to customize the settings of a floating object.
     */
    readonly openLayoutOptionsDialog: OpenLayoutOptionsDialogCommand;
    /**
     * Gets a command to insert a floating text box.
     */
    readonly insertFloatingTextBox: InsertFloatingTextBoxCommand;
    /**
     * Gets a command to modify a floating object's alignment position.
     */
    readonly changeFloatingObjectAlignmentPosition: ChangeFloatingObjectAlignmentPositionCommand;
    /**
     * Gets a command to change a floating object's absolute position.
     */
    readonly changeFloatingObjectAbsolutePosition: ChangeFloatingObjectAbsolutePositionCommand;
    /**
     * Gets a command to modify a floating object's relative position.
     */
    readonly changeFloatingObjectRelativePosition: ChangeFloatingObjectRelativePositionCommand;
    /**
     * Gets a command to lock a floating object's anchor.
     */
    readonly changeFloatingObjectLockAnchor: ChangeFloatingObjectLockAnchorCommand;
    /**
     * Gets a command to modify a floating object's text wrapping settings.
     */
    readonly changeFloatingObjectTextWrapping: ChangeFloatingObjectTextWrappingCommand;
    /**
     * Gets a command to change a floating object's absolute size.
     */
    readonly changeFloatingObjectAbsoluteSize: ChangeFloatingObjectAbsoluteSizeCommand;
    /**
     * Gets a command to modify a text box's relative size settings.
     */
    readonly changeTextBoxRelativeSize: ChangeTextBoxRelativeSizeCommand;
    /**
     * Gets a command to rotate a floating object.
     */
    readonly changeFloatingObjectRotation: ChangeFloatingObjectRotationCommand;
    /**
     * Gets a command to lock a floating object's aspect ratio.
     */
    readonly changeFloatingObjectLockAspectRatio: ChangeFloatingObjectLockAspectRatioCommand;
    /**
     * Gets a command to modify a floating object's background fill color.
     */
    readonly changeFloatingObjectFillColor: ChangeFloatingObjectFillColorCommand;
    /**
     * Gets a command to modify a floating object's outline color.
     */
    readonly changeFloatingObjectOutlineColor: ChangeFloatingObjectOutlineColorCommand;
    /**
     * Gets a command to modify a floating object's outline width.
     */
    readonly changeFloatingObjectOutlineWidth: ChangeFloatingObjectOutlineWidthCommand;
    /**
     * Gets a command to modify a text box's content margins.
     */
    readonly changeTextBoxContentMargins: ChangeTextBoxContentMarginsCommand;
    /**
     * Gets a command to resize the shape to fit the text in the text box.
     */
    readonly changeTextBoxResizeShapeToFitText: ChangeTextBoxResizeShapeToFitTextCommand;
    /**
     * Gets a command to add an HTML formatted content in place of a selected range.
     */
    readonly insertHtml: InsertHtmlCommand;
    /**
     * Gets a command to add RTF formatted content at the specified position.
     */
    readonly insertRtf: InsertRtfCommand;
    /**
     * Gets a command to receive RTF formatted content from the document in the specified range.
     */
    readonly getRtf: GetRtfCommand;
}
/**
 * Provides data for the ASPxClientRichEdit.AutoCorrect event.
 */
declare class ASPxClientRichEditAutoCorrectEventArgs extends ASPxClientEventArgs {
    /**
     * Specifies whether the event is handled.
     */
    handled: boolean;
    /**
     * Gets the input string to check whether it should be replaced.
     */
    text: string;
    /**
     * Gets the input string's interval.
     */
    interval: Interval;
    /**
     * Initializes a new instance of the ASPxClientRichEditAutoCorrectEventArgs object. For internal use only.
     * @param text The input string to check whether it should be replaced.
     * @param interval The Interval object specifying the input string.
     * @param handled true if the event is handled and no default processing is required; otherwise false.
     */
    constructor(text: any, interval: any, handled: any);
}
/**
 * Provides data for the ASPxClientRichEdit.CharacterPropertiesChanged event.
 */
declare class ASPxClientRichEditCharacterPropertiesChangedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the active sub-document's identifier.
     */
    subDocumentId: number;
    /**
     * Gets the text buffer interval related to the changed characters.
     */
    interval: Interval;
    /**
     * Initializes a new instance of the ASPxClientRichEditCharacterPropertiesChangedEventArgs object. For internal use only.
     * @param subDocumentId An identifier of a sub-document containing the changed characters.
     * @param interval An interval object that relates to the changed characters.
     */
    constructor(subDocumentId: number, interval: Interval);
}
/**
 * Provides data for the ASPxClientRichEdit.ContentInserted event.
 */
declare class ASPxClientRichEditContentInsertedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the active sub-document's identifier.
     */
    subDocumentId: number;
    /**
     * Gets the text buffer interval related to the inserted content.
     */
    interval: Interval;
    /**
     * Initializes a new instance of the ASPxClientRichEditContentInsertedEventArgs object. For internal use only.
     * @param subDocumentId An identifier of a sub-document that contains the inserted content.
     * @param interval An interval object that relates to the inserted content.
     */
    constructor(subDocumentId: number, interval: Interval);
}
/**
 * Provides data for the ASPxClientRichEdit.ContentRemoved event.
 */
declare class ASPxClientRichEditContentRemovedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the active sub-document's identifier.
     */
    subDocumentId: number;
    /**
     * Gets the text buffer interval related to the removed content.
     */
    interval: Interval;
    /**
     * Initializes a new instance of the ASPxClientRichEditContentRemovedEventArgs object. For internal use only.
     * @param subDocumentId An identifier of a sub-document that contained the removed content.
     * @param interval An interval object that relates to the removed content.
     */
    constructor(subDocumentId: number, interval: Interval);
}
/**
 * Provides data for the ASPxClientRichEdit.CustomCommandExecuted event.
 */
declare class ASPxClientRichEditCustomCommandExecutedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the name of the processed command.
     */
    commandName: string;
    /**
     * Gets an optional parameter that complements the processed command.
     */
    parameter: any;
    /**
     * Initializes a new instance of the ASPxClientRichEditCustomCommandExecutedEventArgs object. For internal use only.
     * @param commandName A string value that specifies the name of the processed command.
     * @param parameter An object that can contain command specific information needed for handling the command execution.
     */
    constructor(commandName: string, parameter: any);
}
/**
 * Provides data for the ASPxClientRichEdit.DocumentFormatted event.
 */
declare class ASPxClientRichEditDocumentFormattedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the number of pages in the document.
     */
    pageCount: number;
    /**
     * Initializes a new instance of the ASPxClientRichEditDocumentFormattedEventArgs object. For internal use only.
     * @param pageCount The number of pages in the document.
     */
    constructor(pageCount: number);
}
/**
 * Provides data for the ASPxClientRichEdit.HyperlinkClick event.
 */
declare class ASPxClientRichEditHyperlinkClickEventArgs extends ASPxClientEventArgs {
    /**
     * Gets or sets whether the event is handled manually, so no default processing is required.
     */
    handled: boolean;
    /**
     * Gets a DHTML event object that relates to the processed event.
     */
    htmlEvent: any;
    /**
     * Gets a value identifying the clicked hyperlink type.
     */
    hyperlinkType: ASPxClientOfficeDocumentLinkType;
    /**
     * Gets the clicked link's URI.
     */
    targetUri: string;
    /**
     * Initializes a new instance of the ASPxClientRichEditHyperlinkClickEventArgs object. For internal use only.
     * @param htmlEvent A DHTML event object that relates to the processed event.
     * @param handled true if the event is handled and no default processing is required; otherwise false.
     * @param targetUri The target URI.
     * @param hyperlinkType The document link type.
     */
    constructor(htmlEvent: any, handled: boolean, targetUri: string, hyperlinkType: ASPxClientOfficeDocumentLinkType);
}
/**
 * Provides data for the ASPxClientRichEdit.KeyDown event.
 */
declare class ASPxClientRichEditKeyDownEventArgs extends ASPxClientEventArgs {
    /**
     * Gets or sets whether the event is handled manually, so no default processing is required.
     */
    handled: boolean;
    /**
     * Gets a DHTML event object that relates to the processed event.
     */
    htmlEvent: any;
    /**
     * Initializes a new instance of the ASPxClientRichEditKeyDownEventArgs object. For internal use only.
     * @param htmlEvent A DHTML event object that relates to the processed event.
     * @param handled true if the event is handled and no default processing is required; otherwise false.
     */
    constructor(htmlEvent: any, handled: boolean);
}
/**
 * Provides data for the ASPxClientRichEdit.KeyUp event.
 */
declare class ASPxClientRichEditKeyUpEventArgs extends ASPxClientEventArgs {
    /**
     * Gets a DHTML event object that relates to the processed event.
     */
    htmlEvent: any;
    /**
     * Initializes a new instance of the ASPxClientRichEditKeyUpEventArgs object. For internal use only.
     * @param htmlEvent A DHTML event object that relates to the processed event.
     */
    constructor(htmlEvent: any);
}
/**
 * Provides data for the ASPxClientRichEdit.ParagraphPropertiesChanged event.
 */
declare class ASPxClientRichEditParagraphPropertiesChangedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the active sub-document's identifier.
     */
    subDocumentId: number;
    /**
     * Gets the changed paragraph's index.
     */
    paragraphIndex: number;
    /**
     * Initializes a new instance of the ASPxClientRichEditParagraphPropertiesChangedEventArgs object. For internal use only.
     * @param subDocumentId An identifier of a sub-document containing the changed paragraph.
     * @param paragraphIndex The changed paragraph's index.
     */
    constructor(subDocumentId: number, paragraphIndex: number);
}
/**
 * Provides data for the ASPxClientRichEdit.PointerDown event.
 */
declare class ASPxClientRichEditPointerDownEventArgs extends ASPxClientEventArgs {
    /**
     * Gets or sets whether the event is handled manually, so no default processing is required.
     */
    handled: boolean;
    /**
     * Gets a DHTML event object that relates to the processed event.
     */
    htmlEvent: any;
    /**
     * Initializes a new instance of the ASPxClientRichEditPointerDownEventArgs object. For internal use only.
     * @param htmlEvent A DHTML event object that relates to the processed event.
     * @param handled true if the event is handled and no default processing is required; otherwise false.
     */
    constructor(htmlEvent: any, handled: boolean);
}
/**
 * Provides data for the ASPxClientRichEdit.PointerUp event.
 */
declare class ASPxClientRichEditPointerUpEventArgs extends ASPxClientEventArgs {
    /**
     * Gets or sets whether the event is handled manually, so no default processing is required.
     */
    handled: boolean;
    /**
     * Gets a DHTML event object that relates to the processed event.
     */
    htmlEvent: any;
    /**
     * Initializes a new instance of the ASPxClientRichEditPointerUpEventArgs object. For internal use only.
     * @param htmlEvent A DHTML event object that relates to the processed event.
     * @param handled true if the event is handled and no default processing is required; otherwise false.
     */
    constructor(htmlEvent: any, handled: any);
}
/**
 * Represents an individual item of the Rich Edit's context menu.
 */
declare class ASPxClientRichEditPopupMenuItem {
    /**
     * Gets the immediate parent menu item to which the current menu item belongs.
     */
    parent: ASPxClientRichEditPopupMenuItem;
    /**
     * Gets or sets the unique identifier name for the current menu item.
     */
    name: string;
    /**
     * Gets or sets the text content of the current menu item.
     */
    text: string;
    /**
     * Gets or sets a value that indicates whether the menu item is enabled, allowing the item to respond to end-user interactions.
     */
    enabled: boolean;
    /**
     * Gets or sets the CSS class name defining the menu item's image.
     */
    imageClassName: string;
    /**
     * Gets or sets a URL which defines the navigation location.
     */
    navigateUrl: string;
    /**
     * Gets or sets the URL of the menu item's image.
     */
    imageUrl: string;
    /**
     * Gets or sets a value that specifies whether the current menu item starts a group.
     */
    beginGroup: boolean;
    /**
     * Gets or sets the current menu item's tooltip text.
     */
    tooltip: string;
    /**
     * Gets or sets the window or frame at which to target the contents of the URL associated with the current menu item.
     */
    target: string;
    /**
     * Gets a collection that contains the submenu items of the current menu item.
     */
    GetSubItems(): ASPxClientRichEditPopupMenuItemCollection;
    /**
     * Returns the menu item's sub-item with the specified index. An ASPxClientRichEditPopupMenuItem object representing the found sub-item.
     * @param index An integer value specifying the index of the sub-item within a collection of the current menu item's submenu items.
     */
    GetItem(index: number): ASPxClientRichEditPopupMenuItem;
    /**
     * Returns the menu item's sub-item with the specified ASPxClientRichEditPopupMenuItem.name property value. An ASPxClientRichEditPopupMenuItem object representing the found sub-item.
     * @param name A string value specifying the ASPxClientRichEditPopupMenuItem.name property value of the sub-item to find.
     */
    GetItemByName(name: string): ASPxClientRichEditPopupMenuItem;
    /**
     * Returns the total number of the menu item's child items (submenu items).
     */
    GetItemCount(): number;
}
/**
 * Represents a collection of items in the Rich Edit's context menu.
 */
declare class ASPxClientRichEditPopupMenuItemCollection {
    /**
     * Adds the specified menu item to the end of the collection.
     * @param item An ASPxClientRichEditPopupMenuItem object specifying the item to be added to the collection.
     */
    Add(item: ASPxClientRichEditPopupMenuItem): void;
    /**
     * Removes a menu item specified by its index within the collection.
     * @param index An integer value specifying the index of the menu item to remove.
     */
    Remove(index: number): void;
    /**
     * Removes a menu item specified by its name.
     * @param name A string value specifying the ASPxClientRichEditPopupMenuItem.name property value of a menu item to remove from the collection.
     */
    RemoveByName(name: string): void;
    /**
     * Adds the specified item to the specified position within the collection.
     * @param index An integer value that specifies the zero-based index at which the specified item should be inserted.
     * @param item An ASPxClientRichEditPopupMenuItem object to insert.
     */
    Insert(index: number, item: ASPxClientRichEditPopupMenuItem): void;
    /**
     * Returns the total number of menu items in the collection.
     */
    GetCount(): number;
    /**
     * Returns an item object with the specified ASPxClientRichEditPopupMenuItem.name property value. An ASPxClientRichEditPopupMenuItem object with a specific value of the ASPxClientRichEditPopupMenuItem.name property.
     * @param name A string value representing the ASPxClientRichEditPopupMenuItem.name property value of the required item.
     */
    GetByName(name: string): ASPxClientRichEditPopupMenuItem;
    /**
     * Returns a menu item specified by its index in the collection. An ASPxClientRichEditPopupMenuItem object that is a menu item with the specified index.
     * @param index An integer value that is the zero-based index of the ASPxClientRichEditPopupMenuItem to retrieve from the ASPxClientRichEditPopupMenuItemCollection.
     */
    Get(index: number): ASPxClientRichEditPopupMenuItem;
    /**
     * Removes all menu items from the collection.
     */
    Clear(): void;
}
/**
 * Provides data for the ASPxClientRichEdit.PopupMenuShowing event.
 */
declare class ASPxClientRichEditPopupMenuShowingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Provides access to a collection of menu items in the context menu being invoked.
     */
    menuItems: ASPxClientRichEditPopupMenuItemCollection;
    /**
     * Initializes a new instance of the ASPxClientRichEditPopupMenuShowingEventArgs object. For internal use only.
     * @param menuItems Provides access to the context menu's item collection.
     */
    constructor(menuItems: ASPxClientRichEditPopupMenuItemCollection);
}
/**
 * A method that handles the ContentRemoved event.
 * @param source The event source.
 * @param e An object that contains event data.
 */
interface ASPxClientRichEditContentRemovedEventHandler {
    (source: ASPxClientRichEdit, e: ASPxClientRichEditContentRemovedEventArgs): any;
}
/**
 * A method that handles the AutoCorrect event.
 * @param source The event source.
 * @param e An object that contains event data.
 */
interface ASPxClientRichEditAutoCorrectEventHandler {
    (source: ASPxClientRichEdit, e: ASPxClientRichEditAutoCorrectEventArgs): any;
}
/**
 * A method that handles the ParagraphPropertiesChanged event.
 * @param source The event source.
 * @param e An object that contains event data.
 */
interface ASPxClientRichEditParagraphPropertiesChangedEventHandler {
    (source: ASPxClientRichEdit, e: ASPxClientRichEditParagraphPropertiesChangedEventArgs): any;
}
/**
 * A method that handles the CharacterPropertiesChanged event.
 * @param source The event source.
 * @param e An object that contains event data.
 */
interface ASPxClientRichEditCharacterPropertiesChangedEventHandler {
    (source: ASPxClientRichEdit, e: ASPxClientRichEditCharacterPropertiesChangedEventArgs): any;
}
/**
 * A method that handles the ContentInserted event.
 * @param source The event source.
 * @param e An object that contains event data.
 */
interface ASPxClientRichEditContentInsertedEventHandler {
    (source: ASPxClientRichEdit, e: ASPxClientRichEditContentInsertedEventArgs): any;
}
/**
 * A method that handles the HyperlinkClick event.
 * @param source The event source.
 * @param e An object that contains event data.
 */
interface ASPxClientRichEditHyperlinkClickEventHandler {
    (source: ASPxClientRichEdit, e: ASPxClientRichEditHyperlinkClickEventArgs): any;
}
/**
 * A method that handles the PopupMenuShowing event.
 * @param source The event source.
 * @param e An object that contains event data.
 */
interface ASPxClientRichEditPopupMenuShowingEventHandler {
    (source: ASPxClientRichEdit, e: ASPxClientRichEditPopupMenuShowingEventArgs): any;
}
/**
 * A method that handles the KeyUp event.
 * @param source The event source.
 * @param e An object that contains event data.
 */
interface ASPxClientRichEditKeyUpEventHandler {
    (source: ASPxClientRichEdit, e: ASPxClientRichEditKeyUpEventArgs): any;
}
/**
 * A method that handles the KeyDown event.
 * @param source The event source.
 * @param e An object that contains event data.
 */
interface ASPxClientRichEditKeyDownEventHandler {
    (source: ASPxClientRichEdit, e: ASPxClientRichEditKeyDownEventArgs): any;
}
/**
 * A method that handles the PointerUp event.
 * @param source The event source.
 * @param e An object that contains event data.
 */
interface ASPxClientRichEditPointerUpEventHandler {
    (source: ASPxClientRichEdit, e: ASPxClientRichEditPointerUpEventArgs): any;
}
/**
 * A method that handles the PointerDown event.
 * @param source The event source.
 * @param e An object that contains event data.
 */
interface ASPxClientRichEditPointerDownEventHandler {
    (source: ASPxClientRichEdit, e: ASPxClientRichEditPointerDownEventArgs): any;
}
/**
 * A method that handles the CustomCommandExecuted event.
 * @param source The event source.
 * @param e An object that contains event data.
 */
interface ASPxClientRichEditCustomCommandExecutedEventHandler {
    (source: ASPxClientRichEdit, e: ASPxClientRichEditCustomCommandExecutedEventArgs): any;
}
/**
 * A method that handles the DocumentFormatted event.
 * @param source The event source.
 * @param e An object that contains event data.
 */
interface ASPxClientRichEditDocumentFormattedEventHandler {
    (source: ASPxClientRichEdit, e: ASPxClientRichEditDocumentFormattedEventArgs): any;
}
/**
 * Contains members related to the document's layout functionality.
 */
declare class RichEditLayout {
    /**
     * Returns bounds of the specified document model's position. The object that contains position bounds.
     * @param position The position in a document model.
     * @param endOfLine true to return bounds of a position at the end of a line; false to return bounds of a position at a new line start.
     */
    getPositionBounds(position: number, endOfLine?: boolean): Rectangle;
}
/**
 * Contains the size and coordinates of a rectangle.
 */
declare class Rectangle {
    /**
     * Gets the x-coordinate of the upper-left corner of the rectangle.
     */
    x: number;
    /**
     * Gets the y-coordinate of the upper-left corner of the rectangle.
     */
    y: number;
    /**
     * Gets the rectangle's width.
     */
    width: number;
    /**
     * Gets the rectangle's height.
     */
    height: number;
}
/**
 * Defines custom loading panel members.
 */
interface ICustomLoadingPanel {
    /**
     * Specifies whether the panel is visible.
     */
    visible?: boolean;
    /**
     * Shows the loading panel.
     */
    show(): void;
    /**
     * Hides the loading panel.
     */
    hide(): void;
}
/**
 * Contains settings related to the loading panel functionality.
 */
declare class LoadingPanel {
    /**
     * Specifies whether the loading panel is enabled in the control.
     */
    enabled: boolean;
    /**
     * Allows you to provide a custom loading panel.
     */
    customPanel: undefined | ICustomLoadingPanel;
    /**
     * Shows the loading panel.
     */
    show(): void;
    /**
     * Hides the loading panel.
     */
    hide(): void;
}
/**
 * Contains control requests' settings.
 */
declare class RequestSettings {
    /**
     * Specifies the maximum number of commands that can be sent in one request.
     */
    maxCommandCount: number;
    /**
     * Specifies the time that the control waits for a response before to sent a request again.
     */
    responseWaitingTime: number;
    /**
     * Specifies a period before a request is sent to the server.
     */
    pendingPeriod: number;
}
/**
 * Contains the method to convert different units of measurement.
 */
declare class RichEditUnitConverter {
    /**
     * Converts a measurement from pixels to twips. The result twips value.
     * @param value The pixels value to be converted.
     */
    pixelsToTwips(value: number): number;
    /**
     * Converts a measurement from inches to twips. The result twips value, as an integer.
     * @param value The inches value (floating) to be converted.
     */
    inchesToTwips(value: number): number;
    /**
     * Converts a measurement from points to twips. The result twips value.
     * @param value The points value to be converted.
     */
    pointsToTwips(value: number): number;
    /**
     * Converts a value in centimeters to twips. An integer value representing the value in twips.
     * @param value A floating value specifying the value in centimeters to convert.
     */
    centimetersToTwips(value: number): number;
    /**
     * Converts a measurement from twips to centimeters. The result centimeters value.
     * @param value The twips value to be converted.
     */
    twipsToCentimeters(value: number): number;
    /**
     * Converts a measurement from pixels to centimeters. The result centimeters value.
     * @param value The pixels value to be converted.
     */
    pixelsToCentimeters(value: number): number;
    /**
     * Converts a measurement from twips to inches. The result inches value.
     * @param value The twips value to be converted.
     */
    twipsToInches(value: number): number;
    /**
     * Converts a measurement from pixels to inches. The result inches value.
     * @param value The pixels value to be converted.
     */
    pixelsToInches(value: number): number;
    /**
     * Converts a measurement from pixels to points. The result points value.
     * @param value The pixels value to be converted.
     */
    pixelsToPoints(value: number): number;
    /**
     * Converts a measurement from twips to points. The result points value.
     * @param value The twips value to be converted.
     */
    twipsToPoints(value: number): number;
}
/**
 * A client-side equivalent of the ASPxRichEdit object.
 */
declare class ASPxClientRichEdit extends ASPxClientControl {
    /**
     * Occurs after a custom command has been executed on the client side.
     */
    CustomCommandExecuted: ASPxClientEvent<ASPxClientRichEditCustomCommandExecutedEventHandler>;
    /**
     * Fires after a client change has been made to the document and the client-server synchronization starts to apply the change on the server.
     */
    BeginSynchronization: ASPxClientEvent<ASPxClientEventHandler<ASPxClientRichEdit>>;
    /**
     * Fires after a document change has been applied to the server and server and client document models have been synchronized.
     */
    EndSynchronization: ASPxClientEvent<ASPxClientEventHandler<ASPxClientRichEdit>>;
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientRichEdit>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientRichEdit>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the RichEdit.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientRichEdit>>;
    /**
     * Occurs on the client side when a document model is loaded into the control.
     */
    DocumentLoaded: ASPxClientEvent<ASPxClientEventHandler<ASPxClientRichEdit>>;
    /**
     * Occurs on the client side when a document layout is formatted.
     */
    DocumentFormatted: ASPxClientEvent<ASPxClientRichEditDocumentFormattedEventHandler>;
    /**
     * Fires if any change is made to the RichEdit's document on the client.
     */
    DocumentChanged: ASPxClientEvent<ASPxClientEventHandler<ASPxClientRichEdit>>;
    /**
     * Occurs when the active sub-document is substituted with another sub-document.
     */
    ActiveSubDocumentChanged: ASPxClientEvent<ASPxClientEventHandler<ASPxClientRichEdit>>;
    /**
     * Occurs when the control receives focus.
     */
    GotFocus: ASPxClientEvent<ASPxClientEventHandler<ASPxClientRichEdit>>;
    /**
     * Occurs when the control loses focus.
     */
    LostFocus: ASPxClientEvent<ASPxClientEventHandler<ASPxClientRichEdit>>;
    /**
     * Occurs when the mouse pointer is over the RichEdit's document and a mouse button is pressed.
     */
    PointerDown: ASPxClientEvent<ASPxClientRichEditPointerDownEventHandler>;
    /**
     * Occurs when the mouse button is released if it was pressed within the RichEdit's document.
     */
    PointerUp: ASPxClientEvent<ASPxClientRichEditPointerUpEventHandler>;
    /**
     * Occurs when a key is pressed while the ASPxRichEdit's document has focus.
     */
    KeyDown: ASPxClientEvent<ASPxClientRichEditKeyDownEventHandler>;
    /**
     * Occurs when a key is released while the ASPxRichEdit's document has focus.
     */
    KeyUp: ASPxClientEvent<ASPxClientRichEditKeyUpEventHandler>;
    /**
     * Occurs when a pop-up menu is about to be shown.
     */
    PopupMenuShowing: ASPxClientEvent<ASPxClientRichEditPopupMenuShowingEventHandler>;
    /**
     * Occurs when a hyperlink is activated within the document.
     */
    HyperlinkClick: ASPxClientEvent<ASPxClientRichEditHyperlinkClickEventHandler>;
    /**
     * Occurs when the selection is changed within the document.
     */
    SelectionChanged: ASPxClientEvent<ASPxClientEventHandler<ASPxClientRichEdit>>;
    /**
     * Occurs when content is inserted into the document.
     */
    ContentInserted: ASPxClientEvent<ASPxClientRichEditContentInsertedEventHandler>;
    /**
     * Occurs when content is removed from the document.
     */
    ContentRemoved: ASPxClientEvent<ASPxClientRichEditContentRemovedEventHandler>;
    /**
     * Occurs when the characters' formatting is changed.
     */
    CharacterPropertiesChanged: ASPxClientEvent<ASPxClientRichEditCharacterPropertiesChangedEventHandler>;
    /**
     * Occurs when a paragraph's formatting is changed.
     */
    ParagraphPropertiesChanged: ASPxClientEvent<ASPxClientRichEditParagraphPropertiesChangedEventHandler>;
    /**
     * Fires when text is typed in the control.
     */
    AutoCorrect: ASPxClientEvent<ASPxClientRichEditAutoCorrectEventHandler>;
    /**
     * Provides access to document structural elements.
     */
    document: RichEditDocument;
    /**
     * Provides access to the RichEdit's client-side commands.
     */
    commands: RichEditCommands;
    /**
     * Provides access to the client methods that change the selection.
     */
    selection: RichEditSelection;
    /**
     * Provides access to a document's layout functionality.
     */
    layout: RichEditLayout;
    /**
     * Gets a unit converter.
     */
    unitConverter: RichEditUnitConverter;
    /**
     * Provides access to request settings.
     */
    requestSettings: RequestSettings;
    /**
     * Provides access to settings related to a loading panel functionality.
     */
    loadingPanel: LoadingPanel;
    /**
     * Enables you to switch the full-screen mode of the Rich Text Editor.
     * @param fullscreen true to activate full-screen mode; false to deactivate full-screen mode.
     */
    SetFullscreenMode(fullscreen: boolean): void;
    /**
     * Provides access to an object implementing the RichEdit's ribbon UI.
     */
    GetRibbon(): ASPxClientRibbon;
    /**
     * Sets input focus to the RichEdit.
     */
    Focus(): void;
    /**
     * Sends a callback to the server and generates the server-side ASPxRichEdit.Callback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(parameter: string, onSuccess?: (arg: string) => void): void;
    /**
     * Indicates whether any unsaved changes are contained in the current document.
     */
    HasUnsavedChanges(): boolean;
    /**
     * Reconnects the RichEdit to an external ribbon.
     */
    ReconnectToExternalRibbon(): void;
    /**
     * Converts the specified object to the ASPxClientRichEdit type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientRichEdit;
}
/**
 * Holds the information that determines what action types can be performed for appointments.
 */
declare class ASPxClientAppointmentFlags {
    /**
     * Gets a value that specifies whether an end-user is allowed to delete appointments.
     */
    allowDelete: boolean;
    /**
     * Gets a value that specifies whether an end-user is allowed to edit appointments.
     */
    allowEdit: boolean;
    /**
     * Gets a value that specifies whether an end-user is allowed to change the time boundaries of appointments.
     */
    allowResize: boolean;
    /**
     * Gets a value that specifies whether an end-user is allowed to copy appointments.
     */
    allowCopy: boolean;
    /**
     * Gets a value that specifies whether an end-user is allowed to drag and drop appointments to another time slot or date.
     */
    allowDrag: boolean;
    /**
     * Gets a value that specifies whether an end-user is allowed to drag and drop appointments between resources.
     */
    allowDragBetweenResources: boolean;
    /**
     * Gets a value that specifies whether an inplace editor can be activated for an appointment.
     */
    allowInplaceEditor: boolean;
    /**
     * Gets a value that specifies whether an end-user is allowed to share the schedule time between two or more appointments.
     */
    allowConflicts: boolean;
}
/**
 * Represents a client-side equivalent of the Appointment class.
 */
declare class ASPxClientAppointment {
    /**
     * Returns the client appointment ID.
     */
    appointmentId: string;
    /**
     * Gets or sets the time interval of the time cells covered by the current appointment.
     */
    interval: ASPxClientTimeInterval;
    /**
     * Gets resources associated with the appointment.
     */
    resources: string[];
    /**
     * Gets the appointment type.
     */
    appointmentType: ASPxAppointmentType;
    /**
     * Gets the status index.
     */
    statusIndex: number;
    /**
     * Returns the label's index.
     */
    labelIndex: number;
    /**
     * Adds a resource to the collection of resources associated with the client appointment.
     * @param resourceId An object, representing the resource id.
     */
    AddResource(resourceId: string): void;
    /**
     * Gets the resource associated with the client-side appointment by its index. An identifier of the specified resource (IPersistentObject.Id)
     * @param index An integer, representing an index of a resource in a resource collection associated with the current appointment.
     */
    GetResource(index: number): string;
    /**
     * Sets the property value of the client appointment, corresponding to the Appointment.Start appointment property.
     * @param start A JavaScript Date object representing the appointment start.
     */
    SetStart(start: Date): void;
    /**
     * Gets the start date and time of the appointment.
     */
    GetStart(): Date;
    /**
     * Sets the property value of the client appointment, corresponding to the Appointment.End appointment property.
     * @param end A JavaScript Date object representing the end of the appointment.
     */
    SetEnd(end: Date): void;
    /**
     * Gets the end date and time of the appointment.
     */
    GetEnd(): Date;
    /**
     * Sets the property value of the client appointment, corresponding to the Appointment.Duration appointment property.
     * @param duration A TimeSpan object representing the appointment duration.
     */
    SetDuration(duration: any): void;
    /**
     * Returns the duration of the appointment.
     */
    GetDuration(): number;
    /**
     * Sets the ID of the client appointment.
     * @param id An string value representing the appointment identifier.
     */
    SetId(id: string): void;
    /**
     * Gets the ID of the client appointment.
     */
    GetId(): string;
    /**
     * Specifies the type of the current client appointment.
     * @param type An ASPxAppointmentType enumeration value indicating the appointment type.
     */
    SetAppointmentType(type: ASPxAppointmentType): void;
    /**
     * Returns the appointment type.
     */
    GetAppointmentType(): ASPxAppointmentType;
    /**
     * Sets the property value of the client appointment, corresponding to the Appointment.StatusId appointment property.
     * @param statusId An integer representing the index in the AppointmentStatusCollection.
     */
    SetStatusId(statusId: number): void;
    /**
     * Gets or sets the integer identifier of the status object associated with the appointment.
     */
    GetStatusId(): number;
    /**
     * Sets the property value of the client appointment, corresponding to the Appointment.LabelId appointment property.
     * @param statusId An integer representing the index of the label in the AppointmentStorage.Labels label collection.
     */
    SetLabelId(statusId: number): void;
    /**
     * Gets or sets the integer identifier of the label object associated with the appointment.
     */
    GetLabelId(): number;
    /**
     * Sets the property value of the client appointment, corresponding to the Appointment.Subject appointment property.
     * @param subject A string containing the appointment subject.
     */
    SetSubject(subject: string): void;
    /**
     * Gets or sets the appointment's subject text.
     */
    GetSubject(): string;
    /**
     * Sets the property value of the client appointment, corresponding to the Appointment.Description appointment property.
     * @param description A string representing the appointment description.
     */
    SetDescription(description: string): void;
    /**
     * Gets the description of the appointment.
     */
    GetDescription(): string;
    /**
     * Sets the property value of the client appointment, corresponding to the Appointment.Location appointment property.
     * @param location A string representing the appointment location.
     */
    SetLocation(location: string): void;
    /**
     * Gets or sets the text that specifies a place where the appointment is scheduled.
     */
    GetLocation(): string;
    /**
     * Specifies the property value of the client appointment corresponding to the Appointment.AllDay appointment property.
     * @param allDay true to indicate the all-day appointment; otherwise, false.
     */
    SetAllDay(allDay: boolean): void;
    /**
     * Returns a value specifying whether the current appointment lasts the entire day.
     */
    GetAllDay(): boolean;
    /**
     * Gets the appointment that is the Appointment.RecurrencePattern for the current appointment.
     */
    GetRecurrencePattern(): ASPxClientAppointment;
    /**
     * Sets the property value of the client appointment, corresponding to the Appointment.RecurrenceInfo appointment property.
     * @param recurrenceInfo An ASPxClientRecurrenceInfo object representing the recurrence information.
     */
    SetRecurrenceInfo(recurrenceInfo: ASPxClientRecurrenceInfo): void;
    /**
     * Gets the property value of the client appointment corresponding to the Appointment.RecurrenceInfo appointment property.
     */
    GetRecurrenceInfo(): ASPxClientRecurrenceInfo;
}
/**
 * Contains information defining the occurrences of a recurring client appointment.
 */
declare class ASPxClientRecurrenceInfo {
    /**
     * Initializes a new instance of the ASPxClientRecurrenceInfo class with default settings.
     */
    constructor();
    /**
     * Sets the recurrence start date.
     * @param start A JavaScript date object value that specifies the start date for the recurrence.
     */
    SetStart(start: Date): void;
    /**
     * Gets the recurrence start date.
     */
    GetStart(): Date;
    /**
     * Sets the recurrence end date.
     * @param end A JavaScript Date object that specifies the end date for the recurrence.
     */
    SetEnd(end: Date): void;
    /**
     * Gets the recurrence end date.
     */
    GetEnd(): Date;
    /**
     * Sets the duration of the recurrence.
     * @param duration A TimeSpan object representing the duration.
     */
    SetDuration(duration: any): void;
    /**
     * Gets the duration of the recurrence.
     */
    GetDuration(): number;
    /**
     * Sets the time base for the frequency of the corresponding appointment occurrences.
     * @param type An ASPxClientRecurrenceType enumeration value that specifies the recurrence's frequency type.
     */
    SetRecurrenceType(type: ASPxClientRecurrenceType): void;
    /**
     * Gets the time base for the frequency of the corresponding appointment reoccurrence.
     */
    GetRecurrenceType(): ASPxClientRecurrenceType;
    /**
     * Sets the day/days in a week that the corresponding appointment recurs on.
     * @param weekDays The ASPxClientWeekDays enumeration value specifying the day/days in a week.
     */
    SetWeekDays(weekDays: ASPxClientWeekDays): void;
    /**
     * Gets the day/days in a week on which the corresponding appointment occurs.
     */
    GetWeekDays(): ASPxClientWeekDays;
    /**
     * Sets how many times the appointment occurs.
     * @param occurrenceCount An integer value that specifies how many times the appointment occurs.
     */
    SetOccurrenceCount(occurrenceCount: number): void;
    /**
     * Gets how many times the appointment occurs.
     */
    GetOccurrenceCount(): number;
    /**
     * Sets the frequency with which the corresponding appointment occurs (dependent on the recurrence Type).
     * @param periodicity An integer value that specifies the frequency with which the corresponding appointment occurs.
     */
    SetPeriodicity(periodicity: number): void;
    /**
     * Gets the frequency with which the corresponding appointment reoccurs (dependent on the recurrence Type).
     */
    GetPeriodicity(): number;
    /**
     * Sets the ordinal number of a day within a defined month.
     * @param dayNumber A positive integer value that specifies the day number within a month.
     */
    SetDayNumber(dayNumber: number): void;
    /**
     * Gets the ordinal number of a day within a defined month.
     */
    GetDayNumber(): number;
    /**
     * Sets the occurrence number of the week in a month for the recurrence pattern.
     * @param weekOfMonth A ASPxClientWeekOfMonth enumeration value that specifies a particular week in every month.
     */
    SetWeekOfMonth(weekOfMonth: ASPxClientWeekOfMonth): void;
    /**
     * Gets the occurrence number of the week in a month for the recurrence pattern.
     */
    GetWeekOfMonth(): ASPxClientWeekOfMonth;
    /**
     * Sets the month (as a number) on which the corresponding appointment occurs.
     * @param month A positive integer value that specifies the month's number.
     */
    SetMonth(month: number): void;
    /**
     * Gets the month (as a number) on which the corresponding appointment recurs.
     */
    GetMonth(): number;
    /**
     * Gets the type of the recurrence range.
     */
    GetRange(): ASPxClientRecurrenceRange;
    /**
     * Sets the type of the recurrence range.
     * @param range An ASPxClientRecurrenceRangeenumeration value that specifies the recurrence range type.
     */
    SetRange(range: ASPxClientRecurrenceRange): void;
}
/**
 * Represents a client-side equivalent of the AppointmentType enumeration.
 */
declare class ASPxAppointmentType {
    /**
     * Gets a string representation equivalent of ASPxAppointmentType.Normal enumeration for use in client scripts.
     */
    Normal: string;
    /**
     * Gets a string representation equivalent of ASPxAppointmentType.Pattern enumeration for use in client scripts.
     */
    Pattern: string;
    /**
     * Gets a string representation equivalent of ASPxAppointmentType.Occurrence enumeration for use in client scripts.
     */
    Occurrence: string;
    /**
     * Gets a string representation equivalent of AppointmentType.ChangedOccurrence enumeration for use in client scripts.
     */
    ChangedOccurrence: string;
    /**
     * Gets a string representation equivalent of ASPxAppointmentType.DeletedOccurrence enumeration for use in client scripts.
     */
    DeletedOccurrence: string;
}
/**
 * Contains types of the recurrence range.
 */
declare class ASPxClientRecurrenceRange {
    /**
     * A recurring appointment will not have an end date, i.e. infinite recurrence
     */
    NoEndDate: string;
    /**
     * A recurring appointment will end after its recurrence count exceeds the value specified by the ASPxClientRecurrenceInfo.SetOccurrenceCount method.
     */
    OccurrenceCount: string;
    /**
     * A recurring appointment will end after the date specified by the ASPxClientRecurrenceInfo.SetEnd method.
     */
    EndByDate: string;
}
/**
 * Contains recurrence types.
 */
declare class ASPxClientRecurrenceType {
    /**
     * The recurring appointment occurs on a daily basis.
     */
    Daily: string;
    /**
     * The recurring appointment reoccurs on a weekly basis.
     */
    Weekly: string;
    /**
     * The recurring appointment reoccurs on a monthly basis.
     */
    Monthly: string;
    /**
     * The recurring appointment reoccurs on an yearly basis.
     */
    Yearly: string;
    /**
     * The recurring appointment occurs on an hourly base.
     */
    Hourly: string;
}
/**
 * Contains number of weeks in a month in which the event occurs.
 */
declare class ASPxClientWeekOfMonth {
    /**
     * There isn't any recurrence rule based on the weeks in a month.
     */
    None: number;
    /**
     * The recurring event will occur once a month, on the specified day or days of the first week in the month.
     */
    First: number;
    /**
     * The recurring event will occur once a month, on the specified day or days of the second week in the month.
     */
    Second: number;
    /**
     * The recurring event will occur once a month, on the specified day or days of the third week in the month.
     */
    Third: number;
    /**
     * The recurring event will occur once a month, on the specified day or days of the fourth week in the month.
     */
    Fourth: number;
    /**
     * The recurring event will occur once a month, on the specified day or days of the last week in the month.
     */
    Last: number;
}
/**
 * Contains days and groups of days for use in recurrence patterns.
 */
declare class ASPxClientWeekDays {
    /**
     * Specifies Sunday.
     */
    Sunday: number;
    /**
     * Specifies Monday.
     */
    Monday: number;
    /**
     * Specifies Tuesday.
     */
    Tuesday: number;
    /**
     * Specifies Wednesday.
     */
    Wednesday: number;
    /**
     * Specifies Thursday.
     */
    Thursday: number;
    /**
     * Specifies Friday.
     */
    Friday: number;
    /**
     * Specifies Saturday.
     */
    Saturday: number;
    /**
     * Specifies Saturday and Sunday.
     */
    WeekendDays: number;
    /**
     * Specifies work days (Monday, Tuesday, Wednesday, Thursday and Friday).
     */
    WorkDays: number;
    /**
     * Specifies every day of the week.
     */
    EveryDay: number;
}
/**
 * Contains information related to the reminder alert.
 */
declare class ASPxClientReminderAlertNotification {
    /**
     * Returns the triggered reminder.
     */
    reminder: ASPxClientReminder;
    /**
     * Gets the appointment associated with the triggered reminder.
     */
    appointment: ASPxClientAppointment;
    /**
     * Gets or sets whether the reminder is handled and therefore no default processing is required.
     */
    handled: boolean;
    /**
     * Gets or sets whether an alert is invoked for a particular reminder.
     */
    ignore: boolean;
    /**
     * Gets the triggered reminder's ID.
     */
    GetReminderId(): string;
    /**
     * Gets the triggered reminder.
     */
    GetReminder(): ASPxClientReminder;
    /**
     * Gets the appointment associated with the reminder.
     */
    GetAppointment(): ASPxClientAppointment;
}
/**
 * Represents a client-side equivalent of the Reminder class.
 */
declare class ASPxClientReminder {
    /**
     * Gets the reminder's ID.
     */
    GetId(): string;
    /**
     * Returns the date and time when the reminder is alerted.
     */
    GetAlertTime(): Date;
    /**
     * Gets the time interval before the appointment's start time.
     */
    GetTimeBeforeStart(): Date;
    /**
     * Gets the custom field bound to the reminder. An object representing the custom field.
     * @param key A string object representing the custom field's ID.
     */
    GetCustomField(key: string): any;
    /**
     * Switches the reminder off for the associated appointment.
     */
    Dismiss(): void;
    /**
     * Delays the reminder's alert until the alert time has increased by the specified interval.
     * @param remindAfter An integer value that is the time interval.
     */
    Snooze(remindAfter: number): void;
}
/**
 * A method that will handle the ASPxClientSchedulerStorageControl.ReminderAlert event.
 * @param source The event source.
 * @param e An ASPxClientSchedulerStorageControl object that contains event data.
 */
interface ReminderAlertEventHandler<Sender> { (source: Sender, e: ASPxClientSchedulerStorageReminderAlertEventArgs): void; }
/**
 * Provides data for the ASPxClientSchedulerStorageControl.ReminderAlert event.
 */
declare class ASPxClientSchedulerStorageReminderAlertEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientSchedulerStorageReminderAlertEventArgs class.
     * @param completedNotifications An array of ASPxClientReminderAlertNotification objects.
     * @param previousNotifications An array of ASPxClientReminderAlertNotification objects.
     */
    constructor(completedNotifications: ASPxClientReminderAlertNotification[], previousNotifications: ASPxClientReminderAlertNotification[]);
    /**
     * Returns an array of currently triggered reminders.
     */
    alertNotifications: ASPxClientReminderAlertNotification[];
}
/**
 * Represents a client-side equivalent of the Resource class.
 */
declare class ASPxClientResource {
    /**
     * Gets the resource ID.
     */
    resourceId: string;
    /**
     * Returns the resource's caption.
     */
    caption: string;
    /**
     * Gets the resource's color.
     */
    color: string;
    /**
     * Gets the ID of the client appointment.
     */
    GetId(): string;
    /**
     * Returns the resource's caption.
     */
    GetCaption(): string;
    /**
     * Gets the resource's color.
     */
    GetColor(): string;
}
/**
 * Holds action types for the client-side ASPxClientScheduler.Refresh method.
 */
declare class ASPxClientSchedulerRefreshAction {
    /**
     * Gets the value of the action parameter which initiates a simple reload of the control.
     */
    None: number;
    /**
     * Gets the value of the action parameter which initiates reloading of the main ASPxScheduler control and its data-dependent satellites.
     */
    VisibleIntervalChanged: number;
    /**
     * Gets the value of the action parameter which initiates reloading of the main ASPxScheduler control and its satellite View controls.
     */
    ActiveViewTypeChanged: number;
}
/**
 * Contains methods allowing you to perform or cancel an operation.
 */
declare class ASPxClientAppointmentOperation {
    /**
     * Passes parameters to the corresponding callback function to accomplish the operation.
     */
    Apply(): void;
    /**
     * Cancels the operation.
     */
    Cancel(): void;
}
/**
 * Represents the client-side equivalent of the ASPxScheduler control.
 */
declare class ASPxClientScheduler extends ASPxClientControl {
    /**
     * Converts the specified object to the ASPxClientScheduler type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientScheduler;
    /**
     * Sets whether the resources with specified IDs are visible.
     * @param resourceIds An array of string values specifying the resources IDs.
     */
    SetVisibleResources(resourceIds: string[]): void;
    /**
     * Client-side scripting  method that gets the active View.
     */
    GetActiveViewType(): ASPxSchedulerViewType;
    /**
     * Client-side scripting  method to change the ASPxScheduler's active View.
     * @param value A ASPxSchedulerViewType enumeration value, representing a view type to set.
     */
    SetActiveViewType(value: ASPxSchedulerViewType): void;
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientScheduler>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientScheduler>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientScheduler.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientScheduler>>;
    /**
     * Sends a callback to the server and generates the server-side ASPxSchedulerDataWebControlBase.CustomCallback event, passing it the specified argument
     * @param parameter A string value that represents any information that needs to be sent to the server-side ASPxSchedulerDataWebControlBase.CustomCallback event.
     */
    PerformCallback(parameter: string): void;
    /**
     * Client-side scripting method which initiates a round trip to the server, so that the control will be reloaded using the specified refresh action.
     * @param refreshAction An ASPxClientSchedulerRefreshAction enumeration value, specifying the refresh action.
     */
    Refresh(refreshAction?: ASPxClientSchedulerRefreshAction): void;
    /**
     * Client-side function that returns the type of grouping applied to the appointments displayed in the scheduler.
     */
    GetGroupType(): ASPxSchedulerGroupType;
    /**
     * Client-side scripting method which raises the callback command to set the ASPxScheduler.GroupType.
     * @param value An ASPxSchedulerGroupType enumeration value, which specifies how appointments are grouped.
     */
    SetGroupType(value: ASPxSchedulerGroupType): void;
    /**
     * Client-side method that navigates the scheduler to the current system date.
     */
    GotoToday(): void;
    /**
     * Client-side scripting method which raises the SchedulerCallbackCommandId.GotoDate callback command.
     * @param date A DateTime value specifying the destination time.
     */
    GotoDate(date: Date): void;
    /**
     * Client-side function which slides the visible interval one time span back.
     */
    NavigateBackward(): void;
    /**
     * Client-side function which slides the visible interval one time span forward.
     */
    NavigateForward(): void;
    /**
     * Client-side method which raises the callback command to change the SchedulerOptionsBehaviorBase.ClientTimeZoneId of the scheduler.
     * @param timeZoneId A string, a time zone identifier which is valid for the System.TimeZoneInfo.Id property.
     */
    ChangeTimeZoneId(timeZoneId: string): void;
    /**
     * Displays a Selection ToolTip on a position given by the specified coordinates.
     * @param x An integer representing the X-coordinate.
     * @param y An integer representing the Y-coordinate.
     */
    ShowSelectionToolTip(x: number, y: number): void;
    /**
     * Client-side function that returns the time interval, selected in the scheduler.
     */
    GetSelectedInterval(): ASPxClientTimeInterval;
    /**
     * Selects time cells which encompass the specified time interval on the client side.
     * @param interval Specifies the time interval to select.
     * @param resourceId Specifies the resource ID to which the specified time interval belongs.
     * @param scrollToSelection true, to scroll the scheduler content to make the selection visible; otherwise, false.
     */
    SetSelection(interval: ASPxClientTimeInterval, resourceId?: string, scrollToSelection?: boolean): void;
    /**
     * Client-side function that returns the ResourceId of selected time cell's resource.
     */
    GetSelectedResource(): string;
    /**
     * Gets a collection of visible appointments.
     */
    GetVisibleAppointments(): ASPxClientAppointment[];
    /**
     * Client-side function that returns an appointment with the specified ID. An ASPxClientAppointment object, representing an appointment on the client.
     * @param id An appointment's identifier.
     */
    GetAppointmentById(id: string): ASPxClientAppointment;
    /**
     * Client-side function that returns the id's of selected appointments.
     */
    GetSelectedAppointmentIds(): string[];
    /**
     * Client-side function that removes the appointment specified by its client ID from a collection of selected appointments.
     * @param aptId An appointment's identifier.
     */
    DeselectAppointmentById(aptId: string): void;
    /**
     * Selects the appointment with the specified ID.
     * @param aptId A string value specifying the appointment ID.
     * @param scrollToSelection true, to scroll to the selected appointment; otherwise, false.
     */
    SelectAppointmentById(aptId: string, scrollToSelection?: boolean): void;
    /**
     * Enables obtaining appointment property values in a client-side script. Executes the callback command with the SchedulerCallbackCommandId.AppointmentData identifier. An array of strings containing string representations of appointment properties.
     * @param aptId A string, representing the appointment ID.
     * @param propertyNames An array of strings, representing the appointment properties to query.
     * @param onCallBack A handler of a function which will receive and process the property values.
     */
    GetAppointmentProperties(aptId: string, propertyNames: string[], onCallBack: any): string[];
    /**
     * Initiates a callback to retrieve and apply the values for the specified list of properties to the specified appointment, and transfer control to the specified function.
     * @param clientAppointment An ASPxClientAppointment object that is the client appointment for which the data is retrieved.
     * @param propertyNames An array of strings, that are the names of appointment properties to query.
     * @param onCallBack A handler of a function executed after a callback.
     */
    RefreshClientAppointmentProperties(clientAppointment: ASPxClientAppointment, propertyNames: string[], onCallBack: any): void;
    /**
     * Client-side function that invokes the editing form for the appointment specified by its client ID.
     * @param aptClientId A string, representing the appointment client identifier.
     */
    ShowAppointmentFormByClientId(aptClientId: string): void;
    /**
     * Client-side function that invokes the editing form for the appointment specified by its storage identifier.
     * @param aptServerId A string, representing the appointment identifier.
     */
    ShowAppointmentFormByServerId(aptServerId: string): void;
    /**
     * Sets the time of the day corresponding to the start of the topmost displayed time cell row.
     * @param duration An integer, representing the number of milliseconds passed since the start of the day.
     * @param viewType An ASPxSchedulerViewType enumeration member, representing the scheduler's View. It can be either 'Day' or 'WorkWeek'.
     */
    SetTopRowTime(duration: number, viewType?: ASPxSchedulerViewType): void;
    /**
     * Gets the time of the day corresponding to the start of the topmost displayed time cell row. An integer, representing the number of milliseconds passed since the start of the day.
     * @param viewType An ASPxSchedulerViewType enumeration member, representing the scheduler's View. It can be either "Day" or  "WorkWeek", otherwise the result is undefined.
     */
    GetTopRowTime(viewType?: ASPxSchedulerViewType): number;
    /**
     * Client-side scripting method which displays the Loading Panel.
     */
    ShowLoadingPanel(): void;
    /**
     * Client-side scripting method which hides the Loading Panel from view.
     */
    HideLoadingPanel(): void;
    /**
     * Client-side method that invokes the inplace editor form to create a new appointment.
     * @param start A date object, representing the start of the new appointment.
     * @param end A date object, representing the end of the new appointment.
     * @param resourceId An object representing the identifier of a resource associated with the new appointment.
     */
    ShowInplaceEditor(start: Date, end: Date, resourceId?: string): void;
    /**
     * Client-side scripting  method to insert the specified appointment.
     * @param apt An ASPxClientAppointment object representing the client-side appointment.
     */
    InsertAppointment(apt: ASPxClientAppointment): void;
    /**
     * Client-side scripting  method to update the specified appointment.
     * @param apt An ASPxClientAppointment object representing the client-side appointment.
     */
    UpdateAppointment(apt: ASPxClientAppointment): void;
    /**
     * Client-side scripting  method to delete the specified appointment.
     * @param apt An ASPxClientAppointment object representing the client-side appointment.
     */
    DeleteAppointment(apt: ASPxClientAppointment): void;
    /**
     * Client-side method that allows retrieving a collection of time intervals displayed by the ASPxScheduler.
     */
    GetVisibleIntervals(): ASPxClientTimeInterval[];
    /**
     * Changes the container that the ASPxScheduler tooltip belongs to.
     * @param container An object that serves as the new container for the pop-up menu.
     */
    ChangeToolTipContainer(container: any): void;
    /**
     * Changes the container that the ASPxScheduler pop-up menu belongs to.
     * @param container An object that serves as the new container for the pop-up menu.
     */
    ChangePopupMenuContainer(container: any): void;
    /**
     * Returns focus to the form if the ASPxScheduler control is not visible when the reminder fires.
     * @param container A DIV object that is located in such a way that it is visible on the page in situations when the ASPxScheduler control is hidden.
     */
    ChangeFormContainer(container: any): void;
    /**
     * Client-side scripting method that saves appointment modifications and closes the form.
     */
    AppointmentFormSave(): void;
    /**
     * Client-side scripting method that deletes the appointment being edited.
     */
    AppointmentFormDelete(): void;
    /**
     * Client-side scripting method that cancels changes and closes the appointment editing form.
     */
    AppointmentFormCancel(): void;
    /**
     * Client-side scripting method that navigates the scheduler to the date selected in the GotoDate form and closes the form.
     */
    GoToDateFormApply(): void;
    /**
     * Client-side scripting method that cancels changes and closes the GotoDate form.
     */
    GoToDateFormCancel(): void;
    /**
     * Client-side scripting method that cancels changes and closes the form.
     */
    InplaceEditFormSave(): void;
    /**
     * Client-side scripting method that cancels changes and closes the form.
     */
    InplaceEditFormCancel(): void;
    /**
     * Client-side scripting method that invokes the appointment editing form for the appointment being edited in the inplace editor.
     */
    InplaceEditFormShowMore(): void;
    /**
     * Client-side scripting method that closes the Reminder form.
     */
    ReminderFormCancel(): void;
    /**
     * Client-side scripting method that calls the ReminderBase.Dismiss method for the selected reminder.
     */
    ReminderFormDismiss(): void;
    /**
     * Client-side scripting method that dismisses all reminders shown in the Reminder form.
     */
    ReminderFormDismissAll(): void;
    /**
     * Client-side scripting method that changes the alert time for the selected reminder to the specified interval.
     */
    ReminderFormSnooze(): void;
    /**
     * Specifies whether the toolbar is visible.
     * @param visible true, to make the toolbar visible; otherwise, false.
     */
    SetToolbarVisible(visible: boolean): void;
    /**
     * Returns a value specifying whether a toolbar is displayed.
     */
    GetToolbarVisible(): boolean;
    /**
     * Specifies whether the Resource Navigator is visible.
     * @param visible true, to make the Resource Navigator visible; otherwise, false.
     */
    SetResourceNavigatorVisible(visible: boolean): void;
    /**
     * Returns a value specifying whether the Resource Navigator is displayed.
     */
    GetResourceNavigatorVisible(): boolean;
    /**
     * Returns the value specifying the Scheduler's scrollable area height.
     */
    GetScrollAreaHeight(): number;
    /**
     * Specifies the All-Day Area area height.
     * @param height An integer value specifying the all-day area height.
     */
    SetAllDayAreaHeight(height: number): void;
    /**
     * Gets the All-Day Area area height.
     */
    GetAllDayAreaHeight(): number;
    /**
     * Sets the Scheduler's height.
     * @param height An integer value specifying the scheduler's height.
     */
    SetHeight(height: number): void;
    /**
     * Returns the floating action button's object.
     */
    GetFloatingActionButton(): ASPxClientFloatingActionButton;
    /**
     * Occurs on the client side when the Scheduler control is about to change its active view.
     */
    ActiveViewChanging: ASPxClientEvent<ActiveViewChangingEventHandler<ASPxClientScheduler>>;
    /**
     * Client-side event. Occurs after the active view of the ASPxScheduler has been changed.
     */
    ActiveViewChanged: ASPxClientEvent<ASPxClientEventHandler<ASPxClientScheduler>>;
    /**
     * Occurs when an end-user presses a keyboard shortcut.
     */
    Shortcut: ASPxClientEvent<ShortcutEventHandler<ASPxClientScheduler>>;
    /**
     * Occurs when the end-user clicks an appointment.
     */
    AppointmentClick: ASPxClientEvent<AppointmentClickEventHandler<ASPxClientScheduler>>;
    /**
     * Occurs when the end-user double clicks on an appointment.
     */
    AppointmentDoubleClick: ASPxClientEvent<AppointmentClickEventHandler<ASPxClientScheduler>>;
    /**
     * Occurs when an end-user clicks a time cell.
     */
    CellClick: ASPxClientEvent<CellClickEventHandler<ASPxClientScheduler>>;
    /**
     * Occurs when and end-user double-clicks a time cell.
     */
    CellDoubleClick: ASPxClientEvent<CellClickEventHandler<ASPxClientScheduler>>;
    /**
     * Occurs on the client side when the user selects an appointment.
     */
    AppointmentsSelectionChanged: ASPxClientEvent<AppointmentsSelectionEventHandler<ASPxClientScheduler>>;
    /**
     * Fires on the client side when the time cell selection is changed.
     */
    SelectionChanged: ASPxClientEvent<ASPxClientEventHandler<ASPxClientScheduler>>;
    /**
     * Occurs on the client side when the time cell selection is about to change.
     */
    SelectionChanging: ASPxClientEvent<ASPxClientEventHandler<ASPxClientScheduler>>;
    /**
     * Fires on the client side when the  time interval of the scheduling area is changed.
     */
    VisibleIntervalChanged: ASPxClientEvent<ASPxClientEventHandler<ASPxClientScheduler>>;
    /**
     * Occurs when one of  More Buttons is clicked.
     */
    MoreButtonClicked: ASPxClientEvent<MoreButtonClickedEventHandler<ASPxClientScheduler>>;
    /**
     * Client-side event that occurs when a popup menu item is clicked.
     */
    MenuItemClicked: ASPxClientEvent<MenuItemClickedEventHandler<ASPxClientScheduler>>;
    /**
     * Client-side event that occurs after an appointment has been dragged and dropped.
     */
    AppointmentDrop: ASPxClientEvent<AppointmentDropEventHandler<ASPxClientScheduler>>;
    /**
     * A client-side event that occurs when an appointment is being dragged.
     */
    AppointmentDrag: ASPxClientEvent<AppointmentDragEventHandler<ASPxClientScheduler>>;
    /**
     * A client-side event that occurs when an appointment is being resized.
     */
    AppointmentResizing: ASPxClientEvent<AppointmentResizingEventHandler<ASPxClientScheduler>>;
    /**
     * Client-side event that occurs when an appointment is resized.
     */
    AppointmentResize: ASPxClientEvent<AppointmentResizeEventHandler<ASPxClientScheduler>>;
    /**
     * Client-side event that fires before an appointment is deleted.
     */
    AppointmentDeleting: ASPxClientEvent<ASPxClientAppointmentDeletingEventHandler<ASPxClientScheduler>>;
    /**
     * Fires on the client side before the appointment tooltip is shown.
     */
    AppointmentToolTipShowing: ASPxClientEvent<ASPxClientAppointmentToolTipShowingEventHandler<ASPxClientScheduler>>;
}
/**
 * Represents a client-side equivalent of the SchedulerViewType object.
 */
declare class ASPxSchedulerViewType {
    /**
     * Gets a string representation equivalent of SchedulerViewType.Day enumeration for use in client scripts.
     */
    Day: string;
    /**
     * Gets a string representation equivalent of SchedulerViewType.WorkWeek enumeration for use in client scripts.
     */
    WorkWeek: string;
    /**
     * Gets a string representation equivalent of SchedulerViewType.Week enumeration for use in client scripts.
     */
    Week: string;
    /**
     * Gets a string representation equivalent of SchedulerViewType.Month enumeration for use in client scripts.
     */
    Month: string;
    /**
     * Gets a string representation equivalent of SchedulerViewType.Timeline enumeration for use in client scripts.
     */
    Timeline: string;
    /**
     * Gets a string representation equivalent of SchedulerViewType.FullWeek enumeration for use in client scripts.
     */
    FullWeek: string;
    /**
     * Gets a string representation equivalent to the SchedulerViewType.Agenda enumeration for use in client scripts.
     */
    Agenda: string;
}
/**
 * Represents a client-side equivalent of the SchedulerGroupType enumeration.
 */
declare class ASPxSchedulerGroupType {
    /**
     * Gets a string representation equivalent of SchedulerGroupType.None enumeration for use in client scripts.
     */
    None: string;
    /**
     * Gets a string representation equivalent of SchedulerGroupType.Date enumeration for use in client scripts.
     */
    Date: string;
    /**
     * Gets a string representation equivalent of SchedulerGroupType.Resource enumeration for use in client scripts.
     */
    Resource: string;
}
/**
 * A method that will handle the ASPxClientScheduler.AppointmentDeleting event.
 * @param source The event sender (typically an ASPxClientScheduler control).
 * @param e A ASPxClientAppointmentDeletingEventArgs object that contains event data.
 */
interface ASPxClientAppointmentDeletingEventHandler<Sender> { (source: Sender, e: ASPxClientAppointmentDeletingEventArgs): void; }
/**
 * Provides data for the ASPxClientScheduler.AppointmentDeleting event.
 */
declare class ASPxClientAppointmentDeletingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Creates an ASPxClientAppointmentDeletingEventArgs instance with the specified client appointments.
     * @param appointments An array of ASPxClientAppointment objects.
     */
    constructor(appointments: ASPxClientAppointment[]);
    /**
     * Gets client IDs of the appointments to be removed.
     */
    appointmentIds: string[];
}
/**
 * A method that will handle the ASPxClientScheduler.AppointmentClick event.
 * @param source The event sender (typically an ASPxClientScheduler control).
 * @param e A AppointmentClickEventArgs object that contains event data.
 */
interface AppointmentClickEventHandler<Sender> { (source: Sender, e: AppointmentClickEventArgs): void; }
/**
 * Provides data for the ASPxClientScheduler.AppointmentClick and the ASPxClientScheduler.AppointmentDoubleClick events.
 */
declare class AppointmentClickEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the class.
     * @param appointmentId Specifies an appointment ID.
     * @param sourceEvent Specifies an event source.
     */
    constructor(appointmentId: string, sourceEvent: any);
    /**
     * Gets the client appointment ID for the appointment being clicked.
     */
    appointmentId: string;
    /**
     * Gets the HTML element that the event was triggered on.
     */
    htmlElement: any;
    /**
     * Gets or sets whether an event is handled, and that default actions are not required.
     */
    handled: boolean;
}
/**
 * A method that will handle the ASPxClientScheduler.AppointmentsSelectionChanged event.
 * @param source The ASPxScheduler control which fires the event.
 * @param e A AppointmentsSelectionEventArgs object that contains event data.
 */
interface AppointmentsSelectionEventHandler<Sender> { (source: Sender, e: AppointmentsSelectionEventArgs): void; }
/**
 * Provides data for the ASPxClientScheduler.AppointmentsSelectionChanged event.
 */
declare class AppointmentsSelectionEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the class.
     * @param appointmentIds Represents an array of appointments' IDs.
     */
    constructor(appointmentIds: string[]);
    /**
     * Gets identifiers of the selected appointments.
     */
    appointmentIds: string[];
}
/**
 * A method that will handle the ASPxClientScheduler.Shortcut event.
 * @param source The event sender (typically an ASPxClientScheduler control).
 * @param e A ShortcutEventArgs object that contains event data.
 */
interface ShortcutEventHandler<Sender> { (source: Sender, e: ShortcutEventArgs): void; }
/**
 * Provides data for the client-side ASPxClientScheduler.Shortcut event.
 */
declare class ShortcutEventArgs extends ASPxClientEventArgs {
    /**
     * Initialize a new instance of the class.
     * @param commandName Specifies the command name.
     * @param htmlEvent Specifies the html event.
     */
    constructor(commandName: string, htmlEvent: any);
    /**
     * Gets the name of a command associated with the keyboard shortcut.
     */
    commandName: string;
    /**
     * Gets an object containing information about a keyboard shortcut event.
     */
    htmlEvent: any;
    /**
     * Gets or sets whether an event is handled, and that default actions are not required.
     */
    handled: boolean;
}
/**
 * A method that will handle the ASPxClientScheduler.ActiveViewChanging event.
 * @param source The ASPxClientScheduler control which fires the event.
 * @param e An ActiveViewChangingEventArgs object that contains event data
 */
interface ActiveViewChangingEventHandler<Sender> { (source: Sender, e: ActiveViewChangingEventArgs): void; }
/**
 * Provides data for the client-side ASPxClientScheduler.ActiveViewChanging event.
 */
declare class ActiveViewChangingEventArgs extends ASPxClientEventArgs {
    /**
     * Provides data for the client-side ActiveViewChanging event.
     * @param oldView Represents the new View used by the Scheduler to show its data.
     * @param newView Represents the previous View used by the Scheduler to show its data.
     */
    constructor(oldView: ASPxSchedulerViewType, newView: ASPxSchedulerViewType);
    /**
     * Gets the value of the ASPxScheduler.ActiveView property before modification.
     */
    oldView: ASPxSchedulerViewType;
    /**
     * Gets the new value of the ASPxScheduler.ActiveView property.
     */
    newView: ASPxSchedulerViewType;
    /**
     * Gets or sets whether the change of active view should be canceled.
     */
    cancel: boolean;
}
/**
 * A method that will handle ASPxClientScheduler.MoreButtonClicked event.
 * @param source The ASPxClientScheduler control which fires the event.
 * @param e A MoreButtonClickedEventArgs object that contains event data.
 */
interface MoreButtonClickedEventHandler<Sender> { (source: Sender, e: MoreButtonClickedEventArgs): void; }
/**
 * Provides data for the ASPxClientScheduler.MoreButtonClicked client-side event.
 */
declare class MoreButtonClickedEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Initializes a new instance of MoreButtonClickedEventArgs class with the specified parameters.
     * @param dateTime A DateTime value which corresponds to the top visible time of the target view.
     * @param resource A Resource associated with the time cell where the "More" button is located.
     */
    constructor(dateTime: Date, resource: string);
    /**
     * Gets the Start or End values of the target appointment.
     */
    targetDateTime: Date;
    /**
     * Gets the time interval of the cell where the button is located.
     */
    interval: ASPxClientTimeInterval;
    /**
     * Gets the resource identifier associated with the cell where the button is located.
     */
    resource: string;
    /**
     * Gets or sets whether an event is handled. If it is handled, default actions are not required.
     */
    handled: boolean;
}
/**
 * A method that will handle the ASPxClientScheduler.MenuItemClicked event.
 * @param source The ASPxClientScheduler control which fires the event.
 * @param e A MenuItemClickedEventArgs object that contains event data.
 */
interface MenuItemClickedEventHandler<Sender> { (source: Sender, e: MenuItemClickedEventArgs): void; }
/**
 * Provides data for the ASPxClientScheduler.MenuItemClicked event.
 */
declare class MenuItemClickedEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the MenuItemClickedEventArgs class with the specified menu item name.
     * @param itemName A string representing the name of the menu item.
     */
    constructor(itemName: string);
    /**
     * Gets the name of the menu item which is clicked.
     */
    itemName: string;
    /**
     * Gets or sets whether an event is handled, and that default actions are not required.
     */
    handled: boolean;
}
/**
 * A method that will handle the ASPxClientScheduler.AppointmentDrag event.
 * @param source The event sender (typically an ASPxClientScheduler object).
 * @param e A ASPxClientAppointmentDragEventArgs object that contains event data.
 */
interface AppointmentDragEventHandler<Sender> { (source: Sender, e: ASPxClientAppointmentDragEventArgs): void; }
/**
 * Provides data for the ASPxClientScheduler.AppointmentDrag event.
 */
declare class ASPxClientAppointmentDragEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientAppointmentDragEventArgs class.
     * @param mouseEvent A mouse event object related to the drag operation.
     * @param dragInformation An array of ASPxClientAppointmentDragInfo objects storing information about dragged appointments.
     */
    constructor(mouseEvent: any, dragInformation: ASPxClientAppointmentDragInfo[]);
    /**
     * Specifies whether or not appointments can be dropped into the intervals over which they are currently dragged.
     */
    allow: boolean;
    /**
     * Gets a mouse event object related to the current drag operation.
     */
    mouseEvent: any;
    /**
     * Provides information about dragged appointments.
     */
    dragInformation: ASPxClientAppointmentDragInfo[];
}
/**
 * A method that will handle the ASPxClientScheduler.AppointmentDrop event.
 * @param source The event sender (typically an ASPxClientScheduler object).
 * @param e A ASPxClientAppointmentDropEventArgs object that contains event data.
 */
interface AppointmentDropEventHandler<Sender> { (source: Sender, e: ASPxClientAppointmentDropEventArgs): void; }
/**
 * Provides data for the ASPxClientScheduler.AppointmentDrop event.
 */
declare class ASPxClientAppointmentDropEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientAppointmentDropEventArgs class.
     * @param operation An ASPxClientAppointmentOperation object providing methods to perform or cancel the drag operation.
     * @param dragInformation An array of ASPxClientAppointmentDragInfo objects storing information about dropped appointments.
     */
    constructor(operation: ASPxClientAppointmentOperation, dragInformation: ASPxClientAppointmentDragInfo[]);
    /**
     * Gets or sets a value that specifies whether the event is handled, and the default processing is not required.
     */
    handled: boolean;
    /**
     * Provides access to an object that enables you to choose an operation to perform.
     */
    operation: ASPxClientAppointmentOperation;
    /**
     * Provides information about dropped appointments.
     */
    dragInformation: ASPxClientAppointmentDragInfo[];
}
/**
 * A method that will handle the ASPxClientScheduler.AppointmentResize event.
 * @param source The event sender (typically an ASPxClientScheduler control).
 * @param e A ASPxClientAppointmentResizeEventArgs object that contains event data.
 */
interface AppointmentResizeEventHandler<Sender> { (source: Sender, e: ASPxClientAppointmentResizeEventArgs): void; }
/**
 * Provides data for the ASPxClientScheduler.AppointmentResize event.
 */
declare class ASPxClientAppointmentResizeEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientAppointmentResizeEventArgs class.
     * @param operation An ASPxClientAppointmentOperation object providing methods to perform or cancel the resize operation.
     * @param appointmentId A string containing an appointment identifier.
     * @param oldInterval An  object specifying the appointment's interval before the resize operation.
     * @param newInterval An  object specifying the appointment's interval after the resize operation.
     */
    constructor(operation: ASPxClientAppointmentOperation, appointmentId: string, oldInterval: ASPxClientTimeInterval, newInterval: ASPxClientTimeInterval);
    /**
     * Gets or sets whether default event processing is required.
     */
    handled: boolean;
    /**
     * Provides access to an object that enables you to choose an operation to perform.
     */
    operation: ASPxClientAppointmentOperation;
    /**
     * Gets the resized appointment's identifier.
     */
    appointmentId: string;
    /**
     * Gets the appointment's interval before resizing.
     */
    oldInterval: ASPxClientTimeInterval;
    /**
     * Gets the appointment's interval after resizing.
     */
    newInterval: ASPxClientTimeInterval;
}
/**
 * A method that will handle the ASPxClientScheduler.AppointmentResizing event.
 * @param source The event sender (typically an ASPxClientScheduler object).
 * @param e A ASPxClientAppointmentResizingEventArgs object that contains event data.
 */
interface AppointmentResizingEventHandler<Sender> { (source: Sender, e: ASPxClientAppointmentResizingEventArgs): void; }
/**
 * Provides data for the ASPxClientScheduler.AppointmentResizing event.
 */
declare class ASPxClientAppointmentResizingEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientAppointmentResizingEventArgs class.
     * @param mouseEvent A mouse event object related to the resizing operation.
     * @param appointmentId A string containing an appointment identifier.
     * @param oldInterval An  object specifying the appointment's interval before the resize operation.
     * @param newInterval An  object specifying the appointment's interval after the resize operation.
     */
    constructor(mouseEvent: any, appointmentId: string, oldInterval: ASPxClientTimeInterval, newInterval: ASPxClientTimeInterval);
    /**
     * Specifies whether or not an appointment can be resized to the new time interval.
     */
    allow: boolean;
    /**
     * Gets a mouse event object related to the current appointment resizing operation.
     */
    mouseEvent: any;
    /**
     * Gets the resized appointment's identifier.
     */
    appointmentId: string;
    /**
     * Gets the appointment's interval before resizing.
     */
    oldInterval: ASPxClientTimeInterval;
    /**
     * Gets the appointment's interval after resizing.
     */
    newInterval: ASPxClientTimeInterval;
}
/**
 * Stores information about an appointment drag operation.
 */
declare class ASPxClientAppointmentDragInfo {
    /**
     * Initializes a new instance of the ASPxClientAppointmentDragInfo class.
     * @param appointmentId A string containing an appointment identifier.
     * @param oldInterval An ASPxClientTimeInterval object specifying the appointment's interval before the drag operation.
     * @param oldResources A array of strings containing identifiers of resources that were associated with the appointment before the drag operation.
     * @param newInterval An ASPxClientTimeInterval object specifying the appointment's interval after the drag operation.
     * @param newResources A array of strings containing identifiers of resources associated with the appointment after the drag operation.
     */
    constructor(appointmentId: string, oldInterval: ASPxClientTimeInterval, oldResources: string[], newInterval: ASPxClientTimeInterval, newResources: string[]);
    /**
     * Gets the dragged appointment's identifier.
     */
    appointmentId: string;
    /**
     * Gets the appointment's interval before the drag operation.
     */
    oldInterval: ASPxClientTimeInterval;
    /**
     * Gets resources that were associated with the appointment before the drag operation.
     */
    oldResources: string[];
    /**
     * Gets the appointment's interval after the drag operation.
     */
    newInterval: ASPxClientTimeInterval;
    /**
     * Gets resources associated with the appointment after the drag operation.
     */
    newResources: string[];
}
/**
 * A method that will handle the ASPxClientScheduler.CellClick event.
 * @param source The event source.
 * @param e A ASPxClientSchedulerCellClickEventArgs object that contains event data
 */
interface CellClickEventHandler<Sender> { (source: Sender, e: ASPxClientSchedulerCellClickEventArgs): void; }
/**
 * Provides data for the ASPxClientScheduler.CellClick event.
 */
declare class ASPxClientSchedulerCellClickEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the HTML element that the event was triggered on.
     */
    htmlElement: any;
    /**
     * Gets the time interval of the time cells related to the event.
     */
    interval: ASPxClientTimeInterval;
    /**
     * Gets the resource identifier associated with the cell related to the event.
     */
    resource: string;
}
/**
 * A method that will handle the corresponding client event.
 * @param source The event source.
 * @param e An ASPxClientAppointmentToolTipShowingEventArgs object that contains event data.
 */
interface ASPxClientAppointmentToolTipShowingEventHandler<Sender> { (source: Sender, e: ASPxClientAppointmentToolTipShowingEventArgs): void; }
/**
 * Provides data for the ASPxClientScheduler.AppointmentToolTipShowing event.
 */
declare class ASPxClientAppointmentToolTipShowingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientAppointmentToolTipShowingEventArgs class.
     * @param appointment An ASPxClientAppointment object representing the appointment.
     */
    constructor(appointment: ASPxClientAppointment);
    /**
     * Gets the appointment.
     */
    appointment: ASPxClientAppointment;
}
/**
 * Exposes static methods that simplify working with JavaScript DateTime values.
 */
declare class ASPxSchedulerDateTimeHelper {
    /**
     * Returns the date part of the specified DateTime value. A DateTime object containing a date.
     * @param date A DateTime object from which to extract the date.
     */
    static TruncToDate(date: Date): Date;
    /**
     * Returns the day time part of the specified DateTime value. A TimeSpan object containing the day time.
     * @param date A DateTime object from which to extract the day time.
     */
    static ToDayTime(date: Date): any;
    /**
     * Adds the specified number of days to a DateTime object and returns the result. A DateTime object.
     * @param date A DateTime object to which to add days.
     * @param dayCount The number of days to add.
     */
    static AddDays(date: Date, dayCount: number): Date;
    /**
     * Adds the specified timespan to a DateTime object and returns the result. A DateTime object.
     * @param date A DateTime object to which to add a timespan.
     * @param timeSpan A TimeSpan object specifying the timespan to add.
     */
    static AddTimeSpan(date: Date, timeSpan: any): Date;
    /**
     * Rounds a DateTime value up to the nearest interval. A DateTime object containing the rounded value.
     * @param date A DateTime object containing a value to round.
     * @param spanInMs A TimeSpan object specifying an interval to which to round.
     */
    static CeilDateTime(date: Date, spanInMs: any): Date;
}
/**
 * Represents the client-side equivalent of the TimeInterval class.
 */
declare class ASPxClientTimeInterval {
    /**
     * Initializes a new instance of the ASPxClientTimeInterval class with the specified start time and duration.
     * @param start A DateTime object, representing the beginning of the period.
     * @param duration A TimeSpan structure, representing a time interval.
     */
    constructor(start: Date, duration: any);
    /**
     * Gets a value indicating if the time interval is All-Day.
     */
    GetAllDay(): boolean;
    /**
     * Sets a value specifying if the time interval is All-Day.
     * @param allDayValue true, if this is an all-day time interval; otherwise, false.
     */
    SetAllDay(allDayValue: boolean): void;
    /**
     * Client-side function that returns the start time of the interval.
     */
    GetStart(): Date;
    /**
     * Client-side function that returns the duration of the specified time interval.
     */
    GetDuration(): number;
    /**
     * Client-side function that returns the end time of the interval.
     */
    GetEnd(): Date;
    /**
     * Client-side function that sets the start time of the interval.
     * @param value A DateTime value, representing the beginning of the interval.
     */
    SetStart(value: Date): void;
    /**
     * Client-side function that returns the duration of the specified time interval.
     * @param value A TimeSpan  object, representing the duration of the time period.
     */
    SetDuration(value: any): void;
    /**
     * Client-side function that sets the end time of the interval.
     * @param value A DateTime value, representing the end of the interval.
     */
    SetEnd(value: Date): void;
    /**
     * Determines whether the specified object is equal to the current ASPxClientTimeInterval instance. true if the specified object is equal to the current ASPxClientTimeInterval instance; otherwise false.
     * @param interval The object to compare with the current object.
     */
    Equals(interval: ASPxClientTimeInterval): boolean;
    /**
     * Checks if the current time interval intersects with the specified time interval. true, if the two time intervals intersect; otherwise, false.
     * @param interval A ASPxClientTimeInterval object which represents the time interval to be checked.
     */
    IntersectsWith(interval: ASPxClientTimeInterval): boolean;
    /**
     * Checks if the current time interval intersects with the specified time interval. The boundaries of the time intervals are excluded from the check. true, if the two time intervals intersect; otherwise, false.
     * @param interval A ASPxClientTimeInterval object which represents the time interval to be checked.
     */
    IntersectsWithExcludingBounds(interval: ASPxClientTimeInterval): boolean;
    /**
     * Client-side function that determines whether the specified interval is contained within the current one. true if the specified interval is located within the current one; otherwise, false.
     * @param interval An ASPxClientTimeInterval object, representing the time interval to check.
     */
    Contains(interval: ASPxClientTimeInterval): boolean;
    /**
     * Calculates the time interval duration. An integer value specifying the interval duration in milliseconds.
     * @param start A DateTime value that specifies the start date time value.
     * @param end A DateTime value that specifies the end date time value.
     */
    static CalculateDuration(start: Date, end: Date): number;
}
/**
 * A client point object.
 */
declare class ASPxClientPoint {
    /**
     * Initializes a new instance of the ASPxClientPoint object. For internal use only.
     * @param x An integer value specifying the x-coordinate of the point.
     * @param y An integer value specifying the y-coordinate of the point.
     */
    constructor(x: number, y: number);
    /**
     * Gets the point's X-coordinate.
     */
    GetX(): number;
    /**
     * Gets the point's Y-coordinate.
     */
    GetY(): number;
}
/**
 * A client rectangle object.
 */
declare class ASPxClientRect {
    /**
     * Initializes a new instance of the ASPxClientRect object. For internal use only.
     * @param x An integer value specifying the x-coordinate of the upper-left corner of the rectangle.
     * @param y An integer value specifying the y-coordinate of the upper-left corner of the rectangle.
     * @param width An integer value specifying the rectangle width.
     * @param height An integer value specifying the rectangle height.
     */
    constructor(x: number, y: number, width: number, height: number);
    /**
     * Gets the X-coordinate of the rectangle's left edge.
     */
    GetLeft(): number;
    /**
     * Gets the X-coordinate of the rectangle's right edge.
     */
    GetRight(): number;
    /**
     * Gets the Y-coordinate of the rectangle's top edge.
     */
    GetTop(): number;
    /**
     * Gets the Y-coordinate of the rectangle's bottom edge.
     */
    GetBottom(): number;
    /**
     * Gets the rectangle's width.
     */
    GetWidth(): number;
    /**
     * Gets the rectangle's height.
     */
    GetHeight(): number;
}
/**
 * Represents a client-side equivalent of the WeekDaysCheckEdit control.
 */
declare class ASPxClientWeekDaysCheckEdit extends ASPxClientControl {
    /**
     * Gets the selection state of the week day check boxes.
     */
    GetValue(): ASPxClientWeekDays;
    /**
     * Gets the selection state of the week day check boxes.
     * @param value An ASPxClientWeekDays object specifying the selection state of the week day check boxes.
     */
    SetValue(value: ASPxClientWeekDays): void;
}
/**
 * Represents a client-side equivalent of the RecurrenceRangeControl.
 */
declare class ASPxClientRecurrenceRangeControl extends ASPxClientControl {
    /**
     * Gets the type of the recurrence range.
     */
    GetRange(): ASPxClientRecurrenceRange;
    /**
     * Gets how many times the appointment occurs.
     */
    GetOccurrenceCount(): number;
    /**
     * Gets the recurrence end date.
     */
    GetEndDate(): Date;
    /**
     * Sets the type of the recurrence range.
     * @param range An ASPxClientRecurrenceRangeenumeration value that specifies the recurrence range type.
     */
    SetRange(range: ASPxClientRecurrenceRange): void;
    /**
     * Sets how many times the appointment occurs.
     * @param occurrenceCount An integer value that specifies how many times the appointment occurs.
     */
    SetOccurrenceCount(occurrenceCount: number): void;
    /**
     * Sets the recurrence end date.
     * @param date A JavaScript Date object that specifies the end date for the recurrence.
     */
    SetEndDate(date: Date): void;
}
/**
 * A base for client equivalents of recurrence controls available in the XtraScheduler library.
 */
declare class ASPxClientRecurrenceControlBase extends ASPxClientControl {
    /**
     * Returns an object providing access to the ASPxClientRecurrenceControlBase control's editor values.
     */
    CreateValueAccessor(): DefaultRecurrenceRuleValuesAccessor;
    /**
     * Updates values of editors displayed by the ASPxClientRecurrenceControlBase control.
     * @param recurrenceInfo An ASPxClientRecurrenceInfo object containing new editor values.
     */
    Update(recurrenceInfo: ASPxClientRecurrenceInfo): void;
}
/**
 * Represents a client-side equivalent of the DailyRecurrenceControl - a control for specifying the daily recurrence.
 */
declare class ASPxClientDailyRecurrenceControl extends ASPxClientRecurrenceControlBase {
    /**
     * Returns an object providing access to the ASPxClientDailyRecurrenceControl's editor values.
     */
    CreateValueAccessor(): DefaultRecurrenceRuleValuesAccessor;
    /**
     * Updates values of editors displayed by the ASPxClientDailyRecurrenceControl.
     * @param recurrenceInfo An ASPxClientRecurrenceInfo object containing new editor values.
     */
    Update(recurrenceInfo: ASPxClientRecurrenceInfo): void;
}
/**
 * Represents a client-side equivalent of the WeeklyRecurrenceControl.
 */
declare class ASPxClientWeeklyRecurrenceControl extends ASPxClientRecurrenceControlBase {
    /**
     * Returns an object providing access to the ASPxClientWeeklyRecurrenceControl's editor values.
     */
    CreateValueAccessor(): DefaultRecurrenceRuleValuesAccessor;
    /**
     * Updates values of editors displayed by the ASPxClientWeeklyRecurrenceControl.
     * @param recurrenceInfo An ASPxClientRecurrenceInfo object containing new editor values.
     */
    Update(recurrenceInfo: ASPxClientRecurrenceInfo): void;
}
/**
 * Represents a client-side equivalent of the MonthlyRecurrenceControl.
 */
declare class ASPxClientMonthlyRecurrenceControl extends ASPxClientRecurrenceControlBase {
    /**
     * Returns an object providing access to the ASPxClientMonthlyRecurrenceControl's editor values.
     */
    CreateValueAccessor(): DefaultRecurrenceRuleValuesAccessor;
    /**
     * Updates values of editors displayed by the ASPxClientMonthlyRecurrenceControll.
     * @param recurrenceInfo An ASPxClientRecurrenceInfo object containing new editor values.
     */
    Update(recurrenceInfo: ASPxClientRecurrenceInfo): void;
}
/**
 * Represents a client-side equivalent of the YearlyRecurrenceControl.
 */
declare class ASPxClientYearlyRecurrenceControl extends ASPxClientRecurrenceControlBase {
    /**
     * Returns an object providing access to the ASPxClientYearlyRecurrenceControl's editor values.
     */
    CreateValueAccessor(): DefaultRecurrenceRuleValuesAccessor;
    /**
     * Updates values of editors displayed by the ASPxClientYearlyRecurrenceControl.
     * @param recurrenceInfo An ASPxClientRecurrenceInfo object containing new editor values.
     */
    Update(recurrenceInfo: ASPxClientRecurrenceInfo): void;
}
/**
 * An object providing access to an ASPxClientRecurrenceControlBase control's editor values.
 */
declare class DefaultRecurrenceRuleValuesAccessor {
    /**
     * Initializes a new instance of the DefaultRecurrenceRuleValuesAccessor object. For internal use only.
     */
    constructor(recurrenceControl: ASPxClientRecurrenceControlBase);
    /**
     * Get the frequency with which the appointment occurs with respect to the appointment's recurrence type.
     */
    GetPeriodicity(): number;
    /**
     * Gets the number of the month's day in which the appointment is scheduled.
     */
    GetDayNumber(): number;
    /**
     * Gets or sets the month's number.
     */
    GetMonth(): number;
    /**
     * Gets the days of the week on which a weekly recurrent appointment is scheduled.
     */
    GetWeekDays(): ASPxClientWeekDays;
    /**
     * Gets the number of the week in a month when an appointment is scheduled.
     */
    GetWeekOfMonth(): ASPxClientWeekOfMonth;
}
/**
 * An object providing access to an ASPxClientDailyRecurrenceControl's editor values.
 */
declare class DailyRecurrenceValuesAccessor extends DefaultRecurrenceRuleValuesAccessor {
    /**
     * Initializes a new instance of the DailyRecurrenceValuesAccessor object. For internal use only.
     * @param recurrenceControl A ASPxClientRecurrenceControlBase object specifying the required recurrence control.
     */
    constructor(recurrenceControl: ASPxClientRecurrenceControlBase);
    /**
     * Gets the number of days between appointment occurrences.
     */
    GetPeriodicity(): number;
    /**
     * Gets the days of the week to which a daily recurrent appointment is scheduled.
     */
    GetWeekDays(): ASPxClientWeekDays;
}
/**
 * An object providing access to an ASPxClientWeeklyRecurrenceControl's editor values.
 */
declare class WeeklyRecurrenceValuesAccessor extends DefaultRecurrenceRuleValuesAccessor {
    /**
     * Initializes a new instance of the WeeklyRecurrenceValuesAccessor object. For internal use only.
     * @param recurrenceControl A ASPxClientRecurrenceControlBase object specifying the required recurrence control.
     */
    constructor(recurrenceControl: ASPxClientRecurrenceControlBase);
    /**
     * Gets the number of weeks between appointment occurrences.
     */
    GetPeriodicity(): number;
    /**
     * Gets the days of the week on which a weekly recurrent appointment is scheduled.
     */
    GetWeekDays(): ASPxClientWeekDays;
}
/**
 * An object providing access to an ASPxClientMonthlyRecurrenceControl's editor values.
 */
declare class MonthlyRecurrenceValuesAccessor extends DefaultRecurrenceRuleValuesAccessor {
    /**
     * Initializes a new instance of the MonthlyRecurrenceValuesAccessor object. For internal use only.
     * @param recurrenceControl A ASPxClientRecurrenceControlBase object specifying the required recurrence control.
     */
    constructor(recurrenceControl: ASPxClientRecurrenceControlBase);
    /**
     * Gets the day of the month on which the appointment is scheduled.
     */
    GetDayNumber(): number;
    /**
     * Gets the number of months between appointment occurrences.
     */
    GetPeriodicity(): number;
    /**
     * Gets the days of the week on which a monthly recurrent appointment is scheduled.
     */
    GetWeekDays(): ASPxClientWeekDays;
    /**
     * Gets the number of the week in a month when an appointment is scheduled.
     */
    GetWeekOfMonth(): ASPxClientWeekOfMonth;
}
/**
 * An object providing access to an ASPxClientYearlyRecurrenceControl's editor values.
 */
declare class YearlyRecurrenceValuesAccessor extends DefaultRecurrenceRuleValuesAccessor {
    /**
     * Initializes a new instance of the YearlyRecurrenceValuesAccessor object. For internal use only.
     * @param recurrenceControl A ASPxClientRecurrenceControlBase object specifying the required recurrence control.
     */
    constructor(recurrenceControl: ASPxClientRecurrenceControlBase);
    /**
     * Gets the day of the month on which the appointment is scheduled.
     */
    GetDayNumber(): number;
    /**
     * Gets or sets the month's number.
     */
    GetMonth(): number;
    /**
     * Gets the days of the week on which a yearly recurrent appointment is scheduled.
     */
    GetWeekDays(): ASPxClientWeekDays;
    /**
     * Gets or sets the number of a week in a month when an appointment is scheduled.
     */
    GetWeekOfMonth(): ASPxClientWeekOfMonth;
}
/**
 * Provides base functionality for the ASPxClientScheduler's forms.
 */
declare class ASPxClientFormBase {
    /**
     * Closes the form.
     */
    Close(): void;
    /**
     * Occurs when the form has been closed.
     */
    FormClosed: ASPxClientEvent<ASPxClientEventHandler<ASPxClientFormBase>>;
    /**
     * Sets the visibility state of the specified form element.
     * @param element An object specifying the element whose visibility state should be changed.
     * @param isVisible true to display the element; false to hide the element.
     */
    SetVisibleCore(element: any, isVisible: boolean): void;
}
/**
 * Represents a client-side equivalent of the RecurrenceTypeEdit.
 */
declare class ASPxClientRecurrenceTypeEdit extends ASPxClientRadioButtonList {
    /**
     * Gets the selected recurrence type.
     */
    GetRecurrenceType(): ASPxClientRecurrenceType;
    /**
     * Sets the selected recurrence type.
     * @param recurrenceType An ASPxClientRecurrenceType enumeration value.
     */
    SetRecurrenceType(recurrenceType: ASPxClientRecurrenceType): void;
}
/**
 * Represents the client-side equivalent of the ASPxDateNavigator control.
 */
declare class ASPxClientDateNavigator extends ASPxClientControl {
    /**
     * Allows you to provide custom highlighting styles for day cells.
     */
    DayCellCustomHighlight: ASPxClientEvent<ASPxClientDateNavigatorDayCellCustomHighlightEventHandler<ASPxClientDateNavigator>>;
    /**
     * Occurs when the end user selects another date.
     */
    SelectionChanged: ASPxClientEvent<ASPxClientDateNavigatorSelectionChangedEventHandler<ASPxClientDateNavigator>>;
    /**
     * Occurs when the end user changes the visible month.
     */
    VisibleMonthChanged: ASPxClientEvent<ASPxClientDateNavigatorVisibleMonthChangedEventHandler<ASPxClientDateNavigator>>;
}
/**
 * A method that will handle the ASPxClientDateNavigator.DayCellCustomHighlight event.
 * @param source The event source.
 * @param e A ASPxClientDateNavigatorDayCellCustomHighlightEventArgs object that contains event data.
 */
interface ASPxClientDateNavigatorDayCellCustomHighlightEventHandler<Sender> { (source: Sender, e: ASPxClientDateNavigatorDayCellCustomHighlightEventArgs): void; }
/**
 * Provides data for the ASPxClientDateNavigator.DayCellCustomHighlight event.
 */
declare class ASPxClientDateNavigatorDayCellCustomHighlightEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientDateNavigatorDayCellCustomHighlightEventArgs class.
     * @param htmlElement An object representing the HTML element.
     * @param date A DateTime object that represents the highlighted date.
     * @param appointments An array of ASPxClientAppointment objects that the highlighted day cell contains.
     */
    constructor(htmlElement: any, date: Date, appointments: ASPxClientAppointment[]);
    /**
     * Gets the HTML element that the event was triggered on.
     */
    htmlElement: any;
    /**
     * Provides access to the date object of the processed cell.
     */
    date: Date;
    /**
     * Provides access to the processed appointments.
     */
    appointments: ASPxClientAppointment[];
}
/**
 * A method that will handle the ASPxClientDateNavigator.VisibleMonthChanged event.
 * @param source The event source.
 * @param e A ASPxClientDateNavigatorVisibleMonthChangedEventArgs object that contains event data.
 */
interface ASPxClientDateNavigatorVisibleMonthChangedEventHandler<Sender> { (source: Sender, e: ASPxClientDateNavigatorVisibleMonthChangedEventArgs): void; }
/**
 * Provides data for the ASPxClientDateNavigator.VisibleMonthChanged event.
 */
declare class ASPxClientDateNavigatorVisibleMonthChangedEventArgs extends ASPxClientEventArgs {
    /**
     * Returns the start date of the latest visible month.
     */
    startDate: Date;
    /**
     * Returns the end date of the latest visible month.
     */
    endDate: Date;
}
/**
 * A method that will handle the ASPxClientDateNavigator.SelectionChanged event.
 * @param source The event source.
 * @param e A ASPxClientDateNavigatorSelectionChangedEventArgs object that contains event data.
 */
interface ASPxClientDateNavigatorSelectionChangedEventHandler<Sender> { (source: Sender, e: ASPxClientDateNavigatorSelectionChangedEventArgs): void; }
/**
 * Provides data for the ASPxClientDateNavigator.SelectionChanged event.
 */
declare class ASPxClientDateNavigatorSelectionChangedEventArgs extends ASPxClientEventArgs {
    /**
     * Returns the selected dates related to the event.
     */
    selectedDates: Date[];
}
/**
 * Contains lists of property names for different appointment types.
 */
declare class AppointmentPropertyNames {
    /**
     * Gets the list of properties characteristic for appointments of the ASPxAppointmentType.Normal type.
     */
    Normal: string;
    /**
     * Gets the list of properties characteristic for appointments of the ASPxAppointmentType.Pattern type.
     */
    Pattern: string;
}
/**
 * Contains information about a client tooltip.
 */
declare class ASPxClientSchedulerToolTipData {
    /**
     * Returns the client appointment for which the tooltip is displayed.
     */
    GetAppointment(): ASPxClientAppointment;
    /**
     * Returns the client time interval for which the tooltip is displayed.
     */
    GetInterval(): ASPxClientTimeInterval;
    /**
     * Returns the resources associated with the appointment for which the tooltip is displayed.
     */
    GetResources(): string[];
}
/**
 * A client-side equivalent of the ASPxSchedulerToolTipBase control.
 */
declare class ASPxClientToolTipBase {
    /**
     * Returns the value that indicates whether or not the tooltip can be displayed.
     */
    CanShowToolTip(): boolean;
    /**
     * Ends updating the tooltip content.
     * @param toolTipData An ASPxClientSchedulerToolTipData object providing data required to update the tooltip content.
     */
    FinalizeUpdate(toolTipData: ASPxClientSchedulerToolTipData): void;
    /**
     * Updates the tooltip content.
     * @param toolTipData An ASPxClientSchedulerToolTipData object providing data required to update the tooltip content.
     */
    Update(toolTipData: ASPxClientSchedulerToolTipData): void;
    /**
     * Closes the tooltip.
     */
    Close(): void;
    /**
     * Gets the tooltip position. An ASPxClientPoint object representing the tooltip position.
     * @param bounds An object that represents the tooltip bounds.
     */
    CalculatePosition(bounds: any): ASPxClientPoint;
    /**
     * Displays the Appointment Menu at the position of the tooltip.
     * @param eventObject An object containing information about the event in which the menu is displayed.
     */
    ShowAppointmentMenu(eventObject: any): void;
    /**
     * Displays the View Menu at the position of the tooltip.
     * @param eventObject An object containing information about the event in which the menu is displayed.
     */
    ShowViewMenu(eventObject: any): void;
    /**
     * Returns the string representation of the specified interval. A string containing a textual representation of the interval.
     * @param interval An ASPxClientTimeInterval object to convert.
     */
    ConvertIntervalToString(interval: ASPxClientTimeInterval): string;
}
/**
 * Represents the client-side equivalent of the ASPxSchedulerStorageControl control.
 */
declare class ASPxClientSchedulerStorageControl extends ASPxClientControl {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientSchedulerStorageControl>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientSchedulerStorageControl>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientSchedulerStorageControl.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientSchedulerStorageControl>>;
    /**
     * Occurs when a reminder is invoked.
     */
    ReminderAlert: ASPxClientEvent<ReminderAlertEventHandler<ASPxClientSchedulerStorageControl>>;
    /**
     * Retrieves the collection of appointments that are in the specified time interval and are assigned to the specified resources.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     * @param interval An ASPxClientTimeInterval object specifying the required time interval.
     * @param resources An array of string values representing the resources' IDs.
     */
    GetAppointments(onSuccess: (arg: string) => void, interval: ASPxClientTimeInterval, resources?: string[]): void;
    /**
     * Client-side function that returns an appointment with the specified ID.
     * @param onSuccess A handler of a function which will receive and process the appointments.
     * @param appointmentId An appointment's identifier.
     */
    GetAppointmentById(onSuccess: (arg: string) => void, appointmentId: string): void;
    /**
     * Retrieves the collection of resources.
     * @param onSuccess A client action to perform if the server round-trip has completed successfully.
     */
    GetResources(onSuccess: (arg: string) => void): void;
    /**
     * Returns the resource by its ID.
     * @param onSuccess A handler of a function which will receive and process the properties' values.
     * @param resourceId A string value specifying the resource ID.
     */
    GetResourceById(onSuccess: (arg: string) => void, resourceId: string): void;
    /**
     * Client-side scripting method to insert the specified appointment.
     * @param appointment An ASPxClientAppointment object representing the client-side appointment.
     */
    InsertAppointment(appointment: ASPxClientAppointment): void;
    /**
     * Client-side scripting method to update the specified appointment.
     * @param appointment An ASPxClientAppointment object representing the client-side appointment.
     */
    UpdateAppointment(appointment: ASPxClientAppointment): void;
    /**
     * Client-side scripting  method to delete the specified appointment.
     * @param appointment An ASPxClientAppointment object representing the client-side appointment.
     */
    DeleteAppointment(appointment: ASPxClientAppointment): void;
    /**
     * Dismisses all reminders.
     */
    DismissAllReminders(): void;
    /**
     * Snoozes all reminders.
     */
    SnoozeAllReminders(): void;
    /**
     * Client-side scripting method which initiates a round trip to the server, so that the control will be reloaded.
     */
    Refresh(): void;
}
/**
 * Lists values that identify the context menu type.
 */
declare enum ASPxClientSpreadsheetPopupMenuType {
    /**
     * Specifies a context menu which can be invoked by right-clicking a column header.
     */
    ColumnHeading = 0,
    /**
     * Specifies a context menu which can be invoked by right-clicking a row header.
     */
    RowHeading = 1,
    /**
     * Specifies a context menu which can be invoked by right-clicking a worksheet tab.
     */
    SheetTab = 3,
    /**
     * Specifies a context menu which can be invoked by right-clicking a picture embedded in a worksheet.
     */
    Picture = 4,
    /**
     * Specifies a context menu which can be invoked by right-clicking a chart in a worksheet.
     */
    Chart = 5,
    /**
     * Specifies a context menu which can be invoked by right-clicking any cell in a worksheet.
     */
    Cell = 7,
    /**
     * Specifies a context menu which can be invoked by clicking the AutoFilter drop-down arrow.
     */
    AutoFilter = 8,
    /**
     * Specifies a context menu which can be invoked by right-clicking any cell in a pivot table.
     */
    PivotTable = 9,
    /**
     * Specifies a context menu which can be invoked by clicking the AutoFilter drop-down arrow on the row or column label of a pivot table.
     */
    PivotTableAutoFilter = 10
}
/**
 * Lists values identifying a type of the element currently being edited in the Spreadsheet control.
 */
declare enum ASPxClientSpreadsheetEditMode {
    /**
     * Specifies that no elements are currently being edited.
     */
    None = 0,
    /**
     * Specifies that the element currently being edited is the spreadsheet cell.
     */
    Cell = 1,
    /**
     * Specifies that the element currently being edited is the cell's comment.
     */
    Comment = 2,
}
/**
 * Lists values identifying the Spreadsheet's view modes.
 */
declare enum ASPxClientSpreadsheetViewMode {
    /**
     * Specifies that the Spreadsheet is in Editing view mode. In this view mode, users can edit a document's content.
     */
    Editing = 0,
    /**
     * Specifies that the Spreadsheet is in Reading view mode. In this view mode, users cannot edit a document's content.
     */
    Reading = 1,
}
/**
 * Contains settings specifying size and position of a spreadsheet cell's in-place editor.
 */
declare class ASPxClientSpreadsheetRectangle {
    /**
     * Gets the x-coordinate of the specified cell's left side.
     */
    x: number;
    /**
     * Gets the y-coordinate of the specified cell's top side.
     */
    y: number;
    /**
     * Gets the width value of the cell's in-place editor.
     */
    width: number;
    /**
     * Gets the height value of the cell's in-place editor.
     */
    height: number;
    /**
     * Gets the x-coordinate of the specified cell's editor.
     */
    left: number;
    /**
     * Gets the y-coordinate of the specified cell's editor.
     */
    top: number;
    /**
     * Gets the y-coordinate of the specified cell's bottom side.
     */
    bottom: number;
    /**
     * Gets the x-coordinate of the specified cell's right side.
     */
    right: number;
}
/**
 * A method that will handle the ASPxClientSpreadsheet.CellBeginEdit event.
 * @param source An object representing the event source. Identifies the Spreadsheet that raised the event.
 * @param e A ASPxClientSpreadsheetCellBeginEditEventArgs object that contains event data.
 */
interface ASPxClientSpreadsheetCellBeginEditEventHandler<Sender> { (source: Sender, e: ASPxClientSpreadsheetCellBeginEditEventArgs): void; }
/**
 * Provides data for the ASPxClientSpreadsheet.CellBeginEdit event.
 */
declare class ASPxClientSpreadsheetCellBeginEditEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientSpreadsheetCellBeginEditEventArgs object. For internal use only.
     * @param columnIndex Gets the active cell's column index.
     * @param rowIndex Gets the active cell's row index.
     * @param formula Gets the active cell's formula.
     * @param value Gets the active cell's current value.
     * @param sheetName Gets the current worksheet's name.
     */
    constructor(columnIndex: number, rowIndex: number, formula: string, value: string, sheetName: string);
    /**
     * Gets the active cell's column index.
     */
    columnIndex: number;
    /**
     * Gets the active cell's row index.
     */
    rowIndex: number;
    /**
     * Gets the active cell's formula.
     */
    formula: string;
    /**
     * Gets the active cell's current value.
     */
    value: string;
    /**
     * Gets the current worksheet's name.
     */
    sheetName: string;
}
/**
 * A method that will handle the ASPxClientSpreadsheet.CellEndEdit event.
 * @param source An object representing the event source. Identifies the Spreadsheet that raised the event.
 * @param e A ASPxClientSpreadsheetCellEndEditEventArgs object that contains event data.
 */
interface ASPxClientSpreadsheetCellEndEditEventHandler<Sender> { (source: Sender, e: ASPxClientSpreadsheetCellEndEditEventArgs): void; }
/**
 * Provides data for the ASPxClientSpreadsheet.CellEndEdit event.
 */
declare class ASPxClientSpreadsheetCellEndEditEventArgs extends ASPxClientSpreadsheetCellBeginEditEventArgs {
    /**
     * Initializes a new instance of the ASPxClientSpreadsheetCellEndEditEventArgs object. For internal use only.
     * @param columnIndex Gets the active cell's column index.
     * @param rowIndex Gets the active cell's row index.
     * @param formula Gets the active cell's formula.
     * @param value Gets the active cell's current value.
     * @param sheetName Gets the current worksheet's name.
     * @param editorText Gets or sets the text stored within an active cell's editor.
     */
    constructor(columnIndex: number, rowIndex: number, formula: string, value: string, sheetName: string, editorText: string);
    /**
     * Gets or sets the text stored within the active cell's editor.
     */
    editorText: string;
}
/**
 * A method that will handle the ASPxClientSpreadsheet.CellCancelEdit event.
 * @param source An object representing the event source. Identifies the Spreadsheet that raised the event.
 * @param e A ASPxClientSpreadsheetCellCancelEditEventArgs object that contains event data.
 */
interface ASPxClientSpreadsheetCellCancelEditEventHandler<Sender> { (source: Sender, e: ASPxClientSpreadsheetCellCancelEditEventArgs): void; }
/**
 * Provides data for the ASPxClientSpreadsheet.CellCancelEdit event.
 */
declare class ASPxClientSpreadsheetCellCancelEditEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientSpreadsheetCellCancelEditEventArgs object. For internal use only.
     * @param columnIndex Gets the active cell's column index.
     * @param rowIndex Gets the active cell's row index.
     * @param formula Gets the active cell's formula.
     * @param value Gets the active cell's current value.
     * @param sheetName Gets the current worksheet's name.
     */
    constructor(columnIndex: number, rowIndex: number, formula: string, value: string, sheetName: string);
    /**
     * Gets the active cell's column index.
     */
    columnIndex: number;
    /**
     * Gets the active cell's row index.
     */
    rowIndex: number;
    /**
     * Gets the active cell's formula.
     */
    formula: string;
    /**
     * Gets the active cell's current value.
     */
    value: string;
    /**
     * Gets the current worksheet's name.
     */
    sheetName: string;
}
/**
 * A method that will handle the ASPxClientSpreadsheet.SelectionChanged event.
 * @param source An object representing the event source. Identifies the button editor that raised the event.
 * @param e An ASPxClientSpreadsheetSelectionChangedEventArgs object that contains event data.
 */
interface ASPxClientSpreadsheetSelectionChangedEventHandler<Sender> { (source: Sender, e: ASPxClientSpreadsheetSelectionChangedEventArgs): void; }
/**
 * Provides data for the ASPxClientSpreadsheet.SelectionChanged event.
 */
declare class ASPxClientSpreadsheetSelectionChangedEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientSpreadsheetSelectionChangedEventArgs within the specified setting.
     * @param selection An ASPxClientSpreadsheetSelection object defining the selection in the Spreadsheet.
     */
    constructor(selection: ASPxClientSpreadsheetSelection);
    /**
     * Gets an object that determines the currently selected region within the Spreadsheet.
     */
    selection: ASPxClientSpreadsheetSelection;
}
/**
 * Represents the selection in the Spreadsheet.
 */
declare class ASPxClientSpreadsheetSelection {
    /**
     * Gets the column index of the active cell.
     */
    activeCellColumnIndex: number;
    /**
     * Gets the row index of the active cell.
     */
    activeCellRowIndex: number;
    /**
     * Gets the index of the selection's left column.
     */
    leftColumnIndex: number;
    /**
     * Gets the index of the selection's top row.
     */
    topRowIndex: number;
    /**
     * Gets the index of the selection's right column.
     */
    rightColumnIndex: number;
    /**
     * Gets the index of the selection's bottom row.
     */
    bottomRowIndex: number;
}
/**
 * A method that will handle the ASPxClientSpreadsheet.CustomCommandExecuted event.
 * @param source An object representing the event source. Identifies the Spreadsheet that raised the event.
 * @param e A ASPxClientSpreadsheetCustomCommandExecutedEventArgs object that contains event data.
 */
interface ASPxClientSpreadsheetCustomCommandExecutedEventHandler<Sender> { (source: Sender, e: ASPxClientSpreadsheetCustomCommandExecutedEventArgs): void; }
/**
 * Provides data for the ASPxClientSpreadsheet.CustomCommandExecuted event.
 */
declare class ASPxClientSpreadsheetCustomCommandExecutedEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientSpreadsheetCustomCommandExecutedEventArgs class.
     * @param commandName A string value that specifies the name of the processed command.
     * @param parameter An object that can contain command specific information needed for handling the command execution.
     */
    constructor(commandName: string, parameter: any);
    /**
     * Gets the name of the processed command.
     */
    commandName: string;
    /**
     * Gets an optional parameter that complements the processed command.
     */
    parameter: string;
    /** @deprecated This property is now obsolete. Use the commandName property instead. */
    /**
     * This property is now obsolete. Use the ASPxClientSpreadsheetCustomCommandExecutedEventArgs.commandName property instead.
     */
    item: ASPxClientRibbonItem;
}
/**
 * A method that will handle the ASPxClientSpreadsheet.DocumentChanged event.
 * @param source An object representing the event source. Identifies the Spreadsheet that raised the event.
 * @param e A ASPxClientSpreadsheetDocumentChangedEventArgs object that contains event data.
 */
interface ASPxClientSpreadsheetDocumentChangedEventHandler<Sender> { (source: Sender, e: ASPxClientSpreadsheetDocumentChangedEventArgs): void; }
/**
 * Provides data for the ASPxClientSpreadsheet.DocumentChanged event.
 */
declare class ASPxClientSpreadsheetDocumentChangedEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientSpreadsheetDocumentChangedEventArgs class.
     */
    constructor();
}
/**
 * A method that will handle the ASPxClientSpreadsheet.BeginSynchronization and ASPxClientSpreadsheet.EndSynchronization events.
 * @param source An object representing the event source. Identifies the Spreadsheet that raised the event.
 * @param e A ASPxClientSpreadsheetSynchronizationEventArgs object that contains event data.
 */
interface ASPxClientSpreadsheetSynchronizationEventHandler<Sender> { (source: Sender, e: ASPxClientSpreadsheetSynchronizationEventArgs): void; }
/**
 * Provides data for the ASPxClientSpreadsheet.BeginSynchronization and ASPxClientSpreadsheet.EndSynchronization events.
 */
declare class ASPxClientSpreadsheetSynchronizationEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientSpreadsheetSynchronizationEventArgs class.
     */
    constructor();
}
/**
 * A method that will handle the ASPxClientSpreadsheet.HyperlinkClick event.
 * @param source An object representing the event source. Identifies the Spreadsheet that raised the event.
 * @param e An ASPxClientSpreadsheetHyperlinkClickEventArgs object that contains event data.
 */
interface ASPxClientSpreadsheetHyperlinkClickEventHandler<Sender> { (source: Sender, e: ASPxClientSpreadsheetHyperlinkClickEventArgs): void; }
/**
 * Provides data for the ASPxClientSpreadsheet.HyperlinkClick event.
 */
declare class ASPxClientSpreadsheetHyperlinkClickEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientSpreadsheetHyperlinkClickEventArgs object. For internal use only.
     * @param htmlEvent A DHTML event object that relates to the processed event.
     * @param handled true if the event is handled and no default processing is required; otherwise false.
     * @param hyperlinkType One of the ASPxClientOfficeDocumentLinkType values.
     * @param targetUri A sting value specifying the link's URI.
     */
    constructor(htmlEvent: any, handled: boolean, hyperlinkType: ASPxClientOfficeDocumentLinkType, targetUri: string);
    /**
     * Gets or sets a value that specifies whether the event is handled, and the default processing is not required.
     */
    handled: boolean;
    /**
     * Gets a DHTML event object that relates to the processed event.
     */
    htmlEvent: any;
    /**
     * Gets a value identifying the clicked hyperlink type.
     */
    hyperlinkType: ASPxClientOfficeDocumentLinkType;
    /**
     * Gets the clicked link's URI.
     */
    targetUri: string;
}
/**
 * A method that will handle the ASPxClientSpreadsheet.PopupMenuShowing event.
 * @param source The event sender (typically an ASPxClientSpreadsheet object).
 * @param e A ASPxClientSpreadsheetPopupMenuShowingEventArgs object that contains event data.
 */
interface ASPxClientSpreadsheetPopupMenuShowingEventHandler<Sender> { (source: Sender, e: ASPxClientSpreadsheetPopupMenuShowingEventArgs): void; }
/**
 * Provides data for the ASPxClientSpreadsheet.PopupMenuShowing event.
 */
declare class ASPxClientSpreadsheetPopupMenuShowingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientSpreadsheetPopupMenuShowingEventArgs class with the specified settings.
     * @param menuItems Provides access to the context menu's item collection.
     * @param menuType Specifies the currently displayed context menu's type.
     */
    constructor(menuItems: any, menuType: any);
    /**
     * Provides access to a collection of menu items in the context menu being invoked.
     */
    menuItems: ASPxClientSpreadsheetPopupMenuItemCollection;
    /**
     * Gets the currently displayed context menu's type.
     */
    menuType: ASPxClientSpreadsheetPopupMenuType;
}
/**
 * A method that will handle the ASPxClientSpreadsheet.ViewModeChanged event.
 * @param source The event sender (typically an ASPxClientSpreadsheet object).
 * @param e A ASPxClientSpreadsheetViewModeChangedEventArgs object that contains event data.
 */
interface ASPxClientSpreadsheetViewModeChangedEventHandler<Sender> { (source: Sender, e: ASPxClientSpreadsheetViewModeChangedEventArgs): void; }
/**
 * Provides data for the ASPxClientSpreadsheet.ViewModeChanged event.
 */
declare class ASPxClientSpreadsheetViewModeChangedEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientSpreadsheetViewModeChangedEventArgs class.
     * @param oldViewMode Specifies the control's current view mode.
     */
    constructor(oldViewMode: any);
    /**
     * Gets the control's current view mode when the event is triggered.
     */
    oldViewMode: ASPxClientSpreadsheetViewMode;
}
/**
 * A client-side equivalent of the ASPxSpreadsheet object.
 */
declare class ASPxClientSpreadsheet extends ASPxClientControl {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientSpreadsheet>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientSpreadsheet>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientSpreadsheet.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientSpreadsheet>>;
    /**
     * Occurs on the client when a selection is changed in the ASPxSpreadsheet.
     */
    SelectionChanged: ASPxClientEvent<ASPxClientSpreadsheetSelectionChangedEventHandler<ASPxClientSpreadsheet>>;
    /**
     * Occurs after a custom command has been executed on the client side.
     */
    CustomCommandExecuted: ASPxClientEvent<ASPxClientSpreadsheetCustomCommandExecutedEventHandler<ASPxClientSpreadsheet>>;
    /**
     * Fires if any change is made to the Spreadsheet's document on the client.
     */
    DocumentChanged: ASPxClientEvent<ASPxClientSpreadsheetDocumentChangedEventHandler<ASPxClientSpreadsheet>>;
    /**
     * Fires after a client change has been made to the document and the client-server synchronization starts to apply the change on the server.
     */
    BeginSynchronization: ASPxClientEvent<ASPxClientSpreadsheetSynchronizationEventHandler<ASPxClientSpreadsheet>>;
    /**
     * Fires after a document change has been applied to the server and server and client document models have been synchronized.
     */
    EndSynchronization: ASPxClientEvent<ASPxClientSpreadsheetSynchronizationEventHandler<ASPxClientSpreadsheet>>;
    /**
     * Occurs when the control's view mode is changed.
     */
    ViewModeChanged: ASPxClientEvent<ASPxClientSpreadsheetViewModeChangedEventHandler<ASPxClientSpreadsheet>>;
    /**
     * Occurs on the client side after a hyperlink is clicked within the Spreadsheet's document.
     */
    HyperlinkClick: ASPxClientEvent<ASPxClientSpreadsheetHyperlinkClickEventHandler<ASPxClientSpreadsheet>>;
    /**
     * Occurs before the context menu is displayed and allows menu customization.
     */
    PopupMenuShowing: ASPxClientEvent<ASPxClientSpreadsheetPopupMenuShowingEventHandler<ASPxClientSpreadsheet>>;
    /**
     * Occurs before the cell editor is opened.
     */
    CellBeginEdit: ASPxClientEvent<ASPxClientSpreadsheetCellBeginEditEventHandler<ASPxClientSpreadsheet>>;
    /**
     * Occurs before the cell editor is closed and the entered value is committed.
     */
    CellEndEdit: ASPxClientEvent<ASPxClientSpreadsheetCellEndEditEventHandler<ASPxClientSpreadsheet>>;
    /**
     * Occurs before the active cell's editor is closed and the entered value is rolled back.
     */
    CellCancelEdit: ASPxClientEvent<ASPxClientSpreadsheetCellCancelEditEventHandler<ASPxClientSpreadsheet>>;
    /**
     * Occurs when attempting to edit a locked cell in a protected worksheet.
     */
    ProtectionWarning: ASPxClientEvent<ASPxClientCancelEventHandler<ASPxClientSpreadsheet>>;
    /**
     * Sets input focus to the Spreadsheet.
     */
    Focus(): void;
    /**
     * Gets access to the client ribbon object.
     */
    GetRibbon(): ASPxClientRibbon;
    /**
     * Enables you to switch the full-screen mode of the Spreadsheet.
     * @param fullscreen true to activate full-screen mode; false to deactivate full-screen mode.
     */
    SetFullscreenMode(fullscreen: boolean): void;
    /**
     * Returns the control's view mode.
     */
    GetViewMode(): ASPxClientSpreadsheetViewMode;
    /**
     * Specifies the control's view mode.
     * @param mode A value specifying the control's view mode.
     */
    SetViewMode(mode: ASPxClientSpreadsheetViewMode): void;
    /**
     * Returns the type of the element currently being edited in the Spreadsheet control.
     */
    GetEditMode(): ASPxClientSpreadsheetEditMode;
    /**
     * Applies a value stored within the editor to the active cell
     */
    ApplyCellEdit(): void;
    /**
     * Cancels editing of the active cell.
     */
    CancelCellEdit(): void;
    /**
     * Specifies the editor's value of the edited cell.
     * @param text A string specifying text received by the cell's editor.
     */
    SetCellEditorText(text: string): void;
    /**
     * Gets a name of the worksheet that is currently displayed within the spreadsheet.
     */
    GetActiveSheetName(): string;
    /**
     * Returns the current selection made in a Spreadsheet.
     */
    GetSelection(): ASPxClientSpreadsheetSelection;
    /**
     * Invokes the browser print dialog to print the sheet content.
     * @param target The target name.
     */
    Print(target: string): void;
    /**
     * Indicates whether any unsaved changes are contained in the current document.
     */
    HasUnsavedChanges(): boolean;
    /**
     * Gets the value of the specified cell. An object representing the specified cell's value.
     * @param colModelIndex An integer value specifying the cell's column index.
     * @param rowModelIndex An integer value specifying the cell's row index.
     */
    GetCellValue(colModelIndex: number, rowModelIndex: number): any;
    /**
     * Gets the specified cell's bounds. An ASPxClientSpreadsheetRectangle instance defining the rectangle with the specified position and size.
     * @param colModelIndex An integer value specifying the zero-based column index.
     * @param rowModelIndex An integer value specifying the zero-based row index.
     */
    GetCellBounds(colModelIndex: number, rowModelIndex: number): ASPxClientSpreadsheetRectangle;
    /**
     * Returns the comment associated with the specified data cell. An object representing the specified cell's comment.
     * @param colModelIndex An integer value specifying the data cell's column index.
     * @param rowModelIndex An integer value specifying the data cell's row index.
     */
    GetCellComment(colModelIndex: number, rowModelIndex: number): any;
    /**
     * Gets the value of the currently active cell.
     */
    GetActiveCellValue(): any;
    /**
     * Sends a callback to the server and generates the server-side ASPxSpreadsheet.Callback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(parameter: string, onSuccess?: (arg: string) => void): void;
    /** @deprecated Use the PerformCallback method instead. */
    /**
     * Sends a callback to the server and generates the server-side ASPxSpreadsheet.DocumentCallback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side ASPxSpreadsheet.DocumentCallback event.
     */
    PerformDocumentCallback(parameter: string): void;
    /**
     * Reconnects the Spreadsheet to an external ribbon.
     */
    ReconnectToExternalRibbon(): void;
    /**
     * Converts the specified object to the ASPxClientSpreadsheet type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientSpreadsheet;
}
/**
 * Represents an individual item of the Spreadsheet's context menu.
 */
declare class ASPxClientSpreadsheetPopupMenuItem {
    /**
     * Gets the immediate parent menu item to which the current menu item belongs.
     */
    parent: ASPxClientSpreadsheetPopupMenuItem;
    /**
     * Gets or sets the unique identifier name for the current menu item.
     */
    name: string;
    /**
     * Gets or sets the text content of the current menu item.
     */
    text: string;
    /**
     * Gets or sets a value that indicates whether the menu item is enabled, allowing the item to respond to end-user interactions.
     */
    enabled: boolean;
    /**
     * Gets or sets the CSS class name defining the menu item's image.
     */
    imageClassName: string;
    /**
     * Gets or sets an URL which defines the navigation location.
     */
    navigateUrl: string;
    /**
     * Gets or sets the URL of the menu item's image.
     */
    imageUrl: string;
    /**
     * Gets or sets a value that specifies whether the current menu item starts a group.
     */
    beginGroup: boolean;
    /**
     * Gets or sets the current menu item's tooltip text.
     */
    tooltip: string;
    /**
     * Gets or sets the window or frame at which to target the contents of the URL associated with the current menu item.
     */
    target: string;
    /**
     * Gets a collection that contains the submenu items of the current menu item.
     */
    GetSubItems(): ASPxClientSpreadsheetPopupMenuItemCollection;
    /**
     * Returns the menu item's sub-item with the specified index. An ASPxClientSpreadsheetPopupMenuItem object representing the found sub-item.
     * @param index An integer value specifying the index of the sub-item within a collection of the current menu item's submenu items.
     */
    GetItem(index: number): ASPxClientSpreadsheetPopupMenuItem;
    /**
     * Returns the menu item's sub-item with the specified ASPxClientSpreadsheetPopupMenuItem.name property value. An ASPxClientSpreadsheetPopupMenuItem object representing the found sub-item.
     * @param name A string value specifying the ASPxClientSpreadsheetPopupMenuItem.name property value of the sub-item to find.
     */
    GetItemByName(name: string): ASPxClientSpreadsheetPopupMenuItem;
    /**
     * Returns the total number of the menu item's child items (submenu items).
     */
    GetItemCount(): number;
}
/**
 * Represents a collection of items in the Spreadsheet's context menu.
 */
declare class ASPxClientSpreadsheetPopupMenuItemCollection {
    /**
     * Adds the specified menu item to the end of the collection.
     * @param item An ASPxClientSpreadsheetPopupMenuItem object specifying the item to be added to the collection.
     */
    Add(item: ASPxClientSpreadsheetPopupMenuItem): void;
    /**
     * Removes a menu item specified by its index within the collection.
     * @param index An integer value specifying the index of the menu item to remove.
     */
    Remove(index: number): void;
    /**
     * Removes a menu item specified by its name.
     * @param name A string value specifying the ASPxClientSpreadsheetPopupMenuItem.name property value of a menu item to remove from the collection.
     */
    RemoveByName(name: string): void;
    /**
     * Adds the specified item to the specified position within the collection.
     * @param index An integer value that specifies the zero-based index at which the specified item should be inserted.
     * @param item An ASPxClientSpreadsheetPopupMenuItem object to insert.
     */
    Insert(index: number, item: ASPxClientSpreadsheetPopupMenuItem): void;
    /**
     * Returns the total number of menu items in the collection.
     */
    GetCount(): number;
    /**
     * Returns an item object with the specified ASPxClientSpreadsheetPopupMenuItem.name property value. An ASPxClientSpreadsheetPopupMenuItem object with a specific value of the ASPxClientSpreadsheetPopupMenuItem.name property.
     * @param name A string value representing the ASPxClientSpreadsheetPopupMenuItem.name property value of the required item.
     */
    GetByName(name: string): ASPxClientSpreadsheetPopupMenuItem;
    /**
     * Returns a menu item specified by its index in the collection. A ASPxClientSpreadsheetPopupMenuItem object that is a menu item with the specified index.
     * @param index An integer value that is the zero-based index of the ASPxClientSpreadsheetPopupMenuItem to retrieve from the ASPxClientSpreadsheetPopupMenuItemCollection.
     */
    Get(index: number): ASPxClientSpreadsheetPopupMenuItem;
    /**
     * Removes all menu items from the collection.
     */
    Clear(): void;
}
/**
 * Represents the client ASPxTreeList.
 */
declare class ASPxClientTreeList extends ASPxClientControl {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientTreeList>>;
    /**
     * Occurs on the client after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientTreeList>>;
    /**
     * Fires on the client if any unhandled server error occurs during server-side processing of a callback sent by the ASPxClientTreeList.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientTreeList>>;
    /**
     * Enables you to display a context menu.
     */
    ContextMenu: ASPxClientEvent<ASPxClientTreeListContextMenuEventHandler<ASPxClientTreeList>>;
    /**
     * Occurs when a custom command button has been clicked.
     */
    CustomButtonClick: ASPxClientEvent<ASPxClientTreeListCustomButtonEventHandler<ASPxClientTreeList>>;
    /**
     * Fires after a toolbar item has been clicked.
     */
    ToolbarItemClick: ASPxClientEvent<ASPxClientTreeListToolbarItemClickEventHandler<ASPxClientTreeList>>;
    /**
     * Updates the tree list data.
     */
    Refresh(): void;
    /**
     * Sets input focus to the ASPxTreeList.
     */
    Focus(): void;
    /**
     * Gets the Popup Edit Form.
     */
    GetPopupEditForm(): ASPxClientPopupControl;
    /**
     * Returns a toolbar specified by its name. An ASPxClientMenu object that is the toolbar with the specified name.
     * @param name A string value specifying the toolbar name.
     */
    GetToolbarByName(name: string): ASPxClientMenu;
    /**
     * Returns a toolbar specified by its index. An ASPxClientMenu object that is the toolbar located at the specified index within the control's ASPxTreeList.Toolbars collection.
     * @param index An integer value specifying the zero-based index of the toolbar object to retrieve.
     */
    GetToolbar(index: number): ASPxClientMenu;
    /**
     * Returns the focused node's key value.
     */
    GetFocusedNodeKey(): string;
    /**
     * Moves focus to the specified node.
     * @param key A String value that uniquely identifies the node.
     */
    SetFocusedNodeKey(key: string): void;
    /**
     * Fires before the focused node has been changed.
     */
    NodeFocusing: ASPxClientEvent<ASPxClientTreeListNodeEventHandler<ASPxClientTreeList>>;
    /**
     * Fires in response to changing node focus.
     */
    FocusedNodeChanged: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientTreeList>>;
    /**
     * Fires after the selection has been changed via end-user interaction.
     */
    SelectionChanged: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientTreeList>>;
    /**
     * Indicates whether the specified node is selected. true if the specified node is selected; false if the specified node isn't selected. null if the specified node was not found on the client.
     * @param nodeKey A String value that identifies the node by its key value.
     */
    IsNodeSelected(nodeKey: string): boolean | null;
    /**
     * Selects or deselects the specified node.
     * @param nodeKey A string value that identifies the node.
     * @param state true to select the node; otherwise, false.
     */
    SelectNode(nodeKey: string, state?: boolean): void;
    /**
     * Obtains key values of selected nodes that are displayed within the current page.
     */
    GetVisibleSelectedNodeKeys(): string[];
    /**
     * Indicates whether the Customization Window is displayed.
     */
    IsCustomizationWindowVisible(): boolean;
    /**
     * Invokes the Customization Window and displays it over the specified HTML element.
     * @param htmlElement An object that specifies the HTML element relative to whose position the customization window is invoked.
     */
    ShowCustomizationWindow(htmlElement?: any): void;
    /**
     * Closes the Customization Window.
     */
    HideCustomizationWindow(): void;
    /**
     * Fires after the Customization Window has been closed.
     */
    CustomizationWindowCloseUp: ASPxClientEvent<ASPxClientEventHandler<ASPxClientTreeList>>;
    /** @deprecated Use the PerformCallback method instead */
    /**
     * Sends a callback to the server and generates the server-side ASPxTreeList.CustomCallback event, passing it the specified argument.
     * @param arg A string value that represents any information that needs to be sent to the server-side ASPxTreeList.CustomCallback event.
     */
    PerformCustomCallback(arg: string): void;
    /**
     * Sends a callback to the server and generates the server-side ASPxTreeList.CustomCallback event, passing it the specified argument.
     * @param args A string value that represents any information that needs to be sent to the server-side ASPxTreeList.CustomCallback event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(args: string, onSuccess?: (arg: string) => void): void;
    /**
     * Sends a callback to the server and generates the server-side ASPxTreeList.CustomDataCallback event passing it the specified argument.
     * @param arg A string value that represents any information that needs to be sent to the server-side ASPxTreeList.CustomDataCallback event.
     */
    PerformCustomDataCallback(arg: string): void;
    /**
     * Fires after the callback has been processed in the ASPxTreeList.CustomDataCallback event handler.
     */
    CustomDataCallback: ASPxClientEvent<ASPxClientTreeListCustomDataCallbackEventHandler<ASPxClientTreeList>>;
    /**
     * Obtains specified data source field values within a specified node, and submits them to the specified JavaScript function.
     * @param nodeKey A string value that identifies the node.
     * @param fieldNames The names of data source fields whose values within the specified node are returned.
     * @param onCallback A ASPxClientTreeListValuesCallback object that represents the JavaScript function which receives the list of values as a parameter.
     */
    GetNodeValues(nodeKey: string, fieldNames: string | string[], onCallback: ASPxClientTreeListValuesCallback): void;
    /**
     * Obtains specified data source field values within nodes that are displayed within the current page, and submits them to the specified JavaScript function.
     * @param fieldNames The names of data source fields whose values within visible nodes are returned.
     * @param onCallback A ASPxClientTreeListValuesCallback object that represents the JavaScript function which receives the list of values as a parameter.
     */
    GetVisibleNodeValues(fieldNames: string | string[], onCallback: ASPxClientTreeListValuesCallback): void;
    /**
     * Obtains specified data source field values within selected nodes, and submits them to the specified JavaScript function.
     * @param fieldNames The names of data source fields whose values within selected nodes are returned.
     * @param onCallback A ASPxClientTreeListValuesCallback object that represents the JavaScript function which receives the list of values as a parameter.
     * @param visibleOnly true to return values within selected nodes that are displayed within the current page; false to return values within all selected nodes.
     */
    GetSelectedNodeValues(fieldNames: string | string[], onCallback: ASPxClientTreeListValuesCallback, visibleOnly?: boolean): void;
    /**
     * Selects the specified page.
     * @param index An integer value that specifies the active page's index.
     */
    GoToPage(index: number): void;
    /**
     * Activates the previous page.
     */
    PrevPage(): void;
    /**
     * Activates the next page.
     */
    NextPage(): void;
    /**
     * Gets the index of the page currently being selected.
     */
    GetPageIndex(): number;
    /**
     * Gets the number of pages to which the ASPxTreeList's data is divided.
     */
    GetPageCount(): number;
    /**
     * Returns the specified node's state. A String value that represents the specified node's state.
     * @param nodeKey A String value that identifies the node.
     */
    GetNodeState(nodeKey: string): string;
    /**
     * Expands all nodes.
     */
    ExpandAll(): void;
    /**
     * Collapses all Node.
     */
    CollapseAll(): void;
    /**
     * Expands the specified node preserving the collapsed state of child nodes.
     * @param key A String value that uniquely identifies the node.
     */
    ExpandNode(key: string): void;
    /**
     * Collapses the specified node preserving the expanded state of child nodes.
     * @param key A String value that uniquely identifies the node.
     */
    CollapseNode(key: string): void;
    /**
     * Obtains key values of nodes that are displayed within the current page.
     */
    GetVisibleNodeKeys(): string[];
    /**
     * Returns an HTML table row that represents the specified node. An object that represents the HTML table row, which corresponds to the specified node.
     * @param nodeKey A string value that identifies the node.
     */
    GetNodeHtmlElement(nodeKey: string): any;
    /**
     * Fires on the client when a node is clicked.
     */
    NodeClick: ASPxClientEvent<ASPxClientTreeListNodeEventHandler<ASPxClientTreeList>>;
    /**
     * Fires on the client when a node is double clicked.
     */
    NodeDblClick: ASPxClientEvent<ASPxClientTreeListNodeEventHandler<ASPxClientTreeList>>;
    /**
     * Fires before a node is expanded.
     */
    NodeExpanding: ASPxClientEvent<ASPxClientTreeListNodeEventHandler<ASPxClientTreeList>>;
    /**
     * Fires before a node is collapsed.
     */
    NodeCollapsing: ASPxClientEvent<ASPxClientTreeListNodeEventHandler<ASPxClientTreeList>>;
    /**
     * Occurs before a node is dragged by an end-user.
     */
    StartDragNode: ASPxClientEvent<ASPxClientTreeListStartDragNodeEventHandler<ASPxClientTreeList>>;
    /**
     * Occurs after a node drag and drop operation is completed.
     */
    EndDragNode: ASPxClientEvent<ASPxClientTreeListEndDragNodeEventHandler<ASPxClientTreeList>>;
    /**
     * Returns the number of visible columns within the client ASPxTreeList.
     */
    GetVisibleColumnCount(): number;
    /**
     * Returns the number of columns within the client ASPxTreeList.
     */
    GetColumnCount(): number;
    /**
     * Returns the column located at the specified position within the ASPxTreeList.Columns collection. An ASPxClientTreeListColumn object that represents the client column located at the specified position within the collection.
     * @param index An integer value that identifies the column within the collection (the column's CollectionItem.Index property value).
     */
    GetColumnByIndex(index: number): ASPxClientTreeListColumn;
    /**
     * Returns the column with the specified name. An ASPxClientTreeListColumn object that represents the column with the specified name.
     * @param name A string value that specifies the column's name (the column's WebColumnBase.Name property value).
     */
    GetColumnByName(name: string): ASPxClientTreeListColumn;
    /**
     * Returns the client column which is bound to the specified data source field. An ASPxClientTreeListColumn object that represents the client column bound to the specified data source field.
     * @param fieldName A string value that specifies the name of the data source field to which the column is bound (the column's TreeListDataColumn.FieldName property value).
     */
    GetColumnByFieldName(fieldName: string): ASPxClientTreeListColumn;
    /**
     * Sorts data by the specified data column's values.
     * @param sortOrder A string value that specifies the column's sort order ('ASC', 'DESC' or 'NONE').
     * @param reset true to clear any previous sorting; otherwise, false.
     */
    SortBy(columnIndex: number | string | ASPxClientTreeListColumn, sortOrder?: string, reset?: boolean): void;
    /**
     * Switches the ASPxTreeList to edit mode.
     * @param nodeKey A string value that identifies the node by its key value.
     */
    StartEdit(nodeKey: string): void;
    /**
     * Saves all the changes made and switches the ASPxTreeList to browse mode.
     */
    UpdateEdit(): void;
    /**
     * Cancels all the changes made and switches the ASPxTreeList to browse mode.
     */
    CancelEdit(): void;
    /**
     * Indicates whether the ASPxTreeList is in edit mode.
     */
    IsEditing(): boolean;
    /**
     * Gets the key value of the node currently being edited.
     */
    GetEditingNodeKey(): string;
    /**
     * Moves the specified node to a new position.
     * @param nodeKey A string value that identifies the target node by its key value.
     * @param parentNodeKey A string value that identifies the node to whose child collection the target node is moved. An empty string to display the target node within the root.
     */
    MoveNode(nodeKey: string, parentNodeKey: string): void;
    /**
     * Deletes the specified node.
     * @param nodeKey A string value that identifies the node.
     */
    DeleteNode(nodeKey: string): void;
    /**
     * Switches the ASPxTreeList to edit mode and allows new node values to be edited.
     * @param parentNodeKey A String value that identifies the parent node, which owns a new node.
     */
    StartEditNewNode(parentNodeKey?: string): void;
    /**
     * Returns the editor used to edit the specified column's values. An object that represents the specified column's editor.
     * @param column An ASPxClientTreeListColumn object that represents the data column within the client ASPxTreeList.
     */
    GetEditor(column: ASPxClientTreeListColumn | number | string): any;
    /**
     * Returns the value of the specified edit cell. A String value that represents the value of the edit cell, which corresponds to the specified data column.
     * @param column An ASPxClientTreeListColumn object that represents the data column within the client ASPxTreeList.
     */
    GetEditValue(column: ASPxClientTreeListColumn | number | string): any;
    /**
     * Sets the value of the specified edit cell.
     * @param value An object that specifies the edit cell's new value.
     */
    SetEditValue(column: ASPxClientTreeListColumn | number | string, value: any): void;
    /**
     * Moves focus to the specified editor within the edited node.
     */
    FocusEditor(column: ASPxClientTreeListColumn | number | string): void;
    /**
     * Provides access to the batch editing client API.
     */
    batchEditApi: ASPxClientTreeListBatchEditApi;
    /**
     * Gets information about a focused cell.
     */
    GetFocusedCell(): ASPxClientTreeListCellInfo;
    /**
     * Focuses a specified cell.
     * @param nodeKey An integer value that specifies a node key.
     * @param columnIndex A zero-based index that identifies the column in the column collection (the column's CollectionItem.Index property value).
     */
    SetFocusedCell(nodeKey: string, columnIndex: number): void;
    /**
     * Occurs when a tree list switches to batch edit mode.
     */
    BatchEditStartEditing: ASPxClientEvent<ASPxClientTreeListBatchEditStartEditingEventHandler<ASPxClientTreeList>>;
    /**
     * Occurs when a tree list leaves the batch edit mode.
     */
    BatchEditEndEditing: ASPxClientEvent<ASPxClientTreeListBatchEditEndEditingEventHandler<ASPxClientTreeList>>;
    /**
     * Enables you to specify whether the node date is valid and provide an error text.
     */
    BatchEditNodeValidating: ASPxClientEvent<ASPxClientTreeListBatchEditNodeValidatingEventHandler<ASPxClientTreeList>>;
    /**
     * Enables you to provide navigation for editors contained in a templated cell in Batch Edit mode.
     */
    BatchEditTemplateCellFocused: ASPxClientEvent<ASPxClientTreeListBatchEditTemplateCellFocusedEventHandler<ASPxClientTreeList>>;
    /**
     * Occurs on the client side before data changes are saved in batch edit mode.
     */
    BatchEditChangesSaving: ASPxClientEvent<ASPxClientTreeListBatchEditChangesSavingEventHandler<ASPxClientTreeList>>;
    /**
     * Occurs on the client side before data changes are canceled in batch edit mode.
     */
    BatchEditChangesCanceling: ASPxClientEvent<ASPxClientTreeListBatchEditChangesCancelingEventHandler<ASPxClientTreeList>>;
    /**
     * Occurs on the client side before a node is inserted in batch edit mode.
     */
    BatchEditNodeInserting: ASPxClientEvent<ASPxClientTreeListBatchEditNodeInsertingEventHandler<ASPxClientTreeList>>;
    /**
     * Occurs on the client side before a node is deleted in batch edit mode.
     */
    BatchEditNodeDeleting: ASPxClientEvent<ASPxClientTreeListBatchEditNodeDeletingEventHandler<ASPxClientTreeList>>;
    /**
     * Occurs on the client side before a node is recovered in batch edit mode.
     */
    BatchEditNodeRecovering: ASPxClientEvent<ASPxClientTreeListBatchEditNodeRecoveringEventHandler<ASPxClientTreeList>>;
    /**
     * Enables you to prevent a batch edit confirmation message from being displayed.
     */
    BatchEditConfirmShowing: ASPxClientEvent<ASPxClientTreeListBatchEditConfirmShowingEventHandler<ASPxClientTreeList>>;
    /**
     * Occurs on the client side when the focused cell is about to be changed.
     */
    FocusedCellChanging: ASPxClientEvent<ASPxClientTreeListFocusedCellChangingEventHandler<ASPxClientTreeList>>;
    /**
     * Scrolls the tree list so that the specified node becomes visible.
     * @param nodeKey An integer value that specifies the node index within the tree list's client item list.
     */
    MakeNodeVisible(nodeKey: string): void;
    /**
     * Returns the current vertical scroll position of the tree list's content.
     */
    GetVerticalScrollPosition(): number;
    /**
     * Returns the current horizontal scroll position of the tree list's content.
     */
    GetHorizontalScrollPosition(): number;
    /**
     * Specifies the vertical scroll position for the tree list's content.
     * @param position An integer value specifying the vertical scroll position.
     */
    SetVerticalScrollPosition(position: number): void;
    /**
     * Specifies the horizontal scroll position for the tree list's content.
     * @param position An integer value specifying the horizontal scroll position.
     */
    SetHorizontalScrollPosition(position: number): void;
    /**
     * Exports tree list data to a file in the specified format.
     * @param format An ASPxClientTreeListExportFormat object specifying the export format.
     */
    ExportTo(format: ASPxClientTreeListExportFormat): void;
    /**
     * Enables you to prevent columns from being resized.
     */
    ColumnResizing: ASPxClientEvent<ASPxClientTreeListColumnResizingEventHandler<ASPxClientTreeList>>;
    /**
     * Occurs after a column's width has been changed by an end-user.
     */
    ColumnResized: ASPxClientEvent<ASPxClientTreeListColumnResizedEventHandler<ASPxClientTreeList>>;
    /**
     * Applies the specified filter expression to the tree list.
     * @param filterExpression A string value that specifies the filter expression.
     */
    ApplyFilter(filterExpression: string): void;
    /**
     * Clears the filter expression applied to a client Tree List.
     */
    ClearFilter(): void;
    /**
     * Applies a filter specified in the filter row to the ASPxTreeList.
     */
    ApplyOnClickRowFilter(): void;
    /**
     * Applies the specified search panel filter criterion to tree list data.
     * @param value A string value that specifies the filter criterion.
     */
    ApplySearchPanelFilter(value: string): void;
    /**
     * Returns the editor used to edit the value in the auto filter row for the specified data column. An object that represents the editor used to edit the value in the specified auto filter row cell. null (Nothing in Visual Basic) if the editor was not found.
     * @param column An ASPxClientTreeListColumn object that represents the data column within the ASPxTreeList.
     */
    GetAutoFilterEditor(column: ASPxClientTreeListColumn | number | string): any;
    /**
     * Applies a filter to the specified data column.
     * @param val A string value that specifies the filter expression.
     */
    AutoFilterByColumn(column: ASPxClientTreeListColumn | number | string, val: string): void;
    /**
     * Displays the Filter Control.
     */
    ShowFilterControl(): void;
    /**
     * Hides the Filter Control.
     */
    CloseFilterControl(): void;
    /**
     * Enables or disables the current filter.
     * @param isFilterEnabled true to enable the current filter; otherwise, false.
     */
    SetFilterEnabled(isFilterEnabled: boolean): void;
    /**
     * Specifies a custom editor for the search panel on the client side.
     * @param editor An ASPxClientEdit object representing a custom editor.
     */
    SetSearchPanelCustomEditor(editor: ASPxClientEdit): void;
    /**
     * Converts the specified object to the ASPxClientTreeList type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientTreeList;
}
/**
 * Represents a client column.
 */
declare class ASPxClientTreeListColumn {
    /**
     * Gets the column's position within the collection.
     */
    index: number;
    /**
     * Gets the name that uniquely identifies the column.
     */
    name: string;
    /**
     * Gets the name of the database field assigned to the current column.
     */
    fieldName: string;
}
/**
 * Lists values that specify the document formats available for export from the tree list.
 */
declare class ASPxClientTreeListExportFormat {
    /**
     * Identifies Portable Document Format (.pdf).
     */
    static readonly Pdf: string;
    /**
     * Identifies DOCX format (.docx).
     */
    static readonly Docx: string;
    /**
     * Identifies Rich Text Format (.rtf).
     */
    static readonly Rtf: string;
    /**
     * Identifies Excel Binary File format (.xls).
     */
    static readonly Xls: string;
    /**
     * Identifies XML spreadsheet file format (.xlsx).
     */
    static readonly Xlsx: string;
}
/**
 * Provides data for the ASPxClientTreeList.CustomDataCallback event.
 */
declare class ASPxClientTreeListCustomDataCallbackEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the information that has been collected on the client-side and sent to the  server-side ASPxClientTreeList.CustomDataCallback event.
     */
    arg: string;
    /**
     * Gets the information passed from the server-side ASPxTreeList.CustomDataCallback event.
     */
    result: any;
}
/**
 * A method that will handle the ASPxClientTreeList.CustomDataCallback event.
 * @param source The event source.
 * @param e An ASPxClientTreeListCustomDataCallbackEventArgs object that contains event data.
 */
interface ASPxClientTreeListCustomDataCallbackEventHandler<Sender> { (source: Sender, e: ASPxClientTreeListCustomDataCallbackEventArgs): void; }
/**
 * Provides data for the ASPxClientTreeList.NodeClick and ASPxClientTreeList.NodeDblClick events.
 */
declare class ASPxClientTreeListNodeEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the processed node's key value.
     */
    nodeKey: string;
    /**
     * Provides access to the parameters associated with the ASPxClientTreeList.NodeClick and ASPxClientTreeList.NodeDblClick events.
     */
    htmlEvent: any;
    /**
     * Gets or sets a value indicating whether the action which raised the event should be canceled.
     */
    cancel: boolean;
}
/**
 * A method that will handle the ASPxClientTreeList.NodeDblClick event.
 * @param source The event source.
 * @param e An ASPxClientTreeListNodeEventArgs object that contains event data.
 */
interface ASPxClientTreeListNodeEventHandler<Sender> { (source: Sender, e: ASPxClientTreeListNodeEventArgs): void; }
/**
 * Provides data for the ASPxClientTreeList.ContextMenu event.
 */
declare class ASPxClientTreeListContextMenuEventArgs extends ASPxClientEventArgs {
    /**
     * Identifies which tree list element has been right-clicked.
     */
    objectType: string;
    /**
     * Gets a value that identifies the right-clicked object.
     */
    objectKey: any;
    /**
     * Gets a DHTML event object that relates to the processed event.
     */
    htmlEvent: any;
    /**
     * Gets or sets whether to invoke the browser's context menu.
     */
    cancel: boolean;
}
/**
 * A method that will handle the ASPxClientTreeList.ContextMenu event.
 * @param source The event sender.
 * @param e An ASPxClientTreeListContextMenuEventArgs object that contains event data.
 */
interface ASPxClientTreeListContextMenuEventHandler<Sender> { (source: Sender, e: ASPxClientTreeListContextMenuEventArgs): void; }
/**
 * Provides data for the ASPxClientTreeList.StartDragNode event.
 */
declare class ASPxClientTreeListStartDragNodeEventArgs extends ASPxClientTreeListNodeEventArgs {
    /**
     * Gets an array of targets where a node can be dragged.
     */
    targets: any[];
}
/**
 * A method that will handle the ASPxClientTreeList.StartDragNode event.
 * @param source The event source.
 * @param e An ASPxClientTreeListStartDragNodeEventArgs object that contains event data.
 */
interface ASPxClientTreeListStartDragNodeEventHandler<Sender> { (source: Sender, e: ASPxClientTreeListStartDragNodeEventArgs): void; }
/**
 * Provides data for the ASPxClientTreeList.EndDragNode event.
 */
declare class ASPxClientTreeListEndDragNodeEventArgs extends ASPxClientTreeListNodeEventArgs {
    /**
     * Gets the target element.
     */
    targetElement: any;
}
/**
 * A method that will handle the ASPxClientTreeList.EndDragNode event.
 * @param source The event source.
 * @param e An ASPxClientTreeListEndDragNodeEventArgs object that contains event data.
 */
interface ASPxClientTreeListEndDragNodeEventHandler<Sender> { (source: Sender, e: ASPxClientTreeListEndDragNodeEventArgs): void; }
/**
 * Provides data for the ASPxClientTreeList.CustomButtonClick event.
 */
declare class ASPxClientTreeListCustomButtonEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the key value of the node whose custom button has been clicked.
     */
    nodeKey: string;
    /**
     * Gets the button's index.
     */
    buttonIndex: number;
    /**
     * Gets the value which identifies the custom button.
     */
    buttonID: string;
}
/**
 * A method that will handle the ASPxClientTreeList.CustomButtonClick event.
 * @param source The event source.
 * @param e An ASPxClientTreeListCustomButtonEventArgs object that contains event data.
 */
interface ASPxClientTreeListCustomButtonEventHandler<Sender> { (source: Sender, e: ASPxClientTreeListCustomButtonEventArgs): void; }
/**
 * A JavaScript function which receives the list of row values when a specific client method (such as the ASPxClientTreeList.GetNodeValues or ASPxClientTreeList.GetSelectedNodeValues) is called.
 * @param result An object that represents the list of row values received from the server.
 */
interface ASPxClientTreeListValuesCallback { (result: any): void; }
/**
 * Provides data for the ASPxClientTreeList.ColumnResizing event.
 */
declare class ASPxClientTreeListColumnResizingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Gets the processed client column.
     */
    column: ASPxClientTreeListColumn;
}
/**
 * A method that will handle the ASPxClientTreeList.ColumnResizing event.
 * @param source The event source. Identifies the ASPxFileManager control that raised the event.
 * @param e A ASPxClientTreeListColumnResizingEventArgs object that contains event data.
 */
interface ASPxClientTreeListColumnResizingEventHandler<Sender> { (source: Sender, e: ASPxClientTreeListColumnResizingEventArgs): void; }
/**
 * Provides data for the ASPxClientTreeList.ColumnResized event.
 */
declare class ASPxClientTreeListColumnResizedEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Initializes a new instance of the ASPxClientTreeListColumnResizedEventArgs class with the specified setting.
     * @param column A ASPxClientTreeListColumn object that is the column related to the event.
     */
    constructor(column: ASPxClientTreeListColumn);
    /**
     * Gets the processed client column.
     */
    column: ASPxClientTreeListColumn;
}
/**
 * A method that will handle the ASPxClientTreeList.ColumnResized event.
 * @param source The event source. Identifies the ASPxFileManager control that raised the event.
 * @param e A ASPxClientTreeListColumnResizedEventArgs object that contains event data.
 */
interface ASPxClientTreeListColumnResizedEventHandler<Sender> { (source: Sender, e: ASPxClientTreeListColumnResizedEventArgs): void; }
/**
 * Provides data for the ASPxTreeList.ToolbarItemClick event.
 */
declare class ASPxClientTreeListToolbarItemClickEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Initializes a new instance of the ASPxClientTreeListToolbarItemClickEventArgs class.
     * @param item An ASPxClientMenu object that should be clicked to fire the event.
     * @param processOnServer true to process the event on the server side; false to completely handle it on the client side.
     */
    constructor(item: ASPxClientMenuItem, processOnServer: boolean);
    /**
     * Gets the toolbar index related to the event.
     */
    toolbarIndex: number;
    /**
     * Gets the toolbar name.
     */
    toolbarName: string;
    /**
     * Gets the clicked menu item
     */
    item: ASPxClientMenuItem;
    /**
     * Specifies whether a postback or a callback is used to finally process the event on the server side.
     */
    usePostBack: boolean;
}
/**
 * A method that will handle the ASPxClientTreeList.ToolbarItemClick event.
 * @param source The event source.
 * @param e An ASPxClientTreeListToolbarItemClickEventArgs object that contains event data.
 */
interface ASPxClientTreeListToolbarItemClickEventHandler<Sender> { (source: Sender, e: ASPxClientTreeListToolbarItemClickEventArgs): void; }
/**
 * A method that will handle the ASPxClientTreeList.BatchEditStartEditing event.
 * @param source The event source.
 * @param e A ASPxClientTreeListBatchEditStartEditingEventArgs object that contains event data.
 */
interface ASPxClientTreeListBatchEditStartEditingEventHandler<Sender> { (source: Sender, e: ASPxClientTreeListBatchEditStartEditingEventArgs): void; }
/**
 * Provides data for the ASPxClientTreeList.BatchEditStartEditing event.
 */
declare class ASPxClientTreeListBatchEditStartEditingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientTreeListBatchEditStartEditingEventArgs class.
     * @param nodeKey A String value that identifies the processed node.
     * @param focusedColumn An ASPxClientTreeListColumn object representing the focused column.
     * @param nodeValues An object representing a data source’s field values.
     */
    constructor(nodeKey: string, focusedColumn: ASPxClientTreeListColumn, nodeValues: any);
    /**
     * Gets the node's key value.
     */
    nodeKey: string;
    /**
     * Gets the tree list column that owns a cell that is about to be edited.
     */
    focusedColumn: ASPxClientTreeListColumn;
    /**
     * Gets the value of the processed cell.
     */
    nodeValues: any;
}
/**
 * A method that will handle the ASPxClientTreeList.BatchEditEndEditing event.
 * @param source The event source.
 * @param e A ASPxClientTreeListBatchEditEndEditingEventArgs object that contains event data.
 */
interface ASPxClientTreeListBatchEditEndEditingEventHandler<Sender> { (source: Sender, e: ASPxClientTreeListBatchEditEndEditingEventArgs): void; }
/**
 * Provides data for the ASPxClientTreeList.BatchEditEndEditing event.
 */
declare class ASPxClientTreeListBatchEditEndEditingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientTreeListBatchEditEndEditingEventArgs class.
     * @param nodeKey A String value that identifies the processed node.
     * @param nodeValues An object representing a data source’s field values.
     */
    constructor(nodeKey: string, nodeValues: any);
    /**
     * Gets the processed node's key value.
     */
    nodeKey: string;
    /**
     * Gets the value of the processed cell.
     */
    nodeValues: any;
}
/**
 * A method that will handle the ASPxClientTreeList.BatchEditNodeValidating event.
 * @param source The event source.
 * @param e A ASPxClientTreeListBatchEditNodeValidatingEventArgs object that contains event data.
 */
interface ASPxClientTreeListBatchEditNodeValidatingEventHandler<Sender> { (source: Sender, e: ASPxClientTreeListBatchEditNodeValidatingEventArgs): void; }
/**
 * Provides data for the ASPxClientTreeList.BatchEditNodeValidating event.
 */
declare class ASPxClientTreeListBatchEditNodeValidatingEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientTreeListBatchEditNodeValidatingEventArgs class.
     * @param nodeKey A String value that identifies the processed node.
     * @param validationInfo An object containing validation information.
     */
    constructor(nodeKey: string, validationInfo: any);
    /**
     * Gets the node's key value.
     */
    nodeKey: string;
    /**
     * Provides validation information of a validated node.
     */
    validationInfo: any;
}
/**
 * A method that will handle the ASPxClientTreeList.BatchEditTemplateCellFocused event.
 * @param source The event sender.
 * @param e A ASPxClientTreeListBatchEditTemplateCellFocusedEventArgs object that contains event data.
 */
interface ASPxClientTreeListBatchEditTemplateCellFocusedEventHandler<Sender> { (source: Sender, e: ASPxClientTreeListBatchEditTemplateCellFocusedEventArgs): void; }
/**
 * Provides data for the ASPxClientTreeList.BatchEditTemplateCellFocused event.
 */
declare class ASPxClientTreeListBatchEditTemplateCellFocusedEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientTreeListBatchEditTemplateCellFocusedEventArgs class.
     * @param column An ASPxClientTreeListColumn object specifying the column.
     */
    constructor(column: ASPxClientTreeListColumn);
    /**
     * Gets the currently processed column.
     */
    column: ASPxClientTreeListColumn;
    /**
     * Gets or sets a value specifying whether the event was handled.
     */
    handled: boolean;
}
/**
 * A method that will handle the ASPxClientTreeList.BatchEditChangesSaving event.
 * @param source The event source.
 * @param e A ASPxClientTreeListBatchEditChangesSavingEventArgs object that contains event data.
 */
interface ASPxClientTreeListBatchEditChangesSavingEventHandler<Sender> { (source: Sender, e: ASPxClientTreeListBatchEditChangesSavingEventArgs): void; }
/**
 * Provides data for the ASPxClientTreeList.BatchEditChangesSaving event.
 */
declare class ASPxClientTreeListBatchEditChangesSavingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientTreeListBatchEditChangesSavingEventArgs class.
     * @param insertedValues A hashtable that stores information about inserted cells.
     * @param deletedValues A hashtable that stores information about deleted cells.
     * @param updatedValues A hashtable that stores information about updated cells.
     */
    constructor(insertedValues: any, deletedValues: any, updatedValues: any);
    /**
     * Gets a hashtable that maintains information about inserted cells.
     */
    insertedValues: any;
    /**
     * Gets a hashtable that maintains information about deleted cells.
     */
    deletedValues: any;
    /**
     * Gets a hashtable that maintains information about updated cells.
     */
    updatedValues: any;
}
/**
 * A method that will handle the ASPxClientTreeList.BatchEditChangesCanceling event.
 * @param source The event source.
 * @param e A ASPxClientTreeListBatchEditChangesCancelingEventArgs object that contains event data.
 */
interface ASPxClientTreeListBatchEditChangesCancelingEventHandler<Sender> { (source: Sender, e: ASPxClientTreeListBatchEditChangesCancelingEventArgs): void; }
/**
 * Provides data for the ASPxClientTreeList.BatchEditChangesCanceling event.
 */
declare class ASPxClientTreeListBatchEditChangesCancelingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientTreeListBatchEditChangesCancelingEventArgs class.
     * @param insertedValues A hashtable that stores information about inserted cells.
     * @param deletedValues A hashtable that stores information about deleted cells.
     * @param updatedValues A hashtable that stores information about updated cells.
     */
    constructor(insertedValues: any, deletedValues: any, updatedValues: any);
    /**
     * Gets a hashtable that maintains information about inserted cells.
     */
    insertedValues: any;
    /**
     * Gets a hashtable that maintains information about deleted cells.
     */
    deletedValues: any;
    /**
     * Gets a hashtable that maintains information about updated cells.
     */
    updatedValues: any;
}
/**
 * A method that will handle the ASPxClientTreeList.BatchEditNodeInserting event.
 * @param source The event source.
 * @param e A ASPxClientTreeListBatchEditNodeInsertingEventArgs object that contains event data.
 */
interface ASPxClientTreeListBatchEditNodeInsertingEventHandler<Sender> { (source: Sender, e: ASPxClientTreeListBatchEditNodeInsertingEventArgs): void; }
/**
 * Provides data for the ASPxClientTreeList.BatchEditNodeInserting event.
 */
declare class ASPxClientTreeListBatchEditNodeInsertingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientTreeListBatchEditNodeInsertingEventArgs class.
     * @param nodeKey A String value that identifies the processed node.
     * @param parentNodeKey A String value that identifies the processed node's parent node.
     */
    constructor(nodeKey: string, parentNodeKey: string);
    /**
     * Gets the processed node's key value.
     */
    nodeKey: string;
    /**
     * Gets the parent node key.
     */
    parentNodeKey: string;
}
/**
 * A method that will handle the ASPxClientTreeList.BatchEditNodeDeleting event.
 * @param source The event source.
 * @param e A ASPxClientTreeListBatchEditNodeDeletingEventArgs object that contains event data.
 */
interface ASPxClientTreeListBatchEditNodeDeletingEventHandler<Sender> { (source: Sender, e: ASPxClientTreeListBatchEditNodeDeletingEventArgs): void; }
/**
 * Provides data for the ASPxClientTreeList.BatchEditNodeDeleting event.
 */
declare class ASPxClientTreeListBatchEditNodeDeletingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientTreeListBatchEditNodeDeletingEventArgs class.
     * @param nodeKey A String value that identifies the processed node.
     * @param nodeValues An object representing a data source field values.
     */
    constructor(nodeKey: string, nodeValues: any);
    /**
     * Gets the processed node's key value.
     */
    nodeKey: string;
    /**
     * Gets the value of the processed cell.
     */
    nodeValues: any;
}
/**
 * A method that will handle the ASPxClientTreeList.BatchEditNodeRecovering event.
 * @param source The event source.
 * @param e An ASPxClientTreeListBatchEditNodeRecoveringEventArgs object that contains event data.
 */
interface ASPxClientTreeListBatchEditNodeRecoveringEventHandler<Sender> { (source: Sender, e: ASPxClientTreeListBatchEditNodeRecoveringEventArgs): void; }
/**
 * Provides data for the ASPxClientTreeList.BatchEditNodeRecovering event.
 */
declare class ASPxClientTreeListBatchEditNodeRecoveringEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientTreeListBatchEditNodeRecoveringEventArgs class.
     * @param nodeKey A string object that is the node key.
     * @param nodeValues An object representing the node values.
     */
    constructor(nodeKey: string, nodeValues: any);
    /**
     * Gets the processed node's key value.
     */
    nodeKey: string;
    /**
     * Gets a hashtable that maintains information about recovered cells.
     */
    nodeValues: any;
}
/**
 * A method that will handle the ASPxClientTreeList.BatchEditConfirmShowing event.
 * @param source The event source.
 * @param e A ASPxClientTreeListBatchEditConfirmShowingEventArgs object that contains event data.
 */
interface ASPxClientTreeListBatchEditConfirmShowingEventHandler<Sender> { (source: Sender, e: ASPxClientTreeListBatchEditConfirmShowingEventArgs): void; }
/**
 * Provides data for the ASPxClientTreeList.BatchEditConfirmShowing event.
 */
declare class ASPxClientTreeListBatchEditConfirmShowingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientTreeListBatchEditConfirmShowingEventArgs class.
     * @param requestTriggerID A string value specifying the client identifier of an object that initiates a request.
     */
    constructor(requestTriggerID: string);
    /**
     * Gets the client identifier of an object that initiates a send request.
     */
    requestTriggerID: string;
}
/**
 * A method that will handle the ASPxClientTreeList.FocusedCellChanging event.
 * @param source The event source.
 * @param e A ASPxClientTreeListFocusedCellChangingEventArgs object that contains event data.
 */
interface ASPxClientTreeListFocusedCellChangingEventHandler<Sender> { (source: Sender, e: ASPxClientTreeListFocusedCellChangingEventArgs): void; }
/**
 * Provides data for the ASPxClientTreeList.FocusedCellChanging event.
 */
declare class ASPxClientTreeListFocusedCellChangingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientTreeListFocusedCellChangingEventArgs class.
     * @param cellInfo An ASPxClientTreeListCellInfo object providing information about the focused cell.
     */
    constructor(cellInfo: ASPxClientTreeListCellInfo);
    /**
     * Provides information on a cell currently being focused.
     */
    cellInfo: ASPxClientTreeListCellInfo;
}
/**
 * Provides members related to Batch Edit Mode.
 */
declare class ASPxClientTreeListBatchEditApi {
    /**
     * Programmatically moves the focus to the previous cell in the node.
     */
    MoveFocusBackward(): boolean;
    /**
     * Programmatically moves the focus to the next cell in the node.
     */
    MoveFocusForward(): boolean;
    /**
     * Gets information about the cell currently being edited.
     */
    GetEditCellInfo(): ASPxClientTreeListCellInfo;
    /**
     * Ends cell or node editing.
     */
    EndEdit(): void;
    /**
     * Provides the text displayed within the cell according to the specified display format rule. A string value representing the cell's displayed text.
     * @param columnFieldNameOrId A string value representing the column's unique identifier or field name.
     * @param value An object representing a value.
     */
    GetColumnDisplayText(columnFieldNameOrId: string, value: any): string;
    /**
     * Returns an object that stores unsaved changes.
     */
    GetUnsavedChanges(): any;
    /**
     * Sets the specified cell value.
     * @param nodeKey A string value that identifies the key of a node containing the processed cell.
     * @param columnFieldNameOrId A string value that specifies the field name or unique identifier (the column's WebColumnBase.Name property value) of a column containing the processed cell.
     * @param value An object that contains the new cell value.
     * @param displayText A string value that specifies the cell display text.
     * @param cancelCellHighlighting true to cancel highlighting of the modified cell, false to highlight the modified cell.
     */
    SetCellValue(nodeKey: string, columnFieldNameOrId: string, value: any, displayText?: string, cancelCellHighlighting?: boolean): void;
    /**
     * Gets the value of the specified cell. An object containing the specified cell's value.
     * @param nodeKey A zero-based integer value that specifies a visible index of a node containing the processed cell.
     * @param columnFieldNameOrId A string value that specifies the field name or unique identifier (the column's WebColumnBase.Name property value) of a column containing the processed cell.
     */
    GetCellValue(nodeKey: string, columnFieldNameOrId: string, initial?: boolean): any;
    /**
     * Gets a container holding data cell content. An object that is the HTML container element that contains the data cell's content.
     * @param nodeKey An integer value that is the visible index.
     * @param columnFieldNameOrId A string value that is the column's Field Name or ID.
     */
    GetCellTextContainer(nodeKey: string, columnFieldNameOrId: string): any;
    /**
     * Returns a value that indicates whether the specified node has changed data. true, if the node has changed data; otherwise, false.
     * @param nodeKey An string value that specifies the node key.
     * @param columnFieldNameOrId A string value that specifies the column's field name or unique identifier (the column's WebColumnBase.Name property value).
     */
    HasChanges(nodeKey?: string, columnFieldNameOrId?: string): boolean;
    /**
     * Resets changes in the specified node.
     * @param nodeKey An string value that specifies the key of the node containing the processed cell.
     * @param columnIndex An integer value that specifies the field name or unique identifier (the column's WebColumnBase.Name property value) of a column containing the processed cell.
     */
    ResetChanges(nodeKey: string, columnIndex?: number): void;
    /**
     * Switches the specified cell to edit mode.
     * @param nodeKey A string value that specifies the key of a node containing the processed cell.
     * @param columnIndex A zero-based integer value that identifies the column which contains the processed cell in the column collection.
     */
    StartEdit(nodeKey: string, columnIndex: number): void;
    /**
     * Performs validation of tree list data contained in all nodes when the tree list operates in Batch Edit mode. true, if data in all nodes passes validation; otherwise, false.
     * @param validateOnlyModified true, to validate only modified nodes; otherwise, false.
     */
    ValidateNodes(validateOnlyModified?: boolean): boolean;
    /**
     * Performs validation of tree list data contained in a specified node when the tree list operates in Batch Edit mode. true, if data in the specified node data passes validation; otherwise, false.
     * @param nodeKey An integer value specifying the visible index of the validated node.
     */
    ValidateNode(nodeKey: string): boolean;
    /**
     * Indicates if the node with the specified key is deleted. true, if the node is deleted; otherwise, false.
     * @param nodeKey An string value that identifies the node by its key.
     */
    IsDeletedNode(nodeKey: string): boolean;
    /**
     * Indicates if the node with the specified key is newly created. true, if the node is new; otherwise, false.
     * @param nodeKey An string value that identifies the node by its key.
     */
    IsNewNode(nodeKey: string): boolean;
    /**
     * Adds a new node when ASPxTreeList is in Batch Edit mode.
     * @param parentNodeKey A string value representing a parent node key.
     */
    AddNewNode(parentNodeKey: string): void;
    /**
     * Deletes the specified node when ASPxTreeList is in Batch Edit.
     * @param nodeKey An integer value that identifies the node index.
     */
    DeleteNode(nodeKey: string): void;
    /**
     * Recovers the specified node when ASPxTreeList is in Batch Edit mode.
     * @param nodeKey An string value that identifies the node key.
     */
    RecoverNode(nodeKey: string): void;
    /**
     * Returns an array of node keys. An array of string values that are node keys.
     * @param includeDeleted true, to include deleted cards keys to the returned array; otherwise, false.
     */
    GetNodeKeys(includeDeleted: boolean): string[];
    /**
     * Returns an array of the inserted node keys.
     */
    GetInsertedNodeKeys(): string[];
    /**
     * Returns an array of the deleted node keys.
     */
    GetDeletedNodeKeys(): string[];
    /**
     * Returns an array of the updated nodes' keys.
     */
    GetUpdatedNodeKeys(): string[];
}
/**
 * Contains information on a tree list cell.
 */
declare class ASPxClientTreeListCellInfo {
    /**
     * Gets the processed node's key value.
     */
    nodeKey: string;
    /**
     * Gets the data column that contains the cell currently being processed.
     */
    column: ASPxClientTreeListColumn;
}
/**
 * Represents a client-side equivalent of the ASPxCallback control.
 */
declare class ASPxClientCallback extends ASPxClientControl {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientCallback>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientCallback>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientCallback.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientCallback>>;
    /**
     * Fires on the client side when a callback initiated by the client ASPxClientCallback.PerformCallback method and processed within the server ASPxCallback.Callback event's handler returns back to the client.
     */
    CallbackComplete: ASPxClientEvent<ASPxClientCallbackCompleteEventHandler<ASPxClientCallback>>;
    /** @deprecated Use the PerformCallback method instead. */
    /**
     * Sends a callback to the server and generates the server-side ASPxCallback.Callback event passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side ASPxCallback.Callback event.
     */
    SendCallback(parameter: string): void;
    /**
     * Sends a callback to the server and generates the server-side ASPxCallback.Callback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side ASPxCallback.Callback event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(parameter: string, onSuccess?: (arg: string) => void): void;
    /**
     * Converts the specified object to the ASPxClientCallback type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientCallback;
}
/**
 * A method that will handle the client events related to completion of callback server-side processing.
 * @param source An object representing the event source. Identifies the web control that raised the event.
 * @param e An ASPxClientCallbackCompleteEventArgs object that contains event data.
 */
interface ASPxClientCallbackCompleteEventHandler<Sender> { (source: Sender, e: ASPxClientCallbackCompleteEventArgs): void; }
/**
 * Provides data for events concerning the final processing of a callback.
 */
declare class ASPxClientCallbackCompleteEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new object of the ASPxClientCallbackCompleteEventArgs type with the specified settings.
     * @param parameter A string value that represents a parameter passed to the server for processing.
     * @param result A string value that represents the result of server-side processing.
     */
    constructor(parameter: string, result: string);
    /**
     * Gets a string that contains specific information (if any) passed from the client side for server-side processing.
     */
    parameter: string;
    /**
     * Gets a string that contains specific information (if any) that has been passed from the server to the client side for further processing.
     */
    result: string;
}
/**
 * Represents a client-side equivalent of the ASPxCallbackPanel control.
 */
declare class ASPxClientCallbackPanel extends ASPxClientPanel {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientCallbackPanel>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientCallbackPanel>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientCallbackPanel.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientCallbackPanel>>;
    /**
     * Sends a callback to the server and generates the server-side ASPxCallbackPanel.Callback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side ASPxCallbackPanel.Callback event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(parameter: string, onSuccess?: (arg: string) => void): void;
    /**
     * Returns the text displayed within the control's loading panel.
     */
    GetLoadingPanelText(): string;
    /**
     * Sets the text to be displayed within the control's loading panel.
     * @param loadingPanelText A string value specifying the text to be displayed within the loading panel.
     */
    SetLoadingPanelText(loadingPanelText: string): void;
    /**
     * Sets a value specifying whether the callback panel is enabled.
     * @param enabled true, to enable the callback panel; false to disable it.
     */
    SetEnabled(enabled: boolean): void;
    /**
     * Returns a value specifying whether a callback panel is enabled.
     */
    GetEnabled(): boolean;
    /**
     * Converts the specified object to the ASPxClientCallbackPanel type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientCallbackPanel;
}
/**
 * Represents the event object used for client-side events.
 */
declare class ASPxClientEvent<T> {
    /**
     * Dynamically connects the event with an appropriate event handler function.
     * @param handler An object representing the event handling function's content.
     */
    AddHandler(handler: T): void;
    /**
     * Dynamically disconnects the event from the associated event handler function.
     * @param handler An object representing the event handling function's content.
     */
    RemoveHandler(handler: T): void;
    /**
     * Dynamically disconnects the event from all the associated event handler functions.
     */
    ClearHandlers(): void;
    /**
     * For internal use only.
     */
    FireEvent(source: any, e: ASPxClientEventArgs): void;
}
/**
 * A method that will handle the client-side events of a web control's client-side equivalent.
 * @param source An object representing the event source. Identifies the control that raised the event.
 * @param e An ASPxClientEventArgs object that contains event data.
 */
interface ASPxClientEventHandler<Sender> { (source: Sender, e: ASPxClientEventArgs): void; }
/**
 * Serves as the base class for arguments of the web controls' client-side events.
 */
declare class ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientEventArgs object.
     */
    constructor();
}
/**
 * A method that will handle the cancelable events of a web control's client-side equivalent.
 * @param source An object representing the event source. Identifies the web control that raised the event.
 * @param e An ASPxClientCancelEventArgs object that contains event data.
 */
interface ASPxClientCancelEventHandler<Sender> { (source: Sender, e: ASPxClientCancelEventArgs): void; }
/**
 * Provides data for cancelable client events.
 */
declare class ASPxClientCancelEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new object of the ASPxClientCancelEventArgs type with the specified value.
     */
    constructor();
    /**
     * Gets or sets a value indicating whether the action which raised the event should be canceled.
     */
    cancel: boolean;
}
/**
 * A method that will handle the client events which can't be cancelled and allow the event's processing to be passed to the server side.
 * @param source An object representing the event source. Identifies the web control that raised the event.
 * @param e An ASPxClientProcessingModeEventArgs object that contains event data.
 */
interface ASPxClientProcessingModeEventHandler<Sender> { (source: Sender, e: ASPxClientProcessingModeEventArgs): void; }
/**
 * Provides data for the client events which can't be cancelled and allow the event's processing to be passed to the server side.
 */
declare class ASPxClientProcessingModeEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientProcessingModeEventArgs object.
     * @param processOnServer true to process the event on the server side; false to completely handle it on the client side. Initializes the ASPxClientProcessingModeEventArgs.processOnServer property.
     */
    constructor(processOnServer: boolean);
    /**
     * Gets or sets a value that specifies whether the event should be finally processed on the server side.
     */
    processOnServer: boolean;
}
/**
 * A method that will handle the cancelable client-side events which allow the event's processing to be passed to the server side.
 * @param source An object representing the event source. Identifies the web control that raised the event.
 * @param e An ASPxClientProcessingModeCancelEventArgs object that contains event data.
 */
interface ASPxClientProcessingModeCancelEventHandler<Sender> { (source: Sender, e: ASPxClientProcessingModeCancelEventArgs): void; }
/**
 * Provides data for the cancelable client-side events which allow the event's processing to be passed to the server side.
 */
declare class ASPxClientProcessingModeCancelEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Initializes a new instance of the ASPxClientProcessingModeCancelEventArgs object.
     * @param processOnServer true to process the event on the server side; false to completely handle it on the client side. Initializes the ASPxClientProcessingModeEventArgs.processOnServer property.
     */
    constructor(processOnServer: boolean);
    /**
     * Gets or sets a value indicating whether the action which raised the event should be canceled.
     */
    cancel: boolean;
}
/**
 * A JavaScript function which receives a callback data obtained via a call to a specific client method (such as the ASPxClientHtmlEditor.PerformDataCallback).
 * @param sender An object whose client method generated a callback.
 * @param result A string value that represents the result of server-side callback processing.
 */
interface ASPxClientDataCallback { (sender: any, result: string): void; }
/**
 * Represents a client-side equivalent of the ASPxCloudControl control.
 */
declare class ASPxClientCloudControl extends ASPxClientControl {
    /**
     * Fires after an item has been clicked.
     */
    ItemClick: ASPxClientEvent<ASPxClientCloudControlItemEventHandler<ASPxClientCloudControl>>;
    /**
     * Converts the specified object to the ASPxClientCloudControl type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientCloudControl;
}
/**
 * A method that will handle client events concerning manipulations with items.
 * @param source The event source. This parameter identifies the cloud control object which raised the event.
 * @param e An ASPxClientCloudControlItemEventArgs object that contains event data.
 */
interface ASPxClientCloudControlItemEventHandler<Sender> { (source: Sender, e: ASPxClientCloudControlItemEventArgs): void; }
/**
 * Provides data for events which involve clicking on the control's items.
 */
declare class ASPxClientCloudControlItemEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Initializes a new object of the ASPxClientCloudControlItemEventArgs type with the specified settings.
     * @param processOnServer true to process the event on the server side; false to completely handle it on the client side.
     * @param name A string value that identifies the item related to the event.
     * @param htmlElement An HTML object that contains the processed item.
     * @param htmlEvent A DHTML event object that relates to the processed event.
     */
    constructor(processOnServer: boolean, name: string, htmlElement: any, htmlEvent: any);
    /**
     * Gets the name that uniquely identifies the processed item.
     */
    name: any;
    /**
     * Gets the HTML object that contains the processed item.
     */
    htmlElement: any;
    /**
     * Gets a DHTML event object that relates to the processed event.
     */
    htmlEvent: any;
}
/**
 * A method that will handle client BeginCallback events.
 * @param source An object representing the event source. Identifies the web control that raised the event.
 * @param e An ASPxClientBeginCallbackEventArgs object that contains event data.
 */
interface ASPxClientBeginCallbackEventHandler<Sender> { (source: Sender, e: ASPxClientBeginCallbackEventArgs): void; }
/**
 * Provides data for client events related to the beginning of a callback processing round trip.
 */
declare class ASPxClientBeginCallbackEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientBeginCallbackEventArgs object with the specified setting.
     * @param command A string value that specifies the command.
     */
    constructor(command: string);
    /**
     * Gets a command name that identifies which client action forced a callback to occur.
     */
    command: string;
}
/**
 * A method that will handle the ASPxClientGlobalEvents.BeginCallback event.
 * @param source The event source.
 * @param e An ASPxDataValidationEventArgs object that contains event data.
 */
interface ASPxClientGlobalBeginCallbackEventHandler<Sender> { (source: Sender, e: ASPxClientGlobalBeginCallbackEventArgs): void; }
/**
 * Provides data for the ASPxClientGlobalEvents.BeginCallback event.
 */
declare class ASPxClientGlobalBeginCallbackEventArgs extends ASPxClientBeginCallbackEventArgs {
    /**
     * Initializes a new instance of the ASPxClientGlobalBeginCallbackEventArgs class.
     * @param control An ASPxClientControl class descendant object that is the control that initiated a callback.
     * @param command A string value that is the name of the command that initiated a callback.
     */
    constructor(control: ASPxClientControl, command: string);
    /**
     * Gets an object that initiated a callback.
     */
    control: ASPxClientControl;
}
/**
 * A method that will handle client EndCallback events.
 * @param source An object representing the event source.
 * @param e A MenuItemEventArgs object that contains event data.
 */
interface ASPxClientEndCallbackEventHandler<Sender> { (source: Sender, e: ASPxClientEndCallbackEventArgs): void; }
/**
 * Provides data for client events related to the completion of a callback processing round trip.
 */
declare class ASPxClientEndCallbackEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientEndCallbackEventArgs object.
     * @param command Specifies the command.
     */
    constructor(command: string);
    /**
     * Gets a command name that identifies which client action forced a callback to occur.
     */
    command: string;
}
/**
 * A method that will handle the ASPxClientGlobalEvents.EndCallback event.
 * @param source The event source.
 * @param e An ASPxDataValidationEventArgs object that contains event data.
 */
interface ASPxClientGlobalEndCallbackEventHandler<Sender> { (source: Sender, e: ASPxClientGlobalEndCallbackEventArgs): void; }
/**
 * Provides data for the ASPxClientGlobalEvents.EndCallback event.
 */
declare class ASPxClientGlobalEndCallbackEventArgs extends ASPxClientEndCallbackEventArgs {
    /**
     * Initializes a new instance of the ASPxClientGlobalEndCallbackEventArgs class.
     * @param control An ASPxClientControl class descendant object that is the control that initiated a callback.
     */
    constructor(control: ASPxClientControl);
    /**
     * Gets an object that initiated a callback.
     */
    control: ASPxClientControl;
}
/**
 * A method that will handle the client CustomCallback event of some controls.
 * @param source An object representing the event source.
 * @param e An ASPxClientCustomDataCallbackEventHandler&lt;Sender&gt; object that contains event data.
 */
interface ASPxClientCustomDataCallbackEventHandler<Sender> { (source: Sender, e: ASPxClientCustomDataCallbackEventArgs): void; }
/**
 * Provides data for the CustomCallback event.
 */
declare class ASPxClientCustomDataCallbackEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new object of the ASPxClientCustomDataCallbackEventArgs type with the specified settings.
     * @param result A string value that represents the result of server-side processing.
     */
    constructor(result: string);
    /**
     * Gets a string that contains specific information (if any) that has been passed from the server to the client side for further processing, related to the CustomCallback event.
     */
    result: string;
}
/**
 * A method that will handle client CallbackError events.
 * @param source An object representing the event source.
 * @param e A ASPxClientCallbackErrorEventArgs object that contains event data.
 */
interface ASPxClientCallbackErrorEventHandler<Sender> { (source: Sender, e: ASPxClientCallbackErrorEventArgs): void; }
/**
 * Provides data for client events related to server-side errors that occured during callback processing.
 */
declare class ASPxClientCallbackErrorEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new ASPxClientCallbackErrorEventArgs object with the specified settings.
     * @param message A string value that specifies the error message.
     */
    constructor(message: string);
    /**
     * Gets the error message that describes the server error that occurred.
     */
    message: string;
    /**
     * Gets or sets whether the event is handled and the default error handling actions are not required.
     */
    handled: boolean;
}
/**
 * A method that will handle the ASPxClientGlobalEvents.CallbackError event.
 * @param source The event source.
 * @param e An ASPxDataValidationEventArgs object that contains event data.
 */
interface ASPxClientGlobalCallbackErrorEventHandler<Sender> { (source: Sender, e: ASPxClientGlobalCallbackErrorEventArgs): void; }
/**
 * Provides data for the ASPxClientGlobalEvents.CallbackError event.
 */
declare class ASPxClientGlobalCallbackErrorEventArgs extends ASPxClientCallbackErrorEventArgs {
    /**
     * Initializes a new instance of the ASPxClientGlobalCallbackErrorEventArgs class.
     * @param control An ASPxClientControl class descendant object that is the control that initiated a callback.
     * @param message A string value that is the error message.
     */
    constructor(control: ASPxClientControl, message: string);
    /**
     * Gets an object that initiated a callback.
     */
    control: ASPxClientControl;
}
/**
 * A method that will handle the ASPxClientGlobalEvents.ValidationCompleted event.
 * @param source An object representing the event source. Identifies the ASPxClientGlobalEvents object that raised the event.
 * @param e An ASPxClientValidationCompletedEventArgs object that contains event data.
 */
interface ASPxClientValidationCompletedEventHandler<Sender> { (source: Sender, e: ASPxClientValidationCompletedEventArgs): void; }
/**
 * Provides data for the ASPxClientGlobalEvents.ValidationCompleted client event that allows you to centrally validate user input within all DevExpress web controls to which validation is applied.
 */
declare class ASPxClientValidationCompletedEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientValidationCompletedEventArgs class.
     * @param container An object representing the container of controls that have been validated.
     * @param validationGroup A string value that specifies the name of the group of controls that has been validated.
     * @param invisibleControlsValidated true if both visible and invisible input controls have been validated; false if only visible input controls have been validated.
     * @param isValid true if the validation has been completed successfully; otherwise, false.
     * @param firstInvalidControl An object representing the first input control that has an invalid value.
     * @param firstVisibleInvalidControl An object representing the first visible input control that has an invalid value.
     */
    constructor(container: any, validationGroup: string, invisibleControlsValidated: boolean, isValid: boolean, firstInvalidControl: ASPxClientControl, firstVisibleInvalidControl: ASPxClientControl);
    /**
     * Gets a container object that holds the validated control(s).
     */
    container: any;
    /**
     * Gets the name of the validation group name to which validation has been applied.
     */
    validationGroup: string;
    /**
     * Gets a value that indicates whether validation has been applied to both visible and invisible controls.
     */
    invisibleControlsValidated: boolean;
    /**
     * Gets a value specifying whether the validation has been completed successfully.
     */
    isValid: boolean;
    /**
     * Gets the first control (either visible or invisible) that hasn't passed the validation applied.
     */
    firstInvalidControl: ASPxClientControl;
    /**
     * Gets the first visible control that hasn't passed the validation applied.
     */
    firstVisibleInvalidControl: ASPxClientControl;
}
/**
 * A method that will handle the client ASPxClientControlCollection.ControlsInitialized event.
 * @param source An object representing the event source.
 * @param e An ASPxClientControlsInitializedEventArgs object that contains event data.
 */
interface ASPxClientControlsInitializedEventHandler<Sender> { (source: Sender, e: ASPxClientControlsInitializedEventArgs): void; }
/**
 * Provides data for the client ASPxClientControlCollection.ControlsInitialized event.
 */
declare class ASPxClientControlsInitializedEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new object of the ASPxClientControlsInitializedEventArgs type with the specified settings.
     * @param isCallback true if a callback is sent to the server during controls initialization; otherwise, false.
     */
    constructor(isCallback: boolean);
    /**
     * Gets a value that specifies whether a callback is sent during a controls initialization.
     */
    isCallback: boolean;
}
/**
 * Serves as the base type for all the objects included in the client-side object model.
 */
declare class ASPxClientControlBase {
    /**
     * Gets the unique, hierarchically-qualified identifier for the control.
     */
    name: string;
    /**
     * Occurs on the client side after the control has been initialized.
     */
    Init: ASPxClientEvent<ASPxClientEventHandler<ASPxClientControlBase>>;
    /**
     * Returns an HTML element that is the root of the control's hierarchy.
     */
    GetMainElement(): any;
    /**
     * Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
     * @param message A String value that specifies a text.
     */
    SendMessageToAssistiveTechnology(message: string): void;
    /**
     * Returns a client instance of the control that is the parent for a specified control.
     */
    GetParentControl(): any;
    /** @deprecated Use the GetVisible method instead. */
    /**
     * Returns a value specifying whether a control is displayed.
     */
    GetClientVisible(): boolean;
    /** @deprecated Use the SetVisible method instead. */
    /**
     * Specifies whether a control is displayed.
     */
    SetClientVisible(visible: boolean): void;
    /**
     * Returns a value specifying whether a control is displayed.
     */
    GetVisible(): boolean;
    /**
     * Specifies whether a control is displayed.
     * @param visible true to make a control visible; false to make it hidden.
     */
    SetVisible(visible: boolean): void;
    /**
     * Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
     */
    InCallback(): boolean;
    /**
     * Converts the specified object to the current object's type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientControlBase;
}
/**
 * Serves as the base type for all the objects included in the client-side object model.
 */
declare class ASPxClientControl extends ASPxClientControlBase {
    /**
     * Returns the control's width.
     */
    GetWidth(): number;
    /**
     * Returns the control's height.
     */
    GetHeight(): number;
    /**
     * Specifies the control's width in pixels.
     * @param width An integer value that specifies the control's width, in pixels.
     */
    SetWidth(width: number): void;
    /**
     * Specifies the control's height.  Note that this method is not in effect for some controls.
     * @param height An integer value that specifies the control's height.
     */
    SetHeight(height: number): void;
    /**
     * Modifies the control's size against the control's container.
     */
    AdjustControl(): void;
    /**
     * Converts the specified object to the current object's type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientControl;
    /**
     * Modifies the controls size within the specified container.
     * @param container An HTML element that is the container of the controls.
     */
    static AdjustControls(container?: any): void;
    /**
     * Returns a collection of client web control objects.
     */
    static GetControlCollection(): ASPxClientControlCollection;
}
/**
 * A JavaScript function which returns a value specifying whether an object meets the criteria defined within the method specified by this delegate. true if the object meets the criteria; otherwise, false.
 * @param control An object to compare against the criteria defined within the method.
 */
interface ASPxClientControlPredicate { (control: any): boolean; }
/**
 * Represents a JavaScript function which receives the action to perform for a control when the client ASPxClientControlCollection.ForEachControl method is called.
 * @param control An object that specifies a control.
 */
interface ASPxClientControlAction { (control: any): void; }
/**
 * A collection object used on the client side to maintain particular client control objects
 */
declare class ASPxClientControlCollection {
    /**
     * Occurs on the client side after client object models of all DevExpress web controls contained within the page have been initialized.
     */
    ControlsInitialized: ASPxClientEvent<ASPxClientControlsInitializedEventHandler<ASPxClientControlCollection>>;
    /**
     * Occurs when the browser window is being resized.
     */
    BrowserWindowResized: ASPxClientEvent<ASPxClientEventHandler<ASPxClientControlCollection>>;
    /**
     * Occurs when a callback for server-side processing is initiated by any DevExpress control.
     */
    BeginCallback: ASPxClientEvent<ASPxClientGlobalBeginCallbackEventHandler<ASPxClientControlCollection>>;
    /**
     * Occurs on the client side, after server-side processing of a callback initiated by any DevExpress web control, has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientGlobalEndCallbackEventHandler<ASPxClientControlCollection>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by any DevExpress web control.
     */
    CallbackError: ASPxClientEvent<ASPxClientGlobalCallbackErrorEventHandler<ASPxClientControlCollection>>;
    /**
     * Occurs after the validation initiated for a DevExpress web control (or a group of DevExpress web controls) has been completed.
     */
    ValidationCompleted: ASPxClientEvent<ASPxClientValidationCompletedEventHandler<ASPxClientControlCollection>>;
    /** @deprecated Use the GetByName method instead. */
    /**
     * Returns a collection item identified by its unique hierarchically-qualified identifier. An object representing the collection item found.
     * @param name A string value representing the hierarchically-qualified identifier of the required control.
     */
    Get(name: any): any;
    /**
     * Returns a DevExpress client control object identified by its unique hierarchically-qualified identifier (either ClientInstanceName or ClientID property value). An object that is the client control object found.
     * @param name A string value that is the hierarchically-qualified identifier of the required DevExpress control.
     */
    GetByName(name: string): any;
    /**
     * Returns all controls in the collection that satisfy the specified predicate. An array of all client controls found.
     * @param predicate An ASPxClientControlPredicate object that is a predicate used to search for controls in the collection.
     */
    GetControlsByPredicate(predicate: ASPxClientControlPredicate): any[];
    /**
     * Returns all controls of the specified type. An array of all client controls found.
     * @param type The object specifying the client control type.
     */
    GetControlsByType(type: any): any[];
    /**
     * Performs the specified action for each control in the collection.
     * @param action An ASPxClientControlAction object specifying an action to perform.
     */
    ForEachControl(action: ASPxClientControlAction): void;
}
/**
 * Represents a client-side equivalent of the ASPxDataView object.
 */
declare class ASPxClientDataView extends ASPxClientControl {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientDataView>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientDataView>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientDataView.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientDataView>>;
    /**
     * Activates the specified page.
     * @param pageIndex An integer value that specifies the active page's index.
     */
    GotoPage(pageIndex: number): void;
    /**
     * Gets the index of the page that is currently active.
     */
    GetPageIndex(): number;
    /**
     * Gets the size of a single ASPxDataView's page.
     */
    GetPageSize(): number;
    /**
     * Sets the size of a single ASPxDataView's page.
     * @param pageSize An integer value that specifies the page size.
     */
    SetPageSize(pageSize: number): void;
    /**
     * Gets the number of pages into which the ASPxDataView's data is divided.
     */
    GetPageCount(): number;
    /**
     * Activates the next page.
     */
    NextPage(): void;
    /**
     * Activates the previous page.
     */
    PrevPage(): void;
    /**
     * Activates the first page.
     */
    FirstPage(): void;
    /**
     * Activates the last page.
     */
    LastPage(): void;
    /**
     * Sends a callback to the server and generates the server-side ASPxDataViewBase.CustomCallback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side ASPxDataViewBase.CustomCallback event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(parameter: string, onSuccess?: (arg: string) => void): void;
    /**
     * Converts the specified object to the ASPxClientDataView type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientDataView;
}
/**
 * A JavaScript function which returns a value specifying whether an object meets the criteria defined within the method specified by this delegate. true if the object meets the criteria; otherwise, false.
 * @param item An object to compare against the criteria defined within the method.
 */
interface ASPxClientDockingFilterPredicate { (item: any): boolean; }
/**
 * A client-side equivalent of the ASPxDockManager object.
 */
declare class ASPxClientDockManager extends ASPxClientControl {
    /**
     * Fires on the client side before a panel is docked in a zone and allows you to cancel the action.
     */
    BeforeDock: ASPxClientEvent<ASPxClientDockManagerProcessingModeCancelEventHandler<ASPxClientDockManager>>;
    /**
     * Fires on the client side after a panel is docked in a zone.
     */
    AfterDock: ASPxClientEvent<ASPxClientDockManagerProcessingModeEventHandler<ASPxClientDockManager>>;
    /**
     * Fires on the client side before a panel is made floating (undocked from a zone) and allows you to cancel the action.
     */
    BeforeFloat: ASPxClientEvent<ASPxClientDockManagerProcessingModeCancelEventHandler<ASPxClientDockManager>>;
    /**
     * Fires on the client side after a panel is undocked from a zone.
     */
    AfterFloat: ASPxClientEvent<ASPxClientDockManagerProcessingModeEventHandler<ASPxClientDockManager>>;
    /**
     * Occurs when a panel dragging operation is started.
     */
    StartPanelDragging: ASPxClientEvent<ASPxClientDockManagerEventHandler<ASPxClientDockManager>>;
    /**
     * Occurs after a panel dragging operation is complete.
     */
    EndPanelDragging: ASPxClientEvent<ASPxClientDockManagerEventHandler<ASPxClientDockManager>>;
    /**
     * Occurs on the client side before a panel is closed, and allows you to cancel the action.
     */
    PanelClosing: ASPxClientEvent<ASPxClientDockManagerCancelEventHandler<ASPxClientDockManager>>;
    /**
     * Occurs on the client side when a panel is closed.
     */
    PanelCloseUp: ASPxClientEvent<ASPxClientDockManagerEventHandler<ASPxClientDockManager>>;
    /**
     * Occurs on the client side when a panel pops up.
     */
    PanelPopUp: ASPxClientEvent<ASPxClientDockManagerEventHandler<ASPxClientDockManager>>;
    /**
     * Occurs on the client side after a panel has been invoked.
     */
    PanelShown: ASPxClientEvent<ASPxClientDockManagerEventHandler<ASPxClientDockManager>>;
    /**
     * Occurs on the client side after a panel has been resized.
     */
    PanelResize: ASPxClientEvent<ASPxClientDockManagerEventHandler<ASPxClientDockManager>>;
    /**
     * Sends a callback to the server and generates the server-side ASPxDockManager.Callback event, passing it the specified argument.
     * @param parameter A string value that contains any information that needs to be sent to the server-side ASPxDockManager.Callback event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(parameter: string, onSuccess?: (arg: string) => void): void;
    /**
     * Returns a zone specified by its unique identifier (zoneUID). An ASPxClientDockZone object that is the zone with the specified unique identifier.
     * @param zoneUID A string value specifying the unique identifier of the zone.
     */
    GetZoneByUID(zoneUID: string): ASPxClientDockZone;
    /**
     * Returns a panel specified by its unique identifier (panelUID). An ASPxClientDockPanel object that is the panel with the specified unique identifier.
     * @param panelUID A string value specifying the unique identifier of the panel.
     */
    GetPanelByUID(panelUID: string): ASPxClientDockPanel;
    /**
     * Returns an array of panels that are contained in a page and meet a specified criteria. An array of ASPxClientDockPanel objects.
     * @param filterPredicate An ASPxClientDockingFilterPredicate delegate that defines a set of criteria and determines whether a panel meets those criteria.
     */
    GetPanels(filterPredicate?: ASPxClientDockingFilterPredicate): ASPxClientDockPanel[];
    /**
     * Returns an array of zones that are contained in a page and meet a specified criteria. An array of ASPxClientDockZone objects.
     * @param filterPredicate An ASPxClientDockingFilterPredicate delegate that defines a set of criteria and determines whether a zone meets those criteria.
     */
    GetZones(filterPredicate?: ASPxClientDockingFilterPredicate): ASPxClientDockZone[];
    /**
     * Converts the specified object to the ASPxClientDockManager type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientDockManager;
}
/**
 * A method that will handle the ASPxClientDockManager.BeforeDock event.
 * @param source The event source. This parameter identifies the dock manager object which raised the event.
 * @param e An ASPxClientDockManagerProcessingModeCancelEventArgs object that contains event data.
 */
interface ASPxClientDockManagerProcessingModeCancelEventHandler<Sender> { (source: Sender, e: ASPxClientDockManagerProcessingModeCancelEventArgs): void; }
/**
 * Provides data for the ASPxClientDockManager.BeforeDock event.
 */
declare class ASPxClientDockManagerProcessingModeCancelEventArgs extends ASPxClientProcessingModeCancelEventArgs {
    /**
     * For internal use only.
     */
    constructor(processOnServer: boolean, panel: ASPxClientDockPanel, zone: ASPxClientDockZone);
    /**
     * Gets the panel currently being processed.
     */
    panel: ASPxClientDockPanel;
    /**
     * Gets the zone currently being processed.
     */
    zone: ASPxClientDockZone;
}
/**
 * A method that will handle the ASPxClientDockManager.AfterDock event.
 * @param source The event source. This parameter identifies the dock manager object which raised the event.
 * @param e An ASPxClientDockManagerProcessingModeEventArgs object that contains event data.
 */
interface ASPxClientDockManagerProcessingModeEventHandler<Sender> { (source: Sender, e: ASPxClientDockManagerProcessingModeEventArgs): void; }
/**
 * Provides data for the ASPxClientDockManager.AfterDock event.
 */
declare class ASPxClientDockManagerProcessingModeEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Initializes a new object of the ASPxClientDockManagerProcessingModeEventArgs type with the specified settings.
     * @param processOnServer true to process the event on the server side; false to completely handle it on the client side.
     * @param panel An ASPxClientDockPanel object that is a panel related to the event.
     * @param zone An ASPxClientDockZone object that is a zone related to the event.
     */
    constructor(processOnServer: boolean, panel: ASPxClientDockPanel, zone: ASPxClientDockZone);
    /**
     * Gets the panel currently being processed.
     */
    panel: ASPxClientDockPanel;
    /**
     * Gets the zone currently being processed.
     */
    zone: ASPxClientDockZone;
}
/**
 * A method that will handle client-side events concerning manipulations with panels.
 * @param source The event source. This parameter identifies the dock manager object which raised the event.
 * @param e An ASPxClientDockManagerEventArgs object that contains event data.
 */
interface ASPxClientDockManagerEventHandler<Sender> { (source: Sender, e: ASPxClientDockManagerEventArgs): void; }
/**
 * Provides data for events which concern manipulations on panels.
 */
declare class ASPxClientDockManagerEventArgs extends ASPxClientEventArgs {
    /**
     * For internal use only.
     */
    constructor(panel: ASPxClientDockPanel);
    /**
     * Gets the panel currently being processed.
     */
    panel: ASPxClientDockPanel;
}
/**
 * A method that will handle the ASPxClientDockManager.PanelClosing event.
 * @param source The event source. This parameter identifies the dock manager object which raised the event.
 * @param e An ASPxClientDockManagerCancelEventArgs object that contains event data.
 */
interface ASPxClientDockManagerCancelEventHandler<Sender> { (source: Sender, e: ASPxClientDockManagerCancelEventArgs): void; }
/**
 * Provides data for the ASPxClientDockManager.BeforeDock event.
 */
declare class ASPxClientDockManagerCancelEventArgs extends ASPxClientCancelEventArgs {
    /**
     * For internal use only.
     */
    constructor(panel: ASPxClientDockPanel);
    /**
     * Gets the panel currently being processed.
     */
    panel: ASPxClientDockPanel;
}
/**
 * A client-side equivalent of the ASPxDockPanel object.
 */
declare class ASPxClientDockPanel extends ASPxClientPopupControlBase {
    /**
     * Gets or sets the unique identifier of a panel on a page.
     */
    panelUID: string;
    /**
     * Fires on the client side before a panel is docked in a zone and allows you to cancel the action.
     */
    BeforeDock: ASPxClientEvent<ASPxClientDockPanelProcessingModeCancelEventHandler<ASPxClientDockPanel>>;
    /**
     * Fires on the client side after a panel is docked in a zone.
     */
    AfterDock: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientDockPanel>>;
    /**
     * Fires on the client side before a panel is made floating (undocked from a zone) and allows you to cancel the action.
     */
    BeforeFloat: ASPxClientEvent<ASPxClientDockPanelProcessingModeCancelEventHandler<ASPxClientDockPanel>>;
    /**
     * Fires on the client side after a panel is undocked from a zone.
     */
    AfterFloat: ASPxClientEvent<ASPxClientDockPanelProcessingModeEventHandler<ASPxClientDockPanel>>;
    /**
     * Occurs when a panel dragging operation is started.
     */
    StartDragging: ASPxClientEvent<ASPxClientEventHandler<ASPxClientDockPanel>>;
    /**
     * Occurs after a panel dragging operation is complete.
     */
    EndDragging: ASPxClientEvent<ASPxClientEventHandler<ASPxClientDockPanel>>;
    /**
     * Retrieves a zone that owns the current panel.
     */
    GetOwnerZone(): ASPxClientDockZone;
    /**
     * Docks the current panel in a zone at the specified position.
     * @param zone An ASPxClientDockZone object specifying the zone, where the panel is docked
     * @param visibleIndex An integer value specifying the visible index position.
     */
    Dock(zone: ASPxClientDockZone, visibleIndex?: number): void;
    /**
     * Undocks the current panel and place it at the specified position.
     * @param x An integer value that specifies the X-coordinate of the panel's display position.
     * @param y An integer value that specifies the Y-coordinate of the panel's display position.
     */
    MakeFloat(x?: number, y?: number): void;
    /**
     * Gets a value specifying the position of the current panel, amongst the visible panels within a zone.
     */
    GetVisibleIndex(): number;
    /**
     * Sets a value specifying the position of the current panel, amongst the visible panels in a zone.
     * @param visibleIndex An integer value specifying the zero-based index of the panel amongst visible panels in the zone.
     */
    SetVisibleIndex(visibleIndex: number): void;
    /**
     * Returns a value indicating whether the panel is docked.
     */
    IsDocked(): boolean;
    /**
     * Converts the specified object to the ASPxClientDockPanel type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientDockPanel;
}
/**
 * A method that will handle the ASPxClientDockPanel.BeforeDock event.
 * @param source A ASPxClientDockPanel object that raised the event.
 * @param e A ASPxClientDockPanelProcessingModeCancelEventArgs object that contains event data.
 */
interface ASPxClientDockPanelProcessingModeCancelEventHandler<Sender> { (source: Sender, e: ASPxClientDockPanelProcessingModeCancelEventArgs): void; }
/**
 * Provides data for the ASPxClientDockPanel.BeforeDock event.
 */
declare class ASPxClientDockPanelProcessingModeCancelEventArgs extends ASPxClientProcessingModeCancelEventArgs {
    /**
     * For internal use only.
     */
    constructor(processOnServer: boolean, zone: ASPxClientDockZone);
    /**
     * Gets the zone currently being processed.
     */
    zone: ASPxClientDockZone;
}
/**
 * A method that will handle the ASPxClientDockPanel.AfterFloat event.
 * @param source A ASPxClientDockPanel object that raised the event.
 * @param e A ASPxClientDockPanelProcessingModeEventArgs object that contains event data.
 */
interface ASPxClientDockPanelProcessingModeEventHandler<Sender> { (source: Sender, e: ASPxClientDockPanelProcessingModeEventArgs): void; }
/**
 * Provides data for the ASPxClientDockPanel.AfterFloat event.
 */
declare class ASPxClientDockPanelProcessingModeEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * For internal use only.
     */
    constructor(processOnServer: boolean, zone: ASPxClientDockZone);
    /**
     * Gets the zone currently being processed.
     */
    zone: ASPxClientDockZone;
}
/**
 * A client-side equivalent of the ASPxDockZone object.
 */
declare class ASPxClientDockZone extends ASPxClientControl {
    /**
     * Gets or sets the unique identifier of a zone on a page.
     */
    zoneUID: string;
    /**
     * Fires on the client side before a panel is docked in a zone and allows you to cancel the action.
     */
    BeforeDock: ASPxClientEvent<ASPxClientDockZoneCancelEventHandler<ASPxClientDockZone>>;
    /**
     * Fires on the client side after a panel is docked in a zone.
     */
    AfterDock: ASPxClientEvent<ASPxClientDockZoneProcessingModeEventHandler<ASPxClientDockZone>>;
    /**
     * Returns a value that indicates the orientation in which panels are stacked in the current zone.
     */
    IsVertical(): boolean;
    /**
     * Gets a value that indicates whether the zone can enlarge its size.
     */
    GetAllowGrowing(): boolean;
    /**
     * Gets the number of panels contained in the zone.
     */
    GetPanelCount(): number;
    /**
     * Returns a panel specified by its unique identifier (panelUID). An ASPxClientDockPanel object that is the panel with the specified unique identifier.
     * @param panelUID A string value specifying the unique identifier of the panel.
     */
    GetPanelByUID(panelUID: string): ASPxClientDockPanel;
    /**
     * Returns a panel specified by its visible index. An ASPxClientDockPanel object that is the panel with the specified visible index.
     * @param visibleIndex An integer value specifying the panel's position among the visible panels within the current zone.
     */
    GetPanelByVisibleIndex(visibleIndex: number): ASPxClientDockPanel;
    /**
     * Returns an array of panels that are docked in the current zone and meet a specified criteria. An array of ASPxClientDockPanel objects.
     * @param filterPredicate An ASPxClientDockingFilterPredicate delegate that defines a set of criteria and determines whether a panel meets those criteria.
     */
    GetPanels(filterPredicate?: ASPxClientDockingFilterPredicate): ASPxClientDockPanel[];
    /**
     * Converts the specified object to the ASPxClientDockZone type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientDockZone;
}
/**
 * A method that will handle the ASPxClientDockZone.BeforeDock event.
 * @param source The event source. This parameter identifies the zone object which raised the event.
 * @param e A ASPxClientDockZoneCancelEventArgs object that contains event data.
 */
interface ASPxClientDockZoneCancelEventHandler<Sender> { (source: Sender, e: ASPxClientDockZoneCancelEventArgs): void; }
/**
 * Provides data for the ASPxClientDockZone.BeforeDock event.
 */
declare class ASPxClientDockZoneCancelEventArgs extends ASPxClientProcessingModeCancelEventArgs {
    /**
     * Initializes a new object of the ASPxClientDockZoneCancelEventArgs type with the specified settings.
     * @param processOnServer true to process the event on the server side; false to completely handle it on the client side.
     * @param panel An ASPxClientDockPanel object that is a panel related to the event.
     */
    constructor(processOnServer: boolean, panel: ASPxClientDockPanel);
    /**
     * Gets the panel currently being processed.
     */
    panel: ASPxClientDockPanel;
}
/**
 * A method that will handle the ASPxClientDockZone.AfterDock event.
 * @param source The event source. This parameter identifies the zone object which raised the event.
 * @param e An  ASPxClientDockZoneProcessingModeEventArgs object that contains event data.
 */
interface ASPxClientDockZoneProcessingModeEventHandler<Sender> { (source: Sender, e: ASPxClientDockZoneProcessingModeEventArgs): void; }
/**
 * Provides data for the ASPxClientDockZone.AfterDock event.
 */
declare class ASPxClientDockZoneProcessingModeEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Initializes a new object of the ASPxClientDockZoneProcessingModeEventArgs type with the specified settings.
     * @param processOnServer true to process the event on the server side; false to completely handle it on the client side.
     * @param panel An ASPxClientDockPanel object that is a panel related to the event.
     */
    constructor(processOnServer: boolean, panel: ASPxClientDockPanel);
    /**
     * Gets the panel currently being processed.
     */
    panel: ASPxClientDockPanel;
}
/**
 * Represents the client-side equivalent of the ASPxBinaryImage control.
 */
declare class ASPxClientBinaryImage extends ASPxClientEdit {
    /**
     * Occurs on the client side after an image is clicked.
     */
    Click: ASPxClientEvent<ASPxClientEditEventHandler<ASPxClientBinaryImage>>;
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientBinaryImage>>;
    /**
     * Occurs after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientBinaryImage>>;
    /**
     * Fires on the client side if any server error occurs during server-side processing of a callback sent by the ASPxClientBinaryImage.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientBinaryImage>>;
    /**
     * Sets the size of the image editor.
     * @param width An integer value that specifies the control's width.
     * @param height An integer value that specifies the control's height.
     */
    SetSize(width: number, height: number): void;
    /**
     * For internal use only.
     */
    GetValue(): any;
    /**
     * For internal use only.
     */
    SetValue(value: any): void;
    /**
     * Removes an image from the editor content.
     */
    Clear(): void;
    /**
     * Returns a name of the last uploaded file.
     */
    GetUploadedFileName(): string;
    /**
     * Sends a callback to the server and generates the server-side ASPxBinaryImage.CustomCallback event, passing it the specified argument.
     * @param parameter A string value that contains any information that needs to be sent to the server-side ASPxBinaryImage.CustomCallback event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(parameter: string, onSuccess?: (arg: string) => void): void;
    /**
     * Converts the specified object to the ASPxClientBinaryImage type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientBinaryImage;
}
/**
 * A client-side equivalent of the ASPxButton control.
 */
declare class ASPxClientButton extends ASPxClientControl {
    /**
     * Occurs on the client side when the button's checked state is changed.
     */
    CheckedChanged: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientButton>>;
    /**
     * Fires on the client side when the button receives input focus.
     */
    GotFocus: ASPxClientEvent<ASPxClientEventHandler<ASPxClientButton>>;
    /**
     * Fires on the client side when the button loses input focus.
     */
    LostFocus: ASPxClientEvent<ASPxClientEventHandler<ASPxClientButton>>;
    /**
     * Occurs on the client side after a button is clicked.
     */
    Click: ASPxClientEvent<ASPxClientButtonClickEventHandler<ASPxClientButton>>;
    /**
     * Simulates a mouse click action on the button control.
     */
    DoClick(): void;
    /**
     * Returns a value indicating whether the button is checked.
     */
    GetChecked(): boolean;
    /**
     * Sets a value that specifies the button's checked status.
     * @param value true if the button is checked; otherwise, false.
     */
    SetChecked(value: boolean): void;
    /**
     * Returns the text displayed within the button.
     */
    GetText(): string;
    /**
     * Sets the text to be displayed within the button.
     * @param value A string value specifying the text to be displayed within the button.
     */
    SetText(value: string): void;
    /**
     * Returns the URL pointing to the image displayed within the button.
     */
    GetImageUrl(): string;
    /**
     * Sets the URL pointing to the image displayed within the button.
     * @param value A string value that is the URL to the image displayed within the button.
     */
    SetImageUrl(value: string): void;
    /**
     * Sets a value specifying whether the button is enabled.
     * @param value true to enable the button; false to disable it.
     */
    SetEnabled(value: boolean): void;
    /**
     * Returns a value indicating whether the button is enabled.
     */
    GetEnabled(): boolean;
    /**
     * Sets input focus to the button.
     */
    Focus(): void;
    /**
     * Converts the specified object to the ASPxClientButton type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientButton;
}
/**
 * A method that will handle the client ASPxClientButton.Click event.
 * @param source An object that is the event's source.
 * @param e An ASPxClientButtonClickEventArgs object that contains event data.
 */
interface ASPxClientButtonClickEventHandler<Sender> { (source: Sender, e: ASPxClientButtonClickEventArgs): void; }
/**
 * Provides data for the ASPxClientButton.Click event.
 */
declare class ASPxClientButtonClickEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Initializes a new instance of the ASPxClientButtonClickEventArgs class with the specified settings.
     * @param processOnServer true to process the event on the server side; false to handle it completely on the client side. Initializes the ASPxClientProcessingModeEventArgs.processOnServer property.
     * @param cancelEventAndBubble true to cancel both the event's default action and the event's bubbling upon the hierarchy of event handlers; otherwise, false. Initializes the ASPxClientButtonClickEventArgs.cancelEventAndBubble property.
     */
    constructor(processOnServer: boolean, cancelEventAndBubble: boolean);
    /**
     * Specifies whether both the event's default action and the event's bubbling upon the hierarchy of event handlers should be canceled.
     */
    cancelEventAndBubble: boolean;
}
/**
 * Represents the client-side equivalent of the ASPxCalendar control.
 */
declare class ASPxClientCalendar extends ASPxClientEdit {
    /**
     * Fires on the client side after the selected date has been changed within the calendar.
     */
    SelectionChanged: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientCalendar>>;
    /**
     * Occurs on the client side when the month displayed within the calendar is changed.
     */
    VisibleMonthChanged: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientCalendar>>;
    /**
     * Allows you to disable the calendar's days.
     */
    CustomDisabledDate: ASPxClientEvent<ASPxClientCalendarCustomDisabledDateEventHandler<ASPxClientCalendar>>;
    /**
     * Occurs when an end user clicks a date cell.
     */
    CellClick: ASPxClientEvent<ASPxClientCalendarCellClickEventHandler<ASPxClientCalendar>>;
    /**
     * Occurs on the client-side when an end-user presses a key while the editor has focus.
     */
    KeyDown: ASPxClientEvent<ASPxClientEditKeyEventHandler<ASPxClientCalendar>>;
    /**
     * Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
     */
    KeyPress: ASPxClientEvent<ASPxClientEditKeyEventHandler<ASPxClientCalendar>>;
    /**
     * Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
     */
    KeyUp: ASPxClientEvent<ASPxClientEditKeyEventHandler<ASPxClientCalendar>>;
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientCalendar>>;
    /**
     * Occurs on the client side after the callback server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientCalendar>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientCalendar.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientCalendar>>;
    /**
     * Tests whether the specified date is selected. true if the specified date is selected; otherwise, false.
     * @param date A date-time value that specifies the date to test.
     */
    IsDateSelected(date: Date): boolean;
    /**
     * Sets the date that specifies the month and year to be displayed in the calendar.
     * @param date The date that specifies calendar's visible month and year.
     */
    SetVisibleDate(date: Date): void;
    /**
     * Sets the calendar's selected date.
     * @param date A date object that specifies the calendar's selected date.
     */
    SetSelectedDate(date: Date): void;
    /**
     * Returns the calendar's selected date.
     */
    GetSelectedDate(): Date;
    /**
     * Gets the date that determines the month and year that are currently displayed in the calendar.
     */
    GetVisibleDate(): Date;
    /**
     * Selects the specified date within the calendar.
     * @param date A date-time value that specifies the selected date.
     */
    SelectDate(date: Date): void;
    /**
     * Selects the specified range of dates within the calendar.
     * @param start A date-time value that specifies the range's first date.
     * @param end A date-time value that specifies the range's last date.
     */
    SelectRange(start: Date, end: Date): void;
    /**
     * Deselects the specified date within the calendar.
     * @param date A date-time value that specifies the date to deselect.
     */
    DeselectDate(date: Date): void;
    /**
     * Deselects the specified range of dates within the calendar.
     * @param start A date-time value that specifies the range's first date.
     * @param end A date-time value that specifies the range's last date.
     */
    DeselectRange(start: Date, end: Date): void;
    /**
     * Deselects all the selected dates within the calendar.
     */
    ClearSelection(): void;
    /**
     * Returns a list of dates which are selected within the calendar.
     */
    GetSelectedDates(): Date[];
    /**
     * Gets the minimum date on the calendar.
     */
    GetMinDate(): Date;
    /**
     * Sets the minimum date of the calendar.
     * @param date A DateTime object representing the minimum date.
     */
    SetMinDate(date: Date): void;
    /**
     * Gets the maximum date on the calendar.
     */
    GetMaxDate(): Date;
    /**
     * Sets the maximum date of the calendar.
     * @param date A DateTime object representing the maximum date.
     */
    SetMaxDate(date: Date): void;
    /**
     * Converts the specified object to the ASPxClientCalendar type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientCalendar;
}
/**
 * Provides data for the ASPxClientCalendar.CustomDisabledDate event.
 */
declare class ASPxClientCalendarCustomDisabledDateEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientCalendarCustomDisabledDateEventArgs object.
     * @param date A DateTime object that is the currently processed date.
     */
    constructor(date: Date);
    /**
     * Gets the date processed in the calendar.
     */
    date: Date;
    /**
     * Gets or sets a value specifying whether selection of the processed calendar date is disabled.
     */
    isDisabled: boolean;
}
/**
 * A method that will handle the client ASPxClientCalendar.CustomDisabledDate event.
 * @param source The event source.
 * @param e An ASPxClientCalendarCustomDisabledDateEventArgs object that contains event data.
 */
interface ASPxClientCalendarCustomDisabledDateEventHandler<Sender> { (source: Sender, e: ASPxClientCalendarCustomDisabledDateEventArgs): void; }
/**
 * Provides data for the ASPxClientDateEdit.CalendarCellClick event.
 */
declare class ASPxClientCalendarCellClickEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientCalendarCellClickEventArgs class.
     * @param date A DateTime object representing the clicked date cell.
     */
    constructor(date: Date);
    /**
     * Gets the date that relates to the processed calendar's cell click.
     */
    date: Date;
}
/**
 * A method that will handle the ASPxClientDateEdit.CalendarCellClick event.
 * @param source The event source.
 * @param e A ASPxClientCalendarCellClickEventArgs object that contains event data.
 */
interface ASPxClientCalendarCellClickEventHandler<Sender> { (source: Sender, e: ASPxClientCalendarCellClickEventArgs): void; }
/**
 * Represents the client-side equivalent of the ASPxCaptcha control.
 */
declare class ASPxClientCaptcha extends ASPxClientControl {
    /**
     * Sets input focus to the control's text box.
     */
    Focus(): void;
    /**
     * Refreshes the code displayed within the editor's challenge image.
     */
    Refresh(): void;
    /**
     * Converts the specified object to the ASPxClientCaptcha type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientCaptcha;
}
/**
 * Represents the client-side equivalent of the ASPxCheckBox control.
 */
declare class ASPxClientCheckBox extends ASPxClientEdit {
    /**
     * Occurs on the client side when the editor's checked state is changed.
     */
    CheckedChanged: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientCheckBox>>;
    /**
     * Returns a value indicating whether the check box editor is checked.
     */
    GetChecked(): boolean;
    /**
     * Sets a value which specifies the checked status of the check box editor.
     * @param isChecked true if the check box editor is checked; otherwise, false.
     */
    SetChecked(isChecked: boolean): void;
    /**
     * Returns the text displayed within the editor.
     */
    GetText(): string;
    /**
     * Returns a value which specifies a check box checked state.
     */
    GetCheckState(): string;
    /**
     * Sets a value specifying the state of a check box.
     * @param checkState A string value matches one of the CheckState enumeration values.
     */
    SetCheckState(checkState: string): void;
    /**
     * Sets the text to be displayed within the editor.
     * @param text A string value specifying the text to be displayed within the editor.
     */
    SetText(text: string): void;
    /**
     * Converts the specified object to the ASPxClientCheckBox type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientCheckBox;
}
/**
 * Represents the client-side equivalent of the ASPxRadioButton control.
 */
declare class ASPxClientRadioButton extends ASPxClientCheckBox {
    /**
     * Returns a value indicating whether the radio button is checked.
     */
    GetChecked(): boolean;
    /**
     * Sets a value which specifies the radio button's checked status.
     * @param isChecked true if the radio button is checked; otherwise, false.
     */
    SetChecked(isChecked: boolean): void;
    /**
     * Converts the specified object to the ASPxClientRadioButton type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientRadioButton;
}
/**
 * Represents the client-side equivalent of the ASPxColorEdit control.
 */
declare class ASPxClientColorEdit extends ASPxClientDropDownEditBase {
    /**
     * Fires after the selected color has been changed within the color editor via end-user interaction.
     */
    ColorChanged: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientColorEdit>>;
    /**
     * This event is not in effect for the ASPxClientColorEdit. Use the ASPxClientColorEdit.ColorChanged event instead.
     */
    TextChanged: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientColorEdit>>;
    /**
     * Returns the color editor's value.
     */
    GetColor(): string;
    /**
     * Specifies the color value for the color editor.
     * @param value A string value specifying the editor color.
     */
    SetColor(value: string): void;
    /**
     * Indicates whether the automatic color item is selected.
     */
    IsAutomaticColorSelected(): boolean;
    /**
     * Converts the specified object to the ASPxClientColorEdit type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientColorEdit;
}
/**
 * Represents the client-side equivalent of the ASPxComboBox control.
 */
declare class ASPxClientComboBox extends ASPxClientDropDownEditBase {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientComboBox>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientComboBox>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientComboBox.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientComboBox>>;
    /**
     * Occurs on the client side after a different item in the list has been selected (focus has been moved from one item to another).
     */
    SelectedIndexChanged: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientComboBox>>;
    /**
     * Adds a new item to the end of the control's items collection. An integer value representing the position at which a new item was added.
     * @param text Specifies the item's text.
     * @param value An object that represents the item's associated value.
     * @param imageUrl A string value specifying the path to the image displayed by the item.
     */
    AddItem(text: string | string[], value?: any, imageUrl?: string): number;
    /**
     * Adds a new item to the control's items collection at the specified index.
     * @param index An integer value that represents the index position.
     * @param value An object that represents the item's associated value.
     * @param imageUrl A String value specifying the path to the image displayed by the item.
     */
    InsertItem(index: number, text: string | string[], value?: any, imageUrl?: string): void;
    /**
     * Removes an item specified by its index from the client list editor.
     * @param index An integer value representing the index of the list item to be removed.
     */
    RemoveItem(index: number): void;
    /**
     * Removes all items from the client combo box editor.
     */
    ClearItems(): void;
    /**
     * Prevents the client combobox editor from being rendered until the ASPxClientComboBox.EndUpdate method is called.
     */
    BeginUpdate(): void;
    /**
     * Re-enables editor render operations after a call to the ASPxClientComboBox.BeginUpdate method and forces an immediate re-rendering.
     */
    EndUpdate(): void;
    /**
     * Scrolls the editor's item list, so that the specified item becomes visible.
     * @param index An integer value that specifies the item's index within the editor's client item list.
     */
    MakeItemVisible(index: number): void;
    /**
     * Returns an item specified by its index within the combo box editor's item collection. An ASPxClientListEditItem object representing the collection item found.
     * @param index An integer value specifying the zero-based index of the item to search for.
     */
    GetItem(index: number): ASPxClientListEditItem;
    /**
     * Returns a combo box item by its text. A ASPxClientListEditItem object that represents the combo box item. null (Nothing in Visual Basic) if the item was not found.
     * @param text A string that specifies the item's text.
     */
    FindItemByText(text: string): ASPxClientListEditItem;
    /**
     * Returns a combo box item by its value. A ASPxClientListEditItem object that represents the combo box item. null (Nothing in Visual Basic) if the item was not found.
     * @param value An object that specifies the item's value.
     */
    FindItemByValue(value: any): ASPxClientListEditItem;
    /**
     * Gets the number of items contained in the editor's item collection.
     */
    GetItemCount(): number;
    /**
     * Returns the index of the selected item within the combo box editor.
     */
    GetSelectedIndex(): number;
    /**
     * Sets the combobox editor's selected item specified by its index.
     * @param index An integer value specifying the zero-based index of the item to select.
     */
    SetSelectedIndex(index: number): void;
    /**
     * Returns the combo box editor's selected item.
     */
    GetSelectedItem(): ASPxClientListEditItem;
    /**
     * Sets the list editor's selected item.
     * @param item An ASPxClientListEditItem object that specifies the item to select.
     */
    SetSelectedItem(item: ASPxClientListEditItem): void;
    /**
     * Gets the text displayed in the editor's edit box.
     */
    GetText(): string;
    /**
     * Sends a callback to the server and generates the server-side ASPxAutoCompleteBoxBase.Callback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side ASPxAutoCompleteBoxBase.Callback event.
     */
    PerformCallback(parameter: string): void;
    /**
     * Fires before the filtering is executed.
     */
    ItemFiltering: ASPxClientEvent<ASPxClientListEditItemFilteringEventHandler<ASPxClientComboBox>>;
    /**
     * Enables you to highlight the filtered items.
     */
    CustomHighlighting: ASPxClientEvent<ASPxClientListEditCustomHighlightingEventHandler<ASPxClientComboBox>>;
    /**
     * Specifies the text displayed within the editor's edit box.
     * @param text A string value specifying the editor's text.
     * @param applyFilter true, to use the specified text as a filter and apply it to the editor, otherwise, false.
     */
    SetText(text: string, applyFilter?: boolean): void;
    /**
     * Determines whether the drop-down content is loaded; if not - loads the content.
     * @param callbackFunction An object that is the JavaScript function that receives the callback data as a parameter. The function is performed after the combo box content is loaded.
     */
    EnsureDropDownLoaded(callbackFunction: any): void;
    /**
     * Defines the HTML content for the specified combo box item.
     * @param index An integer value specifying the zero-based index of the item.
     * @param html A string value that is the HTML code defining the content of the combo box item.
     */
    SetItemHtml(index: number, html: string): void;
    /**
     * Sets the tooltip text for the combo box editor's item specified by its index.
     * @param index An integer value specifying the zero-based index of the item.
     * @param tooltip A string value specifying the tooltip text.
     */
    SetItemTooltip(index: number, tooltip: string): void;
    SetItemAttribute(index: number, attributeName: string, attributeValue: string): void;
    /**
     * Sets the CSS class for a combo box item specified by its index.
     * @param index An integer value specifying the zero-based index of the item.
     * @param className A string value specifying the CSS class name.
     */
    AddItemCssClass(index: number, className: string): void;
    /**
     * Removes the CSS class from a combo box item specified by its index.
     * @param index An integer value specifying the zero-based index of the item.
     * @param className A string value specifying the CSS class name.
     */
    RemoveItemCssClass(index: number, className: string): void;
    /**
     * Defines the HTML content for the specified combo box item's text cell.
     * @param itemIndex An integer value specifying the zero-based index of the item.
     * @param textCellIndex An integer value specifying the zero-based index of the item's text cell.
     * @param html A string value that is the HTML code defining the content of the combo box item.
     */
    SetItemTextCellHtml(itemIndex: number, textCellIndex: number, html: string): void;
    /**
     * Sets the tooltip text for the text cell of the editor's item specified by its index.
     * @param itemIndex An integer value specifying the zero-based index of the item.
     * @param textCellIndex An integer value specifying the zero-based index of the item's text cell.
     * @param tooltip A string value specifying the tooltip text.
     */
    SetItemTextCellTooltip(itemIndex: number, textCellIndex: number, tooltip: string): void;
    SetItemTextCellAttribute(itemIndex: number, textCellIndex: number, attributeName: string, attributeValue: string): void;
    /**
     * Sets the CSS class for a combo box item's text cell specified by its index.
     * @param itemIndex An integer value specifying the zero-based index of the item.
     * @param textCellIndex An integer value specifying the zero-based index of the item's text cell.
     * @param className A string value specifying the CSS class name.
     */
    AddItemTextCellCssClass(itemIndex: number, textCellIndex: number, className: string): void;
    /**
     * Removes the CSS class from a combo box item's text cell specified by its index.
     * @param itemIndex An integer value specifying the zero-based index of the item.
     * @param textCellIndex An integer value specifying the zero-based index of the item's text cell.
     * @param className A string value specifying the CSS class name.
     */
    RemoveItemTextCellCssClass(itemIndex: number, textCellIndex: number, className: string): void;
    /**
     * Converts the specified object to the ASPxClientComboBox type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientComboBox;
}
/**
 * Represents the client-side equivalent of the ASPxDateEdit control.
 */
declare class ASPxClientDateEdit extends ASPxClientDropDownEditBase {
    /**
     * Fires after the selected date has been changed within the date editor.
     */
    DateChanged: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientDateEdit>>;
    /**
     * Enables you to convert the value entered by an end user into the value that will be stored by the date editor.
     */
    ParseDate: ASPxClientEvent<ASPxClientParseDateEventHandler<ASPxClientDateEdit>>;
    /**
     * Allows you to disable the calendar's days.
     */
    CalendarCustomDisabledDate: ASPxClientEvent<ASPxClientCalendarCustomDisabledDateEventHandler<ASPxClientDateEdit>>;
    /**
     * Occurs when an end user clicks a calendar date cell.
     */
    CalendarCellClick: ASPxClientEvent<ASPxClientCalendarCellClickEventHandler<ASPxClientDateEdit>>;
    /**
     * This event is not in effect for the ASPxClientDateEdit. Use the ASPxClientDateEdit.DateChanged event instead.
     */
    TextChanged: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientDateEdit>>;
    /**
     * Returns the calendar of the date editor.
     */
    GetCalendar(): ASPxClientCalendar;
    /**
     * Returns the built-in time edit control.
     */
    GetTimeEdit(): ASPxClientTimeEdit;
    /**
     * Specifies the date for the editor.
     * @param date The date.
     */
    SetDate(date: Date): void;
    /**
     * Gets the date that is the editor's value.
     */
    GetDate(): Date;
    /**
     * Returns the number of days in a range selected within a date edit.
     */
    GetRangeDayCount(): number;
    /**
     * Gets the range's length.
     */
    GetRangeLength(): number;
    /**
     * Gets the minimum date of the editor.
     */
    GetMinDate(): Date;
    /**
     * Sets the minimum date of the editor.
     * @param date A DateTime object representing the minimum date.
     */
    SetMinDate(date: Date): void;
    /**
     * Gets the maximum date of the editor.
     */
    GetMaxDate(): Date;
    /**
     * Sets the maximum date of the editor.
     * @param date A DateTime object representing the maximum date.
     */
    SetMaxDate(date: Date): void;
    /**
     * Converts the specified object to the ASPxClientDateEdit type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientDateEdit;
}
/**
 * Provides data for the ASPxClientDateEdit.ParseDate client-side event that parses a string entered into a date editor.
 */
declare class ASPxClientParseDateEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientParseDateEventArgs class with specified settings.
     * @param value A string containing the value entered into the date editor.
     */
    constructor(value: string);
    /**
     * Gets the value entered into the date editor by an end user.
     */
    value: string;
    /**
     * Gets or sets the edit value of the date editor.
     */
    date: Date;
    /**
     * Gets or sets a value specifying whether the event was handled.
     */
    handled: boolean;
}
/**
 * A method that will handle the ASPxClientDateEdit.ParseDate event.
 * @param source An object representing the event source. Identifies the button editor that raised the event.
 * @param e An ASPxClientParseDateEventArgs object that contains event data.
 */
interface ASPxClientParseDateEventHandler<Sender> { (source: Sender, e: ASPxClientParseDateEventArgs): void; }
/**
 * Represents a base class for the editors that contain a drop down window.
 */
declare class ASPxClientDropDownEditBase extends ASPxClientButtonEditBase {
    /**
     * Occurs on the client-side when the <strong>drop down window</strong> is opened by the dropdown button click.
     */
    DropDown: ASPxClientEvent<ASPxClientEventHandler<ASPxClientDropDownEditBase>>;
    /**
     * Occurs on the client side when the <strong>drop down window</strong> is closed.
     */
    CloseUp: ASPxClientEvent<ASPxClientEventHandler<ASPxClientDropDownEditBase>>;
    /**
     * Occurs on the client side before the <strong>drop down window</strong> is closed and allows you to cancel the operation.
     */
    QueryCloseUp: ASPxClientEvent<ASPxClientCancelEventHandler<ASPxClientDropDownEditBase>>;
    /**
     * Modifies the size of the <strong>drop down window</strong> in accordance with its content.
     */
    AdjustDropDownWindow(): void;
    /**
     * Invokes the editor's <strong>drop down window</strong>.
     */
    ShowDropDown(): void;
    /**
     * Closes the opened <strong>drop down window</strong> of the editor.
     */
    HideDropDown(): void;
}
/**
 * Represents a base for client editor objects realizing the dropdown editor functionality.
 */
declare class ASPxClientDropDownEdit extends ASPxClientDropDownEditBase {
    /**
     * Allows you to handle a click on 'Ok' and 'Cancel' buttons in the drop-down window.
     */
    DropDownCommandButtonClick: ASPxClientEvent<ASPxClientDropDownCommandEventHandler<ASPxClientDropDownEdit>>;
    /**
     * Obtains the key value associated with the text displayed within the editor's edit box.
     */
    GetKeyValue(): string;
    /**
     * Specifies the key value associated with the text displayed within the editor's edit box.
     * @param keyValue A string specifying the key value associated with the editor's value (displayed text).
     */
    SetKeyValue(keyValue: string): void;
    /**
     * Converts the specified object to the ASPxClientDropDownEdit type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientDropDownEdit;
}
/**
 * A method that will handle the ASPxClientDropDownEdit.DropDownCommandButtonClick event.
 * @param source The event source.
 * @param e A ASPxClientDropDownCommandEventArgs object that contains event data.
 */
interface ASPxClientDropDownCommandEventHandler<Sender> { (source: Sender, e: ASPxClientDropDownCommandEventArgs): void; }
/**
 * Provides data for the ASPxClientDropDownEdit.DropDownCommandButtonClick event.
 */
declare class ASPxClientDropDownCommandEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientDropDownCommandEventArgs class.
     */
    constructor();
    /**
     * Gets the name of the processed command in the ASPxClientDropDownEdit.DropDownCommandButtonClick event.
     */
    commandName: string;
}
/**
 * Serves as the base object for all the editors included in the client-side object model.
 */
declare class ASPxClientEditBase extends ASPxClientControl {
    /**
     * Returns the editor's value.
     */
    GetValue(): any;
    /**
     * Changes the editor's value.
     * @param value An object representing the data to be assigned to the editor's edit value.
     */
    SetValue(value: any): void;
    /**
     * Returns a value indicating whether an editor is enabled.
     */
    GetEnabled(): boolean;
    /**
     * Specifies whether an editor is enabled.
     * @param value true to enable the editor; otherwise, false.
     */
    SetEnabled(value: boolean): void;
    /**
     * Returns the text displayed in the editor caption.
     */
    GetCaption(): string;
    /**
     * Specifies the text displayed in the editor caption.
     * @param caption A string value specifying the editor caption.
     */
    SetCaption(caption: string): void;
}
/**
 * Serves as the base object for all the editors that support validation.
 */
declare class ASPxClientEdit extends ASPxClientEditBase {
    /**
     * Fires on the client side when the editor receives input focus.
     */
    GotFocus: ASPxClientEvent<ASPxClientEventHandler<ASPxClientEdit>>;
    /**
     * Fires on the client side when the editor loses input focus.
     */
    LostFocus: ASPxClientEvent<ASPxClientEventHandler<ASPxClientEdit>>;
    /**
     * Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
     */
    Validation: ASPxClientEvent<ASPxClientEditValidationEventHandler<ASPxClientEdit>>;
    /**
     * Fires after the editor's value has been changed by end-user interactions.
     */
    ValueChanged: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientEdit>>;
    /**
     * Returns an HTML element that represents the control's input element.
     */
    GetInputElement(): any;
    /**
     * Returns a value indicating whether the editor's state is read-only on the client-side.
     */
    GetReadOnly(): boolean;
    /**
     * Specifies whether the control's state is read-only on the client side.
     * @param readOnly true, to make the control read-only on the client side; otherwise, false.
     */
    SetReadOnly(readOnly: boolean): void;
    /**
     * Sets input focus to the editor.
     */
    Focus(): void;
    /**
     * Gets a value that indicates whether the editor's value passes validation.
     */
    GetIsValid(): boolean;
    /**
     * Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
     */
    GetErrorText(): string;
    /**
     * Sets a value that specifies whether the editor's value is valid.
     * @param isValid True if the editor's value is valid; otherwise, False.
     */
    SetIsValid(isValid: boolean): void;
    /**
     * Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
     * @param errorText A string value representing the error text.
     */
    SetErrorText(errorText: string): void;
    /**
     * Performs the editor's validation.
     */
    Validate(): void;
    /**
     * Assigns a null value to all editors in a specified visibility state, which are located within a specified container and belong to a specific validation group.
     * @param container An HTML element specifying the container of editors to be validated.
     * @param validationGroup A string value specifying the validation group's name.
     * @param clearInvisibleEditors true to clear both visible and invisible editors that belong to the specified container and group; false to clear only visible editors.
     */
    static ClearEditorsInContainer(container: any, validationGroup?: string, clearInvisibleEditors?: boolean): void;
    /**
     * Assigns a null value to all editors which are located within the specified container object, and belonging to a specific validation group, dependent on the visibility state specified.
     * @param containerId A string value specifying the editor container's identifier.
     * @param validationGroup A string value specifying the validatiion group's name.
     * @param clearInvisibleEditors true to clear both visible and invisible editors that belong to the specified container and group; false to clear only visible editors.
     */
    static ClearEditorsInContainerById(containerId: string, validationGroup?: string, clearInvisibleEditors?: boolean): void;
    /**
     * Assigns a null value to all editors which belong to a specific validation group, dependent on the visibility state specified.
     * @param validationGroup A string value specifying the validation group's name.
     * @param clearInvisibleEditors true to clear both visible and invisible editors that belong to the specified validation group; false to clear only visible editors.
     */
    static ClearGroup(validationGroup: string, clearInvisibleEditors?: boolean): void;
    /**
     * Performs validation of all editors in a specified visibility state, which are located within a specified container and belong to a specific validation group. true if the specified editors pass validation; otherwise, false.
     * @param container An HTML element specifying the container of editors to be validated.
     * @param validationGroup A string value that specifies the validation group's name.
     * @param validateInvisibleEditors true to validate both visible and invisible editors that belong to the specified container and group; false to validate only visible editors.
     */
    static ValidateEditorsInContainer(container: any, validationGroup?: string, validateInvisibleEditors?: boolean): boolean;
    /**
     * Performs validation of the editors which are located within the specified container and belong to a specific validation group, dependent on the visibility state specified. true if the specified editors pass validation; otherwise, false.
     * @param containerId A string value specifying the editor container's identifier.
     * @param validationGroup A string value that specifies the validation group's name.
     * @param validateInvisibleEditors true to validate both visible and invisible editors that belong to the specified container and group; false to validate only visible editors.
     */
    static ValidateEditorsInContainerById(containerId: string, validationGroup?: string, validateInvisibleEditors?: boolean): boolean;
    /**
     * Performs validation of editors contained within the specified validation group, dependent on the editor visibility state specified. true if editors of the specified validation group pass validation; otherwise, false.
     * @param validationGroup A string value specifying the validation group's name.
     * @param validateInvisibleEditors true to validate both visible and invisible editors that belong to the specified validation group; false to validate only visible editors.
     */
    static ValidateGroup(validationGroup: string, validateInvisibleEditors?: boolean): boolean;
    /**
     * Verifies whether the editors in a specified visibility state, which are located within a specified container and belong to a specific validation group, are valid. true if the editors are valid; otherwise, false.
     * @param container An HTML element specifying the container of editors to be validated.
     * @param validationGroup A string value that specifies the validation group's name.
     * @param checkInvisibleEditors true to check both visible and invisible editors that belong to the specified container; false to check only visible editors.
     */
    static AreEditorsValid(container?: any | string, validationGroup?: string, checkInvisibleEditors?: boolean): boolean;
    /**
     * Attaches a handler to the ASPxClientEdit's event indicating whether the editor has been changed since the previous state.
     * @param handler An object representing a handler.
     * @param predicate An ASPxClientControlPredicate object representing the predicate criteria.
     */
    static AttachEditorModificationListener(handler: any, predicate: ASPxClientControlPredicate): void;
    /**
     * Detaches a handler from the editor's event if the editor meets the predicate criteria.
     * @param handler An object representing a handler.
     * @param predicate An ASPxClientControlPredicate object representing a predicate criteria.
     */
    static DetachEditorModificationListener(handler: any, predicate: ASPxClientControlPredicate): void;
}
/**
 * A method that will handle the client events concerning a keyboard key being pressed.
 * @param source The event source. This parameter identifies the editor which raised the event.
 * @param e An ASPxClientEditKeyEventArgs object that contains event data.
 */
interface ASPxClientEditKeyEventHandler<Sender> { (source: Sender, e: ASPxClientEditKeyEventArgs): void; }
/**
 * Provides data for the client events involved with a key being pressed or released.
 */
declare class ASPxClientEditKeyEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientEditKeyEventArgs object.
     * @param htmlEvent A DHTML event object that relates to the processed event.
     */
    constructor(htmlEvent: any);
    /**
     * Gets a DHTML event object that relates to the processed event.
     */
    htmlEvent: any;
}
/**
 * A method that will handle client validation events.
 * @param source An object representing the event source. Identifies the button editor that raised the event.
 * @param e An ASPxClientEditValidationEventArgs object that contains event data.
 */
interface ASPxClientEditValidationEventHandler<Sender> { (source: Sender, e: ASPxClientEditValidationEventArgs): void; }
/**
 * Provides data for the client events that are related to data validation (see ASPxClientEdit.Validate).
 */
declare class ASPxClientEditValidationEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientEditValidationEventArgs class with the specified settings.
     * @param value An object that represents the validated value.
     * @param errorText A string representing the error description.
     * @param isValid true if the validated value is valid; otherwise, false.
     */
    constructor(value: string, errorText: string, isValid: boolean);
    /**
     * Gets or sets the error description.
     */
    errorText: string;
    /**
     * Gets or sets a value specifying whether the validated value is valid.
     */
    isValid: boolean;
    /**
     * Gets or sets the editor's value being validated.
     */
    value: string;
}
/**
 * Represents the client ASPxFilterControl.
 */
declare class ASPxClientFilterControl extends ASPxClientControl {
    /**
     * Occurs after a new filter expression has been applied.
     */
    Applied: ASPxClientEvent<ASPxClientFilterAppliedEventHandler<ASPxClientFilterControl>>;
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientFilterControl>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientFilterControl>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientFilterControl.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientFilterControl>>;
    /**
     * Returns the filter expression.
     */
    GetFilterExpression(): string;
    /**
     * Returns the applied filter expression.
     */
    GetAppliedFilterExpression(): string;
    /**
     * Returns the editor used to edit operand values for the specified filter column. An ASPxClientEditBase descendant that represents the editor used to edit operand values for the specified filter column.
     * @param editorIndex An integer value that identifies the filter column by its index within the collection.
     */
    GetEditor(editorIndex: number): ASPxClientEditBase;
    /**
     * Returns a value indicating whether the filter expression being currently composed on the client side is valid - all expression conditions are filled.
     */
    IsFilterExpressionValid(): boolean;
    /**
     * Applies a filter constructed by an end-user.
     */
    Apply(): void;
    /**
     * Resets the current filter expression to a previously applied filter expression.
     */
    Reset(): void;
    /**
     * Converts the specified object to the ASPxClientFilterControl type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientFilterControl;
}
/**
 * A method that will handle the ASPxClientFilterControl.Applied event.
 * @param source The event source.
 * @param e An ASPxClientFilterAppliedEventArgs object that contains event data.
 */
interface ASPxClientFilterAppliedEventHandler<Sender> { (source: Sender, e: ASPxClientFilterAppliedEventArgs): void; }
/**
 * Provides data for the ASPxClientFilterControl.Applied event.
 */
declare class ASPxClientFilterAppliedEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientFilterAppliedEventArgs class.
     * @param filterExpression A string value that specifies the filter expression currently being applied. This value is assigned to the ASPxClientFilterAppliedEventArgs.filterExpression property.
     */
    constructor(filterExpression: string);
    /**
     * Gets the filter expression currently being applied.
     */
    filterExpression: string;
}
/**
 * Represents a base for client editor objects that display a list of items.
 */
declare class ASPxClientListEdit extends ASPxClientEdit {
    /**
     * Occurs on the client side after a different item in the list has been selected (focus has been moved from one item to another).
     */
    SelectedIndexChanged: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientListEdit>>;
    /**
     * Returns the list editor's selected item.
     */
    GetSelectedItem(): ASPxClientListEditItem;
    /**
     * Returns the index of the selected item within the list editor.
     */
    GetSelectedIndex(): number;
    /**
     * Sets the list editor's selected item.
     * @param item An ASPxClientListEditItem object that specifies the item to select.
     */
    SetSelectedItem(item: ASPxClientListEditItem): void;
    /**
     * Sets the list editor's selected item specified by its index.
     * @param index An integer value specifying the zero-based index of the item to select.
     */
    SetSelectedIndex(index: number): void;
}
/**
 * Represents the client-side equivalent of the ListEditItem object.
 */
declare class ASPxClientListEditItem {
    /**
     * Gets a value that indicates whether a list edit item is selected.
     */
    selected: boolean;
    /**
     * Returns the list item's value that corresponds to the specified column. Specifies the list item's value that corresponds to the specified column.
     * @param columnIndex Specifies the column's index or name in the Columns collection.
     */
    GetColumnText(columnIndex: number | string): string;
    /**
     * Gets an editor to which the current item belongs.
     */
    listEditBase: ASPxClientListEdit;
    /**
     * Gets the item's index.
     */
    index: number;
    /**
     * Gets the item's associated image.
     */
    imageUrl: string;
    /**
     * Gets the item's display text.
     */
    text: string;
    /**
     * Gets the item's associated value.
     */
    value: any;
}
/**
 * Represents the client-side equivalent of the ASPxListBox control.
 */
declare class ASPxClientListBox extends ASPxClientListEdit {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientListBox>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientListBox>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientListBox.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientListBox>>;
    /**
     * Occurs on the client side when an end-user presses a key while the editor has focus.
     */
    KeyDown: ASPxClientEvent<ASPxClientEditKeyEventHandler<ASPxClientListBox>>;
    /**
     * Occurs on the client side when an end-user presses and releases a key while the editor has focus.
     */
    KeyPress: ASPxClientEvent<ASPxClientEditKeyEventHandler<ASPxClientListBox>>;
    /**
     * Occurs on the client side when an end-user releases a pressed key while the editor has focus.
     */
    KeyUp: ASPxClientEvent<ASPxClientEditKeyEventHandler<ASPxClientListBox>>;
    /**
     * Occurs on the client side after a different item in the list box has been selected (focus has been moved from one item to another).
     */
    SelectedIndexChanged: ASPxClientEvent<ASPxClientListEditItemSelectedChangedEventHandler<ASPxClientListBox>>;
    /**
     * Occurs on the client when the editor's item is double clicked.
     */
    ItemDoubleClick: ASPxClientEvent<ASPxClientEventHandler<ASPxClientListBox>>;
    /**
     * Gets the number of items contained in the editor's item collection.
     */
    GetItemCount(): number;
    /**
     * Returns an item specified by its index within the list box editor's item collection. An ASPxClientListEditItem object representing the collection item found.
     * @param index An integer value specifying the zero-based index of the item to search for.
     */
    GetItem(index: number): ASPxClientListEditItem;
    /**
     * Returns an array of the list editor's selected items indices.
     */
    GetSelectedIndices(): number[];
    /**
     * Returns an array of the list editor's selected items values.
     */
    GetSelectedValues(): any[];
    /**
     * Returns an array of the list editor's selected items.
     */
    GetSelectedItems(): ASPxClientListEditItem[];
    /**
     * Selects all list box items.
     */
    SelectAll(): void;
    /**
     * Unselects all list box items.
     */
    UnselectAll(): void;
    /**
     * Selects the items with the specified indices within a list box.
     * @param indices An array of integer values that represent the items indices.
     */
    SelectIndices(indices: number[]): void;
    /**
     * Unselects an array of the list box items with the specified indices.
     * @param indices An array of integer values that represent the indices.
     */
    UnselectIndices(indices: number[]): void;
    /**
     * Selects the specified items within a list box.
     * @param items An array of ASPxClientListEditItem objects that represent the items.
     */
    SelectItems(items: ASPxClientListEditItem[]): void;
    /**
     * Unselects an array of the specified list box items.
     * @param items An array of ASPxClientListEditItem objects that represent the items.
     */
    UnselectItems(items: ASPxClientListEditItem[]): void;
    /**
     * Select the items with the specified values within a list box.
     * @param values An array of Object[] objects that represent the item's values.
     */
    SelectValues(values: any[]): void;
    /**
     * Unselects an array of the list box items with the specified values.
     * @param values An array of Object[] objects that represent the values.
     */
    UnselectValues(values: any[]): void;
    /**
     * Scrolls the editor's item list, so that the specified item becomes visible.
     * @param index An integer value that specifies the item's index within the editor's client item list.
     */
    MakeItemVisible(index: number): void;
    /** @deprecated Use the AdjustControl method instead. */
    /**
     * Initializes the ASPxClientListBox client object when its parent container becomes visible dynamically, on the client side.
     */
    InitOnContainerMadeVisible(): void;
    /**
     * Adds a new item to the editor, specifying the item's display text, associated value and displayed image, and returns the index of the added item. An integer value that represents the added item's index.
     * @param text A string value specifying the item's display text.
     * @param value An object specifying the value associated with the item.
     * @param imageUrl A string value specifying the path to the image displayed by the item.
     */
    AddItem(text: string | string[], value?: any, imageUrl?: string): number;
    /**
     * Adds a new item to the control's items collection at the specified index.
     * @param index An integer value that represents the index position.
     * @param value An object that represents the item's associated value.
     * @param imageUrl A String value specifying the path to the image displayed by the item.
     */
    InsertItem(index: number, text: string | string[], value?: any, imageUrl?: string): void;
    /**
     * Prevents the client list box editor from being rendered until the ASPxClientListBox.EndUpdate method is called.
     */
    BeginUpdate(): void;
    /**
     * Re-enables editor render operations after a call to the ASPxClientListBox.BeginUpdate method, and forces an immediate re-rendering.
     */
    EndUpdate(): void;
    /**
     * Removes all items from the client list box editor.
     */
    ClearItems(): void;
    /**
     * Removes an item specified by its index from the client list editor.
     * @param index An integer value representing the index of the list item to be removed.
     */
    RemoveItem(index: number): void;
    /**
     * Returns a list box item by its text. A ASPxClientListEditItem object that represents the list box item. null (Nothing in Visual Basic) if the item was not found.
     * @param text A string that specifies the item's text.
     */
    FindItemByText(text: string): ASPxClientListEditItem;
    /**
     * Returns a list box item by its value. A ASPxClientListEditItem object that represents the list box item. null (Nothing in Visual Basic) if the item was not found.
     * @param value An object that specifies the item's value.
     */
    FindItemByValue(value: any): ASPxClientListEditItem;
    /**
     * Sends a callback to the server, and generates the server-side ASPxListBox.Callback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side ASPxListBox.Callback event.
     */
    PerformCallback(parameter: string): void;
    /**
     * Fires before the filtering is executed.
     */
    ItemFiltering: ASPxClientEvent<ASPxClientListEditItemFilteringEventHandler<ASPxClientListBox>>;
    /**
     * Enables you to highlight the filtered items.
     */
    CustomHighlighting: ASPxClientEvent<ASPxClientListEditCustomHighlightingEventHandler<ASPxClientListBox>>;
    /**
     * Defines the HTML content for the specified list box item.
     * @param index An integer value specifying the zero-based index of the item.
     * @param html A string value that is the HTML code defining the content of the list box item.
     */
    SetItemHtml(index: number, html: string): void;
    /**
     * Sets the tooltip text for the list box editor's item specified by its index.
     * @param index An integer value specifying the zero-based index of the item.
     * @param tooltip A string value specifying the tooltip text.
     */
    SetItemTooltip(index: number, tooltip: string): void;
    SetItemAttribute(index: number, attributeName: string, attributeValue: string): void;
    /**
     * Sets the CSS class for a list box item specified by its index.
     * @param index An integer value specifying the zero-based index of the item.
     * @param className A string value specifying the CSS class name.
     */
    AddItemCssClass(index: number, className: string): void;
    /**
     * Removes the CSS class from a list box item specified by its index.
     * @param index An integer value specifying the zero-based index of the item.
     * @param className A string value specifying the CSS class name.
     */
    RemoveItemCssClass(index: number, className: string): void;
    /**
     * Defines the HTML content for the specified list box item's text cell.
     * @param itemIndex An integer value specifying the zero-based index of the item.
     * @param textCellIndex An integer value specifying the zero-based index of the item's text cell.
     * @param html A string value that is the HTML code defining the content of the list box item.
     */
    SetItemTextCellHtml(itemIndex: number, textCellIndex: number, html: string): void;
    /**
     * Sets the tooltip text for the text cell of the editor's item specified by its index.
     * @param itemIndex An integer value specifying the zero-based index of the item.
     * @param textCellIndex An integer value specifying the zero-based index of the item's text cell.
     * @param tooltip A string value specifying the tooltip text.
     */
    SetItemTextCellTooltip(itemIndex: number, textCellIndex: number, tooltip: string): void;
    SetItemTextCellAttribute(itemIndex: number, textCellIndex: number, attributeName: string, attributeValue: string): void;
    /**
     * Sets the CSS class for a list box item's text cell specified by its index.
     * @param itemIndex An integer value specifying the zero-based index of the item.
     * @param textCellIndex An integer value specifying the zero-based index of the item's text cell.
     * @param className A string value specifying the CSS class name.
     */
    AddItemTextCellCssClass(itemIndex: number, textCellIndex: number, className: string): void;
    /**
     * Removes the CSS class from a list box item's text cell specified by its index.
     * @param itemIndex An integer value specifying the zero-based index of the item.
     * @param textCellIndex An integer value specifying the zero-based index of the item's text cell.
     * @param className A string value specifying the CSS class name.
     */
    RemoveItemTextCellCssClass(itemIndex: number, textCellIndex: number, className: string): void;
    /**
     * Converts the specified object to the ASPxClientListBox type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientListBox;
}
/**
 * Serves as the base type for the ASPxClientCheckBoxList and ASPxClientRadioButtonList objects.
 */
declare class ASPxClientCheckListBase extends ASPxClientListEdit {
    /**
     * Gets the number of items contained in the editor's item collection.
     */
    GetItemCount(): number;
    /**
     * Returns the editor's item specified by its index. An ASPxClientListEditItem object that is the item located at the specified index.
     * @param index An integer value specifying the zero-based index of the item to be retrieved.
     */
    GetItem(index: number): ASPxClientListEditItem;
}
/**
 * Represents the client-side equivalent of the ASPxRadioButtonList control.
 */
declare class ASPxClientRadioButtonList extends ASPxClientCheckListBase {
    /**
     * Converts the specified object to the ASPxClientRadioButtonList type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientRadioButtonList;
}
/**
 * A client-side equivalent of the ASPxCheckBoxList object.
 */
declare class ASPxClientCheckBoxList extends ASPxClientCheckListBase {
    /**
     * Occurs on the client side after a different item in the check box list has been selected (focus has been moved from one item to another).
     */
    SelectedIndexChanged: ASPxClientEvent<ASPxClientListEditItemSelectedChangedEventHandler<ASPxClientCheckBoxList>>;
    /**
     * Returns an array of the check box list editor's selected items indices.
     */
    GetSelectedIndices(): number[];
    /**
     * Returns an array of the check box list editor's selected items values.
     */
    GetSelectedValues(): any[];
    /**
     * Returns an array of the check box list editor's selected items.
     */
    GetSelectedItems(): ASPxClientListEditItem[];
    /**
     * Selects all check box list items.
     */
    SelectAll(): void;
    /**
     * Unselects all check box list items.
     */
    UnselectAll(): void;
    /**
     * Selects items with the specified indices within a check box list.
     * @param indices An array of integer values that are the item indices.
     */
    SelectIndices(indices: number[]): void;
    /**
     * Selects the specified items within a check box list.
     * @param items An array of ASPxClientListEditItem objects that are the items.
     */
    SelectItems(items: ASPxClientListEditItem[]): void;
    /**
     * Selects items with the specified values within a check box list.
     * @param values An array of Object[] objects that are the item values.
     */
    SelectValues(values: any[]): void;
    /**
     * Unselects items with the specified indices within a check box list.
     * @param indices An array of integer values that are the item indices.
     */
    UnselectIndices(indices: number[]): void;
    /**
     * Unselects the specified items within a check box list.
     * @param items An array of ASPxClientListEditItem objects that are the items.
     */
    UnselectItems(items: ASPxClientListEditItem[]): void;
    /**
     * Unselects items with the specified values within a check box list.
     * @param values An array of Object[] objects that are the item values.
     */
    UnselectValues(values: any[]): void;
    /**
     * Converts the specified object to the ASPxClientCheckBoxList type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientCheckBoxList;
}
/**
 * A method that will handle the ASPxClientListBox.SelectedIndexChanged event.
 * @param source The event source.
 * @param e An ASPxClientListEditItemSelectedChangedEventArgs object that contains event data.
 */
interface ASPxClientListEditItemSelectedChangedEventHandler<Sender> { (source: Sender, e: ASPxClientListEditItemSelectedChangedEventArgs): void; }
/**
 * Provides data for the ASPxClientListEdit.SelectedIndexChanged event.
 */
declare class ASPxClientListEditItemSelectedChangedEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Initializes a new instance of the ASPxClientListEditItemSelectedChangedEventArgs class with the specified settings.
     * @param index An integer value that specifies the index of an item.
     * @param isSelected true if an item is selected; otherwise, false.
     */
    constructor(index: number, isSelected: boolean);
    /**
     * Gets the index of the item related to the event.
     */
    index: number;
    /**
     * Gets whether the item has been selected.
     */
    isSelected: boolean;
}
/**
 * A method that will handle the ASPxClientComboBox.ItemFiltering and ASPxClientListBox.ItemFiltering events.
 * @param source The event source.
 * @param e A ASPxClientListEditItemFilteringEventArgs object that contains event data.
 */
interface ASPxClientListEditItemFilteringEventHandler<Sender> { (source: Sender, e: ASPxClientListEditItemFilteringEventArgs): void; }
/**
 * Provides data for the ASPxClientComboBox.ItemFiltering and ASPxClientListBox.ItemFiltering events.
 */
declare class ASPxClientListEditItemFilteringEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientListEditItemFilteringEventArgs class.
     */
    constructor();
    /**
     * Gets the editor item object related to the event.
     */
    item: ASPxClientListEditItem;
    /**
     * Specifies whether the item should be shown in the search result.
     */
    isFit: boolean;
    /**
     * Gets a string that is a filter condition for the editor's items typed by a user.
     */
    filter: string;
}
/**
 * A method that will handle the ASPxClientComboBox.CustomHighlighting and ASPxClientListBox.CustomHighlighting events.
 * @param source The event source.
 * @param e A ASPxClientListEditCustomHighlightingEventArgs object that contains event data.
 */
interface ASPxClientListEditCustomHighlightingEventHandler<Sender> { (source: Sender, e: ASPxClientListEditCustomHighlightingEventArgs): void; }
/**
 * Provides data for the ASPxClientComboBox.CustomHighlighting and ASPxClientListBox.CustomHighlighting events.
 */
declare class ASPxClientListEditCustomHighlightingEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientListEditCustomHighlightingEventArgs class.
     */
    constructor();
    /**
     * Specifies rules according to which the editor highlights the filtered items.
     */
    highlighting: any;
    /**
     * Gets a string that is a filter condition for the editor's items typed by a user.
     */
    filter: string;
}
/**
 * Represents a client-side equivalent of the ASPxProgressBar control.
 */
declare class ASPxClientProgressBar extends ASPxClientEditBase {
    /**
     * Sets the position of the operation's progress.
     * @param position An integer value specifying the progress position.
     */
    SetPosition(position: number): void;
    /**
     * Gets the position of the operation's progress.
     */
    GetPosition(): number;
    /**
     * Sets the pattern used to format the displayed text for the progress bar.
     * @param text A  value that is the format pattern.
     */
    SetCustomDisplayFormat(text: string): void;
    /**
     * Returns the text displayed within the progress bar.
     */
    GetDisplayText(): string;
    /**
     * Sets the percentage representation of the progress position.
     */
    GetPercent(): number;
    /**
     * Sets the minimum range value of the progress bar.
     * @param min An integer value specifying the minimum value of the progress bar range.
     */
    SetMinimum(min: number): void;
    /**
     * Sets the maximum range value of the progress bar.
     * @param max An integer value specifying the maximum value of the progress bar range.
     */
    SetMaximum(max: number): void;
    /**
     * Gets the minimum range value of the progress bar.
     */
    GetMinimum(): number;
    /**
     * Gets the maximum range value of the progress bar.
     */
    GetMaximum(): number;
    /**
     * Sets the minimum and maximum range values of the progress bar.
     * @param minValue An integer value specifying the minimum value of the progress bar range.
     * @param maxValue An integer value specifying the maximum value of the progress bar range.
     */
    SetMinMaxValues(minValue: number, maxValue: number): void;
    /**
     * Converts the specified object to the ASPxClientProgressBar type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientProgressBar;
}
/**
 * Represents a base class for the ASPxClientSpinEdit object.
 */
declare class ASPxClientSpinEditBase extends ASPxClientButtonEditBase {
    /**
     * This event is not in effect for the ASPxClientSpinEditBase. Use the ASPxClientEdit.ValueChanged event instead. Alternatively, use an editor type specific event, such as ASPxClientSpinEdit.NumberChanged for an ASPxClientSpinEdit or ASPxClientTimeEdit.DateChanged for an ASPxClientTimeEdit.
     */
    TextChanged: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientSpinEditBase>>;
}
/**
 * Represents the client-side equivalent of the ASPxSpinEdit control.
 */
declare class ASPxClientSpinEdit extends ASPxClientSpinEditBase {
    /**
     * Occurs on the client side when the editor's value is altered in any way.
     */
    NumberChanged: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientSpinEdit>>;
    /**
     * Specifies the value of the spin edit control on the client side.
     * @param number A Decimal value specifying the control value.
     */
    SetValue(number: number): void;
    /**
     * Sets the spin editor's value.
     * @param number A decimal number specifying the value to assign to the spin editor.
     */
    SetNumber(number: number): void;
    /**
     * Gets a number which represents the spin editor's value.
     */
    GetNumber(): number;
    /**
     * Returns the text displayed within the editor.
     */
    GetText(): string;
    /**
     * Sets the minimum value of the editor.
     * @param value A decimal value specifying the minimum value of the editor.
     */
    SetMinValue(value: number): void;
    /**
     * Gets the minimum value of the editor.
     */
    GetMinValue(): number;
    /**
     * Sets the maximum value of the editor.
     * @param value A decimal value specifying the maximum value of the editor.
     */
    SetMaxValue(value: number): void;
    /**
     * Gets the maximum value of the editor.
     */
    GetMaxValue(): number;
    /**
     * Converts the specified object to the ASPxClientSpinEdit type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientSpinEdit;
}
/**
 * A client-side equivalent of the ASPxTimeEdit control.
 */
declare class ASPxClientTimeEdit extends ASPxClientSpinEditBase {
    /**
     * Fires after the selected date has been changed within the time editor.
     */
    DateChanged: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientTimeEdit>>;
    /**
     * Specifies the date for the editor.
     * @param date A DateTime object that is the date.
     */
    SetDate(date: Date): void;
    /**
     * Gets the date that is the editor's value.
     */
    GetDate(): Date;
    /**
     * Converts the specified object to the ASPxClientTimeEdit type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientTimeEdit;
}
/**
 * Represents a base for client-side static editors whose values cannot be visually changed by end users.
 */
declare class ASPxClientStaticEdit extends ASPxClientEditBase {
    /**
     * Occurs on the client side after an end-user clicks within a static editor.
     */
    Click: ASPxClientEvent<ASPxClientEditEventHandler<ASPxClientStaticEdit>>;
}
/**
 * A method that will handle client-side events which concern clicking within editors.
 * @param source An object representing the event source. Identifies the editor that raised the event.
 * @param e An ASPxClientEditClickEventArgs object that contains event data.
 */
interface ASPxClientEditEventHandler<Sender> { (source: Sender, e: ASPxClientEditClickEventArgs): void; }
/**
 * Provides data for the client-side events which concern clicking within editors.
 */
declare class ASPxClientEditClickEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new object of the ASPxClientEditClickEventArgs type with the specified settings.
     * @param htmlElement An HTML object.
     * @param htmlEvent A DHTML event object that relates to the processed event.
     */
    constructor(htmlElement: any, htmlEvent: any);
    /**
     * Gets the HTML element related to the event.
     */
    htmlElement: any;
    /**
     * Gets a DHTML event object that relates to the processed event.
     */
    htmlEvent: any;
}
/**
 * Represents the client-side equivalent of the ASPxHyperLink control.
 */
declare class ASPxClientHyperLink extends ASPxClientStaticEdit {
    /**
     * Gets an URL which defines the navigation location for the editor's hyperlink.
     */
    GetNavigateUrl(): string;
    /**
     * Specifies an URL which defines the navigation location for the editor's hyperlink.
     * @param url A string value which specifies an URL to where the client web browser will navigate when a hyperlink in the editor is clicked.
     */
    SetNavigateUrl(url: string): void;
    /**
     * Gets the text caption displayed for the hyperlink in the hyperlink editor.
     */
    GetText(): string;
    /**
     * Specifies the text caption displayed for the hyperlink in the hyperlink editor.
     * @param text A string value specifying the text caption for the hyperlink in the editor.
     */
    SetText(text: string): void;
    /**
     * Converts the specified object to the ASPxClientHyperLink type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientHyperLink;
}
/**
 * Represents a base for client-side editors which are capable of displaying images.
 */
declare class ASPxClientImageBase extends ASPxClientStaticEdit {
    /**
     * Sets the size of the image displayed within the image editor.
     * @param width An integer value that specifies the image's width.
     * @param height An integer value that specifies the image's height.
     */
    SetSize(width: number, height: number): void;
}
/**
 * Represents the client-side equivalent of the ASPxImage control.
 */
declare class ASPxClientImage extends ASPxClientImageBase {
    /**
     * Returns the URL pointing to the image displayed within the image editor.
     */
    GetImageUrl(): string;
    /**
     * Sets the URL which points to the image displayed within the image editor.
     * @param url A string value specifying the URL to the image displayed within the editor.
     */
    SetImageUrl(url: string): void;
    /**
     * Converts the specified object to the ASPxClientImage type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientImage;
}
/**
 * Represents the client-side equivalent of the ASPxLabel control.
 */
declare class ASPxClientLabel extends ASPxClientStaticEdit {
    /**
     * Returns the text displayed within the editor.
     */
    GetText(): string;
    /**
     * Sets the text to be displayed within the editor.
     * @param text A string value specifying the text to be displayed within the editor.
     */
    SetText(text: string): void;
    /**
     * Converts the specified object to the ASPxClientLabel type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientLabel;
}
/**
 * Represents a base for client-side objects which allow single-line text input.
 */
declare class ASPxClientTextEdit extends ASPxClientEdit {
    /**
     * Occurs on the client-side when an end-user presses a key while the editor has focus.
     */
    KeyDown: ASPxClientEvent<ASPxClientEditKeyEventHandler<ASPxClientTextEdit>>;
    /**
     * Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
     */
    KeyPress: ASPxClientEvent<ASPxClientEditKeyEventHandler<ASPxClientTextEdit>>;
    /**
     * Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
     */
    KeyUp: ASPxClientEvent<ASPxClientEditKeyEventHandler<ASPxClientTextEdit>>;
    /**
     * Fires on the client side when the editor's text is changed and focus moves out of the editor by end-user interactions.
     */
    TextChanged: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientTextEdit>>;
    /**
     * Fires on the client side when the editor's input value is changed before the focus moves out of the editor by end-user interactions.
     */
    UserInput: ASPxClientEvent<ASPxClientEventHandler<ASPxClientTextEdit>>;
    /**
     * Returns the text displayed within the editor.
     */
    GetText(): string;
    /**
     * Sets the text to be displayed within the editor.
     * @param text A string value specifying the text to be displayed within the editor.
     */
    SetText(text: string): void;
    /**
     * Selects all text in the text editor.
     */
    SelectAll(): void;
    /**
     * Sets the caret position within the edited text.
     * @param position An integer value that specifies the zero-based index of a text character that shall precede the caret.
     */
    SetCaretPosition(position: number): void;
    /**
     * Obtains the caret position within the edited text.
     */
    GetCaretPosition(): number;
    /**
     * Selects the specified portion of the editor's text.
     * @param startPos A zero-based integer value specifying the selection's starting position.
     * @param endPos A zero-based integer value specifying the selection's ending position.
     * @param scrollToSelection true to scroll the editor's contents to make the selection visible; otherwise, false.
     */
    SetSelection(startPos: number, endPos: number, scrollToSelection: boolean): void;
}
/**
 * Represents a base for client-side editors which are capable of displaying and editing text data in their edit regions.
 */
declare class ASPxClientTextBoxBase extends ASPxClientTextEdit {
}
/**
 * A client-side equivalent of the ASPxTextBox control.
 */
declare class ASPxClientTextBox extends ASPxClientTextBoxBase {
    /**
     * Converts the specified object to the ASPxClientTextBox type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientTextBox;
}
/**
 * A client-side equivalent of the ASPxMemo control.
 */
declare class ASPxClientMemo extends ASPxClientTextEdit {
    /**
     * Converts the specified object to the ASPxClientMemo type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientMemo;
}
/**
 * Represents a base for client button editor objects.
 */
declare class ASPxClientButtonEditBase extends ASPxClientTextBoxBase {
    /**
     * Occurs on the client side after an editor button is clicked.
     */
    ButtonClick: ASPxClientEvent<ASPxClientButtonEditClickEventHandler<ASPxClientButtonEditBase>>;
    /**
     * Returns a button by its index in the button collection. A button.
     * @param number A button index.
     */
    GetButton(number: number): any;
    /**
     * Specifies whether the button is visible.
     * @param number An integer value specifying the button's index within the ASPxButtonEditBase.Buttons collection.
     * @param value true, to make the button visible; otherwise, false.
     */
    SetButtonVisible(number: number, value: boolean): void;
    /**
     * Returns a value specifying whether a button is displayed. true, if the button visible; otherwise, false.
     * @param number An integer value specifying the button's index within the ASPxButtonEditBase.Buttons collection.
     */
    GetButtonVisible(number: number): boolean;
}
/**
 * Represents the client-side equivalent of the ASPxButtonEdit control.
 */
declare class ASPxClientButtonEdit extends ASPxClientButtonEditBase {
    /**
     * Converts the specified object to the ASPxClientButtonEdit type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientButtonEdit;
}
/**
 * A method that will handle the ASPxClientButtonEditBase.ButtonClick event.
 * @param source An object representing the event source. Identifies the button editor that raised the event.
 * @param e An ASPxClientButtonEditClickEventArgs object that contains event data.
 */
interface ASPxClientButtonEditClickEventHandler<Sender> { (source: Sender, e: ASPxClientButtonEditClickEventArgs): void; }
/**
 * Provides data for the ASPxClientButtonEditBase.ButtonClick event.
 */
declare class ASPxClientButtonEditClickEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Initializes a new instance of the ASPxClientButtonEditClickEventArgs object with the specified parameters.
     * @param processOnServer true to process the event on the server side; false to completely handle it on the client side. Initializes the ASPxClientProcessingModeEventArgs.processOnServer property.
     * @param buttonIndex An integer value representing the zero based index of the clicked button. Initializes the ASPxClientButtonEditClickEventArgs.buttonIndex property.
     */
    constructor(processOnServer: boolean, buttonIndex: number);
    /**
     * Gets the index of the clicked button.
     */
    buttonIndex: number;
}
/**
 * A client-side equivalent of the ASPxTokenBox object.
 */
declare class ASPxClientTokenBox extends ASPxClientComboBox {
    /**
     * Adds a new token with the specified text to the end of the control's token collection.
     * @param text A string value specifying the token's text.
     */
    AddToken(text: string): void;
    /**
     * Removes a token specified by its text from the client token box.
     * @param text A string value that is the text of the token to be removed.
     */
    RemoveTokenByText(text: string): void;
    /**
     * Removes a token specified by its index from the client token box.
     * @param index An integer value that is the index of the token to be removed.
     */
    RemoveToken(index: number): void;
    /**
     * Returns an HTML span element that corresponds to the specified token. An object that is the HTML span element that corresponds to the specified token.
     * @param index An integer value that is the token index.
     */
    GetTokenHtmlElement(index: number): any;
    /**
     * Returns an HTML span element that corresponds to the specified token's text. An object that is the HTML span element that corresponds to the specified token's text.
     * @param index An integer value that is the token index.
     */
    GetTokenTextHtmlElement(index: number): any;
    /**
     * Returns an HTML span element that corresponds to the specified token's remove button. An object that is the HTML span element that corresponds to the specified token's remove button.
     * @param index An integer value that is the token index.
     */
    GetTokenRemoveButtonHtmlElement(index: number): any;
    /**
     * Returns a collection of tokens.
     */
    GetTokenCollection(): string[];
    /**
     * Sets a collection of tokens.
     * @param collection A  object that is the collection of tokens.
     */
    SetTokenCollection(collection: string[]): void;
    /**
     * Removes all tokens contained in the token box.
     */
    ClearTokenCollection(): void;
    /**
     * Returns the index of a token specified by its text. An integer value that is the token index
     * @param text A string value that specifies the text of the token.
     */
    GetTokenIndexByText(text: string): number;
    /**
     * Gets the token texts, separated with a sign, specified by the ASPxTokenBox.TextSeparator property.
     */
    GetText(): string;
    /**
     * Sets the token texts, separated with a sign, specified by the ASPxTokenBox.TextSeparator property.
     * @param text A string value that is the token texts separated with a text separator.
     */
    SetText(text: string): void;
    /**
     * Gets the editor value.
     */
    GetValue(): string;
    /**
     * Sets the editor value.
     * @param value A string that is the editor value.
     */
    SetValue(value: string): void;
    /**
     * Returns a value that indicates if the specified token (string) is a custom token. true, if the token is not contained in the predefined ASPxAutoCompleteBoxBase.Items collection; otherwise, false.
     * @param text A string value that is a token.
     * @param caseSensitive true, if tokens are case sensitive; otherwise, false.
     */
    IsCustomToken(text: string, caseSensitive: boolean): boolean;
    /**
     * Fires on the client side after the token collection has been changed.
     */
    TokensChanged: ASPxClientEvent<ASPxClientEventHandler<ASPxClientTokenBox>>;
    /**
     * For internal use only.
     */
    ButtonClick: ASPxClientEvent<ASPxClientButtonEditClickEventHandler<ASPxClientTokenBox>>;
    /**
     * For internal use only.
     */
    SetSelectedIndex(index: number): void;
    /**
     * For internal use only.
     */
    SetSelectedItem(item: ASPxClientListEditItem): void;
    /**
     * Converts the specified object to the ASPxClientTokenBox type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientTokenBox;
}
/**
 * The client-side equivalent of the ASPxTrackBar control.
 */
declare class ASPxClientTrackBar extends ASPxClientEdit {
    /**
     * Fires on the client side before a track bar position is changed and allows you to cancel the action.
     */
    PositionChanging: ASPxClientEvent<ASPxClientTrackBarPositionChangingEventHandler<ASPxClientTrackBar>>;
    /**
     * Fires after the editor's position has been changed.
     */
    PositionChanged: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientTrackBar>>;
    /**
     * Occurs on the client-side when an end-user moves a cursor while the drag handle is held down.
     */
    Track: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientTrackBar>>;
    /**
     * Occurs on the client-side when an end-user presses a drag handle and moves it.
     */
    TrackStart: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientTrackBar>>;
    /**
     * Occurs on the client-side when an end-user releases a drag handle after moving it.
     */
    TrackEnd: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientTrackBar>>;
    /**
     * Returns a track bar item index by the item's value. An Int32 value that is an index of the item with the specified value. null (Nothing in Visual Basic) if the item was not found.
     * @param value An object that specifies the item's value.
     */
    GetItemIndexByValue(value: any): number;
    /**
     * Returns a track bar item's associated value. An Object that specifies the item's value.
     * @param index An integer value that specifies the required item's index.
     */
    GetItemValue(index: number): any;
    /**
     * Returns a track bar item text. A String value specifying the track bar item text.
     * @param index An integer value that specifies the required item's index.
     */
    GetItemText(index: number): string;
    /**
     * Returns a track bar item's tooltip text. A String value that specifies the text content of the current item's tooltip.
     * @param index An integer value that specifies the required item's index.
     */
    GetItemToolTip(index: number): string;
    /**
     * Returns the number of the track bar items that are maintained by the item collection.
     */
    GetItemCount(): number;
    /**
     * Specifies the secondary drag handle position.
     * @param position A  value that specifies the position.
     */
    SetPositionEnd(position: number): void;
    /**
     * Specifies the main drag handle position.
     * @param position A  value that specifies the position.
     */
    SetPositionStart(position: number): void;
    /**
     * Returns the secondary drag handle position.
     */
    GetPositionEnd(): number;
    /**
     * Returns the main drag handle position.
     */
    GetPositionStart(): number;
    /**
     * Gets a drag handle position.
     */
    GetPosition(): number;
    /**
     * Specifies a drag handle position.
     * @param position A  value that specifies the position.
     */
    SetPosition(position: number): void;
    /**
     * Converts the specified object to the ASPxClientTrackBar type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientTrackBar;
}
/**
 * A method that will handle the ASPxClientTrackBar.PositionChanging event.
 * @param source The event source. Identifies the ASPxTrackBar control that raised the event.
 * @param e A ASPxClientTrackBarPositionChangingEventArgs object that contains event data.
 */
interface ASPxClientTrackBarPositionChangingEventHandler<Sender> { (source: Sender, e: ASPxClientTrackBarPositionChangingEventArgs): void; }
/**
 * Provides data for the ASPxClientTrackBar.PositionChanging event.
 */
declare class ASPxClientTrackBarPositionChangingEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Initializes a new instance of the ASPxClientTrackBarPositionChangingEventArgs object with the specified setting.
     * @param currentPositionStart A Decimal value specifying the current main drag handle position.
     * @param currentPositionEnd A Decimal value specifying the current secondary drag handle position.
     * @param newPositionStart A Decimal value specifying a position where the main drag handle is being moved.
     * @param newPositionEnd A Decimal value specifying a position where the secondary drag handle is being moved.
     */
    constructor(currentPositionStart: number, currentPositionEnd: number, newPositionStart: number, newPositionEnd: number);
    /**
     * Gets or sets a value indicating whether the action which raised the event should be canceled.
     */
    cancel: boolean;
    /**
     * Gets the current drag handle position.
     */
    currentPosition: number;
    /**
     * Gets the current secondary drag handle position.
     */
    currentPositionEnd: number;
    /**
     * Gets the current main drag handle position.
     */
    currentPositionStart: number;
    /**
     * Gets a position where the drag handle is being moved.
     */
    newPosition: number;
    /**
     * Gets a position where the secondary drag handle is being moved.
     */
    newPositionEnd: number;
    /**
     * Gets a position where the main drag handle is being moved.
     */
    newPositionStart: number;
}
/**
 * Represents the client-side equivalent of the ASPxValidationSummary control.
 */
declare class ASPxClientValidationSummary extends ASPxClientControl {
    /**
     * Occurs on the client side when the validation summary's visibility is changed.
     */
    VisibilityChanged: ASPxClientEvent<ASPxClientValidationSummaryVisibilityChangedEventHandler<ASPxClientValidationSummary>>;
}
/**
 * A method that will handle the ASPxClientValidationSummary.VisibilityChanged client event.
 * @param source An object representing the event source.
 * @param e A ASPxClientValidationSummaryVisibilityChangedEventArgs object that contains event data.
 */
interface ASPxClientValidationSummaryVisibilityChangedEventHandler<Sender> { (source: Sender, e: ASPxClientValidationSummaryVisibilityChangedEventArgs): void; }
/**
 * Provides data for the ASPxClientValidationSummary.VisibilityChanged event.
 */
declare class ASPxClientValidationSummaryVisibilityChangedEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientValidationSummaryVisibilityChangedEventArgs class.
     * @param visible true if the editor is visible; otherwise, false.
     */
    constructor(visible: boolean);
    /**
     * Gets or sets whether the editor is visible on the client.
     */
    visible: boolean;
}
/**
 * Represents the client-side equivalent of the ASPxFileManager control.
 */
declare class ASPxClientFileManager extends ASPxClientControl {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientFileManager>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientFileManager>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientFileManager.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientFileManager>>;
    /**
     * Fires on the client side after the selected file has been changed.
     */
    SelectedFileChanged: ASPxClientEvent<ASPxClientFileManagerFileEventHandler<ASPxClientFileManager>>;
    /**
     * Fires on the client side when an end-user opens a file by double-clicking it or pressing the Enter key.
     */
    SelectedFileOpened: ASPxClientEvent<ASPxClientFileManagerFileOpenedEventHandler<ASPxClientFileManager>>;
    /**
     * Fires after the focused item has been changed.
     */
    FocusedItemChanged: ASPxClientEvent<ASPxClientFileManagerFocusedItemChangedEventHandler<ASPxClientFileManager>>;
    /**
     * Fires after the selection has been changed.
     */
    SelectionChanged: ASPxClientEvent<ASPxClientFileManagerSelectionChangedEventHandler<ASPxClientFileManager>>;
    /**
     * Fires on the client side after the current folder has been changed within a file manager.
     */
    CurrentFolderChanged: ASPxClientEvent<ASPxClientFileManagerCurrentFolderChangedEventHandler<ASPxClientFileManager>>;
    /**
     * Fires on the client side before the folder is created, and allows you to cancel the action.
     */
    FolderCreating: ASPxClientEvent<ASPxClientFileManagerItemEditingEventHandler<ASPxClientFileManager>>;
    /**
     * Occurs on the client side after a folder has been created.
     */
    FolderCreated: ASPxClientEvent<ASPxClientFileManagerItemCreatedEventHandler<ASPxClientFileManager>>;
    /**
     * Fires on the client side before an item is renamed and allows you to cancel the action.
     */
    ItemRenaming: ASPxClientEvent<ASPxClientFileManagerItemEditingEventHandler<ASPxClientFileManager>>;
    /**
     * Occurs on the client side after a file manager's item has been renamed.
     */
    ItemRenamed: ASPxClientEvent<ASPxClientFileManagerItemRenamedEventHandler<ASPxClientFileManager>>;
    /**
     * Fires on the client side before an item is deleted and allows you to cancel the action.
     */
    ItemDeleting: ASPxClientEvent<ASPxClientFileManagerItemEditingEventHandler<ASPxClientFileManager>>;
    /**
     * Occurs on the client side after a file manager's item has been deleted.
     */
    ItemDeleted: ASPxClientEvent<ASPxClientFileManagerItemDeletedEventHandler<ASPxClientFileManager>>;
    /**
     * Occurs on the client side after all the selected items have been deleted.
     */
    ItemsDeleted: ASPxClientEvent<ASPxClientFileManagerItemsDeletedEventHandler<ASPxClientFileManager>>;
    /**
     * Fires on the client side before an item is moved and allows you to cancel the action.
     */
    ItemMoving: ASPxClientEvent<ASPxClientFileManagerItemEditingEventHandler<ASPxClientFileManager>>;
    /**
     * Occurs on the client side after a file manager's item has been moved.
     */
    ItemMoved: ASPxClientEvent<ASPxClientFileManagerItemMovedEventHandler<ASPxClientFileManager>>;
    /**
     * Occurs on the client side after all the selected items have been moved.
     */
    ItemsMoved: ASPxClientEvent<ASPxClientFileManagerItemsMovedEventHandler<ASPxClientFileManager>>;
    /**
     * Fires on the client side before an item is copied and allows you to cancel the action.
     */
    ItemCopying: ASPxClientEvent<ASPxClientFileManagerItemEditingEventHandler<ASPxClientFileManager>>;
    /**
     * Occurs on the client side after a file manager item has been copied.
     */
    ItemCopied: ASPxClientEvent<ASPxClientFileManagerItemCopiedEventHandler<ASPxClientFileManager>>;
    /**
     * Occurs on the client side after all the selected items have been copied.
     */
    ItemsCopied: ASPxClientEvent<ASPxClientFileManagerItemsCopiedEventHandler<ASPxClientFileManager>>;
    /**
     * Fires on the client if any error occurs while editing an item.
     */
    ErrorOccurred: ASPxClientEvent<ASPxClientFileManagerErrorEventHandler<ASPxClientFileManager>>;
    /**
     * Enables you to display the alert with the result error description.
     */
    ErrorAlertDisplaying: ASPxClientEvent<ASPxClientFileManagerErrorAlertDisplayingEventHandler<ASPxClientFileManager>>;
    /**
     * Fires when a custom item is clicked, allowing you to perform custom actions.
     */
    CustomCommand: ASPxClientEvent<ASPxClientFileManagerCustomCommandEventHandler<ASPxClientFileManager>>;
    /**
     * Fires on the client side when the file manager updates the state of toolbar or context menu items.
     */
    ToolbarUpdating: ASPxClientEvent<ASPxClientFileManagerToolbarUpdatingEventHandler<ASPxClientFileManager>>;
    /**
     * Enables you to highlight the search text, which is specified using the filter box, in templates.
     */
    HighlightItemTemplate: ASPxClientEvent<ASPxClientFileManagerHighlightItemTemplateEventHandler<ASPxClientFileManager>>;
    /** @deprecated This event is now obsolete. Use the FilesUploading event instead. */
    /**
     * Fires on the client side before a file upload starts, and allows you to cancel the action.
     */
    FileUploading: ASPxClientEvent<ASPxClientFileManagerFileUploadingEventHandler<ASPxClientFileManager>>;
    /**
     * Fires on the client side before the selected items are uploaded and allows you to cancel the action.
     */
    FilesUploading: ASPxClientEvent<ASPxClientFileManagerFilesUploadingEventHandler<ASPxClientFileManager>>;
    /**
     * Occurs on the client side after a file has been uploaded.
     */
    FileUploaded: ASPxClientEvent<ASPxClientFileManagerFileUploadedEventHandler<ASPxClientFileManager>>;
    /**
     * Occurs on the client side after upload of all selected files has been completed.
     */
    FilesUploaded: ASPxClientEvent<ASPxClientFileManagerFilesUploadedEventHandler<ASPxClientFileManager>>;
    /**
     * Enables you to specify whether the selected file(s) are valid and provide an error text.
     */
    FileUploadValidationErrorOccurred: ASPxClientEvent<ASPxClientUploadControlValidationErrorOccurredEventHandler<ASPxClientFileManager>>;
    /**
     * Fires on the client side before a file download starts, and allows you to cancel the action.
     */
    FileDownloading: ASPxClientEvent<ASPxClientFileManagerFileDownloadingEventHandler<ASPxClientFileManager>>;
    /**
     * Gets the name of the currently active file manager area.
     */
    GetActiveAreaName(): string;
    /**
     * Client-side scripting method which initiates a round trip to the server, so that the current page will be reloaded.
     */
    Refresh(): void;
    /**
     * Executes the specified command. true, if the specified command has been completed successfully; otherwise, false.
     * @param commandName A string value that specifies the command to perform.
     */
    ExecuteCommand(commandName: string): boolean;
    /**
     * Returns the selected file within the ASPxFileManager control's file container.
     */
    GetSelectedFile(): ASPxClientFileManagerFile;
    /**
     * Returns an array of the file manager's selected items.
     */
    GetSelectedItems(): ASPxClientFileManagerFile[];
    /**
     * Returns a list of files that are loaded on the current page.
     */
    GetItems(): ASPxClientFileManagerFile[];
    /**
     * Sends a callback to the server and returns a list of files that are contained within the current folder.
     * @param onCallback A  object that represents the JavaScript function which receives the list of row values as a parameter.
     */
    GetAllItems(onCallback: ASPxClientFileManagerAllItemsCallback): void;
    /**
     * Returns a toolbar item specified by its command name. An ASPxClientFileManagerToolbarItem object that is the item with the specified command name.
     * @param commandName A string value specifying the command name of the item.
     */
    GetToolbarItemByCommandName(commandName: string): ASPxClientFileManagerToolbarItem;
    /**
     * Returns a context menu item specified by its command name. An ASPxClientFileManagerToolbarItem object that is the item with the specified command name.
     * @param commandName A string value specifying the command name of the item.
     */
    GetContextMenuItemByCommandName(commandName: string): ASPxClientFileManagerToolbarItem;
    /**
     * Gets the current folder's path with the specified settings. A string value that represents the path to the folder.
     * @param separator A string value that specifies the separator between the folder's name within the path.
     * @param skipRootFolder true to skip the root folder; otherwise, false.
     */
    GetCurrentFolderPath(separator?: string, skipRootFolder?: boolean): string;
    /**
     * Sets the current folder's path.
     * @param path A String value that is the relative path to the folder (without the root folder).
     * @param onCallback A ASPxClientFileManagerCallback object that is the JavaScript function that receives the callback data as a parameter.
     */
    SetCurrentFolderPath(path: string, onCallback: ASPxClientFileManagerCallback): void;
    /**
     * Gets the current folder's ID.
     */
    GetCurrentFolderId(): string;
    /**
     * Sends a callback to the server and generates the server-side ASPxFileManager.CustomCallback event, passing it the specified argument.
     * @param args A string value that specifies any information that needs to be sent to the server-side ASPxFileManager.CustomCallback event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(args: string, onSuccess?: (arg: string) => void): void;
    /**
     * Converts the specified object to the ASPxClientFileManager type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientFileManager;
}
/**
 * A JavaScript function that receives callback data obtained via a call to the ASPxClientFileManager.SetCurrentFolderPath method.
 * @param result An object that contains a callback data.
 */
interface ASPxClientFileManagerCallback { (result: any): void; }
/**
 * A client-side equivalent of the file manager's FileManagerItem object and serves as a base class for client file and folder objects.
 */
declare class ASPxClientFileManagerItem {
    /**
     * Gets the name of the current item.
     */
    name: string;
    /**
     * Gets the item's unique identifier.
     */
    id: string;
    /**
     * Gets a value that indicates if the current file manager item is a folder.
     */
    isFolder: boolean;
    /**
     * Specifies whether the file manager item is selected.
     * @param selected true, to select the item; otherwise, false.
     */
    SetSelected(selected: boolean): void;
    /**
     * Gets a value indicating whether the item is selected in the file manager.
     */
    IsSelected(): boolean;
    /**
     * Gets the current item's full name with the specified settings. A string value that is the full name of an item.
     * @param separator A string value that specifies the separator between the folder name inside the item's full name.
     * @param skipRootFolder true, to skip the root folder; otherwise, false.
     */
    GetFullName(separator?: string, skipRootFolder?: boolean): string;
    /**
     * Gets the current item's metadata.
     */
    GetMetadata(): any;
}
/**
 * Represents the client-side equivalent of the FileManagerFile object.
 */
declare class ASPxClientFileManagerFile extends ASPxClientFileManagerItem {
    /**
     * Downloads a file from a file manager.
     */
    Download(): void;
}
/**
 * A client-side equivalent of the FileManagerFolder object.
 */
declare class ASPxClientFileManagerFolder extends ASPxClientFileManagerItem {
    /**
     * Gets a value specifying whether an item is a parent folder.
     */
    isParentFolder: boolean;
}
/**
 * A JavaScript function which receives callback data obtained by a call to the client ASPxClientFileManager.GetAllItems method.
 * @param items An array of ASPxClientFileManagerItem objects that are items contained in the current folder.
 */
interface ASPxClientFileManagerAllItemsCallback { (items: ASPxClientFileManagerItem[]): void; }
/**
 * A method that will handle the ASPxClientFileManager.SelectedFileChanged and ASPxClientFileManager.SelectedFileOpened events.
 * @param source An object representing the event's source.
 * @param e An ASPxClientFileManagerFileEventArgs object that contains event data.
 */
interface ASPxClientFileManagerFileEventHandler<Sender> { (source: Sender, e: ASPxClientFileManagerFileEventArgs): void; }
/**
 * Provides data for the ASPxClientFileManager.SelectedFileChanged and ASPxClientFileManager.SelectedFileOpened events.
 */
declare class ASPxClientFileManagerFileEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientFileManagerFileEventArgs class.
     * @param file An ASPxClientFileManagerFile object representing the file related to the event.
     */
    constructor(file: ASPxClientFileManagerFile);
    /**
     * Gets a file related to the event.
     */
    file: ASPxClientFileManagerFile;
}
/**
 * A method that will handle the ASPxClientFileManager.SelectedFileOpened event.
 * @param source The event source. This parameter identifies the file manager object which raised the event.
 * @param e An ASPxClientFileManagerFileOpenedEventArgs object that contains event data.
 */
interface ASPxClientFileManagerFileOpenedEventHandler<Sender> { (source: Sender, e: ASPxClientFileManagerFileOpenedEventArgs): void; }
/**
 * Provides data for the ASPxClientFileManager.SelectedFileOpened event.
 */
declare class ASPxClientFileManagerFileOpenedEventArgs extends ASPxClientFileManagerFileEventArgs {
    /**
     * Initializes a new instance of the ASPxClientFileManagerFileOpenedEventArgs class.
     * @param file An ASPxClientFileManagerFile object is the file related to the event.
     */
    constructor(file: ASPxClientFileManagerFile);
    /**
     * Gets or sets a value that specifies whether the event should be finally processed on the server side.
     */
    processOnServer: boolean;
}
/**
 * Serves as a base for classes that are used as arguments for events generated on the client side.
 */
declare class ASPxClientFileManagerActionEventArgsBase extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientFileManagerActionEventArgsBase class with the specified settings.
     * @param fullName A string value that specifies the new full item's name. Initializes the ASPxClientFileManagerActionEventArgsBase.fullName property.
     * @param name A string value that specifies the item's name. Initializes the ASPxClientFileManagerActionEventArgsBase.name property.
     * @param isFolder true if the processed  item is a folder; otherwise, false. Initializes the ASPxClientFileManagerActionEventArgsBase.isFolder property.
     */
    constructor(fullName: string, name: string, isFolder: boolean);
    /**
     * Gets the full name of the item currently being processed.
     */
    fullName: string;
    /**
     * Gets the name of the currently processed item.
     */
    name: string;
    /**
     * Gets a value specifying whether the current processed item is a folder.
     */
    isFolder: boolean;
}
/**
 * A method that will handle the ASPxClientFileManager.FolderCreating, ASPxClientFileManager.ItemCopying, ASPxClientFileManager.ItemDeleting, ASPxClientFileManager.ItemMoving, and ASPxClientFileManager.ItemRenaming events.
 * @param source The event source. Identifies the ASPxFileManager control that raised the event.
 * @param e A ASPxClientFileManagerItemEditingEventArgs object that contains event data.
 */
interface ASPxClientFileManagerItemEditingEventHandler<Sender> { (source: Sender, e: ASPxClientFileManagerItemEditingEventArgs): void; }
/**
 * Provides data for the item editing event.
 */
declare class ASPxClientFileManagerItemEditingEventArgs extends ASPxClientFileManagerActionEventArgsBase {
    /**
     * Initializes a new instance of the ASPxClientFileManagerItemEditingEventArgs object with the specified parameters.
     * @param fullName A string value that is the folder's full name.
     * @param name A string value that specifies the item's name.
     * @param isFolder true if the current item is a folder; false if the current item is a file.
     */
    constructor(fullName: string, name: string, isFolder: boolean);
    /**
     * Gets or sets a value indicating whether the action which raised the event should be canceled.
     */
    cancel: boolean;
}
/**
 * A method that will handle the ASPxClientFileManager.ItemRenamed event.
 * @param source The event source. Identifies the ASPxFileManager control that raised the event.
 * @param e A ASPxClientFileManagerItemRenamedEventArgs object that contains event data.
 */
interface ASPxClientFileManagerItemRenamedEventHandler<Sender> { (source: Sender, e: ASPxClientFileManagerItemRenamedEventArgs): void; }
/**
 * Provides data for the ASPxClientFileManager.ItemRenamed event.
 */
declare class ASPxClientFileManagerItemRenamedEventArgs extends ASPxClientFileManagerActionEventArgsBase {
    /**
     * Initializes a new instance of the ASPxClientFileManagerItemRenamedEventArgs object with the specified parameters.
     * @param fullName A string value that is the item's full name.
     * @param name A string value that specifies the item's name.
     * @param oldName A string value that specifies the item name.
     * @param isFolder true if the processed item is a folder; false if the processed item is a file.
     */
    constructor(fullName: string, name: string, oldName: string, isFolder: boolean);
    /**
     * Gets the previous name of the renamed item.
     */
    oldName: string;
}
/**
 * A method that will handle the ASPxClientFileManager.ItemDeleted event.
 * @param source The event source. Identifies the ASPxFileManager control that raised the event.
 * @param e A ASPxClientFileManagerItemDeletedEventArgs object that contains event data.
 */
interface ASPxClientFileManagerItemDeletedEventHandler<Sender> { (source: Sender, e: ASPxClientFileManagerItemDeletedEventArgs): void; }
/**
 * Provides data for the ASPxClientFileManager.ItemDeleted event.
 */
declare class ASPxClientFileManagerItemDeletedEventArgs extends ASPxClientFileManagerActionEventArgsBase {
    /**
     * Initializes a new instance of the ASPxClientFileManagerItemDeletedEventArgs object with the specified parameters.
     * @param fullName A string value that is the item's full name.
     * @param name A string value that specifies the item's name.
     * @param isFolder true if the processed item is a folder; false if the processed item is a file.
     */
    constructor(fullName: string, name: string, isFolder: boolean);
}
/**
 * A method that will handle the ASPxClientFileManager.ItemsDeleted event.
 * @param source The event source. Identifies the ASPxFileManager control that raised the event.
 * @param e A ASPxClientFileManagerItemsDeletedEventArgs object that contains event data.
 */
interface ASPxClientFileManagerItemsDeletedEventHandler<Sender> { (source: Sender, e: ASPxClientFileManagerItemsDeletedEventArgs): void; }
/**
 * Provides data for the ASPxClientFileManager.ItemsDeleted event.
 */
declare class ASPxClientFileManagerItemsDeletedEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientFileManagerItemsDeletedEventArgs object.
     * @param items An array of ASPxClientFileManagerItem objects that are items currently being processed.
     */
    constructor(items: ASPxClientFileManagerItem[]);
    /**
     * Gets an array of the currently processed items.
     */
    items: ASPxClientFileManagerItem[];
}
/**
 * A method that will handle the ASPxClientFileManager.ItemMoved event.
 * @param source The event source. Identifies the ASPxFileManager control that raised the event.
 * @param e A ASPxClientFileManagerItemMovedEventArgs object that contains event data.
 */
interface ASPxClientFileManagerItemMovedEventHandler<Sender> { (source: Sender, e: ASPxClientFileManagerItemMovedEventArgs): void; }
/**
 * Provides data for the ASPxClientFileManager.ItemMoved event.
 */
declare class ASPxClientFileManagerItemMovedEventArgs extends ASPxClientFileManagerActionEventArgsBase {
    /**
     * Initializes a new instance of the ASPxClientFileManagerItemMovedEventArgs object with the specified parameters.
     * @param fullName A string value that is the item's full name.
     * @param name A string value that specifies the item's name.
     * @param oldFolderFullName A string value that specifies the folder's full name.
     * @param isFolder true if the processed item is a folder; false if the processed item is a file.
     */
    constructor(fullName: string, name: string, oldFolderFullName: string, isFolder: boolean);
    /**
     * Gets the full name of the folder from which an item is moved.
     */
    oldFolderFullName: string;
}
/**
 * A method that will handle the ASPxClientFileManager.ItemsMoved event.
 * @param source The event source. Identifies the ASPxFileManager control that raised the event.
 * @param e A ASPxClientFileManagerItemsMovedEventArgs object that contains event data.
 */
interface ASPxClientFileManagerItemsMovedEventHandler<Sender> { (source: Sender, e: ASPxClientFileManagerItemsMovedEventArgs): void; }
/**
 * Provides data for the ASPxClientFileManager.ItemsMoved event.
 */
declare class ASPxClientFileManagerItemsMovedEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientFileManagerItemsMovedEventArgs object with the specified parameters.
     * @param items An array of ASPxClientFileManagerItem objects that are items currently being processed.
     * @param oldFolderFullName A string value that specifies the folder's full name.
     */
    constructor(items: ASPxClientFileManagerItem[], oldFolderFullName: string);
    /**
     * Gets an array of the currently processed items.
     */
    items: ASPxClientFileManagerItem[];
    /**
     * Gets the full name of the folder from which items are moved.
     */
    oldFolderFullName: string;
}
/**
 * A method that will handle the ASPxClientFileManager.ItemCopied event.
 * @param source The event source. Identifies the ASPxFileManager control that raised the event.
 * @param e A ASPxClientFileManagerItemCopiedEventArgs object that contains event data.
 */
interface ASPxClientFileManagerItemCopiedEventHandler<Sender> { (source: Sender, e: ASPxClientFileManagerItemCopiedEventArgs): void; }
/**
 * Provides data for the ASPxClientFileManager.ItemCopied event.
 */
declare class ASPxClientFileManagerItemCopiedEventArgs extends ASPxClientFileManagerActionEventArgsBase {
    /**
     * Initializes a new instance of the ASPxClientFileManagerItemCopiedEventArgs object with the specified parameters.
     * @param fullName A string value that is the item's full name.
     * @param name A string value that specifies the item's name.
     * @param oldFolderFullName A string value that specifies the folder's full name.
     * @param isFolder true if the processed item is a folder; false if the processed item is a file.
     */
    constructor(fullName: string, name: string, oldFolderFullName: string, isFolder: boolean);
    /**
     * Gets the full name of the folder from which an item is copied.
     */
    oldFolderFullName: string;
}
/**
 * A method that will handle the ASPxClientFileManager.ItemsCopied event.
 * @param source The event source. Identifies the ASPxFileManager control that raised the event.
 * @param e A ASPxClientFileManagerItemsCopiedEventArgs object that contains event data.
 */
interface ASPxClientFileManagerItemsCopiedEventHandler<Sender> { (source: Sender, e: ASPxClientFileManagerItemsCopiedEventArgs): void; }
/**
 * Provides data for the ASPxClientFileManager.ItemsCopied event.
 */
declare class ASPxClientFileManagerItemsCopiedEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientFileManagerItemsCopiedEventArgs object with the specified parameters.
     * @param items An array of ASPxClientFileManagerItem objects that are items currently being processed.
     * @param oldFolderFullName A string value that specifies the folder's full name.
     */
    constructor(items: ASPxClientFileManagerItem[], oldFolderFullName: string);
    /**
     * Gets an array of the currently processed items.
     */
    items: ASPxClientFileManagerItem[];
    /**
     * Gets the full name of the folder from which items are copied.
     */
    oldFolderFullName: string;
}
/**
 * A method that will handle the ASPxClientFileManager.FolderCreated event.
 * @param source The event source. Identifies the ASPxFileManager control that raised the event.
 * @param e A ASPxClientFileManagerItemCreatedEventArgs object that contains event data.
 */
interface ASPxClientFileManagerItemCreatedEventHandler<Sender> { (source: Sender, e: ASPxClientFileManagerItemCreatedEventArgs): void; }
/**
 * Provides data for the ASPxClientFileManager.FolderCreated event.
 */
declare class ASPxClientFileManagerItemCreatedEventArgs extends ASPxClientFileManagerActionEventArgsBase {
    /**
     * Initializes a new instance of the ASPxClientFileManagerItemCreatedEventArgs object with the specified parameters.
     * @param fullName A string value that is the item's full name.
     * @param name A string value that specifies the item's name.
     * @param isFolder true if the current item is a folder; false if the current item is a file.
     */
    constructor(fullName: string, name: string, isFolder: boolean);
}
/**
 * A method that will handle the client ASPxClientFileManager.ErrorOccurred event.
 * @param source An object representing the event's source.
 * @param e An ASPxClientFileManagerErrorEventArgs object that contains event data.
 */
interface ASPxClientFileManagerErrorEventHandler<Sender> { (source: Sender, e: ASPxClientFileManagerErrorEventArgs): void; }
/**
 * Provides data for the ASPxClientFileManager.ErrorOccurred event.
 */
declare class ASPxClientFileManagerErrorEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientFileManagerErrorEventArgs class.
     * @param commandName A string value that specifies the name of the processed command.
     * @param errorText A string value that specifies the error description.
     * @param errorCode An integer value that specifies the error code.
     */
    constructor(commandName: string, errorText: string, errorCode: number);
    /**
     * Gets the name of the processed command.
     */
    commandName: string;
    /**
     * Gets or sets the error description.
     */
    errorText: string;
    /**
     * Gets or sets a value specifying whether an event error message is sent to the ASPxClientFileManager.ErrorAlertDisplaying event.
     */
    showAlert: boolean;
    /**
     * Gets a specifically generated code that uniquely identifies an error, which occurs while editing an item.
     */
    errorCode: number;
}
/**
 * A method that will handle the ASPxClientFileManager.ErrorAlertDisplaying event.
 * @param source The event source. Identifies the ASPxFileManager control that raised the event.
 * @param e A ASPxClientFileManagerErrorAlertDisplayingEventArgs object that contains event data.
 */
interface ASPxClientFileManagerErrorAlertDisplayingEventHandler<Sender> { (source: Sender, e: ASPxClientFileManagerErrorAlertDisplayingEventArgs): void; }
/**
 * Provides data for the ASPxClientFileManager.ErrorAlertDisplaying event.
 */
declare class ASPxClientFileManagerErrorAlertDisplayingEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientFileManagerErrorAlertDisplayingEventArgs class with the specified settings.
     * @param commandName A String value that specifies the name of the processed command. Initializes the ASPxClientFileManagerErrorAlertDisplayingEventArgs.commandName property.
     * @param errorText A String value that specifies the error text. This value is assigned to the ASPxClientFileManagerErrorAlertDisplayingEventArgs.errorText property.
     */
    constructor(commandName: string, errorText: string);
    /**
     * Gets the name of the processed command.
     */
    commandName: string;
    /**
     * Gets or sets the errors description.
     */
    errorText: string;
    /**
     * Gets or sets a value specifying whether an alert message is displayed when the event fires.
     */
    showAlert: boolean;
}
/**
 * A method that will handle the ASPxClientFileManager.FileUploading event.
 * @param source The event source. Identifies the ASPxFileManager control that raised the event.
 * @param e A ASPxClientFileManagerFileUploadingEventArgs object that contains event data.
 */
interface ASPxClientFileManagerFileUploadingEventHandler<Sender> { (source: Sender, e: ASPxClientFileManagerFileUploadingEventArgs): void; }
/**
 * Provides data for the ASPxClientFileManager.FileUploading event.
 */
declare class ASPxClientFileManagerFileUploadingEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientFileManagerFileUploadingEventArgs object with the specified parameters.
     * @param folder A string value specifying the path to which the file is being uploaded.
     * @param fileName A string value that specifies the file name.
     */
    constructor(folder: string, fileName: string);
    /**
     * Gets the path to the folder where a file is being uploaded.
     */
    folder: string;
    /**
     * Gets the name of a file selected for upload.
     */
    fileName: string;
    /**
     * Gets or sets a value indicating whether the action which raised the event should be canceled.
     */
    cancel: boolean;
}
/**
 * A method that will handle the ASPxClientFileManager.FilesUploading event.
 * @param source The event source. Identifies the ASPxFileManager control that raised the event.
 * @param e A ASPxClientFileManagerFilesUploadingEventArgs object that contains event data.
 */
interface ASPxClientFileManagerFilesUploadingEventHandler<Sender> { (source: Sender, e: ASPxClientFileManagerFilesUploadingEventArgs): void; }
/**
 * Provides data for the ASPxClientFileManager.FilesUploading event.
 */
declare class ASPxClientFileManagerFilesUploadingEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientFileManagerFilesUploadingEventArgs object with the specified parameters.
     * @param folder A string value specifying the folder path.
     * @param fileNames An array of string values that are the file names.
     */
    constructor(folder: string, fileNames: string[]);
    /**
     * Gets the path to the folder where files are being uploaded.
     */
    folder: string;
    /**
     * Gets the names of files selected for upload.
     */
    fileNames: string[];
    /**
     * Gets or sets a value indicating whether the action which raised the event should be canceled.
     */
    cancel: boolean;
}
/**
 * A method that will handle the ASPxClientFileManager.FileUploaded event.
 * @param source The event source. Identifies the ASPxFileManager control that raised the event.
 * @param e A ASPxClientFileManagerFileUploadedEventArgs object that contains event data.
 */
interface ASPxClientFileManagerFileUploadedEventHandler<Sender> { (source: Sender, e: ASPxClientFileManagerFileUploadedEventArgs): void; }
/**
 * Provides data for the ASPxClientFileManager.FileUploaded event.
 */
declare class ASPxClientFileManagerFileUploadedEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientFileManagerFileUploadedEventArgs object with the specified parameters.
     * @param folder A string value specifying the uploaded file path.
     * @param fileName A  string value that specifies the file name.
     */
    constructor(folder: string, fileName: string);
    /**
     * Gets the path to the folder where a file is uploaded.
     */
    folder: string;
    /**
     * Gets the name of the uploaded file.
     */
    fileName: string;
}
/**
 * A method that will handle the ASPxClientFileManager.FilesUploaded event.
 * @param source The event source. Identifies the ASPxFileManager control that raised the event.
 * @param e A ASPxClientFileManagerFilesUploadedEventArgs object that contains event data.
 */
interface ASPxClientFileManagerFilesUploadedEventHandler<Sender> { (source: Sender, e: ASPxClientFileManagerFilesUploadedEventArgs): void; }
/**
 * Provides data for the ASPxClientFileManager.FilesUploaded event.
 */
declare class ASPxClientFileManagerFilesUploadedEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientFileManagerFilesUploadedEventArgs object with the specified parameters.
     * @param folder A string value specifying the uploaded file path.
     * @param fileNames An array of string values that are the file names.
     */
    constructor(folder: string, fileNames: string[]);
    /**
     * Gets the path to the folder where files are uploaded.
     */
    folder: string;
    /**
     * Gets an array of uploaded file names.
     */
    fileNames: string[];
}
/**
 * A method that will handle the ASPxClientFileManager.FileDownloading event.
 * @param source The event source. Identifies the ASPxFileManager control that raised the event.
 * @param e A ASPxClientFileManagerFileDownloadingEventArgs object that contains event data.
 */
interface ASPxClientFileManagerFileDownloadingEventHandler<Sender> { (source: Sender, e: ASPxClientFileManagerFileDownloadingEventArgs): void; }
/**
 * Provides data for the ASPxClientFileManager.FileDownloading event.
 */
declare class ASPxClientFileManagerFileDownloadingEventArgs extends ASPxClientFileManagerFileEventArgs {
    /**
     * Initializes a new instance of the ASPxClientFileManagerFileDownloadingEventArgs object.
     * @param file An ASPxClientFileManagerFile object that is the file currently being processed.
     */
    constructor(file: ASPxClientFileManagerFile);
    /**
     * Gets or sets a value indicating whether the action which raised the event, should be canceled.
     */
    cancel: boolean;
}
/**
 * A method that will handle the ASPxClientFileManager.FocusedItemChanged event.
 * @param source The event source. Identifies the ASPxFileManager control that raised the event.
 * @param e A ASPxClientFileManagerFocusedItemChangedEventArgs object that contains event data.
 */
interface ASPxClientFileManagerFocusedItemChangedEventHandler<Sender> { (source: Sender, e: ASPxClientFileManagerFocusedItemChangedEventArgs): void; }
/**
 * Provides data for the ASPxClientFileManager.FocusedItemChanged event.
 */
declare class ASPxClientFileManagerFocusedItemChangedEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientFileManagerFocusedItemChangedEventArgs class.
     * @param item A ASPxClientFileManagerItem object that is an item, manipulations on which forced the event to be raised.
     * @param name A string value that specifies the item's name.
     * @param fullName A string value that is the item's full name.
     */
    constructor(item: ASPxClientFileManagerItem, name: string, fullName: string);
    /**
     * Gets the file manager item object related to the event.
     */
    item: ASPxClientFileManagerItem;
    /**
     * Gets the name of the focused item.
     */
    name: string;
    /**
     * Gets the full name of the item currently being processed.
     */
    fullName: string;
}
/**
 * A method that will handle the ASPxClientFileManager.CurrentFolderChanged event.
 * @param source The event source. Identifies the ASPxFileManager control that raised the event.
 * @param e A ASPxClientFileManagerCurrentFolderChangedEventArgs object that contains event data.
 */
interface ASPxClientFileManagerCurrentFolderChangedEventHandler<Sender> { (source: Sender, e: ASPxClientFileManagerCurrentFolderChangedEventArgs): void; }
/**
 * Provides data for the ASPxClientFileManager.CurrentFolderChanged event.
 */
declare class ASPxClientFileManagerCurrentFolderChangedEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientFileManagerCurrentFolderChangedEventArgs class with the specified settings.
     * @param name A string value that specifies the folder's name. Initializes the ASPxClientFileManagerCurrentFolderChangedEventArgs.name property.
     * @param fullName A string value that specifies the folder's full name. Initializes the ASPxClientFileManagerCurrentFolderChangedEventArgs.fullName property.
     */
    constructor(name: string, fullName: string);
    /**
     * Gets the name of the currently processed folder.
     */
    name: string;
    /**
     * Gets the full name of the folder currently being processed.
     */
    fullName: string;
}
/**
 * A method that will handle the ASPxClientFileManager.SelectionChanged event.
 * @param source The event source. Identifies the ASPxFileManager control that raised the event.
 * @param e A ASPxClientFileManagerSelectionChangedEventArgs object that contains event data.
 */
interface ASPxClientFileManagerSelectionChangedEventHandler<Sender> { (source: Sender, e: ASPxClientFileManagerSelectionChangedEventArgs): void; }
/**
 * Provides data for the ASPxClientFileManager.SelectionChanged event.
 */
declare class ASPxClientFileManagerSelectionChangedEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientFileManagerSelectionChangedEventArgs class.
     * @param item A ASPxClientFileManagerItem object that is an item, manipulations on which forced the event to be raised.
     * @param name A string value that specifies the file's name.
     * @param fullName A string value that is the file's full name.
     * @param isSelected true if the file has been selected; otherwise, false.
     */
    constructor(item: ASPxClientFileManagerItem, name: string, fullName: string, isSelected: boolean);
    /**
     * Gets the file manager item object related to the event.
     */
    item: ASPxClientFileManagerItem;
    /**
     * Gets the name of the currently processed file.
     */
    name: string;
    /**
     * Gets the full name of the file currently being processed.
     */
    fullName: string;
    /**
     * Gets whether the item has been selected.
     */
    isSelected: boolean;
}
/**
 * A method that will handle the ASPxClientFileManager.CustomCommand event.
 * @param source The event source.
 * @param e An ASPxClientFileManagerCustomCommandEventArgs object that contains event data.
 */
interface ASPxClientFileManagerCustomCommandEventHandler<Sender> { (source: Sender, e: ASPxClientFileManagerCustomCommandEventArgs): void; }
/**
 * Provides data for the ASPxClientFileManager.CustomCommand event.
 */
declare class ASPxClientFileManagerCustomCommandEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientFileManagerCustomCommandEventArgs class with the specified setting.
     * @param commandName A string value that identifies the executed command. Initializes the ASPxClientFileManagerCustomCommandEventArgs.commandName property.
     */
    constructor(commandName: string);
    /**
     * Gets the name of the processed command.
     */
    commandName: string;
}
/**
 * A method that will handle the ASPxClientFileManager.ToolbarUpdating event.
 * @param source The event source.
 * @param e An ASPxClientFileManagerToolbarUpdatingEventArgs object that contains event data.
 */
interface ASPxClientFileManagerToolbarUpdatingEventHandler<Sender> { (source: Sender, e: ASPxClientFileManagerToolbarUpdatingEventArgs): void; }
/**
 * Provides data for the ASPxClientFileManager.ToolbarUpdating event.
 */
declare class ASPxClientFileManagerToolbarUpdatingEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientFileManagerToolbarUpdatingEventArgs class with the specified setting.
     * @param activeAreaName The active file manager area. Initializes the ASPxClientFileManagerToolbarUpdatingEventArgs.activeAreaName property.
     */
    constructor(activeAreaName: string);
    /**
     * Gets the name of the currently active file manager area.
     */
    activeAreaName: string;
}
/**
 * A method that will handle the ASPxClientFileManager.HighlightItemTemplate event.
 * @param source The event source. This parameter identifies the file manager object that raised the event.
 * @param e An ASPxClientFileManagerHighlightItemTemplateEventArgs object that contains event data.
 */
interface ASPxClientFileManagerHighlightItemTemplateEventHandler<Sender> { (source: Sender, e: ASPxClientFileManagerHighlightItemTemplateEventArgs): void; }
/**
 * Provides data for the ASPxClientFileManager.HighlightItemTemplate event.
 */
declare class ASPxClientFileManagerHighlightItemTemplateEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientFileManagerHighlightItemTemplateEventArgs class.
     * @param filterValue A string that is a filter value specified by the filter box.
     * @param itemName A string that is the name of an item currently being processed.
     * @param templateElement An object that is an element containing the template.
     * @param highlightCssClassName A string that is the name of the cascading style sheet (CSS) class associated with an item in highlighted state.
     */
    constructor(filterValue: string, itemName: string, templateElement: any, highlightCssClassName: string);
    /**
     * Gets a string that is a filter value specified by the filter box.
     */
    filterValue: string;
    /**
     * Gets the name of the item currently being processed.
     */
    itemName: string;
    /**
     * Gets an element containing the item template.
     */
    templateElement: string;
    /**
     * Get the name of the cascading style sheet (CSS) class associated with an item in the highlighted state.
     */
    highlightCssClassName: string;
}
/**
 * Declares client constants that contain the names of ASPxFileManager's commands.
 */
declare class ASPxClientFileManagerCommandConsts {
    /**
     * The name of a command that is executed when an end-user renames an item.
     */
    static readonly Rename: string;
    /**
     * The name of a command that is executed when an end-user moves an item.
     */
    static readonly Move: string;
    /**
     * The name of a command that is executed when an end-user deletes an item.
     */
    static readonly Delete: string;
    /**
     * The name of a command that is executed when an end-user creates a folder.
     */
    static readonly Create: string;
    /**
     * The name of a command that is executed when an end-user uploads a file.
     */
    static readonly Upload: string;
    /**
     * The name of a command that is executed when an end-user downloads an item.
     */
    static readonly Download: string;
    /**
     * The name of a command that is executed when an end-user copies an item.
     */
    static readonly Copy: string;
    /**
     * The name of a command that is executed when an end-user opens an item.
     */
    static readonly Open: string;
}
/**
 * Declares client constants containing codes of errors, that can occur while editing files.
 */
declare class ASPxClientFileManagerErrorConsts {
    /**
     * The specified file is not found. Return Value: 0
     */
    static readonly FileNotFound: number;
    /**
     * The specified folder is not found. Return Value: 1
     */
    static readonly FolderNotFound: number;
    /**
     * Access is denied. Return Value: 2
     */
    static readonly AccessDenied: number;
    /**
     * Unspecified IO error occurs. Return Value: 3
     */
    static readonly UnspecifiedIO: number;
    /**
     * Unspecified error occurs. Return Value: 4
     */
    static readonly Unspecified: number;
    /**
     * The file/folder name is empty. Return Value: 5
     */
    static readonly EmptyName: number;
    /**
     * The operation was canceled. Return Value: 6
     */
    static readonly CanceledOperation: number;
    /**
     * The specified name contains invalid characters. Return Value: 7
     */
    static readonly InvalidSymbols: number;
    /**
     * The specified file extension is not allowed. Return Value: 8
     */
    static readonly WrongExtension: number;
    /**
     * The file/folder is being used by another process. Return Value: 9
     */
    static readonly UsedByAnotherProcess: number;
    /**
     * The specified file/folder already exists. Return Value: 10
     */
    static readonly AlreadyExists: number;
}
/**
 * Declares client constants that contain the names of the ASPxFileManager's default commands executed through callbacks.
 */
declare class ASPxClientFileManagerCallbackCommand {
    /**
     * Default value: "GETALLITEMS"
     */
    static readonly GetAllItems: string;
    /**
     * Default value: "GETFILELIST"
     */
    static readonly GetFileList: string;
    /**
     * Default value: "REFRESH"
     */
    static readonly Refresh: string;
    /**
     * Default value: "DELETEITEMS"
     */
    static readonly DeleteItems: string;
    /**
     * Default value: "MOVEITEMS"
     */
    static readonly MoveItems: string;
    /**
     * Default value: "COPYITEMS"
     */
    static readonly CopyItems: string;
    /**
     * Default value: "RENAMEITEM"
     */
    static readonly RenameItem: string;
    /**
     * Default value: "DOWNLOAD"
     */
    static readonly Download: string;
    /**
     * Default value: "SHOWFOLDERBROWSERDIALOG"
     */
    static readonly ShowFolderBrowserDialog: string;
    /**
     * Default value: "SHOWCREATEFOLDEREDITORINTREEVIEW"
     */
    static readonly ShowCreateFolderEditorInTreeView: string;
    /**
     * Default value: "CREATEFOLDER"
     */
    static readonly CreateFolder: string;
    /**
     * Default value: "SELECTEDFILEOPENED"
     */
    static readonly SelectedFileOpened: string;
    /**
     * Default value: "FOLDERSTREEVIEW"
     */
    static readonly FoldersTreeView: string;
    /**
     * Default value: "FOLDERBROWSERINTREEVIEW"
     */
    static readonly FolderBrowserTreeView: string;
    /**
     * Default value: "GRIDVIEW"
     */
    static readonly GridView: string;
    /**
     * Default value: "CHANGEFOLDER"
     */
    static readonly ChangeFolder: string;
    /**
     * Default value: "CHANGEFOLDERINTREEVIEW"
     */
    static readonly ChangeFolderInTreeView: string;
    /**
     * Default value: "CUSTOMCALLBACK"
     */
    static readonly CustomCallback: string;
    /**
     * Default value: "VIRTUALSCROLLING"
     */
    static readonly VirtualScrolling: string;
    /**
     * Default value: "GRIDVIEWVIRTUALSCROLLING"
     */
    static readonly GridViewVirtualScrolling: string;
}
/**
 * A client-side equivalent of the file manager's FileManagerToolbarItemBase object.
 */
declare class ASPxClientFileManagerToolbarItem extends ASPxClientMenuItem {
    /**
     * This property is not in effect for the ASPxClientFileManagerToolbarItem class.
     */
    menu: ASPxClientMenuBase;
    /**
     * This property is not in effect for the ASPxClientFileManagerToolbarItem class.
     */
    parent: ASPxClientMenuItem;
    /**
     * This property is not in effect for the ASPxClientFileManagerToolbarItem class.
     */
    index: number;
}
/**
 * Lists values specifying the floating action button's vertical position.
 */
declare class ASPxClientFloatingActionButtonVerticalPosition {
    /**
     * The floating action button is displayed at the bottom of the container.
     */
    static readonly Bottom: string;
    /**
     * The floating action button is displayed at the top of the container.
     */
    static readonly Top: string;
    /**
     * The floating action button is displayed at the top edge of the container.
     */
    static readonly TopEdge: string;
}
/**
 * Lists values specifying the floating action button's horizontal position.
 */
declare class ASPxClientFloatingActionButtonHorizontalPosition {
    /**
     * The floating action button is displayed at the left edge of the container.
     */
    static readonly LeftEdge: string;
    /**
     * The floating action button is displayed at the left of the container.
     */
    static readonly Left: string;
    /**
     * The floating action button is displayed in the center of the container.
     */
    static readonly Center: string;
    /**
     * The floating action button is displayed at the right of the container.
     */
    static readonly Right: string;
}
/**
 * Lists values that specify the visibility mode of the action button's text.
 */
declare class ASPxClientFloatingActionButtonTextVisibilityMode {
    /**
     * The element is always visible.
     */
    static readonly Always: string;
    /**
     * The element is displayed when the end user hovers the floating action button.
     */
    static readonly OnHover: string;
    /**
     * The element is always hidden.
     */
    static readonly Hidden: string;
}
/**
 * Lists values specifying whether the user action or APIs has collapsed the action group.
 */
declare class ASPxClientFloatingActionButtonCollapseReason {
    /**
     * The action group is collapsed using APIs.
     */
    API: string;
    /**
     * The action group is collapsed using the collapse button.
     */
    CollapseButton: string;
    /**
     * The action group is collapsed by clicking on the action item.
     */
    ActionItem: string;
}
/**
 * Serves as a base class for classes that serves as a client-side equivalent of the floating action button's action and action item objects.
 */
declare class ASPxClientFABActionItemBase {
    /**
     * Gets the action item's text.
     */
    GetText(): string;
    /**
     * Specifies the action item's text.
     * @param value A string value that specifies the action item's text.
     */
    SetText(value: string): void;
    /**
     * Gets the action item's name.
     */
    GetActionName(): string;
    /**
     * Returns a value specifying whether an action item is displayed.
     */
    GetVisible(): boolean;
    /**
     * Specifies the action item's visibility.
     * @param value true, if the action item is visible; otherwise, false.
     */
    SetVisible(value: boolean): void;
}
/**
 * A client-side equivalent of the floating action button's action item object.
 */
declare class ASPxClientFABActionItem extends ASPxClientFABActionItemBase {
}
/**
 * A client-side equivalent of the floating action button's action object.
 */
declare class ASPxClientFABAction extends ASPxClientFABActionItemBase {
    /**
     * Gets the FAB action's context name.
     */
    GetContextName(): string;
    /**
     * Returns the number of items in the action/action group.
     */
    GetActionItemCount(): number;
    /**
     * Gets the FAB action item. Specifies the FAB action item.
     * @param index Specifies the item's index in the collection.
     */
    GetActionItem(index: number): ASPxClientFABActionItem;
    /**
     * Returns an action item with the specified name. An ASPxClientFABActionItem that is the action item with the specified name.
     * @param name A string value specifying the action item name.
     */
    GetActionItemByName(name: string): ASPxClientFABActionItem;
}
/**
 * A client-side equivalent of the ASPxFloatingActionButton object.
 */
declare class ASPxClientFloatingActionButton extends ASPxClientControl {
    /**
     * Occurs when an end user clicks the action item.
     */
    ActionItemClick: ASPxClientEvent<ASPxClientFloatingActionButtonActionItemClickEventHandler<ASPxClientFloatingActionButton>>;
    /**
     * Occurs on the client side when the context is changed.
     */
    ContextChanging: ASPxClientEvent<ASPxClientFloatingActionButtonContextChangingEventHandler<ASPxClientFloatingActionButton>>;
    /**
     * Occurs on the client side when an end user expands an action group.
     */
    ActionExpanding: ASPxClientEvent<ASPxClientFloatingActionButtonActionExpandingEventHandler<ASPxClientFloatingActionButton>>;
    /**
     * Occurs when the end user collapses the action group.
     */
    ActionCollapsing: ASPxClientEvent<ASPxClientFloatingActionButtonActionCollapsingEventHandler<ASPxClientFloatingActionButton>>;
    /**
     * Specifies the floating action button's vertical position.
     * @param verticalPosition An integer value that specifies the vertical position.
     */
    SetVerticalPosition(verticalPosition: ASPxClientFloatingActionButtonVerticalPosition): void;
    /**
     * Specifies the floating action button's horizontal position.
     * @param horizontalPosition An integer value that specifies the horizontal position.
     */
    SetHorizontalPosition(horizontalPosition: ASPxClientFloatingActionButtonHorizontalPosition): void;
    /**
     * Specifies the floating action button's vertical margin.
     * @param value An integer value that specifies the margin.
     */
    SetVerticalMargin(value: number): void;
    /**
     * Specifies the floating action button's horizontal margin.
     * @param value An integer value that specifies the margin.
     */
    SetHorizontalMargin(value: number): void;
    /**
     * Specifies the floating action button's text visibility mode.
     * @param mode One of the  enumeration values.
     */
    SetTextVisibilityMode(mode: ASPxClientFloatingActionButtonTextVisibilityMode): void;
    /**
     * Specifies the ID of the HTML element or web control on the page.
     * @param id A string value that specifies the container element ID.
     */
    SetContainerElementID(id: string): void;
    /**
     * Specifies the floating action button's container element.
     * @param element An object that specifies the HTML element or a web control on the page that is the container element for the floating action button.
     */
    SetContainerElement(element: any): void;
    /**
     * Specifies the action by the context name.
     * @param contextName A string value that specifies the context name.
     * @param expand true, to expand the action group; otherwise, false.
     */
    SetActionContext(contextName: string, expand?: boolean): void;
    /**
     * Expands an action group's items.
     */
    ExpandActionGroupItems(): void;
    /**
     * Collapses an action group's items.
     */
    CollapseActionGroupItems(): void;
    /**
     * Gets the action or action group by its context name. An action (action group).
     * @param contextName An action's (action group's) context name.
     */
    GetAction(contextName: string): ASPxClientFABAction;
    /**
     * Gets the action or action group's context name.
     */
    GetActionContext(): string;
}
/**
 * A method that will handle the ASPxClientFloatingActionButton.ActionItemClick event.
 * @param source The event source.
 * @param e A ASPxClientFloatingActionButtonActionItemClickEventArgs object that contains event data.
 */
interface ASPxClientFloatingActionButtonActionItemClickEventHandler<Sender> { (source: Sender, e: ASPxClientFloatingActionButtonActionItemClickEventArgs): void; }
/**
 * Provides data for the ASPxClientFloatingActionButton.ActionItemClick event.
 */
declare class ASPxClientFloatingActionButtonActionItemClickEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientFloatingActionButtonActionItemClickEventArgs class.
     * @param actionName A string value that specifies the action item's name.
     */
    constructor(actionName: string);
    /**
     * Gets the name of the processed action.
     */
    actionName: string;
}
/**
 * A method that will handle the ActionCollapsing event.
 * @param source The event source.
 * @param e An object that contains event data.
 */
interface ASPxClientFloatingActionButtonActionCollapsingEventHandler<Sender> { (source: Sender, e: ASPxClientFloatingActionButtonActionCollapsingEventArgs): void; }
/**
 * Provides data for the ActionCollapsing event.
 */
declare class ASPxClientFloatingActionButtonActionCollapsingEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new object of the ASPxClientFloatingActionButtonActionCollapsingEventArgs type with the specified settings.
     * @param contextName Specifies the FAB action's context name.
     * @param collapseReason Specifies
     */
    constructor(contextName: string, collapseReason: ASPxClientFloatingActionButtonCollapseReason);
    /**
     * Specifies the FAB action's context name.
     */
    contextName: string;
    /**
     * Specifies whether the user action or APIs has collapsed the action group.
     */
    collapseReason: ASPxClientFloatingActionButtonCollapseReason;
}
/**
 * A method that will handle the ActionExpanding event.
 * @param source The event source.
 * @param e An object that contains event data.
 */
interface ASPxClientFloatingActionButtonActionExpandingEventHandler<Sender> { (source: Sender, e: ASPxClientFloatingActionButtonActionExpandingEventArgs): void; }
/**
 * Provides data for the ActionExpanding event.
 */
declare class ASPxClientFloatingActionButtonActionExpandingEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new object of the ASPxClientFloatingActionButtonActionExpandingEventArgs type with the specified settings.
     * @param contextName Specifies the FAB action's context name.
     */
    constructor(contextName: string);
    /**
     * Specifies the FAB action's context name.
     */
    contextName: string;
}
/**
 * A method that will handle the ASPxClientFloatingActionButton.ContextChanging event.
 * @param source The event source.
 * @param e A ASPxClientFloatingActionButtonContextChangingEventArgs object that contains event data.
 */
interface ASPxClientFloatingActionButtonContextChangingEventHandler<Sender> { (source: Sender, e: ASPxClientFloatingActionButtonContextChangingEventArgs): void; }
/**
 * Provides data for the ASPxClientFloatingActionButton.ContextChanging event.
 */
declare class ASPxClientFloatingActionButtonContextChangingEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientFloatingActionButtonContextChangingEventArgs class.
     * @param action An ASPxClientFABAction object that is the floating action button's action.
     */
    constructor(action: ASPxClientFABAction);
    /**
     * Returns the action related to the event.
     */
    action: ASPxClientFABAction;
}
/**
 * A client-side equivalent of the ASPxFormLayout's LayoutItem object.
 */
declare class ASPxClientLayoutItem {
    /**
     * Gets the form layout object to which the current item belongs.
     */
    formLayout: ASPxClientFormLayout;
    /**
     * Gets the name that uniquely identifies the layout item.
     */
    name: string;
    /**
     * Gets the immediate parent layout item to which the current layout item belongs.
     */
    parent: ASPxClientLayoutItem;
    /**
     * Returns the current layout item's subitem specified by its name. An ASPxClientLayoutItem object that represents the current layout item's subitem with the specified name.
     * @param name A string value specifying the name of the layout item.
     */
    GetItemByName(name: string): ASPxClientLayoutItem;
    /**
     * Returns a value specifying whether a layout item is displayed.
     */
    GetVisible(): boolean;
    /**
     * Specifies the layout item's visibility.
     * @param value true, if the layout item is visible; otherwise, false.
     */
    SetVisible(value: boolean): void;
    /**
     * Specifies the text displayed in the layout item caption.
     * @param caption A string value specifying the item caption.
     */
    SetCaption(caption: string): void;
    /**
     * Returns the text displayed in the layout item caption.
     */
    GetCaption(): string;
}
/**
 * Represents a client-side equivalent of the ASPxFormLayout object.
 */
declare class ASPxClientFormLayout extends ASPxClientControl {
    /**
     * Returns an item specified by its name. An ASPxClientLayoutItem object that represents the item with the specified name.
     * @param name A string value specifying the name of the item.
     */
    GetItemByName(name: string): ASPxClientLayoutItem;
    /**
     * Allows you not to render the control to perform required operations on the client side until you call the EndUpdate method.
     */
    BeginUpdate(): void;
    /**
     * Allows the control to be re-rendered after you call the BeginUpdate method and perform the required operations on the client side. This method also forces an immediate control's re-rendering.
     */
    EndUpdate(): void;
    /**
     * Converts the specified object to the ASPxClientFormLayout type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientFormLayout;
}
/**
 * Represents a client-side equivalent of the ASPxGlobalEvents component.
 */
declare class ASPxClientGlobalEvents {
    /**
     * Occurs on the client side after client object models of all DevExpress web controls contained within the page have been initialized.
     */
    ControlsInitialized: ASPxClientEvent<ASPxClientControlsInitializedEventHandler<ASPxClientGlobalEvents>>;
    /**
     * Occurs when the browser window is being resized.
     */
    BrowserWindowResized: ASPxClientEvent<ASPxClientEventHandler<ASPxClientGlobalEvents>>;
    /**
     * Occurs when a callback for server-side processing is initiated by any DevExpress control.
     */
    BeginCallback: ASPxClientEvent<ASPxClientGlobalBeginCallbackEventHandler<ASPxClientGlobalEvents>>;
    /**
     * Occurs on the client side, after server-side processing of a callback initiated by any DevExpress web control, has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientGlobalEndCallbackEventHandler<ASPxClientGlobalEvents>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by any of DevExpress web controls.
     */
    CallbackError: ASPxClientEvent<ASPxClientGlobalCallbackErrorEventHandler<ASPxClientGlobalEvents>>;
    /**
     * Occurs on the client side after the validation initiated for a DevExpress web control (or a group of DevExpress web controls) has been completed.
     */
    ValidationCompleted: ASPxClientEvent<ASPxClientValidationCompletedEventHandler<ASPxClientGlobalEvents>>;
}
/**
 * Represents the client ASPxCardView.
 */
declare class ASPxClientCardView extends ASPxClientGridBase {
    /**
     * Provides access to the batch editing client API.
     */
    batchEditApi: ASPxClientCardViewBatchEditApi;
    /**
     * Occurs when a custom command button has been clicked.
     */
    CustomButtonClick: ASPxClientEvent<ASPxClientCardViewCustomButtonEventHandler<ASPxClientCardView>>;
    /**
     * Fires after the selection has been changed.
     */
    SelectionChanged: ASPxClientEvent<ASPxClientCardViewSelectionEventHandler<ASPxClientCardView>>;
    /**
     * Enables you to prevent columns from being sorted.
     */
    ColumnSorting: ASPxClientEvent<ASPxClientCardViewColumnCancelEventHandler<ASPxClientCardView>>;
    /**
     * Enables you to handle each column grouping.
     */
    ColumnGrouping: ASPxClientEvent<ASPxClientCardViewColumnCancelEventHandler<ASPxClientCardView>>;
    /**
     * Fires before a group row is expanded.
     */
    GroupRowExpanding: ASPxClientEvent<ASPxClientCardViewGroupCancelEventHandler<ASPxClientCardView>>;
    /**
     * Fires before a group row is collapsed.
     */
    GroupRowCollapsing: ASPxClientEvent<ASPxClientCardViewGroupCancelEventHandler<ASPxClientCardView>>;
    /**
     * Occurs when a grid switches to batch edit mode.
     */
    BatchEditStartEditing: ASPxClientEvent<ASPxClientCardViewBatchEditStartEditingEventHandler<ASPxClientCardView>>;
    /**
     * Occurs when a grid leaves batch edit mode.
     */
    BatchEditEndEditing: ASPxClientEvent<ASPxClientCardViewBatchEditEndEditingEventHandler<ASPxClientCardView>>;
    /**
     * Enables you to prevent a batch edit confirmation message from being displayed.
     */
    BatchEditConfirmShowing: ASPxClientEvent<ASPxClientCardViewBatchEditConfirmShowingEventHandler<ASPxClientCardView>>;
    /**
     * Enables you to provide navigation for editors contained in a templated cell in Batch Edit mode.
     */
    BatchEditTemplateCellFocused: ASPxClientEvent<ASPxClientCardViewBatchEditTemplateCellFocusedEventHandler<ASPxClientCardView>>;
    /**
     * Enables you to specify whether card data is valid and provide an error text.
     */
    BatchEditCardValidating: ASPxClientEvent<ASPxClientCardViewBatchEditCardValidatingEventHandler<ASPxClientCardView>>;
    /**
     * Occurs on the client side before data changes are saved in batch edit mode.
     */
    BatchEditChangesSaving: ASPxClientEvent<ASPxClientCardViewBatchEditChangesSavingEventHandler<ASPxClientCardView>>;
    /**
     * Occurs on the client side before data changes are canceled in batch edit mode.
     */
    BatchEditChangesCanceling: ASPxClientEvent<ASPxClientCardViewBatchEditChangesCancelingEventHandler<ASPxClientCardView>>;
    /**
     * Occurs on the client side before a card is inserted in batch edit mode.
     */
    BatchEditCardInserting: ASPxClientEvent<ASPxClientCardViewBatchEditCardInsertingEventHandler<ASPxClientCardView>>;
    /**
     * Occurs on the client side before a card is deleted in batch edit mode.
     */
    BatchEditCardDeleting: ASPxClientEvent<ASPxClientCardViewBatchEditCardDeletingEventHandler<ASPxClientCardView>>;
    /**
     * Occurs on the client side before a card is recovered in batch edit mode.
     */
    BatchEditCardRecovering: ASPxClientEvent<ASPxClientCardViewBatchEditCardRecoveringEventHandler<ASPxClientCardView>>;
    /**
     * Occurs on the client side when the focused cell is about to be changed.
     */
    FocusedCellChanging: ASPxClientEvent<ASPxClientCardViewFocusedCellChangingEventHandler<ASPxClientCardView>>;
    /**
     * Fires on the client when a card is clicked.
     */
    CardClick: ASPxClientEvent<ASPxClientCardViewCardClickEventHandler<ASPxClientCardView>>;
    /**
     * Fires on the client when a card is double clicked.
     */
    CardDblClick: ASPxClientEvent<ASPxClientCardViewCardClickEventHandler<ASPxClientCardView>>;
    /**
     * Fires in response to changing card focus.
     */
    FocusedCardChanged: ASPxClientEvent<ASPxClientCardViewFocusEventHandler<ASPxClientCardView>>;
    /**
     * Fires before a card has been focused.
     */
    CardFocusing: ASPxClientEvent<ASPxClientCardViewCardFocusingEventHandler<ASPxClientCardView>>;
    /**
     * Sorts data by the specified data column's values, and places the column to the specified position among the sorted columns.
     * @param column An ASPxClientCardViewColumn object that represents the data column.
     * @param sortOrder A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
     * @param reset true to clear any previous sorting; otherwise, false.
     */
    SortBy(column: ASPxClientCardViewColumn | number | string, sortOrder?: string, reset?: boolean, sortIndex?: number): void;
    /**
     * Groups cards by the values of the specified column.
     * @param column An ASPxClientCardViewColumn object that represents the card view column.
     * @param groupIndex An integer value that specifies the grouping level. &#0045;1 to cancel grouping by the column's values.
     * @param sortOrder A string value that specifies the column's sort order.
     */
    GroupBy(column: ASPxClientCardViewColumn | number | string, groupIndex?: number, sortOrder?: string): void;
    /**
     * Ungroups cards by the values of the specified column.
     */
    Ungroup(column: ASPxClientCardViewColumn | number | string): void;
    /**
     * Moves the specified column to the specified visual position within the ASPxCardView.
     * @param moveToColumnVisibleIndex An integer value that identifies the target column displayed within the grid.
     * @param moveBefore true to move the column before the target column; otherwise, false.
     */
    MoveColumn(column: ASPxClientCardViewColumn | number | string, moveToColumnVisibleIndex?: number, moveBefore?: boolean): void;
    /**
     * Returns the key value of the specified card. A string representing the specified card's key value. If the index passed via the visibleIndex parameter is wrong, or the ASPxGridBase.KeyFieldName property is not set, null is returned.
     * @param visibleIndex An integer value that specifies the card's visible index.
     */
    GetCardKey(visibleIndex: number): string;
    /**
     * Switches the CardView to edit mode.
     * @param visibleIndex A zero-based integer that identifies a card to be edited.
     */
    StartEditCard(visibleIndex: number): void;
    /**
     * Switches the ASPxCardView to edit mode.
     * @param key An object that uniquely identifies a card to be edited.
     */
    StartEditCardByKey(key: any): void;
    /**
     * Indicates whether or not a new card is being edited.
     */
    IsNewCardEditing(): boolean;
    /**
     * Adds a new card.
     */
    AddNewCard(): void;
    /**
     * Deletes the specified card.
     * @param visibleIndex An integer value that identifies the card.
     */
    DeleteCard(visibleIndex: number): void;
    /**
     * Deletes a card with the specified key value.
     * @param key An object that uniquely identifies the card.
     */
    DeleteCardByKey(key: any): void;
    /**
     * Returns the focused card's index.
     */
    GetFocusedCardIndex(): number;
    /**
     * Moves focus to the specified card.
     * @param visibleIndex An integer value that specifies the focused card's index.
     */
    SetFocusedCardIndex(visibleIndex: number): void;
    /**
     * Selects or deselects the specified cards within the CardView.
     * @param visibleIndices An array of zero-based indices that identify data cards within the grid.
     * @param selected true to select the specified cards; false to deselect the cards.
     */
    SelectCards(visibleIndices?: number[] | number, selected?: boolean): void;
    /**
     * Selects or deselects the specified card displayed within the CardView.
     * @param selected true to select the specified card; false to deselect the card.
     */
    SelectCardsByKey(keys: any[] | any, selected?: boolean): void;
    /**
     * Deselects the specified cards displayed within the ASPxCardView.
     * @param keys An array of objects that uniquely identify the cards.
     */
    UnselectCardsByKey(keys: any[] | any): void;
    /**
     * Deselects the specified cards (if selected) within the ASPxCardView.
     */
    UnselectCards(visibleIndices?: number[] | number): void;
    /**
     * Deselects all grid cards that match the filter criteria currently applied to the CardView.
     */
    UnselectFilteredCards(): void;
    /**
     * Selects or deselects the specified card displayed on the current page.
     * @param visibleIndex A zero-based integer value that specifies the card's visible index.
     * @param selected true to select the specified card; false to deselect the card.
     */
    SelectCardOnPage(visibleIndex: number, selected?: boolean): void;
    /**
     * Deselects the specified cards (if selected) displayed on the current page.
     * @param visibleIndex A zero-based integer value that specifies the card's visible index.
     */
    UnselectCardOnPage(visibleIndex: number): void;
    /**
     * Allows you to select or deselect all cards displayed on the current page based on the parameter passed.
     * @param selected true to select all unselected cards displayed on the current page; false to deselect all selected cards on the page.
     */
    SelectAllCardsOnPage(selected?: boolean): void;
    /**
     * Deselects all selected cards displayed on the current page.
     */
    UnselectAllCardsOnPage(): void;
    /**
     * Returns the number of selected cards.
     */
    GetSelectedCardCount(): number;
    /**
     * Indicates whether or not the specified card is selected within the current page. true if the specified card is selected within the current page; otherwise, false.
     * @param visibleIndex An integer value that identifies the card by its visible index.
     */
    IsCardSelectedOnPage(visibleIndex: number): boolean;
    /**
     * Expands the specified group row.
     * @param visibleIndex An integer value that identifies the group row.
     */
    ExpandGroupRow(visibleIndex: number): void;
    /**
     * Collapses the specified group row.
     * @param visibleIndex An integer value that identifies the group row by its visible index.
     */
    CollapseGroupRow(visibleIndex: number): void;
    /**
     * Expands all group rows.
     */
    ExpandAll(): void;
    /**
     * Collapses all group rows.
     */
    CollapseAll(): void;
    /**
     * Exports grid data to a file in the specified format.
     * @param format An ASPxClientCardViewExportFormat object specifying the export format.
     */
    ExportTo(format: ASPxClientCardViewExportFormat): void;
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientCardView>>;
    /**
     * Occurs on the client after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientCardView>>;
    /**
     * Fires on the client if any unhandled server error occurs during server-side processing of a callback sent by the ASPxClientCardView.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientCardView>>;
    /**
     * Fires after the customization window has been closed.
     */
    CustomizationWindowCloseUp: ASPxClientEvent<ASPxClientEventHandler<ASPxClientCardView>>;
    /**
     * Applies the specified search panel filter criterion to grid data.
     * @param value A string value that specifies the filter criterion.
     */
    ApplySearchPanelFilter(value: string): void;
    /**
     * Applies the specified filter expression to the grid.
     * @param filterExpression A string value that specifies the filter expression.
     */
    ApplyFilter(filterExpression: string): void;
    /**
     * Clears the filter expression applied to a client CardView.
     */
    ClearFilter(): void;
    /**
     * Gets the Popup Edit Form.
     */
    GetPopupEditForm(): ASPxClientPopupControl;
    /**
     * Sets input focus to the grid.
     */
    Focus(): void;
    /**
     * Sends a callback to the server and generates the server-side event, passing the specified argument to it.
     * @param args A string value that represents any information that needs to be sent to the server-side event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(args: string, onSuccess?: (arg: string) => void): void;
    /**
     * Selects the specified page.
     * @param pageIndex An integer value that specifies the active page's index.
     */
    GotoPage(pageIndex: number): void;
    /**
     * Gets the index of the page currently being selected.
     */
    GetPageIndex(): number;
    /**
     * Gets the number of pages to which the grid's data is divided.
     */
    GetPageCount(): number;
    /**
     * Activates the next page.
     */
    NextPage(): void;
    /**
     * Activates the previous page.
     */
    PrevPage(): void;
    /**
     * Returns the index of the first card displayed within the grid's active page.
     */
    GetTopVisibleIndex(): number;
    /**
     * Indicates whether the grid is in edit mode.
     */
    IsEditing(): boolean;
    /**
     * Saves all the changes made and switches the grid to browse mode.
     */
    UpdateEdit(): void;
    /**
     * Cancels all the changes made and switches the CardView to browse mode.
     */
    CancelEdit(): void;
    /**
     * Updates data displayed within the grid.
     */
    Refresh(): void;
    /**
     * Indicates whether the customization window is displayed.
     */
    IsCustomizationWindowVisible(): boolean;
    /**
     * Invokes the customization window and displays it over the specified HTML element.
     * @param showAtElement An object that specifies the HTML element relative to whose position the customization window is invoked.
     */
    ShowCustomizationWindow(showAtElement?: any): void;
    /**
     * Closes the customization window.
     */
    HideCustomizationWindow(): void;
    /**
     * Returns the number of columns within the client grid.
     */
    GetColumnCount(): number;
    /**
     * Returns the card values displayed within all selected cards.
     * @param fieldNames The names of data source fields separated via a semicolon, whose values within the selected cards are returned.
     * @param onCallback An ASPxClientCardViewValuesCallback object that represents the JavaScript function which receives the list of card values as a parameter.
     */
    GetSelectedFieldValues(fieldNames: string, onCallback: ASPxClientCardViewValuesCallback): void;
    /**
     * Returns key values of selected cards displayed within the current page.
     */
    GetSelectedKeysOnPage(): any[];
    /**
     * Sends a callback to the server and generates the server-side ASPxCardView.CustomDataCallback event.
     * @param args A string value that is any information that needs to be sent to the server-side ASPxCardView.CustomDataCallback event.
     * @param onCallback An ASPxClientCardViewValuesCallback object that is the JavaScript function which receives the information on the client side.
     */
    GetValuesOnCustomCallback(args: string, onCallback: ASPxClientCardViewValuesCallback): void;
    /**
     * Returns the values of the specified data source fields within the specified card.
     * @param visibleIndex An integer value that identifies the data card.
     * @param fieldNames The names of data source fields separated via a semicolon, whose values within the specified card are returned.
     * @param onCallback An ASPxClientCardViewValuesCallback object that represents the JavaScript function which receives the list of card values as a parameter.
     */
    GetCardValues(visibleIndex: number, fieldNames: string, onCallback: ASPxClientCardViewValuesCallback): void;
    /**
     * Returns the card values displayed within the current page.
     * @param fieldNames The names of data source fields whose values are returned.
     * @param onCallback An ASPxClientCardViewValuesCallback object that represents the JavaScript function which receives the list of card values as a parameter.
     */
    GetPageCardValues(fieldNames: string, onCallback: ASPxClientCardViewValuesCallback): void;
    /**
     * Returns the number of cards actually displayed within the active page.
     */
    GetVisibleCardsOnPage(): number;
    /**
     * Returns the client column that resides at the specified position within the column collection. An ASPxClientCardViewColumn object that represents the client column.
     * @param columnIndex A zero-based index that identifies the column within the column collection (the column's CollectionItem.Index property value).
     */
    GetColumn(columnIndex: number): ASPxClientCardViewColumn;
    /**
     * Returns the column with the specified unique identifier. An ASPxClientCardViewColumn object that represents the client column.
     * @param columnId A string value that specifies the column's unique identifier (the column's WebColumnBase.Name property value).
     */
    GetColumnById(columnId: string): ASPxClientCardViewColumn;
    /**
     * Returns the client column to which the specified data source field is bound. An ASPxClientCardViewColumn object that represents the client column bound to the specified data source field.
     * @param columnFieldName A string value that specifies the name of the data source field to which the column is bound (the column's CardViewColumn.FieldName property value).
     */
    GetColumnByField(columnFieldName: string): ASPxClientCardViewColumn;
    /**
     * Returns the editor used to edit the specified column's values. An ASPxClientEdit object that is the specified column's editor.
     */
    GetEditor(column: ASPxClientCardViewColumn | number | string): ASPxClientEdit;
    /**
     * Returns the value of the specified edit cell. A string value that represents the value of the edit cell which corresponds to the specified data column.
     */
    GetEditValue(column: ASPxClientCardViewColumn | number | string): string;
    /**
     * Moves focus to the specified edit cell within the edited card.
     */
    FocusEditor(column: ASPxClientCardViewColumn | number | string): void;
    /**
     * Sets the value of the specified edit cell.
     * @param value A string value that specifies the edit cell's new value.
     */
    SetEditValue(column: ASPxClientCardViewColumn | number | string, value: string): void;
    /**
     * Displays the Filter Control.
     */
    ShowFilterControl(): void;
    /**
     * Hides the Filter Control.
     */
    CloseFilterControl(): void;
    /**
     * Enables or disables the current filter.
     * @param isFilterEnabled true to enable the current filter; otherwise, false.
     */
    SetFilterEnabled(isFilterEnabled: boolean): void;
    /**
     * Returns the current vertical scroll position of the grid's content.
     */
    GetVerticalScrollPosition(): number;
    /**
     * Specifies the vertical scroll position for the grid's content.
     * @param position An integer value specifying the vertical scroll position.
     */
    SetVerticalScrollPosition(position: number): void;
    /**
     * Gets information about a focused cell.
     */
    GetFocusedCell(): ASPxClientCardViewCellInfo;
    /**
     * Focuses the specified cell.
     * @param cardVisibleIndex An  value that specifies the visible index of the card.
     * @param columnIndex A zero-based index that identifies the column in the column collection (the column's CollectionItem.Index property value).
     */
    SetFocusedCell(cardVisibleIndex: number, columnIndex: number): void;
    /**
     * Specifies a custom editor for the search panel on the client side.
     * @param editor An ASPxClientEdit object representing a custom editor.
     */
    SetSearchPanelCustomEditor(editor: ASPxClientEdit): void;
    /**
     * Gets the form layout.
     */
    GetEditFormLayout(): ASPxClientFormLayout;
    /**
     * Gets the edit form layout item. The form layout item.
     * @param column The column, its index or field name.
     */
    GetEditFormLayoutItemByColumn(column: ASPxClientCardViewColumn | number | string): ASPxClientLayoutItem;
    /**
     * Gets the edit form layout item or group. The layout item.
     * @param name The layout item name.
     */
    GetEditFormLayoutItemOrGroup(name: string): ASPxClientLayoutItem;
    /**
     * Converts the specified object to the ASPxClientCardView type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientCardView;
}
/**
 * Represents a client column.
 */
declare class ASPxClientCardViewColumn extends ASPxClientGridColumnBase {
    /**
     * Gets the name that uniquely identifies the column.
     */
    name: string;
    /**
     * Gets the column's position within the collection.
     */
    index: number;
    /**
     * Gets the name of the database field assigned to the current column.
     */
    fieldName: string;
    /**
     * Gets whether the column is visible.
     */
    visible: boolean;
}
/**
 * Represents a JavaScript function which receives the list of card values when the client ASPxClientCardView.GetCardValues, ASPxCardView.GetCurrentPageCardValues or ASPxClientCardView.GetSelectedFieldValues method is called.
 * @param result An object that represents the list of card values received from the server.
 */
interface ASPxClientCardViewValuesCallback { (result: any): void; }
/**
 * A method that will handle the cancelable events of a client ASPxCardView column.
 * @param source The event source. This parameter identifies the ASPxClientCardView object that raised the event.
 * @param e An ASPxClientCardViewColumnCancelEventArgs object that contains event data.
 */
interface ASPxClientCardViewColumnCancelEventHandler<Sender> { (source: Sender, e: ASPxClientCardViewColumnCancelEventArgs): void; }
/**
 * Provides data for the cancelable events of a client ASPxCardView column.
 */
declare class ASPxClientCardViewColumnCancelEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new isntance of the ASPxClientCardViewColumnCancelEventArgs class.
     * @param column An ASPxClientCardViewColumn object that represents the processed column.
     */
    constructor(column: ASPxClientCardViewColumn);
    /**
     * Gets the processed client column.
     */
    column: ASPxClientCardViewColumn;
}
/**
 * Represents a method that will handle the ASPxClientCardView.CardFocusing event.
 * @param source The event source.
 * @param e An ASPxClientCardViewCardFocusingEventArgs object which contains event data.
 */
interface ASPxClientCardViewCardFocusingEventHandler<Sender> { (source: Sender, e: ASPxClientCardViewCardFocusingEventArgs): void; }
/**
 * Provides data for the ASPxClientCardView.CardFocusing event.
 */
declare class ASPxClientCardViewCardFocusingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientCardViewCardFocusingEventArgs class.
     * @param visibleIndex A integer value specifying the card visible index.
     * @param htmlEvent An object specifying the HTML event.
     */
    constructor(visibleIndex: number, htmlEvent: any);
    /**
     * Gets the card visible index.
     */
    visibleIndex: number;
    /**
     * Provides access to the parameters associated with the ASPxClientCardView.CardFocusing event.
     */
    htmlEvent: any;
}
/**
 * A method that will handle the ASPxClientCardView.CardClick event.
 * @param source The event source. This parameter identifies the ASPxClientCardView object that raised the event.
 * @param e An ASPxClientCardViewCardClickEventArgs object that contains event data.
 */
interface ASPxClientCardViewCardClickEventHandler<Sender> { (source: Sender, e: ASPxClientCardViewCardClickEventArgs): void; }
/**
 * Provides data for the ASPxClientCardView.CardClick event.
 */
declare class ASPxClientCardViewCardClickEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientCardViewCardClickEventArgs class.
     * @param visibleIndex A zero-based integer index that identifies the clicked row.
     * @param htmlEvent An object that contains parameters associated with the event. This value is assigned to the ASPxClientCardViewCardClickEventArgs.htmlEvent property.
     */
    constructor(visibleIndex: number, htmlEvent: any);
    /**
     * Gets the processed card's visible index.
     */
    visibleIndex: number;
    /**
     * Provides access to the parameters associated with the ASPxClientCardView.CardClick event.
     */
    htmlEvent: any;
}
/**
 * A method that will handle the ASPxClientCardView.GroupRowCollapsing and ASPxClientCardView.GroupRowExpanding events.
 * @param source The event source.
 * @param e A ASPxClientCardViewGroupCancelEventArgs object that contains event data.
 */
interface ASPxClientCardViewGroupCancelEventHandler<Sender> { (source: Sender, e: ASPxClientCardViewGroupCancelEventArgs): void; }
/**
 * Provides data for the ASPxClientCardView.GroupRowExpanding and ASPxClientCardView.GroupRowCollapsing events.
 */
declare class ASPxClientCardViewGroupCancelEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientCardViewGroupCancelEventArgs class.
     * @param visibleIndex An integer value that specifies the group's visible index.
     */
    constructor(visibleIndex: number);
    /**
     * Gets the processed group row's visible index.
     */
    visibleIndex: number;
}
/**
 * A method that will handle the ASPxClientCardView.CustomButtonClick event.
 * @param source The event source.
This parameter identifies the ASPxClientCardView object that raised the event.
 * @param e An ASPxClientCardViewCustomButtonEventArgs object that contains event data.
 */
interface ASPxClientCardViewCustomButtonEventHandler<Sender> { (source: Sender, e: ASPxClientCardViewCustomButtonEventArgs): void; }
/**
 * Provides data for the ASPxClientCardView.CustomButtonClick event.
 */
declare class ASPxClientCardViewCustomButtonEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Initializes a new instance of the ASPxClientCardViewCustomButtonEventArgs class.
     * @param visibleIndex An integer value that identifies the card whose custom button has been clicked. This value is assigned to the ASPxClientCardViewCustomButtonEventArgs.visibleIndex property.
     * @param buttonID An integer value that identifies the clicked custom button. This value is assigned to the ASPxClientCardViewCustomButtonEventArgs.buttonID property.
     */
    constructor(visibleIndex: number, buttonID: string);
    /**
     * Gets the value which identifies the card whose custom button has been clicked.
     */
    visibleIndex: number;
    /**
     * Gets the value which identifies the custom button.
     */
    buttonID: string;
}
/**
 * A method that will handle the ASPxClientCardView.SelectionChanged event.
 * @param source The event source.
 * @param e An ASPxClientCardViewSelectionEventArgs object that contains event data.
 */
interface ASPxClientCardViewSelectionEventHandler<Sender> { (source: Sender, e: ASPxClientCardViewSelectionEventArgs): void; }
/**
 * Provides data for the ASPxClientCardView.SelectionChanged event.
 */
declare class ASPxClientCardViewSelectionEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Initializes a new instance of the ASPxClientCardViewSelectionEventArgs class.
     * @param visibleIndex An integer value that specifies the visible index of the card whose selected state has been changed. This value is assigned to the ASPxClientCardViewSelectionEventArgs.visibleIndex property.
     */
    constructor(visibleIndex: number);
    /**
     * Gets the visible index of the card whose selected state has been changed.
     */
    visibleIndex: number;
    /**
     * Gets whether the card has been selected.
     */
    isSelected: boolean;
    /**
     * Gets whether all cards displayed within a page have been selected or unselected.
     */
    isAllRecordsOnPage: boolean;
    /**
     * Gets whether a selection has been changed on the server.
     */
    isChangedOnServer: boolean;
}
/**
 * Represents a method that will handle the ASPxClientCardView.FocusedCardChanged event.
 * @param source The event source.
 * @param e An ASPxClientCardViewFocusEventArgs object which contains event data.
 */
interface ASPxClientCardViewFocusEventHandler<Sender> { (source: Sender, e: ASPxClientCardViewFocusEventArgs): void; }
/**
 * Provides data for the corresponding event.
 */
declare class ASPxClientCardViewFocusEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Initializes a new instance of the ASPxClientCardViewFocusEventArgs class.
     */
    constructor();
    /**
     * Gets whether card focusing has been changed on the server.
     */
    isChangedOnServer: boolean;
}
/**
 * A method that will handle the ASPxClientCardView.BatchEditStartEditing event.
 * @param source The event source.
 * @param e An ASPxClientCardViewBatchEditStartEditingEventArgs object that contains event data.
 */
interface ASPxClientCardViewBatchEditStartEditingEventHandler<Sender> { (source: Sender, e: ASPxClientCardViewBatchEditStartEditingEventArgs): void; }
/**
 * Provides data for the ASPxClientCardView.BatchEditStartEditing event.
 */
declare class ASPxClientCardViewBatchEditStartEditingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientCardViewBatchEditStartEditingEventArgs class with the specified settings.
     * @param visibleIndex An integer value that specifies the visible index of the card. This value is assigned to the ASPxClientCardViewBatchEditStartEditingEventArgs.visibleIndex property.
     * @param focusedColumn An ASPxClientCardViewColumn object that is the focused CardView column. This value is assigned to the ASPxClientCardViewBatchEditStartEditingEventArgs.focusedColumn property.
     * @param cardValues A hashtable that stores information about editable cells. This value is assigned to the ASPxClientCardViewBatchEditStartEditingEventArgs.cardValues property.
     */
    constructor(visibleIndex: number, focusedColumn: ASPxClientCardViewColumn, cardValues: any);
    /**
     * Gets the visible index of the card whose cells are about to be edited.
     */
    visibleIndex: number;
    /**
     * Gets the CardView column that owns a cell that is about to be edited.
     */
    focusedColumn: ASPxClientCardViewColumn;
    /**
     * Gets a hashtable that maintains information about editable cells.
     */
    cardValues: any;
}
/**
 * A method that will handle the ASPxClientCardView.BatchEditEndEditing event.
 * @param source The event source.
 * @param e An ASPxClientCardViewBatchEditEndEditingEventArgs object that contains event data.
 */
interface ASPxClientCardViewBatchEditEndEditingEventHandler<Sender> { (source: Sender, e: ASPxClientCardViewBatchEditEndEditingEventArgs): void; }
/**
 * Provides data for the ASPxClientCardView.BatchEditEndEditing event.
 */
declare class ASPxClientCardViewBatchEditEndEditingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientCardViewBatchEditEndEditingEventArgs class with the specified settings.
     * @param visibleIndex An integer value that specifies the visible index of the card. This value is assigned to the ASPxClientCardViewBatchEditEndEditingEventArgs.visibleIndex property.
     * @param cardValues A hashtable that stores information about editable cells. This value is assigned to the ASPxClientCardViewBatchEditEndEditingEventArgs.cardValues property.
     */
    constructor(visibleIndex: number, cardValues: any);
    /**
     * Gets the visible index of the card whose cells have been edited.
     */
    visibleIndex: number;
    /**
     * Gets a hashtable that maintains information about editable cells.
     */
    cardValues: any;
}
/**
 * A method that will handle the ASPxClientCardView.BatchEditCardValidating event.
 * @param source The event source.
 * @param e An ASPxClientCardViewBatchEditCardValidatingEventArgs object that contains event data.
 */
interface ASPxClientCardViewBatchEditCardValidatingEventHandler<Sender> { (source: Sender, e: ASPxClientCardViewBatchEditCardValidatingEventArgs): void; }
/**
 * Provides data for the ASPxClientCardView.BatchEditCardValidating event.
 */
declare class ASPxClientCardViewBatchEditCardValidatingEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientCardViewBatchEditCardValidatingEventArgs class.
     * @param visibleIndex An integer value that specifies the processed card's visible index.
     * @param validationInfo An object containing validation information.
     */
    constructor(visibleIndex: number, validationInfo: any);
    /**
     * Gets the processed card's visible index.
     */
    visibleIndex: number;
    /**
     * Provides validation information of a card currently being validated.
     */
    validationInfo: any;
}
/**
 * A method that will handle the ASPxClientCardView.BatchEditConfirmShowing client event.
 * @param source The event source.
 * @param e An ASPxClientCardViewBatchEditConfirmShowingEventArgs object that contains event data.
 */
interface ASPxClientCardViewBatchEditConfirmShowingEventHandler<Sender> { (source: Sender, e: ASPxClientCardViewBatchEditConfirmShowingEventArgs): void; }
/**
 * Provides data for the ASPxClientCardView.BatchEditConfirmShowing event.
 */
declare class ASPxClientCardViewBatchEditConfirmShowingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientCardViewBatchEditConfirmShowingEventArgs class.
     * @param requestTriggerID A string value specifying the client identifier of an object that initiates a request.
     */
    constructor(requestTriggerID: string);
    /**
     * Gets the client identifier of an object that initiates a send request.
     */
    requestTriggerID: string;
}
/**
 * A method that will handle the ASPxClientCardView.BatchEditTemplateCellFocused event.
 * @param source An object representing the event source. Identifies the button editor that raised the event.
 * @param e An ASPxClientCardViewBatchEditTemplateCellFocusedEventArgs object that contains event data.
 */
interface ASPxClientCardViewBatchEditTemplateCellFocusedEventHandler<Sender> { (source: Sender, e: ASPxClientCardViewBatchEditTemplateCellFocusedEventArgs): void; }
/**
 * Provides data for the ASPxClientCardView.BatchEditTemplateCellFocused event.
 */
declare class ASPxClientCardViewBatchEditTemplateCellFocusedEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientCardViewBatchEditTemplateCellFocusedEventArgs class with the specified column.
     * @param column An ASPxClientCardViewColumn object that is the processed CardView column. This value is assigned to the ASPxClientCardViewBatchEditTemplateCellFocusedEventArgs.column property.
     */
    constructor(column: ASPxClientCardViewColumn);
    /**
     * Gets the currently processed column.
     */
    column: ASPxClientCardViewColumn;
    /**
     * Gets or sets a value specifying whether the event was handled.
     */
    handled: boolean;
}
/**
 * A method that will handle the ASPxClientCardView.BatchEditChangesSaving event.
 * @param source The event source. This parameter identifies the card view object which raised the event.
 * @param e An ASPxClientCardViewBatchEditChangesSavingEventArgs object that contains event data.
 */
interface ASPxClientCardViewBatchEditChangesSavingEventHandler<Sender> { (source: Sender, e: ASPxClientCardViewBatchEditChangesSavingEventArgs): void; }
/**
 * Provides data for the ASPxClientCardView.BatchEditChangesSaving event.
 */
declare class ASPxClientCardViewBatchEditChangesSavingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientCardViewBatchEditChangesSavingEventArgs class.
     * @param insertedValues A hashtable that stores information about inserted cells.
     * @param deletedValues A hashtable that stores information about deleted cells.
     * @param updatedValues A hashtable that stores information about updated cells.
     */
    constructor(insertedValues: any, deletedValues: any, updatedValues: any);
    /**
     * Gets a hashtable that maintains information about inserted cells.
     */
    insertedValues: any;
    /**
     * Gets a hashtable that maintains information about deleted cells.
     */
    deletedValues: any;
    /**
     * Gets a hashtable that maintains information about updated cells.
     */
    updatedValues: any;
}
/**
 * A method that will handle the ASPxClientCardView.BatchEditChangesCanceling event.
 * @param source The event source. This parameter identifies the card view object which raised the event.
 * @param e An ASPxClientCardViewBatchEditChangesCancelingEventArgs object that contains event data.
 */
interface ASPxClientCardViewBatchEditChangesCancelingEventHandler<Sender> { (source: Sender, e: ASPxClientCardViewBatchEditChangesCancelingEventArgs): void; }
/**
 * Provides data for the ASPxClientCardView.BatchEditChangesCanceling event.
 */
declare class ASPxClientCardViewBatchEditChangesCancelingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientCardViewBatchEditChangesCancelingEventArgs class.
     * @param insertedValues A hashtable that stores information about inserted cells.
     * @param deletedValues A hashtable that stores information about deleted cells.
     * @param updatedValues A hashtable that stores information about updated cells.
     */
    constructor(insertedValues: any, deletedValues: any, updatedValues: any);
    /**
     * Gets a hashtable that maintains information about inserted cells.
     */
    insertedValues: any;
    /**
     * Gets a hashtable that maintains information about deleted cells.
     */
    deletedValues: any;
    /**
     * Gets a hashtable that maintains information about updated cells.
     */
    updatedValues: any;
}
/**
 * A method that will handle the ASPxClientCardView.BatchEditCardInserting event.
 * @param source The event source. This parameter identifies the card view object which raised the event.
 * @param e An ASPxClientCardViewBatchEditCardInsertingEventArgs object that contains event data.
 */
interface ASPxClientCardViewBatchEditCardInsertingEventHandler<Sender> { (source: Sender, e: ASPxClientCardViewBatchEditCardInsertingEventArgs): void; }
/**
 * Provides data for the ASPxClientCardView.BatchEditCardInserting event.
 */
declare class ASPxClientCardViewBatchEditCardInsertingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientCardViewBatchEditCardInsertingEventArgs class.
     * @param visibleIndex An integer value that specifies the processed card visible index.
     */
    constructor(visibleIndex: number);
    /**
     * Gets the processed card visible index.
     */
    visibleIndex: number;
}
/**
 * A method that will handle the ASPxClientCardView.BatchEditCardDeleting event.
 * @param source The event source. This parameter identifies the card view object which raised the event.
 * @param e An ASPxClientCardViewBatchEditCardDeletingEventArgs object that contains event data.
 */
interface ASPxClientCardViewBatchEditCardDeletingEventHandler<Sender> { (source: Sender, e: ASPxClientCardViewBatchEditCardDeletingEventArgs): void; }
/**
 * Provides data for the ASPxClientCardView.BatchEditCardDeleting event.
 */
declare class ASPxClientCardViewBatchEditCardDeletingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientCardViewBatchEditCardDeletingEventArgs class.
     * @param visibleIndex An integer value that specifies the processed card visible index.
     * @param cardValues A hashtable that stores information about the processed card's cells.
     */
    constructor(visibleIndex: number, cardValues: any);
    /**
     * Gets the processed card visible index.
     */
    visibleIndex: number;
    /**
     * Gets a hashtable that maintains information about deleted cells.
     */
    cardValues: any;
}
/**
 * A method that will handle the ASPxClientCardView.BatchEditCardRecovering event.
 * @param source The event source.
 * @param e An ASPxClientCardViewBatchEditCardRecoveringEventArgs object that contains event data.
 */
interface ASPxClientCardViewBatchEditCardRecoveringEventHandler<Sender> { (source: Sender, e: ASPxClientCardViewBatchEditCardRecoveringEventArgs): void; }
/**
 * Provides data for the ASPxClientCardView.BatchEditCardRecovering event.
 */
declare class ASPxClientCardViewBatchEditCardRecoveringEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientCardViewBatchEditCardRecoveringEventArgs class.
     * @param visibleIndex An integer value specifying a card's visible index.
     * @param cardValues An object representing card values.
     */
    constructor(visibleIndex: number, cardValues: any);
    /**
     * Gets the visible index of the card whose cells has been recovered.
     */
    visibleIndex: number;
    /**
     * Gets a hashtable that maintains information about recovered cells.
     */
    cardValues: any;
}
/**
 * A method that will handle the ASPxClientCardView.FocusedCellChanging event.
 * @param source The event source.
 * @param e An ASPxClientCardViewFocusedCellChangingEventArgs object that contains event data.
 */
interface ASPxClientCardViewFocusedCellChangingEventHandler<Sender> { (source: Sender, e: ASPxClientCardViewFocusedCellChangingEventArgs): void; }
/**
 * Provides data for the ASPxClientCardView.FocusedCellChanging event.
 */
declare class ASPxClientCardViewFocusedCellChangingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientCardViewFocusedCellChangingEventArgs class with specified settings.
     * @param cellInfo A ASPxClientCardViewCellInfo object providing information about the focused cell.
     */
    constructor(cellInfo: ASPxClientCardViewCellInfo);
    /**
     * Provides information of a card's cell currently being focused.
     */
    cellInfo: ASPxClientCardViewCellInfo;
}
/**
 * Provides members related to Batch Edit Mode
 */
declare class ASPxClientCardViewBatchEditApi {
    /**
     * Performs validation of CardView data contained in the cards when the CardView operates in Batch Edit mode. true, if data in the cards data passes validation; otherwise, false.
     * @param validateOnlyModified true, if only modified cards should be validated; otherwise, false.
     */
    ValidateCards(validateOnlyModified?: boolean): boolean;
    /**
     * Performs validation of CardView data contained in the specified card when the CardView operates in Batch Edit mode. true, if data in the specified card data passes validation; otherwise, false.
     * @param visibleIndex An integer value specifying the visible index of the validated card.
     */
    ValidateCard(visibleIndex: number): boolean;
    /**
     * Returns an array of card visible indices. An array of integer values that are the visible indices of cards.
     * @param includeDeleted true, to include visible indices of deleted cards to the returned array; otherwise, false.
     */
    GetCardVisibleIndices(includeDeleted: boolean): number[];
    /**
     * Returns an array of the deleted card visible indices.
     */
    GetDeletedCardIndices(): number[];
    /**
     * Returns an array of the inserted card visible indices.
     */
    GetInsertedCardIndices(): number[];
    /**
     * Returns an array of the updated cards' visible indices.
     */
    GetUpdatedCardIndices(): number[];
    /**
     * Indicates if the card with the specified visible index is deleted. true, if the card is deleted; otherwise, false.
     * @param visibleIndex An integer value that identifies the card by its visible index.
     */
    IsDeletedCard(visibleIndex: number): boolean;
    /**
     * Indicates if the card with the specified visible index is newly created. true, if the row is new; otherwise, false.
     * @param visibleIndex An integer value that identifies the card by its visible index.
     */
    IsNewCard(visibleIndex: number): boolean;
    /**
     * Adds a new card when ASPxCardView is in Batch Edit mode.
     */
    AddNewCard(): void;
    /**
     * Deletes the specified card when ASPxCardView is in Batch Edit mode.
     * @param visibleIndex An integer value that identifies the card index.
     */
    DeleteCard(visibleIndex: number): void;
    /**
     * Deletes a card with a specified key value when ASPxCardView is in Batch Edit mode.
     * @param key An object that uniquely identifies the card.
     */
    DeleteCardByKey(key: any): void;
    /**
     * Recovers the specified card when ASPxCardView is in Batch Edit mode.
     * @param visibleIndex An integer value that identifies the card index.
     */
    RecoverCard(visibleIndex: number): void;
    /**
     * Recovers a card with a specified key value when ASPxCardView is in Batch Edit mode.
     * @param key An object that uniquely identifies the card.
     */
    RecoverCardByKey(key: any): void;
    /**
     * Programmatically moves the focus to the previous cell in the card
     */
    MoveFocusBackward(): boolean;
    /**
     * Programmatically moves the focus to the next cell in the card.
     */
    MoveFocusForward(): boolean;
    /**
     * Sets the value of the specified cell.
     * @param visibleIndex An integer zero-based index that identifies the card containing the processed cell.
     * @param columnFieldNameOrId A string value that specifies the field name or unique identifier (the column's WebColumnBase.Name property value) of a column containing the processed cell.
     * @param value An object that contains the new cell value.
     * @param displayText A string value that specifies the cell display text.
     * @param cancelCellHighlighting true to cancel highlighting of the modified cell, false to highlight the modified cell.
     */
    SetCellValue(visibleIndex: number, columnFieldNameOrId: string, value: any, displayText?: string, cancelCellHighlighting?: boolean): void;
    /**
     * Gets the value of the specified cell. An object containing the specified cell's value.
     * @param visibleIndex A zero-based integer value that specifies the visible index of a card containing the processed cell.
     * @param columnFieldNameOrId A string value that specifies the field name or unique identifier (the column's WebColumnBase.Name property value) of a column containing the processed cell.
     * @param initial true, to return the initial (server) value; false, to return a value currently contained on the client side (modified value).
     */
    GetCellValue(visibleIndex: number, columnFieldNameOrId: string, initial?: boolean): any;
    /**
     * Gets a container holding a data cell content. An object that is the HTML container element that contains the data cell's content.
     * @param visibleIndex An integer value that is the visible index.
     * @param columnFieldNameOrId A string value that is the column's Field Name or ID.
     */
    GetCellTextContainer(visibleIndex: number, columnFieldNameOrId: string): any;
    /**
     * Gets information about the cell currently being edited.
     */
    GetEditCellInfo(): ASPxClientCardViewCellInfo;
    /**
     * Returns an object that stores unsaved changes.
     */
    GetUnsavedChanges(): any;
    /**
     * Returns a value that indicates whether the specified cell's data has been changed. true, if the cell has changed data; otherwise, false.
     * @param visibleIndex An integer value that specifies the visible index of a card.
     * @param columnFieldNameOrId A string value that specifies the column's field name or unique identifier (the column's WebColumnBase.Name property value).
     */
    HasChanges(visibleIndex?: number, columnFieldNameOrId?: string): boolean;
    /**
     * Resets changes in the specified cell.
     * @param visibleIndex An integer value that specifies the visible index of a card containing the processed cell.
     * @param columnIndex A string value that specifies the field name or unique identifier (the column's WebColumnBase.Name property value) of a column containing the processed cell.
     */
    ResetChanges(visibleIndex: number, columnIndex?: number): void;
    /**
     * Switches the specified cell to edit mode.
     * @param visibleIndex A zero-based integer value that specifies the visible index of a card containing the processed cell.
     * @param columnIndex A zero-based integer value that identifies the column which contains the processed cell in the column collection.
     */
    StartEdit(visibleIndex: number, columnIndex: number): void;
    /**
     * Ends cell or card editing.
     */
    EndEdit(): void;
    /**
     * Provides the text displayed within the cell according to the specified display format rule. A string value representing the cell's displayed text.
     * @param columnFieldNameOrId A string value representing the column's unique identifier or field name.
     * @param value An object representing a value.
     */
    GetColumnDisplayText(columnFieldNameOrId: string, value: any): string;
    /**
     * Returns the total summary value. The value.
     * @param summaryItemIndex The total summary's index or field name.
     */
    GetTotalSummaryValue(summaryItemIndex: number | string): number;
    GetGroupSummaryValue(groupRowVisibleIndex: number, summaryItemIndex: number | string): number;
}
/**
 * Contains information on a grid cell.
 */
declare class ASPxClientCardViewCellInfo {
    /**
     * Gets the visible index of the card that contains the cell currently being processed.
     */
    cardVisibleIndex: number;
    /**
     * Gets the data column that contains the cell currently being processed.
     */
    column: ASPxClientCardViewColumn;
}
/**
 * Declares client constants that contain the names of the CardView's default commands executed through callbacks.
 */
declare class ASPxClientCardViewCallbackCommand {
    /**
     * Default value: "GROUPBYSELECTORVALUE"
     */
    static readonly GroupBySelectorValue: string;
}
/**
 * Lists values that specify the document formats available for export from the grid.
 */
declare class ASPxClientCardViewExportFormat extends ASPxClientGridExportFormat {
}
/**
 * Lists values that specify the position relative to the target column in which a moved column should be placed.
 */
declare class ASPxClientGridColumnMovingTargetPosition {
    /**
     * A moved column should be placed to the right of the target column.
     */
    Right: number;
    /**
     * A moved column should be placed to the left of the target column.
     */
    Left: number;
    /**
     * A moved column should be placed at the top of the target column.
     */
    Top: number;
    /**
     * A moved column should be placed at the bottom of the target column.
     */
    Bottom: number;
}
/**
 * Represents the client ASPxGridView.
 */
declare class ASPxClientGridBase extends ASPxClientControl {
    /**
     * Fires when a user changes the summary item value.
     */
    BatchEditSummaryDisplayText: ASPxClientEvent<ASPxClientGridBatchEditSummaryDisplayTextEventHandler<ASPxClientGridBase>>;
    /**
     * Fires after a toolbar item has been clicked.
     */
    ToolbarItemClick: ASPxClientEvent<ASPxClientGridToolbarItemClickEventHandler<ASPxClientGridBase>>;
    /**
     * Returns a toolbar specified by its name. An ASPxClientMenu object that is the toolbar with the specified name.
     * @param name A string value specifying the toolbar name.
     */
    GetToolbarByName(name: string): ASPxClientMenu;
    /**
     * Returns a grid's toolbar specified by its index. An ASPxClientMenu object that is the toolbar located at the specified index within the control's Toolbars collection.
     * @param index An integer value specifying the zero-based index of the toolbar object to retrieve.
     */
    GetToolbar(index: number): ASPxClientMenu;
}
/**
 * Serves as a base object implementing the client column functionality.
 */
declare class ASPxClientGridColumnBase {
}
/**
 * Declares client constants that contain the names of the GridView's default commands executed through callbacks.
 */
declare class ASPxClientGridViewCallbackCommand {
    /**
     * Default value: "NEXTPAGE"
     */
    static readonly NextPage: string;
    /**
     * Default value: "PREVPAGE"
     */
    static readonly PreviousPage: string;
    /**
     * Default value: "GOTOPAGE"
     */
    static readonly GotoPage: string;
    /**
     * Default value: "SELECTROWS"
     */
    static readonly SelectRows: string;
    /**
     * Default value: "SELECTROWSKEY"
     */
    static readonly SelectRowsKey: string;
    /**
     * Default value: "SELECTION"
     */
    static readonly Selection: string;
    /**
     * Default value: "FOCUSEDROW"
     */
    static readonly FocusedRow: string;
    /**
     * Default value: "GROUP"
     */
    static readonly Group: string;
    /**
     * Default value: "UNGROUP"
     */
    static readonly UnGroup: string;
    /**
     * Default value: "SORT"
     */
    static readonly Sort: string;
    /**
     * Default value: "COLUMNMOVE"
     */
    static readonly ColumnMove: string;
    /**
     * Default value: "COLLAPSEALL"
     */
    static readonly CollapseAll: string;
    /**
     * Default value: "EXPANDALL"
     */
    static readonly ExpandAll: string;
    /**
     * Default value: "EXPANDROW"
     */
    static readonly ExpandRow: string;
    /**
     * Default value: "COLLAPSEROW"
     */
    static readonly CollapseRow: string;
    /**
     * Default value: "HIDEALLDETAIL"
     */
    static readonly HideAllDetail: string;
    /**
     * Default value: "SHOWALLDETAIL"
     */
    static readonly ShowAllDetail: string;
    /**
     * Default value: "SHOWDETAILROW"
     */
    static readonly ShowDetailRow: string;
    /**
     * Default value: "HIDEDETAILROW"
     */
    static readonly HideDetailRow: string;
    /**
     * Default value: "PAGERONCLICK"
     */
    static readonly PagerOnClick: string;
    /**
     * Default value: "APPLYFILTER"
     */
    static readonly ApplyFilter: string;
    /**
     * Default value: "APPLYCOLUMNFILTER"
     */
    static readonly ApplyColumnFilter: string;
    /**
     * Default value: "APPLYMULTICOLUMNFILTER"
     */
    static readonly ApplyMultiColumnFilter: string;
    /**
     * Default value: "APPLYHEADERCOLUMNFILTER"
     */
    static readonly ApplyHeaderColumnFilter: string;
    /**
     * Default value: "APPLYSEARCHPANELFILTER"
     */
    static readonly ApplySearchPanelFilter: string;
    /**
     * Default value: "APPLYCUSTOMIZATIONDIALOGCHANGES"
     */
    static readonly ApplyCustomizationDialogChanges: string;
    /**
     * Default value: "FILTERROWMENU"
     */
    static readonly FilterRowMenu: string;
    /**
     * Default value: "STARTEDIT"
     */
    static readonly StartEdit: string;
    /**
     * Default value: "CANCELEDIT"
     */
    static readonly CancelEdit: string;
    /**
     * Default value: "UPDATEEDIT"
     */
    static readonly UpdateEdit: string;
    static readonly UpdateSummaries: string;
    /**
     * Default value: "ADDNEWROW"
     */
    static readonly AddNewRow: string;
    /**
     * Default value: "DELETEROW"
     */
    static readonly DeleteRow: string;
    /**
     * Default value: "CUSTOMBUTTON"
     */
    static readonly CustomButton: string;
    /**
     * Default value: "CUSTOMCALLBACK"
     */
    static readonly CustomCallback: string;
    /**
     * Default value: "SHOWFILTERCONTROL"
     */
    static readonly ShowFilterControl: string;
    /**
     * Default value: "CLOSEFILTERCONTROL"
     */
    static readonly CloseFilterControl: string;
    /**
     * Default value: "SETFILTERENABLED"
     */
    static readonly SetFilterEnabled: string;
    /**
     * Default value: "REFRESH"
     */
    static readonly Refresh: string;
    /**
     * Default value: "SELFIELDVALUES"
     */
    static readonly SelFieldValues: string;
    /**
     * Default value: "ROWVALUES"
     */
    static readonly RowValues: string;
    /**
     * Default value: "PAGEROWVALUES"
     */
    static readonly PageRowValues: string;
    /**
     * Default value: "FILTERPOPUP"
     */
    static readonly FilterPopup: string;
    /**
     * Default value: "CONTEXTMENU"
     */
    static readonly ContextMenu: string;
    /**
     * Default value: "TOOLBAR"
     */
    static readonly Toolbar: string;
    /**
     * Default value: "EXPORT"
     */
    static readonly Export: string;
    /**
     * Default value: "CUSTOMVALUES"
     */
    static readonly CustomValues: string;
}
/**
 * Lists values that specify the document formats available for export from the grid.
 */
declare class ASPxClientGridExportFormat {
    /**
     * Identifies Portable Document Format (.pdf).
     */
    static readonly Pdf: string;
    /**
     * Identifies DOCX format (.docx).
     */
    static readonly Docx: string;
    /**
     * Identifies Rich Text Format (.rtf).
     */
    static readonly Rtf: string;
    /**
     * Identifies Comma Separated Values format (.csv).
     */
    static readonly Csv: string;
    /**
     * Identifies Excel Binary File format (.xls).
     */
    static readonly Xls: string;
    /**
     * Identifies XML spreadsheet file format (.xlsx).
     */
    static readonly Xlsx: string;
}
/**
 * A method that will handle the ASPxClientGridBase.ToolbarItemClick event.
 * @param source The event source.
 * @param e An ASPxClientGridToolbarItemClickEventArgs object that contains event data.
 */
interface ASPxClientGridToolbarItemClickEventHandler<Sender> { (source: Sender, e: ASPxClientGridToolbarItemClickEventArgs): void; }
/**
 * Provides data for the ASPxClientGridBase.ToolbarItemClick event.
 */
declare class ASPxClientGridToolbarItemClickEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Initializes a new instance of the ASPxClientGridToolbarItemClickEventArgs class.
     * @param item An ASPxClientMenu object that should be clicked to fire the event.
     * @param processOnServer true to process the event on the server side; false to completely handle it on the client side.
     */
    constructor(item: ASPxClientMenuItem, processOnServer: boolean);
    /**
     * Gets the toolbar index.
     */
    toolbarIndex: number;
    /**
     * Gets the toolbar name.
     */
    toolbarName: string;
    /**
     * Gets the clicked menu item
     */
    item: ASPxClientMenuItem;
    /**
     * Specifies whether a postback or a callback is used to finally process the event on the server side.
     */
    usePostBack: boolean;
}
interface ASPxClientGridBatchEditSummaryDisplayTextEventHandler<Sender> { (source: Sender, e: ASPxClientGridBatchEditSummaryDisplayTextEventArgs): void; }
/**
 * Provides data for the BatchEditSummaryDisplayText event.
 */
declare class ASPxClientGridBatchEditSummaryDisplayTextEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the class.
     * @param summaryInfo The summary information.
     * @param text The summary text.
     * @param groupRowVisibleIndex The group row's visible index.
     */
    constructor(summaryInfo: any, text: string, groupRowVisibleIndex: number);
    /**
     * Specifies whether the processed summary is a group summary.
     */
    isGroupSummary: boolean;
    /**
     * Specifies whether the processed summary is a total summary.
     */
    isTotalSummary: boolean;
    /**
     * Gets the summary item index.
     */
    summaryItemIndex: number;
    /**
     * Gets the summary type.
     */
    summaryType: ASPxClientSummaryItemType;
    /**
     * Gets the summary item's field name.
     */
    summaryFieldName: string;
    /**
     * Gets the summary item's server value.
     */
    serverValue: number;
    /**
     * Specifies the summary item's value.
     */
    value: number;
    /**
     * Gets the element that contains the summary item.
     */
    summaryElement: any;
    /**
     * Gets or sets the summary item's display text.
     */
    displayText: string;
    /**
     * Specifies the group row's visible index.
     */
    groupRowVisibleIndex: number;
}
/**
 * Lists values that specify the summary item's aggregate function types.
 */
declare class ASPxClientSummaryItemType {
    /**
     * The sum of all values in a column.
     */
    Sum: number;
    /**
     * The minimum value in the column.
     */
    Min: number;
    /**
     * The maximum value in the column.
     */
    Max: number;
    /**
     * The record count.
     */
    Count: number;
    /**
     * The column's average value.
     */
    Average: number;
}
/**
 * The client-side equivalent of the ASPxGridLookup control.
 */
declare class ASPxClientGridLookup extends ASPxClientDropDownEditBase {
    /**
     * Fires on the client when a data row is clicked within the built-in dropdown grid.
     */
    RowClick: ASPxClientEvent<ASPxClientGridViewRowClickEventHandler<ASPxClientGridLookup>>;
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientGridLookup>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientGridLookup>>;
    /**
     * Returns a client object representing the built-in dropdown grid.
     */
    GetGridView(): ASPxClientGridView;
    /**
     * Confirms the current selection made by an end-user within the editor's dropdown grid.
     */
    ConfirmCurrentSelection(): void;
    /**
     * Cancels the current selection made by an end-user within the editor's dropdown grid and rolls back to the last confirmed selection. The selection can be confirmed by either pressing the Enter key or calling the ASPxClientGridLookup.ConfirmCurrentSelection method.
     */
    RollbackToLastConfirmedSelection(): void;
    /**
     * Converts the specified object to the ASPxClientGridLookup type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientGridLookup;
}
/**
 * A client-side equivalent of the ASPxGridView object.
 */
declare class ASPxClientGridView extends ASPxClientGridBase {
    /**
     * Provides access to the batch editing client API.
     */
    batchEditApi: ASPxClientGridViewBatchEditApi;
    /**
     * Occurs when a user clicks a custom command button.
     */
    CustomButtonClick: ASPxClientEvent<ASPxClientGridViewCustomButtonEventHandler<ASPxClientGridView>>;
    /**
     * Fires when a user selects a row.
     */
    SelectionChanged: ASPxClientEvent<ASPxClientGridViewSelectionEventHandler<ASPxClientGridView>>;
    /**
     * Enables you to prevent columns from being sorted.
     */
    ColumnSorting: ASPxClientEvent<ASPxClientGridViewColumnCancelEventHandler<ASPxClientGridView>>;
    /**
     * Enables you to cancel data grouping.
     */
    ColumnGrouping: ASPxClientEvent<ASPxClientGridViewColumnCancelEventHandler<ASPxClientGridView>>;
    /**
     * Fires in response to changing row focus.
     */
    FocusedRowChanged: ASPxClientEvent<ASPxClientGridViewFocusEventHandler<ASPxClientGridView>>;
    /**
     * Fires before a row has been focused.
     */
    RowFocusing: ASPxClientEvent<ASPxClientGridViewRowFocusingEventHandler<ASPxClientGridView>>;
    /**
     * Fires when an end-user starts dragging the column's header and enables you to cancel this operation.
     */
    ColumnStartDragging: ASPxClientEvent<ASPxClientGridViewColumnCancelEventHandler<ASPxClientGridView>>;
    /**
     * Enables you to prevent columns from being resized.
     */
    ColumnResizing: ASPxClientEvent<ASPxClientGridViewColumnCancelEventHandler<ASPxClientGridView>>;
    /**
     * Occurs after a column's width has been changed by an end-user.
     */
    ColumnResized: ASPxClientEvent<ASPxClientGridViewColumnProcessingModeEventHandler<ASPxClientGridView>>;
    /**
     * Enables you to control column movement.
     */
    ColumnMoving: ASPxClientEvent<ASPxClientGridViewColumnMovingEventHandler<ASPxClientGridView>>;
    /**
     * Fires before a group row is expanded.
     */
    RowExpanding: ASPxClientEvent<ASPxClientGridViewRowCancelEventHandler<ASPxClientGridView>>;
    /**
     * Fires before a group row is collapsed.
     */
    RowCollapsing: ASPxClientEvent<ASPxClientGridViewRowCancelEventHandler<ASPxClientGridView>>;
    /**
     * Fires before a detail row is expanded.
     */
    DetailRowExpanding: ASPxClientEvent<ASPxClientGridViewRowCancelEventHandler<ASPxClientGridView>>;
    /**
     * Fires before a detail row is collapsed.
     */
    DetailRowCollapsing: ASPxClientEvent<ASPxClientGridViewRowCancelEventHandler<ASPxClientGridView>>;
    /**
     * Fires on the client when a data row is clicked.
     */
    RowClick: ASPxClientEvent<ASPxClientGridViewRowClickEventHandler<ASPxClientGridView>>;
    /**
     * Fires on the client when a data row is double clicked.
     */
    RowDblClick: ASPxClientEvent<ASPxClientGridViewRowClickEventHandler<ASPxClientGridView>>;
    /**
     * Occurs after an end-user right clicks in the GridView, and enables you to provide a custom context menu.
     */
    ContextMenu: ASPxClientEvent<ASPxClientGridViewContextMenuEventHandler<ASPxClientGridView>>;
    /**
     * Fires on the client side when a context menu item has been clicked.
     */
    ContextMenuItemClick: ASPxClientEvent<ASPxClientGridViewContextMenuItemClickEventHandler<ASPxClientGridView>>;
    /**
     * Enables you to specify whether row data is valid and provide an error text.
     */
    BatchEditRowValidating: ASPxClientEvent<ASPxClientGridViewBatchEditRowValidatingEventHandler<ASPxClientGridView>>;
    /**
     * Enables you to prevent a batch edit confirmation message from being displayed.
     */
    BatchEditConfirmShowing: ASPxClientEvent<ASPxClientGridViewBatchEditConfirmShowingEventHandler<ASPxClientGridView>>;
    /**
     * Occurs when a grid switches to batch edit mode.
     */
    BatchEditStartEditing: ASPxClientEvent<ASPxClientGridViewBatchEditStartEditingEventHandler<ASPxClientGridView>>;
    /**
     * Occurs when a grid leaves the batch edit mode.
     */
    BatchEditEndEditing: ASPxClientEvent<ASPxClientGridViewBatchEditEndEditingEventHandler<ASPxClientGridView>>;
    /**
     * Enables you to provide navigation for editors contained in a templated cell in Batch Edit mode.
     */
    BatchEditTemplateCellFocused: ASPxClientEvent<ASPxClientGridViewBatchEditTemplateCellFocusedEventHandler<ASPxClientGridView>>;
    /**
     * Occurs on the client side before data changes are saved in batch edit mode.
     */
    BatchEditChangesSaving: ASPxClientEvent<ASPxClientGridViewBatchEditChangesSavingEventHandler<ASPxClientGridView>>;
    /**
     * Occurs on the client side before data changes are canceled in batch edit mode.
     */
    BatchEditChangesCanceling: ASPxClientEvent<ASPxClientGridViewBatchEditChangesCancelingEventHandler<ASPxClientGridView>>;
    /**
     * Occurs on the client side before a data row is inserted in batch edit mode.
     */
    BatchEditRowInserting: ASPxClientEvent<ASPxClientGridViewBatchEditRowInsertingEventHandler<ASPxClientGridView>>;
    /**
     * Occurs on the client side before a data row is deleted in batch edit mode.
     */
    BatchEditRowDeleting: ASPxClientEvent<ASPxClientGridViewBatchEditRowDeletingEventHandler<ASPxClientGridView>>;
    /**
     * Occurs on the client side before a row is recovered in batch edit mode.
     */
    BatchEditRowRecovering: ASPxClientEvent<ASPxClientGridViewBatchEditRowRecoveringEventHandler<ASPxClientGridView>>;
    /**
     * Occurs on the client side before the Changes Preview window is shown.
     */
    BatchEditChangesPreviewShowing: ASPxClientEvent<ASPxClientCancelEventHandler<ASPxClientGridView>>;
    /**
     * Occurs on the client side when the Changes Preview window is shown.
     */
    BatchEditChangesPreviewShown: ASPxClientEvent<ASPxClientEventHandler<ASPxClientGridView>>;
    /**
     * Occurs on the client side when the focused cell is about to be changed.
     */
    FocusedCellChanging: ASPxClientEvent<ASPxClientGridViewFocusedCellChangingEventHandler<ASPxClientGridView>>;
    /**
     * Invokes the Customization Dialog and displays it over the grid.
     */
    ShowCustomizationDialog(): void;
    /**
     * Sorts data by the specified data column's values, and places the column to the specified position among the sorted columns.
     * @param column An ASPxClientGridViewColumn object that represents the data column.
     * @param sortOrder A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
     * @param reset true to clear any previous sorting; otherwise, false.
     * @param sortIndex An integer value that specifies the zero-based column's index among the sorted columns. &#0045;1 if data is not sorted by this column.
     */
    SortBy(column: ASPxClientGridViewColumn | number | string, sortOrder?: string, reset?: boolean, sortIndex?: number): void;
    /**
     * Moves the specified column to the specified visual position within the grid and optionally groups or ungroups the grid's data by this column.
     * @param column An ASPxClientGridViewColumn object that represents the column to move.
     * @param moveToColumnVisibleIndex An integer value that identifies the target column displayed within the grid.
     * @param moveBefore true to move the column before the target column; otherwise, false.
     * @param moveToGroup true to group the grid's data by the column; otherwise, false.
     * @param moveFromGroup true to ungroup the grid's data by the column; otherwise, false.
     */
    MoveColumn(column: ASPxClientGridViewColumn | number | string, moveToColumnVisibleIndex?: number, moveBefore?: boolean | ASPxClientGridColumnMovingTargetPosition, moveToGroup?: boolean, moveFromGroup?: boolean): void;
    /**
     * Returns an object specifying the grid column's layout.
     */
    GetColumnLayout(): any;
    /**
     * Specifies the grid column's layout.
     * @param columnLayout An object specifying the grid column's layout.
     */
    SetColumnLayout(columnLayout: any): void;
    /**
     * Groups data by the values of the specified data column with the specified sort order. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
     * @param groupIndex An integer value that specifies the grouping level. &#0045;1 to cancel grouping by the column's values.
     * @param sortOrder A string value that specifies the column's sort order.
     */
    GroupBy(column: ASPxClientGridViewColumn | number | string, groupIndex?: number, sortOrder?: string): void;
    /** @deprecated Use the Ungroup method instead. */
    /**
     * Ungroups data by the values of the specified column.
     */
    UnGroup(column: ASPxClientGridViewColumn | number | string): void;
    /**
     * Ungroups data by the values of a specified column.
     * @param column A ASPxClientGridViewColumn object that is the grid column.
     */
    Ungroup(column: ASPxClientGridViewColumn | number | string): void;
    /**
     * Expands all group rows.
     */
    ExpandAll(): void;
    /**
     * Collapses all group rows.
     */
    CollapseAll(): void;
    /**
     * Expands all detail rows.
     */
    ExpandAllDetailRows(): void;
    /**
     * Collapses all detail rows.
     */
    CollapseAllDetailRows(): void;
    /**
     * Expands the specified group row and optionally child group rows at all nesting levels.
     * @param visibleIndex An integer value that identifies the group row.
     * @param recursive true to expand any child group rows at all nesting levels; false to preserve the collapsed state of any child group rows.
     */
    ExpandRow(visibleIndex: number, recursive?: boolean): void;
    /**
     * Collapses the specified group row and optionally child group rows at all nesting levels.
     * @param visibleIndex An integer value that identifies the group row by its visible index.
     * @param recursive true to collapse child group rows at all nesting levels; false to preserve the expanded state of any child group row.
     */
    CollapseRow(visibleIndex: number, recursive?: boolean): void;
    /**
     * Scrolls the view to the specified row.
     * @param visibleIndex An integer value that identifies a row by its visible index.
     */
    MakeRowVisible(visibleIndex: number): void;
    /**
     * Expands the specified detail row.
     * @param visibleIndex A zero-based integer index that identifies the detail row.
     */
    ExpandDetailRow(visibleIndex: number): void;
    /**
     * Collapses the specified detail row.
     * @param visibleIndex A zero-based integer index that identifies the detail row.
     */
    CollapseDetailRow(visibleIndex: number): void;
    /**
     * Returns the key value of the specified data row. A string representing the specified data row's key value. If the index passed via the visibleIndex parameter is wrong, or the ASPxGridBase.KeyFieldName property is not set, null is returned.
     * @param visibleIndex An integer value that specifies the row's visible index.
     */
    GetRowKey(visibleIndex: number): string;
    /**
     * Switches the grid to edit mode.
     * @param visibleIndex A zero-based integer that identifies a data row to be edited.
     */
    StartEditRow(visibleIndex: number): void;
    /**
     * Switches the grid to edit mode.
     * @param key An object that uniquely identifies a data row to be edited.
     */
    StartEditRowByKey(key: any): void;
    /**
     * Indicates whether or not a new row is being edited.
     */
    IsNewRowEditing(): boolean;
    /**
     * Adds a new record.
     */
    AddNewRow(): void;
    /**
     * Deletes the specified row.
     * @param visibleIndex An integer value that identifies the row.
     */
    DeleteRow(visibleIndex: number): void;
    /**
     * Deletes a row with the specified key value.
     * @param key An object that uniquely identifies the row.
     */
    DeleteRowByKey(key: any): void;
    /**
     * Returns the focused row's index.
     */
    GetFocusedRowIndex(): number;
    /**
     * Moves focus to the specified row.
     * @param visibleIndex An integer value that specifies the focused row's index.
     */
    SetFocusedRowIndex(visibleIndex: number): void;
    /**
     * Selects or deselects the specified rows within the grid.
     * @param visibleIndices An array of zero-based indices that identify data rows within the grid.
     * @param selected true to select the specified rows; false to deselect the rows.
     */
    SelectRows(visibleIndices?: number[] | number, selected?: boolean): void;
    /**
     * Selects or deselects the specified row in the grid.
     * @param selected true to select the specified row; false to deselect the row.
     */
    SelectRowsByKey(keys: any[] | any, selected?: boolean): void;
    /**
     * Deselects the specified row displayed within the grid.
     */
    UnselectRowsByKey(keys: any[] | any): void;
    /**
     * Deselects the specified row (if selected) within the grid.
     * @param visibleIndices Visible indices of rows to unselect.
     */
    UnselectRows(visibleIndices?: number[] | number): void;
    /**
     * Deselects all grid rows that match the filter criteria currently applied to the grid.
     */
    UnselectFilteredRows(): void;
    /**
     * Selects or deselects the specified row displayed on the current page.
     * @param visibleIndex A zero-based integer value that specifies the row's visible index.
     * @param selected true to select the specified row; false to deselect the row.
     */
    SelectRowOnPage(visibleIndex: number, selected?: boolean): void;
    /**
     * Deselects the specified row (if selected) displayed on the current page.
     * @param visibleIndex A zero-based integer value that specifies the row's visible index.
     */
    UnselectRowOnPage(visibleIndex: number): void;
    /**
     * Allows you to select or deselect all rows displayed on the current page based on the parameter passed.
     * @param selected true to select all unselected rows displayed on the current page; false to deselect all selected rows on the page.
     */
    SelectAllRowsOnPage(selected?: boolean): void;
    /**
     * Deselects all selected rows displayed on the current page.
     */
    UnselectAllRowsOnPage(): void;
    /**
     * Returns the number of selected rows.
     */
    GetSelectedRowCount(): number;
    /**
     * Indicates whether or not the specified row is selected within the current page. true if the specified row is selected within the current page; otherwise, false.
     * @param visibleIndex An integer value that identifies the row by its visible index.
     */
    IsRowSelectedOnPage(visibleIndex: number): boolean;
    /**
     * Indicates whether the specified row is a group row. true if the specified row is a group row; otherwise, false.
     * @param visibleIndex An integer value that identifies the row by its visible index.
     */
    IsGroupRow(visibleIndex: number): boolean;
    /**
     * Indicates whether the specified row is a data row. true if the specified row is a data row; otherwise, false.
     * @param visibleIndex An integer value that identifies the row by its visible index.
     */
    IsDataRow(visibleIndex: number): boolean;
    /**
     * Indicates whether the specified group row is expanded. true if the specified group row is expanded; otherwise, false.
     * @param visibleIndex An integer value that identifies the group row by its visible index.
     */
    IsGroupRowExpanded(visibleIndex: number): boolean;
    /** @deprecated Use the GetVerticalScrollPosition method instead. */
    /**
     * Returns the current vertical scroll position of the grid's content.
     */
    GetVertScrollPos(): number;
    /** @deprecated Use the GetHorizontalScrollPosition method instead. */
    /**
     * Returns the current horizontal scroll position of the grid's content.
     */
    GetHorzScrollPos(): number;
    /**
     * Returns the current horizontal scroll position of the grid's content.
     */
    GetHorizontalScrollPosition(): number;
    /** @deprecated Use the SetVerticalScrollPosition method instead. */
    /**
     * Specifies the vertical scroll position for the grid's content.
     * @param position An integer value specifying the vertical scroll position.
     */
    SetVertScrollPos(position: number): void;
    /** @deprecated Use the SetHorizontalScrollPosition method instead. */
    /**
     * Specifies the horizontal scroll position for the grid's content.
     * @param position An integer value specifying the horizontal scroll position.
     */
    SetHorzScrollPos(position: number): void;
    /**
     * Specifies the horizontal scroll position for the grid's content.
     * @param position An integer value specifying the horizontal scroll position.
     */
    SetHorizontalScrollPosition(position: number): void;
    /**
     * Sets the scrollability of various types of grid rows when the grid displays fixed columns.
     * @param scrollableRowSettings An object specifying which types of grid rows should or should not be scrollable.
     */
    SetFixedColumnScrollableRows(scrollableRowSettings: any): void;
    /**
     * Exports a grid data to a file in the specified format.
     * @param format An ASPxClientGridViewExportFormat object specifying the export format.
     */
    ExportTo(format: ASPxClientGridViewExportFormat): void;
    /**
     * Returns a value specifying the indices of the rows visible in the browser's view port. An array of integer values that are the indices of the rows visible in the browser's view port.
     * @param includePartiallyVisible true, to include partially visible rows, otherwise, false.
     */
    GetRowIndicesVisibleInViewPort(includePartiallyVisible: boolean): number[];
    /**
     * Applies a filter specified in the filter row to the GridView.
     */
    ApplyOnClickRowFilter(): void;
    /**
     * Returns the editor used to edit the value in the auto filter row for the specified data column. An object that represents the editor used to edit the value in the specified auto filter row cell. null (Nothing in Visual Basic) if the editor was not found.
     */
    GetAutoFilterEditor(column: ASPxClientGridViewColumn | number | string): any;
    /**
     * Applies a filter to the specified data column.
     * @param val A string value that specifies the filter expression.
     */
    AutoFilterByColumn(column: ASPxClientGridViewColumn | number | string, val: string): void;
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientGridView>>;
    /**
     * Occurs on the client after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientGridView>>;
    /**
     * Fires on the client if any unhandled server error occurs during server-side processing of a callback sent by the ASPxClientGridView.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientGridView>>;
    /**
     * Fires after the Customization Window has been closed.
     */
    CustomizationWindowCloseUp: ASPxClientEvent<ASPxClientEventHandler<ASPxClientGridView>>;
    /**
     * Applies the specified search panel filter criterion to grid data.
     * @param value A string value that specifies the filter criterion.
     */
    ApplySearchPanelFilter(value: string): void;
    /**
     * Applies the specified filter expression to the GridView.
     * @param filterExpression A string value that specifies the filter expression.
     */
    ApplyFilter(filterExpression: string): void;
    /**
     * Clears the filter expression applied to a client GridView.
     */
    ClearFilter(): void;
    /**
     * Gets the Popup Edit Form.
     */
    GetPopupEditForm(): ASPxClientPopupControl;
    /**
     * Sets input focus to the grid.
     */
    Focus(): void;
    /**
     * Sends a callback to the server and generates the server-side event, passing the specified argument to it.
     * @param args A string value that represents any information that needs to be sent to the server-side event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(args: string, onSuccess?: (arg: string) => void): void;
    /**
     * Selects the specified page.
     * @param pageIndex An integer value that specifies the active page's index.
     */
    GotoPage(pageIndex: number): void;
    /**
     * Gets the index of the page currently being selected.
     */
    GetPageIndex(): number;
    /**
     * Gets the number of pages to which the grid's data is divided.
     */
    GetPageCount(): number;
    /**
     * Activates the next page.
     */
    NextPage(): void;
    /**
     * Activates the previous page.
     */
    PrevPage(): void;
    /**
     * Returns the index of the first data row displayed within the GridView's active page.
     */
    GetTopVisibleIndex(): number;
    /**
     * Indicates whether the grid is in edit mode.
     */
    IsEditing(): boolean;
    /**
     * Saves all the changes made and switches the grid to browse mode.
     */
    UpdateEdit(): void;
    /**
     * Cancels all the changes made and switches the GridView to browse mode.
     */
    CancelEdit(): void;
    /**
     * Updates data displayed within the grid.
     */
    Refresh(): void;
    /**
     * Indicates whether the Customization Window is displayed.
     */
    IsCustomizationWindowVisible(): boolean;
    /**
     * Invokes the Customization Window and displays it over the specified HTML element.
     * @param showAtElement An object that specifies the HTML element relative to whose position the customization window is invoked.
     */
    ShowCustomizationWindow(showAtElement?: any): void;
    /**
     * Closes the Customization Window.
     */
    HideCustomizationWindow(): void;
    /** @deprecated Use the GetColumnCount method instead. */
    /**
     * Returns the number of columns within the client GridView.
     */
    GetColumnsCount(): number;
    /**
     * Returns the number of columns within the client GridView.
     */
    GetColumnCount(): number;
    /**
     * Returns the row values displayed within all selected rows.
     * @param fieldNames The names of data source fields separated via a semicolon, whose values within the selected rows are returned.
     * @param onCallback A ASPxClientGridViewValuesCallback object that represents the JavaScript function which receives the list of row values as a parameter.
     */
    GetSelectedFieldValues(fieldNames: string, onCallback: ASPxClientGridViewValuesCallback): void;
    /**
     * Returns key values of selected rows displayed within the current page.
     */
    GetSelectedKeysOnPage(): any[];
    /**
     * Sends a callback to the server and generates the server-side ASPxGridView.CustomDataCallback event.
     * @param args Information that you need to send to the ASPxGridView.CustomDataCallback server-side event.
     * @param onCallback A JavaScript function that receives the information on the client side.
     */
    GetValuesOnCustomCallback(args: string, onCallback: ASPxClientGridViewValuesCallback): void;
    /**
     * Returns the values of the specified data source fields within the specified row.
     * @param visibleIndex An integer value that identifies the data row's index.
     * @param fieldNames The names of data source fields separated by a semicolon, whose values within the specified row are returned.
     * @param onCallback An ASPxClientGridViewValuesCallback object that represents the JavaScript function which receives the list of row values as a parameter.
     */
    GetRowValues(visibleIndex: number, fieldNames: string, onCallback: ASPxClientGridViewValuesCallback): void;
    /**
     * Returns the row values displayed within the current page.
     * @param fieldNames The names of data source fields whose values are returned.
     * @param onCallback A ASPxClientGridViewValuesCallback object that represents the JavaScript function which receives the list of row values as a parameter.
     */
    GetPageRowValues(fieldNames: string, onCallback: ASPxClientGridViewValuesCallback): void;
    /**
     * Returns the number of rows actually displayed within the active page.
     */
    GetVisibleRowsOnPage(): number;
    /**
     * Returns the client column that resides at the specified position within the column collection. An ASPxClientGridViewColumn object that represents the client column.
     * @param columnIndex A zero-based index that identifies the column within the column collection (the column's CollectionItem.Index property value).
     */
    GetColumn(columnIndex: number): ASPxClientGridViewColumn;
    /**
     * Returns the column with the specified unique identifier. An ASPxClientGridViewColumn object that represents the client column.
     * @param columnId A string value that specifies the column's unique identifier (the column's WebColumnBase.Name property value).
     */
    GetColumnById(columnId: string): ASPxClientGridViewColumn;
    /**
     * Returns the client column which is bound to the specified data source field. An ASPxClientGridViewColumn object that represents the client column bound to the specified data source field.
     * @param columnFieldName A string value that specifies the name of the data source field to which the column is bound (the column's GridViewDataColumn.FieldName property value).
     */
    GetColumnByField(columnFieldName: string): ASPxClientGridViewColumn;
    /**
     * Returns the editor used to edit the specified column's values. Specifies a column's editor.
     * @param column Specifies the required column in the client grid.
     */
    GetEditor(column: ASPxClientGridViewColumn | number | string): ASPxClientEdit;
    /**
     * Returns the value of the specified edit cell. A string value that represents the value of the edit cell which corresponds to the specified data column.
     * @param column An ASPxClientGridViewColumn object that represents the data column within the client grid.
     */
    GetEditValue(column: ASPxClientGridViewColumn | number | string): string;
    /**
     * Moves focus to the specified edit cell within the edited row.
     * @param column An ASPxClientGridViewColumn object that represents the data column within the client grid.
     */
    FocusEditor(column: ASPxClientGridViewColumn | number | string): void;
    /**
     * Sets the value of the specified edit cell.
     * @param value A string value that specifies the edit cell's new value.
     */
    SetEditValue(column: ASPxClientGridViewColumn | number | string, value: string): void;
    /**
     * Displays the Filter Control.
     */
    ShowFilterControl(): void;
    /**
     * Hides the Filter Control.
     */
    CloseFilterControl(): void;
    /**
     * Enables or disables the current filter.
     * @param isFilterEnabled true to enable the current filter; otherwise, false.
     */
    SetFilterEnabled(isFilterEnabled: boolean): void;
    /**
     * Returns the current vertical scroll position of the grid's content.
     */
    GetVerticalScrollPosition(): number;
    /**
     * Specifies the vertical scroll position for the grid's content.
     * @param position An integer value that specifies the vertical scroll position.
     */
    SetVerticalScrollPosition(position: number): void;
    /**
     * Gets information about a focused cell.
     */
    GetFocusedCell(): ASPxClientGridViewCellInfo;
    /**
     * Focuses the specified cell.
     * @param rowVisibleIndex An integer value that specifies the visible index of the row.
     * @param columnIndex Focuses the specified cell.
     */
    SetFocusedCell(rowVisibleIndex: number, columnIndex: number): void;
    /**
     * Focuses the specified cell.
     * @param key A String value that identifies the row by its key value.
     * @param columnIndex A zero-based index that identifies the column in the column collection (the column's CollectionItem.Index property value).
     */
    SetFocusedCellByKey(key: any, columnIndex: number): void;
    /**
     * Specifies a custom editor for the search panel on the client side.
     * @param editor An ASPxClientEdit object representing a custom editor.
     */
    SetSearchPanelCustomEditor(editor: ASPxClientEdit): void;
    /**
     * Returns the edit form layout.
     */
    GetEditFormLayout(): ASPxClientFormLayout;
    /**
     * Returns the form layout item. The form layout item.
     * @param column The column, its index or field name.
     */
    GetEditFormLayoutItemByColumn(column: ASPxClientGridViewColumn | number | string): ASPxClientLayoutItem;
    /**
     * Returns the form layout item or group. The layout item.
     * @param name The item's or group's name.
     */
    GetEditFormLayoutItemOrGroup(name: string): ASPxClientLayoutItem;
    /**
     * Converts the specified object to the ASPxClientGridView type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientGridView;
}
/**
 * A client grid column.
 */
declare class ASPxClientGridViewColumn extends ASPxClientGridColumnBase {
    /** @deprecated Use the name property instead. */
    /**
     * Gets the column's unique identifier.
     */
    id: string;
    /**
     * Gets the name that uniquely identifies the column.
     */
    name: string;
    /**
     * Gets the column's position within the collection.
     */
    index: number;
    /**
     * Gets the name of the database field assigned to the current column.
     */
    fieldName: string;
    /**
     * Gets whether the column is visible.
     */
    visible: boolean;
}
/**
 * Represents a JavaScript function which receives the list of row values when the client ASPxClientGridView.GetRowValues, ASPxGridView.GetCurrentPageRowValues or ASPxClientGridView.GetSelectedFieldValues method is called.
 * @param result An object that represents the list of row values received from the server.
 */
interface ASPxClientGridViewValuesCallback { (result: any): void; }
/**
 * A method that will handle the cancelable events of a client ASPxGridView column.
 * @param source The event source.
 * @param e An ASPxClientGridViewColumnCancelEventArgs object that contains event data.
 */
interface ASPxClientGridViewColumnCancelEventHandler<Sender> { (source: Sender, e: ASPxClientGridViewColumnCancelEventArgs): void; }
/**
 * Provides data for the cancelable events of a client ASPxGridView column.
 */
declare class ASPxClientGridViewColumnCancelEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new isntance of the ASPxClientGridViewColumnCancelEventArgs class.
     * @param column An ASPxClientGridViewColumn object that represents the processed column.
     */
    constructor(column: ASPxClientGridViewColumn);
    /**
     * Gets the processed client column.
     */
    column: ASPxClientGridViewColumn;
}
/**
 * A method that will handle the client events concerned with column processing.
 * @param source The event source.
 * @param e A ASPxClientGridViewColumnProcessingModeEventArgs object that contains event data.
 */
interface ASPxClientGridViewColumnProcessingModeEventHandler<Sender> { (source: Sender, e: ASPxClientGridViewColumnProcessingModeEventArgs): void; }
/**
 * Provides data for the client events  concerned with column processing, and that allow the event's processing to be passed to the server side.
 */
declare class ASPxClientGridViewColumnProcessingModeEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Initializes a new instance of the ASPxClientGridViewColumnProcessingModeEventArgs class with the specified setting.
     * @param column A ASPxClientGridViewColumn object representing the column related to the event.
     */
    constructor(column: ASPxClientGridViewColumn);
    /**
     * Gets a grid column related to the event.
     */
    column: ASPxClientGridViewColumn;
}
/**
 * A method that will handle the ASPxClientGridView.RowCollapsing and ASPxClientGridView.RowExpanding events.
 * @param source The event source.
 * @param e An ASPxClientGridViewRowCancelEventArgs object that contains event data.
 */
interface ASPxClientGridViewRowCancelEventHandler<Sender> { (source: Sender, e: ASPxClientGridViewRowCancelEventArgs): void; }
/**
 * Provides data for the ASPxClientGridView.RowCollapsing and ASPxClientGridView.RowExpanding events.
 */
declare class ASPxClientGridViewRowCancelEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientGridViewRowCancelEventArgs class.
     * @param visibleIndex An integer value that identifies the processed row. This value is assigned to the ASPxClientGridViewRowCancelEventArgs.visibleIndex property.
     */
    constructor(visibleIndex: number);
    /**
     * Gets the processed row's visible index.
     */
    visibleIndex: number;
}
/**
 * A method that will handle the ASPxClientGridView.SelectionChanged event.
 * @param source The event source.
 * @param e An ASPxClientGridViewSelectionEventArgs object that contains event data.
 */
interface ASPxClientGridViewSelectionEventHandler<Sender> { (source: Sender, e: ASPxClientGridViewSelectionEventArgs): void; }
/**
 * Provides data for the ASPxClientGridView.SelectionChanged event.
 */
declare class ASPxClientGridViewSelectionEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Initializes a new instance of the ASPxClientGridViewSelectionEventArgs class.
     * @param visibleIndex An integer value that specifies the visible index of the row whose selected state has been changed. This value is assigned to the ASPxClientGridViewSelectionEventArgs.visibleIndex property.
     */
    constructor(visibleIndex: number);
    /**
     * Gets the visible index of the row whose selected state has been changed.
     */
    visibleIndex: number;
    /**
     * Gets whether the row has been selected.
     */
    isSelected: boolean;
    /**
     * Gets whether all rows displayed within a page have been selected or unselected.
     */
    isAllRecordsOnPage: boolean;
    /**
     * Gets whether a selection has been changed on the server.
     */
    isChangedOnServer: boolean;
}
/**
 * Represents a method that will handle the ASPxClientGridView.FocusedRowChanged event.
 * @param source The event source.
 * @param e An ASPxClientGridViewFocusEventArgs object which contains event data.
 */
interface ASPxClientGridViewFocusEventHandler<Sender> { (source: Sender, e: ASPxClientGridViewFocusEventArgs): void; }
/**
 * Provides data for the corresponding event.
 */
declare class ASPxClientGridViewFocusEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Initializes a new instance of the ASPxClientGridViewFocusEventArgs class.
     */
    constructor();
    /**
     * Gets whether the row focusing has been changed on the server.
     */
    isChangedOnServer: boolean;
}
/**
 * Represents a method that will handle the ASPxClientGridView.RowFocusing event.
 * @param source The event source.
 * @param e An ASPxClientGridViewRowFocusingEventArgs object which contains event data.
 */
interface ASPxClientGridViewRowFocusingEventHandler<Sender> { (source: Sender, e: ASPxClientGridViewRowFocusingEventArgs): void; }
/**
 * Provides data for the ASPxClientGridView.RowFocusing event.
 */
declare class ASPxClientGridViewRowFocusingEventArgs extends ASPxClientGridViewRowCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientGridViewRowFocusingEventArgs class.
     * @param visibleIndex An integer value specifying the row visible index.
     * @param htmlEvent An object specifying the HTML event.
     */
    constructor(visibleIndex: number, htmlEvent: any);
    /**
     * Provides access to the parameters associated with the ASPxClientGridView.RowFocusing event.
     */
    htmlEvent: any;
}
/**
 * A method that will handle the ASPxClientGridView.RowClick event.
 * @param source The event source. This parameter identifies the ASPxClientGridView object that raised the event.
 * @param e An ASPxClientGridViewRowClickEventArgs object that contains event data.
 */
interface ASPxClientGridViewRowClickEventHandler<Sender> { (source: Sender, e: ASPxClientGridViewRowClickEventArgs): void; }
/**
 * Provides data for the ASPxClientGridView.RowClick event.
 */
declare class ASPxClientGridViewRowClickEventArgs extends ASPxClientGridViewRowCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientGridViewRowClickEventArgs class.
     * @param visibleIndex A zero-based integer index that identifies the clicked row.
     * @param htmlEvent An object that contains parameters associated with the event. This value is assigned to the ASPxClientGridViewRowClickEventArgs.htmlEvent property.
     */
    constructor(visibleIndex: number, htmlEvent: any);
    /**
     * Provides access to the parameters associated with the ASPxClientGridView.RowClick event.
     */
    htmlEvent: any;
}
/**
 * A method that will handle the ASPxClientGridView.ContextMenu event.
 * @param source The event source.
 * @param e An ASPxClientGridViewContextMenuEventArgs object that contains event data.
 */
interface ASPxClientGridViewContextMenuEventHandler<Sender> { (source: Sender, e: ASPxClientGridViewContextMenuEventArgs): void; }
/**
 * Provides data for the ASPxClientGridView.ContextMenu event.
 */
declare class ASPxClientGridViewContextMenuEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientGridViewContextMenuEventArgs class with the specified settings.
     * @param objectType A string specifying a grid element that has been right clicked by the user.
     * @param index A zero-based integer index that is the processed element index.
     * @param htmlEvent An object that contains parameters associated with the event.
     * @param showBrowserMenu true, to display a browser context menu; otherwise, false.
     */
    constructor(objectType: string, index: number, htmlEvent: any, showBrowserMenu: boolean);
    /**
     * Gets which grid element has been right clicked by the user.
     */
    objectType: string;
    /**
     * Identifies the grid element being right clicked by the user.
     */
    index: number;
    /**
     * Provides access to the parameters associated with the ASPxClientGridView.ContextMenu event.
     */
    htmlEvent: any;
    /**
     * Gets the currently processed menu object.
     */
    menu: any;
    /**
     * Specifies whether a browser context menu should be displayed.
     */
    showBrowserMenu: boolean;
}
/**
 * A method that will handle the ASPxClientGridView.ContextMenuItemClick event.
 * @param source The event source.
 * @param e An ASPxClientGridViewContextMenuItemClickEventArgs object that contains event data.
 */
interface ASPxClientGridViewContextMenuItemClickEventHandler<Sender> { (source: Sender, e: ASPxClientGridViewContextMenuItemClickEventArgs): void; }
/**
 * Provides data for the ASPxClientGridView.ContextMenuItemClick event.
 */
declare class ASPxClientGridViewContextMenuItemClickEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Initializes a new instance of the ASPxClientGridViewContextMenuItemClickEventArgs class with the specified settings.
     * @param item An ASPxClientMenuItem object specifying an item that has been right clicked by the user.
     * @param objectType A string specifying a grid element that has been right clicked by the user.
     * @param elementIndex A zero-based integer index that identifies the grid element being right clicked by the user.
     * @param processOnServer true to process the event on the server side; false to completely handle it on the client side.
     */
    constructor(item: ASPxClientMenuItem, objectType: string, elementIndex: number, processOnServer: boolean);
    /**
     * Gets the clicked context menu item.
     */
    item: ASPxClientMenuItem;
    /**
     * Gets which grid element has been right clicked by the user.
     */
    objectType: string;
    /**
     * Returns the processed element index.
     */
    elementIndex: number;
    /**
     * Specifies whether a postback or a callback is used to finally process the event on the server side.
     */
    usePostBack: boolean;
    /**
     * Specifies whether default context menu item click is handled manually, so no default processing is required.
     */
    handled: boolean;
}
/**
 * A method that will handle the ASPxClientGridView.CustomButtonClick event.
 * @param source The event source.
This parameter identifies the ASPxClientGridView object that raised the event.
 * @param e An ASPxClientGridViewCustomButtonEventArgs object that contains event data.
 */
interface ASPxClientGridViewCustomButtonEventHandler<Sender> { (source: Sender, e: ASPxClientGridViewCustomButtonEventArgs): void; }
/**
 * Provides data for the ASPxClientGridView.CustomButtonClick event.
 */
declare class ASPxClientGridViewCustomButtonEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Initializes a new instance of the ASPxClientGridViewCustomButtonEventArgs class.
     * @param visibleIndex An integer value that identifies the row whose custom button has been clicked. This value is assigned to the ASPxClientGridViewCustomButtonEventArgs.visibleIndex property.
     * @param buttonID An integer value that identifies the clicked custom button. This value is assigned to the ASPxClientGridViewCustomButtonEventArgs.buttonID property.
     */
    constructor(visibleIndex: number, buttonID: string);
    /**
     * Gets the value that identifies the row whose custom button has been clicked.
     */
    visibleIndex: number;
    /**
     * Gets the value that identifies the custom button.
     */
    buttonID: string;
}
/**
 * A method that will handle the ASPxClientGridView.ColumnMoving event.
 * @param source The event source.
 * @param e An ASPxClientGridViewColumnMovingEventArgs object that contains event data.
 */
interface ASPxClientGridViewColumnMovingEventHandler<Sender> { (source: Sender, e: ASPxClientGridViewColumnMovingEventArgs): void; }
/**
 * Provides data for the ASPxClientGridView.ColumnMoving event.
 */
declare class ASPxClientGridViewColumnMovingEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientGridViewColumnMovingEventArgs class.
     * @param sourceColumn An ASPxClientGridViewColumn object that represents the column currently being dragged by an end-user. This value is assigned to the ASPxClientGridViewColumnMovingEventArgs.sourceColumn property.
     * @param destinationColumn An ASPxClientGridViewColumn object that represents the target column. This value is assigned to the ASPxClientGridViewColumnMovingEventArgs.destinationColumn property.
     * @param isDropBefore true if the source column will be inserted before the target column (if dropped); otherwise, false. This value is assigned to the ASPxClientGridViewColumnMovingEventArgs.isDropBefore property.
     * @param isGroupPanel true if the source column is currently over the Group Panel; otherwise, false. This value is assigned to the ASPxClientGridViewColumnMovingEventArgs.isGroupPanel property.
     */
    constructor(sourceColumn: ASPxClientGridViewColumn, destinationColumn: ASPxClientGridViewColumn, isDropBefore: boolean, isGroupPanel: boolean);
    /**
     * Gets or sets whether a column is allowed to be moved.
     */
    allow: boolean;
    /**
     * Gets the column currently being dragged by an end-user.
     */
    sourceColumn: ASPxClientGridViewColumn;
    /**
     * Gets the target column, before or after which the source column will be inserted (if dropped).
     */
    destinationColumn: ASPxClientGridViewColumn;
    /**
     * Gets whether the source column will be inserted before the target column (if dropped).
     */
    isDropBefore: boolean;
    /**
     * Gets whether the source column is currently over the Group Panel.
     */
    isGroupPanel: boolean;
}
/**
 * A method that will handle the ASPxClientGridView.BatchEditConfirmShowing client event.
 * @param source The event source.
 * @param e An ASPxClientGridViewBatchEditConfirmShowingEventArgs object that contains event data.
 */
interface ASPxClientGridViewBatchEditConfirmShowingEventHandler<Sender> { (source: Sender, e: ASPxClientGridViewBatchEditConfirmShowingEventArgs): void; }
/**
 * Provides data for the ASPxClientGridView.BatchEditConfirmShowing event.
 */
declare class ASPxClientGridViewBatchEditConfirmShowingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientGridViewBatchEditConfirmShowingEventArgs class.
     * @param requestTriggerID A string value specifying the client identifier of an object that initiates a request.
     */
    constructor(requestTriggerID: string);
    /**
     * Gets the client identifier of an object that initiates a send request.
     */
    requestTriggerID: string;
}
/**
 * A method that will handle the ASPxClientGridView.BatchEditStartEditing event.
 * @param source The event source.
 * @param e An ASPxClientGridViewBatchEditStartEditingEventArgs object that contains event data.
 */
interface ASPxClientGridViewBatchEditStartEditingEventHandler<Sender> { (source: Sender, e: ASPxClientGridViewBatchEditStartEditingEventArgs): void; }
/**
 * Provides data for the ASPxClientGridView.BatchEditStartEditing event.
 */
declare class ASPxClientGridViewBatchEditStartEditingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientGridViewBatchEditStartEditingEventArgs class.
     * @param visibleIndex An integer value that is the row's visible index.
     * @param focusedColumn An  object that is the focused row.
     * @param rowValues An object that provides the row values.
     * @param key An object that provides the row's key.
     */
    constructor(visibleIndex: number, focusedColumn: ASPxClientGridViewColumn, rowValues: any, key: any);
    /**
     * Gets the visible index of the row whose cells are about to be edited.
     */
    visibleIndex: number;
    /**
     * Gets the grid column that owns a cell that is about to be edited.
     */
    focusedColumn: ASPxClientGridViewColumn;
    /**
     * Gets a hashtable that maintains information about editable cells.
     */
    rowValues: any;
    /**
     * Gets the row's key.
     */
    key: any;
}
/**
 * A method that will handle the ASPxClientGridView.BatchEditEndEditing event.
 * @param source The event source.
 * @param e An ASPxClientGridViewBatchEditEndEditingEventArgs object that contains event data.
 */
interface ASPxClientGridViewBatchEditEndEditingEventHandler<Sender> { (source: Sender, e: ASPxClientGridViewBatchEditEndEditingEventArgs): void; }
/**
 * Provides data for the ASPxClientGridView.BatchEditEndEditing event.
 */
declare class ASPxClientGridViewBatchEditEndEditingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientGridViewBatchEditEndEditingEventArgs class.
     * @param visibleIndex An integer value that specifies the visible index.
     * @param rowValues An object that provides the row values.
     * @param key An object that provides the row key.
     */
    constructor(visibleIndex: number, rowValues: any, key: any);
    /**
     * Gets the visible index of the row whose cells has been edited.
     */
    visibleIndex: number;
    /**
     * Gets a hashtable that maintains information about editable cells.
     */
    rowValues: any;
    /**
     * Gets the row's key.
     */
    key: any;
}
/**
 * A method that will handle the ASPxClientGridView.BatchEditRowValidating event.
 * @param source The event source.
 * @param e An ASPxClientGridViewBatchEditRowValidatingEventArgs object that contains event data.
 */
interface ASPxClientGridViewBatchEditRowValidatingEventHandler<Sender> { (source: Sender, e: ASPxClientGridViewBatchEditRowValidatingEventArgs): void; }
/**
 * Provides data for the ASPxClientGridView.BatchEditRowValidating event.
 */
declare class ASPxClientGridViewBatchEditRowValidatingEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientGridViewBatchEditRowValidatingEventArgs class.
     * @param visibleIndex An integer value that specifies the row's visible index.
     * @param validationInfo An object that provides the row's validation info.
     * @param key An object that is the row's key.
     */
    constructor(visibleIndex: number, validationInfo: any, key: any);
    /**
     * Gets the processed row's visible index.
     */
    visibleIndex: number;
    /**
     * Provides validation information of a row currently being validated.
     */
    validationInfo: any;
    /**
     * Gets the row's key.
     */
    key: any;
}
/**
 * A method that will handle the ASPxClientGridView.BatchEditTemplateCellFocused event.
 * @param source An object representing the event source. Identifies the button editor that raised the event.
 * @param e An ASPxClientGridViewBatchEditTemplateCellFocusedEventArgs object that contains event data.
 */
interface ASPxClientGridViewBatchEditTemplateCellFocusedEventHandler<Sender> { (source: Sender, e: ASPxClientGridViewBatchEditTemplateCellFocusedEventArgs): void; }
/**
 * Provides data for the ASPxClientGridView.BatchEditTemplateCellFocused event.
 */
declare class ASPxClientGridViewBatchEditTemplateCellFocusedEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientGridViewBatchEditTemplateCellFocusedEventArgs class with the specified column.
     * @param column An ASPxClientGridViewColumn object that is the processed grid column. This value is assigned to the ASPxClientGridViewBatchEditTemplateCellFocusedEventArgs.column property.
     */
    constructor(column: ASPxClientGridViewColumn);
    /**
     * Gets the currently processed column.
     */
    column: ASPxClientGridViewColumn;
    /**
     * Gets or sets a value specifying whether the event was handled.
     */
    handled: boolean;
}
/**
 * A method that will handle the ASPxClientGridView.BatchEditChangesSaving event.
 * @param source The event source. This parameter identifies the grid view object which raised the event.
 * @param e An ASPxClientGridViewBatchEditChangesSavingEventArgs object that contains event data.
 */
interface ASPxClientGridViewBatchEditChangesSavingEventHandler<Sender> { (source: Sender, e: ASPxClientGridViewBatchEditChangesSavingEventArgs): void; }
/**
 * Provides data for the ASPxClientGridView.BatchEditChangesSaving event.
 */
declare class ASPxClientGridViewBatchEditChangesSavingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientGridViewBatchEditChangesSavingEventArgs class.
     * @param insertedValues A hashtable that stores information about inserted cells.
     * @param deletedValues A hashtable that stores information about deleted cells.
     * @param updatedValues A hashtable that stores information about updated cells.
     */
    constructor(insertedValues: any, deletedValues: any, updatedValues: any);
    /**
     * Gets a hashtable that maintains information about inserted cells.
     */
    insertedValues: any;
    /**
     * Gets a hashtable that maintains information about deleted cells.
     */
    deletedValues: any;
    /**
     * Gets a hashtable that maintains information about updated cells.
     */
    updatedValues: any;
}
/**
 * A method that will handle the ASPxClientGridView.BatchEditChangesCanceling event.
 * @param source The event source. This parameter identifies the grid view object which raised the event.
 * @param e An ASPxClientGridViewBatchEditChangesCancelingEventArgs object that contains event data.
 */
interface ASPxClientGridViewBatchEditChangesCancelingEventHandler<Sender> { (source: Sender, e: ASPxClientGridViewBatchEditChangesCancelingEventArgs): void; }
/**
 * Provides data for the ASPxClientGridView.BatchEditChangesCanceling event.
 */
declare class ASPxClientGridViewBatchEditChangesCancelingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientGridViewBatchEditChangesCancelingEventArgs class.
     * @param insertedValues A hashtable that stores information about inserted cells.
     * @param deletedValues A hashtable that stores information about deleted cells.
     * @param updatedValues A hashtable that stores information about updated cells.
     */
    constructor(insertedValues: any, deletedValues: any, updatedValues: any);
    /**
     * Gets a hashtable that maintains information about inserted cells.
     */
    insertedValues: any;
    /**
     * Gets a hashtable that maintains information about deleted cells.
     */
    deletedValues: any;
    /**
     * Gets a hashtable that maintains information about updated cells.
     */
    updatedValues: any;
}
/**
 * A method that will handle the ASPxClientGridView.BatchEditRowInserting event.
 * @param source The event source. This parameter identifies the card view object which raised the event.
 * @param e An ASPxClientGridViewBatchEditRowInsertingEventArgs object that contains event data.
 */
interface ASPxClientGridViewBatchEditRowInsertingEventHandler<Sender> { (source: Sender, e: ASPxClientGridViewBatchEditRowInsertingEventArgs): void; }
/**
 * Provides data for the ASPxClientGridView.BatchEditRowInserting event.
 */
declare class ASPxClientGridViewBatchEditRowInsertingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientGridViewBatchEditRowInsertingEventArgs class.
     * @param visibleIndex An integer value that specifies the processed row's visible index.
     */
    constructor(visibleIndex: number);
    /**
     * Gets the processed row's visible index.
     */
    visibleIndex: number;
}
/**
 * A method that will handle the ASPxClientGridView.BatchEditRowDeleting event.
 * @param source The event source. This parameter identifies the grid view object which raised the event.
 * @param e An ASPxClientGridViewBatchEditRowDeletingEventArgs object that contains event data.
 */
interface ASPxClientGridViewBatchEditRowDeletingEventHandler<Sender> { (source: Sender, e: ASPxClientGridViewBatchEditRowDeletingEventArgs): void; }
/**
 * Provides data for the ASPxClientGridView.BatchEditRowDeleting event.
 */
declare class ASPxClientGridViewBatchEditRowDeletingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientGridViewBatchEditRowDeletingEventArgs class.
     * @param visibleIndex An integer value that specifies the row's visible index.
     * @param rowValues An object that provides row values.
     * @param key An object that is the row's key.
     */
    constructor(visibleIndex: number, rowValues: any, key: any);
    /**
     * Gets the processed row's visible index.
     */
    visibleIndex: number;
    /**
     * Gets a hashtable that maintains information about deleted cells.
     */
    rowValues: any;
    /**
     * Gets the row's key.
     */
    key: any;
}
/**
 * A method that will handle the ASPxClientGridView.BatchEditRowRecovering event.
 * @param source The event source.
 * @param e An ASPxClientGridViewBatchEditRowRecoveringEventArgs object that contains event data.
 */
interface ASPxClientGridViewBatchEditRowRecoveringEventHandler<Sender> { (source: Sender, e: ASPxClientGridViewBatchEditRowRecoveringEventArgs): void; }
/**
 * Provides data for the ASPxClientGridView.BatchEditRowRecovering event.
 */
declare class ASPxClientGridViewBatchEditRowRecoveringEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientGridViewBatchEditRowRecoveringEventArgs class.
     * @param visibleIndex An integer value that specifies the row's visible index.
     * @param rowValues An object that provides row values.
     * @param key An object that is the row's key.
     */
    constructor(visibleIndex: number, rowValues: any, key: any);
    /**
     * Gets the processed row's visible index.
     */
    visibleIndex: number;
    /**
     * Gets a hashtable that maintains information about recovered cells.
     */
    rowValues: any;
    /**
     * Gets the row's key.
     */
    key: any;
}
/**
 * A method that will handle the ASPxClientGridView.FocusedCellChanging event.
 * @param source The event source.
 * @param e An ASPxClientGridViewFocusedCellChangingEventArgs object that contains event data.
 */
interface ASPxClientGridViewFocusedCellChangingEventHandler<Sender> { (source: Sender, e: ASPxClientGridViewFocusedCellChangingEventArgs): void; }
/**
 * Provides data for the ASPxClientGridView.FocusedCellChanging event.
 */
declare class ASPxClientGridViewFocusedCellChangingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientGridViewFocusedCellChangingEventArgs class with specified settings.
     * @param cellInfo A ASPxClientGridViewCellInfo object providing information about the focused cell.
     */
    constructor(cellInfo: ASPxClientGridViewCellInfo);
    /**
     * Provides information on a cell currently being focused.
     */
    cellInfo: ASPxClientGridViewCellInfo;
}
/**
 * Contains information on a grid cell.
 */
declare class ASPxClientGridViewCellInfo {
    /**
     * Gets the visible index of the row that contains the cell currently being processed.
     */
    rowVisibleIndex: number;
    /**
     * Gets the data column that contains the cell currently being processed.
     */
    column: ASPxClientGridViewColumn;
    /**
     * Gets the row's key.
     */
    key: any;
}
/**
 * Provides members related to Batch Edit Mode
 */
declare class ASPxClientGridViewBatchEditApi {
    /**
     * Validate grid data contained in all rows when the grid operates in Batch Edit mode. true, if data in all rows passes validation; otherwise, false.
     * @param validateOnlyModified true, if only modified rows should be validated; otherwise, false.
     * @param validateOnCurrentPageOnly true, to validate rows that are located only on the current page; otherwise, false.
     */
    ValidateRows(validateOnlyModified?: boolean, validateOnCurrentPageOnly?: boolean): boolean;
    /**
     * Performs validation of grid data contained in the specified row when the grid operates in Batch Edit mode. true, if data in the specified row data passes validation; otherwise, false.
     * @param visibleIndex An integer value specifying the visible index of the validated row.
     */
    ValidateRow(visibleIndex: number): boolean;
    /**
     * Performs validation of grid data contained in the specified row when the grid operates in Batch Edit mode. true, if data in the specified row data passes validation; otherwise, false.
     * @param key A String value that identifies the row by its key value.
     */
    ValidateRowByKey(key: any): boolean;
    /**
     * Returns an array of row visible indices. An array of integer values that are the visible indices of grid rows.
     * @param includeDeleted true, to include visible indices of deleted rows to the returned array; otherwise, false.
     */
    GetRowVisibleIndices(includeDeleted: boolean): number[];
    /**
     * Returns an array of the deleted row visible indices.
     */
    GetDeletedRowIndices(): number[];
    /**
     * Returns an array of the inserted row visible indices.
     */
    GetInsertedRowIndices(): number[];
    /**
     * Returns an array of the updated rows visible indices.
     */
    GetUpdatedRowIndices(): number[];
    /**
     * Indicates if the row with specified visible index is deleted. true, if the row is deleted; otherwise, false.
     * @param visibleIndex An integer value that identifies the row by its visible index.
     */
    IsDeletedRow(visibleIndex: number): boolean;
    /**
     * Indicates if the row with specified key is deleted. true, if the row is deleted; otherwise, false.
     * @param key A String value that identifies the row by its key value.
     */
    IsDeletedRowByKey(key: any): boolean;
    /**
     * Indicates if the row with specified visible index is newly created. true, if the row is new; otherwise, false.
     * @param visibleIndex An integer value that identifies the row by its visible index.
     */
    IsNewRow(visibleIndex: number): boolean;
    /**
     * Adds a new row when ASPxGridView is in Batch Edit mode.
     */
    AddNewRow(): void;
    /**
     * Deletes the specified row when ASPxGridView is in Batch Edit.
     * @param visibleIndex An integer value that identifies the row index.
     */
    DeleteRow(visibleIndex: number): void;
    /**
     * Deletes a row with a specified key value when ASPxGridView is in Batch Edit mode.
     * @param key An object that uniquely identifies the row.
     */
    DeleteRowByKey(key: any): void;
    /**
     * Recovers the specified row when ASPxGridView is in Batch Edit mode.
     * @param visibleIndex An integer value that identifies the row index.
     */
    RecoverRow(visibleIndex: number): void;
    /**
     * Recovers a row with a specified key value when ASPxGridView is in Batch Edit mode.
     * @param key An object that uniquely identifies the row.
     */
    RecoverRowByKey(key: any): void;
    /**
     * Switches the grid to 'Preview Changes' mode.
     */
    ShowChangesPreview(): void;
    /**
     * Switches the grid from the 'Preview Changes' mode to edit mode.
     */
    HideChangesPreview(): void;
    /**
     * Returns a value that specifies whether the row is located on the current page. true, if the row is located on the current page; otherwise, false.
     * @param key A String value that identifies the row by its key value.
     */
    IsCurrentPageRow(key: any): boolean;
    /**
     * Programmatically moves the focus to the previous cell in the row.
     */
    MoveFocusBackward(): boolean;
    /**
     * Programmatically moves the focus to the next cell in the row.
     */
    MoveFocusForward(): boolean;
    /**
     * Sets the value of the specified cell.
     * @param visibleIndex An integer zero-based index that identifies the row containing the processed cell.
     * @param columnFieldNameOrId A string value that specifies the field name or unique identifier (the column's WebColumnBase.Name property value) of a column containing the processed cell.
     * @param value An object that contains the new cell value.
     * @param displayText A string value that specifies the cell display text.
     * @param cancelCellHighlighting true to cancel highlighting of the modified cell, false to highlight the modified cell.
     */
    SetCellValue(visibleIndex: number, columnFieldNameOrId: string, value: any, displayText?: string, cancelCellHighlighting?: boolean): void;
    /**
     * Sets the value of the specified cell.
     * @param key A String value that identifies the row by its key value.
     * @param columnFieldNameOrId A string value that specifies the field name or unique identifier (the column's WebColumnBase.Name property value) of a column containing the processed cell.
     * @param value An object that contains the new cell value.
     * @param displayText A string value that specifies the cell display text.
     * @param cancelCellHighlighting true to cancel highlighting of the modified cell, false to highlight the modified cell.
     */
    SetCellValueByKey(key: any, columnFieldNameOrId: string, value: any, displayText?: string, cancelCellHighlighting?: boolean): void;
    /**
     * Gets the value of the specified cell. An object containing the specified cell's value.
     * @param visibleIndex A zero-based integer value that specifies a visible index of a row containing the processed cell.
     * @param columnFieldNameOrId A string value that specifies the field name or unique identifier (the column's WebColumnBase.Name property value) of a column containing the processed cell.
     * @param initial true, to return the initial (server) value; false, to return a value currently contained on the client side (modified value).
     */
    GetCellValue(visibleIndex: number, columnFieldNameOrId: string, initial?: boolean): any;
    /**
     * Gets the value of the specified cell. An object containing the specified cell's value.
     * @param key A String value that identifies the row by its key value.
     * @param columnFieldNameOrId A string value that specifies the field name or unique identifier (the column's WebColumnBase.Name property value) of a column containing the processed cell.
     * @param initial true, to return the initial (server) value; false, to return a value currently contained on the client side (modified value).
     */
    GetCellValueByKey(key: any, columnFieldNameOrId: string, initial?: boolean): any;
    /**
     * Gets a container holding a data cell content. A HTML container element that contains the data cell's content.
     * @param visibleIndex An integer value that is the visible index.
     * @param columnFieldNameOrId A string value that is the column's Field Name or ID.
     */
    GetCellTextContainer(visibleIndex: number, columnFieldNameOrId: string): any;
    /**
     * Gets a container holding a data cell content. An object that is the HTML container element that contains the data cell's content.
     * @param key A String value that identifies the row by its key value.
     * @param columnFieldNameOrId A string value that is the column's Field Name or ID.
     */
    GetCellTextContainerByKey(key: any, columnFieldNameOrId: string): any;
    /**
     * Gets information about the cell currently being edited.
     */
    GetEditCellInfo(): ASPxClientGridViewCellInfo;
    /**
     * Returns an object that stores unsaved changes.
     */
    GetUnsavedChanges(): any;
    /**
     * Returns a value that indicates whether the specified data cell's data has been changed. true, if the cell has changed data; otherwise, false.
     * @param visibleIndex An integer value that specifies the visible index of a row.
     * @param columnFieldNameOrId A string value that identifies the column by the name of the data source field to which the column is bound, or by the column's name.
     */
    HasChanges(visibleIndex?: number, columnFieldNameOrId?: string): boolean;
    /**
     * Returns a value that indicates whether the specified data cell's data has been changed. true, if the cell has changed data; otherwise, false.
     * @param key A String value that identifies the row by its key value.
     * @param columnFieldNameOrId A string value that identifies the column by the name of the data source field to which the column is bound, or by the column's name.
     */
    HasChangesByKey(key: any, columnFieldNameOrId?: string): boolean;
    /**
     * Resets changes in the specified cell.
     * @param visibleIndex An integer value that specifies the visible index of a row containing the processed cell.
     * @param columnIndex An integer value that specifies the field name or unique identifier (the column's WebColumnBase.Name property value) of a column containing the processed cell.
     */
    ResetChanges(visibleIndex: number, columnIndex?: number): void;
    /**
     * Resets changes in the specified cell.
     * @param key A String value that identifies the row by its key value.
     * @param columnIndex A zero-based index that identifies the column in the column collection (the column's CollectionItem.Index property value).
     */
    ResetChangesByKey(key: any, columnIndex?: number): void;
    /**
     * Switches the specified cell to edit mode.
     * @param visibleIndex A zero-based integer value that specifies the visible index of a row containing the processed cell.
     * @param columnIndex A zero-based integer value that identifies the column which contains the processed cell in the column collection.
     */
    StartEdit(visibleIndex: number, columnIndex: number): void;
    /**
     * Switches the specified cell to edit mode.
     * @param key Identifies the cell by its key value.
     * @param columnIndex Identifies the column that contains the processed cell in the column collection.
     */
    StartEditByKey(key: any, columnIndex: number): void;
    /**
     * Ends cell or row editing.
     */
    EndEdit(): void;
    /**
     * Provides the text displayed within the cell according to the specified display format rule. A string value representing the cell's displayed text.
     * @param columnFieldNameOrId A string value representing the column's unique identifier or field name.
     * @param value An object representing a value.
     */
    GetColumnDisplayText(columnFieldNameOrId: string, value: any): string;
    /**
     * Returns the total summary value. The total summary value.
     * @param summaryItemIndex The total summary's index or field name.
     */
    GetTotalSummaryValue(summaryItemIndex: number | string): number;
    /**
     * Returns the group summery value. The group summary value.
     * @param groupRowVisibleIndex The group row's visible index.
     * @param summaryItemIndex The summary's index or field name.
     */
    GetGroupSummaryValue(groupRowVisibleIndex: number, summaryItemIndex: number | string): number;
}
/**
 * Lists values that specify the document formats available for export from the grid.
 */
declare class ASPxClientGridViewExportFormat extends ASPxClientGridExportFormat {
}
/**
 * A client-side equivalent of the ASPxVerticalGrid object.
 */
declare class ASPxClientVerticalGrid extends ASPxClientGridBase {
    /**
     * Provides access to the batch editing client API.
     */
    batchEditApi: ASPxClientVerticalGridBatchEditApi;
    /**
     * Occurs when a custom command button has been clicked.
     */
    CustomButtonClick: ASPxClientEvent<ASPxClientVerticalGridCustomButtonEventHandler<ASPxClientVerticalGrid>>;
    /**
     * Fires after the selection has been changed.
     */
    SelectionChanged: ASPxClientEvent<ASPxClientVerticalGridSelectionEventHandler<ASPxClientVerticalGrid>>;
    /**
     * Occurs when a grid switches to batch edit mode.
     */
    BatchEditStartEditing: ASPxClientEvent<ASPxClientVerticalGridBatchEditStartEditingEventHandler<ASPxClientVerticalGrid>>;
    /**
     * Occurs when a grid leaves the batch edit mode.
     */
    BatchEditEndEditing: ASPxClientEvent<ASPxClientVerticalGridBatchEditEndEditingEventHandler<ASPxClientVerticalGrid>>;
    /**
     * Enables you to prevent a batch edit confirmation message from being displayed.
     */
    BatchEditConfirmShowing: ASPxClientEvent<ASPxClientVerticalGridBatchEditConfirmShowingEventHandler<ASPxClientVerticalGrid>>;
    /**
     * Enables you to provide navigation for editors contained in a templated cell in Batch Edit mode.
     */
    BatchEditTemplateCellFocused: ASPxClientEvent<ASPxClientVerticalGridBatchEditTemplateCellFocusedEventHandler<ASPxClientVerticalGrid>>;
    /**
     * Occurs on the client side before data changes are saved in batch edit mode.
     */
    BatchEditChangesSaving: ASPxClientEvent<ASPxClientVerticalGridBatchEditChangesSavingEventHandler<ASPxClientVerticalGrid>>;
    /**
     * Occurs on the client side before data changes are canceled in batch edit mode.
     */
    BatchEditChangesCanceling: ASPxClientEvent<ASPxClientVerticalGridBatchEditChangesCancelingEventHandler<ASPxClientVerticalGrid>>;
    /**
     * Occurs on the client side before a record is inserted in batch edit mode.
     */
    BatchEditRecordInserting: ASPxClientEvent<ASPxClientVerticalGridBatchEditRecordInsertingEventHandler<ASPxClientVerticalGrid>>;
    /**
     * Occurs on the client side before a record is deleted in batch edit mode.
     */
    BatchEditRecordDeleting: ASPxClientEvent<ASPxClientVerticalGridBatchEditRecordDeletingEventHandler<ASPxClientVerticalGrid>>;
    /**
     * Occurs on the client side before a record is deleted in batch edit mode.
     */
    BatchEditRecordRecovering: ASPxClientEvent<ASPxClientVerticalGridBatchEditRecordRecoveringEventHandler<ASPxClientVerticalGrid>>;
    /**
     * Enables you to specify whether record data is valid and provide an error text.
     */
    BatchEditRecordValidating: ASPxClientEvent<ASPxClientVerticalGridBatchEditRecordValidatingEventHandler<ASPxClientVerticalGrid>>;
    /**
     * Occurs on the client side when the focused cell is about to be changed.
     */
    FocusedCellChanging: ASPxClientEvent<ASPxClientVerticalGridFocusedCellChangingEventHandler<ASPxClientVerticalGrid>>;
    /**
     * Enables you to prevent rows from being sorted.
     */
    RowSorting: ASPxClientEvent<ASPxClientVerticalGridRowCancelEventHandler<ASPxClientVerticalGrid>>;
    /**
     * Fires on the client side before the expansion state of a row is changed by end-user interaction.
     */
    RowExpandedChanging: ASPxClientEvent<ASPxClientVerticalGridRowExpandingEventHandler<ASPxClientVerticalGrid>>;
    /**
     * Fires on the client side after a row's expansion state has been changed by end-user interaction.
     */
    RowExpandedChanged: ASPxClientEvent<ASPxClientVerticalGridRowExpandedEventHandler<ASPxClientVerticalGrid>>;
    /**
     * Fires on the client when a record is clicked.
     */
    RecordClick: ASPxClientEvent<ASPxClientVerticalGridRecordClickEventHandler<ASPxClientVerticalGrid>>;
    /**
     * Fires on the client when a record is double clicked.
     */
    RecordDblClick: ASPxClientEvent<ASPxClientVerticalGridRecordClickEventHandler<ASPxClientVerticalGrid>>;
    /**
     * Sorts data by the specified data row's values, and places the row to the specified position among the sorted rows.
     * @param sortOrder A string value that specifies the row's sort order ('ASC', 'DSC' or 'NONE').
     * @param reset true to clear any previous sorting; otherwise, false.
     * @param sortIndex An integer value that specifies the zero-based row's index among the sorted rows. &#0045;1 if data is not sorted by this row.
     */
    SortBy(row: ASPxClientVerticalGridRow | number | string, sortOrder?: string, reset?: boolean, sortIndex?: number): void;
    /**
     * Returns the key value of the specified data row (record in the vertical grid). A string representing the specified data row's key value. If the index passed using the visibleIndex parameter is wrong or the ASPxGridBase.KeyFieldName property is not set, null is returned.
     * @param visibleIndex An integer value that specifies the record's visible index.
     */
    GetRecordKey(visibleIndex: number): string;
    /**
     * Adds a new record.
     */
    AddNewRecord(): void;
    /**
     * Deletes the specified record.
     * @param visibleIndex An integer value that identifies the record.
     */
    DeleteRecord(visibleIndex: number): void;
    /**
     * Deletes a record with the specified key value.
     * @param key An object that uniquely identifies the record.
     */
    DeleteRecordByKey(key: any): void;
    /**
     * Selects or deselects the specified records within the grid.
     * @param visibleIndices An array of zero-based indices that identify records within the grid.
     * @param selected true to select the specified records; false to deselect the records.
     */
    SelectRecords(visibleIndices?: number[] | number, selected?: boolean): void;
    /**
     * Selects or deselects the specified records displayed within the grid.
     * @param keys An array of objects that uniquely identify the records.
     * @param selected true to select the specified records; false to deselect the records.
     */
    SelectRecordsByKey(keys: any[] | any, selected?: boolean): void;
    /**
     * Deselects the specified records (if selected) within the grid.
     * @param visibleIndices An array of zero-based indices that identify records within the grid.
     */
    UnselectRecords(visibleIndices?: number[] | number): void;
    /**
     * Deselects the specified records displayed within the grid.
     * @param keys An array of objects that uniquely identify the records.
     */
    UnselectRecordsByKey(keys: any[] | any): void;
    /**
     * Deselects all grid records that match the filter criteria currently applied to the grid.
     */
    UnselectFilteredRecords(): void;
    /**
     * Selects or deselects the specified record displayed on the current page.
     * @param visibleIndex A zero-based integer value that specifies the record's visible index.
     * @param selected true to select the specified record; false to deselect the record.
     */
    SelectRecordOnPage(visibleIndex: number, selected?: boolean): void;
    /**
     * Deselects the specified record (if selected) displayed on the current page.
     * @param visibleIndex A zero-based integer value that specifies the record's visible index.
     */
    UnselectRecordOnPage(visibleIndex: number): void;
    /**
     * Allows you to select or deselect all records displayed on the current page based on the parameter passed.
     * @param selected true to select all unselected records displayed on the current page; false to deselect all selected records on the page.
     */
    SelectAllRecordsOnPage(selected?: boolean): void;
    /**
     * Deselects all selected records displayed on the current page.
     */
    UnselectAllRecordsOnPage(): void;
    /**
     * Returns the number of selected records.
     */
    GetSelectedRecordCount(): number;
    /**
     * Indicates whether or not the specified record is selected within the current page. true if the specified record is selected within the current page; otherwise, false.
     * @param visibleIndex An integer value that identifies the record by its visible index.
     */
    IsRecordSelectedOnPage(visibleIndex: number): boolean;
    /**
     * Exports a grid data to a file in the specified format.
     * @param format An ASPxClientVerticalGridExportFormat object specifying the export format.
     */
    ExportTo(format: ASPxClientVerticalGridExportFormat): void;
    /**
     * Returns the values of the specified data source fields within the specified record.
     * @param visibleIndex An integer value that identifies the record.
     * @param fieldNames The names of data source fields separated using a semicolon, whose values within the specified record are returned.
     * @param onCallback An ASPxClientVerticalGridValuesCallback object that represents the JavaScript function which receives the list of record values as a parameter.
     */
    GetRecordValues(visibleIndex: number, fieldNames: string, onCallback: ASPxClientVerticalGridValuesCallback): void;
    /**
     * Returns the record values displayed within the current page.
     * @param fieldNames The names of data source fields whose values are returned.
     * @param onCallback A ASPxClientVerticalGridValuesCallback object that represents the JavaScript function which receives the list of record values as a parameter.
     */
    GetPageRecordValues(fieldNames: string, onCallback: ASPxClientVerticalGridValuesCallback): void;
    /**
     * Returns the number of records actually displayed on the active page.
     */
    GetVisibleRecordsOnPage(): number;
    /**
     * Returns the number of rows within the client vertical grid.
     */
    GetRowCount(): number;
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientVerticalGrid>>;
    /**
     * Occurs on the client after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientVerticalGrid>>;
    /**
     * Fires on the client if any unhandled server error occurs during server-side processing of a callback sent by the ASPxClientVerticalGrid.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientVerticalGrid>>;
    /**
     * Applies the specified search panel filter criterion to grid data.
     * @param value A string value that specifies the filter criterion.
     */
    ApplySearchPanelFilter(value: string): void;
    /**
     * Applies the specified filter expression to the ASPxVerticalGrid.
     * @param filterExpression A string value that specifies the filter expression.
     */
    ApplyFilter(filterExpression: string): void;
    /**
     * Clears the filter expression applied to a client vertical grid.
     */
    ClearFilter(): void;
    /**
     * Sets input focus to the grid.
     */
    Focus(): void;
    /**
     * Sends a callback to the server and generates the server-side event, passing the specified argument to it.
     * @param args A string value that represents any information that needs to be sent to the server-side event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(args: string, onSuccess?: (arg: string) => void): void;
    /**
     * Selects the specified page.
     * @param pageIndex An integer value that specifies the active page's index.
     */
    GotoPage(pageIndex: number): void;
    /**
     * Gets the index of the page currently being selected.
     */
    GetPageIndex(): number;
    /**
     * Gets the number of pages to which the grid's data is divided.
     */
    GetPageCount(): number;
    /**
     * Activates the next page.
     */
    NextPage(): void;
    /**
     * Activates the previous page.
     */
    PrevPage(): void;
    /**
     * Returns the index of the first record displayed within the vertical grid's active page.
     */
    GetTopVisibleIndex(): number;
    /**
     * Saves all the changes made and switches the grid to browse mode.
     */
    UpdateEdit(): void;
    /**
     * Cancels all the changes made and switches the ASPxVerticalGrid to browse mode.
     */
    CancelEdit(): void;
    /**
     * Updates data displayed within the grid.
     */
    Refresh(): void;
    /**
     * Returns the record values displayed within all selected records.
     * @param fieldNames The names of data source fields separated by a semicolon, whose values within the selected records are returned.
     * @param onCallback A ASPxClientVerticalGridValuesCallback object that represents the JavaScript function which receives the list of record values as a parameter.
     */
    GetSelectedFieldValues(fieldNames: string, onCallback: ASPxClientVerticalGridValuesCallback): void;
    /**
     * Returns key values of selected records displayed within the current page.
     */
    GetSelectedKeysOnPage(): any[];
    /**
     * Sends a callback to the server and generates the server-side ASPxVerticalGrid.CustomDataCallback event.
     * @param args A string value that is any information that needs to be sent to the server-side ASPxVerticalGrid.CustomDataCallback event.
     * @param onCallback A ASPxClientVerticalGridValuesCallback object that is the JavaScript function which receives the information on the client side.
     */
    GetValuesOnCustomCallback(args: string, onCallback: ASPxClientVerticalGridValuesCallback): void;
    /**
     * Returns the editor used to edit the specified row's values. An ASPxClientEdit object that is the specified row's editor.
     * @param row An ASPxClientVerticalGridRowobject that specifies the required row within the client grid.
     */
    GetEditor(row: ASPxClientVerticalGridRow | number | string): ASPxClientEdit;
    /**
     * Displays the Filter Control.
     */
    ShowFilterControl(): void;
    /**
     * Hides the Filter Control.
     */
    CloseFilterControl(): void;
    /**
     * Enables or disables the current filter.
     * @param isFilterEnabled true to enable the current filter; otherwise, false.
     */
    SetFilterEnabled(isFilterEnabled: boolean): void;
    /**
     * Specifies a custom editor for the search panel on the client side.
     * @param editor An ASPxClientEdit object representing a custom editor.
     */
    SetSearchPanelCustomEditor(editor: ASPxClientEdit): void;
    /**
     * Returns the client row that resides at the specified position within the row collection. An ASPxClientVerticalGridRow object that represents the client row.
     * @param rowIndex A zero-based index that identifies the row within the row collection (the row's CollectionItem.Index property value).
     */
    GetRow(rowIndex: number): ASPxClientVerticalGridRow;
    /**
     * Returns the row with the specified unique identifier. An ASPxClientVerticalGridRow object that represents the client row.
     * @param rowId A string value that specifies the row's unique identifier (the row's WebColumnBase.Name property value).
     */
    GetRowById(rowId: string): ASPxClientVerticalGridRow;
    /**
     * Returns the client row which is bound to the specified data source field. An ASPxClientVerticalGridRow object that represents the client row bound to the specified data source field.
     * @param rowFieldName A string value that specifies the name of the data source field to which the row is bound (the row's ASPxClientVerticalGridRow.fieldName property value).
     */
    GetRowByField(rowFieldName: string): ASPxClientVerticalGridRow;
    /**
     * Returns the current vertical scroll position of the grid's content.
     */
    GetVerticalScrollPosition(): number;
    /**
     * Returns the current horizontal scroll position of the grid's content.
     */
    GetHorizontalScrollPosition(): number;
    /**
     * Specifies the vertical scroll position for the grid's content.
     * @param position An integer value specifying the vertical scroll position.
     */
    SetVerticalScrollPosition(position: number): void;
    /**
     * Specifies the horizontal scroll position for the grid's content.
     * @param position An integer value specifying the horizontal scroll position.
     */
    SetHorizontalScrollPosition(position: number): void;
    /**
     * Gets the value that specifies whether the required row is expanded. true, if the row is expanded; otherwise, false.
     * @param row An ASPxClientVerticalGridRowobject that specifies the row.
     */
    GetRowExpanded(row: ASPxClientVerticalGridRow | number | string): boolean;
    /**
     * Sets a value indicating whether the row is expanded.
     * @param value true, to expand the row; otherwise, false.
     */
    SetRowExpanded(row: ASPxClientVerticalGridRow | number | string, value: boolean): void;
    /**
     * Sets the offset from the container's top border to fixed rows while scrolling the page.
     * @param offset The top offset.
     */
    SetFixedRowsTopOffset(offset: number): void;
    /**
     * Converts the specified object to the ASPxClientVerticalGrid type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientVerticalGrid;
}
/**
 * A client grid row.
 */
declare class ASPxClientVerticalGridRow extends ASPxClientGridColumnBase {
    /**
     * Gets the name that uniquely identifies the row.
     */
    name: string;
    /**
     * Gets the row's position within the collection.
     */
    index: number;
    /**
     * Gets the name of the database field assigned to the current row.
     */
    fieldName: string;
    /**
     * Gets whether the row is visible.
     */
    visible: boolean;
}
/**
 * Represents a JavaScript function which receives the list of record values when the client ASPxClientVerticalGrid.GetRecordValues, ASPxVerticalGrid.GetCurrentPageRecordValues or ASPxClientVerticalGrid.GetSelectedFieldValues method is called.
 * @param result An object that represents the list of record values received from the server.
 */
interface ASPxClientVerticalGridValuesCallback { (result: any): void; }
/**
 * A method that will handle the cancelable events of a client ASPxVerticalGrid row.
 * @param source The event source.
 * @param e An ASPxClientVerticalGridRowCancelEventArgs object that contains event data.
 */
interface ASPxClientVerticalGridRowCancelEventHandler<Sender> { (source: Sender, e: ASPxClientVerticalGridRowCancelEventArgs): void; }
/**
 * Provides data for the cancelable events of a client ASPxVerticalGrid row.
 */
declare class ASPxClientVerticalGridRowCancelEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientVerticalGridRowCancelEventArgs class.
     * @param row An ASPxClientVerticalGridRowCancelEventArgs object that represents the processed row.
     */
    constructor(row: ASPxClientVerticalGridRow);
    /**
     * Gets the processed client row.
     */
    row: ASPxClientVerticalGridRow;
}
/**
 * A method that will handle the ASPxClientVerticalGrid.RecordClick event.
 * @param source The event source. This parameter identifies the ASPxClientVerticalGrid object that raised the event.
 * @param e An ASPxClientVerticalGridRecordClickEventArgs object that contains event data.
 */
interface ASPxClientVerticalGridRecordClickEventHandler<Sender> { (source: Sender, e: ASPxClientVerticalGridRecordClickEventArgs): void; }
/**
 * Provides data for the ASPxClientVerticalGrid.RecordClick event.
 */
declare class ASPxClientVerticalGridRecordClickEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientVerticalGridRecordClickEventArgs class.
     * @param visibleIndex A zero-based integer index that identifies the clicked record.
     * @param htmlEvent An object that contains parameters associated with the event. This value is assigned to the ASPxClientVerticalGridRecordClickEventArgs.htmlEvent property.
     */
    constructor(visibleIndex: number, htmlEvent: any);
    /**
     * Gets the processed record's visible index.
     */
    visibleIndex: number;
    /**
     * Provides access to the parameters associated with the ASPxClientVerticalGrid.RecordClick event.
     */
    htmlEvent: any;
}
/**
 * A method that will handle the ASPxClientVerticalGrid.CustomButtonClick event.
 * @param source The event source.
This parameter identifies the ASPxClientVerticalGrid object that raised the event.
 * @param e An ASPxClientVerticalGridCustomButtonEventArgs object that contains event data.
 */
interface ASPxClientVerticalGridCustomButtonEventHandler<Sender> { (source: Sender, e: ASPxClientVerticalGridCustomButtonEventArgs): void; }
/**
 * Provides data for the ASPxClientVerticalGrid.CustomButtonClick event.
 */
declare class ASPxClientVerticalGridCustomButtonEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Initializes a new instance of the ASPxClientVerticalGridCustomButtonEventArgs class.
     * @param visibleIndex An integer value that identifies the record whose custom button has been clicked. This value is assigned to the ASPxClientVerticalGridCustomButtonEventArgs.visibleIndex property.
     * @param buttonID An integer value that identifies the clicked custom button. This value is assigned to the ASPxClientVerticalGridCustomButtonEventArgs.buttonID property.
     */
    constructor(visibleIndex: number, buttonID: string);
    /**
     * Gets the value which identifies the record whose custom button has been clicked.
     */
    visibleIndex: number;
    /**
     * Gets the value which identifies the custom button.
     */
    buttonID: string;
}
/**
 * A method that will handle the ASPxClientVerticalGrid.SelectionChanged event.
 * @param source The event source.
 * @param e An ASPxClientVerticalGridSelectionEventArgs object that contains event data.
 */
interface ASPxClientVerticalGridSelectionEventHandler<Sender> { (source: Sender, e: ASPxClientVerticalGridSelectionEventArgs): void; }
/**
 * Provides data for the ASPxClientVerticalGrid.SelectionChanged event.
 */
declare class ASPxClientVerticalGridSelectionEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Initializes a new instance of the ASPxClientVerticalGridSelectionEventArgs class.
     * @param visibleIndex An integer value that specifies the visible index of the record whose selected state has been changed. This value is assigned to the ASPxClientVerticalGridSelectionEventArgs.visibleIndex property.
     */
    constructor(visibleIndex: number);
    /**
     * Gets the visible index of the record whose selected state has been changed.
     */
    visibleIndex: number;
    /**
     * Gets whether the record has been selected.
     */
    isSelected: boolean;
    /**
     * Gets whether all records displayed within a page have been selected or unselected.
     */
    isAllRecordsOnPage: boolean;
    /**
     * Gets whether a selection has been changed on the server.
     */
    isChangedOnServer: boolean;
}
/**
 * A method that will handle the ASPxClientVerticalGrid.RowExpandedChanged event.
 * @param source The event source.
 * @param e An ASPxClientVerticalGridRowExpandedEventArgs object that contains event data.
 */
interface ASPxClientVerticalGridRowExpandedEventHandler<Sender> { (source: Sender, e: ASPxClientVerticalGridRowExpandedEventArgs): void; }
/**
 * Provides data for the ASPxClientVerticalGrid.RowExpandedChanged event.
 */
declare class ASPxClientVerticalGridRowExpandedEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientVerticalGridRowExpandedEventArgs class with specified settings.
     * @param row A ASPxClientVerticalGridRow object that uniquely identifies the expanded row. This value is assigned to the ASPxClientVerticalGridRowExpandedEventArgs.row property.
     */
    constructor(row: ASPxClientVerticalGridRow);
    /**
     * Gets the expanded row.
     */
    row: ASPxClientVerticalGridRow;
}
/**
 * A method that will handle the ASPxClientVerticalGrid.RowExpandedChanging event.
 * @param source The event source.
 * @param e An ASPxClientVerticalGridRowExpandedEventArgs object that contains event data.
 */
interface ASPxClientVerticalGridRowExpandingEventHandler<Sender> { (source: Sender, e: ASPxClientVerticalGridRowExpandingEventArgs): void; }
/**
 * Provides data for the ASPxClientVerticalGrid.RowExpandedChanging event.
 */
declare class ASPxClientVerticalGridRowExpandingEventArgs extends ASPxClientVerticalGridRowExpandedEventArgs {
    /**
     * Initializes a new instance of the ASPxClientVerticalGridRowExpandingEventArgs class with the specified row.
     * @param row An ASPxClientVerticalGridRowobject that represents the row to expand.
     */
    constructor(row: ASPxClientVerticalGridRow);
    /**
     * Gets or sets a value indicating whether the action which raised the event should be canceled.
     */
    cancel: boolean;
}
/**
 * A method that will handle the ASPxClientVerticalGrid.BatchEditStartEditing event.
 * @param source The event source.
 * @param e An ASPxClientVerticalGridBatchEditStartEditingEventArgs object that contains event data.
 */
interface ASPxClientVerticalGridBatchEditStartEditingEventHandler<Sender> { (source: Sender, e: ASPxClientVerticalGridBatchEditStartEditingEventArgs): void; }
/**
 * Provides data for the ASPxClientVerticalGrid.BatchEditStartEditing event.
 */
declare class ASPxClientVerticalGridBatchEditStartEditingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientVerticalGridBatchEditStartEditingEventArgs class with the specified settings.
     * @param visibleIndex An integer value that specifies the visible index of the record. This value is assigned to the ASPxClientVerticalGridBatchEditRecordValidatingEventArgs.visibleIndex property.
     * @param focusedRow An ASPxClientVerticalGridRow object that is the focused grid row. This value is assigned to the ASPxClientVerticalGridBatchEditStartEditingEventArgs.focusedRow property.
     * @param recordValues A hashtable that stores information about editable cells. This value is assigned to the ASPxClientVerticalGridBatchEditStartEditingEventArgs.recordValues property.
     */
    constructor(visibleIndex: number, focusedRow: ASPxClientVerticalGridRow, recordValues: any);
    /**
     * Gets the visible index of the record whose cells are about to be edited.
     */
    visibleIndex: number;
    /**
     * Gets the grid row that owns a cell that is about to be edited.
     */
    focusedRow: ASPxClientVerticalGridRow;
    /**
     * Gets a hashtable that maintains information about editable cells.
     */
    recordValues: any;
}
/**
 * A method that will handle the ASPxClientVerticalGrid.BatchEditEndEditing event.
 * @param source The event source.
 * @param e An ASPxClientVerticalGridBatchEditEndEditingEventArgs object that contains event data.
 */
interface ASPxClientVerticalGridBatchEditEndEditingEventHandler<Sender> { (source: Sender, e: ASPxClientVerticalGridBatchEditEndEditingEventArgs): void; }
/**
 * Provides data for the ASPxClientVerticalGrid.BatchEditEndEditing event.
 */
declare class ASPxClientVerticalGridBatchEditEndEditingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientVerticalGridBatchEditEndEditingEventArgs class with the specified settings.
     * @param visibleIndex An integer value that specifies the visible index of the record. This value is assigned to the ASPxClientVerticalGridBatchEditEndEditingEventArgs.visibleIndex property.
     * @param recordValues A hashtable that stores information about editable cells. This value is assigned to the ASPxClientVerticalGridBatchEditEndEditingEventArgs.recordValues property.
     */
    constructor(visibleIndex: number, recordValues: any);
    /**
     * Gets the visible index of the record whose cells have been edited.
     */
    visibleIndex: number;
    /**
     * Gets a hashtable that maintains information about editable cells.
     */
    recordValues: any;
}
/**
 * A method that will handle the ASPxClientVerticalGrid.BatchEditRecordValidating event.
 * @param source The event source.
 * @param e An ASPxClientVerticalGridBatchEditRecordValidatingEventArgs object that contains event data.
 */
interface ASPxClientVerticalGridBatchEditRecordValidatingEventHandler<Sender> { (source: Sender, e: ASPxClientVerticalGridBatchEditRecordValidatingEventArgs): void; }
/**
 * Provides data for the ASPxClientVerticalGrid.BatchEditRecordValidating event.
 */
declare class ASPxClientVerticalGridBatchEditRecordValidatingEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientVerticalGridBatchEditRecordValidatingEventArgs class.
     * @param visibleIndex An integer value that specifies the processed record's visible index.
     * @param validationInfo An object containing validation information.
     */
    constructor(visibleIndex: number, validationInfo: any);
    /**
     * Gets the processed record's visible index.
     */
    visibleIndex: number;
    /**
     * Provides validation information on the record currently being validated.
     */
    validationInfo: any;
}
/**
 * A method that will handle the ASPxClientVerticalGrid.BatchEditConfirmShowing client event.
 * @param source The event source.
 * @param e An ASPxClientVerticalGridBatchEditConfirmShowingEventArgs object that contains event data.
 */
interface ASPxClientVerticalGridBatchEditConfirmShowingEventHandler<Sender> { (source: Sender, e: ASPxClientVerticalGridBatchEditConfirmShowingEventArgs): void; }
/**
 * Provides data for the ASPxClientVerticalGrid.BatchEditConfirmShowing event.
 */
declare class ASPxClientVerticalGridBatchEditConfirmShowingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientVerticalGridBatchEditConfirmShowingEventArgs class.
     * @param requestTriggerID A string value specifying the client identifier of an object that initiates a request.
     */
    constructor(requestTriggerID: string);
    /**
     * Gets the client identifier of an object that initiates a send request.
     */
    requestTriggerID: string;
}
/**
 * A method that will handle the ASPxClientVerticalGrid.BatchEditTemplateCellFocused event.
 * @param source An object representing the event source. Identifies the button editor that raised the event.
 * @param e An ASPxClientVerticalGridBatchEditTemplateCellFocusedEventArgs object that contains event data.
 */
interface ASPxClientVerticalGridBatchEditTemplateCellFocusedEventHandler<Sender> { (source: Sender, e: ASPxClientVerticalGridBatchEditTemplateCellFocusedEventArgs): void; }
/**
 * Provides data for the ASPxClientVerticalGrid.BatchEditTemplateCellFocused event.
 */
declare class ASPxClientVerticalGridBatchEditTemplateCellFocusedEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientVerticalGridBatchEditTemplateCellFocusedEventArgs class with the specified row.
     * @param row An ASPxClientVerticalGridRow object that is the processed grid row. This value is assigned to the ASPxClientVerticalGridBatchEditTemplateCellFocusedEventArgs.row property.
     */
    constructor(row: ASPxClientVerticalGridRow);
    /**
     * Gets the currently processed row.
     */
    row: ASPxClientVerticalGridRow;
    /**
     * Gets or sets a value specifying whether the event was handled.
     */
    handled: boolean;
}
/**
 * A method that will handle the ASPxClientVerticalGrid.BatchEditChangesSaving event.
 * @param source The event source. This parameter identifies the vertical grid object which raised the event.
 * @param e An ASPxClientVerticalGridBatchEditChangesSavingEventArgs object that contains event data.
 */
interface ASPxClientVerticalGridBatchEditChangesSavingEventHandler<Sender> { (source: Sender, e: ASPxClientVerticalGridBatchEditChangesSavingEventArgs): void; }
/**
 * Provides data for the ASPxClientVerticalGrid.BatchEditChangesSaving event.
 */
declare class ASPxClientVerticalGridBatchEditChangesSavingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientVerticalGridBatchEditChangesSavingEventArgs class.
     * @param insertedValues A hashtable that stores information about inserted cells.
     * @param deletedValues A hashtable that stores information about deleted cells.
     * @param updatedValues A hashtable that stores information about updated cells.
     */
    constructor(insertedValues: any, deletedValues: any, updatedValues: any);
    /**
     * Gets a hashtable that maintains information about inserted cells.
     */
    insertedValues: any;
    /**
     * Gets a hashtable that maintains information about deleted cells.
     */
    deletedValues: any;
    /**
     * Gets a hashtable that maintains information about updated cells.
     */
    updatedValues: any;
}
/**
 * A method that will handle the ASPxClientVerticalGrid.BatchEditChangesCanceling event.
 * @param source The event source. This parameter identifies the vertical grid object which raised the event.
 * @param e An ASPxClientVerticalGridBatchEditChangesCancelingEventArgs object that contains event data.
 */
interface ASPxClientVerticalGridBatchEditChangesCancelingEventHandler<Sender> { (source: Sender, e: ASPxClientVerticalGridBatchEditChangesCancelingEventArgs): void; }
/**
 * Provides data for the ASPxClientVerticalGrid.BatchEditChangesCanceling event.
 */
declare class ASPxClientVerticalGridBatchEditChangesCancelingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientVerticalGridBatchEditChangesCancelingEventArgs class.
     * @param insertedValues A hashtable that stores information about inserted cells.
     * @param deletedValues A hashtable that stores information about deleted cells.
     * @param updatedValues A hashtable that stores information about updated cells.
     */
    constructor(insertedValues: any, deletedValues: any, updatedValues: any);
    /**
     * Gets a hashtable that maintains information about inserted cells.
     */
    insertedValues: any;
    /**
     * Gets a hashtable that maintains information about deleted cells.
     */
    deletedValues: any;
    /**
     * Gets a hashtable that maintains information about updated cells.
     */
    updatedValues: any;
}
/**
 * A method that will handle the ASPxClientVerticalGrid.BatchEditRecordInserting event.
 * @param source The event source. This parameter identifies the vertical grid object which raised the event.
 * @param e An ASPxClientVerticalGridBatchEditRecordInsertingEventArgs object that contains event data.
 */
interface ASPxClientVerticalGridBatchEditRecordInsertingEventHandler<Sender> { (source: Sender, e: ASPxClientVerticalGridBatchEditRecordInsertingEventArgs): void; }
/**
 * Provides data for the ASPxClientVerticalGrid.BatchEditRecordInserting event.
 */
declare class ASPxClientVerticalGridBatchEditRecordInsertingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientVerticalGridBatchEditRecordInsertingEventArgs class.
     * @param visibleIndex An integer value that specifies the processed record's visible index.
     */
    constructor(visibleIndex: number);
    /**
     * Gets the processed record's visible index.
     */
    visibleIndex: number;
}
/**
 * A method that will handle the ASPxClientVerticalGrid.BatchEditRecordDeleting event.
 * @param source The event source. This parameter identifies the vertical grid object which raised the event.
 * @param e An ASPxClientVerticalGridBatchEditRecordDeletingEventArgs object that contains event data.
 */
interface ASPxClientVerticalGridBatchEditRecordDeletingEventHandler<Sender> { (source: Sender, e: ASPxClientVerticalGridBatchEditRecordDeletingEventArgs): void; }
/**
 * Provides data for the ASPxClientVerticalGrid.BatchEditRecordDeleting event.
 */
declare class ASPxClientVerticalGridBatchEditRecordDeletingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientVerticalGridBatchEditRecordDeletingEventArgs class.
     * @param visibleIndex An integer value that specifies the processed record's visible index.
     * @param recordValues A hashtable that stores information about the processed record's cells.
     */
    constructor(visibleIndex: number, recordValues: any);
    /**
     * Gets the processed record's visible index.
     */
    visibleIndex: number;
    /**
     * Gets a hashtable that maintains information about deleted cells.
     */
    recordValues: any;
}
/**
 * A method that will handle the ASPxClientVerticalGrid.BatchEditRecordRecovering event.
 * @param source The event source.
 * @param e An ASPxClientVerticalGridBatchEditRecordRecoveringEventArgs object that contains event data.
 */
interface ASPxClientVerticalGridBatchEditRecordRecoveringEventHandler<Sender> { (source: Sender, e: ASPxClientVerticalGridBatchEditRecordRecoveringEventArgs): void; }
/**
 * Provides data for the ASPxClientVerticalGrid.BatchEditRecordRecovering event.
 */
declare class ASPxClientVerticalGridBatchEditRecordRecoveringEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientVerticalGridBatchEditRecordRecoveringEventArgs class.
     * @param visibleIndex An integer value specifying a record's visible index.
     * @param recordValues An object representing record values.
     */
    constructor(visibleIndex: number, recordValues: any);
    /**
     * Gets the processed record's visible index.
     */
    visibleIndex: number;
    /**
     * Gets a hashtable that maintains information about recovered cells.
     */
    recordValues: any;
}
/**
 * A method that will handle the ASPxClientVerticalGrid.FocusedCellChanging event.
 * @param source The event source.
 * @param e An ASPxClientVerticalGridFocusedCellChangingEventArgs object that contains event data.
 */
interface ASPxClientVerticalGridFocusedCellChangingEventHandler<Sender> { (source: Sender, e: ASPxClientVerticalGridFocusedCellChangingEventArgs): void; }
/**
 * Provides data for the ASPxClientVerticalGrid.FocusedCellChanging event.
 */
declare class ASPxClientVerticalGridFocusedCellChangingEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientVerticalGridFocusedCellChangingEventArgs class with specified settings.
     * @param cellInfo A ASPxClientVerticalGridCellInfo object providing information about the focused cell.
     */
    constructor(cellInfo: ASPxClientVerticalGridCellInfo);
    /**
     * Provides information on a cell currently being focused.
     */
    cellInfo: ASPxClientVerticalGridCellInfo;
}
/**
 * Contains information on a cell that is being edited.
 */
declare class ASPxClientVerticalGridCellInfo {
    /**
     * Gets the row that contains the cell currently being processed.
     */
    row: ASPxClientVerticalGridRow;
    /**
     * Gets the visible index of the record that contains the cell currently being processed.
     */
    recordVisibleIndex: number;
}
/**
 * Declares client constants that contain the names of the ASPxVerticalGrid's default commands executed through callbacks.
 */
declare class ASPxClientVerticalGridCallbackCommand {
    /**
     * Default value: "EXPANDROW"
     */
    static readonly ExpandRow: string;
}
/**
 * Provides members related to Batch Edit Mode
 */
declare class ASPxClientVerticalGridBatchEditApi {
    /**
     * Performs validation of grid data contained in all records when the grid operates in batch edit mode. true, if data in all records passes validation; otherwise, false.
     * @param validateOnlyModified true, if only modified records should be validated; otherwise, false.
     */
    ValidateRecords(validateOnlyModified?: boolean): boolean;
    /**
     * Performs validation of grid data contained in the specified record when the grid operates in batch edit mode. true, if data in the specified record passes validation; otherwise, false.
     * @param visibleIndex An integer value specifying the visible index of the validated record.
     */
    ValidateRecord(visibleIndex: number): boolean;
    /**
     * Returns an array of record visible indices. An array of integer values that are the visible indices of grid records.
     * @param includeDeleted true, to include visible indices of deleted records to the returned array; otherwise, false.
     */
    GetRecordVisibleIndices(includeDeleted: boolean): number[];
    /**
     * Returns an array of the deleted record visible indices.
     */
    GetDeletedRecordIndices(): number[];
    /**
     * Returns an array of the inserted record visible indices.
     */
    GetInsertedRecordIndices(): number[];
    /**
     * Returns an array of the updated records visible indices.
     */
    GetUpdatedRecordIndices(): number[];
    /**
     * Indicates if the record with the specified visible index is deleted. true, if the record is deleted; otherwise, false.
     * @param visibleIndex An integer value that identifies the record by its visible index.
     */
    IsDeletedRecord(visibleIndex: number): boolean;
    /**
     * Indicates if the record with specified visible index is newly created. true, if the record is new; otherwise, false.
     * @param visibleIndex An integer value that identifies the record by its visible index.
     */
    IsNewRecord(visibleIndex: number): boolean;
    /**
     * Adds a new record when ASPxVerticalGrid is in Batch Edit mode.
     */
    AddNewRecord(): void;
    /**
     * Deletes the specified record when ASPxVerticalGrid is in Batch Edit mode.
     * @param visibleIndex An integer value that identifies the record index.
     */
    DeleteRecord(visibleIndex: number): void;
    /**
     * Deletes a record with a specified key value when ASPxVerticalGrid is in Batch Edit mode.
     * @param key An object that uniquely identifies the record.
     */
    DeleteRecordByKey(key: any): void;
    /**
     * Recovers the specified record when ASPxVerticalGrid is in Batch Edit mode.
     * @param visibleIndex An integer value that identifies the record index.
     */
    RecoverRecord(visibleIndex: number): void;
    /**
     * Recovers a record with a specified key value when ASPxVerticalGrid is in Batch Edit mode.
     * @param key An object that uniquely identifies the record.
     */
    RecoverRecordByKey(key: any): void;
    /**
     * Programmatically moves the focus to the previous cell in the record.
     */
    MoveFocusBackward(): boolean;
    /**
     * Programmatically moves the focus to the next cell in the record.
     */
    MoveFocusForward(): boolean;
    /**
     * Sets the value of the specified cell.
     * @param visibleIndex An integer zero-based index that identifies the row containing the processed cell.
     * @param rowFieldNameOrId A string value that specifies the field name or unique identifier (the column's WebColumnBase.Name property value) of a column containing the processed cell.
     * @param value An object that contains the new cell value.
     * @param displayText A string value that specifies the cell display text.
     * @param cancelCellHighlighting true to cancel highlighting of the modified cell, false to highlight the modified cell.
     */
    SetCellValue(visibleIndex: number, rowFieldNameOrId: string, value: any, displayText?: string, cancelCellHighlighting?: boolean): void;
    /**
     * Gets the value of the specified cell. An object containing the specified cell's value.
     * @param visibleIndex A zero-based integer value that specifies a visible index of a record containing the processed cell.
     * @param rowFieldNameOrId A string value that specifies the field name or unique identifier (the row's WebColumnBase.Name property value) of a row containing the processed cell.
     * @param initial true, to return the initial (server) value; false, to return a value currently contained on the client side (modified value).
     */
    GetCellValue(visibleIndex: number, rowFieldNameOrId: string, initial?: boolean): any;
    /**
     * Gets a container holding the data cell content. An object that is the HTML container element that contains the data cell's content.
     * @param visibleIndex An integer value that is the visible index.
     * @param columnFieldNameOrId A string value that is the column's Field Name or ID.
     */
    GetCellTextContainer(visibleIndex: number, columnFieldNameOrId: string): any;
    /**
     * Gets information about the cell currently being edited.
     */
    GetEditCellInfo(): ASPxClientVerticalGridCellInfo;
    /**
     * Returns an object that stores unsaved changes.
     */
    GetUnsavedChanges(): any;
    /**
     * Returns a value that indicates whether the specified data cell's data has been changed. true, if the cell has changed data; otherwise, false.
     * @param visibleIndex An integer value that specifies the visible index of a record.
     * @param rowFieldNameOrId A string value that identifies the row by the name of the data source field to which the row is bound, or by the row's name.
     */
    HasChanges(visibleIndex?: number, rowFieldNameOrId?: string): boolean;
    /**
     * Resets changes in the specified cell.
     * @param visibleIndex An integer value that specifies the visible index of a record containing the processed cell.
     * @param rowIndex A string value that specifies the field name or unique identifier (the row's WebColumnBase.Name property value) of a row containing the processed cell.
     */
    ResetChanges(visibleIndex: number, rowIndex?: number): void;
    /**
     * Switches the specified cell to batch edit mode.
     * @param visibleIndex A zero-based integer value that specifies the visible index of a record containing the processed cell.
     * @param rowIndex A zero-based integer value that identifies the row which contains the processed cell in the rows collection.
     */
    StartEdit(visibleIndex: number, rowIndex: number): void;
    /**
     * Ends the cell(s) editing.
     */
    EndEdit(): void;
    /**
     * Provides the text displayed within the cell according to the specified display format rule. A string value representing the cell's displayed text.
     * @param columnFieldNameOrId A string value representing the row's unique identifier or field name.
     * @param value An object representing a value.
     */
    GetColumnDisplayText(columnFieldNameOrId: string, value: any): string;
    /**
     * Returns the total summary value. The value.
     * @param summaryItemIndex The total summary's index or field name.
     */
    GetTotalSummaryValue(summaryItemIndex: number | string): number;
}
/**
 * Lists values that specify the document formats available for export from the grid.
 */
declare class ASPxClientVerticalGridExportFormat extends ASPxClientGridExportFormat {
}
/**
 * Represents a client-side equivalent of the ASPxHiddenField control.
 */
declare class ASPxClientHiddenField extends ASPxClientControl {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientHiddenField>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientHiddenField>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientHiddenField.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientHiddenField>>;
    /**
     * Sends a callback to the server and generates the server-side ASPxHiddenField.CustomCallback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side ASPxHiddenField.CustomCallback event.
     */
    PerformCallback(parameter: string): void;
    /**
     * Adds a new value to the control's collection of property name/value pairs, on the client side.
     * @param propertyName A string value that specifies the property name. It can contain letters, digits, underline characters, and dollar signs. It cannot begin with a digit character.
     * @param propertyValue An object that represents the value of the specified property.
     */
    Add(propertyName: string, propertyValue: any): void;
    /**
     * Returns the value with the specified property name. An object that represents the value of the specified property.
     * @param propertyName A string value that specifies the property name.
     */
    Get(propertyName: string): any;
    /**
     * Adds a new value to the control's collection of property name/value pairs, on the client side.
     * @param propertyName A string value that specifies the property name. It can contain letters, digits, underline characters, and dollar signs. It cannot begin with a digit character.
     * @param propertyValue An object that represents the property value.
     */
    Set(propertyName: string, propertyValue: any): void;
    /**
     * Removes the specified value from the ASPxHiddenField collection.
     * @param propertyName A string value representing the property name.
     */
    Remove(propertyName: string): void;
    /**
     * Clears the ASPxHiddenField's value collection.
     */
    Clear(): void;
    /**
     * Returns a value indicating whether the value with the specified property name is contained within the ASPxHiddenField control's value collection. true if this value is contained within the collection; otherwise, false.
     * @param propertyName A string value that specifies the property name.
     */
    Contains(propertyName: string): boolean;
    /**
     * Converts the specified object to the ASPxClientHiddenField type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientHiddenField;
}
/**
 * Represents the client-side equivalent of the ASPxHint control.
 */
declare class ASPxClientHint extends ASPxClientControl {
    /**
     * This method is not in effect for a ASPxClientHint object.
     */
    GetMainElement(): any;
    /**
     * Occurs on the client side when a hint is about to be shown.
     */
    Showing: ASPxClientEvent<ASPxClientHintShowingEventHandler>;
    /**
     * Occurs on the client side when a hint is about to be hidden.
     */
    Hiding: ASPxClientEvent<ASPxClientHintHidingEventHandler>;
    /**
     * Forces the hint to reselect target UI elements according to the specified CSS selector.
     */
    static Update(): void;
    /**
     * Forces the hint to recalculate its position.
     * @param hintElementOrTargetElement An object that is the hint element or the target element.
     */
    static UpdatePosition(hintElementOrTargetElement?: any): void;
    /**
     * Registers a hint's functionality with the specified settings. An ASPxClientHint that is the hint.
     * @param targetSelector A string value that is the CSS selector. Specifies to which UI elements the hint is displayed.
     * @param options An ASPxClientHintOptions object that is the hint's options.
     */
    static Register(targetSelector: string, options: ASPxClientHintOptions | string | ASPxClientEvent<ASPxClientHintShowingEventHandler>): ASPxClientHint;
    /**
     * Invokes a hint.
     * @param targetSelector A string value that is the CSS selector.
     * @param options An ASPxClientHintOptions object that is the hint's options.
     */
    static Show(targetSelector: string | any | ASPxClientHintOptions, options?: ASPxClientHintOptions | string): void;
    /**
     * Hides a hint window.
     */
    static Hide(targetSelector: string | any): void;
    /**
     * Hides all hints.
     */
    static HideAll(): void;
}
/**
 * Represents the client-side equivalent of the ASPxHint's window.
 */
declare class ASPxClientHintWindow {
    /**
     * Forces the ASPxClientHint's window to recalculate its position.
     */
    UpdatePosition(): void;
    /**
     * Sets the hint's content.
     * @param html An object that specifies the hint content.
     * @param options An  object that specifies the hint's options.
     */
    SetContent(html: any, options: ASPxClientHintOptions): void;
    /**
     * Set the hint's loading animation
     */
    SetContentLoading(): void;
}
/**
 * A method that will handle the ASPxClientHint.Showing event.
 * @param sender The event source.
 * @param e A ASPxClientHintShowingEventArgs object that contains the required data.
 */
interface ASPxClientHintShowingEventHandler { (sender: ASPxClientHintWindow, e: ASPxClientHintShowingEventArgs): void; }
/**
 * Provides data for the ASPxClientHint.Showing event.
 */
declare class ASPxClientHintShowingEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientHintShowingEventArgs class with specified settings.
     * @param targetElement An object that is the target element of the hint.
     * @param hintElement An object that is the hint element.
     * @param contentElement An object that is the hint's content element.
     * @param titleElement An object that is the hint's title element.
     * @param cancel true, if the action that raised the event should be canceled; otherwise, false.
     */
    constructor(targetElement: any, hintElement: any, contentElement: any, titleElement: any, cancel: boolean);
    /**
     * Gets the object that is the hint's target element.
     */
    targetElement: any;
    /**
     * Gets the object that is the hint.
     */
    hintElement: any;
    /**
     * Gets the object that is the hint's content.
     */
    contentElement: any;
    /**
     * Gets the object that is the hint's title.
     */
    titleElement: any;
    /**
     * Gets or sets a value indicating whether the event should be canceled.
     */
    cancel: boolean;
}
/**
 * A method that will handle the ASPxClientHint.Hiding event.
 * @param sender The event source.
 * @param e A ASPxClientHintHidingEventArgs object that contains the required data.
 */
interface ASPxClientHintHidingEventHandler { (sender: ASPxClientHintWindow, e: ASPxClientHintHidingEventArgs): void; }
/**
 * Provides data for the ASPxClientHint.Hiding event.
 */
declare class ASPxClientHintHidingEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientHintHidingEventArgs class with specified settings.
     * @param targetElement An object that is the target element of the hint.
     * @param hintElement An object that is the hint element.
     * @param contentElement An object that is the hint's content element.
     * @param titleElement An object that is the hint's title element.
     * @param cancel true, if the action that raised the event should be canceled; otherwise, false.
     */
    constructor(targetElement: any, hintElement: any, contentElement: any, titleElement: any, cancel: boolean);
    /**
     * Gets the object that is the hint's target element.
     */
    targetElement: any;
    /**
     * Gets the object that is the hint element.
     */
    hintElement: any;
    /**
     * Gets the object that is the hint's content.
     */
    contentElement: any;
    /**
     * Gets the object that is the hint's title.
     */
    titleElement: any;
    /**
     * Gets or sets a value indicating whether the event should be canceled.
     */
    cancel: boolean;
}
/**
 * The hint control's options.
 */
declare class ASPxClientHintOptions {
    /**
     * Initializes a new instance of the ASPxClientHintOptions class with default settings.
     */
    constructor();
    /**
     * Gets or sets which user action triggers a hint.
     */
    triggerAction: string;
    /**
     * Gets or sets the delay in displaying the hint.
     */
    appearAfter: number;
    /**
     * Gets or sets the duration after which a hint disappears when the mouse pointer is no longer positioned over the target element.
     */
    disappearAfter: number;
    /**
     * Gets or sets a value that specifies whether a hint is displayed in a callout box.
     */
    showCallout: boolean;
    /**
     * Gets or sets a value that specifies whether a hint's title is displayed.
     */
    showTitle: boolean;
    /**
     * Gets or sets where a hint should be positioned.
     */
    position: string;
    /**
     * Gets or sets a custom CSS class name that will be assigned to the root ASPxHint element.
     */
    className: string;
    /**
     * Gets or sets the attribute name.
     */
    contentAttribute: string;
    /**
     * Gets or sets the attribute name.
     */
    titleAttribute: string;
    /**
     * Gets or sets the hint's content.
     */
    content: string;
    /**
     * Gets or sets a value that is the hint's title.
     */
    title: string;
    /**
     * Gets or sets a value that is the HTML DOM-element.
     */
    container: string;
    /**
     * A handler for the ASPxClientHint.Showing event.
     */
    onShowing: ASPxClientEvent<ASPxClientHintShowingEventHandler>;
    /**
     * A handler for the ASPxClientHint.Hiding event.
     */
    onHiding: ASPxClientEvent<ASPxClientHintHidingEventHandler>;
    /**
     * Gets or sets a value that is the hint's width.
     */
    width: string;
    /**
     * Gets or sets a value that is the hint's height.
     */
    height: string;
    /**
     * Gets or sets the X coordinate.
     */
    x: number;
    /**
     * Gets or sets the Y coordinate.
     */
    y: number;
    /**
     * Gets or sets a value that specifies whether to flip the hint to the opposite position relative to the target element.
     */
    allowFlip: boolean;
    /**
     * Gets or sets a value that specifies whether to shift a hint if its content and title are hidden outside of the client area.
     */
    allowShift: boolean;
    /**
     * Gets or sets whether it should use animation effects when a hint appears.
     */
    animation: any;
    /**
     * Gets the offset of a hint.
     */
    offset: number;
    /**
     * Specifies whether to hide native tooltips for an item and its nested items.
     */
    hideNativeTooltipForNestedTitleAttributes: boolean;
}
/**
 * The client-side equivalent of the ASPxImageGallery control.
 */
declare class ASPxClientImageGallery extends ASPxClientDataView {
    /**
     * Fires on the client side before the fullscreen viewer is shown and allows you to cancel the action.
     */
    FullscreenViewerShowing: ASPxClientEvent<ASPxClientImageGalleryCancelEventHandler<ASPxClientImageGallery>>;
    /**
     * Occurs on the client side after an active item has been changed within the fullscreen viewer.
     */
    FullscreenViewerActiveItemIndexChanged: ASPxClientEvent<ASPxClientImageGalleryFullscreenViewerEventHandler<ASPxClientImageGallery>>;
    /**
     * Shows the fullscreen viewer with the specified active item.
     * @param index An Int32 value that is an index of the active item.
     */
    ShowFullscreenViewer(index: number): void;
    /**
     * Hides the fullscreen viewer.
     */
    HideFullscreenViewer(): void;
    /**
     * Makes the specified item active within the fullscreen viewer on the client side.
     * @param index An integer value specifying the index of the item to select.
     * @param preventAnimation true to prevent the animation effect; false to change images using animation.
     */
    SetFullscreenViewerActiveItemIndex(index: number, preventAnimation: boolean): void;
    /**
     * Gets the number of items contained in the control's item collection.
     */
    GetFullscreenViewerItemCount(): number;
    /**
     * Returns the index of the active item within the fullscreen viewer.
     */
    GetFullscreenViewerActiveItemIndex(): number;
    /**
     * Plays a slide show within a fullscreen viewer.
     */
    PlaySlideShow(): void;
    /**
     * Pauses a slide show within a fullscreen viewer.
     */
    PauseSlideShow(): void;
    /**
     * Converts the specified object to the ASPxClientImageGallery type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientImageGallery;
}
/**
 * A method that will handle the ASPxClientImageGallery.FullscreenViewerShowing event.
 * @param source The event source. Identifies the ASPxImageGallery control that raised the event.
 * @param e An ASPxClientImageGalleryCancelEventArgs object that contains event data.
 */
interface ASPxClientImageGalleryCancelEventHandler<Sender> { (source: Sender, e: ASPxClientImageGalleryCancelEventArgs): void; }
/**
 * Provides data for the ASPxClientImageGallery.FullscreenViewerShowing event.
 */
declare class ASPxClientImageGalleryCancelEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientImageGalleryCancelEventArgs class.
     * @param index A Int32 value that is the processed item index.
     * @param name A String value that specifies the processed item's unique identifier name.
     */
    constructor(index: number, name: string);
    /**
     * Gets the index of the item related to the event.
     */
    index: number;
    /**
     * Gets the unique identifier name of the item related to the event.
     */
    name: string;
}
/**
 * A method that will handle the ASPxClientImageGallery.FullscreenViewerActiveItemIndexChanged event.
 * @param source The event source. Identifies the ASPxImageGallery control that raised the event.
 * @param e An ASPxClientImageGalleryFullscreenViewerEventArgs object that contains event data.
 */
interface ASPxClientImageGalleryFullscreenViewerEventHandler<Sender> { (source: Sender, e: ASPxClientImageGalleryFullscreenViewerEventArgs): void; }
/**
 * Provides data for the ASPxClientImageGallery.FullscreenViewerActiveItemIndexChanged event.
 */
declare class ASPxClientImageGalleryFullscreenViewerEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientImageGalleryFullscreenViewerEventArgs class.
     * @param index A Int32 value that is the processed item index.
     * @param name A String value that specifies the processed item's unique identifier name.
     */
    constructor(index: number, name: string);
    /**
     * Gets the index of the item related to the event.
     */
    index: number;
    /**
     * Gets the unique identifier name of the item related to the event.
     */
    name: string;
}
/**
 * A client-side equivalent of the ASPxImageSlider object.
 */
declare class ASPxClientImageSlider extends ASPxClientControl {
    /**
     * Occurs after the active image, displayed within the image area, is changed.
     */
    ActiveItemChanged: ASPxClientEvent<ASPxClientImageSliderItemEventHandler<ASPxClientImageSlider>>;
    /**
     * Fires after an image item has been clicked within the image area.
     */
    ItemClick: ASPxClientEvent<ASPxClientImageSliderItemEventHandler<ASPxClientImageSlider>>;
    /**
     * Occurs on the client side when a thumbnail is clicked.
     */
    ThumbnailItemClick: ASPxClientEvent<ASPxClientImageSliderItemEventHandler<ASPxClientImageSlider>>;
    /**
     * Fires for each Image Slider's item that is loaded on callback.
     */
    ItemLoadedOnCallback: ASPxClientEvent<ASPxClientImageSliderItemEventHandler<ASPxClientImageSlider>>;
    /**
     * Returns an item specified by its index within the image slider's item collection. An ASPxClientImageSliderItem object that is the collection item found.
     * @param index An integer value specifying the zero-based index of the item to be retrieved.
     * @param forceLoad true, to force the item's loading; otherwise, false.
     */
    GetItem(index: number, forceLoad?: boolean): ASPxClientImageSliderItem;
    /**
     * Returns the image slider's item by its name. An ASPxClientImageSliderItem object representing the Image
     * @param name A string value representing the item's name.
     * @param forceLoad true, to force the item's loading; otherwise, false.
     */
    GetItemByName(name: string, forceLoad?: boolean): ASPxClientImageSliderItem;
    /**
     * Returns the index of the active item within the image slider control.
     */
    GetActiveItemIndex(): number;
    /**
     * Makes the specified item active within the image slider control on the client side.
     * @param index An integer value specifying the index of the item to select.
     * @param preventAnimation true to prevent the animation effect; false to change images using animation.
     */
    SetActiveItemIndex(index: number, preventAnimation: boolean): void;
    /**
     * Returns the active item within the ASPxImageSlider control.
     */
    GetActiveItem(): ASPxClientImageSliderItem;
    /**
     * Makes the specified item active within the image slider control on the client side.
     * @param item An ASPxClientImageSliderItem object specifying the item to select.
     * @param preventAnimation true to prevent animation effect; false to enable animation.
     */
    SetActiveItem(item: ASPxClientImageSliderItem, preventAnimation: boolean): void;
    /**
     * Gets the number of items contained in the control's item collection.
     */
    GetItemCount(): number;
    /**
     * Gets the loaded items.
     */
    GetLoadedItems(): ASPxClientImageSliderItem[];
    /**
     * Sets input focus to the ASPxImageSlider control.
     */
    Focus(): void;
    /**
     * Plays a slide show within an image slider.
     */
    Play(): void;
    /**
     * Pauses a slide show within image slider.
     */
    Pause(): void;
    /**
     * Gets a value indicating whether the slide show is playing.
     */
    IsSlideShowPlaying(): boolean;
    /**
     * Converts the specified object to the ASPxClientImageSlider type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientImageSlider;
}
/**
 * A method that will handle the ASPxClientImageSlider.ActiveItemChanged and ASPxClientImageSlider.ItemClick events.
 * @param source The event source. Identifies the ASPxImageSlider control that raised the event.
 * @param e An ASPxClientImageSliderItemEventArgs object that contains event data.
 */
interface ASPxClientImageSliderItemEventHandler<Sender> { (source: Sender, e: ASPxClientImageSliderItemEventArgs): void; }
/**
 * Provides data for the ASPxClientImageSlider.ActiveItemChanged and ASPxClientImageSlider.ItemClick events.
 */
declare class ASPxClientImageSliderItemEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientImageSliderItemEventArgs class.
     * @param item An ASPxClientImageSliderItem object that is the item related to the generated event.
     */
    constructor(item: ASPxClientImageSliderItem);
    /**
     * Gets an item object related to the event.
     */
    item: ASPxClientImageSliderItem;
}
/**
 * A client-side equivalent of the image slider's ImageSliderItem object.
 */
declare class ASPxClientImageSliderItem {
    /**
     * Gets an image slider to which the current item belongs.
     */
    imageSlider: ASPxClientImageSlider;
    /**
     * Gets the item's index within an items collection.
     */
    index: number;
    /**
     * Gets the name that uniquely identifies the image slider item.
     */
    name: string;
    /**
     * Gets or sets the path to the image displayed within the ASPxClientImageSliderItem.
     */
    imageUrl: string;
    /**
     * Gets the item's display text.
     */
    text: string;
    /**
     * Gets whether the image slider's item is loaded.
     */
    loaded: boolean;
}
/**
 * The client-side equivalent of the ASPxImageZoomNavigator object.
 */
declare class ASPxClientImageZoomNavigator extends ASPxClientImageSlider {
}
/**
 * A client-side equivalent of the ASPxImageZoom object.
 */
declare class ASPxClientImageZoom extends ASPxClientControl {
    /**
     * Sets the properties on an image displayed in the image zoom control.
     * @param imageUrl A string value specifying the path to the preview image displayed in the preview image.
     * @param largeImageUrl A string value specifying the path to the preview image displayed in the zoom window and the expand window.
     * @param zoomWindowText A string value specifying the text displayed in the zoom window.
     * @param expandWindowText A string value specifying the text displayed in the expand window.
     * @param alternateText A string value that specifies the alternate text displayed instead of the image.
     */
    SetImageProperties(imageUrl: string, largeImageUrl: string, zoomWindowText: string, expandWindowText: string, alternateText: string): void;
}
/**
 * Represents a client-side equivalent of the ASPxLoadingPanel control.
 */
declare class ASPxClientLoadingPanel extends ASPxClientControl {
    /**
     * Invokes the loading panel.
     */
    Show(): void;
    /**
     * Invokes the loading panel, displaying it over the specified HTML element.
     * @param htmlElement An object that specifies the required HTML element.
     */
    ShowInElement(htmlElement: any): void;
    /**
     * Invokes the loading panel, displaying it over the specified element.
     * @param id A string that specifies the required element's identifier.
     */
    ShowInElementByID(id: string): void;
    /**
     * Invokes the loading panel at the specified position.
     * @param x An integer value specifying the x-coordinate of the loading panel's display position.
     * @param y An integer value specifying the y-coordinate of the loaidng panel's display position.
     */
    ShowAtPos(x: number, y: number): void;
    /**
     * Sets the text to be displayed within the ASPxLoadingPanel.
     * @param text A string value specifying the text to be displayed within the ASPxLoadingPanel.
     */
    SetText(text: string): void;
    /**
     * Gets the text displayed within the ASPxLoadingPanel.
     */
    GetText(): string;
    /**
     * Hides the loading panel.
     */
    Hide(): void;
    /**
     * Converts the specified object to the ASPxClientLoadingPanel type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientLoadingPanel;
}
/**
 * Represents the client-side equivalent of the area that is used within the Html Editor's media dialogs.
 */
declare class ASPxClientMediaFileSelector extends ASPxClientControl {
    /**
     * Returns a URL text from the URL text box in Html Editor's media dialogs.
     */
    GetUrl(): string;
    /**
     * Sets a URL text in the Html Editor's media dialogs.
     * @param url A string value that is the Url text.
     */
    SetUrl(url: string): void;
}
/**
 * Serves as the base type for the ASPxClientMenu and ASPxClientPopupMenu objects.
 */
declare class ASPxClientMenuBase extends ASPxClientControl {
    /**
     * Fires after a menu item has been clicked.
     */
    ItemClick: ASPxClientEvent<ASPxClientMenuItemClickEventHandler<ASPxClientMenuBase>>;
    /**
     * Occurs on the client side when the mouse cursor is moved into a menu item.
     */
    ItemMouseOver: ASPxClientEvent<ASPxClientMenuItemMouseEventHandler<ASPxClientMenuBase>>;
    /**
     * Occurs on the client side when the mouse cursor moves outside a menu item.
     */
    ItemMouseOut: ASPxClientEvent<ASPxClientMenuItemMouseEventHandler<ASPxClientMenuBase>>;
    /**
     * Occurs on the client side when a submenu pops up.
     */
    PopUp: ASPxClientEvent<ASPxClientMenuItemEventHandler<ASPxClientMenuBase>>;
    /**
     * Occurs on the client side when a submenu closes.
     */
    CloseUp: ASPxClientEvent<ASPxClientMenuItemEventHandler<ASPxClientMenuBase>>;
    /**
     * Returns the number of menu items at the root menu level.
     */
    GetItemCount(): number;
    /**
     * Returns the menu's root menu item specified by its index. An ASPxClientMenuItem object representing the root item located at the specified index within the menu's ASPxMenuBase.Items collection.
     * @param index An integer value specifying the zero-based index of the root menu item to be retrieved.
     */
    GetItem(index: number): ASPxClientMenuItem;
    /**
     * Returns a menu item specified by its name. An ASPxClientMenuItem object that represents the menu item with the specified name.
     * @param name A string value specifying the name of the menu item.
     */
    GetItemByName(name: string): ASPxClientMenuItem;
    /**
     * Returns the selected item within the menu control.
     */
    GetSelectedItem(): ASPxClientMenuItem;
    /**
     * Selects the specified menu item within a menu control on the client side.
     * @param item An ASPxClientMenuItem object specifying the menu item to select.
     */
    SetSelectedItem(item: ASPxClientMenuItem): void;
    /**
     * Returns a root menu item.
     */
    GetRootItem(): ASPxClientMenuItem;
    /**
     * Returns a collection of client menu objects.
     */
    static GetMenuCollection(): ASPxClientMenuCollection;
}
/**
 * Represents a client collection that maintains client menu objects.
 */
declare class ASPxClientMenuCollection extends ASPxClientControlCollection {
    /**
     * Recalculates the position of visible sub menus.
     */
    RecalculateAll(): void;
    /**
     * Hides all menus maitained by the collection.
     */
    HideAll(): void;
}
/**
 * Represents a client-side equivalent of the menu's MenuItem object.
 */
declare class ASPxClientMenuItem {
    /**
     * Gets the menu object to which the current item belongs.
     */
    menu: ASPxClientMenuBase;
    /**
     * Gets the immediate parent item to which the current item belongs.
     */
    parent: ASPxClientMenuItem;
    /**
     * Gets the item's index within the parent's collection of items.
     */
    index: number;
    /**
     * Gets the name that uniquely identifies the menu item.
     */
    name: string;
    /**
     * For internal use only.
     */
    indexPath: string;
    /**
     * Returns the number of the current menu item's immediate child items.
     */
    GetItemCount(): number;
    /**
     * Returns the current menu item's immediate subitem specified by its index. An ASPxClientMenuItem object representing the menu item's immediate subitem located at the specified index within the menu item's MenuItem.Items collection.
     * @param index An integer value specifying the zero-based index of the submenu item to be retrieved.
     */
    GetItem(index: number): ASPxClientMenuItem;
    /**
     * Returns the current menu item's subitem specified by its name. An ASPxClientMenuItem object that represents the current menu item's subitem with the specified name.
     * @param name A string value specifying the name of the menu item.
     */
    GetItemByName(name: string): ASPxClientMenuItem;
    /**
     * Indicates whether the menu item is checked.
     */
    GetChecked(): boolean;
    /**
     * Specifies whether the menu item is checked.
     * @param value true if the menu item is checked; otherwise, false.
     */
    SetChecked(value: boolean): void;
    /**
     * Returns a value specifying whether a menu item is enabled.
     */
    GetEnabled(): boolean;
    /**
     * Specifies whether the menu item is enabled.
     * @param value true to enable the menu item; otherwise, false.
     */
    SetEnabled(value: boolean): void;
    /**
     * Returns the URL pointing to the image displayed within the menu item.
     */
    GetImageUrl(): string;
    /**
     * Sets the URL which points to the image displayed within the menu item.
     * @param value A string value specifying the URL to the image displayed within the menu item.
     */
    SetImageUrl(value: string): void;
    /**
     * Gets a URL which defines the navigation location for the menu item.
     */
    GetNavigateUrl(): string;
    /**
     * Specifies a URL which defines the navigation location for the menu item.
     * @param value A string value which specifies a URL to where the client web browser will navigate when the menu item is clicked.
     */
    SetNavigateUrl(value: string): void;
    /**
     * Returns text displayed within the menu item.
     */
    GetText(): string;
    /**
     * Sets the text to be displayed within the menu item.
     * @param value A string value specifying the text to be displayed within the menu item.
     */
    SetText(value: string): void;
    /**
     * Returns a value specifying whether a menu item is displayed.
     */
    GetVisible(): boolean;
    /**
     * Specifies the menu item's visibility.
     * @param value true if the menu item is visible; otherwise, false.
     */
    SetVisible(value: boolean): void;
}
/**
 * Represents a client-side equivalent of the ASPxMenu object.
 */
declare class ASPxClientMenu extends ASPxClientMenuBase {
    /**
     * Gets a value specifying the menu orientation.
     */
    GetOrientation(): string;
    /**
     * Sets the menu orientation.
     * @param orientation 'Vertical' to orient the menu vertically; 'Horizontal' to orient the menu horizontally.
     */
    SetOrientation(orientation: string): void;
    /**
     * Expands or collapses the side menu.
     */
    ToggleSideMenu(): void;
    /**
     * Converts the specified object to the ASPxClientMenu type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientMenu;
}
/**
 * A method that will handle the menu's client events concerning manipulations with an item.
 * @param source The event source. This parameter identifies the menu object which raised the event.
 * @param e An ASPxClientMenuItemEventArgs object that contains event data.
 */
interface ASPxClientMenuItemEventHandler<Sender> { (source: Sender, e: ASPxClientMenuItemEventArgs): void; }
/**
 * Provides data for events which concern manipulations on menu items.
 */
declare class ASPxClientMenuItemEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new object of the ASPxClientMenuItemEventArgs type with the specified value.
     * @param item An ASPxClientMenuItem object representing the group related to the event.
     */
    constructor(item: ASPxClientMenuItem);
    /**
     * Gets the menu item object related to the event.
     */
    item: ASPxClientMenuItem;
}
/**
 * A method that will handle the ASPxClientMenuBase.ItemMouseOut and ASPxClientMenuBase.ItemMouseOver events.
 * @param source An object representing the event source.
 * @param e A MenuItemEventArgs object that contains event data.
 */
interface ASPxClientMenuItemMouseEventHandler<Sender> { (source: Sender, e: ASPxClientMenuItemMouseEventArgs): void; }
/**
 * Provides data for client events which relate to mouse hovering (such as entering or leaving) over menu items.
 */
declare class ASPxClientMenuItemMouseEventArgs extends ASPxClientMenuItemEventArgs {
    /**
     * Initializes a new ASPxClientMenuItemMouseEventArgs object with the specified settings.
     * @param item An ASPxClientMenuItem object that represents an item related to the event.
     * @param htmlElement An HTML object that contains the processed item.
     */
    constructor(item: ASPxClientMenuItem, htmlElement: any);
    /**
     * Gets the HTML object that contains the processed item.
     */
    htmlElement: any;
}
/**
 * A method that will handle client ASPxClientMenuBase.ItemClick events.
 * @param source An object representing the event source.
 * @param e A MenuItemEventArgs object that contains event data.
 */
interface ASPxClientMenuItemClickEventHandler<Sender> { (source: Sender, e: ASPxClientMenuItemClickEventArgs): void; }
/**
 * Provides data for events which concern clicking on the control's items.
 */
declare class ASPxClientMenuItemClickEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Initializes a new object of the ASPxClientMenuItemClickEventArgs type with the specified settings.
     * @param processOnServer true to process the event on the server side; false to completely handle it on the client side.
     * @param item An ASPxClientMenuItem object that represents an item related to the event.
     * @param htmlElement An HTML object that contains the processed item.
     * @param htmlEvent A DHTML event object that relates to the processed event.
     */
    constructor(processOnServer: boolean, item: ASPxClientMenuItem, htmlElement: any, htmlEvent: any);
    /**
     * Gets the menu item object related to the event.
     */
    item: ASPxClientMenuItem;
    /**
     * Gets the HTML object that contains the processed item.
     */
    htmlElement: any;
    /**
     * Gets a DHTML event object that relates to the processed event.
     */
    htmlEvent: any;
}
/**
 * Contains options affecting the touch scrolling functionality.
 */
declare class ASPxClientTouchUIOptions {
    /**
     * Gets or sets a value that specifies whether or not the horizontal scroll bar should be displayed.
     */
    showHorizontalScrollbar: boolean;
    /**
     * Gets or sets a value that specifies whether or not the vertical scroll bar should be displayed.
     */
    showVerticalScrollbar: boolean;
    /**
     * Gets or sets the name of the CSS class defining the vertical scroll bar's appearance.
     */
    vScrollClassName: string;
    /**
     * Gets or sets the name of the CSS class defining the horizontal scroll bar's appearance.
     */
    hScrollClassName: string;
}
/**
 * Contains scroll extender methods that can be used to support scrolling under touch UI devices.
 */
declare class ASPxClientTouchUI {
    /**
     * Extends the specified element's functionality with scrolling via touch behavior (one finger) and customized scrollbar-related options. A ScrollExtender object allowing you to apply the current scroll extender to another element.
     * @param options An ASPxClientTouchUIOptions object that provides options affecting the touch scrolling functionality.
     */
    static MakeScrollable(id: string | any, options?: ASPxClientTouchUIOptions): ScrollExtender;
}
/**
 * Contains a method allowing you to apply the current scroll extender to a specific element.
 */
declare class ScrollExtender {
    /**
     * Applies the current scroll extender to the specified DOM element.
     */
    ChangeElement(id: string | any): void;
}
/**
 * Represents a client-side equivalent of the ASPxNavBar control.
 */
declare class ASPxClientNavBar extends ASPxClientControl {
    /**
     * Fires after an item has been clicked.
     */
    ItemClick: ASPxClientEvent<ASPxClientNavBarItemEventHandler<ASPxClientNavBar>>;
    /**
     * Fires on the client side after a group's expansion state has been changed.
     */
    ExpandedChanged: ASPxClientEvent<ASPxClientNavBarGroupEventHandler<ASPxClientNavBar>>;
    /**
     * Fires on the client side before the expansion state of a group is changed.
     */
    ExpandedChanging: ASPxClientEvent<ASPxClientNavBarGroupCancelEventHandler<ASPxClientNavBar>>;
    /**
     * Fires when a group header is clicked.
     */
    HeaderClick: ASPxClientEvent<ASPxClientNavBarGroupClickEventHandler<ASPxClientNavBar>>;
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientNavBar>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientNavBar>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientNavBar.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientNavBar>>;
    /**
     * Returns the number of groups in the navbar.
     */
    GetGroupCount(): number;
    /**
     * Returns a group specified by its index. An ASPxClientNavBarGroup object representing the group located at the specified index within the navbar's ASPxNavBar.Groups collection.
     * @param index An integer value specifying the zero-based index of the group object to retrieve.
     */
    GetGroup(index: number): ASPxClientNavBarGroup;
    /**
     * Returns a group specified by its name. An ASPxClientNavBarGroup object that represents the group with the specified name.
     * @param name A string value specifying the name of the group.
     */
    GetGroupByName(name: string): ASPxClientNavBarGroup;
    /**
     * Returns the navbar's active group.
     */
    GetActiveGroup(): ASPxClientNavBarGroup;
    /**
     * Makes the specified group active.
     * @param group A ASPxClientNavBarGroup object that specifies the active group.
     */
    SetActiveGroup(group: ASPxClientNavBarGroup): void;
    /**
     * Returns an item specified by its name. An ASPxClientNavBarItem object that represents the item with the specified name.
     * @param name A string value specifying the name of the item.
     */
    GetItemByName(name: string): ASPxClientNavBarItem;
    /**
     * Returns the selected item within the navbar control.
     */
    GetSelectedItem(): ASPxClientNavBarItem;
    /**
     * Selects the specified item within the navbar control on the client side.
     * @param item An ASPxClientNavBarItem object specifying the item to select.
     */
    SetSelectedItem(item: ASPxClientNavBarItem): void;
    /**
     * Collapses all groups of the navbar.
     */
    CollapseAll(): void;
    /**
     * Expands all groups of the navbar.
     */
    ExpandAll(): void;
    /**
     * Converts the specified object to the ASPxClientNavBar type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientNavBar;
}
/**
 * Represents a client-side equivalent of the navbar's NavBarGroup object.
 */
declare class ASPxClientNavBarGroup {
    /**
     * Gets the navbar to which the current group belongs.
     */
    navBar: ASPxClientNavBar;
    /**
     * Gets the group's index within a collection of a navbar's groups.
     */
    index: number;
    /**
     * Gets the name that uniquely identifies the group.
     */
    name: string;
    /**
     * Returns a value specifying whether a group is enabled.
     */
    GetEnabled(): boolean;
    /**
     * Returns a value specifying whether the group is expanded.
     */
    GetExpanded(): boolean;
    /**
     * Sets the group's expansion state.
     * @param value true to expand the group; false to collapse the group.
     */
    SetExpanded(value: boolean): void;
    /**
     * Returns a value specifying whether a group is displayed.
     */
    GetVisible(): boolean;
    /**
     * Returns text displayed within a group.
     */
    GetText(): string;
    /**
     * Specifies the text displayed within a group.
     * @param text A string value that is the text displayed within the navbar group.
     */
    SetText(text: string): void;
    /**
     * Specifies whether the group is visible.
     * @param value true if the group is visible; otherwise, false.
     */
    SetVisible(value: boolean): void;
    /**
     * Returns the number of items in the group.
     */
    GetItemCount(): number;
    /**
     * Returns the group's item specified by its index. An ASPxClientNavBarItem object representing the item located at the specified index within the current group.
     * @param index An integer value specifying the zero-based index of the item to be retrieved.
     */
    GetItem(index: number): ASPxClientNavBarItem;
    /**
     * Returns a group item specified by its name. An ASPxClientNavBarItem object that represents the item with the specified name.
     * @param name A string value specifying the name of the item.
     */
    GetItemByName(name: string): ASPxClientNavBarItem;
}
/**
 * Represents a client-side equivalent of the navbar's NavBarItem object.
 */
declare class ASPxClientNavBarItem {
    /**
     * Gets the navbar to which the current item belongs.
     */
    navBar: ASPxClientNavBar;
    /**
     * Gets the group to which the current item belongs.
     */
    group: ASPxClientNavBarGroup;
    /**
     * Gets the item's index within a collection of a group's items.
     */
    index: number;
    /**
     * Gets the name that uniquely identifies the item.
     */
    name: string;
    /**
     * Returns a value indicating whether an item is enabled.
     */
    GetEnabled(): boolean;
    /**
     * Specifies whether the item is enabled.
     * @param value true if the item is enabled; otherwise, false.
     */
    SetEnabled(value: boolean): void;
    /**
     * Returns the URL which points to the image displayed within the item.
     */
    GetImageUrl(): string;
    /**
     * Specifies the URL which points to the image displayed within the item.
     * @param value A string value that specifies the URL to the image displayed within the item.
     */
    SetImageUrl(value: string): void;
    /**
     * Gets an URL which defines the item's navigation location.
     */
    GetNavigateUrl(): string;
    /**
     * Specifies a URL which defines the item's navigation location.
     * @param value A string value which represents the URL to where the client web browser will navigate when the item is clicked.
     */
    SetNavigateUrl(value: string): void;
    /**
     * Returns text displayed within the item.
     */
    GetText(): string;
    /**
     * Specifies the text displayed within the item.
     * @param value A string value that represents the text displayed within the item.
     */
    SetText(value: string): void;
    /**
     * Returns a value specifying whether an item is displayed.
     */
    GetVisible(): boolean;
    /**
     * Specifies whether the item is visible.
     * @param value true is the item is visible; otherwise, false.
     */
    SetVisible(value: boolean): void;
}
/**
 * A method that will handle the navbar's client events concerning manipulations with an item.
 * @param source An object representing the event's source. Identifies the navbar object that raised the event.
 * @param e An ASPxClientNavBarItemEventArgs object that contains event data.
 */
interface ASPxClientNavBarItemEventHandler<Sender> { (source: Sender, e: ASPxClientNavBarItemEventArgs): void; }
/**
 * Provides data for events which concern manipulations on items.
 */
declare class ASPxClientNavBarItemEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Initializes a new object of the ASPxClientNavBarItemEventArgs type with the specified settings.
     * @param processOnServer true to process the event on the server side; false to completely handle it on the client side.
     * @param item An ASPxClientNavBarItem object that represents an item related to the event.
     * @param htmlElement An HTML object that contains the processed navbar item.
     * @param htmlEvent A DHTML event object that relates to the processed event.
     */
    constructor(processOnServer: boolean, item: ASPxClientNavBarItem, htmlElement: any, htmlEvent: any);
    /**
     * Gets the item object related to the event.
     */
    item: ASPxClientNavBarItem;
    /**
     * Gets the HTML object that contains the processed navbar item.
     */
    htmlElement: any;
    /**
     * Gets a DHTML event object that relates to the processed event.
     */
    htmlEvent: any;
}
/**
 * A method that will handle the navbar's client events concerning manipulations with a group.
 * @param source An object representing the event's source. Identifies the navbar object that raised the event.
 * @param e An ASPxClientNavBarGroupEventArgs object that contains event data.
 */
interface ASPxClientNavBarGroupEventHandler<Sender> { (source: Sender, e: ASPxClientNavBarGroupEventArgs): void; }
/**
 * Provides data for events which concern manipulations on groups.
 */
declare class ASPxClientNavBarGroupEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new object of the ASPxClientNavBarGroupEventArgs type with the specified value.
     * @param group An ASPxClientNavBarGroup object representing the group related to the event.
     */
    constructor(group: ASPxClientNavBarGroup);
    /**
     * Gets the group object related to the event.
     */
    group: ASPxClientNavBarGroup;
}
/**
 * A method that will handle the navbar's cancelable client events concerning manipulations with a group.
 * @param source An object representing the event's source. Identifies the navbar object that raised the event.
 * @param e An ASPxClientNavBarGroupCancelEventArgs object that contains event data.
 */
interface ASPxClientNavBarGroupCancelEventHandler<Sender> { (source: Sender, e: ASPxClientNavBarGroupCancelEventArgs): void; }
/**
 * Provides data for cancellable events which concern manipulations on groups.
 */
declare class ASPxClientNavBarGroupCancelEventArgs extends ASPxClientProcessingModeCancelEventArgs {
    /**
     * Initializes a new object of the ASPxClientNavBarGroupCancelEventArgs type with the specified settings.
     * @param processOnServer true to process the event on the server side; false to completely handle it on the client side.
     * @param group An ASPxClientNavBarGroup object that represents a group related to the event.
     */
    constructor(processOnServer: boolean, group: ASPxClientNavBarGroup);
    /**
     * Gets the group object related to the event.
     */
    group: ASPxClientNavBarGroup;
}
/**
 * A method that will handle the navbar's client events concerning clicks on groups.
 * @param source The event source. This parameter identifies the navbar object which raised the event.
 * @param e An ASPxClientNavBarGroupClickEventArgs object that contains event data.
 */
interface ASPxClientNavBarGroupClickEventHandler<Sender> { (source: Sender, e: ASPxClientNavBarGroupClickEventArgs): void; }
/**
 * Provides data for events which concern clicking on the control's group headers.
 */
declare class ASPxClientNavBarGroupClickEventArgs extends ASPxClientNavBarGroupCancelEventArgs {
    /**
     * Initializes a new object of the ASPxClientNavBarGroupClickEventArgs type with the specified settings.
     * @param processOnServer true to process the event on the server side; false to completely handle it on the client side.
     * @param group An ASPxClientNavBarGroup object that represents a group related to the event.
     * @param htmlElement An HTML object that contains the processed navbar group.
     * @param htmlEvent A DHTML event object that relates to the processed event.
     */
    constructor(processOnServer: boolean, group: ASPxClientNavBarGroup, htmlElement: any, htmlEvent: any);
    /**
     * Gets the HTML object that contains the processed group.
     */
    htmlElement: any;
    /**
     * Gets a DHTML event object that relates to the processed event.
     */
    htmlEvent: any;
}
/**
 * Represents a client-side equivalent of the ASPxNewsControl object.
 */
declare class ASPxClientNewsControl extends ASPxClientDataView {
    /**
     * Fires after an item's tail has been clicked.
     */
    TailClick: ASPxClientEvent<ASPxClientNewsControlItemEventHandler<ASPxClientNewsControl>>;
    /**
     * Converts the specified object to the ASPxClientNewsControl type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientNewsControl;
}
/**
 * A method that will handle the news control's client events concerning manipulations with an item.
 * @param source An object representing the event's source. Identifies the news control object that raised the event.
 * @param e An ASPxClientNewsControlItemEventArgs object that contains event data.
 */
interface ASPxClientNewsControlItemEventHandler<Sender> { (source: Sender, e: ASPxClientNewsControlItemEventArgs): void; }
/**
 * Provides data for events which concern tail clicking within the control's items.
 */
declare class ASPxClientNewsControlItemEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Initializes a new object of the ASPxClientNewsControlItemEventArgs type with the specified settings.
     * @param processOnServer true to process the event on the server side; false to completely handle it on the client side.
     * @param name A string value that represents the unique identifier name of an item related to the event.
     * @param htmlElement An HTML object that contains the processed item.
     * @param htmlEvent A DHTML event object that relates to the processed event.
     */
    constructor(processOnServer: boolean, name: string, htmlElement: any, htmlEvent: any);
    /**
     * Gets the name that uniquely identifies the processed item.
     */
    name: any;
    /**
     * Gets the HTML object that contains the processed item.
     */
    htmlElement: any;
    /**
     * Gets a DHTML event object that relates to the processed event.
     */
    htmlEvent: any;
}
/**
 * Represents a client-side equivalent of the ASPxObjectContainer control.
 */
declare class ASPxClientObjectContainer extends ASPxClientControl {
    /**
     * Occurs on the client side when the FSCommand action is called within the associated flash object's action script.
     */
    FlashScriptCommand: ASPxClientEvent<ASPxClientFlashScriptCommandEventHandler<ASPxClientObjectContainer>>;
    /**
     * Play the Flash movie backwards.
     */
    Back(): void;
    /**
     * Returns the value of the Flash variable specified. A string value that represents the Flash variable's value.
     * @param name A string value that specifies the Flash variable.
     */
    GetVariable(name: string): string;
    /**
     * Play the Flash movie forwards.
     */
    Forward(): void;
    /**
     * Activates the specified frame in the Flash movie.
     * @param frameNumber An integer value that specifies the requested frame.
     */
    GotoFrame(frameNumber: number): void;
    /**
     * Indicates whether the Flash movie is currently playing.
     */
    IsPlaying(): boolean;
    /**
     * Loads the Flash movie to the specified layer.
     * @param layerNumber An integer value that identifies a layer in which to load the movie.
     * @param url A string value that specifies the movie's URL.
     */
    LoadMovie(layerNumber: number, url: string): void;
    /**
     * Pans a zoomed-in Flash movie to the specified coordinates.
     * @param x An integer value that specifies the X-coordinate.
     * @param y An integer value that specifies the Y-coordinate.
     * @param mode 0 the coordinates are pixels; 1 the coordinates are a percentage of the window.
     */
    Pan(x: number, y: number, mode: number): void;
    /**
     * Returns the percent of the Flash Player movie that has streamed into the browser so far.
     */
    PercentLoaded(): string;
    /**
     * Starts playing media files.
     */
    Play(): void;
    /**
     * Rewinds the Flash movie to the first frame.
     */
    Rewind(): void;
    /**
     * Sets the value of the specified Flash variable.
     * @param name A string value that specifies the Flash variable.
     * @param value A string value that represents a new value.
     */
    SetVariable(name: string, value: string): void;
    /**
     * Zooms in on the specified rectangular area of the Flash movie.
     * @param left An integer value that specifies the x-coordinate of the rectangle's left side, in twips.
     * @param top An integer value that specifies the y-coordinate of the rectangle's top side, in twips.
     * @param right An integer value that specifies the x-coordinate of the rectangle's right side, in twips.
     * @param bottom An integer value that specifies the y-coordinate of the rectangle's bottom side, in twips.
     */
    SetZoomRect(left: number, top: number, right: number, bottom: number): void;
    /**
     * Stops playing the Flash movie.
     */
    StopPlay(): void;
    /**
     * Returns the total number of frames in the Flash movie.
     */
    TotalFrames(): number;
    /**
     * Zooms the Flash view by a relative scale factor.
     * @param percent An integer value that specifies the relative scale factor, as a  percentage.
     */
    Zoom(percent: number): void;
    /**
     * Starts playing a Quick Time movie.
     */
    QTPlay(): void;
    /**
     * Stops playing a Quick Time movie.
     */
    QTStopPlay(): void;
    /**
     * Rewinds a Quick Time movie to the first frame.
     */
    QTRewind(): void;
    /**
     * Steps through a Quick Time video stream by a specified number of frames.
     * @param count An integer value that specifies the number of frames to step.
     */
    QTStep(count: number): void;
    /**
     * Converts the specified object to the ASPxClientObjectContainer type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientObjectContainer;
}
/**
 * A method that will handle the ASPxClientObjectContainer.FlashScriptCommand event.
 * @param source The event source.
 * @param e A ASPxClientFlashScriptCommandEventArgs object that contains event data.
 */
interface ASPxClientFlashScriptCommandEventHandler<Sender> { (source: Sender, e: ASPxClientFlashScriptCommandEventArgs): void; }
/**
 * Provides data for the ASPxClientObjectContainer.FlashScriptCommand client event.
 */
declare class ASPxClientFlashScriptCommandEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new object of the ASPxClientFlashScriptCommandEventArgs type with the specified settings.
     */
    constructor(command: string, args: string);
    /**
     * Gets a command passed via the FSCommand action of the flash object.
     */
    command: string;
    /**
     * Gets arguments passed via the FSCommand action of the flash object.
     */
    args: string;
}
/**
 * Lists the available link types within office documents.
 */
declare class ASPxClientOfficeDocumentLinkType {
}
/**
 * Represents the client-side equivalent of the ASPxPager control.
 */
declare class ASPxClientPager extends ASPxClientControl {
}
/**
 * Serves as the base class for controls that implement panel functionality.
 */
declare class ASPxClientPanelBase extends ASPxClientControl {
    /**
     * Returns the HTML code that is the content of the panel.
     */
    GetContentHtml(): string;
    /**
     * Sets the HTML content for the panel.
     * @param html A string value that is the HTML code defining the content of the panel.
     */
    SetContentHtml(html: string): void;
    /**
     * Sets a value specifying whether the panel is enabled.
     * @param enabled true to enable the panel; false to disable it.
     */
    SetEnabled(enabled: boolean): void;
    /**
     * Returns a value specifying whether a panel is enabled.
     */
    GetEnabled(): boolean;
    /**
     * Converts the specified object to the current object's type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientPanelBase;
}
/**
 * Represents a client-side equivalent of the ASPxPanel control.
 */
declare class ASPxClientPanel extends ASPxClientPanelBase {
    /**
     * Occurs when the expanded panel is closed.
     */
    Collapsed: ASPxClientEvent<ASPxClientEventHandler<ASPxClientPanel>>;
    /**
     * Occurs when an end-user opens the expand panel.
     */
    Expanded: ASPxClientEvent<ASPxClientEventHandler<ASPxClientPanel>>;
    /**
     * Expands or collapses the client panel.
     */
    Toggle(): void;
    /**
     * Returns a value specifying whether the panel can be expanded.
     */
    IsExpandable(): boolean;
    /**
     * Returns a value specifying whether the panel is expanded.
     */
    IsExpanded(): boolean;
    /**
     * Expands the collapsed panel.
     */
    Expand(): void;
    /**
     * Collapses the expanded panel.
     */
    Collapse(): void;
    /**
     * Converts the specified object to the ASPxClientPanel type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientPanel;
}
/**
 * Serves as a base class for the ASPxClientDockPanel and ASPxClientPopupControl classes.
 */
declare class ASPxClientPopupControlBase extends ASPxClientControl {
    /**
     * Modifies a control's window size in accordance with the content.
     */
    AdjustSize(): void;
    /**
     * Brings the window to the front of the z-order.
     */
    BringToFront(): void;
    /**
     * Returns a value indicating whether the window is collapsed.
     */
    GetCollapsed(): boolean;
    /**
     * Returns the HTML code that specifies the contents of the control's window.
     */
    GetContentHtml(): string;
    /**
     * Returns an iframe object containing a web page specified via the control's ASPxPopupControlBase.ContentUrl property (or the ASPxClientPopupControlBase.SetContentUrl client method).
     */
    GetContentIFrame(): any;
    /**
     * Returns an iframe object containing a web page specified via the control's ASPxPopupControlBase.ContentUrl property (or the ASPxClientPopupControlBase.SetContentUrl client method).
     */
    GetContentIFrameWindow(): any;
    /**
     * Returns the URL pointing to the web page displayed within the control's window.
     */
    GetContentUrl(): string;
    /**
     * Returns the URL pointing to the image displayed within the <strong>window footer</strong> by default.
     */
    GetFooterImageUrl(): string;
    /**
     * Returns the URL where the web browser will navigate when the text or image is clicked within a window's <strong>footer</strong>.
     */
    GetFooterNavigateUrl(): string;
    /**
     * Returns the text displayed within a window's <strong>footer</strong>.
     */
    GetFooterText(): string;
    /**
     * Returns the URL pointing to the image displayed within the <strong>window header</strong>.
     */
    GetHeaderImageUrl(): string;
    /**
     * Returns the URL where the web browser will navigate when the text or image is clicked within a window's <strong>header</strong>.
     */
    GetHeaderNavigateUrl(): string;
    /**
     * Returns the text displayed within a window's <strong>header</strong>.
     */
    GetHeaderText(): string;
    /**
     * Gets the width of the default window's (for ASPxPopupControl) or panel's (for ASPxDockPanel) content region.
     */
    GetContentWidth(): number;
    /**
     * Gets the height of the default window's (for ASPxPopupControl) or panel's (for ASPxDockPanel) content region.
     */
    GetContentHeight(): number;
    /**
     * Returns a value indicating whether the window is maximized.
     */
    GetMaximized(): boolean;
    /**
     * Returns a value indicating whether the window is pinned.
     */
    GetPinned(): boolean;
    /**
     * Sends a callback to the server and generates the server-side ASPxPopupControlBase.WindowCallback event, passing the specified argument to it.
     * @param parameter A string value that is any information that needs to be sent to the server-side ASPxPopupControlBase.WindowCallback event.
     */
    PerformCallback(parameter: string): void;
    /**
     * Refreshes the content of the web page displayed within the control's window.
     */
    RefreshContentUrl(): void;
    /**
     * Sets a value indicating whether the window is collapsed.
     * @param value true, to collapse the window; otherwise, false.
     */
    SetCollapsed(value: boolean): void;
    /**
     * Sets the HTML markup specifying the contents of the control's window.
     * @param html A string value that specifies the HTML markup.
     */
    SetContentHtml(html: string): void;
    /**
     * Sets the URL to point to the web page that should be loaded into, and displayed within the control's window.
     * @param url A string value specifying the URL to the web page displayed within the control's window.
     */
    SetContentUrl(url: string): void;
    /**
     * Specifies the URL which points to the image displayed within the <strong>window footer</strong> by default.
     * @param value A string value that is the URL for the image displayed within the window footer.
     */
    SetFooterImageUrl(value: string): void;
    /**
     * Specifies the URL where the web browser will navigate when the text or image is clicked within a window's <strong>footer</strong>.
     * @param value A string value which specifies the required navigation location.
     */
    SetFooterNavigateUrl(value: string): void;
    /**
     * Specifies the text displayed within a window's <strong>footer</strong>.
     * @param value A string value that specifies a window's footer text.
     */
    SetFooterText(value: string): void;
    /**
     * Specifies the URL which points to the image displayed within the <strong>window header</strong>.
     * @param value A string value that is the URL to the image displayed within the header.
     */
    SetHeaderImageUrl(value: string): void;
    /**
     * Specifies the URL where the web browser will navigate when the text or image is clicked within a window's <strong>header</strong>.
     * @param value A string value which specifies the required navigation location.
     */
    SetHeaderNavigateUrl(value: string): void;
    /**
     * Specifies the  popup window's header text.
     * @param value A string value that specifies a window's header text.
     */
    SetHeaderText(value: string): void;
    /**
     * Sets a value indicating whether the window is maximized.
     * @param value true. to maximize the window; otherwise, false.
     */
    SetMaximized(value: boolean): void;
    /**
     * Sets a value indicating whether the window is pinned.
     * @param value true, to pin the window; otherwise, false.
     */
    SetPinned(value: boolean): void;
    /**
     * Invokes the control's window at the popup element with the specified index.
     * @param popupElementIndex An integer value specifying the zero-based index of the popup element.
     */
    Show(popupElementIndex?: number): void;
    /**
     * Invokes the control's window and displays it over the specified HTML element.
     * @param htmlElement An object specifying the HTML element relative to whose position the window is invoked.
     */
    ShowAtElement(htmlElement: any): void;
    /**
     * Invokes the control's window and displays it over an HTML element specified by its unique identifier.
     * @param id A string value that specifies the hierarchically qualified identifier of an HTML element relative to whose position the window is invoked.
     */
    ShowAtElementByID(id: string): void;
    /**
     * Invokes the control's window at the specified position.
     * @param x A integer value specifying the x-coordinate of the window's display position.
     * @param y A integer value specifying the y-coordinate of the window's display position.
     */
    ShowAtPos(x: number, y: number): void;
    /**
     * Closes the control's window.
     */
    Hide(): void;
    /**
     * Returns a value that specifies whether the control's window is displayed.
     */
    IsVisible(): boolean;
    /**
     * Occurs on the client side when window resizing initiates.
     */
    BeforeResizing: ASPxClientEvent<ASPxClientPopupWindowEventHandler<ASPxClientPopupControlBase>>;
    /**
     * Occurs on the client side when window resizing completes.
     */
    AfterResizing: ASPxClientEvent<ASPxClientPopupWindowEventHandler<ASPxClientPopupControlBase>>;
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientPopupControlBase>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientPopupControlBase>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the control.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientPopupControlBase>>;
    /**
     * Occurs on the client side when a control's window closes or hides.
     */
    CloseUp: ASPxClientEvent<ASPxClientPopupWindowCloseUpEventHandler<ASPxClientPopupControlBase>>;
    /**
     * Enables you to cancel window closing on the client side.
     */
    Closing: ASPxClientEvent<ASPxClientPopupWindowCancelEventHandler<ASPxClientPopupControlBase>>;
    /**
     * Occurs on the client side when a control's window is invoked.
     */
    PopUp: ASPxClientEvent<ASPxClientPopupWindowEventHandler<ASPxClientPopupControlBase>>;
    /**
     * Occurs on the client side after a window has been resized.
     */
    Resize: ASPxClientEvent<ASPxClientPopupWindowResizeEventHandler<ASPxClientPopupControlBase>>;
    /**
     * Occurs on the client side after a control's window has been invoked.
     */
    Shown: ASPxClientEvent<ASPxClientPopupWindowEventHandler<ASPxClientPopupControlBase>>;
    /**
     * Occurs on the client side when the window pin state is changed.
     */
    PinnedChanged: ASPxClientEvent<ASPxClientPopupWindowPinnedChangedEventHandler<ASPxClientPopupControlBase>>;
}
/**
 * A client-side equivalent of the ASPxPopupControl control.
 */
declare class ASPxClientPopupControl extends ASPxClientPopupControlBase {
    /**
     * This method is not in effect for a ASPxClientPopupControl object.
     */
    GetMainElement(): any;
    /**
     * Returns an object containing the information about a mouse event that invoked a default popup window.
     */
    GetPopUpReasonMouseEvent(): any;
    /**
     * Returns an object containing the information about a mouse event that invoked the specified popup window. An object containing the information about the mouse event.
     * @param window A ASPxClientPopupWindow object that specifies the required popup window.
     */
    GetWindowPopUpReasonMouseEvent(window: ASPxClientPopupWindow): any;
    /**
     * Sends a callback with parameters to update the popup window by processing the related popup window and the passed information on the server.
     * @param window A ASPxClientPopupWindow object identifying the processed popup window.
     * @param parameter A string value that represents any information that needs to be sent to the server-side ASPxDataViewBase.CustomCallback event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformWindowCallback(window: ASPxClientPopupWindow, parameter: string, onSuccess?: (arg: string) => void): void;
    /**
     * Occurs when a popup window's <strong>close button</strong> is clicked.
     */
    CloseButtonClick: ASPxClientEvent<ASPxClientPopupWindowEventHandler<ASPxClientPopupControl>>;
    /**
     * Specifies the default popup window's size.
     * @param width An integer value that specifies the default popup window's width.
     * @param height An integer value that specifies the default popup window's height.
     */
    SetSize(width: number, height: number): void;
    /**
     * Gets the width of the specified popup window's <strong>content region</strong>. An integer value representing the width of the content region.
     * @param window An ASPxClientPopupWindow object that specifies the required popup window.
     */
    GetWindowContentWidth(window: ASPxClientPopupWindow): number;
    /**
     * Gets the height of the specified popup window's <strong>content region</strong>. An integer value representing the height of the content region.
     * @param window An ASPxClientPopupWindow object that specifies the required popup window.
     */
    GetWindowContentHeight(window: ASPxClientPopupWindow): number;
    /**
     * Returns the height of a specific popup window. An integer value that represents the specified popup window's height.
     * @param window A ASPxClientPopupWindow object that specifies the required popup window.
     */
    GetWindowHeight(window: ASPxClientPopupWindow): number;
    /**
     * Returns the width of a specific popup window. An integer value that represents the specified popup window's width.
     * @param window A ASPxClientPopupWindow object that specifies the required popup window.
     */
    GetWindowWidth(window: ASPxClientPopupWindow): number;
    /**
     * Specifies the size of a specific popup window.
     * @param window A ASPxClientPopupWindow object that specifies the required popup window.
     * @param width An integer value that specifies the required popup window's width.
     * @param height An integer value that specifies the required popup window's height.
     */
    SetWindowSize(window: ASPxClientPopupWindow, width: number, height: number): void;
    /** @deprecated Use the GetContentHtml method instead. */
    /**
     * Returns the HTML code that is the content of the popup control's default popup window.
     */
    GetContentHTML(): string;
    /** @deprecated Use the SetContentHtml method instead. */
    /**
     * Defines the HTML content for the popup control's default popup window.
     * @param html A string value that is the HTML code defining the content of the popup window.
     */
    SetContentHTML(html: string): void;
    /**
     * Sets the ID of a web control or HTML element (or a list of IDs) with which the current popup control's window is associated.
     * @param window An ASPxClientPopupWindow object representing a popup control's window.
     * @param popupElementId A string value specifying the ID (or a list of IDs) of the web control or HTML element with which the popup control's window is associated.
     */
    SetWindowPopupElementID(window: ASPxClientPopupWindow, popupElementId: string): void;
    /**
     * Sets the ID of a web control or HTML element (or a list of IDs) with which the current popup control is associated.
     * @param popupElementId A string value specifying the ID (or a list of IDs) of the web control or HTML element to which the popup control is associated.
     */
    SetPopupElementID(popupElementId: string): void;
    /**
     * Returns an index of the object that invoked the default window within the ASPxPopupControl.PopupElementID list.
     */
    GetCurrentPopupElementIndex(): number;
    /**
     * Returns an index of the object that invoked the specified popup window, within the window's PopupWindow.PopupElementID list. An Int32 value that is the zero-based position of object's ID within the PopupElementID list.
     * @param window An ASPxClientPopupWindow object that specifies the required popup window.
     */
    GetWindowCurrentPopupElementIndex(window: ASPxClientPopupWindow): number;
    /**
     * Returns an object that invoked the default window.
     */
    GetCurrentPopupElement(): any;
    /**
     * Returns an object that invoked the specified popup window. An object that invoked the specified window.
     * @param window An ASPxClientPopupWindow object that specifies the required popup window.
     */
    GetWindowCurrentPopupElement(window: ASPxClientPopupWindow): any;
    /**
     * Returns a value that specifies whether the popup control's specific window is displayed. true if the specified popup window is displayed; otherwise, false.
     * @param window A ASPxClientPopupWindow object representing the popup window whose visibility is checked.
     */
    IsWindowVisible(window: ASPxClientPopupWindow): boolean;
    /**
     * Returns a popup window specified by its index. An ASPxClientPopupWindow object representing the popup window located at the specified index within the control's ASPxPopupControl.Windows collection.
     * @param index An integer value specifying the zero-based index of the popup window object to be retrieved.
     */
    GetWindow(index: number): ASPxClientPopupWindow;
    /**
     * Returns a popup window specified by its name. An ASPxClientPopupWindow object that represents the popup window with the specified name.
     * @param name A string value specifying the name of the popup window.
     */
    GetWindowByName(name: string): ASPxClientPopupWindow;
    /**
     * Returns the number of popup windows in the popup control.
     */
    GetWindowCount(): number;
    /**
     * Invokes the specified popup window at the popup element with the specified index.
     * @param window A ASPxClientPopupWindow object that specifies the required popup window.
     * @param popupElementIndex An integer value specifying the zero-based index of the popup element within the window's PopupElementID list.
     */
    ShowWindow(window: ASPxClientPopupWindow, popupElementIndex?: number): void;
    /**
     * Invokes the popup control's specific window and displays it over the specified HTML element.
     * @param window A ASPxClientPopupWindow object representing the popup window to display.
     * @param htmlElement An object specifying the HTML element relative to whose position the default popup window is invoked.
     */
    ShowWindowAtElement(window: ASPxClientPopupWindow, htmlElement: any): void;
    /**
     * Invokes the popup control's specific window and displays it over an HTML element specified by its unique identifier.
     * @param window A ASPxClientPopupWindow object representing the popup window to display.
     * @param id A string value that specifies the hierarchically qualified identifier of an HTML element relative to whose position the default popup window is invoked.
     */
    ShowWindowAtElementByID(window: ASPxClientPopupWindow, id: string): void;
    /**
     * Invokes the popup control's specific popup window at the specified position.
     * @param window A ASPxClientPopupWindow object representing the popup window to display.
     * @param x A integer value specifying the x-coordinate of the popup window's display position.
     * @param y A integer value specifying the y-coordinate of the popup window's display position.
     */
    ShowWindowAtPos(window: ASPxClientPopupWindow, x: number, y: number): void;
    /**
     * Brings the specified popup window to the front of the z-order.
     * @param window A ASPxClientPopupWindow object representing the popup window.
     */
    BringWindowToFront(window: ASPxClientPopupWindow): void;
    /**
     * Closes the popup control's specified window.
     * @param window A ASPxClientPopupWindow object representing the popup window to close.
     */
    HideWindow(window: ASPxClientPopupWindow): void;
    /**
     * Returns the HTML code that represents the contents of the specified popup window. A string that represents the specified popup window's HTML content.
     * @param window An ASPxClientPopupWindow object that specifies the required popup window.
     */
    GetWindowContentHtml(window: ASPxClientPopupWindow): string;
    /**
     * Defines the HTML content for a specific popup window within the popup control.
     * @param window An ASPxClientPopupWindow object that specifies the required popup window.
     * @param html A string value that represents the HTML code defining the content of the specified popup window.
     */
    SetWindowContentHtml(window: ASPxClientPopupWindow, html: string): void;
    /**
     * Stretches the popup window in adaptive mode vertically to the full height of the browser window.
     */
    StretchVertically(): void;
    /**
     * Stretches the specified popup window in adaptive mode vertically to the full height of the browser window.
     * @param window A ASPxClientPopupWindow object representing the required popup window.
     */
    WindowStretchVertically(window: ASPxClientPopupWindow): void;
    /**
     * Sets the minimum width of the popup window in adaptive mode.
     * @param minWidth A string value specifying the minimum width of the popup window in adaptive mode as a percentage of the browser window inner width value.
     */
    SetAdaptiveMinWidth(minWidth: number | string): void;
    /**
     * Sets the minimum width of the specified popup window in adaptive mode.
     * @param window A ASPxClientPopupWindow object representing the required popup window.
     * @param minWidth An integer value specifying the minimum width of the popup window in adaptive mode as a percentage of the browser window inner width value.
     */
    SetWindowAdaptiveMinWidth(window: ASPxClientPopupWindow, minWidth: number | string): void;
    /**
     * Sets the maximum width of the popup window in adaptive mode.
     * @param maxWidth A string value specifying the maximum width of the popup window in adaptive mode as a percentage of the browser window inner width value.
     */
    SetAdaptiveMaxWidth(maxWidth: number | string): void;
    /**
     * Sets the maximum width of the specified popup window in adaptive mode.
     * @param window A ASPxClientPopupWindow object representing the required popup window.
     * @param maxWidth An integer value specifying the maximum width of the popup window in adaptive mode as a percentage of the browser window inner width value.
     */
    SetWindowAdaptiveMaxWidth(window: ASPxClientPopupWindow, maxWidth: number | string): void;
    /**
     * Sets the minimum height of the popup window in adaptive mode.
     * @param minHeight A string value specifying the minimum height of the popup window in adaptive mode as a percentage of the browser window inner height value.
     */
    SetAdaptiveMinHeight(minHeight: number | string): void;
    /**
     * Sets the minimum height of the specified popup window in adaptive mode.
     * @param window A ASPxClientPopupWindow object representing the required popup window.
     * @param minHeight An integer value specifying the minimum height of the popup window in adaptive mode as a percentage of the browser window inner height value.
     */
    SetWindowAdaptiveMinHeight(window: ASPxClientPopupWindow, minHeight: number | string): void;
    /**
     * Sets the maximum height of the popup window in adaptive mode.
     * @param maxHeight A string value specifying the maximum height of the popup window in adaptive mode as a percentage of the browser window inner height value.
     */
    SetAdaptiveMaxHeight(maxHeight: number | string): void;
    /**
     * Sets the maximum height of the specified popup window in adaptive mode.
     * @param window A ASPxClientPopupWindow object representing the required popup window.
     * @param maxHeight An integer value specifying the maximum height of the popup window in adaptive mode.
     */
    SetWindowAdaptiveMaxHeight(window: ASPxClientPopupWindow, maxHeight: number | string): void;
    /**
     * Returns an iframe object containing a web page specified via the specified popup window's PopupWindow.ContentUrl property (or the popup control's ASPxClientPopupControl.SetWindowContentUrl client method). The iframe object that contains a web page displayed within the specified popup window.
     * @param window A ASPxClientPopupWindow object representing the required popup window.
     */
    GetWindowContentIFrame(window: ASPxClientPopupWindow): any;
    /**
     * Returns the URL pointing to the web page displayed within the control's specific popup window. A string value representing the URL to the web page displayed within the specified popup window.
     * @param window A ASPxClientPopupWindow object representing the required popup window.
     */
    GetWindowContentUrl(window: ASPxClientPopupWindow): string;
    /**
     * Sets the URL pointing to the web page that should be loaded into and displayed within the control's specific popup window.
     * @param window A ASPxClientPopupWindow object representing the required popup window.
     * @param url A string value specifying the URL to the web page to be displayed within the specified popup window.
     */
    SetWindowContentUrl(window: ASPxClientPopupWindow, url: string): void;
    /**
     * Returns a value indicating whether the specified window is pinned. true if the window is pinned; otherwise, false.
     * @param window An ASPxClientPopupWindow object specifying the popup window.
     */
    GetWindowPinned(window: ASPxClientPopupWindow): boolean;
    /**
     * Sets a value indicating whether the specified window is pinned.
     * @param window An ASPxClientPopupWindow object specifying the popup window.
     * @param value true to pin the window; otherwise, false.
     */
    SetWindowPinned(window: ASPxClientPopupWindow, value: boolean): void;
    /**
     * Returns a value indicating whether the specified window is maximized. true if the window is maximized; otherwise, false.
     * @param window An ASPxClientPopupWindow object specifying the popup window.
     */
    GetWindowMaximized(window: ASPxClientPopupWindow): boolean;
    /**
     * Sets a value indicating whether the specified window is maximized.
     * @param window An ASPxClientPopupWindow object specifying the popup window.
     * @param value true to maximize the window; otherwise, false.
     */
    SetWindowMaximized(window: ASPxClientPopupWindow, value: boolean): void;
    /**
     * Returns a value indicating whether the specified window is collapsed. true if the window is collapsed; otherwise, false.
     * @param window An ASPxClientPopupWindow object specifying the popup window.
     */
    GetWindowCollapsed(window: ASPxClientPopupWindow): boolean;
    /**
     * Sets a value indicating whether the specified window is collapsed.
     * @param window An ASPxClientPopupWindow object specifying the popup window.
     * @param value true to collapse the window; otherwise, false.
     */
    SetWindowCollapsed(window: ASPxClientPopupWindow, value: boolean): void;
    /**
     * Refreshes the content of the web page displayed within the control's specific popup window.
     * @param window A ASPxClientPopupWindow object representing the required popup window.
     */
    RefreshWindowContentUrl(window: ASPxClientPopupWindow): void;
    /**
     * Updates the default popup window's position, to correctly align it at either the specified element, or the center of the browser's window.
     */
    UpdatePosition(): void;
    /**
     * Updates the default popup window's position, to correctly align it at the specified HTML element.
     * @param htmlElement An object specifying the HTML element to which the default popup window is aligned using the ASPxPopupControl.PopupHorizontalAlign and ASPxPopupControl.PopupVerticalAlign properties.
     */
    UpdatePositionAtElement(htmlElement: any): void;
    /**
     * Updates the specified popup window's position, to correctly align it at either the specified element, or the center of the browser's window.
     * @param window An ASPxClientPopupWindow object that specifies the required popup window.
     */
    UpdateWindowPosition(window: ASPxClientPopupWindow): void;
    /**
     * Updates the specified popup window's position, to correctly align it at the specified HTML element.
     * @param window An ASPxClientPopupWindow object that specifies the required popup window.
     * @param htmlElement An object specifying the HTML element to which the specified popup window is aligned using the ASPxPopupControl.PopupHorizontalAlign and ASPxPopupControl.PopupVerticalAlign properties.
     */
    UpdateWindowPositionAtElement(window: ASPxClientPopupWindow, htmlElement: any): void;
    /**
     * Refreshes the connection between the ASPxPopupControl and the popup element.
     */
    RefreshPopupElementConnection(): void;
    /**
     * Converts the specified object to the ASPxClientPopupControl type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientPopupControl;
    /**
     * Returns a collection of client popup control objects.
     */
    static GetPopupControlCollection(): ASPxClientPopupControlCollection;
}
/**
 * Represents a client-side equivalent of a popup control's PopupWindow object.
 */
declare class ASPxClientPopupWindow {
    /**
     * Gets the popup control to which the current popup window belongs.
     */
    popupControl: ASPxClientPopupControl;
    /**
     * Gets the index of the current popup window within the popup control's ASPxPopupControl.Windows collection.
     */
    index: number;
    /**
     * Gets the name that uniquely identifies the current popup window.
     */
    name: string;
    /**
     * Returns the URL pointing to the image displayed within the <strong>window header</strong>.
     */
    GetHeaderImageUrl(): string;
    /**
     * Specifies the URL which points to the image displayed within the <strong>window header</strong>.
     * @param value A string value that is the URL to the image displayed within the header.
     */
    SetHeaderImageUrl(value: string): void;
    /**
     * Returns the URL pointing to the image displayed within the <strong>window footer</strong>.
     */
    GetFooterImageUrl(): string;
    /**
     * Specifies the URL which points to the image displayed within the <strong>window footer</strong>.
     * @param value A string value that is the URL to the image displayed within the window footer.
     */
    SetFooterImageUrl(value: string): void;
    /**
     * Returns the URL where the web browser will navigate when the text or image is clicked within the popup window's <strong>header</strong>.
     */
    GetHeaderNavigateUrl(): string;
    /**
     * Returns the URL where the web browser will navigate when the text or image is clicked within the popup window's <strong>header</strong>.
     * @param value A string value which specifies the required navigation location.
     */
    SetHeaderNavigateUrl(value: string): void;
    /**
     * Returns the URL where the web browser will navigate when the text or image is clicked within the popup window's <strong>footer</strong>.
     */
    GetFooterNavigateUrl(): string;
    /**
     * Specifies the URL where the web browser will navigate when the text or image is clicked within the popup window's <strong>footer</strong>.
     * @param value A string value which specifies the required navigation location.
     */
    SetFooterNavigateUrl(value: string): void;
    /**
     * Returns the text displayed within the window's <strong>header</strong>.
     */
    GetHeaderText(): string;
    /**
     * Specifies the text displayed within the window's <strong>header</strong>.
     * @param value A string value that specifies the window's header text.
     */
    SetHeaderText(value: string): void;
    /**
     * Returns the text displayed within the popup window's <strong>footer</strong>.
     */
    GetFooterText(): string;
    /**
     * Specifies the text displayed within the window's <strong>footer</strong>.
     * @param value A string value that specifies the window's footer text.
     */
    SetFooterText(value: string): void;
}
/**
 * A method that will handle the popup control's client events when a popup window is manipulated.
 * @param source An object representing the event's source. Identifies the popup control object (ASPxClientPopupControl) that raised the event.
 * @param e An ASPxClientPopupWindowEventArgs object that contains event data.
 */
interface ASPxClientPopupWindowEventHandler<Sender> { (source: Sender, e: ASPxClientPopupWindowEventArgs): void; }
/**
 * Provides data for events concerning client manipulations on popup windows.
 */
declare class ASPxClientPopupWindowEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientPopupWindowEventArgs class.
     * @param window A ASPxClientPopupWindow object representing the popup window related to the generated event.
     */
    constructor(window: ASPxClientPopupWindow);
    /**
     * Gets the popup window object related to the event.
     */
    window: ASPxClientPopupWindow;
}
/**
 * A method that will handle the popup window's cancelable client events.
 * @param source An object representing the event's source. Identifies the popup window object that raised the event.
 * @param e An ASPxClientPopupWindowCancelEventArgs object that contains event data.
 */
interface ASPxClientPopupWindowCancelEventHandler<Sender> { (source: Sender, e: ASPxClientPopupWindowCancelEventArgs): void; }
/**
 * Provides data for the popup control's cancellable client events, such as the ASPxClientPopupControlBase.Closing.
 */
declare class ASPxClientPopupWindowCancelEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientPopupWindowCancelEventArgs class with the specified settings.
     * @param window An ASPxClientPopupWindow object that is a popup window related to the generated event.
     * @param closeReason One of the ASPxClientPopupControlCloseReason enumeration values that specifies the reason the popup window is about to close.
     */
    constructor(window: ASPxClientPopupWindow, closeReason: ASPxClientPopupControlCloseReason);
    /**
     * Gets the popup window object related to the event.
     */
    window: ASPxClientPopupWindow;
    /**
     * Gets the value that identifies the reason the popup window is about to close.
     */
    closeReason: ASPxClientPopupControlCloseReason;
}
/**
 * A method that will handle the ASPxClientPopupControlBase.CloseUp event.
 * @param source The event source.
 * @param e An ASPxClientPopupWindowCloseUpEventArgs object that contains event data.
 */
interface ASPxClientPopupWindowCloseUpEventHandler<Sender> { (source: Sender, e: ASPxClientPopupWindowCloseUpEventArgs): void; }
/**
 * Provides data for the ASPxClientPopupControlBase.CloseUp event.
 */
declare class ASPxClientPopupWindowCloseUpEventArgs extends ASPxClientPopupWindowEventArgs {
    /**
     * Initializes a new instance of the ASPxClientPopupWindowCloseUpEventArgs class with the specified settings.
     * @param window An ASPxClientPopupWindow object that is a popup window related to the generated event.
     * @param closeReason One of the ASPxClientPopupControlCloseReason enumeration values that specifies the reason the popup window closes.
     */
    constructor(window: ASPxClientPopupWindow, closeReason: ASPxClientPopupControlCloseReason);
    /**
     * Gets the value that identifies the reason the popup window closes.
     */
    closeReason: ASPxClientPopupControlCloseReason;
}
/**
 * A method that will handle the ASPxClientPopupControlBase.Resize event.
 * @param source The event source.
 * @param e A ASPxClientPopupWindowResizeEventArgs object that contains event data.
 */
interface ASPxClientPopupWindowResizeEventHandler<Sender> { (source: Sender, e: ASPxClientPopupWindowResizeEventArgs): void; }
/**
 * Provides data for the ASPxClientPopupControlBase.Resize event.
 */
declare class ASPxClientPopupWindowResizeEventArgs extends ASPxClientPopupWindowEventArgs {
    /**
     * Initializes a new instance of the ASPxClientPopupWindowResizeEventArgs class with the specified settings.
     * @param window An ASPxClientPopupWindow object that is a popup window related to the generated event.
     * @param resizeState The integer value determining the window state.
     */
    constructor(window: ASPxClientPopupWindow, resizeState: number);
    /**
     * Returns the value indicating the window state after resizing.
     */
    resizeState: number;
}
/**
 * A method that will handle the ASPxClientPopupControlBase.PinnedChanged event.
 * @param source The event source.
 * @param e A ASPxClientPopupWindowPinnedChangedEventArgs object that contains event data.
 */
interface ASPxClientPopupWindowPinnedChangedEventHandler<Sender> { (source: Sender, e: ASPxClientPopupWindowPinnedChangedEventArgs): void; }
/**
 * Provides data for the ASPxClientPopupControlBase.PinnedChanged event.
 */
declare class ASPxClientPopupWindowPinnedChangedEventArgs extends ASPxClientPopupWindowEventArgs {
    /**
     * Initializes a new instance of the ASPxClientPopupWindowPinnedChangedEventArgs class with the specified settings.
     * @param window An ASPxClientPopupWindow object that is a popup window related to the generated event.
     * @param pinned true if the window has been pinned; false if the window has been unpinned.
     */
    constructor(window: ASPxClientPopupWindow, pinned: boolean);
    /**
     * Gets a value indicating whether the processed popup window has been pinned.
     */
    pinned: boolean;
}
/**
 * Represents a client collection that maintains client popup control objects.
 */
declare class ASPxClientPopupControlCollection extends ASPxClientControlCollection {
    /**
     * Hides all popup windows maintained by the collection.
     */
    HideAllWindows(): void;
}
/**
 * Declares client constants that contain the identifiers of the window states.
 */
declare class ASPxClientPopupControlResizeState {
    /**
     * A window has been resized. Returns 0.
     */
    static readonly Resized: number;
    /**
     * A window has been collapsed. Returns 1.
     */
    static readonly Collapsed: number;
    /**
     * A window has been expanded. Returns 2.
     */
    static readonly Expanded: number;
    /**
     * A window has been maximized. Returns 3.
     */
    static readonly Maximized: number;
    /**
     * A window has been restored after maximizing. Returns 4.
     */
    static readonly RestoredAfterMaximized: number;
}
/**
 * Declares client constants that identify the reason the popup window closes.
 */
declare class ASPxClientPopupControlCloseReason {
    /**
     * The window has been closed by an API.
     */
    static readonly API: string;
    /**
     * An end-user clicks the close <strong>header button</strong>.
     */
    static readonly CloseButton: string;
    /**
     * An end-user clicks outside the window's region
     */
    static readonly OuterMouseClick: string;
    /**
     * An end-user moves the mouse pointer out of the window region.
     */
    static readonly MouseOut: string;
    /**
     * An end-user presses the ESC key.
     */
    static readonly Escape: string;
}
/**
 * Represents a client-side equivalent of the ASPxPopupMenu object.
 */
declare class ASPxClientPopupMenu extends ASPxClientMenuBase {
    /**
     * Sets the ID of a web control or HTML element (or a list of IDs) with which the current popup menu is associated.
     * @param popupElementId A string value specifying the ID (or a list of IDs) of the web control or HTML element with which the popup menu is associated.
     */
    SetPopupElementID(popupElementId: string): void;
    /**
     * Returns an index of the object that invoked the popup menu within the ASPxPopupMenu.PopupElementID list.
     */
    GetCurrentPopupElementIndex(): number;
    /**
     * Returns an object that invoked the popup menu.
     */
    GetCurrentPopupElement(): any;
    /**
     * Refreshes the connection between the ASPxPopupMenu and the popup element.
     */
    RefreshPopupElementConnection(): void;
    /**
     * Hides the popup menu.
     */
    Hide(): void;
    /**
     * Invokes the popup menu at the popup element with the specified index.
     * @param popupElementIndex An integer value specifying the zero-based index of the popup element.
     */
    Show(popupElementIndex?: number): void;
    /**
     * Invokes the popup menu and displays it over the specified HTML element.
     * @param htmlElement An object specifying the HTML element relative to which position the popup menu is invoked.
     */
    ShowAtElement(htmlElement: any): void;
    /**
     * Invokes the popup menu and displays it over an HTML element specified by its unique identifier.
     * @param id A string value that specifies the hierarchically qualified identifier of an HTML element relative to which position the popup menu is invoked.
     */
    ShowAtElementByID(id: string): void;
    /**
     * Invokes the popup menu at the specified position.
     * @param x An integer value specifying the x-coordinate of the popup menu's display position.
     * @param y An integer value specifying the y-coordinate of the popup menu's display position.
     */
    ShowAtPos(x: number, y: number): void;
    /**
     * Converts the specified object to the ASPxClientPopupMenu type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientPopupMenu;
}
/**
 * Represents the client-side equivalent of the ASPxRatingControl control.
 */
declare class ASPxClientRatingControl extends ASPxClientControl {
    /**
     * Fires on the server after an item has been clicked.
     */
    ItemClick: ASPxClientEvent<ASPxClientRatingControlItemClickEventHandler<ASPxClientRatingControl>>;
    /**
     * Occurs on the client side when the mouse cursor is moved into a rating control item.
     */
    ItemMouseOver: ASPxClientEvent<ASPxClientRatingControlItemMouseEventHandler<ASPxClientRatingControl>>;
    /**
     * Occurs on the client side when the mouse cursor moves outside a rating control item.
     */
    ItemMouseOut: ASPxClientEvent<ASPxClientRatingControlItemMouseEventHandler<ASPxClientRatingControl>>;
    /**
     * Gets the item tooltip title specified by the item index. A string that is the specified item tooltip title.
     * @param index An integer value specifying the item index.
     */
    GetTitle(index: number): string;
    /**
     * Returns a value indicating whether the control's status is read-only.
     */
    GetReadOnly(): boolean;
    /**
     * Specifies whether the control's status is read-only.
     * @param value true to make the control read-only; otherwise, false.
     */
    SetReadOnly(value: boolean): void;
    /**
     * Returns the value of the ASPxRatingControl.
     */
    GetValue(): number;
    /**
     * Modifies the value of the ASPxRatingControl on the client side.
     * @param value A decimal value representing the value of the control.
     */
    SetValue(value: number): void;
    /**
     * Converts the specified object to the ASPxClientRatingControl type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientRatingControl;
}
/**
 * A method that will handle the client ASPxClientRatingControl.ItemClick event.
 * @param source An object representing the event source.
 * @param e A ASPxClientRatingControlItemClickEventArgs object that contains event data.
 */
interface ASPxClientRatingControlItemClickEventHandler<Sender> { (source: Sender, e: ASPxClientRatingControlItemClickEventArgs): void; }
/**
 * Provides data for the ASPxClientRatingControl.ItemClick event.
 */
declare class ASPxClientRatingControlItemClickEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Initializes a new ASPxClientRatingControlItemClickEventArgs class instance with the specified settings.
     * @param processOnServer true to process the event on the server side; false to completely handle it on the client side.
     * @param index An integer value that represents the index of the clicked item.
     */
    constructor(processOnServer: boolean, index: number);
    /**
     * Gets the index of the item related to the event.
     */
    index: number;
}
/**
 * A method that will handle the ASPxClientRatingControl.ItemMouseOut and ASPxClientRatingControl.ItemMouseOver events.
 * @param source The event source.
 * @param e An ASPxClientRatingControlItemMouseEventArgs object that contains event data.
 */
interface ASPxClientRatingControlItemMouseEventHandler<Sender> { (source: Sender, e: ASPxClientRatingControlItemMouseEventArgs): void; }
/**
 * Provides data for the rating control's ItemMouseOver and ItemMouseOut client events (such as ASPxClientRatingControl.ItemMouseOver and ASPxClientRatingControl.ItemMouseOut).
 */
declare class ASPxClientRatingControlItemMouseEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientRatingControlItemMouseEventArgs class.
     * @param index An integer value that represents the index of the item being processed. This value is assigned to the ASPxClientRatingControlItemMouseEventArgs.index property.
     */
    constructor(index: number);
    /**
     * Gets the index of the item related to the event.
     */
    index: number;
}
/**
 * Represents the client-side equivalent of the ASPxRibbon control.
 */
declare class ASPxClientRibbon extends ASPxClientControl {
    /**
     * Occurs after an end-user executes an action on a ribbon item.
     */
    CommandExecuted: ASPxClientEvent<ASPxClientRibbonCommandExecutedEventHandler<ASPxClientRibbon>>;
    /**
     * Fires on the client side after the active tab has been changed within a ribbon control.
     */
    ActiveTabChanged: ASPxClientEvent<ASPxClientRibbonTabEventHandler<ASPxClientRibbon>>;
    /**
     * Occurs on the client side when the ribbon minimization state is changed by end-user actions.
     */
    MinimizationStateChanged: ASPxClientEvent<ASPxClientRibbonMinimizationStateEventHandler<ASPxClientRibbon>>;
    /**
     * Occurs when the file tab is clicked.
     */
    FileTabClicked: ASPxClientEvent<ASPxClientEventHandler<ASPxClientRibbon>>;
    /**
     * Fires on the client side after a dialog box launcher has been clicked.
     */
    DialogBoxLauncherClicked: ASPxClientEvent<ASPxClientRibbonDialogBoxLauncherClickedEventHandler<ASPxClientRibbon>>;
    /**
     * Fires after key tips are closed by pressing Esc.
     */
    KeyTipsClosedOnEscape: ASPxClientEvent<ASPxClientEventHandler<ASPxClientRibbon>>;
    /**
     * Specifies whether the ribbon control is enabled.
     * @param enabled true to enable the ribbon; false to disable it.
     */
    SetEnabled(enabled: boolean): void;
    /**
     * Returns a value indicating whether the ribbon is enabled.
     */
    GetEnabled(): boolean;
    /**
     * Returns a tab specified by its index. An ASPxClientRibbonTab object that is the tab located at the specified index within the control's ASPxRibbon.Tabs collection.
     * @param index An integer value specifying the zero-based index of the tab object to retrieve.
     */
    GetTab(index: number): ASPxClientRibbonTab;
    /**
     * Returns a tab specified by its name. An ASPxClientRibbonTab object that is the tab with the specified name.
     * @param name A string value specifying the name of the tab.
     */
    GetTabByName(name: string): ASPxClientRibbonTab;
    /**
     * Returns the number of tabs in the ribbon ASPxRibbon.Tabs collection.
     */
    GetTabCount(): number;
    /**
     * Returns the active tab within the ribbon control.
     */
    GetActiveTab(): ASPxClientRibbonTab;
    /**
     * Makes the specified tab active in the ribbon control on the client side.
     * @param tab A ASPxClientRibbonTab object specifying the tab selection.
     */
    SetActiveTab(tab: ASPxClientRibbonTab): void;
    /**
     * Makes a tab active within the ribbon control, specifying the tab's index.
     * @param index An integer value specifying the index of the tab to select.
     */
    SetActiveTabIndex(index: number): void;
    /**
     * Returns a ribbon item specified by its name. An ASPxClientRibbonItem object that is the ribbon item with the specified name.
     * @param name A string value specifying the name of the item.
     */
    GetItemByName(name: string): ASPxClientRibbonItem;
    /**
     * Returns a value of item with the specified name. An Object that is the value of the item with the specified name.
     * @param name A string value specifying the name of the item.
     */
    GetItemValueByName(name: string): any;
    /**
     * Sets the value of the item with the specified name.
     * @param name A string value specifying the name of the item.
     * @param value An object that is the new item value.
     */
    SetItemValueByName(name: string, value: any): void;
    /**
     * Specifies whether the ribbon is minimized.
     * @param minimized true to set the ribbon state to minimized; false to set the ribbon state to normal.
     */
    SetMinimized(minimized: boolean): void;
    /**
     * Gets a value specifying whether the ribbon is minimized.
     */
    GetMinimized(): boolean;
    /**
     * Specifies the visibility of a context tab category specified by its name.
     * @param categoryName A String value that is the RibbonContextTabCategory.Name property value of the required category.
     * @param visible true to make a category visible; false to make it hidden.
     */
    SetContextTabCategoryVisible(categoryName: string, visible: boolean): void;
    /**
     * Shows ribbon key tips.
     */
    ShowKeyTips(): void;
    /**
     * Converts the specified object to the ASPxClientRibbon type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientRibbon;
}
/**
 * A client-side equivalent of the ribbon's RibbonTab object.
 */
declare class ASPxClientRibbonTab {
    /**
     * Gets the client ribbon object to which the current tab belongs.
     */
    ribbon: ASPxClientRibbon;
    /**
     * Gets or sets the tab's index within the collection.
     */
    index: number;
    /**
     * Gets the name of the current ribbon tab.
     */
    name: string;
    /**
     * Returns the text displayed in the tab.
     */
    GetText(): string;
    /**
     * Sets a value specifying whether the tab is enabled.
     * @param enabled true to enable the tab; false to disable it.
     */
    SetEnabled(enabled: boolean): void;
    /**
     * Returns a value indicating whether a ribbon tab is enabled.
     */
    GetEnabled(): boolean;
    /**
     * Returns a value specifying whether a ribbon tab is displayed.
     */
    GetVisible(): boolean;
}
/**
 * A client-side equivalent of the ribbon's RibbonGroup object.
 */
declare class ASPxClientRibbonGroup {
    /**
     * Gets the client ribbon object to which the current group belongs.
     */
    ribbon: ASPxClientRibbon;
    /**
     * Gets the client tab object to which the current group belongs.
     */
    tab: ASPxClientRibbonTab;
    /**
     * Gets or sets the group's index within the collection.
     */
    index: number;
    /**
     * Gets the name of the current ribbon group.
     */
    name: string;
    /**
     * Returns a value specifying whether a ribbon group is displayed.
     */
    GetVisible(): boolean;
}
/**
 * A client-side equivalent of the ribbon's RibbonItemBase object.
 */
declare class ASPxClientRibbonItem {
    /**
     * Gets the client group object to which the current item belongs.
     */
    group: ASPxClientRibbonGroup;
    /**
     * Gets or sets the item's index within the collection.
     */
    index: number;
    /**
     * Gets the name of the current ribbon item.
     */
    name: string;
    /**
     * Gets the client ribbon object to which the current item belongs.
     */
    ribbon: ASPxClientRibbon;
    /**
     * Returns a value indicating whether a ribbon item is enabled.
     */
    GetEnabled(): boolean;
    /**
     * Sets a value specifying whether the item is enabled.
     * @param enabled true to enable the item; false to disable it.
     */
    SetEnabled(enabled: boolean): void;
    /**
     * Returns the item value.
     */
    GetValue(): any;
    /**
     * Sets the item value.
     * @param value An  that specifies the item value.
     */
    SetValue(value: any): void;
    /**
     * Returns a value specifying whether a ribbon item is displayed.
     */
    GetVisible(): boolean;
}
/**
 * A method that will handle the ASPxClientRibbon.CommandExecuted event.
 * @param source The event source. Identifies the ASPxRibbon control that raised the event.
 * @param e An ASPxClientRibbonCommandExecutedEventArgs object that contains event data.
 */
interface ASPxClientRibbonCommandExecutedEventHandler<Sender> { (source: Sender, e: ASPxClientRibbonCommandExecutedEventArgs): void; }
/**
 * Provides data for the ASPxClientRibbon.CommandExecuted event.
 */
declare class ASPxClientRibbonCommandExecutedEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Initializes a new object of the ASPxClientRibbonCommandExecutedEventArgs type with the specified settings.
     * @param item An ASPxClientRibbonItem object, manipulations on which forced the event to be raised.
     * @param parameter A string value containing additional information about the processed command.
     * @param processOnServer true to process the event on the server side; false to completely handle it on the client side.
     */
    constructor(item: ASPxClientRibbonItem, parameter: string, processOnServer: boolean);
    /**
     * Gets an item object related to the event.
     */
    item: ASPxClientRibbonItem;
    /**
     * Gets an optional parameter that complements the processed command.
     */
    parameter: string;
}
/**
 * A method that will handle the ASPxClientRibbon.ActiveTabChanged event.
 * @param source The event source. Identifies the ASPxRibbon control that raised the event.
 * @param e A ASPxClientRibbonTabEventArgs object that contains event data.
 */
interface ASPxClientRibbonTabEventHandler<Sender> { (source: Sender, e: ASPxClientRibbonTabEventArgs): void; }
/**
 * Provides data for the ASPxClientRibbon.ActiveTabChanged event.
 */
declare class ASPxClientRibbonTabEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientRibbonTabEventArgs class with the specified setting.
     * @param tab An ASPxClientRibbonTab object that is a tab related to the event.
     */
    constructor(tab: ASPxClientRibbonTab);
    /**
     * Gets the tab object related to the event.
     */
    tab: ASPxClientRibbonTab;
}
/**
 * A method that will handle the ASPxClientRibbon.MinimizationStateChanged event.
 * @param source The event source. Identifies the ASPxRibbon control that raised the event.
 * @param e An ASPxClientRibbonMinimizationStateEventArgs object that contains event data.
 */
interface ASPxClientRibbonMinimizationStateEventHandler<Sender> { (source: Sender, e: ASPxClientRibbonMinimizationStateEventArgs): void; }
/**
 * Provides data for the ASPxClientRibbon.MinimizationStateChanged event.
 */
declare class ASPxClientRibbonMinimizationStateEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientRibbonMinimizationStateEventArgs class with the specified setting.
     * @param ribbonState The integer value indicating the new ribbon minimization state.
     */
    constructor(ribbonState: number);
    /**
     * Returns the value indicating the new ribbon state.
     */
    ribbonState: number;
}
/**
 * A method that will handle the ASPxClientRibbon.DialogBoxLauncherClicked event.
 * @param source The event source. This parameter identifies the ribbon object which raised the event.
 * @param e An ASPxClientRibbonDialogBoxLauncherClickedEventArgs object that contains event data.
 */
interface ASPxClientRibbonDialogBoxLauncherClickedEventHandler<Sender> { (source: Sender, e: ASPxClientRibbonDialogBoxLauncherClickedEventArgs): void; }
/**
 * Provides data for the ASPxClientRibbon.DialogBoxLauncherClicked event.
 */
declare class ASPxClientRibbonDialogBoxLauncherClickedEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Initializes a new object of the ASPxClientRibbonDialogBoxLauncherClickedEventArgs type with the specified settings.
     * @param group An ASPxClientRibbonGroup object to which the dialog box launcher belongs.
     * @param processOnServer true to process the event on the server side; false to completely handle it on the client side.
     */
    constructor(group: ASPxClientRibbonGroup, processOnServer: boolean);
    /**
     * Gets the client group object to which the clicked dialog box launcher belongs.
     */
    group: ASPxClientRibbonGroup;
}
/**
 * Declares client constants that contain the identifiers of ribbon minimization states.
 */
declare class ASPxClientRibbonState {
    /**
     * A ribbon is in the normal state. Returns 0
     */
    static readonly Normal: number;
    /**
     * A ribbon is minimized. Returns 1
     */
    static readonly Minimized: number;
    /**
     * A ribbon is temporarily shown. Returns 2
     */
    static readonly TemporaryShown: number;
}
/**
 * Represents a client-side equivalent of the ASPxRoundPanel control.
 */
declare class ASPxClientRoundPanel extends ASPxClientPanelBase {
    /**
     * Fires on the client side after a panel has been expanded or collapsed via end-user interactions, i.e., by clicking a panel header or collapse button.
     */
    CollapsedChanged: ASPxClientEvent<ASPxClientEventHandler<ASPxClientRoundPanel>>;
    /**
     * Fires on the client side before a panel is expanded or collapsed by end-user interactions, i.e., by clicking a panel header or collapse button.
     */
    CollapsedChanging: ASPxClientEvent<ASPxClientCancelEventHandler<ASPxClientRoundPanel>>;
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientRoundPanel>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientRoundPanel>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientRoundPanel.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientRoundPanel>>;
    /**
     * Sends a callback to the server and generates the server-side ASPxRoundPanel.ContentCallback event, passing it the specified argument.
     * @param parameter A string value that is any information that needs to be sent to the server-side ASPxRoundPanel.ContentCallback event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(parameter: string, onSuccess?: (arg: string) => void): void;
    /**
     * Returns the text displayed within the panel's header.
     */
    GetHeaderText(): string;
    /**
     * Specifies the text displayed in the panel's header.
     * @param text A string value that specifies the panel header's text.
     */
    SetHeaderText(text: string): void;
    /**
     * Returns a value indicating whether the panel is collapsed.
     */
    GetCollapsed(): boolean;
    /**
     * Sets a value indicating whether the panel is collapsed.
     * @param collapsed true, to collapse the panel; otherwise, false.
     */
    SetCollapsed(collapsed: boolean): void;
    /**
     * Converts the specified object to the ASPxClientRoundPanel type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientRoundPanel;
}
/**
 * Represents a client-side equivalent of the ASPxSplitter object.
 */
declare class ASPxClientSplitter extends ASPxClientControl {
    /**
     * Fires before a pane is resized.
     */
    PaneResizing: ASPxClientEvent<ASPxClientSplitterPaneCancelEventHandler<ASPxClientSplitter>>;
    /**
     * Fires after a pane has been resized.
     */
    PaneResized: ASPxClientEvent<ASPxClientSplitterPaneEventHandler<ASPxClientSplitter>>;
    /**
     * Fires before a pane is collapsed.
     */
    PaneCollapsing: ASPxClientEvent<ASPxClientSplitterPaneCancelEventHandler<ASPxClientSplitter>>;
    /**
     * Fires after a pane has been collapsed.
     */
    PaneCollapsed: ASPxClientEvent<ASPxClientSplitterPaneEventHandler<ASPxClientSplitter>>;
    /**
     * Fires before a pane is expanded.
     */
    PaneExpanding: ASPxClientEvent<ASPxClientSplitterPaneCancelEventHandler<ASPxClientSplitter>>;
    /**
     * Fires after a pane has been expanded.
     */
    PaneExpanded: ASPxClientEvent<ASPxClientSplitterPaneEventHandler<ASPxClientSplitter>>;
    /**
     * Occurs when a pane resize operation has been completed.
     */
    PaneResizeCompleted: ASPxClientEvent<ASPxClientSplitterPaneEventHandler<ASPxClientSplitter>>;
    /**
     * Fires after a specific web page has been loaded into a pane.
     */
    PaneContentUrlLoaded: ASPxClientEvent<ASPxClientSplitterPaneEventHandler<ASPxClientSplitter>>;
    /**
     * Returns the number of panes at the root level of a splitter.
     */
    GetPaneCount(): number;
    /**
     * Returns the splitter's root pane specified by its index within the ASPxSplitter.Panes collection. An ASPxClientSplitterPane object representing the root pane located at the specified index within the splitter's ASPxSplitter.Panes collection.
     * @param index An integer value specifying the zero-based index of the root pane to be retrieved.
     */
    GetPane(index: number): ASPxClientSplitterPane;
    /**
     * Returns a pane specified by its name. An ASPxClientSplitterPane object that represents the pane with the specified name.
     * @param name A string value specifying the name of the pane.
     */
    GetPaneByName(name: string): ASPxClientSplitterPane;
    /**
     * Specifies whether the control's panes can be resized by end-users on the client side.
     * @param allowResize true if pane resizing is allowed; otherwise, false.
     */
    SetAllowResize(allowResize: boolean): void;
    /**
     * Returns a string value that represents the client state of splitter panes.
     */
    GetLayoutData(): string;
    /**
     * Converts the specified object to the ASPxClientSplitter type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientSplitter;
}
/**
 * Represents a client-side equivalent of the splitter's SplitterPane object.
 */
declare class ASPxClientSplitterPane {
    /**
     * Gets the index of the current pane within the pane collection to which it belongs.
     */
    index: number;
    /**
     * Gets the name that uniquely identifies the current splitter pane.
     */
    name: string;
    /**
     * Returns a client splitter object that contains the current pane.
     */
    GetSplitter(): ASPxClientSplitter;
    /**
     * Returns the immediate parent of the current pane.
     */
    GetParentPane(): ASPxClientSplitterPane;
    /**
     * Returns the previous sibling pane of the current pane.
     */
    GetPrevPane(): ASPxClientSplitterPane;
    /**
     * Returns the next sibling pane of the current pane.
     */
    GetNextPane(): ASPxClientSplitterPane;
    /**
     * Determines whether the current pane is the first pane within the SplitterPaneCollection.
     */
    IsFirstPane(): boolean;
    /**
     * Determines whether the current pane is the last pane within the SplitterPaneCollection.
     */
    IsLastPane(): boolean;
    /**
     * Returns a value that indicates the orientation in which the current pane and its sibling panes are stacked.
     */
    IsVertical(): boolean;
    /**
     * Returns the number of the current pane's immediate child panes.
     */
    GetPaneCount(): number;
    /**
     * Returns the current pane's immediate child pane specified by its index. An ASPxClientSplitterPane object representing the pane's immediate child pane located at the specified index within the pane's SplitterPane.Panes collection.
     * @param index An integer value specifying the zero-based index of the child pane to be retrieved.
     */
    GetPane(index: number): ASPxClientSplitterPane;
    /**
     * Returns the current pane's child pane specified by its name. An ASPxClientSplitterPane object that represents the current pane's child pane with the specified name.
     * @param name A string value specifying the name of the pane.
     */
    GetPaneByName(name: string): ASPxClientSplitterPane;
    /**
     * Gets the width of the pane's content area.
     */
    GetClientWidth(): number;
    /**
     * Gets the height of the pane's content area.
     */
    GetClientHeight(): number;
    /**
     * Collapses the current pane and occupies its space by maximizing the specified pane. true if the current pane has been collapsed successfully; otherwise, false.
     * @param maximizedPane A ASPxClientSplitterPane object specifying the pane to be maximized to occupy the freed space.
     */
    Collapse(maximizedPane: ASPxClientSplitterPane): boolean;
    /**
     * Collapses the current pane in a forward direction and occupies its space by maximizing the previous adjacent pane.
     */
    CollapseForward(): boolean;
    /**
     * Collapses the current pane in a backward direction, and occupies its space by maximizing the next adjacent pane.
     */
    CollapseBackward(): boolean;
    /**
     * Expands the current pane object on the client side.
     */
    Expand(): boolean;
    /**
     * Returns whether the pane is collapsed.
     */
    IsCollapsed(): boolean;
    /**
     * Returns whether the pane's content is loaded from an external web page.
     */
    IsContentUrlPane(): boolean;
    /**
     * Gets the URL of a web page displayed as a pane's content.
     */
    GetContentUrl(): string;
    /**
     * Sets the URL to point to a web page that should be loaded into, and displayed within the current pane, but should not be cached by a client browser.
     * @param url A string value specifying the URL to a web page displayed within the pane.
     * @param preventBrowserCaching true to prevent the browser to cache the loaded content; false to allow browser caching.
     */
    SetContentUrl(url: string, preventBrowserCaching?: boolean): void;
    /**
     * Refreshes the content of the web page displayed within the current pane.
     */
    RefreshContentUrl(): void;
    /**
     * Returns an iframe object containing a web page specified via the pane's SplitterPane.ContentUrl property (or the ASPxClientSplitterPane.SetContentUrl client method).
     */
    GetContentIFrame(): any;
    /**
     * Specifies whether the current pane can be resized by end-users on the client side.
     * @param allowResize true if pane resizing is allowed; otherwise, false.
     */
    SetAllowResize(allowResize: boolean): void;
    /**
     * Forces the client ASPxClientSplitter.PaneResized event to be generated.
     */
    RaiseResizedEvent(): void;
    /**
     * Returns an HTML element representing a splitter pane object.
     */
    GetElement(): any;
    /**
     * Specifies the splitter pane's size in pixels.
     * @param size An integer value that specifies the splitter pane's size.
     */
    SetSize(size: number | string): void;
    /**
     * Returns the splitter pane's size, in pixels or percents.
     */
    GetSize(): string;
    /**
     * Returns the distance between the top edge of the pane content and the topmost portion of the content currently visible in the pane.
     */
    GetScrollTop(): number;
    /**
     * Specifies the distance between the top edge of the pane content and the topmost portion of the content currently visible in the pane.
     * @param value An integer value that is the distance (in pixels).
     */
    SetScrollTop(value: number): void;
    /**
     * Returns the distance between the left edge of the pane content and the leftmost portion of the content currently visible in the pane.
     */
    GetScrollLeft(): number;
    /**
     * Specifies the distance between the left edge of the pane content and the leftmost portion of the content currently visible in the pane.
     * @param value An integer value that is the distance (in pixels).
     */
    SetScrollLeft(value: number): void;
}
/**
 * A method that will handle the splitter's client events concerning pane manipulations.
 * @param source An object representing the event's source. Identifies the splitter object that raised the event.
 * @param e An ASPxClientSplitterPaneEventArgs object that contains event data.
 */
interface ASPxClientSplitterPaneEventHandler<Sender> { (source: Sender, e: ASPxClientSplitterPaneEventArgs): void; }
/**
 * A method that will handle the splitter's client events concerning manipulations with a pane.
 */
declare class ASPxClientSplitterPaneEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientSplitterPaneEventArgs class.
     * @param pane A ASPxClientSplitterPane object representing a splitter pane related to the generated event.
     */
    constructor(pane: ASPxClientSplitterPane);
    /**
     * Gets the pane object related to the event.
     */
    pane: ASPxClientSplitterPane;
}
/**
 * A method that will handle a splitter control's cancelable client events concerning pane manipulations.
 * @param source An object representing the event's source. Identifies the splitter control object that raised the event.
 * @param e An ASPxClientSplitterPaneCancelEventArgs object that contains event data.
 */
interface ASPxClientSplitterPaneCancelEventHandler<Sender> { (source: Sender, e: ASPxClientSplitterPaneCancelEventArgs): void; }
/**
 * Provides data for a splitter control's cancelable client events concerning manipulations with a pane.
 */
declare class ASPxClientSplitterPaneCancelEventArgs extends ASPxClientSplitterPaneEventArgs {
    /**
     * Initializes a new instance of the ASPxClientSplitterPaneCancelEventArgs class.
     * @param pane A ASPxClientSplitterPane object representing a splitter pane related to the generated event.
     */
    constructor(pane: ASPxClientSplitterPane);
    /**
     * Gets or sets a value indicating whether the action which raised the event should be canceled.
     */
    cancel: boolean;
}
/**
 * Represents a base for the ASPxClientTabControl and ASPxClientPageControl objects.
 */
declare class ASPxClientTabControlBase extends ASPxClientControl {
    /**
     * Fires when a tab is clicked.
     */
    TabClick: ASPxClientEvent<ASPxClientTabControlTabClickEventHandler<ASPxClientTabControlBase>>;
    /**
     * Fires on the client side after the active tab has been changed within a tab control.
     */
    ActiveTabChanged: ASPxClientEvent<ASPxClientTabControlTabEventHandler<ASPxClientTabControlBase>>;
    /**
     * Fires on the client side before the active tab is changed within a tab control.
     */
    ActiveTabChanging: ASPxClientEvent<ASPxClientTabControlTabCancelEventHandler<ASPxClientTabControlBase>>;
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientTabControlBase>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientTabControlBase>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by a client tab control.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientTabControlBase>>;
    /**
     * Modifies a tab page's size in accordance with the content.
     */
    AdjustSize(): void;
    /**
     * Returns the active tab within the tab control.
     */
    GetActiveTab(): ASPxClientTab;
    /**
     * Makes the specified tab active within the tab control on the client side.
     * @param tab An ASPxClientTab object specifying the tab to select.
     */
    SetActiveTab(tab: ASPxClientTab): void;
    /**
     * Returns the index of the active tab within the tab control.
     */
    GetActiveTabIndex(): number;
    /**
     * Makes a tab active within the tab control, specifying the tab's index.
     * @param index An integer value specifying the index of the tab to select.
     */
    SetActiveTabIndex(index: number): void;
    /**
     * Returns the number of tabs in the ASPxTabControl.
     */
    GetTabCount(): number;
    /**
     * Returns a tab specified by its index. An ASPxClientTab object representing the tab located at the specified index within the control's ASPxTabControl.Tabs collection.
     * @param index An integer value specifying the zero-based index of the tab object to retrieve.
     */
    GetTab(index: number): ASPxClientTab;
    /**
     * Returns a tab specified by its name. An ASPxClientTab object that represents the tab with the specified name.
     * @param name A string value specifying the name of the tab.
     */
    GetTabByName(name: string): ASPxClientTab;
}
/**
 * Represents a client-side equivalent of the ASPxTabControl object.
 */
declare class ASPxClientTabControl extends ASPxClientTabControlBase {
    /**
     * Converts the specified object to the ASPxClientTabControl type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientTabControl;
}
/**
 * Represents a client-side equivalent of the ASPxPageControl object.
 */
declare class ASPxClientPageControl extends ASPxClientTabControlBase {
    /**
     * Returns the HTML code that represents the contents of the specified page within the page control. A string that represents the specified page's HTML content.
     * @param tab An ASPxClientTab object that specifies the required page.
     */
    GetTabContentHTML(tab: ASPxClientTab): string;
    /**
     * Defines the HTML content for a specific tab page within the page control.
     * @param tab An ASPxClientTab object that specifies the required tab page.
     * @param html A string value that represents the HTML code defining the content of the specified page.
     */
    SetTabContentHTML(tab: ASPxClientTab, html: string): void;
    /**
     * Sends a callback to the server and generates the server-side ASPxPageControl.Callback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side ASPxPageControl.Callback event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(parameter: string, onSuccess?: (arg: string) => void): void;
    /**
     * Converts the specified object to the ASPxClientPageControl type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientPageControl;
}
/**
 * Represents a client-side equivalent of a tab control's Tab or a page control's TabPage object.
 */
declare class ASPxClientTab {
    /**
     * Gets the tab control to which the current tab belongs.
     */
    tabControl: ASPxClientTabControlBase;
    /**
     * Gets the index of the current tab (tabbed page) within the control's collection of tabs (tabbed pages).
     */
    index: number;
    /**
     * Gets the name that uniquely identifies the current tab.
     */
    name: string;
    /**
     * Returns a value specifying whether a tab is enabled.
     */
    GetEnabled(): boolean;
    /**
     * Specifies whether the tab is enabled.
     * @param value true to enable the tab; otherwise, false.
     */
    SetEnabled(value: boolean): void;
    /**
     * Returns the URL pointing to the image displayed within the tab.
     */
    GetImageUrl(): string;
    /**
     * Specifies the URL which points to the image displayed within the tab.
     * @param value A string value that is the URL to the image displayed within the tab.
     */
    SetImageUrl(value: string): void;
    /**
     * Returns the URL pointing to the image displayed within the active tab.
     */
    GetActiveImageUrl(): string;
    /**
     * Specifies the URL which points to the image displayed within the active tab.
     * @param value A string value that is the URL to the image displayed within the active tab.
     */
    SetActiveImageUrl(value: string): void;
    /**
     * Gets an URL which defines the navigation location for the tab.
     */
    GetNavigateUrl(): string;
    /**
     * Specifies a URL which defines the navigation location for the tab.
     * @param value A string value which is a URL to where the client web browser will navigate when the tab is clicked.
     */
    SetNavigateUrl(value: string): void;
    /**
     * Returns text displayed within the tab.
     */
    GetText(): string;
    /**
     * Specifies the text displayed within the tab.
     * @param value A string value that is the text displayed within the tab.
     */
    SetText(value: string): void;
    /**
     * Returns a value specifying whether a tab is displayed.
     */
    GetVisible(): boolean;
    /**
     * Specifies whether the tab is visible.
     * @param value true is the tab is visible; otherwise, false.
     */
    SetVisible(value: boolean): void;
}
/**
 * A method that will handle a tab control's client events concerning manipulations with a tab.
 * @param source An object representing the event's source. Identifies the tab control object that raised the event.
 * @param e An ASPxClientTabControlTabEventArgs object that contains event data.
 */
interface ASPxClientTabControlTabEventHandler<Sender> { (source: Sender, e: ASPxClientTabControlTabEventArgs): void; }
/**
 * Provides data for events which concern manipulations on tabs.
 */
declare class ASPxClientTabControlTabEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new object of the ASPxClientTabControlTabEventArgs type with the specified value.
     * @param tab An ASPxClientTab object representing the tab related to the event.
     */
    constructor(tab: ASPxClientTab);
    /**
     * Gets the tab object related to the event.
     */
    tab: ASPxClientTab;
}
/**
 * A method that will handle a tab control's cancelable client events concerning manipulations with a tab.
 * @param source An object representing the event's source. Identifies the tab control object that raised the event.
 * @param e An ASPxClientTabControlTabCancelEventArgs object that contains event data.
 */
interface ASPxClientTabControlTabCancelEventHandler<Sender> { (source: Sender, e: ASPxClientTabControlTabCancelEventArgs): void; }
/**
 * Provides data for cancellable events which concern manipulations on tabs.
 */
declare class ASPxClientTabControlTabCancelEventArgs extends ASPxClientProcessingModeCancelEventArgs {
    /**
     * Initializes a new object of the ASPxClientTabControlTabCancelEventArgs type with the specified settings.
     * @param processOnServer true to process the event on the server side; false to completely handle it on the client side.
     * @param tab An ASPxClientTab object representing a tab related to the event.
     */
    constructor(processOnServer: boolean, tab: ASPxClientTab);
    /**
     * Gets the tab object related to the event.
     */
    tab: ASPxClientTab;
    /**
     * Gets or sets a value specifying whether a callback should be sent to the server to reload the content of the page being activated.
     */
    reloadContentOnCallback: boolean;
}
/**
 * A method that will handle client events concerning clicks on tabs.
 * @param source The event source. This parameter identifies the tab control object which raised the event.
 * @param e An ASPxClientTabControlTabClickEventArgs object that contains event data.
 */
interface ASPxClientTabControlTabClickEventHandler<Sender> { (source: Sender, e: ASPxClientTabControlTabClickEventArgs): void; }
/**
 * Provides data for events which concern clicking on the control's tabs.
 */
declare class ASPxClientTabControlTabClickEventArgs extends ASPxClientTabControlTabCancelEventArgs {
    /**
     * Initializes a new object of the ASPxClientTabControlTabClickEventArgs type with the specified settings.
     * @param processOnServer true to process the event on the server side; false to completely handle it on the client side.
     * @param tab An ASPxClientTab object that represents a tab related to the event.
     * @param htmlElement An HTML object that contains the processed tab.
     * @param htmlEvent A DHTML event object that relates to the processed event.
     */
    constructor(processOnServer: boolean, tab: ASPxClientTab, htmlElement: any, htmlEvent: any);
    /**
     * Gets the HTML object that contains the processed tab.
     */
    htmlElement: any;
    /**
     * Gets a DHTML event object that relates to the processed event.
     */
    htmlEvent: any;
}
/**
 * Represents a client-side equivalent of the ASPxTimer object.
 */
declare class ASPxClientTimer extends ASPxClientControl {
    /**
     * Fires on the client side when the specified timer interval has elapsed, and the timer is enabled.
     */
    Tick: ASPxClientEvent<ASPxClientProcessingModeEventHandler<ASPxClientTimer>>;
    /**
     * Returns a value indicating whether the timer is enabled.
     */
    GetEnabled(): boolean;
    /**
     * Enables the timer.
     * @param enabled true to turn the timer on; false, to turn the timer off.
     */
    SetEnabled(enabled: boolean): void;
    /**
     * Gets the time before the ASPxClientTimer.Tick event is raised relative to the last occurrence of the ASPxClientTimer.Tick event.
     */
    GetInterval(): number;
    /**
     * Specifies the time before the ASPxClientTimer.Tick event is raised relative to the last occurrence of the ASPxClientTimer.Tick event.
     * @param interval An integer value that specifies the number of milliseconds before the Tick event is raised relative to the last occurrence of the Tick event. The value cannot be less than one.
     */
    SetInterval(interval: number): void;
    /**
     * Converts the specified object to the ASPxClientTimer type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientTimer;
}
/**
 * Represents a client-side equivalent of the ASPxTitleIndex object.
 */
declare class ASPxClientTitleIndex extends ASPxClientControl {
    /**
     * Fires after an item has been clicked.
     */
    ItemClick: ASPxClientEvent<ASPxClientTitleIndexItemEventHandler<ASPxClientTitleIndex>>;
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientTitleIndex>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientTitleIndex>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientTitleIndex.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientTitleIndex>>;
    /**
     * Converts the specified object to the ASPxClientTitleIndex type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientTitleIndex;
}
/**
 * A method that will handle the title index control's client events concerning manipulations with an item.
 * @param source An object representing the event's source. Identifies the title index control object that raised the event.
 * @param e An ASPxClientTitleIndexItemEventArgs object that contains event data.
 */
interface ASPxClientTitleIndexItemEventHandler<Sender> { (source: Sender, e: ASPxClientTitleIndexItemEventArgs): void; }
/**
 * Provides data for events which concern manipulations on the control's items.
 */
declare class ASPxClientTitleIndexItemEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Initializes a new object of the ASPxClientTitleIndexItemEventArgs type with the specified settings.
     * @param processOnServer true to process the event on the server side; false to completely handle it on the client side.
     * @param name A string value that represents the unique identifier name of an item related to the event.
     * @param htmlElement An HTML object that contains the processed item.
     * @param htmlEvent A DHTML event object that relates to the processed event.
     */
    constructor(processOnServer: boolean, name: string, htmlElement: any, htmlEvent: any);
    /**
     * Gets the name that uniquely identifies the processed item.
     */
    name: any;
    /**
     * Gets the HTML object that contains the processed item.
     */
    htmlElement: any;
    /**
     * Gets a DHTML event object that relates to the processed event.
     */
    htmlEvent: any;
}
/**
 * Represents a client-side equivalent of the ASPxTreeView object.
 */
declare class ASPxClientTreeView extends ASPxClientControl {
    /**
     * Fires on the client side after a node has been clicked.
     */
    NodeClick: ASPxClientEvent<ASPxClientTreeViewNodeClickEventHandler<ASPxClientTreeView>>;
    /**
     * Fires on the client side after a node's expansion state has been changed by end-user interaction.
     */
    ExpandedChanged: ASPxClientEvent<ASPxClientTreeViewNodeEventHandler<ASPxClientTreeView>>;
    /**
     * Fires on the client side before the expansion state of a node is changed via end-user interaction.
     */
    ExpandedChanging: ASPxClientEvent<ASPxClientTreeViewNodeCancelEventHandler<ASPxClientTreeView>>;
    /**
     * Occurs on the client side when the node's checked state is changed by clicking on a check box.
     */
    CheckedChanged: ASPxClientEvent<ASPxClientTreeViewNodeProcessingModeEventHandler<ASPxClientTreeView>>;
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientTreeView>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientTreeView>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientTreeView.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientTreeView>>;
    /**
     * Returns a node specified by its index within the ASPxTreeView's node collection. An ASPxClientTreeViewNode object, representing the node located at the specified index within the ASPxTreeView's node collection.
     * @param index An integer value specifying the zero-based index of the node to be retrieved.
     */
    GetNode(index: number): ASPxClientTreeViewNode;
    /**
     * Returns a node specified by its name. An ASPxClientTreeViewNode object that represents the node with the specified name.
     * @param name A string value specifying the name of the node.
     */
    GetNodeByName(name: string): ASPxClientTreeViewNode;
    /**
     * Returns a node specified by its text. An ASPxClientTreeViewNode object that represents the node with the specified node's text content.
     * @param text A string value specifying the text content of the node.
     */
    GetNodeByText(text: string): ASPxClientTreeViewNode;
    /**
     * Returns the number of nodes at the ASPxTreeView's zero level.
     */
    GetNodeCount(): number;
    /**
     * Returns the selected node within the ASPxTreeView control on the client side.
     */
    GetSelectedNode(): ASPxClientTreeViewNode;
    /**
     * Selects the specified node within the ASPxTreeView control on the client side.
     * @param node An ASPxClientTreeViewNode object specifying the node to select.
     */
    SetSelectedNode(node: ASPxClientTreeViewNode): void;
    /**
     * Gets the root node of the ASPxTreeView object.
     */
    GetRootNode(): ASPxClientTreeViewNode;
    /**
     * Collapses all nodes in the ASPxTreeView on the client side.
     */
    CollapseAll(): void;
    /**
     * Expands all nodes in the ASPxTreeView on the client side.
     */
    ExpandAll(): void;
    /**
     * Converts the specified object to the ASPxClientTreeView type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientTreeView;
}
/**
 * Represents a client-side equivalent of the ASPxTreeView's TreeViewNode object.
 */
declare class ASPxClientTreeViewNode {
    /**
     * Gets the client representation of the ASPxTreeView control to which the current node belongs.
     */
    treeView: ASPxClientTreeView;
    /**
     * Gets the current node's parent node.
     */
    parent: ASPxClientTreeViewNode;
    /**
     * Gets the node's index within the parent's collection of nodes.
     */
    index: number;
    /**
     * Gets the name that uniquely identifies the node.
     */
    name: string;
    /**
     * Returns the number of the current node's immediate child nodes.
     */
    GetNodeCount(): number;
    /**
     * Returns the current node's immediate child node specified by its index. An ASPxClientTreeViewNode object representing the node located at the specified index within the current node collection.
     * @param index An integer value specifying the zero-based index of the node to be retrieved.
     */
    GetNode(index: number): ASPxClientTreeViewNode;
    /**
     * Returns the current node's child node specified by its name. An ASPxClientTreeViewNode object that represents the current node's child with the specified name.
     * @param name A string value specifying the name of the node.
     */
    GetNodeByName(name: string): ASPxClientTreeViewNode;
    /**
     * Returns the current node's child node specified by its text. An ASPxClientTreeViewNode object that represents the current node's child with the specified node's text content.
     * @param text A string value specifying the text content of the node.
     */
    GetNodeByText(text: string): ASPxClientTreeViewNode;
    /**
     * Returns a value indicating whether the node is expanded.
     */
    GetExpanded(): boolean;
    /**
     * Sets a value which specifies the node's expansion state.
     * @param value true if the node is expanded; otherwise, false.
     */
    SetExpanded(value: boolean): void;
    /**
     * Returns a value indicating whether the node is checked.
     */
    GetChecked(): boolean;
    /**
     * Sets a value indicating whether the node is checked.
     * @param value true if the node is checked; otherwise, false.
     */
    SetChecked(value: boolean): void;
    /**
     * Returns a value which specifies the node's check state.
     */
    GetCheckState(): string;
    /**
     * Returns a value specifying whether the node is enabled.
     */
    GetEnabled(): boolean;
    /**
     * Sets a value specifying whether the node is enabled.
     * @param value true to make the node enabled; false to disable it.
     */
    SetEnabled(value: boolean): void;
    /**
     * Returns the URL pointing to the image displayed within the node.
     */
    GetImageUrl(): string;
    /**
     * Sets the URL which points to the image displayed within the node.
     * @param value A string value specifying the URL to the image displayed within the node.
     */
    SetImageUrl(value: string): void;
    /**
     * Gets an URL which defines the navigation location for the node's hyperlink.
     */
    GetNavigateUrl(): string;
    /**
     * Specifies a URL which defines the node's navigate URL.
     * @param value A string value which specifies a URL to where the client web browser will navigate when the node is clicked.
     */
    SetNavigateUrl(value: string): void;
    /**
     * Gets the text, displayed within the node.
     */
    GetText(): string;
    /**
     * Specifies the text, displayed within the node.
     * @param value A string value that represents the text displayed within the node.
     */
    SetText(value: string): void;
    /**
     * Returns a value specifying whether a node is displayed.
     */
    GetVisible(): boolean;
    /**
     * Specifies whether the node is visible.
     * @param value true if the node is visible; otherwise, false.
     */
    SetVisible(value: boolean): void;
    /**
     * Gets the HTML object that contains the current node.
     */
    GetHtmlElement(): any;
}
/**
 * A method that will handle the client events concerned with node processing.
 * @param source An object representing the event source. Identifies the ASPxClientTreeView control that raised the event.
 * @param e An ASPxClientTreeViewNodeProcessingModeEventArgs object that contains event data.
 */
interface ASPxClientTreeViewNodeProcessingModeEventHandler<Sender> { (source: Sender, e: ASPxClientTreeViewNodeProcessingModeEventArgs): void; }
/**
 * Provides data for the client events concerned with node processing, and that allow the event's processing to be passed to the server side.
 */
declare class ASPxClientTreeViewNodeProcessingModeEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Initializes a new instance of the ASPxClientTreeViewNodeProcessingModeEventArgs class with the specified setting.
     * @param processOnServer true to process the event on the server side; false to completely handle it on the client side.
     * @param node An ASPxClientTreeViewNode object representing the node related to the event.
     */
    constructor(processOnServer: boolean, node: ASPxClientTreeViewNode);
    /**
     * Gets a node object related to the event.
     */
    node: ASPxClientTreeViewNode;
}
/**
 * A method that will handle the ASPxClientTreeView.NodeClick event.
 * @param source The ASPxClientTreeView control which fires the event.
 * @param e An ASPxClientTreeViewNodeClickEventArgs object that contains event data.
 */
interface ASPxClientTreeViewNodeClickEventHandler<Sender> { (source: Sender, e: ASPxClientTreeViewNodeClickEventArgs): void; }
/**
 * Provides data for the ASPxClientTreeView.NodeClick event.
 */
declare class ASPxClientTreeViewNodeClickEventArgs extends ASPxClientTreeViewNodeProcessingModeEventArgs {
    /**
     * Initializes a new object of the ASPxClientTreeViewNodeClickEventArgs type with the specified settings.
     * @param processOnServer true to process the event on the server side; false to completely handle it on the client side.
     * @param node An ASPxClientTreeViewNode object that represents a node related to the event.
     * @param htmlElement An HTML object that contains the processed node.
     * @param htmlEvent A DHTML event object that relates to the processed event.
     */
    constructor(processOnServer: boolean, node: ASPxClientTreeViewNode, htmlElement: any, htmlEvent: any);
    /**
     * Gets the HTML object that contains the processed node.
     */
    htmlElement: any;
    /**
     * Gets a DHTML event object that relates to the processed event.
     */
    htmlEvent: any;
}
/**
 * A method that will handle the ASPxTreeView control's client events, concerning manipulations with a node.
 * @param source An object representing the event's source. Identifies the ASPxClientTreeView control object that raised the event.
 * @param e An ASPxClientTreeViewNodeEventArgs object that contains event data.
 */
interface ASPxClientTreeViewNodeEventHandler<Sender> { (source: Sender, e: ASPxClientTreeViewNodeEventArgs): void; }
/**
 * Provides data for the ASPxClientTreeView.ExpandedChanged events.
 */
declare class ASPxClientTreeViewNodeEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new object of the ASPxClientTreeViewNodeEventArgs type with the specified value.
     * @param node An ASPxClientTreeViewNode object representing the node related to the event.
     */
    constructor(node: ASPxClientTreeViewNode);
    /**
     * Gets a node object related to the event.
     */
    node: ASPxClientTreeViewNode;
}
/**
 * A method that will handle the ASPxTreeView's cancelable client events, concerning manipulations with nodes.
 * @param source An object representing the event's source. Identifies the ASPxClientTreeView object that raised the event.
 * @param e An ASPxClientTreeViewNodeCancelEventArgs object that contains event data.
 */
interface ASPxClientTreeViewNodeCancelEventHandler<Sender> { (source: Sender, e: ASPxClientTreeViewNodeCancelEventArgs): void; }
/**
 * Provides data for the ASPxClientTreeView.ExpandedChanging event.
 */
declare class ASPxClientTreeViewNodeCancelEventArgs extends ASPxClientProcessingModeCancelEventArgs {
    /**
     * Initializes a new object of the ASPxClientTreeViewNodeCancelEventArgs type with the specified settings.
     * @param processOnServer true to process the event on the server side; false to completely handle it on the client side.
     * @param node An ASPxClientTreeViewNode object that represents a node related to the event.
     */
    constructor(processOnServer: boolean, node: ASPxClientTreeViewNode);
    /**
     * Gets a node object related to the event.
     */
    node: ASPxClientTreeViewNode;
}
/**
 * A client-side equivalent of the ASPxUploadControl control.
 */
declare class ASPxClientUploadControl extends ASPxClientControl {
    /**
     * Occurs on the client side after a file has been uploaded.
     */
    FileUploadComplete: ASPxClientEvent<ASPxClientUploadControlFileUploadCompleteEventHandler<ASPxClientUploadControl>>;
    /**
     * Occurs on the client after upload of all selected files has been completed.
     */
    FilesUploadComplete: ASPxClientEvent<ASPxClientUploadControlFilesUploadCompleteEventHandler<ASPxClientUploadControl>>;
    /** @deprecated This event is now obsolete. Use the FilesUploadStart event instead. */
    /**
     * Occurs on the client side before upload of the specified files starts.
     */
    FileUploadStart: ASPxClientEvent<ASPxClientUploadControlFilesUploadStartEventHandler<ASPxClientUploadControl>>;
    /**
     * Occurs on the client side before file upload is started.
     */
    FilesUploadStart: ASPxClientEvent<ASPxClientUploadControlFilesUploadStartEventHandler<ASPxClientUploadControl>>;
    /**
     * Fires on the client side when the text within the control's edit box is changed while the control has focus.
     */
    TextChanged: ASPxClientEvent<ASPxClientUploadControlTextChangedEventHandler<ASPxClientUploadControl>>;
    /**
     * Occurs on the client side when the <strong>progress bar indicator</strong> position is changed.
     */
    UploadingProgressChanged: ASPxClientEvent<ASPxClientUploadControlUploadingProgressChangedEventHandler<ASPxClientUploadControl>>;
    /**
     * Occurs on the client side when the <strong>file input elements</strong> count is changed.
     */
    FileInputCountChanged: ASPxClientEvent<ASPxClientEventHandler<ASPxClientUploadControl>>;
    /**
     * Enables you to specify whether the selected file(s) are valid and provide an error text.
     */
    ValidationErrorOccurred: ASPxClientEvent<ASPxClientUploadControlValidationErrorOccurredEventHandler<ASPxClientUploadControl>>;
    /**
     * Fires when the mouse enters a <strong>drop zone</strong> or an external drop zone element while dragging a file.
     */
    DropZoneEnter: ASPxClientEvent<ASPxClientUploadControlDropZoneEnterEventHandler<ASPxClientUploadControl>>;
    /**
     * Fires when the mouse leaves a <strong>drop zone</strong> or an external drop zone element while dragging a file.
     */
    DropZoneLeave: ASPxClientEvent<ASPxClientUploadControlDropZoneLeaveEventHandler<ASPxClientUploadControl>>;
    /**
     * Specifies whether the upload control's Advanced mode is enabled.
     */
    IsAdvancedModeEnabled(): boolean;
    /** @deprecated Use the Upload method instead. */
    /**
     * Initiates uploading of the specified file to the web server's memory.
     */
    UploadFile(): void;
    /**
     * Adds a new <strong>file input</strong> element to the ASPxUploadControl.
     */
    AddFileInput(): void;
    /**
     * Removes a <strong>file input</strong> element from the ASPxUploadControl.
     * @param index An integer value that represents a file input element's index.
     */
    RemoveFileInput(index: number): void;
    /**
     * Removes a file with the specified index from the selected file list.
     * @param fileIndex An integer value that is the zero-based index of an item in the file list.
     */
    RemoveFileFromSelection(fileIndex: number | ASPxClientUploadControlFile): void;
    /**
     * Returns files selected for uploading within the specified <strong>file input</strong>. An array of ASPxClientUploadControlFile objects that are files selected for uploading.
     * @param inputIndex An integer value that specifies the index of a <strong>file input</strong>. Default value is "0".
     */
    GetSelectedFiles(inputIndex: number): ASPxClientUploadControlFile[];
    /**
     * Gets the text displayed within the edit box of the specified file input element. A string value representing the displayed text.
     * @param index An integer value that specifies the required file input element's index.
     */
    GetText(index: number): string;
    /**
     * Gets the number of <strong>file input elements</strong> contained within the ASPxUploadControl.
     */
    GetFileInputCount(): number;
    /**
     * Specifies the count of the <strong>file input</strong> elements within the upload control.
     * @param count An integer value that specifies the file input elements count.
     */
    SetFileInputCount(count: number): void;
    /**
     * Specifies whether the upload control is enabled.
     * @param enabled true, to enable the upload control; otherwise, false.
     */
    SetEnabled(enabled: boolean): void;
    /**
     * Returns a value indicating whether the upload control is enabled.
     */
    GetEnabled(): boolean;
    /**
     * Initiates uploading of the specified file(s) to the web server's memory.
     */
    Upload(): void;
    /**
     * Cancels the initiated file uploading process.
     */
    Cancel(): void;
    /**
     * Clears the file selection in the upload control.
     */
    ClearText(): void;
    /**
     * Sets the text to be displayed within the <strong>add button</strong>.
     * @param text A string value specifying the text to be displayed within the button.
     */
    SetAddButtonText(text: string): void;
    /**
     * Sets the text to be displayed within the <strong>upload button</strong>.
     * @param text A string value specifying the text to be displayed within the button.
     */
    SetUploadButtonText(text: string): void;
    /**
     * Returns the <strong>add button</strong>'s text.
     */
    GetAddButtonText(): string;
    /**
     * Returns the text displayed within the <strong>upload button</strong>.
     */
    GetUploadButtonText(): string;
    /**
     * Sets the ID of a web control or HTML element (or a list of IDs), a click on which invokes file upload dialog.
     * @param ids A string value specifying the ID or a list of IDs separated by the semicolon (;).
     */
    SetDialogTriggerID(ids: string): void;
    /**
     * Converts the specified object to the ASPxClientUploadControl type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientUploadControl;
}
/**
 * A method that will handle the ASPxClientUploadControl.FilesUploadStart event.
 * @param source The event source. Identifies the ASPxUploadControl control that raised the event.
 * @param e A ASPxClientUploadControlFilesUploadStartEventArgs object that contains event data.
 */
interface ASPxClientUploadControlFilesUploadStartEventHandler<Sender> { (source: Sender, e: ASPxClientUploadControlFilesUploadStartEventArgs): void; }
/**
 * Provides data for the ASPxClientUploadControl.FilesUploadStart event.
 */
declare class ASPxClientUploadControlFilesUploadStartEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientUploadControlFilesUploadStartEventArgs class.
     * @param cancel true, if the action that raised the event should be canceled; otherwise, false.
     */
    constructor(cancel: boolean);
    /**
     * Gets or sets a value indicating whether the action which raised the event should be canceled.
     */
    cancel: boolean;
}
/**
 * A method that will handle the corresponding client event.
 * @param source The event source. This parameter identifies the upload control which raised the event.
 * @param e An ASPxClientUploadControlFileUploadCompleteEventArgs object that contains event data.
 */
interface ASPxClientUploadControlFileUploadCompleteEventHandler<Sender> { (source: Sender, e: ASPxClientUploadControlFileUploadCompleteEventArgs): void; }
/**
 * Provides data for the ASPxClientUploadControl.FileUploadComplete event.
 */
declare class ASPxClientUploadControlFileUploadCompleteEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientUploadControlFileUploadCompleteEventArgs class.
     * @param inputIndex An integer value that specifies the file input element's index.
     * @param isValid true if the uploaded file is valid; otherwise, false.
     * @param errorText A String value representing the error description.
     * @param callbackData A String value that contains the callback data.
     */
    constructor(inputIndex: number, isValid: boolean, errorText: string, callbackData: string);
    /**
     * Gets the index of a <strong>file input element</strong> within the ASPxUploadControl.
     */
    inputIndex: number;
    /**
     * Gets or sets a value indicating whether the uploaded file passes validation.
     */
    isValid: boolean;
    /**
     * Gets the error text to be displayed within the ASPxUploadControl's error frame.
     */
    errorText: string;
    /**
     * Gets a string that contains specific information (if any) passed from the server side for further client processing.
     */
    callbackData: string;
}
/**
 * A method that will handle the client ASPxClientUploadControl.FilesUploadComplete event.
 * @param source The event source. This parameter identifies the upload control which raised the event.
 * @param e A  object that contains event data.
 */
interface ASPxClientUploadControlFilesUploadCompleteEventHandler<Sender> { (source: Sender, e: ASPxClientUploadControlFilesUploadCompleteEventArgs): void; }
/**
 * Provides data for the ASPxClientUploadControl.FilesUploadComplete client event, which enables you to perform specific actions after all selected files have been uploaded.
 */
declare class ASPxClientUploadControlFilesUploadCompleteEventArgs extends ASPxClientEventArgs {
    /**
     * For internal use only.
     */
    constructor(errorText: string, callbackData: string);
    /**
     * Gets the error text to be displayed within the upload control's error frame.
     */
    errorText: string;
    /**
     * Gets a string that contains specific information (if any) passed from the server side for further client processing.
     */
    callbackData: string;
}
/**
 * A method that will handle the ASPxClientUploadControl.TextChanged client event.
 * @param source The event source. This parameter identifies the upload control which raised the event.
 * @param e An ASPxClientUploadControlTextChangedEventArgs object that contains event data.
 */
interface ASPxClientUploadControlTextChangedEventHandler<Sender> { (source: Sender, e: ASPxClientUploadControlTextChangedEventArgs): void; }
/**
 * Provides data for the ASPxClientUploadControl.TextChanged client event that allows you to respond to an end-user changing an edit box's text.
 */
declare class ASPxClientUploadControlTextChangedEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientUploadControlTextChangedEventArgs class.
     * @param inputIndex An integer value that specifies the file input element's index within the ASPxUploadControl.UploadedFiles collection.
     */
    constructor(inputIndex: number);
    /**
     * Gets the index of a <strong>file input element</strong> within the ASPxUploadControl.
     */
    inputIndex: number;
}
/**
 * A method that will handle the ASPxUploadControl's client event concerning the uploading process being changed.
 * @param source An object representing the event's source. Identifies the ASPxUploadControl object that raised the event.
 * @param e An ASPxClientUploadControlUploadingProgressChangedEventArgs object that contains event data.
 */
interface ASPxClientUploadControlUploadingProgressChangedEventHandler<Sender> { (source: Sender, e: ASPxClientUploadControlUploadingProgressChangedEventArgs): void; }
/**
 * Provides data for the ASPxClientUploadControl.UploadingProgressChanged event.
 */
declare class ASPxClientUploadControlUploadingProgressChangedEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientUploadControlUploadingProgressChangedEventArgs class.
     * @param fileCount Gets the number of the files selected for upload.
     * @param currentFileName Gets the name of the file currently being uploaded.
     * @param currentFileContentLength Gets the content length of the currently uploaded file.
     * @param currentFileUploadedContentLength Gets the content length of the current file already uploaded to the server.
     * @param currentFileProgress Gets the position of the current file upload progress.
     * @param totalContentLength Gets the content length of the files selected for upload.
     * @param uploadedContentLength Gets the content length of the files already uploaded to the server.
     * @param progress Gets the current position of total upload progress.
     */
    constructor(fileCount: number, currentFileName: string, currentFileContentLength: number, currentFileUploadedContentLength: number, currentFileProgress: number, totalContentLength: number, uploadedContentLength: number, progress: number);
    /**
     * Gets the number of the files selected for upload.
     */
    fileCount: number;
    /**
     * Gets the name of the file being currently uploaded.
     */
    currentFileName: string;
    /**
     * Gets the content length of the currently uploaded file.
     */
    currentFileContentLength: number;
    /**
     * Gets the content length of the current file already uploaded to the server.
     */
    currentFileUploadedContentLength: number;
    /**
     * Gets the position of the current file upload progress.
     */
    currentFileProgress: number;
    /**
     * Gets the content length of the files selected for upload.
     */
    totalContentLength: number;
    /**
     * Gets the content length of the files already uploaded to the server.
     */
    uploadedContentLength: number;
    /**
     * Gets the current position of total upload progress.
     */
    progress: number;
}
/**
 * A method that will handle the ASPxClientUploadControl.ValidationErrorOccurred event.
 * @param source The event source.
 * @param e An ASPxClientUploadControlValidationErrorOccurredEventArgs object that contains event data.
 */
interface ASPxClientUploadControlValidationErrorOccurredEventHandler<Sender> { (source: Sender, e: ASPxClientUploadControlValidationErrorOccurredEventArgs): void; }
/**
 * Provides data for the ASPxClientUploadControl.ValidationErrorOccurred event.
 */
declare class ASPxClientUploadControlValidationErrorOccurredEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientUploadControlValidationErrorOccurredEventArgs class with specified settings.
     * @param errorText A string that is the error text.
     * @param invalidFiles An array of the ASPxClientUploadControlInvalidFileInfo objects that are invalid files.
     */
    constructor(errorText: string, invalidFiles: ASPxClientUploadControlInvalidFileInfo[]);
    /**
     * Gets or sets the error text.
     */
    errorText: string;
    /**
     * Gets or sets a value specifying whether an alert message is displayed when the ASPxClientUploadControl.ValidationErrorOccurred event fires.
     */
    showAlert: boolean;
    /**
     * Gets the validation settings for the selected files.
     */
    validationSettings: ASPxClientUploadControlValidationSettings;
    /**
     * Returns an array of invalid files.
     */
    invalidFiles: ASPxClientUploadControlInvalidFileInfo[];
}
/**
 * Contains settings that relate to the ASPxClientUploadControl.ValidationErrorOccurred client event.
 */
declare class ASPxClientUploadControlValidationSettings {
    /**
     * Gets the maximum file size.
     */
    maxFileSize: number;
    /**
     * Gets the maximum count of files that can be selected for uploading at once.
     */
    maxFileCount: number;
    /**
     * Gets the allowed file extensions.
     */
    allowedFileExtensions: string[];
    /**
     * Gets which characters in a file name are not allowed.
     */
    invalidFileNameCharacters: string[];
}
/**
 * Contains settings of the file that hasn't passed validation.
 */
declare class ASPxClientUploadControlInvalidFileInfo {
    /**
     * Gets the name of the invalid file.
     */
    fileName: string;
    /**
     * Gets the size of the invalid file.
     */
    fileSize: number;
    /**
     * Gets the error type.
     */
    errorType: ASPxClientUploadControlValidationErrorTypeConsts;
}
/**
 * Declares client constants containing codes of validation errors that can occur while selecting files for uploading.
 */
declare class ASPxClientUploadControlValidationErrorTypeConsts {
    /**
     * The allowed maximum file size is exceeded. Return Value: 1
     */
    static readonly MaxFileSizeExceeded: number;
    /**
     * The file's extension is not allowed. Return Value: 2
     */
    static readonly NotAllowedFileExtension: number;
    /**
     * The allowed maximum count of the files is exceeded. Return Value: 3
     */
    static readonly MaxFileCountExceeded: number;
    /**
     * A file name contains invalid character. Return Value: 4
     */
    static readonly FileNameContainsInvalidCharacter: number;
}
/**
 * Represents a client file that corresponds to a particular file selected for uploading in the upload control.
 */
declare class ASPxClientUploadControlFile {
    /**
     * Gets the name of the file selected for uploading.
     */
    name: string;
    /**
     * Gets the size of the file selected for uploading.
     */
    size: number;
    /**
     * Provides access to the file as a native Javascript object.
     */
    sourceFileObject: any;
}
/**
 * A method that will handle the ASPxClientUploadControl.DropZoneEnter event.
 * @param source The event source. This parameter identifies the upload control object which raised the event.
 * @param e An ASPxClientUploadControlDropZoneEnterEventArgs object that contains event data.
 */
interface ASPxClientUploadControlDropZoneEnterEventHandler<Sender> { (source: Sender, e: ASPxClientUploadControlDropZoneEnterEventArgs): void; }
/**
 * Provides data for the ASPxClientUploadControl.DropZoneEnter event.
 */
declare class ASPxClientUploadControlDropZoneEnterEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientUploadControlDropZoneEnterEventArgs object.
     * @param dropZone An object that is a drop zone related to the processed event.
     */
    constructor(dropZone: any);
    /**
     * Gets a <strong>drop zone</strong> object related to the processed event.
     */
    dropZone: any;
}
/**
 * A method that will handle the ASPxClientUploadControl.DropZoneLeave event.
 * @param source The event source. Identifies the upload control object that raised the event.
 * @param e A ASPxClientUploadControlDropZoneLeaveEventArgs object that contains event data.
 */
interface ASPxClientUploadControlDropZoneLeaveEventHandler<Sender> { (source: Sender, e: ASPxClientUploadControlDropZoneLeaveEventArgs): void; }
/**
 * Provides data for the ASPxClientUploadControl.DropZoneLeave event.
 */
declare class ASPxClientUploadControlDropZoneLeaveEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientUploadControlDropZoneLeaveEventArgs object.
     * @param dropZone An object that is a drop zone related to the processed event.
     */
    constructor(dropZone: any);
    /**
     * Gets a <strong>drop zone</strong> object related to the processed event.
     */
    dropZone: any;
}
/**
 * Represents an object containing service static functions and properties which can be useful when performing client-side processing.
 */
declare class ASPxClientUtils {
    /**
     * Gets the user-agent string, which identifies the client browser and provides certain system details of the client computer.
     */
    static agent: string;
    /**
     * Gets a value that specifies whether the client browser is Opera.
     */
    static opera: boolean;
    /** @deprecated This property is now obsolete. Use the ASPxClientUtils.opera and ASPxClientUtils.browserMajorVersion properties instead. */
    /**
     * Gets a value that specifies whether the client browser is Opera version 9.
     */
    static opera9: boolean;
    /**
     * Gets a value that specifies whether the client browser is Safari.
     */
    static safari: boolean;
    /** @deprecated This property is now obsolete. Use the ASPxClientUtils.safari and ASPxClientUtils.browserMajorVersion properties instead. */
    /**
     * Gets a value that specifies whether the client browser is Safari version 3.
     */
    static safari3: boolean;
    /** @deprecated This property is now obsolete. Use the ASPxClientUtils.safari and ASPxClientUtils.macOSPlatform properties instead. */
    /**
     * Gets a value that specifies whether the client browser is Safari, running under a MacOS operating system.
     */
    static safariMacOS: boolean;
    /**
     * Gets a value that specifies whether the client browser is Google Chrome.
     */
    static chrome: boolean;
    /**
     * Gets a value that specifies whether the client browser is Internet Explorer.
     */
    static ie: boolean;
    /** @deprecated This property is now obsolete. Use the ASPxClientUtils.ie and ASPxClientUtils.browserMajorVersion properties instead. */
    /**
     * Gets a value that specifies whether the client browser is Internet Explorer version 7.
     */
    static ie7: boolean;
    /**
     * Gets a value that specifies whether the client browser is Firefox.
     */
    static firefox: boolean;
    /** @deprecated This property is now obsolete. Use the ASPxClientUtils.firefox and ASPxClientUtils.browserMajorVersion properties instead. */
    /**
     * Gets a value that specifies whether the client browser is Firefox version 3.
     */
    static firefox3: boolean;
    /**
     * Gets a value that specifies whether the client browser is Mozilla.
     */
    static mozilla: boolean;
    /**
     * Gets a value that specifies whether the client browser is Netscape.
     */
    static netscape: boolean;
    /**
     * Gets a value that specifies a client browser's full version.
     */
    static browserVersion: number;
    /**
     * Gets a value that specifies a client browser's major version.
     */
    static browserMajorVersion: number;
    /**
     * Gets a value that specifies whether the application is run under a MacOS platform.
     */
    static macOSPlatform: boolean;
    /**
     * Gets a value that specifies whether the application is run under the Windows platform.
     */
    static windowsPlatform: boolean;
    /**
     * Gets a value that specifies whether a client browser is based on WebKit.
     */
    static webKitFamily: boolean;
    /**
     * Gets a value that specifies whether a client browser is based on Netscape.
     */
    static netscapeFamily: boolean;
    /**
     * Gets a value that specifies whether the client browser supports touch.
     */
    static touchUI: boolean;
    /**
     * Gets a value that specifies whether the client browser supports the WebKit touch user interface.
     */
    static webKitTouchUI: boolean;
    /**
     * Gets a value that specifies whether the client browser supports the Microsoft touch user interface.
     */
    static msTouchUI: boolean;
    /**
     * Gets a value that specifies whether the application is run under an iOS platform.
     */
    static iOSPlatform: boolean;
    /**
     * Gets a value that specifies whether the application is run under the Android platform.
     */
    static androidPlatform: boolean;
    /**
     * Inserts the specified item into the specified array object.
     * @param array An object that specifies the array to manipulate.
     * @param element An object that specifies the array item to insert.
     */
    static ArrayInsert(array: any[], element: any): void;
    /**
     * Removes the specified item from the specified array object.
     * @param array An object that specifies the array to manipulate.
     * @param element An object that specifies the array item to remove.
     */
    static ArrayRemove(array: any[], element: any): void;
    /**
     * Removes an item at the specified index location from the specified array object.
     * @param array An object that specifies the array to manipulate.
     * @param index The zero-based index location of the array item to remove.
     */
    static ArrayRemoveAt(array: any[], index: number): void;
    /**
     * Removes all items from the specified array object.
     * @param array An object that specifies the array to manipulate.
     */
    static ArrayClear(array: any[]): void;
    /**
     * Searches for the specified array item and returns the zero-based index of its first occurrence within the specified array object. The zero-based index of the first occurrence of the specified array item within the specified array, if found; otherwise, negative one (&#0045;1).
     * @param array An object that specifies the array to manipulate.
     * @param element An object that specifies the array item to locate.
     */
    static ArrayIndexOf(array: any[], element: any): number;
    /**
     * Binds the specified function to a specific element's event, so that the function gets called whenever the event fires on the element.
     * @param element An object specifying the required element.
     * @param eventName A string value that specifies the required event name without the "on" prefix.
     * @param method An object that specifies the event's handling function.
     */
    static AttachEventToElement(element: any, eventName: string, method: any): void;
    /**
     * Unbinds the specified function from a specific element's event, so that the function stops receiving notifications when the event fires.
     * @param element An object specifying the required element.
     * @param eventName A string value that specifies the required event name.
     * @param method An object that specifies the event's handling function.
     */
    static DetachEventFromElement(element: any, eventName: string, method: any): void;
    /**
     * Returns the object that fired the event. The object that receives the event that fired.
     * @param htmlEvent An object that represents the current event.
     */
    static GetEventSource(htmlEvent: any): any;
    /**
     * Gets the x-coordinate of the event-related mouse pointer position relative to an end-user's screen. An integer value representing the x-coordinate of the event-related mouse pointer position relative to an end-user's screen.
     * @param htmlEvent An object specifying the required HTML event.
     */
    static GetEventX(htmlEvent: any): number;
    /**
     * Gets the y-coordinate of the event-related mouse pointer position relative to an end-user's screen. An integer value representing the y-coordinate of the event-related mouse pointer position relative to an end-user's screen.
     * @param htmlEvent An object specifying the required HTML event.
     */
    static GetEventY(htmlEvent: any): number;
    /**
     * Gets the keyboard code for the specified event. An integer value representing the keyboard code of the specified event.
     * @param htmlEvent An object specifying the required HTML event.
     */
    static GetKeyCode(htmlEvent: any): number;
    /**
     * Cancels the default action of the specified event. Always false.
     * @param htmlEvent An object that specifies the required HTML event.
     */
    static PreventEvent(htmlEvent: any): boolean;
    /**
     * Cancels both the specified event's default action and the event's bubbling upon the hierarchy of event handlers. Always false.
     * @param htmlEvent An object that specifies the required HTML event.
     */
    static PreventEventAndBubble(htmlEvent: any): boolean;
    /**
     * Removes mouse capture from the specified event's source object. Always false.
     * @param htmlEvent An object that specifies the required HTML event.
     */
    static PreventDragStart(htmlEvent: any): boolean;
    /**
     * Clears any text selection made within the window's client region.
     */
    static ClearSelection(): void;
    /**
     * Gets a value that indicates whether the specified object exists on the client side. true if the specified object exists; otherwise, false.
     * @param obj The object to test.
     */
    static IsExists(obj: any): boolean;
    /**
     * Gets a value that indicates whether the specified object is a function. true if the specified object is a function; otherwise, false.
     * @param obj The object to test.
     */
    static IsFunction(obj: any): boolean;
    /**
     * Gets the x-coordinate of the specified element's top left corner relative to the client area of the window, excluding scroll bars. An integer value representing the specified element's x-coordinate, in pixels.
     * @param element An object identifying the HTML element whose position should be obtained.
     */
    static GetAbsoluteX(element: any): number;
    /**
     * Gets the y-coordinate of the specified element's top left corner relative to the client area of the window, excluding scroll bars. An integer value representing the specified element's y-coordinate, in pixels.
     * @param element An object identifying the HTML element whose position should be obtained.
     */
    static GetAbsoluteY(element: any): number;
    /**
     * Sets the x-coordinate of the specified element's top left corner relative to the client area of the window, excluding scroll bars.
     * @param element An object identifying the HTML element whose position should be defined.
     * @param x An integer value specifying the required element's x-coordinate, in pixels.
     */
    static SetAbsoluteX(element: any, x: number): void;
    /**
     * Sets the y-coordinate of the specified element's top left corner relative to the client area of the window, excluding scroll bars.
     * @param element An object identifying the HTML element whose position should be defined.
     * @param y An integer value specifying the required element's y-coordinate, in pixels.
     */
    static SetAbsoluteY(element: any, y: number): void;
    /**
     * Returns the distance between the top edge of the document and the topmost portion of the content currently visible in the window.
     */
    static GetDocumentScrollTop(): number;
    /**
     * Returns the distance between the left edge of the document and the leftmost portion of the content currently visible in the window.
     */
    static GetDocumentScrollLeft(): number;
    /**
     * Gets the width of the window's client region.
     */
    static GetDocumentClientWidth(): number;
    /**
     * Gets the height of the window's client region.
     */
    static GetDocumentClientHeight(): number;
    /**
     * Adds the class name to the specified element on the page.
     * @param element An object that specifies the element.
     * @param className A string value that specifies the class name.
     */
    static AddClassNameToElement(element: any, className: string): void;
    /**
     * Removes the class name attribute from the element.
     * @param element An object that specifies the element.
     * @param className A string value that specifies the class name.
     */
    static RemoveClassNameFromElement(element: any, className: string): void;
    static ToggleClassName(element: any, className: string, toggleState: boolean): void;
    /**
     * Gets a value indicating whether the object passed via the parentElement parameter is a parent of the object passed via the element parameter. true, if the parentElement is a parent for the element; otherwise, false.
     * @param parentElement An object specifying the parent HTML element.
     * @param element An object specifying the child HTML element.
     */
    static GetIsParent(parentElement: any, element: any): boolean;
    /**
     * Returns a reference to the specified HTML element's first parent object which has an ID that matches the specified value. An object representing the first parent element with a matching ID or a null value if no matching element is found.
     * @param element An object specifying the child HTML element whose parent elements are searched.
     * @param id A string specifying the required parent's ID.
     */
    static GetParentById(element: any, id: string): any;
    /**
     * Returns a reference to the specified HTML element's first parent object whose element name matches the specified value. An object representing the first parent element with a matching element name or a null value if no matching element is found.
     * @param element An object specifying the child HTML element whose parent elements are searched.
     * @param tagName A string value specifying the element name (tag name) of the desired HTML element.
     */
    static GetParentByTagName(element: any, tagName: string): any;
    /**
     * Returns a reference to the specified HTML element's first parent object whose class name matches the specified value. An object representing the first parent element with a matching class name or a null value if no matching element is found.
     * @param element An object specifying the child HTML element whose parent elements are searched.
     * @param className A string value specifying the class name of the desired HTML element.
     */
    static GetParentByClassName(element: any, className: string): any;
    /**
     * Returns a reference to the first element that has the specified ID in the parent HTML element specified. An object representing the first element with a matching ID or null if no matching element is found.
     * @param element An object identifying the parent HTML element to search.
     * @param id A string specifying the ID attribute value of the desired child element.
     */
    static GetChildById(element: any, id: string): any;
    /**
     * Returns a reference to the particular element that has the specified element name and is contained within the specified parent HTML element. An object representing the matching element; a null value if no matching element is found.
     * @param element An object specifying the parent HTML element to search.
     * @param tagName A string value specifying the element name (tag name) of the desired HTML element.
     * @param index An integer value specifying the zero-based index of the desired element amongst all the matching elements found.
     */
    static GetChildByTagName(element: any, tagName: string, index: number): any;
    /**
     * Creates or updates the HTTP cookie for the response.
     * @param name A string value that represents the name of a cookie.
     * @param value A string representing the cookie value.
     * @param expirationDate A date-time object that represents the expiration date and time for the cookie.
     */
    static SetCookie(name: string, value: string, expirationDate?: Date): void;
    /**
     * Retrieves a cookie with the specified name. A string value, if the cookie exists.
     * @param name A string value that represents the name of a cookie.
     */
    static GetCookie(name: string): string;
    /**
     * Deletes a cookie with the specified name.
     * @param name A string value that represents the name of a cookie.
     */
    static DeleteCookie(name: string): void;
    /**
     * Returns a specifically generated code that uniquely identifies the combination of keys specified via the parameters. An integer value that represents the code uniquely identifying the key combination.
     * @param keyCode An integer value that specifies the code of the key. Codes are available via the ASPx.KeyCode client object's members.
     * @param isCtrlKey true, if the CTRL key should be included into the key combination; otherwise, false.
     * @param isShiftKey true, if the SHIFT key should be included into the key combination; otherwise, false.
     * @param isAltKey true, if the ALT key should be included into the key combination; otherwise, false.
     */
    static GetShortcutCode(keyCode: number, isCtrlKey: boolean, isShiftKey: boolean, isAltKey: boolean): number;
    /**
     * Returns a specifically generated code that uniquely identifies the pressed key combination, which is specified by the related HTML event. An integer value that represents the code uniquely identifying the specified key combination.
     * @param htmlEvent A DHTML event object that relates to a key combination being pressed.
     */
    static GetShortcutCodeByEvent(htmlEvent: any): number;
    /**
     * Returns a specifically generated code that uniquely identifies the combination of keys specified via the parameter. An integer value that represents the code uniquely identifying the key combination.
     * @param shortcutString A string value that specifies the key combination.
     */
    static StringToShortcutCode(shortcutString: string): number;
    /**
     * Trims all leading and trailing whitespaces from the string. A string value representing the trimmed string.
     * @param str A string value representing the string for trimming.
     */
    static Trim(str: string): string;
    /**
     * Trims all leading whitespaces from the string. A string value representing the trimmed string.
     * @param str A string value representing the string for trimming.
     */
    static TrimStart(str: string): string;
    /**
     * Trims all trailing whitespaces from the string. A string value representing the trimmed string.
     * @param str A string value representing the string for trimming.
     */
    static TrimEnd(str: string): string;
    /**
     * Returns values of editors located in the specified container. An object containing pairs of editor names and values.
     * @param containerOrId A container of editors, or its ID.
     * @param processInvisibleEditors true to process both visible and invisible editors that belong to the specified container; false to process only visible editors.
     */
    static GetEditorValuesInContainer(containerOrId: any, processInvisibleEditors?: boolean): any;
    /**
     * Sets values to editors.
     * @param values An object that specifies the values.
     */
    static SetEditorValues(values: any): void;
    /**
     * Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
     * @param message A String value that specifies a text.
     */
    static SendMessageToAssistiveTechnology(message: string): void;
}
/**
 * A client-side counterpart of the Calendar and CalendarFor extensions.
 */
declare class MVCxClientCalendar extends ASPxClientCalendar {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientCalendar>>;
    /**
     * Converts the specified object to the MVCxClientCalendar type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): MVCxClientCalendar;
}
/**
 * A client-side counterpart of the CallbackPanel extension.
 */
declare class MVCxClientCallbackPanel extends ASPxClientCallbackPanel {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientCallbackPanel>>;
    /**
     * Sends a callback with a parameter to update the Callback Panel by processing the passed information on the server, in an Action specified by the Callback Panel's CallbackPanelSettings.CallbackRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified by the CallbackPanelSettings.CallbackRouteValues property.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: any, onSuccess?: (arg: string) => void): void;
    /**
     * Converts the specified object to the MVCxClientCallbackPanel type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): MVCxClientCallbackPanel;
}
/**
 * A client-side counterpart of the CardView extension.
 */
declare class MVCxClientCardView extends ASPxClientCardView {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientCardView>>;
    /**
     * Sends a callback with a parameter to update the CardView by processing the passed information on the server, in an Action specified via the CardView's GridSettingsBase.CustomActionRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the CardView's GridSettingsBase.CustomActionRouteValues property.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: any, onSuccess?: (arg: string) => void): void;
    /**
     * Sends a callback with a parameter to process the passed information on the server, in an Action specified via the CardView's GridSettingsBase.CustomDataActionRouteValues property, and then process the returned result in the specified client function. This method does not update the CardView.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the GridSettingsBase.CustomDataActionRouteValues property.
     * @param onCallback A ASPxClientCardViewValuesCallback object that represents the JavaScript function which receives the information on the client side.
     */
    GetValuesOnCustomCallback(data: any, onCallback: ASPxClientCardViewValuesCallback): void;
    /**
     * Converts the specified object to the MVCxClientCardView type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): MVCxClientCardView;
}
/**
 * A client-side counterpart of the Chart extension.
 */
declare class MVCxClientChart extends ASPxClientWebChartControl {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientChart>>;
    /**
     * Sends a callback with a parameter to update a Chart by processing the passed information on the server, in an Action specified via the Chart's ChartControlSettings.CustomActionRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the ChartControlSettings.CustomActionRouteValues property.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: any, onSuccess?: (arg: string) => void): void;
    /**
     * Converts the specified object to the MVCxClientChart type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): MVCxClientChart;
}
/**
 * A client-side counterpart of the ComboBox and ComboBoxFor extensions.
 */
declare class MVCxClientComboBox extends ASPxClientComboBox {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientComboBox>>;
    /**
     * Sends a callback with a parameter to update the ComboBox by processing the passed information on the server, in an Action specified by the ComboBox's AutoCompleteBoxBaseSettings.CallbackRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified by the AutoCompleteBoxBaseSettings.CallbackRouteValues property.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: any, onSuccess?: (arg: string) => void): void;
    /**
     * Converts the specified object to the MVCxClientComboBox type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): MVCxClientComboBox;
}
/**
 * A client-side counterpart of the DataView extension.
 */
declare class MVCxClientDataView extends ASPxClientDataView {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientDataView>>;
    /**
     * Sends a callback with a parameter to update the DataView by processing the passed information on the server, in an Action specified via the DataView's DataViewSettings.CustomActionRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the DataViewSettings.CustomActionRouteValues property.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: any, onSuccess?: (arg: string) => void): void;
    /**
     * Converts the specified object to the MVCxClientDataView type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): MVCxClientDataView;
}
/**
 * A client-side counterpart of the DateEdit extension.
 */
declare class MVCxClientDateEdit extends ASPxClientDateEdit {
    /**
     * Converts the specified object to the MVCxClientDateEdit type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): MVCxClientDateEdit;
}
/**
 * A client-side counterpart of the DockManager extension.
 */
declare class MVCxClientDockManager extends ASPxClientDockManager {
    /**
     * Sends a callback with a parameter to update the DockManager by processing the passed information on the server, in an Action specified by the DockManager's DockManagerSettings.CallbackRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified by the DockManagerSettings.CallbackRouteValues property.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: any, onSuccess?: (arg: string) => void): void;
    /**
     * Converts the specified object to the MVCxClientDockManager type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): MVCxClientDockManager;
}
/**
 * A client-side counterpart of the DockPanel extension.
 */
declare class MVCxClientDockPanel extends ASPxClientDockPanel {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientDockPanel>>;
    /**
     * Sends a callback with a parameter to update the DockPanel by processing the passed information on the server, in an Action specified by the DockPanel's PopupControlSettingsBase.CallbackRouteValues (via the DockPanelSettings.CallbackRouteValues) property.
     * @param data An object containing any information that needs to be passed to a handling Action specified by the PopupControlSettingsBase.CallbackRouteValues property.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: any, onSuccess?: (arg: string) => void): void;
    /**
     * Converts the specified object to the MVCxClientDockPanel type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): MVCxClientDockPanel;
}
/**
 * A client-side counterpart of the FileManager extension.
 */
declare class MVCxClientFileManager extends ASPxClientFileManager {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientFileManager>>;
    /**
     * Sends a callback to the server and generates the server-side ASPxFileManager.CustomCallback event, passing it the specified argument.
     * @param data A string value that specifies any information that needs to be sent to the server-side ASPxFileManager.CustomCallback event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: any, onSuccess?: (arg: string) => void): void;
    /**
     * Converts the specified object to the MVCxClientFileManager type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): MVCxClientFileManager;
}
/**
 * A client-side counterpart of the FilterControl extension.
 */
declare class MVCxClientFilterControl extends ASPxClientFilterControl {
    /**
     * Returns the filter control's state.
     * @param obj An object that receives a filter control's callback parameters.
     */
    FillStateObject(obj: any): void;
    /**
     * Converts the specified object to the MVCxClientFilterControl type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): MVCxClientFilterControl;
}
/**
 * A client-side counterpart of the Gantt extension.
 */
declare class MVCxClientGantt extends ASPxClientGantt {
    /**
     * Converts the specified object to the MVCxClientGantt type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): MVCxClientGantt;
}
/**
 * A client-side counterpart of the GridView extension.
 */
declare class MVCxClientGridView extends ASPxClientGridView {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientGridView>>;
    /**
     * Sends a callback with a parameter to update the GridView by processing the passed information on the server, in an Action specified via the grid's GridSettingsBase.CustomActionRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the grid's GridSettingsBase.CustomActionRouteValues property.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: any, onSuccess?: (arg: string) => void): void;
    /**
     * Sends a callback with a parameter to process the passed information on the server, in an Action specified via the GridView's GridSettingsBase.CustomDataActionRouteValues property, and then process the returned result in the specified client function. This method does not update the GridView.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the GridSettingsBase.CustomDataActionRouteValues property.
     * @param onCallback A ASPxClientGridViewValuesCallback object that represents the JavaScript function which receives the information on the client side.
     */
    GetValuesOnCustomCallback(data: any, onCallback: ASPxClientGridViewValuesCallback): void;
    /**
     * Converts the specified object to the MVCxClientGridView type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): MVCxClientGridView;
}
/**
 * A client-side counterpart of the HtmlEditor extension.
 */
declare class MVCxClientHtmlEditor extends ASPxClientHtmlEditor {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientHtmlEditor>>;
    /**
     * Sends a callback with a parameter to process the passed information on the server, in an Action specified via the HtmlEditor's HtmlEditorSettings.CustomDataActionRouteValues property, and then return the processing result to the ASPxClientHtmlEditor.CustomDataCallback event on the client. This method does not update the HtmlEditor.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the HtmlEditorSettings.CustomDataActionRouteValues property.
     * @param onCallback An ASPxClientDataCallback object that is the JavaScript function which receives the callback data as a parameter.
     */
    PerformDataCallback(data: any, onCallback?: ASPxClientDataCallback): void;
    /**
     * Converts the specified object to the MVCxClientHtmlEditor type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): MVCxClientHtmlEditor;
}
/**
 * A client-side counterpart of the ImageGallery extension.
 */
declare class MVCxClientImageGallery extends ASPxClientImageGallery {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientImageGallery>>;
    /**
     * Sends a callback with a parameter to update the ImageGallery by processing the passed information on the server, in an Action specified via the ImageGallery's ImageGallerySettings.CustomActionRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the ImageGallerySettings.CustomActionRouteValues property.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: any, onSuccess?: (arg: string) => void): void;
    /**
     * Converts the specified object to the MVCxClientImageGallery type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): MVCxClientImageGallery;
}
/**
 * A client-side counterpart of the ListBox and ListBoxFor extensions.
 */
declare class MVCxClientListBox extends ASPxClientListBox {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientListBox>>;
    /**
     * Sends a callback with a parameter to update the ListBox by processing the passed information on the server, in an Action specified by the ListBox's ListBoxSettings.CallbackRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified by the ListBoxSettings.CallbackRouteValues property.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: any, onSuccess?: (arg: string) => void): void;
    /**
     * Converts the specified object to the MVCxClientListBox type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): MVCxClientListBox;
}
/**
 * A client-side counterpart of the NavBar extension.
 */
declare class MVCxClientNavBar extends ASPxClientNavBar {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientNavBar>>;
    /**
     * Converts the specified object to the MVCxClientNavBar type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): MVCxClientNavBar;
}
/**
 * A client-side counterpart of the PivotGrid extension.
 */
declare class MVCxClientPivotGrid extends ASPxClientPivotGrid {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientPivotGrid>>;
    /**
     * Sends a callback with a parameter to update the PivotGrid by processing the passed information on the server, in an Action specified via the grid's PivotGridSettings.CustomActionRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the grid's PivotGridSettings.CustomActionRouteValues property.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: any, onSuccess?: (arg: string) => void): void;
    /**
     * Passes PivotGrid callback parameters to the specified object.
     * @param obj An object that receives PivotGrid callback parameters.
     */
    FillStateObject(obj: any): void;
    /**
     * Converts the specified object to the MVCxClientPivotGrid type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): MVCxClientPivotGrid;
}
/**
 * A client-side counterpart of the PopupControl extension.
 */
declare class MVCxClientPopupControl extends ASPxClientPopupControl {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientPopupControl>>;
    /**
     * Sends a callback with a parameter to update the PopupControl by processing the passed information on the server, in an Action specified via the PopupControl's PopupControlSettingsBase.CallbackRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the PopupControlSettingsBase.CallbackRouteValues property.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: any, onSuccess?: (arg: string) => void): void;
    /**
     * Sends a callback with a parameters to update the popup window by processing the related popup window and the passed information on the server, in an Action specified by the PopupControl's PopupControlSettingsBase.CallbackRouteValues property.
     * @param window A ASPxClientPopupWindow object identifying the processed popup window.
     * @param data An object containing any information that needs to be passed to a handling Action specified by the PopupControlSettingsBase.CallbackRouteValues property.
     */
    PerformWindowCallback(window: ASPxClientPopupWindow, data: any): void;
    /**
     * Converts the specified object to the MVCxClientPopupControl type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): MVCxClientPopupControl;
}
/**
 * A client-side counterpart of the Query Builder extension.
 */
declare class MVCxClientQueryBuilder extends ASPxClientQueryBuilder {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientQueryBuilder>>;
    /**
     * Occurs after executing the Save command on the client.
     */
    SaveCommandExecuted: ASPxClientEvent<MVCxClientQueryBuilderSaveCommandExecutedEventHandler<MVCxClientQueryBuilder>>;
    /**
     * Sends a callback to the server and generates the server-side event passing it the specified argument.
     * @param arg A string value that represents any information that needs to be sent to the server-side event.
     */
    PerformCallback(arg: any): void;
}
/**
 * A method that will handle the MVCxClientQueryBuilder.SaveCommandExecuted event.
 * @param source An object which is the event source. Identifies the client object that raised the event.
 * @param e A MVCxClientQueryBuilderSaveCommandExecutedEventArgs object that contains event data.
 */
interface MVCxClientQueryBuilderSaveCommandExecutedEventHandler<Sender> { (source: Sender, e: MVCxClientQueryBuilderSaveCommandExecutedEventArgs): void; }
/**
 * Provides data for the MVCxClientQueryBuilder.SaveCommandExecuted event.
 */
declare class MVCxClientQueryBuilderSaveCommandExecutedEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the MVCxClientQueryBuilderSaveCommandExecutedEventArgs class with the specified settings.
     * @param result An object that specifies the Save command execution result.
     */
    constructor(result: string);
    /**
     * Specifies the Save command execution result.
     */
    Result: string;
}
/**
 * A client-side equivalent of the MVCxDocumentViewer class.
 */
declare class MVCxClientDocumentViewer extends ASPxClientDocumentViewer {
    /**
     * Occurs before performing a document export request.
     */
    BeforeExportRequest: ASPxClientEvent<MVCxClientBeforeExportRequestEventHandler<MVCxClientDocumentViewer>>;
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientDocumentViewer>>;
}
/**
 * Obsolete. Use the MVCxClientDocumentViewer class instead.
 */
declare class MVCxClientReportViewer extends ASPxClientReportViewer {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientReportViewer>>;
    /**
     * Occurs before performing a document export request.
     */
    BeforeExportRequest: ASPxClientEvent<MVCxClientBeforeExportRequestEventHandler<MVCxClientReportViewer>>;
}
/**
 * A method that will handle the MVCxClientReportViewer.BeforeExportRequest event.
 * @param source An object which is the event source. Identifies the client object that raised the event.
 * @param e A MVCxClientBeforeExportRequestEventArgs object that contains event data.
 */
interface MVCxClientBeforeExportRequestEventHandler<Sender> { (source: Sender, e: MVCxClientBeforeExportRequestEventArgs): void; }
/**
 * Provides data for client BeforeExportRequest events.
 */
declare class MVCxClientBeforeExportRequestEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the MVCxClientBeforeExportRequestEventArgs class with default settings.
     */
    constructor();
    /**
     * Gets an object containing specific information (if any, as name/value pairs) that should be passed as a request parameter from the client to the server side for further processing.
     */
    customArgs: any;
}
/**
 * A client-side equivalent of the MVCxReportDesigner class.
 */
declare class MVCxClientReportDesigner extends ASPxClientReportDesigner {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientReportDesigner>>;
    /**
     * Occurs after executing the Save command on the client.
     */
    SaveCommandExecuted: ASPxClientEvent<MVCxClientReportDesignerSaveCommandExecutedEventHandler<MVCxClientReportDesigner>>;
    /**
     * Sends a callback to the server and generates the server-side event, passing it the specified argument.
     * @param arg A string value that represents any information that needs to be sent to the server-side event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(arg: any, onSuccess?: (arg: string) => void): void;
}
/**
 * A method that will handle the MVCxReportDesignerClientSideEvents.SaveCommandExecuted event.
 * @param source An object which is the event source. Identifies the client object that raised the event.
 * @param e A MVCxClientBeforeExportRequestEventArgs object that contains event data.
 */
interface MVCxClientReportDesignerSaveCommandExecutedEventHandler<Sender> { (source: Sender, e: MVCxClientReportDesignerSaveCommandExecutedEventArgs): void; }
/**
 * Provides data for the MVCxClientReportDesigner.SaveCommandExecuted event.
 */
declare class MVCxClientReportDesignerSaveCommandExecutedEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the MVCxClientReportDesignerSaveCommandExecutedEventArgs class with the specified settings.
     * @param result A string value that represents the result of server-side processing.
     */
    constructor(result: string);
    /**
     * Returns the operation result.
     */
    Result: string;
}
/**
 * A client-side counterpart of the RichEdit extension.
 */
declare class MVCxClientRichEdit extends ASPxClientRichEdit {
    /**
     * Sends a callback with a parameter to update the RichEdit by processing the passed information on the server, in an Action specified via the RichEditSettings.CustomActionRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the RichEditSettings.CustomActionRouteValues property.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: any, onSuccess?: (arg: string) => void): void;
    /**
     * Converts the specified object to the MVCxClientRichEdit type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): MVCxClientRichEdit;
}
/**
 * A client-side counterpart of the RoundPanel extension.
 */
declare class MVCxClientRoundPanel extends ASPxClientRoundPanel {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientRoundPanel>>;
    /**
     * Sends a callback with a parameter to update the Round Panel by processing the passed information on the server, in an Action specified by the Round Panel's RoundPanelSettings.CallbackRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified by the RoundPanelSettings.CallbackRouteValues property.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: any, onSuccess?: (arg: string) => void): void;
    /**
     * Converts the specified object to the MVCxClientRoundPanel type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): MVCxClientRoundPanel;
}
/**
 * A client-side counterpart of the Scheduler extension.
 */
declare class MVCxClientScheduler extends ASPxClientScheduler {
    /**
     * Occurs on the client side when the tooltip is about to be displayed.
     */
    ToolTipDisplaying: ASPxClientEvent<MVCxClientSchedulerToolTipDisplayingEventHandler<MVCxClientScheduler>>;
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientScheduler>>;
    /**
     * Sends a callback with a parameter to update the Scheduler by processing the passed information on the server, in an Action specified via the Scheduler's SchedulerSettings.CustomActionRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the SchedulerSettings.CustomActionRouteValues property.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: any, onSuccess?: (arg: string) => void): void;
    /**
     * Converts the specified object to the MVCxClientScheduler type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): MVCxClientScheduler;
}
/**
 * A template that is rendered to display a tooltip.
 */
declare class MVCxClientSchedulerTemplateToolTip extends ASPxClientToolTipBase {
    /**
     * Gets the tooltip type.
     */
    type: MVCxSchedulerToolTipType;
}
/**
 * A method that will handle the MVCxSchedulerClientSideEvents.ToolTipDisplaying event.
 * @param source An object which is the event source. Identifies the client object that raised the event.
 * @param e A MVCxClientSchedulerToolTipDisplayingEventArgs object that contains the related arguments.
 */
interface MVCxClientSchedulerToolTipDisplayingEventHandler<Sender> { (source: Sender, e: MVCxClientSchedulerToolTipDisplayingEventArgs): void; }
/**
 * Provides data for the MVCxClientScheduler.ToolTipDisplaying event.
 */
declare class MVCxClientSchedulerToolTipDisplayingEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes new instance of the MVCxClientSchedulerToolTipDisplayingEventArgs class with the specified settings.
     * @param toolTip A MVCxClientSchedulerTemplateToolTip object that is a tooltip.
     * @param data An ASPxClientSchedulerToolTipData object that is the tooltip data.
     */
    constructor(toolTip: MVCxClientSchedulerTemplateToolTip, data: ASPxClientSchedulerToolTipData);
    /**
     * Gets the tooltip related to the event.
     */
    toolTip: MVCxClientSchedulerTemplateToolTip;
    /**
     * Gets information about the tooltip related to the event.
     */
    data: ASPxClientSchedulerToolTipData;
}
/**
 * Lists available tooltip types.
 */
declare class MVCxSchedulerToolTipType {
    /**
     * The tooltip is displayed for a selected appointment.
     */
    static readonly Appointment: number;
    /**
     * The tooltip is displayed for a dragged appointment.
     */
    static readonly AppointmentDrag: number;
    /**
     * The tooltip is displayed for a selected time interval.
     */
    static readonly Selection: number;
}
/**
 * A client-side counterpart of the Scheduler Storage Control extension.
 */
declare class MVCxClientSchedulerStorage extends ASPxClientSchedulerStorageControl {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientSchedulerStorage>>;
    /**
     * Converts the specified object to the MVCxClientSchedulerStorage type. SchedulerStorage
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): MVCxClientSchedulerStorage;
}
/**
 * A client-side counterpart of the Spreadsheet extension.
 */
declare class MVCxClientSpreadsheet extends ASPxClientSpreadsheet {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientSpreadsheet>>;
    /**
     * Sends a callback with a parameter to update the Spreadsheet by processing the passed information on the server, in an Action specified via the SpreadsheetSettings.CustomActionRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the SpreadsheetSettings.CustomActionRouteValues property.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: any, onSuccess?: (arg: string) => void): void;
    /**
     * Converts the specified object to the MVCxClientSpreadsheet type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): MVCxClientSpreadsheet;
}
/**
 * A client-side counterpart of the PageControl extension.
 */
declare class MVCxClientPageControl extends ASPxClientPageControl {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientPageControl>>;
    /**
     * Sends a callback with a parameter to update the PageControl by processing the passed information on the server, in an Action specified by the PageControl's PageControlSettings.CallbackRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified by the PageControlSettings.CallbackRouteValues property.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: any, onSuccess?: (arg: string) => void): void;
    /**
     * Converts the specified object to the MVCxClientPageControl type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): MVCxClientPageControl;
}
/**
 * A client-side counterpart of the TokenBox and TokenBoxFor extensions.
 */
declare class MVCxClientTokenBox extends ASPxClientTokenBox {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientTokenBox>>;
    /**
     * Sends a callback with a parameter to update the TokenBox by processing the passed information on the server, in an Action specified by the TokenBox's AutoCompleteBoxBaseSettings.CallbackRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified by the AutoCompleteBoxBaseSettings.CallbackRouteValues property.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: any, onSuccess?: (arg: string) => void): void;
    /**
     * Converts the specified object to the MVCxClientTokenBox type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): MVCxClientTokenBox;
}
/**
 * A client-side counterpart of the TreeList extension.
 */
declare class MVCxClientTreeList extends ASPxClientTreeList {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientTreeList>>;
    /**
     * Sends a callback with a parameter to update the TreeList by processing the passed information on the server, in an Action specified via the TreeList's TreeListSettings.CustomActionRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the TreeListSettings.CustomActionRouteValues property.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: any, onSuccess?: (arg: string) => void): void;
    /**
     * Sends a callback with a parameter to process the passed information on the server, in an Action specified via the TreeList's TreeListSettings.CustomDataActionRouteValues property, and then return the processing result to the client, to the ASPxClientTreeList.CustomDataCallback event. This method does not update the TreeList.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the TreeListSettings.CustomDataActionRouteValues property.
     */
    PerformCustomDataCallback(data: any): void;
    /**
     * Converts the specified object to the MVCxClientTreeList type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): MVCxClientTreeList;
}
/**
 * A client-side counterpart of the TreeView extension.
 */
declare class MVCxClientTreeView extends ASPxClientTreeView {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientTreeView>>;
    /**
     * Converts the specified object to the MVCxClientTreeView type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): MVCxClientTreeView;
}
/**
 * A client-side counterpart of the UploadControl extension.
 */
declare class MVCxClientUploadControl extends ASPxClientUploadControl {
    /**
     * Converts the specified object to the MVCxClientUploadControl type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): MVCxClientUploadControl;
}
/**
 * An object containing a service static function that can be useful when performing client-side processing.
 */
declare class MVCxClientUtils {
    /**
     * Loads service resources (such as scripts, CSS files, etc.) required for DevExpress functionality to work properly after a non DevExpress callback has been processed on the server and returned back to the client.
     */
    static FinalizeCallback(): void;
    /**
     * Returns values of editors placed in the specified container. An object containing pairs of editor names and values.
     * @param containerOrId A container of editors, or its ID.
     * @param processInvisibleEditors true to process both visible and invisible editors that belong to the specified container; false to process only visible editors.
     */
    static GetSerializedEditorValuesInContainer(containerOrId: any, processInvisibleEditors?: boolean): any;
}
/**
 * A method that will handle client BeginCallback events.
 * @param source An object which is the event source. Identifies the client object that raised the event.
 * @param e A MVCxClientBeginCallbackEventArgs object that contains event data.
 */
interface MVCxClientBeginCallbackEventHandler<Sender> { (source: Sender, e: MVCxClientBeginCallbackEventArgs): void; }
/**
 * Provides data for client BeginCallback events.
 */
declare class MVCxClientBeginCallbackEventArgs extends ASPxClientBeginCallbackEventArgs {
    /**
     * Initializes a new instance of the MVCxClientBeginCallbackEventArgs class.
     * @param command A string value that is the name of the command that initiated a callback.
     */
    constructor(command: string);
    /**
     * Gets an object containing specific information (if any, as name/value pairs) that should be passed as a request parameter from the client to the server side for further processing.
     */
    customArgs: any;
}
/**
 * A method that will handle the ASPxClientGlobalEvents.BeginCallback event.
 * @param source An object which is the event source. Identifies the client object that raised the event.
 * @param e A MVCxClientGlobalBeginCallbackEventArgs object that contains event data.
 */
interface MVCxClientGlobalBeginCallbackEventHandler<Sender> { (source: Sender, e: MVCxClientGlobalBeginCallbackEventArgs): void; }
/**
 * Provides data for the ASPxClientGlobalEvents.BeginCallback event.
 */
declare class MVCxClientGlobalBeginCallbackEventArgs extends ASPxClientGlobalBeginCallbackEventArgs {
    /**
     * Initializes a new instance of the MVCxClientGlobalBeginCallbackEventArgs class.
     * @param control An ASPxClientControl class descendant object that is the control that initiated a callback.
     * @param command A string value that is the name of the command that initiated a callback.
     */
    constructor(control: ASPxClientControl, command: string);
    /**
     * Gets an object containing specific information (if any, as name/value pairs) that should be passed as a request parameter from the client to the server side for further processing.
     */
    customArgs: any;
}
/**
 * An ASP.NET MVC equivalent of the client ASPxClientGlobalEvents component.
 */
declare class MVCxClientGlobalEvents {
    /**
     * Occurs on the client side after client object models of all DevExpress MVC extensions contained within the page have been initialized.
     */
    ControlsInitialized: ASPxClientEvent<ASPxClientControlsInitializedEventHandler<MVCxClientGlobalEvents>>;
    /**
     * Occurs on the client when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientGlobalBeginCallbackEventHandler<MVCxClientGlobalEvents>>;
    /**
     * Occurs on the client after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientGlobalEndCallbackEventHandler<MVCxClientGlobalEvents>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by a DevExpress MVC extension.
     */
    CallbackError: ASPxClientEvent<ASPxClientGlobalCallbackErrorEventHandler<MVCxClientGlobalEvents>>;
    /**
     * Dynamically connects the MVCxClientGlobalEvents.ControlsInitialized client event with an appropriate event handler function.
     * @param handler A object representing the event handling function's content.
     */
    static AddControlsInitializedEventHandler(handler: ASPxClientEvent<ASPxClientControlsInitializedEventHandler<MVCxClientGlobalEvents>>): void;
    /**
     * Dynamically connects the MVCxClientGlobalEvents.BeginCallback client event with an appropriate event handler function.
     * @param handler A object containing the event handling function's content.
     */
    static AddBeginCallbackEventHandler(handler: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientGlobalEvents>>): void;
    /**
     * Dynamically connects the MVCxClientGlobalEvents.EndCallback client event with an appropriate event handler function.
     * @param handler A object containing the event handling function's content.
     */
    static AddEndCallbackEventHandler(handler: ASPxClientEvent<ASPxClientEndCallbackEventHandler<MVCxClientGlobalEvents>>): void;
    /**
     * Dynamically connects the MVCxClientGlobalEvents.CallbackError client event with an appropriate event handler function.
     * @param handler A object containing the event handling function's content.
     */
    static AddCallbackErrorHandler(handler: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<MVCxClientGlobalEvents>>): void;
}
/**
 * A client-side counterpart of the VerticalGrid extension.
 */
declare class MVCxClientVerticalGrid extends ASPxClientVerticalGrid {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<MVCxClientBeginCallbackEventHandler<MVCxClientVerticalGrid>>;
    /**
     * Sends a callback with a parameter to update the VerticalGrid by processing the passed information on the server in an Action specified via the grid's GridSettingsBase.CustomActionRouteValues property.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the grid's GridSettingsBase.CustomActionRouteValues property.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(data: any, onSuccess?: (arg: string) => void): void;
    /**
     * Sends a callback with a parameter to process the passed information on the server, in an Action specified via the VerticalGrid's GridSettingsBase.CustomDataActionRouteValues property, and then process the returned result in the specified client function. This method does not update the VerticalGrid.
     * @param data An object containing any information that needs to be passed to a handling Action specified via the GridSettingsBase.CustomDataActionRouteValues property.
     * @param onCallback A ASPxClientGridViewValuesCallback object that represents the JavaScript function which receives the information on the client side.
     */
    GetValuesOnCustomCallback(data: any, onCallback: ASPxClientGridViewValuesCallback): void;
    /**
     * Converts the specified object to the MVCxClientVerticalGrid type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): MVCxClientVerticalGrid;
}
/**
 * A client-side equivalent of the MVCxWebDocumentViewer class.
 */
declare class MVCxClientWebDocumentViewer extends ASPxClientWebDocumentViewer {
}
declare class ASPxClientChartDesigner extends ASPxClientControl {
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientChartDesigner>>;
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientChartDesigner>>;
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientChartDesigner>>;
    SaveCommandExecute: ASPxClientEvent<ASPxClientChartDesignerSaveCommandExecuteEventHandler<ASPxClientChartDesigner>>;
    CustomizeMenuActions: ASPxClientEvent<ASPxClientChartDesignerCustomizeMenuActionsEventHandler<ASPxClientChartDesigner>>;
    PerformCallback(arg: string, onSuccess?: (arg: string) => void): void;
    UpdateLocalization(localization: { [key: string]: string; }): void;
    GetDesignerModel(): any;
    GetJsonChartModel(): string;
    static Cast(obj: any): ASPxClientChartDesigner;
}
interface ASPxClientChartDesignerSaveCommandExecuteEventHandler<Sender> { (source: Sender, e: ASPxClientChartDesignerSaveCommandExecuteEventArgs): void; }
declare class ASPxClientChartDesignerSaveCommandExecuteEventArgs extends ASPxClientEventArgs {
    constructor();
    handled: boolean;
}
interface ASPxClientChartDesignerCustomizeMenuActionsEventHandler<Sender> { (source: Sender, e: ASPxClientChartDesignerCustomizeMenuActionsEventArgs): void; }
declare class ASPxClientChartDesignerMenuAction {
    text: string;
    imageClassName: string;
    clickAction: Function;
    disabled: boolean;
    visible: boolean;
    hotKey: string;
    hasSeparator: string;
    container: string;
}
declare class ASPxClientChartDesignerCustomizeMenuActionsEventArgs extends ASPxClientEventArgs {
    constructor(actions: ASPxClientChartDesignerMenuAction[]);
    actions: ASPxClientChartDesignerMenuAction[];
}
/**
 * A class which provides access to the entire hierarchy of chart elements on the client side.
 */
declare class ASPxClientWebChartControl extends ASPxClientControl {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientWebChartControl>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientWebChartControl>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientWebChartControl.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientWebChartControl>>;
    /**
     * Converts the specified object to the ASPxClientWebChartControl type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientWebChartControl;
    /**
     * Returns an ASPxClientWebChart object, which contains information about the hierarchy of a chart control, and provides access to the main properties of chart elements  on the client side.
     */
    GetChart(): ASPxClientWebChart;
    /**
     * Returns the printing options of the chart control.
     */
    GetPrintOptions(): ASPxClientChartPrintOptions;
    /**
     * Changes the mouse pointer, which is shown when the mouse is over the chart control, to the pointer with the specified name.
     * @param cursor A string value representing the name of the desired cursor.
     */
    SetCursor(cursor: string): void;
    /**
     * Occurs on the client side when any chart element is hot-tracked.
     */
    ObjectHotTracked: ASPxClientEvent<ASPxClientWebChartControlHotTrackEventHandler<ASPxClientWebChartControl>>;
    /**
     * Occurs before crosshair items are drawn when the chart's contents are being drawn.
     */
    CustomDrawCrosshair: ASPxClientEvent<ASPxClientWebChartControlCustomDrawCrosshairEventHandler<ASPxClientWebChartControl>>;
    /**
     * Occurs on the client side when any chart element is selected.
     */
    ObjectSelected: ASPxClientEvent<ASPxClientWebChartControlHotTrackEventHandler<ASPxClientWebChartControl>>;
    /**
     * Returns the specific chart element which is located under the test point. An array collection of ASPxClientHitObject objects, that represent the chart elements located under the test point.
     * @param x An integer value that specifies the x coordinate of the test point.
     * @param y An integer value that specifies the y coordinate of the test point.
     */
    HitTest(x: number, y: number): ASPxClientHitObject[];
    /**
     * Sends a callback to the server and generates the server-side event, passing it the specified argument.
     * @param args A string value that represents any information that needs to be sent to the server-side event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(args: string, onSuccess?: (arg: string) => void): void;
    /**
     * Prints the current chart on the client side.
     */
    Print(): void;
    /**
     * Loads a chart which should be customized from its object model.
     * @param serializedChartObjectModel A String object representing the chart model.
     */
    LoadFromObjectModel(serializedChartObjectModel: string): void;
    /**
     * Exports a chart to a file in the specified format, and saves it to disk, using the specified file name.
     * @param format A string value specifying the format, to which a chart should be exported.
     * @param filename A string value specifying the file name, to which a chart should be exported. If this parameter is missing or set to an empty string, then the created file will be named using the client-side name of a chart.
     */
    SaveToDisk(format: string, filename?: string): void;
    /**
     * Exports a report to the file of the specified format, and shows it in a new Web Browser window.
     * @param format A string  value specifying a format in which a report should be exported.
     */
    SaveToWindow(format: string): void;
    /**
     * Specifies the chart size.
     * @param width The chart width.
     * @param height The chart height.
     */
    SetChartSize(width: number, height: number): void;
    /**
     * Gets the main DOM (Document Object Model) element on a Web Page representing this ASPxClientWebChartControl object.
     */
    GetMainDOMElement(): any;
}
/**
 * A method that will handle the ASPxClientWebChartControl.CustomDrawCrosshair event.
 * @param source The event source. This parameter identifies the ASPxClientWebChart.chartControl which raised the event.
 * @param e An ASPxClientWebChartControlCustomDrawCrosshairEventArgs object which contains event data.
 */
interface ASPxClientWebChartControlCustomDrawCrosshairEventHandler<Sender> { (source: Sender, e: ASPxClientWebChartControlCustomDrawCrosshairEventArgs): void; }
/**
 * Provides data for a chart control's ASPxClientWebChartControl.CustomDrawCrosshair event.
 */
declare class ASPxClientWebChartControlCustomDrawCrosshairEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Initializes a new object of the ASPxClientWebChartControlCustomDrawCrosshairEventArgs type with the specified settings.
     * @param processOnServer true to process the event on the server side; false to completely handle it on the client side.
     * @param cursorCrosshairAxisLabelElements An array of ASPxClientCrosshairAxisLabelElement objects that contain the crosshair axis label elements for custom drawing a crosshair cursor.
     * @param cursorCrosshairLineElement An ASPxClientCrosshairLineElement object that contains the crosshair line element for custom drawing a crosshair cursor.
     * @param crosshairElementGroups An array of ASPxClientCrosshairElementGroup objects that contain crosshair element groups for custom drawing a crosshair cursor.
     * @param crosshairLegendElements An array of ASPxClientCrosshairLegendElement objects that contain crosshair legend elements for custom drawing a crosshair cursor.
     */
    constructor(processOnServer: boolean, cursorCrosshairAxisLabelElements: ASPxClientCrosshairAxisLabelElement[], cursorCrosshairLineElement: ASPxClientCrosshairLineElement, crosshairElementGroups: ASPxClientCrosshairElementGroup[], crosshairLegendElements: ASPxClientCrosshairLegendElement[]);
    /** @deprecated This property is now obsolete. Use the crosshairElementGroup.CrosshairElements property instead. */
    /**
     * Returns crosshair elements settings to custom draw a crosshair cursor.
     */
    crosshairElements: ASPxClientCrosshairElement[];
    /**
     * Returns the crosshair axis label elements to customize their appearance.
     */
    cursorCrosshairAxisLabelElements: ASPxClientCrosshairAxisLabelElement[];
    /**
     * Gets crosshair line element settings that are used to custom draw a crosshair cursor.
     */
    cursorCrosshairLineElement: ASPxClientCrosshairLineElement;
    /** @deprecated This property is now obsolete. Use the crosshairElementGroup.HeaderElement property instead. */
    /**
     * Returns the crosshair group header elements to customize their appearance.
     */
    crosshairGroupHeaderElements: ASPxClientCrosshairGroupHeaderElement[];
    /**
     * Provides access to the settings of crosshair elements and crosshair group header elements to customize their appearance.
     */
    crosshairElementGroups: ASPxClientCrosshairElementGroup[];
    /**
     * Returns the crosshair legend elements to custom draw the Crosshair.
     */
    crosshairLegendElements: ASPxClientCrosshairLegendElement[];
    /**
     * Returns the array of indicator elements that the Crosshair Cursor displays in a legend.
     */
    crosshairIndicatorLegendElements: ASPxClientCrosshairIndicatorLegendElement[];
}
/**
 * Contains a list of crosshair cursor elements when custom drawing a crosshair cursor on the client side.
 */
declare class ASPxClientCrosshairDrawInfoList {
}
/**
 * Contains information for custom drawing a crosshair cursor on the client side.
 */
declare class ASPxClientCrosshairDrawInfo {
}
/**
 * The base class for all Crosshair Cursor's elements.
 */
declare class ASPxClientCrosshairElementBase {
    /**
     * Returns the series or indicator point for which the Crosshair Cursor creates this element.
     */
    Point: ASPxClientSeriesPoint;
    /**
     * Returns the Crosshair Cursor's line element that belongs to the Crosshair element.
     */
    LineElement: ASPxClientCrosshairLineElement;
    /**
     * Returns the Crosshair Cursor's axis label element that belongs to the Crosshair element.
     */
    AxisLabelElement: ASPxClientCrosshairAxisLabelElement;
    /**
     * Returns the Crosshair Cursor's label element that belongs to the Crosshair element.
     */
    LabelElement: ASPxClientCrosshairSeriesLabelElement;
    /**
     * Returns a value that specifies whether the crosshair element is visible.
     */
    visible: boolean;
}
/**
 * Represents the client-side equivalent of the CrosshairElement class.
 */
declare class ASPxClientCrosshairElement {
    /**
     * Gets a series that a crosshair element hovers over when implementing a custom draw.
     */
    Series: ASPxClientSeries;
}
/**
 * The Crosshair Cursor's element that displays information about an indicator.
 */
declare class ASPxClientCrosshairIndicatorElement {
    /**
     * Returns the indicator for whose point the Crosshair Cursor creates the element.
     */
    Indicator: ASPxClientIndicator;
}
/**
 * Represents the client-side equivalent of the CrosshairLineElement class.
 */
declare class ASPxClientCrosshairLineElement {
}
/**
 * Represents the client-side equivalent of the CrosshairAxisLabelElement class.
 */
declare class ASPxClientCrosshairAxisLabelElement {
}
/**
 * The client-side equivalent of the CrosshairGroupHeaderElement class.
 */
declare class ASPxClientCrosshairGroupHeaderElement {
}
/**
 * The client-side equivalent of the CrosshairLabelElement class.
 */
declare class ASPxClientCrosshairSeriesLabelElement {
}
/**
 * Represents the client-side equivalent of the CrosshairElementGroup class.
 */
declare class ASPxClientCrosshairElementGroup {
    /**
     * Returns the Crosshair Cursor group's Header element.
     */
    HeaderElement: ASPxClientCrosshairGroupHeaderElement;
    /**
     * Returns the collection of elements that the Crosshair Cursor displays in the group.
     */
    CrosshairElements: ASPxClientCrosshairElement[];
    /**
     * Returns the collection of indicator elements that the Crosshair Cursor displays in the group.
     */
    CrosshairIndicatorElements: ASPxClientCrosshairIndicatorElement[];
}
/**
 * The base class for elements the Crosshair Cursor displays in the legend.
 */
declare class ASPxClientCrosshairLegendElementBase {
    /**
     * Returns the series or indicator point for which the Crosshair Cursor creates this element.
     */
    Point: ASPxClientSeriesPoint;
    /**
     * Returns the Crosshair Cursor's line element to custom draw the crosshair.
     */
    LineElement: ASPxClientCrosshairLineElement;
    /**
     * Provides access to the crosshair axis label element to custom draw the crosshair.
     */
    AxisLabelElement: ASPxClientCrosshairAxisLabelElement;
    /**
     * Returns the value that specifies whether the crosshair legend element is visible.
     */
    visible: boolean;
}
/**
 * The CrosshairIndicatorLegendElement class's client-side equivalent.
 */
declare class ASPxClientCrosshairIndicatorLegendElement extends ASPxClientCrosshairLegendElementBase {
    /**
     * Returns the Indicator whose point the legend element displays.
     */
    Indicator: ASPxClientIndicator;
}
/**
 * The client-side equivalent of the CrosshairLegendElement class.
 */
declare class ASPxClientCrosshairLegendElement extends ASPxClientCrosshairLegendElementBase {
    /**
     * Returns a series whose point the Crosshair Cursor legend element highlights.
     */
    Series: ASPxClientSeries;
}
/**
 * Represents a method that will handle the ASPxClientWebChartControl.ObjectHotTracked and ASPxClientWebChartControl.ObjectSelected events.
 * @param source The event source. This parameter identifies the ASPxClientWebChartControl which raised the event.
 * @param e An ASPxClientWebChartControlHotTrackEventArgs object which contains event data.
 */
interface ASPxClientWebChartControlHotTrackEventHandler<Sender> { (source: Sender, e: ASPxClientWebChartControlHotTrackEventArgs): void; }
/**
 * Provides data for a chart control's ASPxClientWebChartControl.ObjectHotTracked and ASPxClientWebChartControl.ObjectSelected events on the client side.
 */
declare class ASPxClientWebChartControlHotTrackEventArgs extends ASPxClientProcessingModeEventArgs {
    constructor(processOnServer: boolean, hitObject: ASPxClientWebChartElement, additionalHitObject: ASPxClientWebChartElement, hitInfo: ASPxClientWebChartHitInfo, htmlElement: any, x: number, y: number, absoluteX?: number, absoluteY?: number);
    /**
     * Provides access on the client side to the chart element, for which the event was raised.
     */
    hitObject: ASPxClientWebChartElement;
    /**
     * Provides access on the client side to the object, which is in some way related to the object being hit. The returned value depends on the ASPxClientWebChartControlHotTrackEventArgs.hitObject type and hit point location.
     */
    additionalHitObject: ASPxClientWebChartElement;
    /**
     * Gets details on the chart elements located at the point where an end-user has clicked when hot-tracking or selecting a chart element on the client side.
     */
    hitInfo: ASPxClientWebChartHitInfo;
    /**
     * Provides access on the client side to the chart and all its elements.
     */
    chart: ASPxClientWebChart;
    /**
     * Gets the HTML object that contains the processed item.
     */
    htmlElement: any;
    /**
     * Gets the X-coordinate of the hit test point, relative to the top left corner of the chart.
     */
    x: number;
    /**
     * Gets the Y-coordinate of the hit test point, relative to the top left corner of the chart.
     */
    y: number;
    /**
     * Gets the X-coordinate of the hit test point, relative to the top left corner of the Web Page containing this chart.
     */
    absoluteX: number;
    /**
     * Gets the Y-coordinate of the hit test point, relative to the top left corner of the Web Page containing this chart.
     */
    absoluteY: number;
    /**
     * Gets a value indicating whether the hot-tracking or object selection should be canceled.
     */
    cancel: boolean;
}
/**
 * Represents an object under the hit test point within a chart control, on the client side.
 */
declare class ASPxClientHitObject {
    /**
     * Gets the chart element for which the event was raised.
     */
    Object: ASPxClientWebChartElement;
    /**
     * Provides access to an object, which is in some way related to the object being hit. The returned value depends on the ASPxClientHitObject.Object type and hit point location.
     */
    AdditionalObject: ASPxClientWebChartElement;
}
/**
 * Contains information about a specific test point within a chart control, on the client side.
 */
declare class ASPxClientWebChartHitInfo {
    /**
     * Gets a value indicating whether the test point is within the chart.
     */
    inChart: boolean;
    /**
     * Gets a value indicating whether the test point is within the chart title.
     */
    inChartTitle: boolean;
    /**
     * Gets a value indicating whether the test point is within the axis.
     */
    inAxis: boolean;
    /**
     * Gets a value indicating whether the test point is within the axis label item.
     */
    inAxisLabelItem: boolean;
    /**
     * Gets a value indicating whether the test point is within the axis title.
     */
    inAxisTitle: boolean;
    /**
     * Gets a value indicating whether the test point is within the constant line.
     */
    inConstantLine: boolean;
    /**
     * Gets a value indicating whether the test point is within the diagram.
     */
    inDiagram: boolean;
    /**
     * Gets a value indicating whether the test point is within the non-default pane.
     */
    inNonDefaultPane: boolean;
    /**
     * Returns the value that indicates whether the test point is within the pane title.
     */
    inPaneTitle: boolean;
    /**
     * Gets a value indicating whether the test point is within the legend.
     */
    inLegend: boolean;
    /**
     * Gets the value indicating whether or not the test point is within a custom legend item.
     */
    inCustomLegendItem: boolean;
    /**
     * Gets a value indicating whether the test point is within the series.
     */
    inSeries: boolean;
    /**
     * Gets a value indicating whether the test point is within the series label.
     */
    inSeriesLabel: boolean;
    /**
     * Gets a value indicating whether the test point is within the series point.
     */
    inSeriesPoint: boolean;
    /**
     * Gets a value indicating whether the test point is within the series title.
     */
    inSeriesTitle: boolean;
    /** @deprecated This property is now obsolete. Use the inIndicator property instead. */
    /**
     * Gets a value indicating whether the test point is within the trendline.
     */
    inTrendLine: boolean;
    /** @deprecated This property is now obsolete. Use the inIndicator property instead. */
    /**
     * Gets a value indicating whether the test point is within the Fibonacci Indicator.
     */
    inFibonacciIndicator: boolean;
    /** @deprecated This property is now obsolete. Use the inIndicator property instead. */
    /**
     * Gets a value indicating whether the test point is within the regression line.
     */
    inRegressionLine: boolean;
    /**
     * Gets a value specifying whether the test point is within an indicator.
     */
    inIndicator: boolean;
    /**
     * Gets a value indicating whether the test point is within an annotation.
     */
    inAnnotation: boolean;
    /**
     * Gets a value indicating whether the test point is within a hyperlink.
     */
    inHyperlink: boolean;
    /**
     * Gets the client-side chart instance from under the test point.
     */
    chart: ASPxClientWebChart;
    /**
     * Gets the client-side chart title instance from under the test point.
     */
    chartTitle: ASPxClientChartTitle;
    /**
     * Gets the client-side axis instance from under the test point.
     */
    axis: ASPxClientAxisBase;
    /**
     * Gets the client-side constant line instance from under the test point.
     */
    constantLine: ASPxClientConstantLine;
    /**
     * Gets the client-side diagram instance from under the test point.
     */
    diagram: ASPxClientXYDiagramBase;
    /**
     * Gets the client-side non-default pane instance from under the test point.
     */
    nonDefaultPane: ASPxClientXYDiagramPane;
    /**
     * Gets the client-side pane title instance from under the test point.
     */
    paneTitle: ASPxClientPaneTitle;
    /**
     * Gets the client-side legend instance from under the test point.
     */
    legend: ASPxClientLegend;
    /**
     * Gets a custom legend item which is located under the test point.
     */
    customLegendItem: ASPxClientCustomLegendItem;
    /**
     * Gets the client-side series instance from under the test point.
     */
    series: ASPxClientSeries;
    /**
     * Gets the client-side series label instance from under the test point.
     */
    seriesLabel: ASPxClientSeriesLabel;
    /**
     * Gets the client-side series title instance from under the test point.
     */
    seriesTitle: ASPxClientSeriesTitle;
    /** @deprecated This property is now obsolete. Use the indicator property instead. */
    /**
     * Gets the client-side trendline instance from under the test point.
     */
    trendLine: ASPxClientTrendLine;
    /** @deprecated This property is now obsolete. Use the indicator property instead. */
    /**
     * Gets the client-side Fibonacci indicator instance from under the test point.
     */
    fibonacciIndicator: ASPxClientFibonacciIndicator;
    /** @deprecated This property is now obsolete. Use the indicator property instead. */
    /**
     * Gets the client-side regression line instance from under the test point.
     */
    regressionLine: ASPxClientRegressionLine;
    /**
     * Gets the client-side indicator instance from under the test point.
     */
    indicator: ASPxClientIndicator;
    /**
     * Gets the client-side annotation instance from under the test point.
     */
    annotation: ASPxClientAnnotation;
    /**
     * Gets the client-side series point instance from under the test point.
     */
    seriesPoint: ASPxClientSeriesPoint;
    /**
     * Gets the client-side axis label item instance from under the test point.
     */
    axisLabelItem: ASPxClientAxisLabelItem;
    /**
     * Gets the client-side axis title instance from under the test point.
     */
    axisTitle: ASPxClientAxisTitle;
    /**
     * Returns a hyperlink which is located under the test point.
     */
    hyperlink: string;
}
/**
 * Represents the client-side equivalent of the DiagramCoordinates class.
 */
declare class ASPxClientDiagramCoordinates {
    /**
     * Gets the type of the argument scale.
     */
    argumentScaleType: string;
    /**
     * Gets the type of the value scale.
     */
    valueScaleType: string;
    /**
     * Gets the argument of the data point as a text string.
     */
    qualitativeArgument: string;
    /**
     * Gets the numerical representation of the data point's argument.
     */
    numericalArgument: number;
    /**
     * Gets the date-time representation of the data point's argument.
     */
    dateTimeArgument: Date;
    timeSpanArgument: any;
    /**
     * Gets the numerical representation of the data point's value.
     */
    numericalValue: number;
    /**
     * Gets the date-time representation of the data point's value.
     */
    dateTimeValue: Date;
    timeSpanValue: any;
    /**
     * Gets the X-axis of the diagram point.
     */
    axisX: ASPxClientAxisBase;
    /**
     * Gets the Y-axis of the diagram point.
     */
    axisY: ASPxClientAxisBase;
    /**
     * Gets the pane of the diagram point.
     */
    pane: ASPxClientXYDiagramPane;
    /**
     * Checks whether the current object represents a point outside the diagram area.
     */
    IsEmpty(): boolean;
    /**
     * Gets the value of the client-side axis instance. An ASPxClientAxisValue object that contains the information about the axis scale type and value.
     * @param axis An ASPxClientAxisBase class descendant, representing the axis that contains the requested value.
     */
    GetAxisValue(axis: ASPxClientAxisBase): ASPxClientAxisValue;
}
/**
 * Contains the information about an axis value.
 */
declare class ASPxClientAxisValue {
    /**
     * Gets the axis scale type.
     */
    scaleType: string;
    /**
     * Gets the axis value, if the axis scale type is qualitative.
     */
    qualitativeValue: string;
    /**
     * Gets the axis value, if the axis scale type is numerical.
     */
    numericalValue: number;
    /**
     * Gets the axis value, if the axis scale type is date-time.
     */
    dateTimeValue: Date;
    timeSpanValue: any;
}
/**
 * Represents the client-side equivalent of the ControlCoordinates class.
 */
declare class ASPxClientControlCoordinates {
    /**
     * Gets the point's pane.
     */
    pane: ASPxClientXYDiagramPane;
    /**
     * Gets the point's X-coordinate, in pixels.
     */
    x: number;
    /**
     * Gets the point's Y-coordinate, in pixels.
     */
    y: number;
    /**
     * Gets the point's visibility state.
     */
    visibility: string;
}
/**
 * Represents the client-side equivalent of the ChartElement class.
 */
declare class ASPxClientWebChartElement {
    /**
     * Gets the chart that owns the current chart element.
     */
    chart: ASPxClientWebChart;
}
/**
 * Represents a base class for chart elements, which are not necessarily required to be present on the client side.
 */
declare class ASPxClientWebChartEmptyElement extends ASPxClientWebChartElement {
}
/**
 * Represents a base class for chart elements, which are required to be present on the client side.
 */
declare class ASPxClientWebChartRequiredElement extends ASPxClientWebChartElement {
}
/**
 * Represents the client-side equivalent of the ChartElementNamed class.
 */
declare class ASPxClientWebChartElementNamed extends ASPxClientWebChartRequiredElement {
    /**
     * Gets the name of the chart element.
     */
    name: string;
}
/**
 * Represents the client-side equivalent of the WebChartControl control.
 */
declare class ASPxClientWebChart extends ASPxClientWebChartRequiredElement {
    /**
     * Gets the client-side Chart Control that owns the current chart.
     */
    chartControl: ASPxClientWebChartControl;
    /**
     * Gets the chart's diagram and provides access to its settings.
     */
    diagram: ASPxClientWebChartElement;
    /**
     * Provides access to the chart's collection of series.
     */
    series: ASPxClientSeries[];
    /**
     * Provides access to the collection of chart titles.
     */
    titles: ASPxClientChartTitle[];
    /**
     * Provides access to the chart's collection of annotations.
     */
    annotations: ASPxClientAnnotation[];
    /**
     * Gets the chart's legend and provides access to its settings.
     */
    legend: ASPxClientLegend;
    /**
     * Returns the collection of legends.
     */
    legends: ASPxClientLegend[];
    /**
     * Gets the name of the appearance, which is currently used to draw the chart's elements.
     */
    appearanceName: string;
    /**
     * Gets the name of the palette currently used to draw the chart's series.
     */
    paletteName: string;
    /**
     * Gets a value indicating whether series tooltips should be shown.
     */
    showSeriesToolTip: boolean;
    /**
     * Gets a value indicating whether point tooltips should be shown.
     */
    showPointToolTip: boolean;
    /**
     * Gets a value indicating whether a crosshair cursor should be shown.
     */
    showCrosshair: boolean;
    /**
     * Gets a value that contains information on how the tooltip position is defined, for example, relative to a mouse pointer or chart element.
     */
    toolTipPosition: ASPxClientToolTipPosition;
    /**
     * Returns the tooltip controller that shows tooltips for chart elements.
     */
    toolTipController: ASPxClientToolTipController;
    /**
     * Gets the settings for a crosshair cursor concerning its position and appearance on a diagram.
     */
    crosshairOptions: ASPxClientCrosshairOptions;
    /**
     * Gets a css postfix for a chart.
     */
    cssPostfix: string;
    /**
     * Gets or sets a value which specifies how the chart elements are selected.
     */
    selectionMode: string;
}
/**
 * Represents the client-side equivalent of the SimpleDiagram class.
 */
declare class ASPxClientSimpleDiagram extends ASPxClientWebChartEmptyElement {
}
/**
 * Represents the base class for all diagram classes, which have X and Y axes.
 */
declare class ASPxClientXYDiagramBase extends ASPxClientWebChartRequiredElement {
    /**
     * Gets the X-axis.
     */
    axisX: ASPxClientAxisBase;
    /**
     * Gets the Y-axis.
     */
    axisY: ASPxClientAxisBase;
}
/**
 * Represents the client-side equivalent of the XYDiagram2D class.
 */
declare class ASPxClientXYDiagram2D extends ASPxClientXYDiagramBase {
    /**
     * Provides access to a collection of secondary X-axes for a given 2D XY-diagram.
     */
    secondaryAxesX: ASPxClientAxis[];
    /**
     * Provides access to a collection of secondary Y-axes for a given 2D XY-diagram.
     */
    secondaryAxesY: ASPxClientAxis[];
    /**
     * Provides access to a default pane object.
     */
    defaultPane: ASPxClientXYDiagramPane;
    /**
     * Provides access to an array of a diagram's panes.
     */
    panes: ASPxClientXYDiagramPane[];
    /**
     * Converts the display coordinates into a diagram coordinates object. An ASPxClientDiagramCoordinates object, containing information about the point's argument and value, their scale types, associated axes and pane.
     * @param x An integer value, representing the X-coordinate of a point (measured in pixels relative to the top left corner of a chart).
     * @param y An integer value, representing the Y-coordinate of a point (measured in pixels relative to the top left corner of a chart).
     */
    PointToDiagram(x: number, y: number): ASPxClientDiagramCoordinates;
    /**
     * Converts the diagram coordinates of a point into screen coordinates. An ASPxClientControlCoordinates object, containing information about the point's X and Y coordinates, its visibility state, and the associated pane.
     * @param argument An object, representing the point's argument.
     * @param value An object, representing the point's value.
     * @param axisX An ASPxClientAxis2D descendant, representing the X-axis.
     * @param axisY An ASPxClientAxis2D descendant, representing the Y-axis.
     * @param pane An ASPxClientXYDiagramPane object, representing the pane.
     */
    DiagramToPoint(argument: any, value: any, axisX: ASPxClientAxis2D, axisY: ASPxClientAxis2D, pane: ASPxClientXYDiagramPane): ASPxClientControlCoordinates;
    /**
     * Shows the Crosshair Cursor at the point with the specified coordinates.
     * @param screenX The horizontal coordinate that is related to the top-left angle of the chart.
     * @param screenY The vertical coordinate that is related to the top-left angle of the chart.
     */
    ShowCrosshair(screenX: number, screenY: number): void;
}
/**
 * Represents the client-side equivalent of the XYDiagram class.
 */
declare class ASPxClientXYDiagram extends ASPxClientXYDiagram2D {
    /**
     * Gets a value indicating whether the diagram is rotated.
     */
    rotated: boolean;
}
/**
 * Represents the client-side equivalent of the SwiftPlotDiagram class.
 */
declare class ASPxClientSwiftPlotDiagram extends ASPxClientXYDiagram2D {
}
/**
 * Represents the client-side equivalent of the XYDiagramPane class.
 */
declare class ASPxClientXYDiagramPane extends ASPxClientWebChartElementNamed {
    /**
     * Gets the diagram that owns the current pane object.
     */
    diagram: ASPxClientXYDiagram;
    /**
     * Returns the pane title's settings.
     */
    title: ASPxClientPaneTitle;
}
/**
 * Represents the client-side equivalent of the XYDiagram3D class.
 */
declare class ASPxClientXYDiagram3D extends ASPxClientXYDiagramBase {
}
/**
 * Represents the client-side equivalent of the RadarDiagram class.
 */
declare class ASPxClientRadarDiagram extends ASPxClientXYDiagramBase {
    /**
     * Converts the display coordinates into a diagram coordinates object. An ASPxClientDiagramCoordinates object, containing information about the point's argument and value, their scale types, associated axes and pane.
     * @param x An integer value, representing the X-coordinate of a point (measured in pixels relative to the top left corner of a chart).
     * @param y An integer value, representing the Y-coordinate of a point (measured in pixels relative to the top left corner of a chart).
     */
    PointToDiagram(x: number, y: number): ASPxClientDiagramCoordinates;
    /**
     * Converts the diagram coordinates of a point into screen coordinates. An ASPxClientControlCoordinates object, containing information about the point's X and Y coordinates, its visibility state, and the associated pane.
     * @param argument An object, representing the point's argument.
     * @param value An object, representing the point's value.
     */
    DiagramToPoint(argument: any, value: any): ASPxClientControlCoordinates;
}
/**
 * Represents the client-side equivalent of the AxisBase class.
 */
declare class ASPxClientAxisBase extends ASPxClientWebChartElementNamed {
    /**
     * Provides access to the XY-diagram which contains the current axis.
     */
    diagram: ASPxClientXYDiagramBase;
    /**
     * Provides acess to the range of the axis coordinates.
     */
    range: ASPxClientAxisRange;
}
/**
 * Represents the client-side equivalent of the Axis2D class.
 */
declare class ASPxClientAxis2D extends ASPxClientAxisBase {
    /**
     * Provides access to an axis title object.
     */
    axisTitle: ASPxClientAxisTitle;
    /**
     * Provides access to the axis strips collection.
     */
    strips: ASPxClientStrip[];
    /**
     * Provides access to the collection of the axis constant lines.
     */
    constantLines: ASPxClientConstantLine[];
}
/**
 * Represents the client-side equivalent of the Axis class.
 */
declare class ASPxClientAxis extends ASPxClientAxis2D {
    /**
     * Gets a value indicating whether the axis is reversed.
     */
    reverse: boolean;
}
/**
 * Represents the client-side equivalent of the SwiftPlotDiagramAxis class.
 */
declare class ASPxClientSwiftPlotDiagramAxis extends ASPxClientAxis2D {
}
/**
 * Represents the client-side equivalent of the Axis3D class.
 */
declare class ASPxClientAxis3D extends ASPxClientAxisBase {
}
/**
 * Represents the client-side equivalent of the RadarAxis class.
 */
declare class ASPxClientRadarAxis extends ASPxClientAxisBase {
}
/**
 * Represents the client-side equivalent of the AxisTitle class.
 */
declare class ASPxClientAxisTitle extends ASPxClientWebChartRequiredElement {
    /**
     * Gets the axis to which the axis title belongs.
     */
    axis: ASPxClientAxisBase;
    /**
     * Gets the text of the axis title.
     */
    text: string;
}
/**
 * Represents the client-side equivalent of the AxisLabelItem class.
 */
declare class ASPxClientAxisLabelItem extends ASPxClientWebChartRequiredElement {
    /**
     * Gets the axis to which an axis label item belongs.
     */
    axis: ASPxClientAxisBase;
    /**
     * Gets the text of an axis label item.
     */
    text: string;
    /**
     * Gets the axis value to which an axis label item corresponds.
     */
    axisValue: any;
    /**
     * Gets the internal representation of the axis value to which an axis label item corresponds.
     */
    axisValueInternal: number;
}
/**
 * Represents the client-side equivalent of the AxisRange class.
 */
declare class ASPxClientAxisRange extends ASPxClientWebChartRequiredElement {
    /**
     * Gets the axis that owns the current axis range object.
     */
    axis: ASPxClientAxisBase;
    /**
     * Gets the minimum value to display on an axis.
     */
    minValue: any;
    /**
     * Gets the maximum value to display on an axis.
     */
    maxValue: any;
    /**
     * Gets the internal float representation of the range minimum value.
     */
    minValueInternal: number;
    /**
     * Gets the internal float representation of the range maximum value.
     */
    maxValueInternal: number;
}
/**
 * Represents the client-side equivalent of the Strip class.
 */
declare class ASPxClientStrip extends ASPxClientWebChartElementNamed {
    /**
     * Gets the axis that owns the current strip object.
     */
    axis: ASPxClientAxis;
    /**
     * Gets the minimum value of the strip's range.
     */
    minValue: any;
    /**
     * Gets the maximum value of the strip's range.
     */
    maxValue: any;
}
/**
 * Represents the client-side equivalent of the ConstantLine class.
 */
declare class ASPxClientConstantLine extends ASPxClientWebChartElementNamed {
    /**
     * Gets the axis that owns the current constant line object.
     */
    axis: ASPxClientAxis;
    /**
     * Gets the constant line's position along the axis.
     */
    value: any;
    /**
     * Gets the constant line title.
     */
    title: string;
}
/**
 * Represents the client-side equivalent of the Series class.
 */
declare class ASPxClientSeries extends ASPxClientWebChartElementNamed {
    /**
     * Gets a value that specifies the view type of the series.
     */
    viewType: string;
    /**
     * Gets a value that specifies the scale type for the argument data of the series' data points.
     */
    argumentScaleType: string;
    /**
     * Gets a value that specifies the scale type for the value data of the series' data points.
     */
    valueScaleType: string;
    /**
     * Gets the X-Axis that is used to plot the current series on the XY-diagram.
     */
    axisX: string;
    /**
     * Gets the Y-Axis that is used to plot the current series on the XY-diagram.
     */
    axisY: string;
    /**
     * Gets the pane that is used to plot the current series on the XY-diagram.
     */
    pane: string;
    /**
     * Gets a value indicating whether the series is visible.
     */
    visible: boolean;
    /**
     * Gets a value that specifies whether or not a tooltip is enabled for a chart.
     */
    toolTipEnabled: boolean;
    /**
     * Gets the text to be displayed within series tooltips.
     */
    toolTipText: string;
    /**
     * Gets an image to be displayed within series tooltips.
     */
    toolTipImage: string;
    /**
     * Gets the settings of series labels.
     */
    label: ASPxClientSeriesLabel;
    /**
     * Gets the series' collection of data points.
     */
    points: ASPxClientSeriesPoint[];
    /**
     * Provides access to the collection of series titles.
     */
    titles: ASPxClientSeriesTitle[];
    /**
     * Gets the series' collection of indicators.
     */
    indicators: ASPxClientIndicator[];
    /** @deprecated This property is now obsolete. Use the indicators property instead. */
    /**
     * Provides access to the collection of regression lines.
     */
    regressionLines: ASPxClientRegressionLine[];
    /** @deprecated This property is now obsolete. Use the indicators property instead. */
    /**
     * Provides access to the collection of trendlines.
     */
    trendLines: ASPxClientTrendLine[];
    /** @deprecated This property is now obsolete. Use the indicators property instead. */
    /**
     * Provides access to the collection of Fibonacci Indicators.
     */
    fibonacciIndicators: ASPxClientFibonacciIndicator[];
    /**
     * Gets the color of a series.
     */
    color: string;
    /**
     * Gets a value that defines a group for stacked series.
     */
    stackedGroup: string;
    /**
     * Gets a string which represents the pattern specifying the text to be displayed within a crosshair label for the current Series  type.
     */
    crosshairLabelPattern: string;
    /**
     * This property is intended for internal use only.
     */
    groupedElementsPattern: string;
    /**
     * Returns a collection of crosshair value items.
     */
    crosshairValueItems: ASPxClientCrosshairValueItem[];
    /**
     * Gets a value indicating whether a crosshair cursor is enabled.
     */
    actualCrosshairEnabled: boolean;
    /**
     * Gets a value indicating whether a crosshair label should be shown for this series.
     */
    actualCrosshairLabelVisibility: boolean;
}
/**
 * Represents the client-side equivalent of the SeriesLabelBase class.
 */
declare class ASPxClientSeriesLabel extends ASPxClientWebChartElement {
    /**
     * Gets the series that owns the current series label object.
     */
    series: ASPxClientSeries;
    /** @deprecated This property is obsolete and isn't used at all. */
    /**
     * Gets the common text for all series point labels.
     */
    text: string;
}
/**
 * Represents the client-side equivalent of the SeriesPoint class.
 */
declare class ASPxClientSeriesPoint extends ASPxClientWebChartRequiredElement {
    /**
     * Gets the series that owns the current series point object.
     */
    series: ASPxClientSeries;
    /**
     * Gets the data point's argument.
     */
    argument: any;
    /**
     * Gets the point's data value(s).
     */
    values: any[];
    /**
     * Gets the text to be displayed within series points tooltips.
     */
    toolTipText: string;
    /**
     * Gets the color of a series point.
     */
    color: string;
    /**
     * Gets the percent value of a series point.
     */
    percentValue: number;
    /**
     * Gets a hint that is shown in series points tooltips.
     */
    toolTipHint: string;
}
/**
 * The IndicatorPoint class's client-side equivalent.
 */
declare class ASPxClientIndicatorPoint extends ASPxClientWebChartRequiredElement {
    /**
     * Returns the series to which the indicator and its point belong.
     */
    series: ASPxClientSeries;
    /**
     * Returns the indicator point's argument.
     */
    argument: any;
    /**
     * Returns the values for the indicator point that the Crosshair Cursor highlights.
     */
    values: any[];
}
/**
 * Represents the client-side equivalent of the Legend class.
 */
declare class ASPxClientLegend extends ASPxClientWebChartEmptyElement {
    /**
     * Returns a value which determines whether to use checkboxes instead of markers on a chart legend for all legend items.
     */
    useCheckBoxes: boolean;
    /**
     * Returns a collection of custom legend items of the legend.
     */
    customItems: ASPxClientCustomLegendItem[];
    /**
     * Returns the name of the legend.
     */
    name: string;
}
/**
 * Represents the base for ASPxClientChartTitle and ASPxClientSeriesTitle classes.
 */
declare class ASPxClientTitleBase extends ASPxClientWebChartRequiredElement {
    /**
     * Gets the lines of text within a title.
     */
    lines: string[];
    /**
     * Gets the alignment of the title.
     */
    alignment: string;
    /**
     * Gets a value that specifies to which edges of a parent element the title should be docked.
     */
    dock: string;
}
/**
 * Represents the client-side equivalent of the ChartTitle class.
 */
declare class ASPxClientChartTitle extends ASPxClientTitleBase {
}
/**
 * Represents the client-side equivalent of the SeriesTitle class.
 */
declare class ASPxClientSeriesTitle extends ASPxClientTitleBase {
    /**
     * Gets the series that owns the current title object.
     */
    series: ASPxClientSeries;
}
/**
 * The pane title.
 */
declare class ASPxClientPaneTitle extends ASPxClientWebChartRequiredElement {
    /**
     * Returns the pane title's text.
     */
    text: string;
    /**
     * Returns the value that defines how to align the pane title.
     */
    alignment: string;
}
/**
 * Represents the client-side equivalent of the Indicator class.
 */
declare class ASPxClientIndicator extends ASPxClientWebChartElementNamed {
    /**
     * Gets the indicator's associated series.
     */
    series: ASPxClientSeries;
}
/**
 * Represents the client-side equivalent of the FinancialIndicator class.
 */
declare class ASPxClientFinancialIndicator extends ASPxClientIndicator {
    /**
     * Gets the first point of the financial indicator.
     */
    point1: ASPxClientFinancialIndicatorPoint;
    /**
     * Gets the second point of the financial indicator.
     */
    point2: ASPxClientFinancialIndicatorPoint;
}
/**
 * Represents the client-side equivalent of the TrendLine class.
 */
declare class ASPxClientTrendLine extends ASPxClientFinancialIndicator {
}
/**
 * Represents the client-side equivalent of the FibonacciIndicator class.
 */
declare class ASPxClientFibonacciIndicator extends ASPxClientFinancialIndicator {
}
/**
 * Represents the client-side equivalent of the FinancialIndicatorPoint class.
 */
declare class ASPxClientFinancialIndicatorPoint extends ASPxClientWebChartRequiredElement {
    /**
     * Gets the financial indicator that owns the current financial indicator point.
     */
    financialIndicator: ASPxClientFinancialIndicator;
    /**
     * Gets the argument of the financial indicator's point.
     */
    argument: any;
    /**
     * Gets a value, indicating how the value of a financial indicator's point is obtained.
     */
    valueLevel: string;
}
/**
 * The client-side equivalent of the SingleLevelIndicator class.
 */
declare class ASPxClientSingleLevelIndicator extends ASPxClientIndicator {
    /**
     * Gets a value specifying the value level to which the single-level indicator corresponds.
     */
    valueLevel: string;
}
/**
 * Represents the client-side equivalent of the RegressionLine class.
 */
declare class ASPxClientRegressionLine extends ASPxClientSingleLevelIndicator {
}
/**
 * The client-side equivalent of the MovingAverage class.
 */
declare class ASPxClientMovingAverage extends ASPxClientSingleLevelIndicator {
    /**
     * Gets the number of data points used to calculate the moving average.
     */
    pointsCount: number;
    /**
     * Gets a value specifying whether to display a Moving Average, Envelope, or both.
     */
    kind: string;
    /**
     * Gets a value specifying the Envelope percent.
     */
    envelopePercent: number;
}
/**
 * The client-side equivalent of the SimpleMovingAverage class.
 */
declare class ASPxClientSimpleMovingAverage extends ASPxClientMovingAverage {
}
/**
 * The client-side equivalent of the ExponentialMovingAverage class.
 */
declare class ASPxClientExponentialMovingAverage extends ASPxClientMovingAverage {
}
/**
 * The client-side equivalent of the WeightedMovingAverage class.
 */
declare class ASPxClientWeightedMovingAverage extends ASPxClientMovingAverage {
}
/**
 * The client-side equivalent of the TriangularMovingAverage class.
 */
declare class ASPxClientTriangularMovingAverage extends ASPxClientMovingAverage {
}
/**
 * Represents the client-side equivalent of the TripleExponentialMovingAverageTema class.
 */
declare class ASPxClientTripleExponentialMovingAverageTema extends ASPxClientMovingAverage {
}
/**
 * Represents the client-side equivalent of the BollingerBands class.
 */
declare class ASPxClientBollingerBands extends ASPxClientIndicator {
    /**
     * Gets the number of data points used to calculate the indicator values.
     */
    pointsCount: number;
    /**
     * Gets a value, indicating whose series point values are used to calculate the indicator's values.
     */
    valueLevel: string;
}
/**
 * Represents the client-side equivalent of the MedianPrice class.
 */
declare class ASPxClientMedianPrice extends ASPxClientIndicator {
}
/**
 * Represents the client-side equivalent of the TypicalPrice class.
 */
declare class ASPxClientTypicalPrice extends ASPxClientIndicator {
}
/**
 * Represents the client-side equivalent of the WeightedClose class.
 */
declare class ASPxClientWeightedClose extends ASPxClientIndicator {
}
/**
 * Represents the client-side equivalent of the SeparatePaneIndicator class.
 */
declare class ASPxSeparatePaneIndicator extends ASPxClientIndicator {
    /**
     * Returns the name of the Y-axis that is used to plot the current indicator on a ASPxClientXYDiagram.
     */
    axisY: string;
    /**
     * Returns the name of a pane, used to plot the separate pane indicator on an XYDiagram.
     */
    pane: string;
}
/**
 * Represents the client-side equivalent of the AverageTrueRange class.
 */
declare class ASPxClientAverageTrueRange extends ASPxSeparatePaneIndicator {
    /**
     * Gets the number of data points used to calculate the indicator values.
     */
    pointsCount: number;
}
/**
 * Represents the client-side equivalent of the ChaikinsVolatility class.
 */
declare class ASPxClientChaikinsVolatility extends ASPxSeparatePaneIndicator {
    /**
     * Gets the number of data points used to calculate the indicator values.
     */
    pointsCount: number;
}
/**
 * Represents the client-side equivalent of the CommodityChannelIndex class.
 */
declare class ASPxClientCommodityChannelIndex extends ASPxSeparatePaneIndicator {
    /**
     * Gets the number of data points used to calculate the indicator values.
     */
    pointsCount: number;
}
/**
 * Represents the client-side equivalent of the DetrendedPriceOscillator class.
 */
declare class ASPxClientDetrendedPriceOscillator extends ASPxSeparatePaneIndicator {
    /**
     * Gets the number of data points used to calculate the indicator values.
     */
    pointsCount: number;
    /**
     * Gets a value, indicating whose series point values are used to calculate the indicator's values.
     */
    valueLevel: string;
}
/**
 * Represents the client-side equivalent of the MassIndex class.
 */
declare class ASPxClientMassIndex extends ASPxSeparatePaneIndicator {
    /**
     * Returns the count of points used to calculate the exponential moving average (EMA).
     */
    movingAveragePointsCount: number;
    /**
     * Returns the count of summable values.
     */
    sumPointsCount: number;
}
/**
 * Represents the client-side equivalent of the MovingAverageConvergenceDivergence class.
 */
declare class ASPxClientMovingAverageConvergenceDivergence extends ASPxSeparatePaneIndicator {
    /**
     * Returns the short period value required to calculate the indicator.
     */
    shortPeriod: number;
    /**
     * Returns the long period value required to calculate the indicator.
     */
    longPeriod: number;
    /**
     * Returns the smoothing period value required to calculate the indicator.
     */
    signalSmoothingPeriod: number;
}
/**
 * Represents the client-side equivalent of the RateOfChange class.
 */
declare class ASPxClientRateOfChange extends ASPxSeparatePaneIndicator {
    /**
     * Gets the number of data points used to calculate the indicator values.
     */
    pointsCount: number;
    /**
     * Gets a value, indicating whose series point values are used to calculate the indicator's values.
     */
    valueLevel: string;
}
/**
 * Represents the client-side equivalent of the RelativeStrengthIndex class.
 */
declare class ASPxClientRelativeStrengthIndex extends ASPxSeparatePaneIndicator {
    /**
     * Gets the number of data points used to calculate the indicator values.
     */
    pointsCount: number;
    /**
     * Gets a value, indicating whose series point values are used to calculate the indicator's values.
     */
    valueLevel: string;
}
/**
 * Represents the client-side equivalent of the StandardDeviation class.
 */
declare class ASPxClientStandardDeviation extends ASPxSeparatePaneIndicator {
    /**
     * Gets the number of data points used to calculate the indicator values.
     */
    pointsCount: number;
    /**
     * Gets a value, indicating whose series point values are used to calculate the indicator's values.
     */
    valueLevel: string;
}
/**
 * Represents the client-side equivalent of the TripleExponentialMovingAverageTrix class.
 */
declare class ASPxClientTripleExponentialMovingAverageTrix extends ASPxSeparatePaneIndicator {
    /**
     * Gets the number of data points used to calculate the indicator values.
     */
    pointsCount: number;
    /**
     * Gets a value, indicating whose series point values are used to calculate the indicator's values.
     */
    valueLevel: string;
}
/**
 * Represents the client-side equivalent of the WilliamsR class.
 */
declare class ASPxClientWilliamsR extends ASPxSeparatePaneIndicator {
    /**
     * Gets the number of data points used to calculate the indicator values.
     */
    pointsCount: number;
}
/**
 * Represents the client-side equivalent of the FixedValueErrorBars class.
 */
declare class ASPxClientFixedValueErrorBars extends ASPxClientIndicator {
    /**
     * Gets or sets the fixed positive error value.
     */
    positiveError: number;
    /**
     * Returns the fixed negative error value.
     */
    negativeError: number;
}
/**
 * Represents the client-side equivalent of the PercentageErrorBars class.
 */
declare class ASPxClientPercentageErrorBars extends ASPxClientIndicator {
    /**
     * Returns the value specifying the percentage of error values of series point values.
     */
    percent: number;
}
/**
 * Represents the client-side equivalent of the StandardDeviationErrorBars class.
 */
declare class ASPxClientStandardDeviationErrorBars extends ASPxClientIndicator {
    /**
     * Returns the multiplier on which the standard deviation value is multiplied before display.
     */
    multiplier: number;
}
/**
 * Represents the client-side equivalent of the StandardErrorBars class.
 */
declare class ASPxClientStandardErrorBars extends ASPxClientIndicator {
}
/**
 * Represents the client-side equivalent of the DataSourceBasedErrorBars class.
 */
declare class ASPxClientDataSourceBasedErrorBars extends ASPxClientIndicator {
}
/**
 * Represents the client-side equivalent of the Annotation class.
 */
declare class ASPxClientAnnotation extends ASPxClientWebChartElementNamed {
}
/**
 * Represents the client-side equivalent of the TextAnnotation class.
 */
declare class ASPxClientTextAnnotation extends ASPxClientAnnotation {
    /**
     * Gets the lines of text within an annotation.
     */
    lines: string[];
}
/**
 * Represents the client-side equivalent of the ImageAnnotation class.
 */
declare class ASPxClientImageAnnotation extends ASPxClientAnnotation {
}
/**
 * The client-side equivalent of the CrosshairValueItem class.
 */
declare class ASPxClientCrosshairValueItem {
    /**
     * Gets the value that is displayed in a crosshair label.
     */
    value: number;
    /**
     * Gets an index of a point for which this crosshair value item is displayed.
     */
    pointIndex: number;
}
/**
 * The client-side equivalent of the ChartToolTipController class.
 */
declare class ASPxClientToolTipController extends ASPxClientWebChartEmptyElement {
    /**
     * Gets a value indicating whether an image should be shown in tooltips.
     */
    showImage: boolean;
    /**
     * Gets a value indicating whether it is necessary to show text in tooltips.
     */
    showText: boolean;
    /**
     * Gets a value that defines the position of an image within a tooltip.
     */
    imagePosition: string;
    /**
     * Gets a value that defines when tooltips should be invoked.
     */
    openMode: string;
}
/**
 * The client-side equivalent of the ToolTipPosition class.
 */
declare class ASPxClientToolTipPosition {
}
/**
 * The client-side equivalent of the ToolTipMousePosition class.
 */
declare class ASPxClientToolTipMousePosition extends ASPxClientToolTipPosition {
}
/**
 * The client-side equivalent of the ToolTipRelativePosition class.
 */
declare class ASPxClientToolTipRelativePosition extends ASPxClientToolTipPosition {
    /**
     * Gets the horizontal offset of a tooltip.
     */
    offsetX: number;
    /**
     * Gets the vertical offset of a tooltip.
     */
    offsetY: number;
}
/**
 * The client-side equivalent of the ToolTipFreePosition class.
 */
declare class ASPxClientToolTipFreePosition extends ASPxClientToolTipPosition {
    /**
     * Gets the horizontal offset of a tooltip.
     */
    offsetX: number;
    /**
     * Gets the vertical offset of a tooltip.
     */
    offsetY: number;
    /**
     * Gets the ID of a pane.
     */
    paneID: number;
    /**
     * Gets an object containing settings that define how a tooltip should be docked.
     */
    dockPosition: string;
}
/**
 * The client-side equivalent of the CrosshairLabelPosition class.
 */
declare class ASPxClientCrosshairPosition {
    /**
     * Gets the horizontal offset of a crosshair cursor.
     */
    offsetX: number;
    /**
     * Gets the vertical offset of a crosshair cursor.
     */
    offsetY: number;
}
/**
 * The client-side equivalent of the CrosshairMousePosition class.
 */
declare class ASPxClientCrosshairMousePosition extends ASPxClientCrosshairPosition {
}
/**
 * The client-side equivalent of the CrosshairFreePosition class.
 */
declare class ASPxClientCrosshairFreePosition extends ASPxClientCrosshairPosition {
    /**
     * Gets a Pane's ID when the crosshair cursor is in the free position mode.
     */
    paneID: number;
    /**
     * Gets a string containing information on a crosshair label's dock position when the crosshair cursor is in the free position mode.
     */
    dockPosition: string;
}
/**
 * Defines line style settings.
 */
declare class ASPxClientLineStyle extends ASPxClientWebChartElement {
    /**
     * Gets the dash style used to paint the line.
     */
    dashStyle: string;
    /**
     * Gets the thickness that corresponds to the value of the current ASPxClientLineStyle object.
     */
    thickness: number;
    /**
     * Returns the join style for the ends of consecutive lines.
     */
    lineJoin: string;
}
/**
 * The client-side equivalent of the CrosshairOptions class.
 */
declare class ASPxClientCrosshairOptions extends ASPxClientWebChartEmptyElement {
    /**
     * Gets a value indicating whether it is necessary to show a crosshair label for the X-axis.
     */
    showAxisXLabels: boolean;
    /**
     * Gets a value indicating whether it is necessary to show a crosshair label for the Y-axis.
     */
    showAxisYLabels: boolean;
    /**
     * Gets a value that defines whether a crosshair label of a series point indicated by a crosshair cursor is shown on a diagram.
     */
    showCrosshairLabels: boolean;
    /**
     * Gets a value that indicates whether a crosshair cursor argument line is shown for a series point on a diagram.
     */
    showArgumentLine: boolean;
    /**
     * Specifies whether to show a value line of a series point indicated by a crosshair cursor on a diagram.
     */
    showValueLine: boolean;
    /**
     * Gets a value that specifies whether to show a crosshair cursor in a focused pane only.
     */
    showOnlyInFocusedPane: boolean;
    /**
     * Specifies the current snap mode of a crosshair cursor.
     */
    snapMode: string;
    /**
     * Specifies the way in which the crosshair label is shown for a series on a diagram.
     */
    crosshairLabelMode: string;
    /**
     * Gets a value that indicates whether to show a header for each series group in crosshair cursor labels.
     */
    showGroupHeaders: boolean;
    /**
     * Gets a string which represents the  pattern specifying the group header text to be displayed within the crosshair label.
     */
    groupHeaderPattern: string;
    /**
     * Gets a value that specifies whether the Crosshair cursor should show points that are out of visual range.
     */
    showOutOfRangePoints: boolean;
    /**
     * Gets the identifier specifying the behavior of the selection of points shown in the crosshair label.
     */
    valueSelectionMode: string;
    /**
     * Gets the color of a crosshair argument line.
     */
    argumentLineColor: string;
    /**
     * Gets the color of a crosshair value line.
     */
    valueLineColor: string;
    /**
     * Gets the value specifying how the Crosshair Cursor's lines snap to points when hovering on them.
     */
    linesMode: string;
}
/**
 * The chart print options storage.
 */
declare class ASPxClientChartPrintOptions {
    /**
     * Gets the size mode used to print a chart.
     */
    GetSizeMode(): string;
    /**
     * Sets the size mode used to print a chart.
     * @param sizeMode A System.String object, specifying the name of the size mode.
     */
    SetSizeMode(sizeMode: string): void;
    /**
     * Gets a value indicating that the landscape orientation will be used to print a chart.
     */
    GetLandscape(): boolean;
    /**
     * Sets a value indicating that the landscape orientation will be used to print a chart.
     * @param landscape A Boolean value, specifying that the landscape orientation will be used to print a chart.
     */
    SetLandscape(landscape: boolean): void;
    /**
     * Gets the left margin which will be used to print a chart.
     */
    GetMarginLeft(): number;
    /**
     * Sets the left margin which will be used to print a chart.
     * @param marginLeft A System.Int32 value, specifying the margin in hundredths of an inch.
     */
    SetMarginLeft(marginLeft: number): void;
    /**
     * Gets the top margin which will be used to print a chart.
     */
    GetMarginTop(): number;
    /**
     * Sets the top margin which will be used to print a chart.
     * @param marginTop A System.Int32 value, specifying the margin in hundredths of an inch.
     */
    SetMarginTop(marginTop: number): void;
    /**
     * Gets the right margin which will be used to print a chart.
     */
    GetMarginRight(): number;
    /**
     * Sets the right margin which will be used to print a chart.
     * @param marginRight A System.Int32 value, specifying the margin in hundredths of an inch.
     */
    SetMarginRight(marginRight: number): void;
    /**
     * Gets the bottom margin which will be used to print a chart.
     */
    GetMarginBottom(): number;
    /**
     * Sets the bottom margin which will be used to print a chart.
     * @param marginBottom A System.Int32 value, specifying the margin in hundredths of an inch.
     */
    SetMarginBottom(marginBottom: number): void;
    /**
     * Gets the predefined size ratio of the paper which will be used to print a chart.
     */
    GetPaperKind(): string;
    /**
     * Sets the predefined size ratio of the paper which will be used to print a chart.
     * @param paperKind A System.String object, specifying the name of a size ratio.
     */
    SetPaperKind(paperKind: string): void;
    /**
     * Gets the custom paper width which will be used to print a chart.
     */
    GetCustomPaperWidth(): number;
    /**
     * Sets the custom paper width which will be used to print a chart.
     * @param customPaperWidth A System.Int32 object, specifying the width in hundredths of an inch.
     */
    SetCustomPaperWidth(customPaperWidth: number): void;
    /**
     * Gets the custom paper height which will be used to print a chart.
     */
    GetCustomPaperHeight(): number;
    /**
     * Sets the custom paper height which will be used to print a chart.
     * @param customPaperHeight A System.Int32 object, specifying the height in hundredths of an inch.
     */
    SetCustomPaperHeight(customPaperHeight: number): void;
    /**
     * Gets the name of the custom paper width-height ratio used to print the chart.
     */
    GetCustomPaperName(): string;
    /**
     * Sets the name of the custom paper width-height ratio used to print a chart.
     * @param customPaperName A String object, specifying the name of the custom paper width-height ratio.
     */
    SetCustomPaperName(customPaperName: string): void;
    /**
     * Returns the value that defines whether to display the crosshair on the printed or exported chart.
     */
    GetPrintCrosshair(): boolean;
    /**
     * Specifies the value that defines whether to display the crosshair on the printed or exported chart.
     * @param printCrosshair true, if the crosshair should be printed or exported; otherwise, false.
     */
    SetPrintCrosshair(printCrosshair: boolean): void;
}
/**
 * Represents the client-side equivalent of the CustomLegendItem class.
 */
declare class ASPxClientCustomLegendItem extends ASPxClientWebChartElementNamed {
    /**
     * Returns the text displayed by the custom legend item.
     */
    text: string;
}
/**
 * Represents the client-side equivalent of the ASPxSpellChecker class.
 */
declare class ASPxClientSpellChecker extends ASPxClientControl {
    /**
     * Client-side event that occurs before the spell check starts.
     */
    BeforeCheck: ASPxClientEvent<ASPxClientBeforeCheckEventHandler<ASPxClientSpellChecker>>;
    /**
     * Client-side event that occurs before a message box informing about process completion is shown.
     */
    CheckCompleteFormShowing: ASPxClientEvent<ASPxClientCancelEventHandler<ASPxClientSpellChecker>>;
    /**
     * Client-side event that occurs when a spell check is finished.
     */
    AfterCheck: ASPxClientEvent<ASPxClientAfterCheckEventHandler<ASPxClientSpellChecker>>;
    /**
     * Occurs after a word is changed in a checked text.
     */
    WordChanged: ASPxClientEvent<ASPxClientWordChangedEventHandler<ASPxClientSpellChecker>>;
    /**
     * Starts the spelling check of the text contained within the element specified by the ASPxSpellChecker.CheckedElementID value.
     */
    Check(): void;
    /**
     * Starts checking contents of the specified element.
     * @param element An object representing the element being checked.
     */
    CheckElement(element: any): void;
    /**
     * Starts checking contents of the specified element.
     * @param id A string representing the identifier of the element being checked.
     */
    CheckElementById(id: string): void;
    /**
     * Starts checking the contents of controls in the specified container.
     * @param containerElement An object representing a control which contains elements being checked.
     */
    CheckElementsInContainer(containerElement: any): void;
    /**
     * Starts checking the contents of controls in the specified container.
     * @param containerId A string, specifying the control's identifier.
     */
    CheckElementsInContainerById(containerId: string): void;
    /**
     * Converts the specified object to the ASPxClientSpellChecker type. The converted client object specified by the obj parameter.
     * @param obj The client object to be type cast.
     */
    static Cast(obj: any): ASPxClientSpellChecker;
}
/**
 * A method that will handle the ASPxClientSpellChecker.BeforeCheck event.
 * @param source The ASPxClientSpellChecker control which fires the event.
 * @param e A ASPxClientSpellCheckerBeforeCheckEventArgs object that contains event data
 */
interface ASPxClientBeforeCheckEventHandler<Sender> { (source: Sender, e: ASPxClientSpellCheckerBeforeCheckEventArgs): void; }
/**
 * Provides data for an event that occurs before a spelling check is started. Represents the client-side equivalent of the BeforeCheckEventArgs class.
 */
declare class ASPxClientSpellCheckerBeforeCheckEventArgs extends ASPxClientCancelEventArgs {
    /**
     * Initializes a new instance of the ASPxClientSpellCheckerBeforeCheckEventArgs class with specified settings.
     * @param controlId A string, containing the control's programmatic identifier.
     */
    constructor(controlId: string);
    /**
     * Gets the programmatic identifier assigned to the control which is going to be checked.
     */
    controlId: string;
}
/**
 * A method that will handle the ASPxClientSpellChecker.AfterCheck event.
 * @param source The ASPxClientSpellChecker control which fires the event.
 * @param e A ASPxClientSpellCheckerAfterCheckEventArgs object that contains event data
 */
interface ASPxClientAfterCheckEventHandler<Sender> { (source: Sender, e: ASPxClientSpellCheckerAfterCheckEventArgs): void; }
/**
 * Provides data for the client event that occurs after a spelling check is complete.
 */
declare class ASPxClientSpellCheckerAfterCheckEventArgs extends ASPxClientEventArgs {
    constructor(controlId: string, checkedText: string, reason?: string);
    /**
     * Gets the programmatic identifier assigned to the control which has been checked.
     */
    controlId: string;
    /**
     * Gets the text that has been checked.
     */
    checkedText: string;
    /**
     * Gets a value specifying whether spell checking is finished or stopped by the user.
     */
    reason: string;
}
/**
 * Lists the values specifying the reasons why the spell check was stopped.
 */
declare class ASPxClientSpellCheckerStopCheckingReason {
    /**
     * Spell checking is finished normally.
     */
    static readonly Default: string;
    /**
     * The user stopped spell checking.
     */
    static readonly User: string;
}
/**
 * A method that will handle the ASPxClientSpellChecker.AfterCheck event.
 * @param source The event source.
 * @param e An ASPxClientSpellCheckerAfterCheckEventArgs object which contains event data.
 */
interface ASPxClientWordChangedEventHandler<Sender> { (source: Sender, e: ASPxClientSpellCheckerAfterCheckEventArgs): void; }
/**
 * A client-side equivalent of the DevExpress.Web.ASPxGantt control.
 */
declare class ASPxClientGantt extends ASPxClientControl {
    /**
     * Specifies the view type.
     * @param viewType The control's view type.
     */
    SetViewType(viewType: ASPxClientGanttViewType): void;
    /**
     * Sets the task's title position.
     * @param position The task position.
     */
    SetTaskTitlePosition(position: ASPxClientGanttTaskTitlePosition): void;
    /**
     * Specifies whether the resources are visible in the Gantt.
     * @param value true, to show resources in the Gantt; otherwise, false.
     */
    ShowResources(value: boolean): void;
}
/**
 * Declare client constants that specify the Gantt's view type.
 */
declare class ASPxClientGanttViewType {
    /**
     * Displays hours.
     */
    Hours: number;
    /**
     * Displays days.
     */
    Days: number;
    /**
     * Displays weeks.
     */
    Weeks: number;
    /**
     * Display months.
     */
    Months: number;
}
/**
 * Declares client constants that specify the task title position.
 */
declare class ASPxClientGanttTaskTitlePosition {
    /**
     * Displays the title inside the task.
     */
    Inside: number;
    /**
     * Displays the title outside the task.
     */
    Outside: number;
    /**
     * The title is hidden.
     */
    None: number;
}
/**
 * Lists constants used to identify various types of data axes.
 */
declare class DashboardDataAxisNames {
    /**
     * Identifies a single axis in the data-bound dashboard items.
     */
    static readonly DefaultAxis: string;
    /**
     * Identifies a series axis in a chart and pie.
     */
    static readonly ChartSeriesAxis: string;
    /**
     * Identifies an argument axis in a chart, scatter chart and pie.
     */
    static readonly ChartArgumentAxis: string;
    /**
     * Identifies a sparkline axis in a grid and cards.
     */
    static readonly SparklineAxis: string;
    /**
     * Identifies a pivot column axis.
     */
    static readonly PivotColumnAxis: string;
    /**
     * Identifies a pivot row axis.
     */
    static readonly PivotRowAxis: string;
}
/**
 * Provides access to dashboard special values.
 */
declare class DashboardSpecialValues {
    /**
     * Represents a null value.
     */
    static readonly NullValue: string;
    /**
     * Represents a null value in OLAP mode.
     */
    static readonly OlapNullValue: string;
    /**
     * Represents an Others value.
     */
    static readonly OthersValue: string;
    /**
     * Represents an error value (for instance, this can be a calculated field value that cannot be evaluated).
     */
    static readonly ErrorValue: string;
    /**
     * Returns whether the specified value is an DashboardSpecialValues.NullValue. true, if the specified value is an DashboardSpecialValues.NullValue; otherwise, false.
     * @param value The specified value.
     */
    static IsNullValue(value: any): boolean;
    /**
     * Returns whether the specified value is an DashboardSpecialValues.OlapNullValue. true, if the specified value is an DashboardSpecialValues.OlapNullValue; otherwise, false.
     * @param value The specified value.
     */
    static IsOlapNullValue(value: any): boolean;
    /**
     * Returns whether the specified value is an DashboardSpecialValues.OthersValue. true, if the specified value is an DashboardSpecialValues.OthersValue; otherwise, false.
     * @param value The specified value.
     */
    static IsOthersValue(value: any): boolean;
    /**
     * Returns whether the specified value is an DashboardSpecialValues.ErrorValue. true, if the specified value is an DashboardSpecialValues.ErrorValue; otherwise, false.
     * @param value The specified value.
     */
    static IsErrorValue(value: any): boolean;
}
/**
 * Represents a list of records from the dashboard data source.
 */
declare class ASPxClientDashboardItemUnderlyingData {
    /**
     * Gets the number of rows in the underlying data set.
     */
    GetRowCount(): number;
    /**
     * Returns the value of the specified cell within the underlying data set. An object that represents the value of the specified cell.
     * @param rowIndex An integer value that specifies the zero-based index of the required row.
     * @param dataMember A String that specifies the required data member.
     */
    GetRowValue(rowIndex: number, dataMember: string): any;
    /**
     * Returns an array of data members available in a data source.
     */
    GetDataMembers(): string[];
    /**
     * Returns whether a request for underlying data was successful.
     */
    IsDataReceived(): boolean;
    /**
     * Returns a callstack containing the error caused by an unsuccessful request for underlying data.
     */
    GetRequestDataError(): string;
}
/**
 * Contains parameters used to obtain the underlying data for the dashboard item.
 */
declare class ASPxClientDashboardItemRequestUnderlyingDataParameters {
    /**
     * Gets or sets an array of data member identifiers used to obtain underlying data.
     */
    DataMembers: string[];
    /**
     * Gets or sets axis points used to obtain the underlying data.
     */
    AxisPoints: ASPxClientDashboardItemDataAxisPoint[];
    /**
     * Gets or sets the dimension value used to obtain the underlying data.
     */
    ValuesByAxisName: any;
    /**
     * Gets or sets the unique dimension value used to obtain the underlying data.
     */
    UniqueValuesByAxisName: any;
}
/**
 * References a method executed after an asynchronous request is complete.
 * @param data An object that contains a list of records from the dashboard data source.
 */
interface ASPxClientDashboardItemRequestUnderlyingDataCompleted { (data: ASPxClientDashboardItemUnderlyingData): void; }
/**
 * References a method that handles the ASPxClientDashboard.ItemClick event.
 * @param source The event source.
 * @param e A ASPxClientDashboardItemClickEventArgs object that contains event data.
 */
interface ASPxClientDashboardItemClickEventHandler<Sender> { (source: Sender, e: ASPxClientDashboardItemClickEventArgs): void; }
/**
 * Provides data for the ASPxClientDashboard.ItemClick event.
 */
declare class ASPxClientDashboardItemClickEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the name of the dashboard item for which the event has been raised.
     */
    ItemName: string;
    /**
     * Gets the dashboard item's client data.
     */
    GetData(): ASPxClientDashboardItemData;
    /**
     * Returns the axis point corresponding to the clicked visual element. An ASPxClientDashboardItemDataAxisPoint object that is the axis point.
     * @param axisName A string value returned by the DashboardDataAxisNames class that specifies the name of the data axis.
     */
    GetAxisPoint(axisName: string): ASPxClientDashboardItemDataAxisPoint;
    /**
     * Gets measures corresponding to the clicked visual element.
     */
    GetMeasures(): ASPxClientDashboardItemDataMeasure[];
    /**
     * Gets deltas corresponding to the clicked visual element.
     */
    GetDeltas(): ASPxClientDashboardItemDataDelta[];
    /**
     * Gets the dimensions used to create a hierarchy of axis points for the specified axis. An array of ASPxClientDashboardItemDataDimension objects that contain the dimension metadata.
     * @param axisName A string value returned by the DashboardDataAxisNames class that specifies the name of the data axis.
     */
    GetDimensions(axisName: string): ASPxClientDashboardItemDataDimension[];
    /**
     * Requests underlying data corresponding to the clicked visual element.
     * @param onCompleted A ASPxClientDashboardItemRequestUnderlyingDataCompleted object that references a method executed after the request is completed.
     * @param dataMembers (Optional) An array of string values that specify data members used to obtain underlying data. If this parameter is not specified, underlying data for all available data members will be requested.
     */
    RequestUnderlyingData(onCompleted: ASPxClientDashboardItemRequestUnderlyingDataCompleted, dataMembers: string[]): void;
}
/**
 * References a method that handles the ASPxClientDashboard.ItemVisualInteractivity event.
 * @param source The event source.
 * @param e A ASPxClientDashboardItemVisualInteractivityEventArgs object containing event data.
 */
interface ASPxClientDashboardItemVisualInteractivityEventHandler<Sender> { (source: Sender, e: ASPxClientDashboardItemVisualInteractivityEventArgs): void; }
/**
 * Provides data for the ASPxClientDashboard.ItemVisualInteractivity event.
 */
declare class ASPxClientDashboardItemVisualInteractivityEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the component name of the dashboard item for which the event was raised.
     */
    ItemName: string;
    /**
     * Gets the selection mode for dashboard item elements.
     */
    GetSelectionMode(): string;
    /**
     * Sets the selection mode for dashboard item elements.
     * @param selectionMode A DashboardSelectionMode value that specifies the selection mode.
     */
    SetSelectionMode(selectionMode: string): void;
    /**
     * Returns whether highlighting is enabled for the current dashboard item.
     */
    IsHighlightingEnabled(): boolean;
    /**
     * Enables highlighting for the current dashboard item.
     * @param enableHighlighting true, to enable highlighting; otherwise, false.
     */
    EnableHighlighting(enableHighlighting: boolean): void;
    /**
     * Gets data axes used to perform custom interactivity actions.
     */
    GetTargetAxes(): string[];
    /**
     * Sets data axes used to perform custom interactivity actions.
     * @param targetAxes An array of String objects that specify names of data axes.
     */
    SetTargetAxes(targetAxes: string[]): void;
    /**
     * Gets the default selection for the current dashboard item.
     */
    GetDefaultSelection(): ASPxClientDashboardItemDataAxisPointTuple[];
    /**
     * Sets the default selection for the current dashboard item.
     * @param values An array of ASPxClientDashboardItemDataAxisPointTuple objects specifying axis point tuples used to select default elements.
     */
    SetDefaultSelection(values: ASPxClientDashboardItemDataAxisPointTuple[]): void;
}
/**
 * References a method that handles the ASPxClientDashboard.ItemSelectionChanged event.
 * @param source The event source.
 * @param e A ASPxClientDashboardItemSelectionChangedEventArgs object containing event data.
 */
interface ASPxClientDashboardItemSelectionChangedEventHandler<Sender> { (source: Sender, e: ASPxClientDashboardItemSelectionChangedEventArgs): void; }
/**
 * Provides data for the ASPxClientDashboard.ItemSelectionChanged event.
 */
declare class ASPxClientDashboardItemSelectionChangedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the component name of the dashboard item for which the event was raised.
     */
    ItemName: string;
    /**
     * Gets currently selected elements.
     */
    GetCurrentSelection(): ASPxClientDashboardItemDataAxisPointTuple[];
}
/**
 * References a method that handles the ASPxClientDashboard.ItemElementCustomColor event.
 * @param source The event source.
 * @param e An ASPxClientDashboardItemElementCustomColorEventArgs object that contains event data.
 */
interface ASPxClientDashboardItemElementCustomColorEventHandler<Sender> { (source: Sender, e: ASPxClientDashboardItemElementCustomColorEventArgs): void; }
/**
 * Provides data for the ASPxClientDashboard.ItemElementCustomColor event.
 */
declare class ASPxClientDashboardItemElementCustomColorEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the component name of the dashboard item for which the event was raised.
     */
    ItemName: string;
    /**
     * Gets the axis point tuple that corresponds to the current dashboard item element.
     */
    GetTargetElement(): ASPxClientDashboardItemDataAxisPointTuple;
    /**
     * Gets the color of the current dashboard item element.
     */
    GetColor(): string;
    /**
     * Sets the color of the current dashboard item element.
     * @param color A String that specifies the color of the current dashboard item element.
     */
    SetColor(color: string): void;
    /**
     * Gets measures corresponding to the current dashboard item element.
     */
    GetMeasures(): ASPxClientDashboardItemDataMeasure[];
}
/**
 * References a method that handles the ASPxClientDashboard.ItemWidgetCreated event.
 * @param source The event source.
 * @param e A ASPxClientDashboardItemWidgetEventArgs object that contains event data.
 */
interface ASPxClientDashboardItemWidgetCreatedEventHandler<Sender> { (source: Sender, e: ASPxClientDashboardItemWidgetEventArgs): void; }
/**
 * References a method that handles the ASPxClientDashboard.ItemWidgetUpdating event.
 * @param source The event source.
 * @param e A ASPxClientDashboardItemWidgetEventArgs object that contains event data.
 */
interface ASPxClientDashboardItemWidgetUpdatingEventHandler<Sender> { (source: Sender, e: ASPxClientDashboardItemWidgetEventArgs): void; }
/**
 * References a method that handles the ASPxClientDashboard.ItemWidgetUpdated event.
 * @param source The event source.
 * @param e A ASPxClientDashboardItemWidgetEventArgs object that contains event data.
 */
interface ASPxClientDashboardItemWidgetUpdatedEventHandler<Sender> { (source: Sender, e: ASPxClientDashboardItemWidgetEventArgs): void; }
/**
 * References a method that handles the ASPxClientDashboard.ItemBeforeWidgetDisposed event.
 * @param source The event source.
 * @param e A ASPxClientDashboardItemWidgetEventArgs object that contains event data.
 */
interface ASPxClientDashboardItemBeforeWidgetDisposedEventHandler<Sender> { (source: Sender, e: ASPxClientDashboardItemWidgetEventArgs): void; }
/**
 * Provides data for events related to client widgets used to visualize data in dashboard items.
 */
declare class ASPxClientDashboardItemWidgetEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the component name of the dashboard item for which the event was raised.
     */
    ItemName: string;
    /**
     * Returns an underlying widget corresponding to the current dashboard item.
     */
    GetWidget(): any;
}
/**
 * Represents multidimensional data visualized in the dashboard item.
 */
declare class ASPxClientDashboardItemData {
    /**
     * Gets the names of the axes that constitute the current ASPxClientDashboardItemData.
     */
    GetAxisNames(): string[];
    /**
     * Returns the specified data axis. A ASPxClientDashboardItemDataAxis object that contains data points corresponding to the specified value hierarchy.
     * @param axisName A string value returned by the DashboardDataAxisNames class that specifies the name of the data axis.
     */
    GetAxis(axisName: string): ASPxClientDashboardItemDataAxis;
    /**
     * Gets the dimensions used to create a hierarchy of axis points for the specified axis. An array of ASPxClientDashboardItemDataDimension objects containing the dimension metadata.
     * @param axisName A string value returned by the DashboardDataAxisNames class that specifies the name of the data axis.
     */
    GetDimensions(axisName: string): ASPxClientDashboardItemDataDimension[];
    /**
     * Gets the measures for the current ASPxClientDashboardItemData object.
     */
    GetMeasures(): ASPxClientDashboardItemDataMeasure[];
    /**
     * Gets the deltas for the current ASPxClientDashboardItemData object.
     */
    GetDeltas(): ASPxClientDashboardItemDataDelta[];
    /**
     * Gets the slice of the current ASPxClientDashboardItemData object by the specified axis point tuple. An ASPxClientDashboardItemData object that is the slice of the current client data object by the specified axis point tuple.
     * @param tuple A ASPxClientDashboardItemDataAxisPointTuple object that is a tuple of axis points.
     */
    GetSlice(tuple: ASPxClientDashboardItemDataAxisPointTuple | ASPxClientDashboardItemDataAxisPoint): ASPxClientDashboardItemData;
    /**
     * Returns a total summary value for the specified measure. A ASPxClientDashboardItemDataMeasureValue object providing the measure value and display text.
     * @param measureId A String that is the measure identifier.
     */
    GetMeasureValue(measureId: string): ASPxClientDashboardItemDataMeasureValue;
    /**
     * Gets the summary value for the specified delta. A ASPxClientDashboardItemDataDeltaValue object providing delta element values.
     * @param deltaId A String that is the data item identifier.
     */
    GetDeltaValue(deltaId: string): ASPxClientDashboardItemDataDeltaValue;
    /**
     * Returns an array of data members available in a data source.
     */
    GetDataMembers(): string[];
    /**
     * Creates a tuple based on the specified axes names and corresponding values. An ASPxClientDashboardItemDataAxisPointTuple object representing an axis point tuple.
     * @param values An array of name-value pairs containing the axis name and corresponding values.
     */
    CreateTuple(values: any[] | ASPxClientDashboardItemDataAxisPoint[]): ASPxClientDashboardItemDataAxisPointTuple;
}
/**
 * An axis that contains data points corresponding to the specified value hierarchy.
 */
declare class ASPxClientDashboardItemDataAxis {
    /**
     * Gets the dimensions used to create a hierarchy of axis points belonging to the current axis.
     */
    GetDimensions(): ASPxClientDashboardItemDataDimension[];
    /**
     * Gets the root axis point belonging to the current ASPxClientDashboardItemDataAxis.
     */
    GetRootPoint(): ASPxClientDashboardItemDataAxisPoint;
    /**
     * Returns axis points corresponding to values of the last-level dimension.
     */
    GetPoints(): ASPxClientDashboardItemDataAxisPoint[];
    /**
     * Returns axis points corresponding to the specified dimension. An array of ASPxClientDashboardItemDataAxisPoint objects that represent data points in a multidimensional space.
     * @param dimensionId A String that is the dimension identifier.
     */
    GetPointsByDimension(dimensionId: string): ASPxClientDashboardItemDataAxisPoint[];
    /**
     * Returns the data point for the specified axis by unique values. An ASPxClientDashboardItemDataAxisPoint object representing the data point belonging to the specified axis.
     * @param uniqueValues A hierarchy of unique values identifying the required data point.
     */
    GetPointByUniqueValues(uniqueValues: any[]): ASPxClientDashboardItemDataAxisPoint;
}
/**
 * Contains the dimension metadata.
 */
declare class ASPxClientDashboardItemDataDimension {
    /**
     * Gets the dimension identifier.
     */
    Id: string;
    /**
     * Gets or sets the name of the dimension.
     */
    Name: string;
    /**
     * Gets the data member identifier for the current dimension.
     */
    DataMember: string;
    /**
     * Gets the group interval for date-time values for the current dimension.
     */
    DateTimeGroupInterval: string;
    /**
     * Gets the group interval for string values.
     */
    TextGroupInterval: string;
    /**
     * Formats the specified value using format settings of the current dimension. A String that represents the formatted value.
     * @param value A value to be formatted.
     */
    Format(value: any): string;
}
/**
 * Contains the measure metadata.
 */
declare class ASPxClientDashboardItemDataMeasure {
    /**
     * Gets the measure identifier.
     */
    Id: string;
    /**
     * Gets the name of the measure.
     */
    Name: string;
    /**
     * Gets the data member that identifies the data source list used to provide data for the current measure.
     */
    DataMember: string;
    /**
     * Gets the type of summary function calculated against the current measure.
     */
    SummaryType: string;
    /**
     * Formats the specified value using format settings of the current measure. A String that represents the formatted value.
     * @param value A value to be formatted.
     */
    Format(value: any): string;
}
/**
 * Contains the delta metadata.
 */
declare class ASPxClientDashboardItemDataDelta {
    /**
     * Gets the data item identifier.
     */
    Id: string;
    /**
     * Gets the name of the data item container.
     */
    Name: string;
    /**
     * Gets the identifier for the measure that provides actual values.
     */
    ActualMeasureId: string;
    /**
     * Gets the identifier for the measure that provides target values.
     */
    TargetMeasureId: string;
}
/**
 * Provides dimension values at the specified axis point.
 */
declare class ASPxClientDashboardItemDataDimensionValue {
    /**
     * Gets the current dimension value.
     */
    GetValue(): any;
    /**
     * Gets the unique value for the current dimension value.
     */
    GetUniqueValue(): any;
    /**
     * Gets the display text for the current dimension value.
     */
    GetDisplayText(): string;
}
/**
 * Provides the measure value and display text.
 */
declare class ASPxClientDashboardItemDataMeasureValue {
    /**
     * Gets the measure value.
     */
    GetValue(): any;
    /**
     * Gets the measure display text.
     */
    GetDisplayText(): string;
}
/**
 * Provides delta element values.
 */
declare class ASPxClientDashboardItemDataDeltaValue {
    /**
     * Provides access to the actual value displayed within the delta element.
     */
    GetActualValue(): ASPxClientDashboardItemDataMeasureValue;
    /**
     * Provides access to the target value.
     */
    GetTargetValue(): ASPxClientDashboardItemDataMeasureValue;
    /**
     * Provides access to the absolute difference between the actual and target values.
     */
    GetAbsoluteVariation(): ASPxClientDashboardItemDataMeasureValue;
    /**
     * Provides access to the percent of variation between the actual and target values.
     */
    GetPercentVariation(): ASPxClientDashboardItemDataMeasureValue;
    /**
     * Provides access to the percentage of the actual value in the target value.
     */
    GetPercentOfTarget(): ASPxClientDashboardItemDataMeasureValue;
    /**
     * Provides access to the main delta value.
     */
    GetDisplayValue(): ASPxClientDashboardItemDataMeasureValue;
    /**
     * Provides access to the first additional delta value.
     */
    GetDisplaySubValue1(): ASPxClientDashboardItemDataMeasureValue;
    /**
     * Provides access to the second additional delta value.
     */
    GetDisplaySubValue2(): ASPxClientDashboardItemDataMeasureValue;
    /**
     * Gets the value specifying the condition for displaying the delta indication.
     */
    GetIsGood(): ASPxClientDashboardItemDataMeasureValue;
    /**
     * Gets the type of delta indicator.
     */
    GetIndicatorType(): ASPxClientDashboardItemDataMeasureValue;
}
/**
 * References a method that handles the ASPxClientDashboard.ItemCaptionToolbarUpdated event.
 * @param source The event source.
 * @param e The ASPxClientDashboardItemCaptionToolbarUpdatedEventArgs object that contains event data.
 */
interface ASPxClientDashboardItemCaptionToolbarUpdatedEventHandler<Sender> { (source: Sender, e: ASPxClientDashboardItemCaptionToolbarUpdatedEventArgs): void; }
/**
 * Provides data for the ASPxClientDashboard.ItemCaptionToolbarUpdated event.
 */
declare class ASPxClientDashboardItemCaptionToolbarUpdatedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets a component name of the dashboard item.
     */
    ItemName: string;
    /**
     * Provides access to caption options of the dashboard item.
     */
    Options: any;
}
/**
 * References a method that handles the ASPxClientDashboard.DashboardTitleToolbarUpdated event.
 * @param source The event source.
 * @param e A ASPxClientDashboardTitleToolbarUpdatedEventArgs object that contains event data.
 */
interface ASPxClientDashboardTitleToolbarUpdatedEventHandler<Sender> { (source: Sender, e: ASPxClientDashboardTitleToolbarUpdatedEventArgs): void; }
/**
 * Provides data for the ASPxClientDashboard.DashboardTitleToolbarUpdated event.
 */
declare class ASPxClientDashboardTitleToolbarUpdatedEventArgs extends ASPxClientEventArgs {
    /**
     * Provides access to dashboard title options.
     */
    Options: any;
}
/**
 * A point on the data axis.
 */
declare class ASPxClientDashboardItemDataAxisPoint {
    /**
     * Gets the name of the axis to which the current axis point belongs.
     */
    GetAxisName(): string;
    /**
     * Gets the last level dimension corresponding to the current axis point.
     */
    GetDimension(): ASPxClientDashboardItemDataDimension;
    /**
     * Gets the collection of dimensions used to create a hierarchy of axis points from the root point to the current axis point.
     */
    GetDimensions(): ASPxClientDashboardItemDataDimension[];
    /**
     * Gets the value corresponding to the current axis point.
     */
    GetValue(): any;
    /**
     * Gets the display text corresponding to the current axis point.
     */
    GetDisplayText(): string;
    /**
     * Gets the unique value corresponding to the current axis point.
     */
    GetUniqueValue(): any;
    /**
     * Gets the dimension values at the specified axis point. A ASPxClientDashboardItemDataDimensionValue object that contains the dimension values at the specified axis point.
     */
    GetDimensionValue(dimensionId?: string): ASPxClientDashboardItemDataDimensionValue;
    /**
     * Gets the child axis points for the current axis point.
     */
    GetChildren(): ASPxClientDashboardItemDataAxisPoint[];
    /**
     * Gets the parent axis point for the current axis point.
     */
    GetParent(): ASPxClientDashboardItemDataAxisPoint;
}
/**
 * Represents a tuple of axis points.
 */
declare class ASPxClientDashboardItemDataAxisPointTuple {
    /**
     * Returns the axis point belonging to the default data axis. An ASPxClientDashboardItemDataAxisPoint object that is the axis point.
     */
    GetAxisPoint(axisName?: string): ASPxClientDashboardItemDataAxisPoint;
}
/**
 * A range in the Range Filter or Date Filter dashboard item.
 */
declare class ASPxClientDashboardRangeFilterSelection {
    /**
     * Gets or sets a maximum value in the range of the Range Filter dashboard item.
     */
    Maximum: any;
    /**
     * Gets or sets a minimum value in the range of the Range Filter dashboard item.
     */
    Minimum: any;
}
/**
 * A collection of ASPxClientDashboardParameter objects.
 */
declare class ASPxClientDashboardParameters {
    /**
     * Returns an array of dashboard parameters from the ASPxClientDashboardParameters collection.
     */
    GetParameterList(): ASPxClientDashboardParameter[];
    /**
     * Returns a dashboard parameter by its name. A ASPxClientDashboardParameter object that is the client-side dashboard parameter.
     * @param name A String object that specifies the parameter name.
     */
    GetParameterByName(name: string): ASPxClientDashboardParameter;
    /**
     * Returns a dashboard parameter by its index in the ASPxClientDashboardParameters collection. A ASPxClientDashboardParameter object that is the client-side dashboard parameter.
     * @param index An integer value that specifies the parameter index.
     */
    GetParameterByIndex(index: number): ASPxClientDashboardParameter;
}
/**
 * A client-side dashboard parameter.
 */
declare class ASPxClientDashboardParameter {
    /** @deprecated Use the GetName method instead. */
    /**
     * Gets the dashboard parameter name on the client side.
     */
    Name: string;
    /** @deprecated Use the GetValue method instead. */
    /**
     * Gets the dashboard parameter value on the client side.
     */
    Value: any;
    /**
     * Returns a parameter name.
     */
    GetName(): string;
    /**
     * Returns a current parameter value(s).
     */
    GetValue(): any;
    /**
     * Specifies the current parameter value(s).
     * @param value The current parameter value(s).
     */
    SetValue(value: any): void;
    /**
     * Returns a default parameter value.
     */
    GetDefaultValue(): any;
    /**
     * Returns the parameter's description displayed to an end-user.
     */
    GetDescription(): string;
    /**
     * Returns a parameter type.
     */
    GetType(): string;
    /**
     * Returns possible parameter values.
     */
    GetValues(): ASPxClientDashboardParameterValue[];
}
/**
 * Provides access to the parameter value and display text.
 */
declare class ASPxClientDashboardParameterValue {
    /**
     * Returns the parameter display text.
     */
    GetDisplayText(): string;
    /**
     * Returns a parameter value.
     */
    GetValue(): any;
}
/**
 * Lists constants used to identify the page orientation used to export a dashboard/dashboard item.
 */
declare class DashboardExportPageLayout {
    /**
     * The page orientation used to export a dashboard (dashboard item) is portrait.
     */
    static readonly Portrait: string;
    /**
     * The page orientation used to export a dashboard (dashboard item) is landscape.
     */
    static readonly Landscape: string;
}
/**
 * Lists constants used to identify a standard paper size used to export a dashboard/dashboard item.
 */
declare class DashboardExportPaperKind {
    /**
     * Letter paper (8.5 in. by 11 in.).
     */
    static readonly Letter: string;
    /**
     * Legal paper (8.5 in. by 14 in.).
     */
    static readonly Legal: string;
    /**
     * Executive paper (7.25 in. by 10.5 in.).
     */
    static readonly Executive: string;
    /**
     * A5 paper (148 mm by 210 mm).
     */
    static readonly A5: string;
    /**
     * A4 paper (210 mm by 297 mm).
     */
    static readonly A4: string;
    /**
     * A3 paper (297 mm by 420 mm).
     */
    static readonly A3: string;
}
/**
 * Lists values that specify a scale mode when exporting a dashboard (dashboard item).
 */
declare class DashboardExportScaleMode {
    /**
     * The dashboard (dashboard item) on the exported page retains its original size.
     */
    static readonly None: string;
    /**
     * The size of the dashboard (dashboard item) on the exported page is changed according to the scale factor value.
     */
    static readonly UseScaleFactor: string;
    /**
     * The size of the dashboard (dashboard item) is changed according to the width of the exported page.
     */
    static readonly AutoFitToPageWidth: string;
    /**
     * The size of the dashboard (dashboard item) is changed to fit its content on a single page.
     */
    static readonly AutoFitWithinOnePage: string;
}
/**
 * Lists values that specify a scale mode when exporting a dashboard/dashboard item.
 */
declare class DashboardExportDocumentScaleMode {
    /**
     * The dashboard / dashboard item on the exported page retains its original size.
     */
    static readonly None: string;
    /**
     * The size of the dashboard / dashboard item on the exported page is changed according to the scale factor value (DashboardPdfExportOptions.ScaleFactor).
     */
    static readonly UseScaleFactor: string;
    /**
     * The size of the dashboard / dashboard item is changed according to the width of the exported pages.
     */
    static readonly AutoFitToPagesWidth: string;
}
/**
 * Lists constants used to identify the filter state&amp;#39;s location on the exported document.
 */
declare class DashboardExportFilterState {
    /**
     * The filter state is not included in the exported document.
     */
    static readonly None: string;
    /**
     * The filter state is placed below the dashboard (dashboard item) in the exported document.
     */
    static readonly Below: string;
    /**
     * The filter state is placed on a separate page in the exported document.
     */
    static readonly SeparatePage: string;
}
/**
 * Lists constants that specify the position of the dashboard state (such as master filter or current parameter values) in the exported document.
 */
declare class DashboardStateExportPosition {
    /**
     * The dashboard state is placed below the exported dashboard/dashboard item.
     */
    static readonly Below: string;
    /**
     * The dashboard state is placed on a separate page.
     */
    static readonly SeparatePage: string;
}
/**
 * Lists constants that specify the position of the dashboard state (such as master filter or current parameter values) in the exported Excel document.
 */
declare class DashboardStateExcelExportPosition {
    /**
     * The dashboard state is placed below the exported data.
     */
    static readonly Below: string;
    /**
     * The dashboard state is placed on a separate sheet.
     */
    static readonly SeparateSheet: string;
}
/**
 * Lists values that specify the image format used for exporting a dashboard/dashboard item.
 */
declare class DashboardExportImageFormat {
    /**
     * The PNG image format.
     */
    static readonly Png: string;
    /**
     * The GIF image format.
     */
    static readonly Gif: string;
    /**
     * The JPG image format.
     */
    static readonly Jpg: string;
}
/**
 * Lists values that specify the filter state&amp;#39;s location in the exported Excel file.
 */
declare class ExcelExportFilterState {
    /**
     * The filter state is not included in the exported document.
     */
    static readonly none: string;
    /**
     * The filter state is placed below in the exported document.
     */
    static readonly below: string;
    /**
     * The filter state is placed on a separate sheet in the exported workbook.
     */
    static readonly separatePage: string;
}
/**
 * Lists values that specify Excel formats available for exporting individual dashboard items.
 */
declare class DashboardExportExcelFormat {
    /**
     * The Excel 97 - Excel 2003 (XLS) file format.
     */
    static readonly Xls: string;
    /**
     * The Office Excel 2007 XML-based (XLSX) file format.
     */
    static readonly Xlsx: string;
    /**
     * A comma-separated values (CSV) file format.
     */
    static readonly Csv: string;
}
/**
 * Lists constants used to specify how a Chart dashboard item should be resized when being exported.
 */
declare class ChartExportSizeMode {
    /**
     * A chart dashboard item is exported in a size identical to that shown on the dashboard.
     */
    static readonly None: string;
    /**
     * A chart dashboard item is stretched or shrunk to fit the page to which it is exported.
     */
    static readonly Stretch: string;
    /**
     * A chart dashboard item is resized proportionally to best fit the exported page.
     */
    static readonly Zoom: string;
}
/**
 * Lists values used to specify how a Map dashboard item should be resized when being exported.
 */
declare class MapExportSizeMode {
    /**
     * A map dashboard item is exported in a size identical to that shown on the dashboard
     */
    static readonly None: string;
    /**
     * A map dashboard item is resized proportionally to best fit the exported page.
     */
    static readonly Zoom: string;
}
/**
 * Lists constants used to specify how a Treemap dashboard item should be resized when being exported.
 */
declare class TreemapExportSizeMode {
    /**
     * For internal use.
     */
    static readonly none: string;
    /**
     * For internal use.
     */
    static readonly zoom: string;
}
/**
 * Lists values used to specify how a Range Filter dashboard item should be resized when being exported.
 */
declare class RangeFilterExportSizeMode {
    /**
     * A Range Filter dashboard item is exported in a size identical to that shown on the dashboard.
     */
    static readonly None: string;
    /**
     * A Range Filter dashboard item is stretched or shrunk to fit the page to which it is exported.
     */
    static readonly Stretch: string;
    /**
     * A Range Filter dashboard item is resized proportionally to best fit the printed page.
     */
    static readonly Zoom: string;
}
/**
 * Contains settings that specify parameters affecting how the dashboard or dashboard item is exported in Image format.
 */
declare class ImageFormatOptions {
    /** @deprecated The ImageFormatOptions.Format property is obsolete now. Use the DashboardImageExportOptions.Format property instead. To learn more, see the following KB article: https://www.devexpress.com/Support/Center/Question/Details/T488764 */
    /**
     * Gets or sets an image format in which the dashboard (dashboard item) is exported.
     */
    Format: string;
    /** @deprecated The ImageFormatOptions.Resolution property is obsolete now. Use the DashboardImageExportOptions.Resolution property instead. To learn more, see the following KB article: https://www.devexpress.com/Support/Center/Question/Details/T488764 */
    /**
     * Gets or sets the resolution (in dpi) used to export a dashboard (dashboard item) in Image format.
     */
    Resolution: number;
}
/**
 * Contains options which define how the dashboard item is exported to Excel format.
 */
declare class ExcelFormatOptions {
    /** @deprecated The ExcelFormatOptions.Format property is obsolete now. Use the DashboardExcelExportOptions.Format property instead. To learn more, see the following KB article: https://www.devexpress.com/Support/Center/Question/Details/T488764 */
    /**
     * Gets or sets the Excel format in which the dashboard item is exported.
     */
    Format: string;
    /** @deprecated The ExcelFormatOptions.CsvValueSeparator property is obsolete now. Use the DashboardExcelExportOptions.CsvValueSeparator property instead. To learn more, see the following KB article: https://www.devexpress.com/Support/Center/Question/Details/T488764 */
    /**
     * Gets or sets a character used to separate values in a CSV document.
     */
    CsvValueSeparator: string;
}
/**
 * Contains settings that specify parameters affecting how the Grid dashboard item is exported.
 */
declare class GridExportOptions {
    /** @deprecated The GridExportOptions.FitToPageWidth property is obsolete now. Use the DashboardPdfExportOptions.GridFitToPageWidth property instead. To learn more, see the following KB article: https://www.devexpress.com/Support/Center/Question/Details/T488764 */
    /**
     * Gets or sets whether the size of the Grid dashboard item is changed according to the width of the exported page.
     */
    FitToPageWidth: boolean;
    /** @deprecated The GridExportOptions.PrintHeadersOnEveryPage property is obsolete now. Use the DashboardPdfExportOptions.GridPrintHeadersOnEveryPage property instead. To learn more, see the following KB article: https://www.devexpress.com/Support/Center/Question/Details/T488764 */
    /**
     * Gets or sets whether to print column headers of the Grid dashboard item on every page.
     */
    PrintHeadersOnEveryPage: boolean;
}
/**
 * Contains settings that specify parameters affecting how the Pivot dashboard item is exported.
 */
declare class PivotExportOptions {
    /** @deprecated The PivotExportOptions.PrintHeadersOnEveryPage property is obsolete now. Use the DashboardPdfExportOptions.PivotPrintHeadersOnEveryPage property instead. To learn more, see the following KB article: https://www.devexpress.com/Support/Center/Question/Details/T488764 */
    /**
     * Gets or sets whether to print the column headers of the Pivot dashboard item on every page.
     */
    PrintHeadersOnEveryPage: boolean;
}
/**
 * Contains settings that specify parameters affecting how the Pie dashboard item is exported.
 */
declare class PieExportOptions {
    /** @deprecated The PieExportOptions.AutoArrangeContent property is obsolete now. Use the DashboardPdfExportOptions.PieAutoArrangeContent property instead. To learn more, see the following KB article: https://www.devexpress.com/Support/Center/Question/Details/T488764 */
    /**
     * Gets or sets whether dashboard item elements are arranged automatically on the exported page.
     */
    AutoArrangeContent: boolean;
}
/**
 * Contains settings that specify parameters affecting how the Gauge dashboard item is exported.
 */
declare class GaugeExportOptions {
    /** @deprecated The GaugeExportOptions.AutoArrangeContent property is obsolete now. Use the DashboardPdfExportOptions.GaugeAutoArrangeContent property instead. To learn more, see the following KB article: https://www.devexpress.com/Support/Center/Question/Details/T488764 */
    /**
     * Gets or sets whether dashboard item elements are arranged automatically on the exported page.
     */
    AutoArrangeContent: boolean;
}
/**
 * Contains settings that specify parameters affecting how the Card dashboard item is exported.
 */
declare class CardExportOptions {
    /** @deprecated The CardExportOptions.AutoArrangeContent property is obsolete now. Use the DashboardPdfExportOptions.CardAutoArrangeContent property instead. To learn more, see the following KB article: https://www.devexpress.com/Support/Center/Question/Details/T488764 */
    /**
     * Gets or sets whether dashboard item elements are arranged automatically on the exported page.
     */
    AutoArrangeContent: boolean;
}
/**
 * Contains settings that specify parameters affecting how the Range Filter dashboard item is exported.
 */
declare class RangeFilterExportOptions {
    /** @deprecated The RangeFilterExportOptions.AutomaticPageLayout property is obsolete now. Use the DashboardPdfExportOptions.RangeFilterAutomaticPageLayout property instead. To learn more, see the following KB article: https://www.devexpress.com/Support/Center/Question/Details/T488764 */
    /**
     * Gets or sets whether the page orientation used to export a Range Filter dashboard item is selected automatically.
     */
    AutomaticPageLayout: boolean;
    /** @deprecated The RangeFilterExportOptions.SizeMode property is obsolete now. Use the DashboardPdfExportOptions.RangeFilterSizeMode property instead. To learn more, see the following KB article: https://www.devexpress.com/Support/Center/Question/Details/T488764 */
    /**
     * Gets or sets the export size mode for the Range Filter dashboard item.
     */
    SizeMode: string;
}
/**
 * Contains settings that specify parameters affecting how Chart dashboard items are exported.
 */
declare class ChartExportOptions {
    /** @deprecated The ChartExportOptions.AutomaticPageLayout property is obsolete now. Use the DashboardPdfExportOptions.ChartAutomaticPageLayout property instead. To learn more, see the following KB article: https://www.devexpress.com/Support/Center/Question/Details/T488764 */
    /**
     * Gets or sets whether the page orientation used to export a Chart dashboard item is selected automatically.
     */
    AutomaticPageLayout: boolean;
    /** @deprecated The ChartExportOptions.SizeMode property is obsolete now. Use the DashboardPdfExportOptions.ChartSizeMode property instead. To learn more, see the following KB article: https://www.devexpress.com/Support/Center/Question/Details/T488764 */
    /**
     * Gets or sets the export size mode for the Chart dashboard item.
     */
    SizeMode: string;
}
/**
 * Contains settings that specify parameters affecting how Map dashboard items are exported.
 */
declare class MapExportOptions {
    /** @deprecated The MapExportOptions.AutomaticPageLayout property is obsolete now. Use the DashboardPdfExportOptions.MapAutomaticPageLayout property instead. To learn more, see the following KB article: https://www.devexpress.com/Support/Center/Question/Details/T488764 */
    /**
     * Gets or sets whether the page orientation used to export a map dashboard item is selected automatically.
     */
    AutomaticPageLayout: boolean;
    /** @deprecated The MapExportOptions.SizeMode property is obsolete now. Use the DashboardPdfExportOptions.MapSizeMode property instead. To learn more, see the following KB article: https://www.devexpress.com/Support/Center/Question/Details/T488764 */
    /**
     * Gets or sets the export size mode for the map dashboard item.
     */
    SizeMode: string;
}
/**
 * Contains settings that specify parameters affecting how the Treemap dashboard item is Printing and Exporting.
 */
declare class TreemapExportOptions {
    /** @deprecated The TreemapExportOptions.AutomaticPageLayout property is obsolete now. Use the DashboardPdfExportOptions.TreemapAutomaticPageLayout property instead. To learn more, see the following KB article: https://www.devexpress.com/Support/Center/Question/Details/T488764 */
    /**
     * Gets or sets whether the page orientation used to export a Treemap dashboard item is selected automatically.
     */
    AutomaticPageLayout: boolean;
    /** @deprecated The TreemapExportOptions.SizeMode property is obsolete now. Use the DashboardPdfExportOptions.TreemapSizeMode property instead. To learn more, see the following KB article: https://www.devexpress.com/Support/Center/Question/Details/T488764 */
    /**
     * Gets or sets the export size mode for the Treemap dashboard item.
     */
    SizeMode: string;
}
/**
 * Contains settings that specify parameters affecting how the dashboard (dashboard item) is exported.
 */
declare class ASPxClientDashboardExportOptions {
    /** @deprecated The PaperKind property is obsolete now. Use the DashboardPdfExportOptions.PaperKind property instead. To learn more, see the following KB article: https://www.devexpress.com/Support/Center/Question/Details/T488764 */
    /**
     * Gets or sets the standard paper size.
     */
    PaperKind: string;
    /** @deprecated The PageLayout property is obsolete now. Use the DashboardPdfExportOptions.PageLayout property instead. To learn more, see the following KB article: https://www.devexpress.com/Support/Center/Question/Details/T488764 */
    /**
     * Gets or sets the page orientation used to export a dashboard (dashboard item).
     */
    PageLayout: string;
    /** @deprecated The ScaleMode property is obsolete now. Use the DashboardPdfExportOptions.ScaleMode property instead. To learn more, see the following KB article: https://www.devexpress.com/Support/Center/Question/Details/T488764 */
    /**
     * Gets or sets the mode for scaling when exporting a dashboard (dashboard item).
     */
    ScaleMode: string;
    /** @deprecated The ScaleFactor property is obsolete now. Use the DashboardPdfExportOptions.ScaleFactor and DashboardImageExportOptions.ScaleFactor properties instead. To learn more, see the following KB article: https://www.devexpress.com/Support/Center/Question/Details/T488764 */
    /**
     * Gets or sets the scale factor (in fractions of 1) by which a dashboard (dashboard item) is scaled.
     */
    ScaleFactor: number;
    /** @deprecated This AutoFitPageCount property is obsolete now. Use the DashboardPdfExportOptions.AutoFitPageCount property instead. To learn more, see the following KB article: https://www.devexpress.com/Support/Center/Question/Details/T488764 */
    /**
     * Gets or sets the number of horizontal/vertical pages spanning the total width/height of a dashboard (dashboard item).
     */
    AutoFitPageCount: number;
    /** @deprecated The Title property is obsolete now. Use the DashboardPdfExportOptions.Title and DashboardImageExportOptions.Title properties instead. To learn more, see the following KB article: https://www.devexpress.com/Support/Center/Question/Details/T488764 */
    /**
     * Gets or sets the title of the exported document.
     */
    Title: string;
    /** @deprecated The ShowTitle property is obsolete now. Use the DashboardPdfExportOptions.ShowTitle and DashboardImageExportOptions.ShowTitle properties instead. To learn more, see the following KB article: https://www.devexpress.com/Support/Center/Question/Details/T488764 */
    /**
     * Gets or sets whether a dashboard title (or dashboard item's caption) is included as the exported document title.
     */
    ShowTitle: boolean;
    /** @deprecated This property is obsolete now. Instead use the ExportFilters/DashboardStatePosition properties exposed by the DashboardPdfExportOptions/DashboardImageExportOptions classes. To learn more, see the following KB article: https://www.devexpress.com/Support/Center/Question/Details/T488764 */
    /**
     * Gets or sets the filter state's location on the exported document.
     */
    FilterState: string;
    /** @deprecated The ImageOptions property is obsolete now. Use properties exposed by the DashboardImageExportOptions class instead. To learn more, see the following KB article: https://www.devexpress.com/Support/Center/Question/Details/T488764 */
    /**
     * Provides access to options for exporting a dashboard or individual items in Image format.
     */
    ImageOptions: ImageFormatOptions;
    /** @deprecated The ExcelOptions property is obsolete now. Use properties exposed by the DashboardExcelExportOptions class instead. To learn more, see the following KB article: https://www.devexpress.com/Support/Center/Question/Details/T488764 */
    /**
     * Provides access to options for exporting individual dashboard items in Excel format.
     */
    ExcelOptions: ExcelFormatOptions;
    /** @deprecated The GridOptions property is obsolete now. Use properties with the 'Grid' prefix exposed by the DashboardPdfExportOptions class. To learn more, see the following KB article: https://www.devexpress.com/Support/Center/Question/Details/T488764 */
    /**
     * Provides access to options for exporting a Grid dashboard item.
     */
    GridOptions: GridExportOptions;
    /** @deprecated The PivotOptions property is obsolete now. Use properties with the 'Pivot' prefix exposed by the DashboardPdfExportOptions class. To learn more, see the following KB article: https://www.devexpress.com/Support/Center/Question/Details/T488764 */
    /**
     * Provides access to options for exporting a Pivot dashboard item.
     */
    PivotOptions: PivotExportOptions;
    /** @deprecated The PieOptions property is obsolete now. Use properties with the 'Pie' prefix exposed by the DashboardPdfExportOptions class. To learn more, see the following KB article: https://www.devexpress.com/Support/Center/Question/Details/T488764 */
    /**
     * Provides access to options for exporting a Pie dashboard item.
     */
    PieOptions: PieExportOptions;
    /** @deprecated The GaugeOptions property is obsolete now. Use properties with the 'Gauge' prefix exposed by the DashboardPdfExportOptions class. To learn more, see the following KB article: https://www.devexpress.com/Support/Center/Question/Details/T488764 */
    /**
     * Provides access to options for exporting a Gauge dashboard item.
     */
    GaugeOptions: GaugeExportOptions;
    /** @deprecated The CardOptions property is obsolete now. Use properties with the 'Card' prefix exposed by the DashboardPdfExportOptions class. To learn more, see the following KB article: https://www.devexpress.com/Support/Center/Question/Details/T488764 */
    /**
     * Provides access to options for exporting a Card dashboard item.
     */
    CardOptions: CardExportOptions;
    /** @deprecated The RangeFilterOptions property is obsolete now. Use properties with the 'RangeFilter' prefix exposed by the DashboardPdfExportOptions class. To learn more, see the following KB article: https://www.devexpress.com/Support/Center/Question/Details/T488764 */
    /**
     * Provides access to options for exporting a Range Filter dashboard item.
     */
    RangeFilterOptions: RangeFilterExportOptions;
    /** @deprecated The ChartOptions property is obsolete now. Use properties with the 'Chart' prefix exposed by the DashboardPdfExportOptions class. To learn more, see the following KB article: https://www.devexpress.com/Support/Center/Question/Details/T488764 */
    /**
     * Provides access to options for exporting a Chart dashboard item.
     */
    ChartOptions: ChartExportOptions;
    /** @deprecated The MapOptions property is obsolete now. Use properties with the 'Map' prefix exposed by the DashboardPdfExportOptions class. To learn more, see the following KB article: https://www.devexpress.com/Support/Center/Question/Details/T488764 */
    /**
     * Provides access to options for exporting map dashboard items.
     */
    MapOptions: MapExportOptions;
    /** @deprecated The TreemapOptions property is obsolete now. Use properties with the 'Treemap' prefix exposed by the DashboardPdfExportOptions class. To learn more, see the following KB article: https://www.devexpress.com/Support/Center/Question/Details/T488764 */
    /**
     * Provides access to options for exporting a Treemap dashboard item.
     */
    TreemapOptions: TreemapExportOptions;
}
/**
 * Contains the font settings of the exported document.
 */
declare class ExportFontInfo {
    /**
     * Specifies the name of the font used in the exported document.
     */
    Name: string;
    /**
     * Specifies a value that specifies the GDI character set used by the current font.
     */
    GdiCharSet: any;
    /**
     * Specifies whether custom font settings are used in the exported document.
     */
    UseCustomFontInfo: boolean;
}
/**
 * Contains options related to exporting a dashboard/dashboard item to the PDF format.
 */
declare class DashboardPdfExportOptions {
    /**
     * Gets or sets the type of paper for the exported document.
     */
    PaperKind: string;
    /**
     * Gets or sets the page orientation used to export a dashboard/dashboard item.
     */
    PageLayout: string;
    /** @deprecated The ScaleMode property is obsolete now. Use the DocumentScaleMode and DashboardAutomaticPageLayout property instead. */
    /**
     * Gets or sets the mode for scaling a dashboard/dashboard item in the exported document.
     */
    ScaleMode: string;
    /**
     * Gets or sets the mode for scaling a dashboard/dashboard item in the exported document.
     */
    DocumentScaleMode: string;
    /**
     * Gets or sets whether the page orientation used to export a dashboard is selected automatically.
     */
    DashboardAutomaticPageLayout: boolean;
    /**
     * Gets or sets the scale factor (in fractions of 1), by which a dashboard/dashboard item is scaled in the exported document.
     */
    ScaleFactor: number;
    /**
     * Gets or sets the number of horizontal/vertical pages spanning the total width/height of a dashboard/dashboard item.
     */
    AutoFitPageCount: number;
    /**
     * Gets or sets the title of the exported document.
     */
    Title: string;
    /**
     * Gets or sets whether a dashboard title (or dashboard item's caption) is included as the exported document title.
     */
    ShowTitle: boolean;
    /**
     * Gets or sets whether to add the state of master filter items to the exported document.
     */
    ExportFilters: boolean;
    /**
     * Gets or sets whether to add current parameter values to the exported document.
     */
    ExportParameters: boolean;
    /**
     * Gets or sets whether to add current values of a hidden parameter to the exported document.
     */
    IncludeHiddenParameters: boolean;
    /**
     * Gets or sets a position of the dashboard state (such as master filter or current parameter values) in the exported document.
     */
    DashboardStatePosition: string;
    /**
     * Gets or sets whether cards within the Card dashboard item are arranged automatically on the exported page.
     */
    CardAutoArrangeContent: boolean;
    /**
     * Gets or sets whether the page orientation used to export the Chart dashboard item is selected automatically.
     */
    ChartAutomaticPageLayout: boolean;
    /**
     * Gets or sets the export size mode for the Chart dashboard item.
     */
    ChartSizeMode: string;
    /**
     * Gets or sets whether gauges within the Gauge dashboard item are arranged automatically on the exported page.
     */
    GaugeAutoArrangeContent: boolean;
    /**
     * Gets or sets whether the size of the Grid dashboard item is changed according to the width of the exported page.
     */
    GridFitToPageWidth: boolean;
    /**
     * Gets or sets whether to add column headers of the Grid dashboard item to every page.
     */
    GridPrintHeadersOnEveryPage: boolean;
    /**
     * Gets or sets whether the page orientation used to export the Map dashboard item is selected automatically.
     */
    MapAutomaticPageLayout: boolean;
    /**
     * Gets or sets the export size mode for the Map dashboard item.
     */
    MapSizeMode: string;
    /**
     * Gets or sets whether pies within the Pie dashboard item are arranged automatically on the exported page.
     */
    PieAutoArrangeContent: boolean;
    /**
     * Gets or sets whether to add column headers of the Pivot dashboard item to every page.
     */
    PivotPrintHeadersOnEveryPage: boolean;
    /**
     * Gets or sets whether the page orientation used to export the Range Filter dashboard item is selected automatically.
     */
    RangeFilterAutomaticPageLayout: boolean;
    /**
     * Gets or sets the export size mode for the Range Filter dashboard item.
     */
    RangeFilterSizeMode: string;
    /**
     * Gets or sets whether the page orientation used to export the Treemap dashboard item is selected automatically.
     */
    TreemapAutomaticPageLayout: boolean;
    /**
     * Gets or sets the export size mode for the Treemap dashboard item.
     */
    TreemapSizeMode: string;
    FontInfo: ExportFontInfo;
}
/**
 * Contains options related to exporting a dashboard/dashboard item to an image.
 */
declare class DashboardImageExportOptions {
    /**
     * Gets or sets a title of the exported document.
     */
    Title: string;
    /**
     * Gets or sets whether a dashboard title (or dashboard item's caption) is included as the exported document title.
     */
    ShowTitle: boolean;
    /**
     * Gets or sets whether to add the state of master filter items to the exported document.
     */
    ExportFilters: boolean;
    /**
     * Gets or sets whether to add current parameter values to the exported document.
     */
    ExportParameters: boolean;
    /**
     * Gets or sets whether to add current values of a hidden parameter to the exported document.
     */
    IncludeHiddenParameters: boolean;
    /**
     * Gets or sets an image format in which the dashboard/dashboard item is exported.
     */
    Format: string;
    /**
     * Gets or sets the resolution (in dpi) used to export a dashboard/dashboard item to an image.
     */
    Resolution: number;
    /**
     * Gets or sets the scale factor (in fractions of 1), by which a dashboard/dashboard item is scaled in the exported document.
     */
    ScaleFactor: number;
    FontInfo: ExportFontInfo;
}
/**
 * Contains options related to exporting a dashboard/dashboard item to the Excel format.
 */
declare class DashboardExcelExportOptions {
    /**
     * Gets or sets the Excel format in which the dashboard item is exported.
     */
    Format: string;
    /**
     * Gets or sets a character used to separate values in a CSV document.
     */
    CsvValueSeparator: string;
    /**
     * Gets or sets whether to add the state of master filter items to the exported document.
     */
    ExportFilters: boolean;
    /**
     * Gets or sets whether to add current parameter values to the exported document.
     */
    ExportParameters: boolean;
    /**
     * Gets or sets whether to add current values of a hidden parameter to the exported document.
     */
    IncludeHiddenParameters: boolean;
    /**
     * Gets or sets the position of the dashboard state (such as master filter or current parameter values) in the exported document.
     */
    DashboardStatePosition: string;
}
declare class DashboardSelectionMode {
    static None: string;
    static Single: string;
    static Multiple: string;
}
/**
 * A client-side equivalent of the ASPxDashboard control.
 */
declare class ASPxClientDashboard extends ASPxClientControl {
    /**
     * Sends a callback to the server and generates the server-side ASPxDashboard.CustomDataCallback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side ASPxDashboard.CustomDataCallback event.
     * @param onCallback An ASPxClientDataCallback object that represents the JavaScript function which receives the callback data as a parameter.
     */
    PerformDataCallback(parameter: string, onCallback: ASPxClientDataCallback): void;
    /**
     * Fires when a round trip to the server has been initiated by a call to the client ASPxClientDashboard.PerformDataCallback method.
     */
    CustomDataCallback: ASPxClientEvent<ASPxClientCustomDataCallbackEventHandler<ASPxClientDashboard>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientDashboard>>;
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientDashboard>>;
    /**
     * Occurs after the current dashboard state in the ASPxClientDashboard is changed.
     */
    DashboardStateChanged: ASPxClientEvent<ASPxClientDashboardStateChangedEventHandler<ASPxClientDashboard>>;
    /**
     * The DashboardChanged client-side event is obsolete. Use the DashboardInitialized event instead.
     */
    DashboardChanged: ASPxClientEvent<ASPxClientDashboardChangedEventHandler<ASPxClientDashboard>>;
    /**
     * Occurs after the dashboard displayed in the control has been initialized.
     */
    DashboardInitialized: ASPxClientEvent<ASPxClientDashboardInitializedEventHandler<ASPxClientDashboard>>;
    /**
     * Occurs before the dashboard displayed in the control has been initialized.
     */
    DashboardInitializing: ASPxClientEvent<ASPxClientDashboardInitializingEventHandler<ASPxClientDashboard>>;
    /**
     * Occurs before any element in the Web Dashboard control has been rendered.
     */
    BeforeRender: ASPxClientEvent<ASPxClientDashboardBeforeRenderEventHandler<ASPxClientDashboard>>;
    /**
     * Occurs when an end-user clicks a dashboard item.
     */
    ItemClick: ASPxClientEvent<ASPxClientDashboardItemClickEventHandler<ASPxClientDashboard>>;
    /**
     * Allows you to provide custom visual interactivity for data-bound dashboard items that support element selection and highlighting.
     */
    ItemVisualInteractivity: ASPxClientEvent<ASPxClientDashboardItemVisualInteractivityEventHandler<ASPxClientDashboard>>;
    /**
     * Allows you to access underlying UI/Data Visualization widgets.
     */
    ItemWidgetCreated: ASPxClientEvent<ASPxClientDashboardItemWidgetCreatedEventHandler<ASPxClientDashboard>>;
    /**
     * Allows you to access underlying UI/Data Visualization widgets.
     */
    ItemWidgetUpdating: ASPxClientEvent<ASPxClientDashboardItemWidgetUpdatingEventHandler<ASPxClientDashboard>>;
    /**
     * Allows you to access underlying UI/Data Visualization widgets.
     */
    ItemWidgetUpdated: ASPxClientEvent<ASPxClientDashboardItemWidgetUpdatedEventHandler<ASPxClientDashboard>>;
    /**
     * Allows you to access underlying UI/Data Visualization widgets.
     */
    ItemBeforeWidgetDisposed: ASPxClientEvent<ASPxClientDashboardItemBeforeWidgetDisposedEventHandler<ASPxClientDashboard>>;
    /**
     * Occurs after the selection within the dashboard item is changed.
     */
    ItemSelectionChanged: ASPxClientEvent<ASPxClientDashboardItemSelectionChangedEventHandler<ASPxClientDashboard>>;
    /**
     * Allows you to color the required dashboard item elements using the specified colors.
     */
    ItemElementCustomColor: ASPxClientEvent<ASPxClientDashboardItemElementCustomColorEventHandler<ASPxClientDashboard>>;
    /**
     * Occurs when a master filter state is changed.
     */
    ItemMasterFilterStateChanged: ASPxClientEvent<ASPxClientDashboardItemMasterFilterStateChangedEventHandler<ASPxClientDashboard>>;
    /**
     * Occurs when a drill-down/drill-up is performed.
     */
    ItemDrillDownStateChanged: ASPxClientEvent<ASPxClientDashboardItemDrillDownStateChangedEventHandler<ASPxClientDashboard>>;
    /**
     * Occurs after the available interactivity actions have changed for the specific dashboard item.
     */
    ActionAvailabilityChanged: ASPxClientEvent<ASPxClientActionAvailabilityChangedEventHandler<ASPxClientDashboard>>;
    /**
     * Occurs after parameter values provided using a Dynamic List are loaded.
     */
    DynamicLookUpValuesLoaded: ASPxClientEvent<ASPxClientDynamicLookUpValuesLoadedEventHandler<ASPxClientDashboard>>;
    /**
     * Occurs when a dashboard item update is initiated.
     */
    ItemBeginUpdate: ASPxClientEvent<ASPxClientItemBeginUpdateEventHandler<ASPxClientDashboard>>;
    /**
     * Occurs after the dashboard item update is performed.
     */
    ItemEndUpdate: ASPxClientEvent<ASPxClientItemEndUpdateEventHandler<ASPxClientDashboard>>;
    /**
     * Occurs when a dashboard update is initiated.
     */
    DashboardBeginUpdate: ASPxClientEvent<ASPxClientDashboardBeginUpdateEventHandler<ASPxClientDashboard>>;
    /**
     * Occurs after the dashboard update is performed.
     */
    DashboardEndUpdate: ASPxClientEvent<ASPxClientDashboardEndUpdateEventHandler<ASPxClientDashboard>>;
    /**
     * Allows you to customize a dashboard item's caption (for instance, add custom buttons, menus, etc.).
     */
    ItemCaptionToolbarUpdated: ASPxClientEvent<ASPxClientDashboardItemCaptionToolbarUpdatedEventHandler<ASPxClientDashboard>>;
    /**
     * Allows you to customize a dashboard title (for instance, add custom buttons, menus, etc.).
     */
    DashboardTitleToolbarUpdated: ASPxClientEvent<ASPxClientDashboardTitleToolbarUpdatedEventHandler<ASPxClientDashboard>>;
    /**
     * Occurs when the selected tab page is changed.
     */
    SelectedTabPageChanged: ASPxClientEvent<ASPxClientSelectedTabPageChangedEventHandler<ASPxClientDashboard>>;
    CustomizeDataSourceWizard: ASPxClientEvent<ASPxClientCustomizeDataSourceWizardEventHandler<ASPxClientDashboard>>;
    /**
     * Gets the DashboardControl object that is the client-side part of the Web Dashboard.
     */
    GetDashboardControl(): any;
    /**
     * Switches the ASPxClientDashboard to the viewer mode.
     */
    SwitchToViewer(): void;
    /**
     * Switches the ASPxClientDashboard to the designer mode.
     */
    SwitchToDesigner(): void;
    /**
     * Gets the current working mode of the Web Dashboard.
     */
    GetWorkingMode(): string;
    IsDesignMode(): boolean;
    /**
     * Expands the specified dashboard item to the entire dashboard size to examine data in greater detail.
     * @param itemName A String object that is the dashboard item component name.
     */
    MaximizeDashboardItem(itemName: string): void;
    /**
     * Restores the item size if an item is expanded to the entire dashboard size (maximized).
     */
    RestoreDashboardItem(): void;
    /**
     * Returns the name of the maximized dashboard item.
     */
    GetMaximizedDashboardItemName(): string;
    /**
     * Gets the index of the selected page in the specified tab container. A Int32 object that is the tab page's index.
     * @param tabContainerName A String object that is the tab container's componentName property value.
     */
    GetSelectedTabPageIndex(tabContainerName: string): number;
    /**
     * Gets the selected page in the specified tab container. A String object that is the tab page's componentName property value.
     * @param tabContainerName A String object that is the tab container's componentName property value.
     */
    GetSelectedTabPage(tabContainerName: string): string;
    /**
     * Selects the specified tab page by its index in the specified tab container.
     * @param tabContainerName A String object that is the tab container's componentName property value.
     * @param index A Int32 object that is the tab page's index.
     */
    SetSelectedTabPageIndex(tabContainerName: string, index: number): void;
    /**
     * Selects the specified tab page by its component name.
     * @param tabPageName A String object that is the tab page's componentName property value.
     */
    SetSelectedTabPage(tabPageName: string): void;
    /**
     * Gets the identifier of the dashboard that is displayed in the ASPxClientDashboard.
     */
    GetDashboardId(): string;
    /**
     * Gets the current dashboard state.
     */
    GetDashboardState(): string;
    /**
     * Applies the dashboard state to the loaded dashboard.
     * @param dashboardState A JSON object that specifies the dashboard state.
     */
    SetDashboardState(dashboardState: any | string): void;
    /**
     * Loads a dashboard with the specified identifier from the dashboard storage.
     * @param dashboardId A string value that specifies the dashboard identifier.
     */
    LoadDashboard(dashboardId: string): void;
    /**
     * Saves a current dashboard to the dashboard storage.
     */
    SaveDashboard(): void;
    /**
     * Invokes the Dashboard Parameters dialog.
     */
    ShowParametersDialog(): void;
    /**
     * Closes the Dashboard Parameters dialog.
     */
    HideParametersDialog(): void;
    /**
     * Returns dashboard parameter settings and metadata.
     */
    GetParameters(): ASPxClientDashboardParameters;
    /**
     * Invokes the dialog that allows end-users to export the entire dashboard to the specified format.
     * @param format A string value that specifies the format. For instance, you can use 'PDF', 'Image', or 'Excel'.
     */
    ShowExportDashboardDialog(format: string): void;
    /**
     * Invokes the dialog that allows end-users to export the dashboard item to the specified format.
     * @param itemComponentName A string value that specifies the component name of the dashboard item to export.
     * @param format A string value that specifies the format. For instance, you can use 'PDF, 'Image' or 'Excel'. Note that some items (i.e., TextBoxDashboardItem or ImageDashboardItem) do not support exporting to the 'Excel' format.
     */
    ShowExportDashboardItemDialog(itemComponentName: string, format: string): void;
    /**
     * Hides the dialog that allows end-users to export the dashboard/dashboard item.
     */
    HideExportDialog(): void;
    /** @deprecated This method is obsolete now. Use the ASPxClientDashboard.GetPdfExportOptions(), ASPxClientDashboard.GetImageExportOptions() and ASPxClientDashboard.GetExcelExportOptions() methods instead. To learn more, see the following KB article: https://www.devexpress.com/Support/Center/Question/Details/T488764 */
    /**
     * Returns settings that specify parameters affecting how the dashboard is exported.
     */
    GetExportOptions(): ASPxClientDashboardExportOptions;
    /**
     * Allows you to obtain options related to exporting a dashboard/dashboard item to the PDF format.
     */
    GetPdfExportOptions(): DashboardPdfExportOptions;
    /**
     * Allows you to obtain options related to exporting a dashboard/dashboard item to an image.
     */
    GetImageExportOptions(): DashboardImageExportOptions;
    /**
     * Allows you to obtain options related to exporting a dashboard/dashboard item to the Excel format.
     */
    GetExcelExportOptions(): DashboardExcelExportOptions;
    /** @deprecated This method is obsolete now. Use the ASPxClientDashboard.SetPdfExportOptions(), ASPxClientDashboard.SetImageExportOptions() and ASPxClientDashboard.SetExcelExportOptions() methods instead. To learn more, see the following KB article: https://www.devexpress.com/Support/Center/Question/Details/T488764 */
    /**
     * Specifies settings that configures dashboard export parameters.
     * @param options A ASPxClientDashboardExportOptions object containing settings that specify parameters affecting how the dashboard is exported.
     */
    SetExportOptions(options: ASPxClientDashboardExportOptions): void;
    /**
     * Allows you to specify options related to exporting a dashboard/dashboard item to the PDF format.
     * @param options A DashboardPdfExportOptions object containing options related to exporting a dashboard/dashboard item to the PDF format.
     */
    SetPdfExportOptions(options: DashboardPdfExportOptions): void;
    /**
     * Allows you to specify options related to exporting a dashboard/dashboard item to an image.
     * @param options A DashboardImageExportOptions object containing options related to exporting a dashboard/dashboard item to an image.
     */
    SetImageExportOptions(options: DashboardImageExportOptions): void;
    /**
     * Allows you to specify options related to exporting a dashboard/dashboard item to the Excel format.
     * @param options A DashboardExcelExportOptions object containing options related to exporting a dashboard item to the Excel format.
     */
    SetExcelExportOptions(options: DashboardExcelExportOptions): void;
    /**
     * Exports a dashboard to a PDF file and writes it to the Response.
     */
    ExportToPdf(options?: DashboardPdfExportOptions | ASPxClientDashboardExportOptions, fileName?: string): void;
    /**
     * Exports a dashboard to an Image file and writes it to the Response.
     */
    ExportToImage(options?: DashboardImageExportOptions | ASPxClientDashboardExportOptions, fileName?: string): void;
    /**
     * Exports dashboard data to the specified file in Excel format.
     */
    ExportToExcel(options?: DashboardExcelExportOptions, fileName?: string): void;
    /**
     * Exports a dashboard item to a PDF file and writes it to the Response.
     * @param itemName A string that is the component name of the dashboard item to be exported.
     */
    ExportDashboardItemToPdf(itemName: string, options?: DashboardPdfExportOptions | ASPxClientDashboardExportOptions, fileName?: string): void;
    /**
     * Exports a dashboard item to an Image file and writes it to the Response.
     * @param itemName A string that is the component name of the dashboard item to be exported.
     */
    ExportDashboardItemToImage(itemName: string, options?: DashboardImageExportOptions | ASPxClientDashboardExportOptions, fileName?: string): void;
    /**
     * Exports a dashboard item to an Excel file and writes it to the Response.
     * @param itemName A string that is the component name of the dashboard item to be exported.
     */
    ExportDashboardItemToExcel(itemName: string, options?: DashboardExcelExportOptions | ASPxClientDashboardExportOptions, fileName?: string): void;
    /**
     * Returns whether master filtering  can be applied in the current state of the specified master filter item. true, if master filtering can be applied in the current state of the specified master filter item; otherwise, false.
     * @param itemName A string that specifies the component name of the master filter item.
     */
    CanSetMasterFilter(itemName: string): boolean;
    /**
     * Returns whether the specified master filter can be cleared in the current state. true, if the specified master filter can be cleared in the current state; otherwise, false.
     * @param itemName A string that specifies the component name of the master filter item.
     */
    CanClearMasterFilter(itemName: string): boolean;
    /**
     * Returns whether drill down is possible in the current state of the specified dashboard item. true, if drill down is possible in the current state of the specified dashboard item; otherwise, false.
     * @param itemName A string that specifies the component name of the dashboard item.
     */
    CanPerformDrillDown(itemName: string): boolean;
    /**
     * Returns whether drill up is possible in the current state of the specified dashboard item. true, if drill up is possible in the current state of the specified dashboard item; otherwise, false.
     * @param itemName A string that specifies the component name of the dashboard item.
     */
    CanPerformDrillUp(itemName: string): boolean;
    /**
     * Selects required elements by their values in the specified master filter item.
     * @param itemName A String that specifies the component name of the master filter item.
     * @param values Values that will be used to select elements in the master filter item.
     */
    SetMasterFilter(itemName: string, values: object[][] | ASPxClientDashboardItemDataAxisPointTuple[]): void;
    /**
     * Performs a drill-down into the required element by its value.
     * @param itemName A String that species the component name of the dashboard item.
     * @param value A value that will be used to perform a drill-down for the required element.
     */
    PerformDrillDown(itemName: string, value: any | ASPxClientDashboardItemDataAxisPointTuple): void;
    /**
     * Clears the specified master filter item.
     * @param itemName A String that specifies the component name of the master filter item.
     */
    ClearMasterFilter(itemName: string): void;
    /**
     * Performs a drill-up for the specified dashboard item.
     * @param itemName A String that specifies the component name of the dashboard item.
     */
    PerformDrillUp(itemName: string): void;
    /**
     * Returns axis point tuples identifying elements that can be used to perform drill-down in the specified dashboard item. An array of ASPxClientDashboardItemDataAxisPointTuple objects identifying elements that can be used to perform drill-down in the specified dashboard item.
     * @param itemName A String that is the component name of the dashboard item.
     */
    GetAvailableDrillDownValues(itemName: string): ASPxClientDashboardItemDataAxisPointTuple[];
    /**
     * Returns the axis point tuple identifying the current drill-down state. An ASPxClientDashboardItemDataAxisPointTuple object representing a set of axis points.
     * @param itemName A String that is the component name of the dashboard item.
     */
    GetCurrentDrillDownValues(itemName: string): ASPxClientDashboardItemDataAxisPointTuple;
    /**
     * Returns axis point tuples identifying elements that can be selected in the current state of the master filter item. An array of ASPxClientDashboardItemDataAxisPointTuple objects identifying elements that can be selected in the current state of the master filter item.
     * @param itemName A String that is the component name of the master filter item.
     */
    GetAvailableFilterValues(itemName: string): ASPxClientDashboardItemDataAxisPointTuple[];
    /**
     * Returns axis point tuples identifying currently selected elements in the master filter item. An array of ASPxClientDashboardItemDataAxisPointTuple objects identifying elements that can be selected in the current state of the master filter item.
     * @param itemName A String that is the component name of the master filter item.
     */
    GetCurrentFilterValues(itemName: string): ASPxClientDashboardItemDataAxisPointTuple[];
    /**
     * Returns currently selected elements in the master filter item. An array of ASPxClientDashboardItemDataAxisPointTuple objects that identify currently selected elements.
     * @param itemName A String that specifies a component name of the master filter item.
     */
    GetCurrentSelection(itemName: string): ASPxClientDashboardItemDataAxisPointTuple[];
    /**
     * Returns the client data for the specified dashboard item. An ASPxClientDashboardItemData object that represents multidimensional data visualized in the dashboard item.
     * @param itemName A string that specifies the component name of the dashboard item.
     */
    GetItemData(itemName: string): ASPxClientDashboardItemData;
    /**
     * Reloads data in the data sources.
     */
    ReloadData(): void;
    /**
     * Refreshes an entire dashboard displayed in the Web Dashboard control.
     */
    Refresh(itemName?: string | string[]): void;
    /**
     * Requests underlying data for the specified dashboard item.
     * @param itemName A string that specifies the component name of the dashboard item.
     * @param args A ASPxClientDashboardItemRequestUnderlyingDataParameters object containing parameters used to obtain the underlying data.
     * @param onCompleted A ASPxClientDashboardItemRequestUnderlyingDataCompleted object that references a method executed after the request is completed.
     */
    RequestUnderlyingData(itemName: string, args: ASPxClientDashboardItemRequestUnderlyingDataParameters, onCompleted: ASPxClientDashboardItemRequestUnderlyingDataCompleted): void;
    /**
     * Returns the currently selected range in the specified Range Filter or Date Filter dashboard item. A ASPxClientDashboardRangeFilterSelection object that is the selected range.
     * @param itemName A String value that specifies the component name of the Range Filter or Date Filter dashboard item.
     */
    GetCurrentRange(itemName: string): ASPxClientDashboardRangeFilterSelection;
    /**
     * Returns the visible range for the specified Range Filter or Date Filter dashboard item. A ASPxClientDashboardRangeFilterSelection object that is the visible range.
     * @param itemName A String value that specifies the component name of the Range Filter or Date Filter dashboard item.
     */
    GetEntireRange(itemName: string): ASPxClientDashboardRangeFilterSelection;
    /**
     * Selects the required range in the specified Range Filter or Date Filter dashboard item.
     * @param itemName A String that specifies the component name of the Range Filter or Date Filter dashboard item.
     * @param range A ASPxClientDashboardRangeFilterSelection object that specifies a range to be selected.
     */
    SetRange(itemName: string, range: ASPxClientDashboardRangeFilterSelection): void;
    /**
     * Selects a predefined range in the Range Filter or Date Filter dashboard item.
     * @param itemName A String value that specifies the component name of the Range Filter or Date Filter.
     * @param dateTimePeriodName A String value that specifies the predefined range name.
     */
    SetPredefinedRange(itemName: string, dateTimePeriodName: string): void;
    /**
     * Returns names of the predefined ranges available for the specified Range Filter. An array of string values that are names of the available predefined ranges.
     * @param itemName A string value that specifies the component name of the Range Filter dashboard item.
     */
    GetAvailablePredefinedRanges(itemName: string): string[];
    /**
     * Returns the name of the currently selected predefined range. A string value that is the name of the currently selected predefined range.
     * @param itemName A string value that specifies the component name of the Range Filter or Date Filter dashboard item.
     */
    GetCurrentPredefinedRange(itemName: string): string;
    /**
     * Fires the ItemCaptionToolbarUpdated event for the specified item.
     * @param itemName A dashboard item name for which the event is fired.
     */
    UpdateItemCaptionToolbar(itemName: string): void;
    /**
     * Fires the DashboardTitleToolbarUpdated event.
     */
    UpdateDashboardTitleToolbar(): void;
}
/**
 * References a method that handles the ASPxClientDashboard.DashboardStateChanged event.
 * @param source The event source.
 * @param e A ASPxClientDashboardStateChangedEventArgs object that contains event data.
 */
interface ASPxClientDashboardStateChangedEventHandler<Sender> { (source: Sender, e: ASPxClientDashboardStateChangedEventArgs): void; }
/**
 * Provides data for the ASPxClientDashboard.DashboardStateChanged event.
 */
declare class ASPxClientDashboardStateChangedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the current state of the dashboard.
     */
    DashboardState: string;
}
/**
 * References a method that handles the ASPxClientDashboard.DashboardChanged event.
 * @param source The event source.
 * @param e A ASPxClientDashboardChangedEventArgs object that contains event data.
 */
interface ASPxClientDashboardChangedEventHandler<Sender> { (source: Sender, e: ASPxClientDashboardChangedEventArgs): void; }
/**
 * Provides data for the ASPxClientDashboard.DashboardChanged event.
 */
declare class ASPxClientDashboardChangedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the identifier of a newly opened dashboard.
     */
    DashboardId: string;
}
/**
 * References a method that handles the ASPxClientDashboard.DashboardInitialized event.
 * @param source The event source.
 * @param e A ASPxClientDashboardInitializedEventArgs object that contains event data.
 */
interface ASPxClientDashboardInitializedEventHandler<Sender> { (source: Sender, e: ASPxClientDashboardInitializedEventArgs): void; }
/**
 * Provides data for the ASPxClientDashboard.DashboardInitialized event.
 */
declare class ASPxClientDashboardInitializedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the dashboard's unique name.
     */
    DashboardId: string;
}
/**
 * References a method that handles the ASPxClientDashboard.DashboardInitializing event.
 * @param source The event source.
 * @param e A ASPxClientDashboardInitializingEventArgs object that contains event data.
 */
interface ASPxClientDashboardInitializingEventHandler<Sender> { (source: Sender, e: ASPxClientDashboardInitializingEventArgs): void; }
/**
 * Provides data for the ASPxClientDashboard.DashboardInitializing event.
 */
declare class ASPxClientDashboardInitializingEventArgs extends ASPxClientEventArgs {
    /**
     * Gets a string value that is the dashboard identifier.
     */
    DashboardId: string;
    /**
     * Gets a model of the dashboard displayed in the control.
     */
    Dashboard: any;
    /**
     * Specifies a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished.
     */
    Ready: any;
}
/**
 * References a method that handles the ASPxClientDashboard.BeforeRender event.
 * @param source The event source.
 * @param e An ASPxClientEventArgs object that contains event data.
 */
interface ASPxClientDashboardBeforeRenderEventHandler<Sender> { (source: Sender, e: ASPxClientEventArgs): void; }
/**
 * Serves as the base class for classes that provide data for client-side events related to dashboard items.
 */
declare class ASPxClientDashboardItemEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the component name of the dashboard item.
     */
    ItemName: string;
    /**
     * Returns whether the specified value is null. true, if the specified value is null; otherwise, false.
     * @param value The specified value.
     */
    IsNullValue(value: any): boolean;
    /**
     * Returns whether the specified value is 'others'. true, if the specified value is 'others'; otherwise, false.
     * @param value The specified value.
     */
    IsOthersValue(value: any): boolean;
}
/**
 * References a method that handles the ASPxClientDashboard.ItemMasterFilterStateChanged event.
 * @param source The event source.
 * @param e An ASPxClientDashboardItemMasterFilterStateChangedEventArgs object that contains event data.
 */
interface ASPxClientDashboardItemMasterFilterStateChangedEventHandler<Sender> { (source: Sender, e: ASPxClientDashboardItemMasterFilterStateChangedEventArgs): void; }
/**
 * Provides data for the ASPxClientDashboard.ItemMasterFilterStateChanged event.
 */
declare class ASPxClientDashboardItemMasterFilterStateChangedEventArgs extends ASPxClientDashboardItemEventArgs {
    /**
     * Gets the currently selected values.
     */
    Values: object[][];
}
/**
 * References a method that handles the ASPxClientDashboard.ItemDrillDownStateChanged event.
 * @param source The event source.
 * @param e An ASPxClientDashboardItemDrillDownStateChangedEventArgs object that contains event data.
 */
interface ASPxClientDashboardItemDrillDownStateChangedEventHandler<Sender> { (source: Sender, e: ASPxClientDashboardItemDrillDownStateChangedEventArgs): void; }
/**
 * Provides data for the ASPxClientDashboard.ItemDrillDownStateChanged event.
 */
declare class ASPxClientDashboardItemDrillDownStateChangedEventArgs extends ASPxClientDashboardItemEventArgs {
    /**
     * Gets the drill-down action performed in the dashboard item.
     */
    Action: string;
    /**
     * Gets values from the current drill-down hierarchy.
     */
    Values: any[];
}
/**
 * References a method that handles the ASPxClientDashboard.ActionAvailabilityChanged event.
 * @param source The event source.
 * @param e A ASPxClientActionAvailabilityChangedEventArgs object that contains event data.
 */
interface ASPxClientActionAvailabilityChangedEventHandler<Sender> { (source: Sender, e: ASPxClientActionAvailabilityChangedEventArgs): void; }
/**
 * Provides data for the ASPxClientDashboard.ActionAvailabilityChanged event.
 */
declare class ASPxClientActionAvailabilityChangedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the component name of the dashboard item.
     */
    ItemName: string;
}
/**
 * References a method that handles the ASPxClientDashboard.DynamicLookUpValuesLoaded event.
 * @param source The event source.
 * @param e A ASPxClientDynamicLookUpValuesLoadedEventArgs object that contains event data.
 */
interface ASPxClientDynamicLookUpValuesLoadedEventHandler<Sender> { (source: Sender, e: ASPxClientDynamicLookUpValuesLoadedEventArgs): void; }
/**
 * Provides data for the ASPxClientDashboard.DynamicLookUpValuesLoaded event.
 */
declare class ASPxClientDynamicLookUpValuesLoadedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the dashboard parameter name whose values have been loaded.
     */
    ParameterName: string;
}
/**
 * References a method that handles the ASPxClientDashboard.ItemBeginUpdate event.
 * @param source The event source.
 * @param e A ASPxClientItemBeginUpdateEventArgs object that contains event data.
 */
interface ASPxClientItemBeginUpdateEventHandler<Sender> { (source: Sender, e: ASPxClientItemBeginUpdateEventArgs): void; }
/**
 * Provides data for the ASPxClientDashboard.ItemBeginUpdate event.
 */
declare class ASPxClientItemBeginUpdateEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the component name of the dashboard item.
     */
    ItemName: string;
}
/**
 * References a method that handles the ASPxClientDashboard.ItemEndUpdate event.
 * @param source The event source.
 * @param e A ASPxClientItemEndUpdateEventArgs object that contains event data.
 */
interface ASPxClientItemEndUpdateEventHandler<Sender> { (source: Sender, e: ASPxClientItemEndUpdateEventArgs): void; }
/**
 * Provides data for the ASPxClientDashboard.ItemEndUpdate event.
 */
declare class ASPxClientItemEndUpdateEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the component name of the dashboard item.
     */
    ItemName: string;
}
/**
 * References a method that handles the ASPxClientDashboard.DashboardBeginUpdate event.
 * @param source The event source.
 * @param e A ASPxClientDashboardBeginUpdateEventArgs object that contains event data.
 */
interface ASPxClientDashboardBeginUpdateEventHandler<Sender> { (source: Sender, e: ASPxClientDashboardBeginUpdateEventArgs): void; }
/**
 * Provides data for the ASPxClientDashboard.DashboardBeginUpdate event.
 */
declare class ASPxClientDashboardBeginUpdateEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the identifier of the dashboard for which the event was raised.
     */
    DashboardId: string;
}
/**
 * References a method that handles the ASPxClientDashboard.DashboardEndUpdate event.
 * @param source The event source.
 * @param e An ASPxClientDashboardEndUpdateEventArgs object that contains event data.
 */
interface ASPxClientDashboardEndUpdateEventHandler<Sender> { (source: Sender, e: ASPxClientDashboardEndUpdateEventArgs): void; }
/**
 * Provides data for the ASPxClientDashboard.DashboardEndUpdate event.
 */
declare class ASPxClientDashboardEndUpdateEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the identifier of the dashboard for which the event was raised.
     */
    DashboardId: string;
}
/**
 * References a method that handles the ASPxClientDashboard.SelectedTabPageChanged event.
 * @param source The event source.
 * @param e A ASPxClientSelectedTabPageChangedEventArgs object that contains event data.
 */
interface ASPxClientSelectedTabPageChangedEventHandler<Sender> { (source: Sender, e: ASPxClientSelectedTabPageChangedEventArgs): void; }
/**
 * Provides data for the ASPxClientDashboard.SelectedTabPageChanged event.
 */
declare class ASPxClientSelectedTabPageChangedEventArgs extends ASPxClientEventArgs {
    /**
     * Gets the name of the tab container that contains the selected tab page.
     */
    TabContainerName: string;
    /**
     * Gets the tab page that is selected.
     */
    SelectedPage: string;
    /**
     * Gets the tab page that was selected.
     */
    PreviousPage: string;
}
interface ASPxClientCustomizeDataSourceWizardEventHandler<Sender> { (source: Sender, e: ASPxClientCustomizeDataSourceWizardEventArgs): void; }
declare class ASPxClientCustomizeDataSourceWizardEventArgs extends ASPxClientEventArgs {
    Type: string;
    Wizard: any;
}
/**
 * Represents a client-side equivalent of the BootstrapAccordion control.
 */
declare class BootstrapClientAccordion extends ASPxClientNavBar {
    /**
     * Returns a group specified by its index. A BootstrapClientAccordionGroup object representing the group located at the specified index within the Accordion's BootstrapAccordion.Groups collection.
     * @param index An integer value specifying the zero-based index of the group object to retrieve.
     */
    GetGroup(index: number): BootstrapClientAccordionGroup;
    /**
     * Returns a group specified by its name. A BootstrapAccordionGroup object that represents the group with the specified name.
     * @param name A string value specifying the name of the group.
     */
    GetGroupByName(name: string): BootstrapClientAccordionGroup;
    /**
     * Returns the Accordion control's active group.
     */
    GetActiveGroup(): BootstrapClientAccordionGroup;
    /**
     * Makes the specified group active.
     * @param group A BootstrapClientAccordionGroup object that specifies the active group.
     */
    SetActiveGroup(group: BootstrapClientAccordionGroup): void;
    /**
     * Returns an item specified by its name. A BootstrapClientAccordionItem object that represents the item with the specified name.
     * @param name A string value specifying the name of the item.
     */
    GetItemByName(name: string): BootstrapClientAccordionItem;
    /**
     * Returns the selected item within the Accordion control.
     */
    GetSelectedItem(): BootstrapClientAccordionItem;
    /**
     * Selects the specified item within the Accordion control on the client side.
     * @param item A BootstrapClientAccordionItem object specifying the item to select.
     */
    SetSelectedItem(item: BootstrapClientAccordionItem): void;
}
/**
 * Represents a client-side equivalent of the Accordion's BootstrapAccordionGroup object.
 */
declare class BootstrapClientAccordionGroup extends ASPxClientNavBarGroup {
    /**
     * Returns the group's item specified by its index. A BootstrapClientAccordionItem object representing the item located at the specified index within the current group.
     * @param index An integer value specifying the zero-based index of the item to be retrieved.
     */
    GetItem(index: number): BootstrapClientAccordionItem;
    /**
     * Returns a group item specified by its name. A BootstrapClientAccordionItem object that represents the item with the specified name.
     * @param name A string value specifying the name of the item.
     */
    GetItemByName(name: string): BootstrapClientAccordionItem;
    /**
     * Gets the BootstrapClientAccordion object to which the current group belongs.
     */
    navBar: BootstrapClientAccordion;
    /**
     * Gets the text displayed within an accordion group header badge.
     */
    GetHeaderBadgeText(): string;
    /**
     * Sets the text displayed within an accordion group header badge.
     * @param text A String specifying the badge text.
     */
    SetHeaderBadgeText(text: string): void;
    /**
     * Gets the CSS class of the icon displayed within an accordion group header badge.
     */
    GetHeaderBadgeIconCssClass(): string;
    /**
     * Sets the CSS class of the icon displayed within an accordion group header badge.
     * @param cssClass A String containing the name of a CSS class.
     */
    SetHeaderBadgeIconCssClass(cssClass: string): void;
}
/**
 * Represents a client-side equivalent of the Accordion's BootstrapAccordionItem object.
 */
declare class BootstrapClientAccordionItem extends ASPxClientNavBarItem {
    /**
     * Gets the BootstrapClientAccordion object to which the current item belongs.
     */
    navBar: BootstrapClientAccordion;
    /**
     * Gets the group to which the current item belongs.
     */
    group: BootstrapClientAccordionGroup;
    /**
     * Gets the text displayed within the accordion item badge.
     */
    GetBadgeText(): string;
    /**
     * Sets the text displayed within the accordion item badge.
     * @param text A String specifying the badge text.
     */
    SetBadgeText(text: string): void;
    /**
     * Gets the CSS class of the icon displayed within the accordion item badge.
     */
    GetBadgeIconCssClass(): string;
    /**
     * Sets the CSS class of the icon displayed within the accordion item badge.
     * @param cssClass A string containing the name of a CSS class.
     */
    SetBadgeIconCssClass(cssClass: string): void;
    /** @deprecated Use the GetIconCssClass method instead. */
    /**
     * Specifies the URL which points to the image displayed within the item.
     */
    GetImageUrl(): string;
    /** @deprecated Use the SetIconCssClass method instead. */
    /**
     * Specifies the URL which points to the image displayed within the item.
     */
    SetImageUrl(value: string): void;
    /**
     * Gets the CSS class of the icon displayed by the Accordion item.
     */
    GetIconCssClass(): string;
    /**
     * Sets the CSS class of the icon displayed by the Accordion item.
     * @param cssClass A string containing the name of a CSS class.
     */
    SetIconCssClass(cssClass: string): void;
}
/**
 * A method that will handle the Accordion control's client events concerning manipulations with an item.
 * @param source An object representing the event source. Identifies the BootstrapClientAccordion control that raised the event.
 * @param e An BootstrapClientAccordionItemEventArgs object that contains event data.
 */
interface BootstrapClientAccordionItemEventHandler<Sender> { (source: Sender, e: BootstrapClientAccordionItemEventArgs): void; }
/**
 * Provides data for events related to manipulations on items.
 */
declare class BootstrapClientAccordionItemEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Initializes a new object of the BootstrapClientAccordionItemEventArgs type with the specified settings.
     * @param processOnServer true to process the event on the server side; false to completely handle it on the client side.
     * @param item An BootstrapClientAccordionItem object that represents an item related to the event.
     * @param htmlElement An HTML object that contains the processed navbar item.
     * @param htmlEvent A DHTML event object that relates to the processed event.
     */
    constructor(processOnServer: boolean, item: BootstrapClientAccordionItem, htmlElement: any, htmlEvent: any);
    /**
     * Gets the item object related to the event.
     */
    item: BootstrapClientAccordionItem;
    /**
     * Gets an HTML object that contains the processed Accordion item.
     */
    htmlElement: any;
    /**
     * Gets a DHTML event object that relates to the processed event.
     */
    htmlEvent: any;
}
/**
 * A method that will handle the Accordion control's client events concerning manipulations with a group.
 * @param source An object representing the event source. Identifies the BootstrapClientAccordion control that raised the event.
 * @param e An BootstrapClientAccordionGroupEventArgs object that contains event data.
 */
interface BootstrapClientAccordionGroupEventHandler<Sender> { (source: Sender, e: BootstrapClientAccordionGroupEventArgs): void; }
/**
 * Provides data for events related to manipulations on groups.
 */
declare class BootstrapClientAccordionGroupEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new object of the BootstrapClientAccordionGroupEventArgs type with the specified value.
     * @param group An BootstrapAccordionGroup object representing the group related to the event.
     */
    constructor(group: BootstrapClientAccordionGroup);
    /**
     * Gets the group object related to the event.
     */
    group: BootstrapClientAccordionGroup;
}
/**
 * A method that will handle the Accordion control's cancelable client events concerning manipulations with a group.
 * @param source An object representing the event source. Identifies the BootstrapClientAccordion control that raised the event.
 * @param e An BootstrapClientAccordionGroupCancelEventArgs object that contains event data.
 */
interface BootstrapClientAccordionGroupCancelEventHandler<Sender> { (source: Sender, e: BootstrapClientAccordionGroupCancelEventArgs): void; }
/**
 * Provides data for events related to manipulations on accordion groups.
 */
declare class BootstrapClientAccordionGroupCancelEventArgs extends ASPxClientProcessingModeCancelEventArgs {
    constructor(processOnServer: boolean, group: BootstrapClientAccordionGroup);
    /**
     * Gets the group object related to the event.
     */
    group: BootstrapClientAccordionGroup;
}
/**
 * A method that will handle the Accordion control's client events concerning clicks on groups.
 * @param source An object representing the event source. Identifies the BootstrapClientAccordion control that raised the event.
 * @param e An BootstrapClientAccordionGroupClickEventArgs object that contains event data.
 */
interface BootstrapClientAccordionGroupClickEventHandler<Sender> { (source: Sender, e: BootstrapClientAccordionGroupClickEventArgs): void; }
/**
 * Provides data for events related to clicking on the control's group headers.
 */
declare class BootstrapClientAccordionGroupClickEventArgs extends BootstrapClientAccordionGroupCancelEventArgs {
    /**
     * Initializes a new object of the BootstrapClientAccordionGroupClickEventArgs type with the specified settings.
     * @param processOnServer true to process the event on the server side; false to completely handle it on the client side.
     * @param group An BootstrapClientAccordionGroup object that represents a group related to the event.
     * @param htmlElement An HTML object that contains the processed accordion group.
     */
    constructor(processOnServer: boolean, group: BootstrapClientAccordionGroup, htmlElement: any, htmlEvent: any);
    /**
     * Gets an HTML object that contains the processed Accordion group.
     */
    htmlElement: any;
    /**
     * Gets a DHTML event object that relates to the processed event.
     */
    htmlEvent: any;
}
/**
 * Represents the client-side equivalent of the BootstrapBinaryImage control.
 */
declare class BootstrapClientBinaryImage extends ASPxClientBinaryImage {
}
/**
 * Represents a client-side equivalent of the BootstrapButton control.
 */
declare class BootstrapClientButton extends ASPxClientButton {
    /**
     * Returns the text displayed within the button.
     */
    GetText(): string;
    /**
     * Sets the text to be displayed within the button.
     * @param value A string value specifying the text to be displayed within the button.
     */
    SetText(value: string): void;
    /**
     * Gets the text displayed within the button badge.
     */
    GetBadgeText(): string;
    /**
     * Sets the text displayed within the button badge.
     * @param text A String specifying the badge text.
     */
    SetBadgeText(text: string): void;
    /**
     * Gets the CSS class of the icon displayed within the button badge.
     */
    GetBadgeIconCssClass(): string;
    /**
     * Sets the CSS class of the icon displayed within the button badge.
     * @param cssClass A string containing the name of a CSS class.
     */
    SetBadgeIconCssClass(cssClass: string): void;
}
/**
 * Represents a client-side equivalent of the BootstrapCalendar control.
 */
declare class BootstrapClientCalendar extends ASPxClientCalendar {
}
/**
 * Represents a client-side equivalent of the BootstrapCallbackPanel control.
 */
declare class BootstrapClientCallbackPanel extends ASPxClientControl {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<BootstrapClientCallbackPanel>>;
    /**
     * Occurs on the client side after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<BootstrapClientCallbackPanel>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by the BootstrapClientCallbackPanel.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<BootstrapClientCallbackPanel>>;
    /**
     * Sends a callback to the server and generates the server-side BootstrapCallbackPanel.Callback event, passing it the specified argument.
     * @param parameter A string value that represents any information that needs to be sent to the server-side BootstrapCallbackPanel.Callback event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(parameter: string, onSuccess?: (arg: string) => void): void;
    /**
     * Returns the HTML code that specifies the contents of the control's window.
     */
    GetContentHtml(): string;
    /**
     * Sets the HTML markup specifying the contents of the control's window.
     * @param html A string value that specifies the HTML markup.
     */
    SetContentHtml(html: string): void;
    /**
     * Sets a value specifying whether the callback panel is enabled.
     * @param enabled true, to enable the callback panel; false to disable it.
     */
    SetEnabled(enabled: boolean): void;
    /**
     * Returns a value specifying whether a callback panel is enabled.
     */
    GetEnabled(): boolean;
}
/**
 * Represents the client BootstrapCardView.
 */
declare class BootstrapClientCardView extends ASPxClientCardView {
    GetEditFormLayout(): ASPxClientFormLayout;
    GetEditFormLayoutItemByColumn(column: ASPxClientCardViewColumn | number | string): ASPxClientLayoutItem;
    GetEditFormLayoutItemOrGroup(name: string): ASPxClientLayoutItem;
}
/**
 * Represents a client-side equivalent of the BootstrapCheckBox control.
 */
declare class BootstrapClientCheckBox extends ASPxClientEdit {
    /**
     * Occurs on the client side when the editor's checked state has been changed.
     */
    CheckedChanged: ASPxClientEvent<ASPxClientProcessingModeEventHandler<BootstrapClientCheckBox>>;
    /**
     * Returns a value indicating whether the check box editor is checked.
     */
    GetChecked(): boolean;
    /**
     * Sets a value which specifies the checked status of the check box editor.
     * @param isChecked true if the check box editor is checked; otherwise, false.
     */
    SetChecked(isChecked: boolean): void;
    /**
     * Returns the text displayed within the editor.
     */
    GetText(): string;
    /**
     * Returns a value which specifies a check box checked state.
     */
    GetCheckState(): string;
    /**
     * Sets a value specifying the state of a check box.
     * @param checkState A string value matches one of the CheckState enumeration values.
     */
    SetCheckState(checkState: string): void;
    /**
     * Sets the text to be displayed within the editor.
     * @param text A string value specifying the text to be displayed within the editor.
     */
    SetText(text: string): void;
}
/**
 * Represents a client-side equivalent of the BootstrapRadioButton control.
 */
declare class BootstrapClientRadioButton extends BootstrapClientCheckBox {
}
/**
 * Represents a client-side equivalent of the BootstrapColorEdit control.
 */
declare class BootstrapClientColorEdit extends ASPxClientColorEdit {
}
/**
 * Represents a client-side equivalent of the BootstrapComboBox control.
 */
declare class BootstrapClientComboBox extends ASPxClientComboBox {
    /**
     * Returns the combo box editor's selected item.
     */
    GetSelectedItem(): BootstrapClientListBoxItem;
    /**
     * Sets the list editor's selected item.
     * @param item A BootstrapClientListBoxItem object that specifies the item to select.
     */
    SetSelectedItem(item: BootstrapClientListBoxItem): void;
    /**
     * Returns an item specified by its index within the combo box editor's item collection. A BootstrapClientListBoxItem object representing the collection item found.
     * @param index An integer value specifying the zero-based index of the item to search for.
     */
    GetItem(index: number): BootstrapClientListBoxItem;
    /**
     * Returns a combo box item by its text. A BootstrapClientListBoxItem object that represents the combo box item. null if the item was not found.
     * @param text A string that specifies the item's text.
     */
    FindItemByText(text: string): BootstrapClientListBoxItem;
    /**
     * Returns a combo box item by its value. A BootstrapClientListBoxItem object that represents the combo box item. null if the item was not found.
     * @param value An object that specifies the item's value.
     */
    FindItemByValue(value: any): BootstrapClientListBoxItem;
    /**
     * Adds a new item to the editor, specifying the item's display text, associated value and displayed image, and returns the index of the added item. An integer value representing the position to which the new item was added.
     * @param value An object that represents the item's associated value.
     * @param iconCssClass A String value specifying the CSS class of the image displayed by the list item.
     */
    AddItem(texts: string[] | string, value?: any, iconCssClass?: string): number;
    /**
     * Inserts a new item specified by its display text, associated value and displayed image into the editor's item collection, at the position specified.
     * @param index An integer value that represents the index position.
     * @param value An object that represents the item's associated value.
     * @param iconCssClass A String value specifying the CSS class of the image displayed by the list item.
     */
    InsertItem(index: number, texts: string[] | string, value?: any, iconCssClass?: string): void;
    /**
     * Gets the text displayed within a Combo Box item badge. A String specifying the badge text.
     * @param index The index of a Combo Box item.
     */
    GetItemBadgeText(index: number): string;
    /**
     * Sets the text displayed within a Combo Box item badge.
     * @param index The index of a Combo Box item.
     * @param text A String specifying the badge text.
     */
    SetItemBadgeText(index: number, text: string): void;
    /**
     * Gets the CSS class of the icon displayed within a Combo Box item badge. A String containing the name of a CSS class.
     * @param index The index of a Combo Box item.
     */
    GetItemBadgeIconCssClass(index: number): string;
    /**
     * Sets the CSS class of the icon displayed within a Combo Box item badge.
     * @param index The index of a Combo Box item.
     * @param cssClass A String containing the name of a CSS class.
     */
    SetItemBadgeIconCssClass(index: number, cssClass: string): void;
}
/**
 * Represents a client-side equivalent of the BootstrapDateEdit control.
 */
declare class BootstrapClientDateEdit extends ASPxClientDateEdit {
    GetRangeLength(): number;
}
/**
 * Represents a client-side equivalent of the BootstrapChartBase class.
 */
declare class BootstrapClientChartBase extends BootstrapUIWidgetBase {
    /**
     * Fires when the Series and Points chart elements are ready to be accessed.
     */
    Done: ASPxClientEvent<BootstrapClientChartBaseDoneEventHandler<BootstrapClientChartBase>>;
    /**
     * Fires when an item on the chart legend is clicked.
     */
    LegendClick: ASPxClientEvent<BootstrapClientChartBaseLegendClickEventHandler<BootstrapClientChartBase>>;
    /**
     * Fires when a user clicks a series point.
     */
    PointClick: ASPxClientEvent<BootstrapClientChartBasePointClickEventHandler<BootstrapClientChartBase>>;
    /**
     * Fires when the hover state of a series point has been changed.
     */
    PointHoverChanged: ASPxClientEvent<BootstrapClientChartBasePointHoverChangedEventHandler<BootstrapClientChartBase>>;
    /**
     * Fires when the selection state of a series point has been changed.
     */
    PointSelectionChanged: ASPxClientEvent<BootstrapClientChartBasePointSelectionChangedEventHandler<BootstrapClientChartBase>>;
    /**
     * Fires when a point's tooltip becomes hidden.
     */
    TooltipHidden: ASPxClientEvent<BootstrapClientChartBaseTooltipHiddenEventHandler<BootstrapClientChartBase>>;
    /**
     * Fires when a point's tooltip appears.
     */
    TooltipShown: ASPxClientEvent<BootstrapClientChartBaseTooltipShownEventHandler<BootstrapClientChartBase>>;
    /**
     * Fires when a user clicks a label on the argument axis.
     */
    ArgumentAxisClick: ASPxClientEvent<BootstrapClientCoordinateSystemChartArgumentAxisClickEventHandler<BootstrapClientChartBase>>;
    /**
     * Fires when a user clicks a series.
     */
    SeriesClick: ASPxClientEvent<BootstrapClientCoordinateSystemChartSeriesClickEventHandler<BootstrapClientChartBase>>;
    /**
     * Fires when the hover state of a series has been changed.
     */
    SeriesHoverChanged: ASPxClientEvent<BootstrapClientCoordinateSystemChartSeriesHoverChangedEventHandler<BootstrapClientChartBase>>;
    /**
     * Fires when the selection state of a series has been changed.
     */
    SeriesSelectionChanged: ASPxClientEvent<BootstrapClientCoordinateSystemChartSeriesSelectionChangedEventHandler<BootstrapClientChartBase>>;
}
/**
 * Represents a client-side equivalent of the Chart control.
 */
declare class BootstrapClientChart extends BootstrapClientChartBase {
    /**
     * Fires when a chart zooming or scrolling begins.
     */
    ZoomStart: ASPxClientEvent<BootstrapClientChartZoomStartEventHandler<BootstrapClientChart>>;
    /**
     * Fires when a chart zooming or scrolling ends.
     */
    ZoomEnd: ASPxClientEvent<BootstrapClientChartZoomEndEventHandler<BootstrapClientChart>>;
}
/**
 * Represents a client-side equivalent of the BootstrapPolarChart control.
 */
declare class BootstrapClientPolarChart extends BootstrapClientChartBase {
}
/**
 * Represents a client-side equivalent of the BootstrapPieChart control.
 */
declare class BootstrapClientPieChart extends BootstrapClientChartBase {
}
/**
 * A method that will handle the BootstrapClientChartBase.Done event.
 * @param source The event source.
 * @param e A BootstrapUIWidgetEventArgsBase object that contains event data.
 */
interface BootstrapClientChartBaseDoneEventHandler<Sender> { (source: Sender, e: any): void; }
/**
 * A method that will handle the BootstrapClientChartBase.LegendClick event.
 * @param source The event source.
 * @param e An object that contains event data.
 */
interface BootstrapClientChartBaseLegendClickEventHandler<Sender> { (source: Sender, e: any): void; }
/**
 * A method that will handle the Invoke event.
 * @param source The event source.
 * @param e An object that contains event data.
 */
interface BootstrapClientCoordinateSystemChartArgumentAxisClickEventHandler<Sender> { (source: Sender, e: any): void; }
/**
 * A method that will handle the BootstrapClientChartBase.PointClick event.
 * @param source The event source.
 * @param e An object that contains event data.
 */
interface BootstrapClientChartBasePointClickEventHandler<Sender> { (source: Sender, e: any): void; }
/**
 * A method that will handle the BootstrapClientChartBase.PointHoverChanged event.
 * @param source The event source.
 * @param e An object that contains event data.
 */
interface BootstrapClientChartBasePointHoverChangedEventHandler<Sender> { (source: Sender, e: any): void; }
/**
 * A method that will handle the BootstrapClientChartBase.PointSelectionChanged event.
 * @param source The event source.
 * @param e An object that contains event data.
 */
interface BootstrapClientChartBasePointSelectionChangedEventHandler<Sender> { (source: Sender, e: any): void; }
/**
 * A method that will handle the BootstrapClientChartBase.TooltipHidden event.
 * @param source The event source.
 * @param e An object that contains event data.
 */
interface BootstrapClientChartBaseTooltipHiddenEventHandler<Sender> { (source: Sender, e: any): void; }
/**
 * A method that will handle the BootstrapClientChartBase.TooltipShown event.
 * @param source The event source.
 * @param e An object that contains event data.
 */
interface BootstrapClientChartBaseTooltipShownEventHandler<Sender> { (source: Sender, e: any): void; }
/**
 * A method that will handle the BootstrapClientChartBase.SeriesClick event.
 * @param source The event source.
 * @param e An object that contains event data.
 */
interface BootstrapClientCoordinateSystemChartSeriesClickEventHandler<Sender> { (source: Sender, e: any): void; }
/**
 * A method that will handle the BootstrapClientChartBase.SeriesHoverChanged event.
 * @param source The event source.
 * @param e An object that contains event data.
 */
interface BootstrapClientCoordinateSystemChartSeriesHoverChangedEventHandler<Sender> { (source: Sender, e: any): void; }
/**
 * A method that will handle the BootstrapClientChartBase.SeriesSelectionChanged event.
 * @param source The event source.
 * @param e An object that contains event data.
 */
interface BootstrapClientCoordinateSystemChartSeriesSelectionChangedEventHandler<Sender> { (source: Sender, e: any): void; }
/**
 * A method that will handle the BootstrapClientChart.ZoomStart event.
 * @param source The event source.
 * @param e A BootstrapUIWidgetEventArgsBase object that contains event data.
 */
interface BootstrapClientChartZoomStartEventHandler<Sender> { (source: Sender, e: any): void; }
/**
 * A method that will handle the BootstrapClientChart.ZoomEnd event.
 * @param source The event source.
 * @param e An object that contains event data.
 */
interface BootstrapClientChartZoomEndEventHandler<Sender> { (source: Sender, e: any): void; }
/**
 * Represents a client-side equivalent of the BootstrapRangeSelector control.
 */
declare class BootstrapClientRangeSelector extends BootstrapUIWidgetBase {
    /**
     * Fires after the selected range has been changed by moving one of the sliders.
     */
    ValueChanged: ASPxClientEvent<BootstrapClientRangeSelectorValueChangedEventHandler<BootstrapClientRangeSelector>>;
    /**
     * Gets the Range Selector's selected value range.
     */
    GetValue(): any[];
    /**
     * Gets the Range Selector's selected value range.
     * @param value An array containing the value range.
     */
    SetValue(value: any[]): void;
}
/**
 * A method that will handle the BootstrapClientRangeSelector.ValueChanged event.
 * @param source The event source.
 * @param e An object that contains event data.
 */
interface BootstrapClientRangeSelectorValueChangedEventHandler<Sender> { (source: Sender, e: any): void; }
/**
 * Represents a client-side equivalent of the BootstrapSparkline control.
 */
declare class BootstrapClientSparkline extends BootstrapUIWidgetBase {
    TooltipHidden: ASPxClientEvent<BootstrapClientSparklineTooltipHiddenEventHandler<BootstrapClientSparkline>>;
    TooltipShown: ASPxClientEvent<BootstrapClientSparklineTooltipShownEventHandler<BootstrapClientSparkline>>;
    ExportTo(fileName: string, format: string): void;
    Print(): void;
}
interface BootstrapClientSparklineTooltipHiddenEventHandler<Sender> { (source: Sender, e: any): void; }
interface BootstrapClientSparklineTooltipShownEventHandler<Sender> { (source: Sender, e: any): void; }
/**
 * Represents a client-side equivalent of the BootstrapWebClientUIWidget class.
 */
declare class BootstrapUIWidgetBase extends ASPxClientControl {
    /**
     * Fires once, after the widget is initialized.
     */
    Init: ASPxClientEvent<BootstrapUIWidgetInitializedEventHandler<BootstrapUIWidgetBase>>;
    /**
     * Fires when the widget has finished drawing itself.
     */
    Drawn: ASPxClientEvent<BootstrapUIWidgetDrawnEventHandler<BootstrapUIWidgetBase>>;
    /**
     * Fires when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only.
     */
    Disposing: ASPxClientEvent<BootstrapUIWidgetDisposingEventHandler<BootstrapUIWidgetBase>>;
    /**
     * Fires after an option of the widget has been changed.
     */
    OptionChanged: ASPxClientEvent<BootstrapUIWidgetOptionChangedEventHandler<BootstrapUIWidgetBase>>;
    /**
     * Fires before data from the widget is exported.
     */
    Exporting: ASPxClientEvent<BootstrapUIWidgetExportingEventHandler<BootstrapUIWidgetBase>>;
    /**
     * Fires after data from the widget is exported.
     */
    Exported: ASPxClientEvent<BootstrapUIWidgetExportedEventHandler<BootstrapUIWidgetBase>>;
    /**
     * Raised before a file with exported data is saved on the user's local storage.
     */
    FileSaving: ASPxClientEvent<BootstrapUIWidgetFileSavingEventHandler<BootstrapUIWidgetBase>>;
    /**
     * Fires when an error or warning appears in the widget.
     */
    IncidentOccurred: ASPxClientEvent<BootstrapUIWidgetErrorEventHandler<BootstrapUIWidgetBase>>;
    SetEnabled(enabled: boolean): void;
    GetEnabled(): boolean;
    /**
     * Gets an instance of the widget.
     */
    GetInstance(): any;
    /**
     * Sets the widget's options to values specified in the passed object.
     * @param options An object containing key-value pairs specifying new option values.
     */
    SetOptions(options: any): void;
    /**
     * Sets the client data source instance.
     * @param dataSource A DevExtreme <a href="https://js.devexpress.com/DevExtreme/ApiReference/Data_Layer/DataSource/">DataSource</a> object.
     */
    SetDataSource(dataSource: any): void;
    /**
     * Gets the client data source instance.
     */
    GetDataSource(): any;
    /**
     * Exports the widget.
     * @param format A string specifying the target file format.
     * @param fileName A string specifying the file name.
     */
    ExportTo(format: string, fileName: string): void;
    /**
     * Invokes the browser's Print window to print the widget's contents.
     */
    Print(): void;
}
/**
 * A method that will handle the BootstrapUIWidgetBase.Init event.
 * @param source The event source.
 * @param e A BootstrapUIWidgetEventArgsBase object that contains event data.
 */
interface BootstrapUIWidgetInitializedEventHandler<Sender> { (source: Sender, e: any): void; }
/**
 * A method that will handle the BootstrapUIWidgetBase.Drawn event.
 * @param source The event source.
 * @param e A BootstrapUIWidgetEventArgsBase object that contains event data.
 */
interface BootstrapUIWidgetDrawnEventHandler<Sender> { (source: Sender, e: any): void; }
/**
 * A method that will handle the BootstrapUIWidgetBase.Disposing event.
 * @param source The event source.
 * @param e A BootstrapUIWidgetEventArgsBase object that contains event data.
 */
interface BootstrapUIWidgetDisposingEventHandler<Sender> { (source: Sender, e: any): void; }
/**
 * A method that will handle the BootstrapUIWidgetBase.Exported event.
 * @param source The event source.
 * @param e A BootstrapUIWidgetEventArgsBase object that contains event data.
 */
interface BootstrapUIWidgetExportedEventHandler<Sender> { (source: Sender, e: any): void; }
/**
 * Provides base data for the client-side events.
 */
declare class BootstrapUIWidgetEventArgsBase extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the BootstrapUIWidgetEventArgsBase class with the specified widget and its container.
     * @param component The widget instance.
     * @param element The widget's container.
     */
    constructor(component: any, element: any);
    /**
     * The widget instance.
     */
    component: any;
    /**
     * The widget's container.
     */
    element: any;
}
/**
 * A method that will handle the BootstrapUIWidgetBase.Exporting event.
 * @param source The event source.
 * @param e An object that contains event data.
 */
interface BootstrapUIWidgetExportingEventHandler<Sender> { (source: Sender, e: any): void; }
/**
 * A method that will handle the BootstrapUIWidgetBase.FileSaving event.
 * @param source The event source.
 * @param e An object that contains event data.
 */
interface BootstrapUIWidgetFileSavingEventHandler<Sender> { (source: Sender, e: any): void; }
/**
 * A method that will handle the BootstrapUIWidgetBase.OptionChanged event.
 * @param source The event source.
 * @param e An object that contains event data.
 */
interface BootstrapUIWidgetOptionChangedEventHandler<Sender> { (source: Sender, e: any): void; }
/**
 * A method that will handle the BootstrapUIWidgetBase.IncidentOccurred event.
 * @param source The event source.
 * @param e An object that contains event data.
 */
interface BootstrapUIWidgetErrorEventHandler<Sender> { (source: Sender, e: any): void; }
/**
 * Represents a client-side equivalent of the BootstrapDropDownEdit control.
 */
declare class BootstrapClientDropDownEdit extends ASPxClientDropDownEdit {
}
/**
 * Represents a client-side equivalent of the BootstrapFileManager control.
 */
declare class BootstrapClientFileManager extends ASPxClientFileManager {
}
/**
 * Represents a client-side equivalent of the Floating Action Button's BootstrapFABActionItem object.
 */
declare class BootstrapClientFABActionItem extends ASPxClientFABActionItem {
    GetIconCssClass(): string;
    SetIconCssClass(cssClass: string): void;
    GetBadgeText(): string;
    SetBadgeText(text: string): void;
    GetBadgeCssClass(): string;
    SetBadgeCssClass(cssClass: string): void;
    GetBadgeIconCssClass(): string;
    SetBadgeIconCssClass(cssClass: string): void;
}
/**
 * Represents a client-side equivalent of the Floating Action Button's BootstrapFABAction object.
 */
declare class BootstrapClientFABAction extends ASPxClientFABAction {
    GetActionItem(index: number): BootstrapClientFABActionItem;
    GetActionItemByName(name: string): BootstrapClientFABActionItem;
    GetActionIconCssClass(): string;
    SetActionIconCssClass(cssClass: string): void;
    GetExpandIconCssClass(): string;
    SetExpandIconCssClass(cssClass: string): void;
    GetCollapseIconCssClass(): string;
    SetCollapseIconCssClass(cssClass: string): void;
    GetBadgeText(): string;
    SetBadgeText(text: string): void;
    GetBadgeCssClass(): string;
    SetBadgeCssClass(cssClass: string): void;
    GetBadgeIconCssClass(): string;
    SetBadgeIconCssClass(cssClass: string): void;
}
/**
 * Represents a client-side equivalent of the BootstrapFloatingActionButton control.
 */
declare class BootstrapClientFloatingActionButton extends ASPxClientFloatingActionButton {
    SetContainerCssSelector(selector: string): void;
}
interface BootstrapClientFloatingActionButtonContextChangingEventHandler<Sender> { (source: Sender, e: BootstrapClientFloatingActionButtonContextChangingEventArgs): void; }
declare class BootstrapClientFloatingActionButtonContextChangingEventArgs extends ASPxClientFloatingActionButtonContextChangingEventArgs {
    constructor(action: BootstrapClientFABAction);
    action: BootstrapClientFABAction;
}
/**
 * Represents a client-side equivalent of the BootstrapFormLayout control.
 */
declare class BootstrapClientFormLayout extends ASPxClientFormLayout {
}
/**
 * Represents the client BootstrapGridView.
 */
declare class BootstrapClientGridView extends ASPxClientGridView {
    GetEditFormLayout(): ASPxClientFormLayout;
    GetEditFormLayoutItemByColumn(column: ASPxClientGridViewColumn | number | string): ASPxClientLayoutItem;
    GetEditFormLayoutItemOrGroup(name: string): ASPxClientLayoutItem;
}
/**
 * Represents a client-side equivalent of the BootstrapHyperLink control.
 */
declare class BootstrapClientHyperLink extends ASPxClientHyperLink {
    /**
     * Gets the text displayed within the hyperlink badge.
     */
    GetBadgeText(): string;
    /**
     * Sets the text displayed within the hyperlink badge.
     * @param text A String specifying the badge text.
     */
    SetBadgeText(text: string): void;
    /**
     * Gets the CSS class of the icon displayed within the hyperlink badge.
     */
    GetBadgeIconCssClass(): string;
    /**
     * Sets the CSS class of the icon displayed within the hyperlink badge.
     * @param cssClass A string containing the name of a CSS class.
     */
    SetBadgeIconCssClass(cssClass: string): void;
}
/**
 * Represents the client-side equivalent of the BootstrapImage control.
 */
declare class BootstrapClientImage extends ASPxClientImage {
}
/**
 * Represents the client-side equivalent of the BootstrapListEditItem object.
 */
declare class BootstrapClientListBoxItem extends ASPxClientListEditItem {
    /** @deprecated Use the iconCssClass property instead. */
    /**
     * This member is not in effect for this class. It is overridden only for the purpose of preventing it from appearing in Microsoft Visual Studio designer tools.
     */
    imageUrl: string;
    /**
     * Gets the CSS class of the icon displayed by the list box item.
     */
    iconCssClass: string;
    /** @deprecated Use the GetFieldText method instead. */
    GetColumnText(columnIndex: number | string): string;
    /**
     * Returns the list item's text value that corresponds to a data field specified by its index. A string value representing the list item's text value that corresponds to the specified data field.
     * @param fieldIndex An integer value that specifies the field's index within the editor's Fields collection.
     */
    GetFieldText(fieldIndex: number | string): string;
}
/**
 * Represents a client-side equivalent of the BootstrapListBox control.
 */
declare class BootstrapClientListBox extends ASPxClientListBox {
    /**
     * Returns the list editor's selected item.
     */
    GetSelectedItem(): BootstrapClientListBoxItem;
    /**
     * Sets the list editor's selected item.
     * @param item A BootstrapClientListBoxItem object that specifies the item to select.
     */
    SetSelectedItem(item: BootstrapClientListBoxItem): void;
    /**
     * Returns an item specified by its index within the list box editor's item collection. A BootstrapClientListBoxItem object representing the collection item found.
     * @param index An integer value specifying the zero-based index of the item to search for.
     */
    GetItem(index: number): BootstrapClientListBoxItem;
    /**
     * Returns an array of the list editor's selected items.
     */
    GetSelectedItems(): BootstrapClientListBoxItem[];
    /**
     * Selects the specified items within a list box.
     * @param items An array of BootstrapClientListBoxItem objects that represent the items.
     */
    SelectItems(items: BootstrapClientListBoxItem[]): void;
    /**
     * Unselects an array of the specified list box items.
     * @param items An array of BootstrapClientListBoxItem objects that represent the items.
     */
    UnselectItems(items: BootstrapClientListBoxItem[]): void;
    /**
     * Returns a list box item by its text. A BootstrapClientListBoxItem object that represents the list box item. null if the item was not found.
     * @param text A string that specifies the item's text.
     */
    FindItemByText(text: string): BootstrapClientListBoxItem;
    /**
     * Returns a list box item by its value. A BootstrapClientListBoxItem object that represents the list box item. null (Nothing in Visual Basic) if the item was not found.
     * @param value An object that specifies the item's value.
     */
    FindItemByValue(value: any): BootstrapClientListBoxItem;
    /**
     * Adds a new item to the editor, specifying the item's display text, associated value and displayed image, and returns the index of the added item. An integer value representing the position to which the new item was added.
     * @param value An object that represents the item's associated value.
     * @param iconCssClass A String value specifying the CSS class of the image displayed by the list item.
     */
    AddItem(texts: string[] | string, value?: any, iconCssClass?: string): number;
    /**
     * Inserts a new item into the control's items collection at the specified index.
     * @param index An integer value that represents the index position.
     * @param texts An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding field within the editor's BootstrapListBox.Fields collection.
     * @param value An object that represents the item's associated value.
     * @param iconCssClass A String value specifying the CSS class of the image displayed by the list item.
     */
    InsertItem(index: number, texts: string[] | string, value?: any, iconCssClass?: string): void;
    /**
     * Gets the text displayed within a List Box item badge. A String specifying the badge text.
     * @param index The index of a List Box item.
     */
    GetItemBadgeText(index: number): string;
    /**
     * Sets the text displayed within a List Box item badge.
     * @param index The index of a List Box item.
     * @param text A String specifying the badge text.
     */
    SetItemBadgeText(index: number, text: string): void;
    /**
     * Gets the CSS class of the icon displayed within a List Box item badge. A String containing the name of a CSS class.
     * @param index The index of a List Box item.
     */
    GetItemBadgeIconCssClass(index: number): string;
    /**
     * Sets the CSS class of the icon displayed within a List Box item badge.
     * @param index The index of a List Box item.
     * @param cssClass A String containing the name of a CSS class.
     */
    SetItemBadgeIconCssClass(index: number, cssClass: string): void;
}
/**
 * Represents a client-side equivalent of the BootstrapCheckBoxList control.
 */
declare class BootstrapClientCheckBoxList extends ASPxClientCheckBoxList {
}
/**
 * Represents a client-side equivalent of the BootstrapRadioButtonList control.
 */
declare class BootstrapClientRadioButtonList extends ASPxClientRadioButtonList {
}
/**
 * Represents a client-side equivalent of the menu's BootstrapMenuItem object.
 */
declare class BootstrapClientMenuItem extends ASPxClientMenuItem {
    /**
     * Returns the current menu item's immediate subitem specified by its index. A BootstrapClientMenuItem object representing the menu item's immediate subitem located at the specified index within the menu item's BootstrapMenuItem.Items collection.
     * @param index An integer value specifying the zero-based index of the submenu item to be retrieved.
     */
    GetItem(index: number): BootstrapClientMenuItem;
    /**
     * Returns the current menu item's subitem specified by its name. A BootstrapClientMenuItem object that represents the current menu item's subitem with the specified name.
     * @param name A string value specifying the name of the menu item.
     */
    GetItemByName(name: string): BootstrapClientMenuItem;
    /**
     * Gets the immediate parent item to which the current item belongs.
     */
    parent: BootstrapClientMenuItem;
    /**
     * Gets the text displayed within the menu item badge.
     */
    GetBadgeText(): string;
    /**
     * Sets the text displayed within the menu item badge.
     * @param text A String specifying the badge text.
     */
    SetBadgeText(text: string): void;
    /**
     * Gets the CSS class of the icon displayed within the menu item badge.
     */
    GetBadgeIconCssClass(): string;
    /**
     * Sets the CSS class of the icon displayed within the menu item badge.
     * @param cssClass A string containing the name of a CSS class.
     */
    SetBadgeIconCssClass(cssClass: string): void;
    /** @deprecated Use the GetIconCssClass method instead. */
    /**
     * Returns the URL pointing to the image displayed within the menu item.
     */
    GetImageUrl(): string;
    /** @deprecated Use the SetIconCssClass method instead. */
    /**
     * Sets the URL which points to the image displayed within the menu item.
     */
    SetImageUrl(value: string): void;
    /**
     * Gets the CSS class of the icon displayed by the menu item.
     */
    GetIconCssClass(): string;
    /**
     * Sets the CSS class of the icon displayed by the menu item.
     * @param cssClass A string containing the name of a CSS class.
     */
    SetIconCssClass(cssClass: string): void;
}
/**
 * Represents a client-side equivalent of the BootstrapMenu control.
 */
declare class BootstrapClientMenu extends ASPxClientMenu {
    /**
     * Returns the menu's root menu item specified by its index. A BootstrapClientMenuItem object representing the root item located at the specified index within the menu's BootstrapMenu.Items collection.
     * @param index An integer value specifying the zero-based index of the root menu item to be retrieved.
     */
    GetItem(index: number): BootstrapClientMenuItem;
    /**
     * Returns a menu item specified by its name. A BootstrapClientMenuItem object that represents the menu item with the specified name.
     * @param name A string value specifying the name of the menu item.
     */
    GetItemByName(name: string): BootstrapClientMenuItem;
    /**
     * Returns the selected item within the menu control.
     */
    GetSelectedItem(): BootstrapClientMenuItem;
    /**
     * Selects the specified menu item within the Menu control on the client side.
     * @param item A BootstrapClientMenuItem object specifying the menu item to select.
     */
    SetSelectedItem(item: BootstrapClientMenuItem): void;
    /**
     * Returns a root menu item.
     */
    GetRootItem(): BootstrapClientMenuItem;
}
/**
 * A method that will handle the menu's client events concerning manipulations with an item.
 * @param source An object representing the event source. Identifies the BootstrapMenu control that raised the event.
 * @param e An BootstrapClientMenuItemEventArgs object that contains event data.
 */
interface BootstrapClientMenuItemEventHandler<Sender> { (source: Sender, e: BootstrapClientMenuItemEventArgs): void; }
/**
 * Provides data for events related to manipulations on menu items.
 */
declare class BootstrapClientMenuItemEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new object of the BootstrapClientMenuItemEventArgs type with the specified value.
     * @param item An BootstrapClientMenuItem object representing the group related to the event.
     */
    constructor(item: BootstrapClientMenuItem);
    /**
     * Gets the menu item object related to the event.
     */
    item: BootstrapClientMenuItem;
}
/**
 * A method that will handle the ASPxClientMenuBase.ItemMouseOut and ASPxClientMenuBase.ItemMouseOver events.
 * @param source An object representing the event source. Identifies the BootstrapMenu control that raised the event.
 * @param e An BootstrapClientMenuItemMouseEventArgs object that contains event data.
 */
interface BootstrapClientMenuItemMouseEventHandler<Sender> { (source: Sender, e: BootstrapClientMenuItemMouseEventArgs): void; }
/**
 * Provides data for client events related to mouse hovering over menu items.
 */
declare class BootstrapClientMenuItemMouseEventArgs extends BootstrapClientMenuItemEventArgs {
    /**
     * Initializes a new BootstrapClientMenuItemMouseEventArgs object with the specified settings.
     * @param item An BootstrapClientMenuItem object that represents an item related to the event.
     * @param htmlElement An HTML object that contains the processed item.
     */
    constructor(item: BootstrapClientMenuItem, htmlElement: any);
}
/**
 * A method that will handle client ASPxClientMenuBase.ItemClick events.
 * @param source An object representing the event source. Identifies the BootstrapMenu control that raised the event.
 * @param e An BootstrapClientMenuItemClickEventArgs object that contains event data.
 */
interface BootstrapClientMenuItemClickEventHandler<Sender> { (source: Sender, e: BootstrapClientMenuItemClickEventArgs): void; }
/**
 * Provides data for events related to clicking on the control's items.
 */
declare class BootstrapClientMenuItemClickEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Initializes a new object of the BootstrapClientMenuItemClickEventArgs type with the specified settings.
     * @param processOnServer true to process the event on the server side; false to completely handle it on the client side.
     * @param item An BootstrapClientMenuItem object that represents an item related to the event.
     * @param htmlElement An HTML object that contains the processed item.
     * @param htmlEvent A DHTML event object that relates to the processed event.
     */
    constructor(processOnServer: boolean, item: BootstrapClientMenuItem, htmlElement: any, htmlEvent: any);
    /**
     * Gets the menu item object related to the event.
     */
    item: BootstrapClientMenuItem;
    /**
     * Gets an HTML object that contains the processed Menu item.
     */
    htmlElement: any;
    /**
     * Gets a DHTML event object that relates to the processed event.
     */
    htmlEvent: any;
}
/**
 * Represents a client-side equivalent of the BootstrapPager control.
 */
declare class BootstrapClientPager extends ASPxClientPager {
}
/**
 * Represents a client-side equivalent of the BootstrapPopupControl control.
 */
declare class BootstrapClientPopupControl extends ASPxClientPopupControl {
    /**
     * Sets the CSS selector of a web control or HTML element with which the current popup window is associated.
     * @param selector A string value specifying the CSS selector of the web control or HTML element with which the popup window is associated.
     */
    SetPopupElementCssSelector(selector: string): void;
}
/**
 * Represents a client-side equivalent of the BootstrapPopupMenu control.
 */
declare class BootstrapClientPopupMenu extends ASPxClientPopupMenu {
    /**
     * Returns the popup menu's root menu item specified by its index. A BootstrapClientMenuItem object representing the root item located at the specified index within the menu's BootstrapPopupMenu.Items collection.
     * @param index An integer value specifying the zero-based index of the root menu item to be retrieved.
     */
    GetItem(index: number): BootstrapClientMenuItem;
    /**
     * Returns a menu item specified by its name. A BootstrapClientMenuItem object that represents the menu item with the specified name.
     * @param name A string value specifying the name of the menu item.
     */
    GetItemByName(name: string): BootstrapClientMenuItem;
    /**
     * Returns the selected item within the menu control.
     */
    GetSelectedItem(): BootstrapClientMenuItem;
    /**
     * Selects the specified menu item within a the Popup Menu control on the client side.
     * @param item A BootstrapClientMenuItem object specifying the menu item to select.
     */
    SetSelectedItem(item: BootstrapClientMenuItem): void;
    /**
     * Returns a root menu item.
     */
    GetRootItem(): BootstrapClientMenuItem;
    /**
     * Sets the CSS selector of a web control or HTML element with which the current popup menu is associated.
     * @param selector A string value specifying the CSS selector of the web control or HTML element with which the popup menu is associated.
     */
    SetPopupElementCssSelector(selector: string): void;
}
/**
 * Represents a client-side equivalent of the BootstrapProgressBar control.
 */
declare class BootstrapClientProgressBar extends ASPxClientProgressBar {
}
/**
 * Represents a client-side equivalent of the BootstrapRibbon control.
 */
declare class BootstrapClientRibbon extends ASPxClientRibbon {
    GetQuickAccessToolbarItem(name: string): ASPxClientRibbonItem;
}
/**
 * Represents a client-side equivalent of the BootstrapRichEdit control.
 */
declare class BootstrapClientRichEdit extends ASPxClientRichEdit {
}
/**
 * Represents a client-side equivalent of the BootstrapScheduler control.
 */
declare class BootstrapClientScheduler extends ASPxClientScheduler {
    GetFloatingActionButton(): BootstrapClientFloatingActionButton;
    static Cast(obj: any): ASPxClientScheduler;
}
/**
 * Represents a client-side equivalent of the BootstrapSpinEdit control.
 */
declare class BootstrapClientSpinEdit extends ASPxClientSpinEdit {
}
/**
 * Represents the client-side equivalent of the BootstrapClientTimeEdit control.
 */
declare class BootstrapClientTimeEdit extends ASPxClientTimeEdit {
}
/**
 * Represents a client-side equivalent of the BootstrapSpreadsheet control.
 */
declare class BootstrapClientSpreadsheet extends ASPxClientSpreadsheet {
}
declare class BootstrapClientTabControlWithClientTabAPI extends BootstrapClientTabControl {
}
declare class BootstrapClientSpreadsheetTabControl extends BootstrapClientTabControlWithClientTabAPI {
}
/**
 * Represents a client-side equivalent of the BootstrapTabControl control.
 */
declare class BootstrapClientTabControl extends ASPxClientTabControl {
    /**
     * Returns the active tab within the Tab Control.
     */
    GetActiveTab(): BootstrapClientTab;
    /**
     * Makes the specified tab active within the Tab Control on the client side.
     * @param tab A BootstrapClientTab object specifying the tab to select.
     */
    SetActiveTab(tab: BootstrapClientTab): void;
    /**
     * Returns a tab specified by its index. A BootstrapClientTab object representing the tab located at the specified index within the control's BootstrapTabControl.Tabs collection.
     * @param index An integer value specifying the zero-based index of the tab object to retrieve.
     */
    GetTab(index: number): BootstrapClientTab;
    /**
     * Returns a tab specified by its name. A BootstrapClientTab object that represents the tab with the specified name.
     * @param name A string value specifying the name of the tab.
     */
    GetTabByName(name: string): BootstrapClientTab;
}
/**
 * Represents a client-side equivalent of the BootstrapPageControl control.
 */
declare class BootstrapClientPageControl extends ASPxClientPageControl {
    /**
     * Returns the active tab within the Page Control.
     */
    GetActiveTab(): BootstrapClientTab;
    /**
     * Makes the specified tab active within the Page Control on the client side.
     * @param tab A BootstrapClientTab object specifying the tab to select.
     */
    SetActiveTab(tab: BootstrapClientTab): void;
    /**
     * Returns a tab specified by its index. A BootstrapClientTab object representing the tab located at the specified index within the control's BootstrapPageControl.TabSpacing collection.
     * @param index An integer value specifying the zero-based index of the tab object to retrieve.
     */
    GetTab(index: number): BootstrapClientTab;
    /**
     * Returns a tab specified by its name. A BootstrapClientTab object that represents the tab with the specified name.
     * @param name A string value specifying the name of the tab.
     */
    GetTabByName(name: string): BootstrapClientTab;
    /**
     * Returns the HTML code that represents the contents of the specified page within the page control. A string that represents the specified page's HTML content.
     * @param tab An BootstrapClientTab object that specifies the required page.
     */
    GetTabContentHTML(tab: BootstrapClientTab): string;
    /**
     * Defines the HTML content for a specific tab page within the page control.
     * @param tab A BootstrapClientTab object that specifies the required tab page.
     * @param html A string value that represents the HTML code defining the content of the specified page.
     */
    SetTabContentHTML(tab: BootstrapClientTab, html: string): void;
}
/**
 * Represents a client-side equivalent of a tab control's BootstrapTab or a page control's BootstrapTabPage object.
 */
declare class BootstrapClientTab extends ASPxClientTab {
    /**
     * Gets the text displayed within the tab badge.
     */
    GetBadgeText(): string;
    /**
     * Sets the text displayed within the tab badge.
     * @param text A String specifying the badge text.
     */
    SetBadgeText(text: string): void;
    /**
     * Gets the CSS class of the icon displayed within the tab badge.
     */
    GetBadgeIconCssClass(): string;
    /**
     * Sets the CSS class of the icon displayed within the tab badge.
     * @param cssClass A string containing the name of a CSS class.
     */
    SetBadgeIconCssClass(cssClass: string): void;
    /** @deprecated Use the GetIconCssClass method instead. */
    /**
     * Returns the URL pointing to the image displayed within the tab.
     */
    GetImageUrl(): string;
    /** @deprecated Use the SetIconCssClass method instead. */
    /**
     * Specifies the URL which points to the image displayed within the tab.
     */
    SetImageUrl(value: string): void;
    /** @deprecated Use the GetActiveIconCssClass method instead. */
    /**
     * Returns the URL pointing to the image displayed within the active tab.
     */
    GetActiveImageUrl(): string;
    /** @deprecated Use the SetActiveIconCssClass method instead. */
    /**
     * Specifies the URL which points to the image displayed within the active tab.
     */
    SetActiveImageUrl(value: string): void;
    /**
     * Gets the CSS class of the icon displayed by the tab.
     */
    GetIconCssClass(): string;
    /**
     * Sets the CSS class of the icon displayed by the tab.
     * @param cssClass A string containing the name of a CSS class.
     */
    SetIconCssClass(cssClass: string): void;
    /**
     * Gets the CSS class of an icon displayed by the tab when it is active.
     */
    GetActiveIconCssClass(): string;
    /**
     * Sets the CSS class of an icon displayed by the tab when it is active.
     * @param cssClass A String containing the name of a CSS class.
     */
    SetActiveIconCssClass(cssClass: string): void;
}
/**
 * A method that will handle a tab control's client events concerning manipulations with a tab.
 * @param source An object representing the event source. Identifies the BootstrapClientTabControl that raised the event.
 * @param e An BootstrapClientTabControlTabEventArgs object that contains event data.
 */
interface BootstrapClientTabControlTabEventHandler<Sender> { (source: Sender, e: BootstrapClientTabControlTabEventArgs): void; }
/**
 * Provides data for events related to manipulations on tabs.
 */
declare class BootstrapClientTabControlTabEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new object of the BootstrapClientTabControlTabEventArgs type with the specified value.
     * @param tab An BootstrapClientTab object representing the tab related to the event.
     */
    constructor(tab: BootstrapClientTab);
    /**
     * Gets the tab object related to the event.
     */
    tab: BootstrapClientTab;
}
/**
 * A method that will handle a tab control's cancelable client events concerning manipulations with a tab.
 * @param source An object representing the event source. Identifies the BootstrapTabControl that raised the event.
 * @param e An BootstrapClientTabControlTabCancelEventArgs object that contains event data.
 */
interface BootstrapClientTabControlTabCancelEventHandler<Sender> { (source: Sender, e: BootstrapClientTabControlTabCancelEventArgs): void; }
/**
 * Provides data for cancellable events related to manipulations on tabs.
 */
declare class BootstrapClientTabControlTabCancelEventArgs extends ASPxClientProcessingModeCancelEventArgs {
    /**
     * Initializes a new object of the BootstrapClientTabControlTabCancelEventArgs type with the specified settings.
     * @param processOnServer true to process the event on the server side; false to completely handle it on the client side.
     * @param tab An BootstrapClientTab object that represents a tab related to the event.
     */
    constructor(processOnServer: boolean, tab: BootstrapClientTab);
    /**
     * Gets the tab object related to the event.
     */
    tab: BootstrapClientTab;
    /**
     * Gets or sets a value specifying whether a callback should be sent to the server to reload the content of the page being activated.
     */
    reloadContentOnCallback: boolean;
}
/**
 * A method that will handle client events concerning clicks on tabs.
 * @param source An object representing the event source. Identifies the BootstrapTabControl that raised the event.
 * @param e An BootstrapClientTabControlTabClickEventArgs object that contains event data.
 */
interface BootstrapClientTabControlTabClickEventHandler<Sender> { (source: Sender, e: BootstrapClientTabControlTabClickEventArgs): void; }
/**
 * Provides data for events related to clicking on the control's tabs.
 */
declare class BootstrapClientTabControlTabClickEventArgs extends BootstrapClientTabControlTabCancelEventArgs {
    /**
     * Initializes a new object of the BootstrapClientTabControlTabClickEventArgs type with the specified settings.
     * @param processOnServer true to process the event on the server side; false to completely handle it on the client side.
     * @param tab An BootstrapClientTab object that represents a tab related to the event.
     * @param htmlElement An HTML object that contains the processed tab.
     * @param htmlEvent A DHTML event object that relates to the processed event.
     */
    constructor(processOnServer: boolean, tab: BootstrapClientTab, htmlElement: any, htmlEvent: any);
    /**
     * Gets an HTML object that contains the processed tab.
     */
    htmlElement: any;
    /**
     * Gets a DHTML event object that relates to the processed event.
     */
    htmlEvent: any;
}
/**
 * A client-side equivalent of the BootstrapTagBox object.
 */
declare class BootstrapClientTagBox extends ASPxClientTokenBox {
    /** @deprecated Use the AddTag method instead. */
    /**
     * Adds a new token with the specified text to the end of the control's token collection.
     */
    AddToken(text: string): void;
    /**
     * Adds a new tag with the specified text to the end of the control's tag collection.
     * @param text A string value specifying the tag's text.
     */
    AddTag(text: string): void;
    /** @deprecated Use the RemoveTagByText method instead. */
    /**
     * Use the BootstrapClientTagBox.RemoveTagByText method instead.
     */
    RemoveTokenByText(text: string): void;
    /**
     * Removes a tag specified by its text from the tag box on the client.
     * @param text A string value that is the text of the tag to be removed.
     */
    RemoveTagByText(text: string): void;
    /** @deprecated Use the RemoveTag method instead. */
    /**
     * Use the BootstrapClientTagBox.RemoveTag method instead.
     */
    RemoveToken(index: number): void;
    /**
     * Removes a tag specified by its index from the tag box on the client.
     * @param index An integer value that is the index of the tag to be removed.
     */
    RemoveTag(index: number): void;
    /** @deprecated Use the GetTagHtmlElement method instead. */
    /**
     * Returns an HTML span element that corresponds to the specified token.
     */
    GetTokenHtmlElement(index: number): any;
    /**
     * Returns an HTML span element that corresponds to the specified tag. An object that is the HTML span element that corresponds to the specified tag.
     * @param index An integer value that is the tag index.
     */
    GetTagHtmlElement(index: number): any;
    /** @deprecated Use the GetTagTextHtmlElement method instead. */
    /**
     * Returns an HTML span element that corresponds to the specified token's text.
     */
    GetTokenTextHtmlElement(index: number): any;
    /**
     * Returns an HTML span element that corresponds to the specified tag's text. An object that is the HTML span element that corresponds to the specified tag's text.
     * @param index An integer value that is the tag index.
     */
    GetTagTextHtmlElement(index: number): any;
    /** @deprecated Use the GetTagRemoveButtonHtmlElement method instead. */
    /**
     * Returns an HTML span element that corresponds to the specified token's remove button.
     */
    GetTokenRemoveButtonHtmlElement(index: number): any;
    /**
     * Returns an HTML span element that corresponds to the specified tag's remove button. An object that is the HTML span element that corresponds to the specified tag's remove button.
     * @param index An integer value that is the tag index.
     */
    GetTagRemoveButtonHtmlElement(index: number): any;
    /** @deprecated Use the GetTagCollection method instead. */
    /**
     * Returns a collection of tokens.
     */
    GetTokenCollection(): string[];
    /**
     * Returns a collection of tags.
     */
    GetTagCollection(): string[];
    /** @deprecated Use the SetTagCollection method instead. */
    /**
     * Returns a collection of tokens.
     */
    SetTokenCollection(collection: string[]): void;
    /**
     * Sets a collection of tags.
     * @param collection An  object that is the collection of tags.
     */
    SetTagCollection(collection: string[]): void;
    /** @deprecated Use the ClearTagCollection method instead. */
    /**
     * Use the BootstrapClientTagBox.ClearTagCollection method instead.
     */
    ClearTokenCollection(): void;
    /**
     * Removes all tags contained in the tag box.
     */
    ClearTagCollection(): void;
    /** @deprecated Use the GetTagIndexByText method instead. */
    /**
     * Returns the index of a token specified by its text.
     */
    GetTokenIndexByText(text: string): number;
    /**
     * Returns the index of a tag specified by its text. An integer value that is the tag index
     * @param text A string value that specifies the text of the tag.
     */
    GetTagIndexByText(text: string): number;
    /** @deprecated Use the IsCustomTag method instead. */
    /**
     * Use the BootstrapClientTagBox.IsCustomTag method instead.
     */
    IsCustomToken(text: string, caseSensitive: boolean): boolean;
    /**
     * Returns a value that indicates if the specified tag (string) is a custom tag. true, if the tag is not contained in the predefined BootstrapTagBox.Items collection; otherwise, false.
     * @param text A string value that is a tag.
     * @param caseSensitive true, if tags are case sensitive; otherwise, false.
     */
    IsCustomTag(text: string, caseSensitive: boolean): boolean;
    /**
     * Returns the editor's selected item.
     */
    GetSelectedItem(): BootstrapClientListBoxItem;
    /**
     * This member is not in effect for this class. It is overridden only for the purpose of preventing it from appearing in Microsoft Visual Studio designer tools.
     */
    SetSelectedItem(item: BootstrapClientListBoxItem): void;
    /**
     * Returns an item specified by its index within the tag box editor's item collection. A BootstrapClientListBoxItem object representing the collection item found.
     * @param index An integer value specifying the zero-based index of the item to search for.
     */
    GetItem(index: number): BootstrapClientListBoxItem;
    /**
     * Returns an item by its text. A BootstrapClientListBoxItem object that represents the combo box item. null if the item was not found.
     * @param text A string that specifies the item's text.
     */
    FindItemByText(text: string): BootstrapClientListBoxItem;
    /**
     * Returns a list item by its value. A BootstrapClientListBoxItem object that represents the list item. null if the item was not found.
     * @param value An object that specifies the item's value.
     */
    FindItemByValue(value: any): BootstrapClientListBoxItem;
    /**
     * This method is not in effect for the BootstrapClientTagBox class.
     */
    AddItem(texts: string[] | string, value?: any, iconCssClass?: string): number;
    /**
     * This method is not in effect for the BootstrapClientTagBox class.
     */
    InsertItem(index: number, texts: string[] | string, value?: any, iconCssClass?: string): void;
    /** @deprecated This event is now obsolete. Use the TagsChanged event instead. */
    /**
     * Use the BootstrapClientTagBox.TagsChanged event instead.
     */
    TokensChanged: ASPxClientEvent<ASPxClientEventHandler<BootstrapClientTagBox>>;
    /**
     * Fires on the client side after the tag collection has been changed.
     */
    TagsChanged: ASPxClientEvent<ASPxClientEventHandler<BootstrapClientTagBox>>;
    /**
     * Gets the text displayed within a Tag Box item badge. A String specifying the badge text.
     * @param index The index of a Tag Box item.
     */
    GetItemBadgeText(index: number): string;
    /**
     * Sets the text displayed within a Tag Box item badge.
     * @param index The index of a Tag Box item.
     * @param text A String specifying the badge text.
     */
    SetItemBadgeText(index: number, text: string): void;
    /**
     * Gets the CSS class of the icon displayed within a Tag Box item badge. A String containing the name of a CSS class.
     * @param index The index of a Tag Box item.
     */
    GetItemBadgeIconCssClass(index: number): string;
    /**
     * Sets the CSS class of the icon displayed within a Tag Box item badge.
     * @param index The index of a Tag Box item.
     * @param cssClass A String containing the name of a CSS class.
     */
    SetItemBadgeIconCssClass(index: number, cssClass: string): void;
}
/**
 * Represents a client-side equivalent of the BootstrapTextBox control.
 */
declare class BootstrapClientTextBox extends ASPxClientTextBox {
}
/**
 * Represents a client-side equivalent of the BootstrapMemo control.
 */
declare class BootstrapClientMemo extends ASPxClientMemo {
}
/**
 * Represents a client-side equivalent of the BootstrapButtonEdit control.
 */
declare class BootstrapClientButtonEdit extends ASPxClientButtonEdit {
}
/**
 * Represents the client-side equivalent of the BootstrapToolbar control.
 */
declare class BootstrapClientToolbar extends BootstrapClientMenu {
}
/**
 * Represents a client-side equivalent of the BootstrapTreeView control.
 */
declare class BootstrapClientTreeView extends ASPxClientTreeView {
    /**
     * Returns a node specified by its index within the Tree View's node collection. A BootstrapClientTreeViewNode object, representing the node located at the specified index within the Tree View's node collection.
     * @param index An integer value specifying the zero-based index of the node to be retrieved.
     */
    GetNode(index: number): BootstrapClientTreeViewNode;
    /**
     * Returns a node specified by its name. A BootstrapClientTreeViewNode object that represents the node with the specified name.
     * @param name A string value specifying the name of the node.
     */
    GetNodeByName(name: string): BootstrapClientTreeViewNode;
    /**
     * Returns a node specified by its text. A BootstrapClientTreeViewNode object that represents the node with the specified node's text content.
     * @param text A string value specifying the text content of the node.
     */
    GetNodeByText(text: string): BootstrapClientTreeViewNode;
    /**
     * Returns the selected node within the Tree View control on the client side.
     */
    GetSelectedNode(): BootstrapClientTreeViewNode;
    /**
     * Selects the specified node within the Tree View control on the client side.
     * @param node A BootstrapClientTreeViewNode object specifying the node to select.
     */
    SetSelectedNode(node: BootstrapClientTreeViewNode): void;
    /**
     * Gets the root node of the Tree View control.
     */
    GetRootNode(): BootstrapClientTreeViewNode;
}
/**
 * Represents a client-side equivalent of the TreeView's BootstrapTreeViewNode object.
 */
declare class BootstrapClientTreeViewNode extends ASPxClientTreeViewNode {
    /**
     * Returns the current node's immediate child node specified by its index. A BootstrapClientTreeViewNode object representing the node located at the specified index within the current node collection.
     * @param index An integer value specifying the zero-based index of the node to be retrieved.
     */
    GetNode(index: number): BootstrapClientTreeViewNode;
    /**
     * Returns the current node's child node specified by its name. A BootstrapClientTreeViewNode object that represents the current node's child with the specified name.
     * @param name A string value specifying the name of the node.
     */
    GetNodeByName(name: string): BootstrapClientTreeViewNode;
    /**
     * Returns the current node's child node specified by its text. A ASPxClientTreeViewNode object that represents the current node's child with the specified node's text content.
     * @param text A string value specifying the text content of the node.
     */
    GetNodeByText(text: string): BootstrapClientTreeViewNode;
    /**
     * Gets the BootstrapClientTreeView object to which the current node belongs.
     */
    treeView: BootstrapClientTreeView;
    /**
     * Gets the current node's parent node.
     */
    parent: BootstrapClientTreeViewNode;
    /**
     * Gets the text displayed within the node badge.
     */
    GetBadgeText(): string;
    /**
     * Sets the text displayed within the node badge.
     * @param text A String specifying the badge text.
     */
    SetBadgeText(text: string): void;
    /**
     * Gets the CSS class of the icon displayed within the node badge.
     */
    GetBadgeIconCssClass(): string;
    /**
     * Sets the CSS class of the icon displayed within the node badge.
     * @param cssClass A string containing the name of a CSS class.
     */
    SetBadgeIconCssClass(cssClass: string): void;
    /** @deprecated Use the GetIconCssClass method instead. */
    /**
     * Returns the URL pointing to the image displayed within the node.
     */
    GetImageUrl(): string;
    /** @deprecated Use the SetIconCssClass method instead. */
    /**
     * Sets the URL which points to the image displayed within the node.
     */
    SetImageUrl(value: string): void;
    /**
     * Gets the CSS class of the icon displayed by the node.
     */
    GetIconCssClass(): string;
    /**
     * Sets the CSS class of the icon displayed by the node.
     * @param cssClass A string containing the name of a CSS class.
     */
    SetIconCssClass(cssClass: string): void;
}
/**
 * A method that will handle the client events concerned with node processing.
 * @param source An object representing the event source. Identifies the BootstrapClientTreeView control that raised the event.
 * @param e An BootstrapClientTreeViewNodeProcessingModeEventArgs object that contains event data.
 */
interface BootstrapClientTreeViewNodeProcessingModeEventHandler<Sender> { (source: Sender, e: BootstrapClientTreeViewNodeProcessingModeEventArgs): void; }
/**
 * Provides data for the client events related to node processing, and allowing the event's processing to be passed to the server side.
 */
declare class BootstrapClientTreeViewNodeProcessingModeEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * Initializes a new instance of the BootstrapClientTreeViewNodeProcessingModeEventArgs class with the specified setting.
     * @param processOnServer true to process the event on the server side; false to completely handle it on the client side.
     * @param node An BootstrapClientTreeViewNode object representing the node related to the event.
     */
    constructor(processOnServer: boolean, node: BootstrapClientTreeViewNode);
    /**
     * Gets a node object related to the event.
     */
    node: BootstrapClientTreeViewNode;
}
/**
 * A method that will handle the ASPxClientTreeView.NodeClick event.
 * @param source An object representing the event source. Identifies the BootstrapClientTreeView control that raised the event.
 * @param e An BootstrapClientTreeViewNodeClickEventArgs object that contains event data.
 */
interface BootstrapClientTreeViewNodeClickEventHandler<Sender> { (source: Sender, e: BootstrapClientTreeViewNodeClickEventArgs): void; }
/**
 * Provides data for the ASPxClientTreeView.NodeClick event.
 */
declare class BootstrapClientTreeViewNodeClickEventArgs extends BootstrapClientTreeViewNodeProcessingModeEventArgs {
    /**
     * Initializes a new object of the BootstrapClientTreeViewNodeClickEventArgs type with the specified settings.
     * @param processOnServer true to process the event on the server side; false to completely handle it on the client side.
     * @param node An BootstrapClientTreeViewNode object that represents a node related to the event.
     * @param htmlElement An HTML object that contains the processed node.
     * @param htmlEvent A DHTML event object that relates to the processed event.
     */
    constructor(processOnServer: boolean, node: BootstrapClientTreeViewNode, htmlElement: any, htmlEvent: any);
    /**
     * Gets an HTML object that contains the processed Tree View node.
     */
    htmlElement: any;
    /**
     * Gets a DHTML event object that relates to the processed event.
     */
    htmlEvent: any;
}
/**
 * A method that will handle the Tree View control's client events, concerning manipulations with a node.
 * @param source An object representing the event source. Identifies the BootstrapClientTreeView control that raised the event.
 * @param e An BootstrapClientTreeViewNodeEventArgs object that contains event data.
 */
interface BootstrapClientTreeViewNodeEventHandler<Sender> { (source: Sender, e: BootstrapClientTreeViewNodeEventArgs): void; }
/**
 * Provides data for the ASPxClientTreeView.ExpandedChanged events.
 */
declare class BootstrapClientTreeViewNodeEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new object of the BootstrapClientTreeViewNodeEventArgs type with the specified value.
     * @param node An BootstrapClientTreeViewNode object representing the node related to the event.
     */
    constructor(node: BootstrapClientTreeViewNode);
    /**
     * Gets a node object related to the event.
     */
    node: BootstrapClientTreeViewNode;
}
/**
 * A method that will handle the Tree View's cancelable client events, concerning manipulations with nodes.
 * @param source An object representing the event source. Identifies the BootstrapClientTreeView control that raised the event.
 * @param e An BootstrapClientTreeViewNodeCancelEventArgs object that contains event data.
 */
interface BootstrapClientTreeViewNodeCancelEventHandler<Sender> { (source: Sender, e: BootstrapClientTreeViewNodeCancelEventArgs): void; }
/**
 * Provides data for the ASPxClientTreeView.ExpandedChanging event.
 */
declare class BootstrapClientTreeViewNodeCancelEventArgs extends ASPxClientProcessingModeCancelEventArgs {
    /**
     * Initializes a new object of the BootstrapClientTreeViewNodeCancelEventArgs type with the specified settings.
     * @param processOnServer true to process the event on the server side; false to completely handle it on the client side.
     * @param node An BootstrapClientTreeViewNode object that represents a node related to the event.
     */
    constructor(processOnServer: boolean, node: BootstrapClientTreeViewNode);
    /**
     * Gets a node object related to the event.
     */
    node: BootstrapClientTreeViewNode;
}
/**
 * Represents a client-side equivalent of the BootstrapUploadControl.
 */
declare class BootstrapClientUploadControl extends ASPxClientUploadControl {
}
/**
 * Represents an object containing service static functions and properties related to DevExpress Bootstrap controls' functionality.
 */
declare class BootstrapClientUtils {
    static UpdateDefaultStyles(): void;
}
/**
 * The client-side equivalent of the ASPxDocumentViewer control.
 */
declare class ASPxClientDocumentViewer extends ASPxClientControl {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientDocumentViewer>>;
    /**
     * Occurs on the client after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientDocumentViewer>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by ASPxClientDocumentViewer.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientDocumentViewer>>;
    /**
     * Occurs when the value of an item within the Document Viewer's report toolbar is changed.
     */
    ToolbarItemValueChanged: ASPxClientEvent<ASPxClientEventHandler<ASPxClientDocumentViewer>>;
    /**
     * Occurs when an item within the Document Viewer's report toolbar is clicked.
     */
    ToolbarItemClick: ASPxClientEvent<ASPxClientEventHandler<ASPxClientDocumentViewer>>;
    /**
     * Occurs on the client side when a report page is loaded into this ASPxClientDocumentViewer instance.
     */
    PageLoad: ASPxClientEvent<ASPxClientReportViewerPageLoadEventHandler<ASPxClientDocumentViewer>>;
    /**
     * Provides access to the Splitter of the ASPxClientDocumentViewer.
     */
    GetSplitter(): ASPxClientSplitter;
    /** @deprecated This method has become obsolete. The ASPxClientDocumentViewer class provides direct access to the corresponding methods on the client. */
    /**
     * Provides access to the ASPxClientDocumentViewer's preview that exposes methods to print and export the document.
     */
    GetViewer(): ASPxClientReportViewer;
    /**
     * Provides access to the Document Viewer toolbar on the client.
     */
    GetToolbar(): ASPxClientReportToolbar;
    /**
     * Provides access to the Ribbon of the ASPxClientDocumentViewer.
     */
    GetRibbonToolbar(): ASPxClientRibbon;
    /**
     * Provides access to the parameters panel of the ASPxClientDocumentViewer.
     */
    GetParametersPanel(): ASPxClientReportParametersPanel;
    /**
     * Provides access to the document of the ASPxClientDocumentViewer.
     */
    GetDocumentMap(): ASPxClientReportDocumentMap;
    /**
     * Sets focus on the report control specified by its bookmark.
     * @param pageIndex An integer value, specifying the page index.
     * @param bookmarkPath A String value, specifying the path to the bookmark.
     */
    GotoBookmark(pageIndex: number, bookmarkPath: string): void;
    /**
     * Initiates a round trip to the server so that the current page will be reloaded.
     */
    Refresh(): void;
    /**
     * Prints the document's page with the specified page index.
     * @param pageIndex A Int32 representing the index of the page to be printed.
     */
    Print(pageIndex?: number): void;
    /**
     * Displays the specified report page.
     * @param pageIndex An integer value, identifying the report page.
     */
    GotoPage(pageIndex: number): void;
    /**
     * Invokes the Search dialog, which allows end-users to search for specific text in a report.
     */
    Search(): void;
    /**
     * Gets a value indicating whether or not searching text across a report is permitted in the web browser.
     */
    IsSearchAllowed(): boolean;
    /**
     * Exports a report to a file of the specified format, and shows it in a new Web Browser window.
     * @param format A string specifying the format to which a report should be exported.
     */
    SaveToWindow(format: string): void;
    /**
     * Exports a report to a file of the specified format, and saves it to the disk.
     * @param format A string specifying the format to which a report should be exported.
     */
    SaveToDisk(format: string): void;
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress. An ASPxClientDocumentViewer object.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    static Cast(obj: any): ASPxClientDocumentViewer;
}
/**
 * A method that will handle the ASPxClientDocumentViewer.ToolbarItemValueChanged event.
 * @param source A Object that is the event source.
 * @param e An ASPxClientToolbarItemValueChangedEventArgs object, containing the event arguments.
 */
interface ASPxClientToolbarItemValueChangedEventHandler<Sender> { (source: Sender, e: ASPxClientToolbarItemValueChangedEventArgs): void; }
/**
 * Provides data for the ReportToolbarClientSideEvents.ItemValueChanged event.
 */
declare class ASPxClientToolbarItemValueChangedEventArgs extends ASPxClientProcessingModeEventArgs {
    /**
     * For internal use. Initializes a new instance of the ASPxClientToolbarItemValueChangedEventArgs class with the specified settings.
     */
    constructor(processOnServer: boolean, item: ASPxClientMenuItem, editor: ASPxClientControl);
    /**
     * Gets the menu item object related to the event.
     */
    item: ASPxClientMenuItem;
    /**
     * Provides access to the toolbar's value editor on the client.
     */
    editor: ASPxClientControl;
}
/**
 * The client-side equivalent of the ASPxQueryBuilder control.
 */
declare class ASPxClientQueryBuilder extends ASPxClientControl {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientQueryBuilder>>;
    /**
     * Occurs on the client after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientQueryBuilder>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by ASPxClientQueryBuilder.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientQueryBuilder>>;
    /**
     * Enables you to customize the menu actions of a Query Builder.
     */
    CustomizeToolbarActions: ASPxClientEvent<ASPxClientQueryBuilderCustomizeToolbarActionsEventHandler<ASPxClientQueryBuilder>>;
    /**
     * Enables you to customize the Query Builder's localization strings.
     */
    CustomizeLocalization: ASPxClientEvent<ASPxClientQueryBuilderCustomizeLocalizationEventHandler<ASPxClientQueryBuilder>>;
    /**
     * Occurs when executing the Save command on the client.
     */
    SaveCommandExecute: ASPxClientEvent<ASPxClientQueryBuilderSaveCommandExecuteEventHandler<ASPxClientQueryBuilder>>;
    /**
     * Occurs before the Query Builder UI is initialized.
     */
    BeforeRender: ASPxClientEvent<ASPxClientQueryBuilderBeforeRenderEventHandler<ASPxClientQueryBuilder>>;
    /**
     * Occurs on the client each time a server-side error raises.
     */
    OnServerError: ASPxClientEvent<ASPxClientQueryBuilderErrorEventHandler<ASPxClientQueryBuilder>>;
    /**
     * Sends a callback to the server and generates the server-side event, passing it the specified argument.
     * @param arg A string value that represents any information that needs to be sent to the server-side event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(arg: string, onSuccess?: (arg: string) => void): void;
    /**
     * Updates the ASPxClientQueryBuilder properties' localization settings.
     * @param localization A dictionary containing the property names, along with their localized equivalents.
     */
    UpdateLocalization(localization: { [key: string]: string; }): void;
    /**
     * Returns the object model of a Query Builder.
     */
    GetDesignerModel(): any;
    /**
     * Gets a client-side model of the currently opened query serialized to Json.
     */
    GetJsonQueryModel(): string;
    /**
     * Saves the current query.
     */
    Save(): void;
    /**
     * Invokes a Previewing Results for the current query.
     */
    ShowPreview(): void;
    /**
     * Specifies whether or not the current query is a valid SQL string.
     */
    IsQueryValid(): boolean;
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress. An ASPxClientQueryBuilder object.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    static Cast(obj: any): ASPxClientQueryBuilder;
}
/**
 * A method that will handle the ASPxClientQueryBuilder.SaveCommandExecute event.
 * @param source The event sender.
 * @param e An ASPxClientQueryBuilderSaveCommandExecuteEventArgs object that contains data related to the event.
 */
interface ASPxClientQueryBuilderSaveCommandExecuteEventHandler<Sender> { (source: Sender, e: ASPxClientQueryBuilderSaveCommandExecuteEventArgs): void; }
/**
 * Provides data for the ASPxClientQueryBuilder.SaveCommandExecute event.
 */
declare class ASPxClientQueryBuilderSaveCommandExecuteEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientQueryBuilderSaveCommandExecuteEventArgs class with the default settings.
     */
    constructor();
    /**
     * Specifies whether or not the event was handled.
     */
    handled: boolean;
}
/**
 * A method that will handle the ASPxClientQueryBuilder.CustomizeToolbarActions event.
 * @param source The event sender.
 * @param e An ASPxClientCustomizeMenuActionsEventArgs object that contains data related to the event.
 */
interface ASPxClientQueryBuilderCustomizeToolbarActionsEventHandler<Sender> { (source: Sender, e: ASPxClientCustomizeMenuActionsEventArgs): void; }
/**
 * A method that will handle the ASPxClientQueryBuilder.CustomizeLocalization event.
 * @param source The event sender.
 */
interface ASPxClientQueryBuilderCustomizeLocalizationEventHandler<Sender> { (source: Sender): void; }
/**
 * A method that will handle the ASPxClientQueryBuilder.OnServerError event.
 * @param source The event sender.
 * @param e An ASPxClientErrorEventArgs object that contains data related to the event.
 */
interface ASPxClientQueryBuilderErrorEventHandler<Sender> { (source: Sender, e: ASPxClientErrorEventArgs): void; }
/**
 * A method that will handle the ASPxClientQueryBuilder.BeforeRender event.
 * @param source The event sender.
 */
interface ASPxClientQueryBuilderBeforeRenderEventHandler<Sender> { (source: Sender, designerModel: any): void; }
/**
 * The client-side equivalent of the Web Report Designer control.
 */
declare class ASPxClientReportDesigner extends ASPxClientControl {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientReportDesigner>>;
    /**
     * Occurs on the client after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientReportDesigner>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by ASPxClientReportDesigner.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientReportDesigner>>;
    /**
     * Occurs when executing the Save command on the client.
     */
    SaveCommandExecute: ASPxClientEvent<ASPxClientReportDesignerSaveCommandExecuteEventHandler<ASPxClientReportDesigner>>;
    /**
     * Enables you to customize the Web Report Designer's menu actions.
     */
    CustomizeMenuActions: ASPxClientEvent<ASPxClientReportDesignerCustomizeMenuActionsEventHandler<ASPxClientReportDesigner>>;
    /**
     * Occurs each time a standard editor is created for a report parameter based on a parameter type.
     */
    CustomizeParameterEditors: ASPxClientEvent<ASPxClientReportDesignerCustomizeParameterEditorsEventHandler<ASPxClientReportDesigner>>;
    /**
     * Occurs each time a look-up editor is created for a report parameter.
     */
    CustomizeParameterLookUpSource: ASPxClientEvent<ASPxClientReportDesignerCustomizeParameterLookUpSourceEventHandler<ASPxClientReportDesigner>>;
    /**
     * Occurs on the client side when the Report Designer is being closed.
     */
    ExitDesigner: ASPxClientEvent<ASPxClientReportDesignerExitDesignerEventHandler<ASPxClientReportDesigner>>;
    /**
     * Occurs when a report is about to be saved in the Web Report Designer.
     */
    ReportSaving: ASPxClientEvent<ASPxClientReportDesignerReportSavingEventHandler<ASPxClientReportDesigner>>;
    /**
     * Occurs when a report has been saved in the Web Report Designer.
     */
    ReportSaved: ASPxClientEvent<ASPxClientReportDesignerReportSavedEventHandler<ASPxClientReportDesigner>>;
    /**
     * Occurs when a report is about to be opened in the Web Report Designer.
     */
    ReportOpening: ASPxClientEvent<ASPxClientReportDesignerReportOpeningEventHandler<ASPxClientReportDesigner>>;
    /**
     * Occurs when a report has been opened in the Web Report Designer.
     */
    ReportOpened: ASPxClientEvent<ASPxClientReportDesignerReportOpenedEventHandler<ASPxClientReportDesigner>>;
    /**
     * Occurs when a report tab is about to be closed in the Web Report Designer.
     */
    ReportTabClosing: ASPxClientEvent<ASPxClientReportDesignerReportTabClosingEventHandler<ASPxClientReportDesigner>>;
    /**
     * Occurs when a report tab was closed in the Web Report Designer.
     */
    ReportTabClosed: ASPxClientEvent<ASPxClientReportDesignerReportTabClosedEventHandler<ASPxClientReportDesigner>>;
    /**
     * Occurs when an active report tab was changed in the Web Report Designer.
     */
    TabChanged: ASPxClientEvent<ASPxClientReportDesignerTabChangedEventHandler<ASPxClientReportDesigner>>;
    /**
     * Occurs on the client each time a server-side error raises.
     */
    OnServerError: ASPxClientEvent<ASPxClientReportDesignerErrorEventHandler<ASPxClientReportDesigner>>;
    /**
     * Occurs after a component has been added to the report currently being edited in the Web Report Designer.
     */
    ComponentAdded: ASPxClientEvent<ASPxClientReportDesignerComponentAddedEventHandler<ASPxClientReportDesigner>>;
    /**
     * Enables you to customize the Web Report Designer's UI elements.
     */
    CustomizeElements: ASPxClientEvent<ASPxClientReportDesignerCustomizeElementsEventHandler<ASPxClientReportDesigner>>;
    /**
     * Enables you to customize the Save dialog of the Web Report Designer.
     */
    CustomizeSaveDialog: ASPxClientEvent<ASPxClientReportDesignerCustomizeSaveDialogEventHandler<ASPxClientReportDesigner>>;
    /**
     * Enables you to customize the Save Report dialog of the Web Report Designer.
     */
    CustomizeSaveAsDialog: ASPxClientEvent<ASPxClientReportDesignerCustomizeSaveAsDialogEventHandler<ASPxClientReportDesigner>>;
    /**
     * Enables you to customize the Open Report dialog of the Web Report Designer.
     */
    CustomizeOpenDialog: ASPxClientEvent<ASPxClientReportDesignerCustomizeOpenDialogEventHandler<ASPxClientReportDesigner>>;
    /**
     * Enables you to customize the Toolbox of the Web Report Designer.
     */
    CustomizeToolbox: ASPxClientEvent<ASPxClientReportDesignerCustomizeToolboxEventHandler<ASPxClientReportDesigner>>;
    /**
     * Enables you to customize actions available in the Web Report Designer's Field List.
     */
    CustomizeFieldListActions: ASPxClientEvent<ASPxClientReportDesignerCustomizeFieldListActionsEventHandler<ASPxClientReportDesigner>>;
    /**
     * Occurs after a report has been switched to Print Preview.
     */
    PreviewDocumentReady: ASPxClientEvent<ASPxClientWebDocumentViewerDocumentReadyEventHandler<ASPxClientReportDesigner>>;
    /**
     * Occurs each time an editing field's value changes in Print Preview.
     */
    PreviewEditingFieldChanged: ASPxClientEvent<ASPxClientWebDocumentViewerEditingFieldChangedEventHandler<ASPxClientReportDesigner>>;
    /**
     * Enables you to customize UI elements of a Document Viewer built into a Web Report Designer.
     */
    PreviewCustomizeElements: ASPxClientEvent<ASPxClientWebDocumentViewerCustomizeElementsEventHandler<ASPxClientReportDesigner>>;
    /**
     * Enables you to customize the actions of a Document Viewer built into a Web Report Designer.
     */
    PreviewCustomizeMenuActions: ASPxClientEvent<ASPxClientWebDocumentViewerCustomizeMenuActionsEventHandler<ASPxClientReportDesigner>>;
    /**
     * Occurs when the left mouse button is clicked on a report document in Print Preview.
     */
    PreviewClick: ASPxClientEvent<ASPxClientWebDocumentViewerPreviewClickEventHandler<ASPxClientReportDesigner>>;
    /**
     * Occurs after report parameter values are reset to their default values in Print Preview.
     */
    PreviewParametersReset: ASPxClientEvent<ASPxClientWebDocumentViewerParametersResetEventHandler<ASPxClientReportDesigner>>;
    /**
     * Occurs after report parameter values are submitted in Print Preview.
     */
    PreviewParametersSubmitted: ASPxClientEvent<ASPxClientWebDocumentViewerParametersSubmittedEventHandler<ASPxClientReportDesigner>>;
    /**
     * Enables you to customize the Web Report Designer's localization strings.
     */
    CustomizeLocalization: ASPxClientEvent<ASPxClientReportDesignerCustomizeLocalizationEventHandler<ASPxClientReportDesigner>>;
    /**
     * Occurs before the Web Report Designer UI is initialized.
     */
    BeforeRender: ASPxClientEvent<ASPxClientReportDesignerBeforeRenderEventHandler<ASPxClientReportDesigner>>;
    /**
     * Allows you to customize available export formats and corresponding export options in a Document Viewer built into a Web Report Designer.
     */
    PreviewCustomizeExportOptions: ASPxClientEvent<ASPxClientWebDocumentViewerCustomizeExportOptionsEventHandler<ASPxClientReportDesigner>>;
    /**
     * Sends a callback to the server and generates the server-side event, passing it the specified argument.
     * @param arg A string value that represents any information that needs to be sent to the server-side event.
     * @param onSuccess A client action to perform if the server round-trip completed successfully.
     */
    PerformCallback(arg: string, onSuccess?: (arg: string) => void): void;
    /**
     * Updates the Report Designer properties' localization settings.
     * @param localization A dictionary containing the property names, along with their localized equivalents.
     */
    UpdateLocalization(localization: { [key: string]: string; }): void;
    /**
     * Provides access to a client-side model of a Web Report Designer.
     */
    GetDesignerModel(): any;
    /**
     * Provides access to the Document Viewer's client-side model.
     */
    GetPreviewModel(): ASPxClientSidePreviewModel;
    /**
     * Returns information about the specified properties of the specified control. An object that provides property information.
     * @param controlType A string that specifies the control type.
     * @param path An array of strings that specify paths to properties.
     */
    GetPropertyInfo(controlType: string, path: string | string[]): ASPxDesignerElementSerializationInfo;
    /**
     * Returns actions performed by buttons available in the menu and toolbar of the Web Report Designer.
     */
    GetButtonStorage(): any;
    /**
     * Gets a client-side model of the currently opened report serialized to Json.
     */
    GetJsonReportModel(): string;
    /**
     * Indicates whether or not the current ASPxClientReportDesigner instance has been modified.
     */
    IsModified(): boolean;
    /**
     * Returns the currently active tab in the Web Report Designer.
     */
    GetCurrentTab(): ASPxDesignerNavigateTab;
    /**
     * Returns all available Report Designer tabs.
     */
    GetTabs(): ASPxDesignerNavigateTab[];
    /**
     * Closes the specified report tab avaialble the Web Report Designer silently or with the Save Report dialog.
     * @param tab Specifies the Report Designer tab to close.
     * @param force true, to silently close the tab; false to show the Save Report dialog.
     */
    CloseTab(tab: ASPxDesignerNavigateTab, force?: boolean): void;
    /**
     * Resets the value returned by the ASPxClientReportDesigner.IsModified method.
     */
    ResetIsModified(): void;
    /**
     * Adds a custom property to the Properties Panel.
     * @param groupName A string that specifies the name of group to which a property should be added.
     * @param property An object that provides information required to serialize a property.
     */
    AddToPropertyGrid(groupName: string, property: ASPxDesignerElementSerializationInfo): void;
    /**
     * Adds a custom parameter type to the Web End-User Report Designer.
     * @param parameterInfo An object that provides information about a parameter type to be added.
     * @param editorOptions An object that provides information about an editor used to specify parameter values in design mode.
     */
    AddParameterType(parameterInfo: ASPxDesignerParameterType, editorOptions: ASPxDesignerEditorOptions): void;
    /**
     * Removes the specified parameter type from the Web End-User Report Designer.
     * @param parameterType A string that specifies a parameter type to be deleted.
     */
    RemoveParameterType(parameterType: string): void;
    /**
     * Returns an object that contains information on the specified parameter type. An object storing information on a parameter type.
     * @param parameterType A string that specifies a parameter type.
     */
    GetParameterInfo(parameterType: string): ASPxDesignerParameterType;
    /**
     * Returns a value editor associated with the specified parameter type. An object that stores settings of a parameter editor.
     * @param parameterType A string that specifies a parameter type.
     */
    GetParameterEditor(parameterType: string): ASPxDesignerEditorOptions;
    /**
     * Returns the report layout stored in a report storage under the specified URL. A Deferred Promise object.
     * @param url A string that specifies the report URL.
     */
    ReportStorageGetData(url: string): JQueryPromise<any>;
    /**
     * Stores the specified report to a report storage using the specified URL. A Deferred Promise object.
     * @param reportLayout A string that specifies the report layout to be saved.
     * @param url A string that specifies the URL used to save a report.
     */
    ReportStorageSetData(reportLayout: string, url: string): JQueryPromise<any>;
    /**
     * Stores the specified report to a report storage using a new URL. A Deferred Promise object.
     * @param reportLayout A string that specifies the report layout to be saved.
     * @param url A string that specifies the default report URL.
     */
    ReportStorageSetNewData(reportLayout: string, url: string): JQueryPromise<any>;
    /**
     * Saves the current report.
     */
    SaveReport(): JQueryPromise<any>;
    /**
     * Closes the report tab currently being opened in the Web Report Designer.
     */
    CloseCurrentTab(): void;
    /**
     * Saves the current report under a new name. A Deferred Promise object.
     * @param reportName A string that specifies the report name.
     */
    SaveNewReport(reportName: string): JQueryPromise<any>;
    /**
     * Returns the report URLs and display names existing in a report storage.
     */
    ReportStorageGetUrls(): JQueryPromise<any>;
    /**
     * Opens the specified report on the Web Report Designer's client side.
     * @param url A string that specifies the URL of a report to be opened.
     */
    OpenReport(url: string): void;
    /**
     * Switches the Web Report Designer to the preview mode.
     */
    ShowPreview(): void;
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress. An ASPxClientReportDesigner object.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    static Cast(obj: any): ASPxClientReportDesigner;
}
/**
 * A method that will handle the ASPxClientReportDesigner.SaveCommandExecute event.
 * @param source The event sender.
 * @param e An ASPxClientReportDesignerSaveCommandExecuteEventArgs object that contains data related to the event.
 */
interface ASPxClientReportDesignerSaveCommandExecuteEventHandler<Sender> { (source: Sender, e: ASPxClientReportDesignerSaveCommandExecuteEventArgs): void; }
/**
 * Provides data for the ASPxClientReportDesigner.SaveCommandExecute event.
 */
declare class ASPxClientReportDesignerSaveCommandExecuteEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientReportDesignerSaveCommandExecuteEventArgs class with the default settings.
     */
    constructor();
    /**
     * Specifies whether or not the event was handled.
     */
    handled: boolean;
}
/**
 * Provides data for the ASPxClientReportDesigner.ExitDesigner event.
 */
declare class ASPxClientReportDesignerExitDesignerEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientReportDesignerExitDesignerEventArgs class with the default settings.
     */
    constructor();
}
/**
 * Provides data for the events related to opening and saving reports in the Web Report Designer.
 */
declare class ASPxClientReportDesignerDialogEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientReportDesignerDialogEventArgs class with the specified settings.
     * @param url Specifies the URL of the report currently being processed. This value is assigned to the ASPxClientReportDesignerDialogEventArgs.Url property.
     * @param report Specifies the report currently being processed. This value is assigned to the ASPxClientReportDesignerDialogEventArgs.Report property.
     */
    constructor(url: string, report: any);
    /**
     * Specifies the URL of the report currently being processed.
     */
    Url: string;
    /**
     * Specifies the report currently being processed.
     */
    Report: any;
}
/**
 * Provides data for the events related to opening and saving reports in the Web Report Designer.
 */
declare class ASPxClientReportDesignerDialogCancelEventArgs extends ASPxClientReportDesignerDialogEventArgs {
    /**
     * Initializes a new instance of the ASPxClientReportDesignerDialogCancelEventArgs class with the specified settings.
     * @param url Specifies the URL of the report currently being processed. This value is assigned to the ASPxClientReportDesignerDialogEventArgs.Url property.
     * @param report Specifies the report currently being processed. This value is assigned to the ASPxClientReportDesignerDialogEventArgs.Report property.
     */
    constructor(url: string, report: any);
    /**
     * Specifies whether or not the operation performed with a report should be canceled.
     */
    Cancel: boolean;
}
/**
 * Provides data for the ASPxClientReportDesigner.ReportTabClosed event.
 */
declare class ASPxClientReportDesignerTabEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientReportDesignerTabEventArgs class with the specified settings.
     * @param tab An object that specifies the report tab. This value is assigned to the ASPxClientReportDesignerTabEventArgs.Tab property.
     */
    constructor(tab: ASPxDesignerNavigateTab);
    /**
     * Specifies the report tab currently being processed.
     */
    Tab: ASPxDesignerNavigateTab;
}
/**
 * Provides data for the ASPxClientReportDesigner.ReportTabClosing event.
 */
declare class ASPxClientReportDesignerTabClosingEventArgs extends ASPxClientReportDesignerTabEventArgs {
    /**
     * Initializes a new instance of the ASPxClientReportDesignerTabClosingEventArgs class with the specified settings.
     * @param tab An object that specifies the report tab. This value is assigned to the ASPxClientReportDesignerTabEventArgs.Tab property.
     * @param readyToClose A JQuery Deferred object, which when resolved, forces the report tab to be closed. This value is assigned to the ASPxClientReportDesignerTabClosingEventArgs.ReadyToClose property.
     */
    constructor(tab: ASPxDesignerNavigateTab, readyToClose: JQueryDeferred<any>);
    /**
     * Specifies whether or not the event was handled.
     */
    Handled: boolean;
    /**
     * Specifies the JQuery Deferred object, which when resolved, forces the report tab to be closed.
     */
    ReadyToClose: JQueryDeferred<any>;
}
/**
 * Provides data for the ASPxClientReportDesigner.ComponentAdded event.
 */
declare class ASPxClientReportDesignerComponentAddedEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientReportDesignerComponentAddedEventArgs class with the specified settings.
     * @param model An object that specifies the model of a component that has been added to a report. This value is assigned to the ASPxClientReportDesignerComponentAddedEventArgs.Model property.
     * @param parent An object that specifies the parent of a component that has been added to a report. This value is assigned to the ASPxClientReportDesignerComponentAddedEventArgs.Parent property.
     */
    constructor(model: any, parent: any);
    /**
     * Gets the model of a component that has been added to a report.
     */
    Model: any;
    /**
     * Gets the parent of a component that has been added to a report.
     */
    Parent: any;
}
/**
 * Provides data for the ASPxClientReportDesigner.CustomizeSaveDialog event.
 */
declare class ASPxClientReportDesignerCustomizeSaveDialogEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientReportDesignerCustomizeSaveDialogEventArgs class with the specified settings.
     * @param popup An object that specifies the Save dialog.
     */
    constructor(popup: ASPxDesignerSaveDialog);
    /**
     * Provides access to the Save dialog.
     */
    Popup: ASPxDesignerSaveDialog;
    /**
     * Customizes the Save dialog based on the specified template and model.
     * @param template A string that specifies the name of an HTML template for the dialog.
     * @param model A model of the Save dialog.
     */
    Customize(template: string, model: ASPxDesignerDialogModel): void;
}
/**
 * Provides data for the ASPxClientReportDesigner.CustomizeSaveAsDialog event.
 */
declare class ASPxClientReportDesignerCustomizeSaveAsDialogEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientReportDesignerCustomizeSaveAsDialogEventArgs class with the specified settings.
     * @param popup An object that specifies the Save Report dialog.
     */
    constructor(popup: ASPxDesignerSaveAsDialog);
    /**
     * Provides access to the Save Report dialog.
     */
    Popup: ASPxDesignerSaveAsDialog;
    /**
     * Customizes the Save Report dialog based on the specified template and model.
     * @param template A string that specifies the name of an HTML template for the dialog.
     * @param model A model of the Save Report dialog.
     */
    Customize(template: string, model: ASPxDesignerDialogModel): void;
}
/**
 * Provides data for the ASPxClientReportDesigner.CustomizeOpenDialog event.
 */
declare class ASPxClientReportDesignerCustomizeOpenDialogEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientReportDesignerCustomizeOpenDialogEventArgs class with the specified settings.
     * @param popup An object that specifies the Open Report dialog.
     */
    constructor(popup: ASPxDesignerOpenDialog);
    /**
     * Provides access to the Open Report dialog.
     */
    Popup: ASPxDesignerOpenDialog;
    /**
     * Customizes the Open Report dialog based on the specified template and model.
     * @param template A string that specifies the name of an HTML template for the dialog.
     * @param model A model of the Open Report dialog.
     */
    Customize(template: string, model: ASPxDesignerDialogModel): void;
}
/**
 * Provides data for the ASPxClientReportDesigner.CustomizeToolbox event.
 */
declare class ASPxClientReportDesignerCustomizeToolboxEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientReportDesignerCustomizeToolboxEventArgs class with the specified settings.
     * @param controlsFactory An object that provides information about all controls available in the Toolbox. This object is assigned to the ASPxClientReportDesignerCustomizeToolboxEventArgs.ControlsFactory property.
     */
    constructor(controlsFactory: ASPxDesignerControlsFactory);
    /**
     * Provides information about all controls available in the Toolbox.
     */
    ControlsFactory: ASPxDesignerControlsFactory;
}
/**
 * Provides data for the ASPxClientReportDesigner.CustomizeFieldListActions event.
 */
declare class ASPxClientReportDesignerCustomizeFieldListActionsEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientReportDesignerCustomizeFieldListActionsEventArgs class with the specified settings.
     * @param item An object that specifies the item that is currently being processed. This object is assigned to the Item property.
     * @param actions Specifies the collection that contains the current item's available actions. This object is assigned to the Actions property.
     */
    constructor(item: any, actions: any[]);
    /**
     * Specifies the Field List's item that is currently being processed.
     */
    Item: any;
    /**
     * Provides access to the current item's available actions.
     */
    Actions: any[];
}
/**
 * A method that will handle the ASPxClientReportDesigner.CustomizeMenuActions event.
 * @param source The event sender.
 * @param e An ASPxClientCustomizeMenuActionsEventArgs object that contains data related to the event.
 */
interface ASPxClientReportDesignerCustomizeMenuActionsEventHandler<Sender> { (source: Sender, e: ASPxClientCustomizeMenuActionsEventArgs): void; }
/**
 * A method that will handle the ASPxClientReportDesigner.CustomizeParameterLookUpSource event.
 * @param source The event sender.
 * @param e An ASPxClientCustomizeParameterLookUpSourceEventArgs object that contains data related to the event.
 */
interface ASPxClientReportDesignerCustomizeParameterLookUpSourceEventHandler<Sender> { (source: Sender, e: ASPxClientCustomizeParameterLookUpSourceEventArgs): void; }
/**
 * A method that will handle the ASPxClientReportDesigner.CustomizeParameterEditors event.
 * @param source The event sender.
 * @param e An ASPxClientCustomizeParameterEditorsEventArgs object that contains data related to the event.
 */
interface ASPxClientReportDesignerCustomizeParameterEditorsEventHandler<Sender> { (source: Sender, e: ASPxClientCustomizeParameterEditorsEventArgs): void; }
/**
 * A method that will handle the ASPxClientReportDesigner.CustomizeElements event.
 * @param source The event sender.
 * @param e An ASPxClientCustomizeElementsEventArgs object that contains data related to the event.
 */
interface ASPxClientReportDesignerCustomizeElementsEventHandler<Sender> { (source: Sender, e: ASPxClientCustomizeElementsEventArgs): void; }
/**
 * A method that will handle the ASPxClientReportDesigner.ExitDesigner event.
 * @param source The event sender.
 * @param e An ASPxClientReportDesignerExitDesignerEventArgs object that contains data related to the event.
 */
interface ASPxClientReportDesignerExitDesignerEventHandler<Sender> { (source: Sender, e: ASPxClientReportDesignerExitDesignerEventArgs): void; }
/**
 * A method that will handle the ASPxClientReportDesigner.ReportSaving event.
 * @param source The event sender.
 * @param e An ASPxClientReportDesignerDialogCancelEventArgs object that contains data related to the event.
 */
interface ASPxClientReportDesignerReportSavingEventHandler<Sender> { (source: Sender, e: ASPxClientReportDesignerDialogCancelEventArgs): void; }
/**
 * A method that will handle the ASPxClientReportDesigner.ReportSaved event.
 * @param source The event sender.
 * @param e An ASPxClientReportDesignerDialogEventArgs object that contains data related to the event.
 */
interface ASPxClientReportDesignerReportSavedEventHandler<Sender> { (source: Sender, e: ASPxClientReportDesignerDialogEventArgs): void; }
/**
 * A method that will handle the ASPxClientReportDesigner.ReportOpening event.
 * @param source The event sender.
 * @param e An ASPxClientReportDesignerDialogCancelEventArgs object that contains data related to the event.
 */
interface ASPxClientReportDesignerReportOpeningEventHandler<Sender> { (source: Sender, e: ASPxClientReportDesignerDialogCancelEventArgs): void; }
/**
 * A method that will handle the ASPxClientReportDesigner.ReportOpened event.
 * @param source The event sender.
 * @param e An ASPxClientReportDesignerDialogEventArgs object that contains data related to the event.
 */
interface ASPxClientReportDesignerReportOpenedEventHandler<Sender> { (source: Sender, e: ASPxClientReportDesignerDialogEventArgs): void; }
/**
 * A method that will handle the ASPxClientReportDesigner.ReportTabClosing event.
 * @param source The event sender.
 * @param e An ASPxClientReportDesignerTabClosingEventArgs object that contains data related to the event.
 */
interface ASPxClientReportDesignerReportTabClosingEventHandler<Sender> { (source: Sender, e: ASPxClientReportDesignerTabClosingEventArgs): void; }
/**
 * A method that will handle the ASPxClientReportDesigner.ReportTabClosed event.
 * @param source The event sender.
 * @param e An ASPxClientReportDesignerTabEventArgs object that contains data related to the event.
 */
interface ASPxClientReportDesignerReportTabClosedEventHandler<Sender> { (source: Sender, e: ASPxClientReportDesignerTabEventArgs): void; }
/**
 * A method that will handle the ASPxClientReportDesigner.TabChanged event.
 * @param source The event sender.
 * @param e An ASPxClientReportDesignerTabEventArgs object that contains data related to the event.
 */
interface ASPxClientReportDesignerTabChangedEventHandler<Sender> { (source: Sender, e: ASPxClientReportDesignerTabEventArgs): void; }
/**
 * A method that will handle the ASPxClientReportDesigner.OnServerError event.
 * @param source The event sender.
 * @param e An ASPxClientErrorEventArgs object that contains data related to the event.
 */
interface ASPxClientReportDesignerErrorEventHandler<Sender> { (source: Sender, e: ASPxClientErrorEventArgs): void; }
/**
 * A method that will handle the ASPxClientReportDesigner.ComponentAdded event.
 * @param source The event sender.
 * @param e An ASPxClientReportDesignerComponentAddedEventArgs object that contains data related to the event.
 */
interface ASPxClientReportDesignerComponentAddedEventHandler<Sender> { (source: Sender, e: ASPxClientReportDesignerComponentAddedEventArgs): void; }
/**
 * A method that will handle the ASPxClientReportDesigner.CustomizeSaveDialog event.
 * @param source The event sender.
 * @param e An ASPxClientReportDesignerCustomizeSaveDialogEventArgs object that contains data related to the event.
 */
interface ASPxClientReportDesignerCustomizeSaveDialogEventHandler<Sender> { (source: Sender, e: ASPxClientReportDesignerCustomizeSaveDialogEventArgs): void; }
/**
 * A method that will handle the ASPxClientReportDesigner.CustomizeSaveAsDialog event.
 * @param source The event sender.
 * @param e An ASPxClientReportDesignerCustomizeSaveAsDialogEventArgs object that contains data related to the event.
 */
interface ASPxClientReportDesignerCustomizeSaveAsDialogEventHandler<Sender> { (source: Sender, e: ASPxClientReportDesignerCustomizeSaveAsDialogEventArgs): void; }
/**
 * A method that will handle the ASPxClientReportDesigner.CustomizeOpenDialog event.
 * @param source The event sender.
 * @param e An ASPxClientReportDesignerCustomizeOpenDialogEventArgs object that contains data related to the event.
 */
interface ASPxClientReportDesignerCustomizeOpenDialogEventHandler<Sender> { (source: Sender, e: ASPxClientReportDesignerCustomizeOpenDialogEventArgs): void; }
/**
 * A method that will handle the ASPxClientReportDesigner.CustomizeToolbox event.
 * @param source The event sender.
 * @param e An ASPxClientReportDesignerCustomizeToolboxEventArgs object that contains data related to the event.
 */
interface ASPxClientReportDesignerCustomizeToolboxEventHandler<Sender> { (source: Sender, e: ASPxClientReportDesignerCustomizeToolboxEventArgs): void; }
/**
 * A method that will handle the ASPxClientReportDesigner.CustomizeFieldListActions event.
 * @param source The event sender.
 * @param e An ASPxClientReportDesignerCustomizeFieldListActionsEventArgs object that contains data related to the event.
 */
interface ASPxClientReportDesignerCustomizeFieldListActionsEventHandler<Sender> { (source: Sender, e: ASPxClientReportDesignerCustomizeFieldListActionsEventArgs): void; }
/**
 * A method that will handle the ASPxClientReportDesigner.CustomizeLocalization event.
 * @param source The event sender.
 */
interface ASPxClientReportDesignerCustomizeLocalizationEventHandler<Sender> { (source: Sender): void; }
/**
 * A method that will handle the ASPxClientReportDesigner.BeforeRender event.
 * @param source The event sender.
 * @param designerModel A client-side Report Designer model.
 */
interface ASPxClientReportDesignerBeforeRenderEventHandler<Sender> { (source: Sender, designerModel: any): void; }
declare class ASPxDesignerEditorOptions {
    header: string;
    content: string;
    editorType: any;
}
declare class ASPxDesignerUndoEngine {
    redoEnabled: KnockoutObservable<boolean>;
    undoEnabled: KnockoutObservable<boolean>;
    undoAll(): void;
    clearHistory(): void;
    undo(): void;
    redo(): void;
    isDirty: KnockoutObservable<boolean>;
}
declare class ASPxDesignerNavigateTab {
    displayName: KnockoutComputed<string>;
    isModified: KnockoutObservable<boolean>;
    resetIsModified(): void;
    report: KnockoutObservable<any>;
    undoEngine: ASPxDesignerUndoEngine;
    url: KnockoutObservable<string>;
    refresh(): void;
}
declare class ASPxDesignerDialogModel {
    getUrl(): string;
    setUrl(url: string): void;
    onShow(tab: ASPxDesignerNavigateTab): void;
    popupButtons: any[];
}
declare class ASPxDesignerReportDialogBase {
    show(tab: ASPxDesignerNavigateTab): void;
    customize(template: string, model: ASPxDesignerDialogModel): void;
    width: KnockoutObservable<any>;
    height: KnockoutObservable<any>;
    template: KnockoutObservable<string>;
    buttons: any[];
    model: KnockoutObservable<ASPxDesignerDialogModel>;
    tab: KnockoutObservable<ASPxDesignerNavigateTab>;
    visible: KnockoutObservable<boolean>;
    cancel(): void;
    title: string;
}
declare class ASPxDesignerSaveDialog extends ASPxDesignerReportDialogBase {
    saveReportDialog: ASPxDesignerSaveAsDialog;
    save(url: string): void;
    notSave(): void;
}
declare class ASPxDesignerSaveAsDialog extends ASPxDesignerReportDialogBase {
    save(url: string): void;
}
declare class ASPxDesignerOpenDialog extends ASPxDesignerReportDialogBase {
    open(url: string): void;
}
declare class ASPxDesignerToolboxItem {
    info: ASPxDesignerElementSerializationInfo[];
    surfaceType: any;
    type: any;
    toolboxIndex: number;
    defaultVal: any;
    popularProperties: string[];
    isToolboxItem: boolean;
}
declare class ASPxDesignerElementSerializationInfoWithBindings extends ASPxDesignerElementSerializationInfo {
    bindingName: string;
}
declare class ASPxDesignerControlsFactory {
    getControlInfo(controlType: string): ASPxDesignerToolboxItem;
    getControlType(model: any): string;
    registerControl(typeName: string, metadata: ASPxDesignerToolboxItem): void;
    getPropertyInfo(controlType: string, propertyDisplayName: string): ASPxDesignerElementSerializationInfo;
    setExpressionBinding(controlType: string, propertyName: string, events: string[], group: string, objectProperties: string[]): void;
    hideExpressionBindings(controlType: string, ... propertyNames: string[]): void;
    inheritControl(parentType: string, extendedOptions: ASPxDesignerToolboxItem): ASPxDesignerToolboxItem;
    createPopularBindingInfo(options: ASPxDesignerElementSerializationInfoWithBindings, isExpression: boolean): ASPxDesignerElementSerializationInfoWithBindings;
}
declare class ASPxDesignerParameterType {
    value: string;
    displayValue: string;
    defaultVal: any;
    specifics: string;
    valueConverter(val: any): any;
}
/**
 * The client-side equivalent of the ASPxClientDocumentViewer control's Document Map.
 */
declare class ASPxClientReportDocumentMap extends ASPxClientControl {
    /**
     * Occurs after the content of the Document Viewer's document map is updated.
     */
    ContentChanged: ASPxClientEvent<ASPxClientEventHandler<ASPxClientReportDocumentMap>>;
}
/**
 * The client-side equivalent of the ASPxClientDocumentViewer control's Parameters Panel.
 */
declare class ASPxClientReportParametersPanel extends ASPxClientControl {
    /**
     * Assigns a value to a parameter of the report displayed in the document viewer.
     * @param parametersInfo An array of ASPxClientReportParameterInfo values specifying parameters and values to assign.
     */
    AssignParameters(parametersInfo: ASPxClientReportParameterInfo[]): void;
    /**
     * Assigns a value to a parameter of the report displayed in the document viewer.
     * @param path A System.String specifying the parameter's path.
     * @param value An object specifying the parameter value.
     */
    AssignParameter(path: string, value: any): void;
    /**
     * Returns an array storing the names of parameters available in a report.
     */
    GetParameterNames(): string[];
    /**
     * Returns a value editor that is associated with a parameter with the specified name. An editor.
     * @param parameterName A String value, specifying the parameter name.
     */
    GetEditorByParameterName(parameterName: string): ASPxClientControl;
}
/**
 * Provides information about a report parameter on the client side.
 */
declare class ASPxClientReportParameterInfo {
    /**
     * Specifies the parameter path, relative to its parent container (e.g., "subreport1.subreportParameter1" for a subreport's parameter, or "parameter1" for a report's parameter).
     */
    Path: string;
    /**
     * Provides access to a parameter value on the client.
     */
    Value: any;
}
/**
 * The client-side equivalent of the ASPxClientDocumentViewer control's toolbar.
 */
declare class ASPxClientReportToolbar extends ASPxClientControl {
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress. An ASPxClientReportToolbar object.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    static Cast(obj: any): ASPxClientReportToolbar;
    /**
     * Provides access to the control template assigned for the specified menu item. A control.
     * @param name A String value, specifying the menu item name.
     */
    GetItemTemplateControl(name: string): ASPxClientControl;
}
/**
 * The client-side equivalent of the ASPxClientDocumentViewer control's ReportViewer.
 */
declare class ASPxClientReportViewer extends ASPxClientControl {
    /**
     * Occurs when a callback for server-side processing is initiated.
     */
    BeginCallback: ASPxClientEvent<ASPxClientBeginCallbackEventHandler<ASPxClientReportViewer>>;
    /**
     * Occurs on the client after a callback's server-side processing has been completed.
     */
    EndCallback: ASPxClientEvent<ASPxClientEndCallbackEventHandler<ASPxClientReportViewer>>;
    /**
     * Fires on the client if any server error occurs during server-side processing of a callback sent by ASPxClientReportViewer.
     */
    CallbackError: ASPxClientEvent<ASPxClientCallbackErrorEventHandler<ASPxClientReportViewer>>;
    /**
     * Occurs on the client side when another report page is loaded into this ASPxClientReportViewer instance.
     */
    PageLoad: ASPxClientEvent<ASPxClientReportViewerPageLoadEventHandler<ASPxClientReportViewer>>;
    /**
     * Submits the values of the specified parameters.
     * @param parameters A dictionary containing the parameter names, along with their Object values.
     */
    SubmitParameters(parameters: { [key: string]: any; }): void;
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress. An object of the ASPxClientReportViewer type. Represents the converted client object specified by the obj parameter.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    static Cast(obj: any): ASPxClientReportViewer;
    /**
     * Prints a report page with the specified page index.
     * @param pageIndex An integer value which specifies an index of the page to be printed.
     */
    Print(pageIndex?: number): void;
    /**
     * Displays a report page with the specified page index in the ReportViewer.
     * @param pageIndex An integer value which specifies the index of a page to be displayed.
     */
    GotoPage(pageIndex: number): void;
    /**
     * Initiates a round trip to the server so that the current page will be reloaded.
     */
    Refresh(): void;
    /**
     * Invokes the Search dialog, which allows end-users to search for specific text in a report.
     */
    Search(): void;
    /**
     * Exports a report to a file of the specified format, and shows it in a new Web Browser window.
     * @param format A string specifying the format, to which a report should be exported.
     */
    SaveToWindow(format: string): void;
    /**
     * Exports a report to a file of the specified format, and saves it to the disk.
     * @param format A string specifying the format, to which a report should be exported.
     */
    SaveToDisk(format: string): void;
    /**
     * Gets a value indicating whether or not searching text across a report is permitted in the web browser.
     */
    IsSearchAllowed(): boolean;
}
/**
 * A method that will handle the ASPxClientReportViewer.PageLoad event.
 * @param source The event sender.
 * @param e An ASPxClientReportViewerPageLoadEventArgs object that contains data related to the event.
 */
interface ASPxClientReportViewerPageLoadEventHandler<Sender> { (source: Sender, e: ASPxClientReportViewerPageLoadEventArgs): void; }
/**
 * Provides data for the ASPxClientReportViewer.PageLoad and ASPxClientDocumentViewer.PageLoad events on the client side.
 */
declare class ASPxClientReportViewerPageLoadEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientReportViewerPageLoadEventArgs class with the specified settings.
     * @param pageIndex An integer value which specifies a zero-based index of a page to be displayed in a report viewer. This value is assigned to the ASPxClientReportViewerPageLoadEventArgs.PageIndex field.
     * @param pageCount An integer value which specifies the total number of pages displayed in a report viewer. This value is assigned to the ASPxClientReportViewerPageLoadEventArgs.PageCount field.
     */
    constructor(pageIndex: number, pageCount: number);
    /**
     * Gets a value specifying a zero-based index of a page to be displayed in a report viewer.
     */
    PageIndex: number;
    /**
     * Gets a value specifying the total number of pages displayed in a report viewer.
     */
    PageCount: number;
    /**
     * Gets a value indicating whether a report page, which is currently loaded into the ASPxClientReportViewer, is the first page of a report.
     */
    IsFirstPage(): boolean;
    /**
     * Gets a value indicating whether a report page, which is currently loaded into the ASPxClientReportViewer, is the last page of a report.
     */
    IsLastPage(): boolean;
}
/**
 * Provides data for the ASPxClientWebDocumentViewer.CustomizeParameterEditors and ASPxClientReportDesigner.CustomizeParameterEditors events.
 */
declare class ASPxClientCustomizeParameterEditorsEventArgs extends ASPxClientEventArgs {
    /**
     * For internal use. Initializes a new instance of the ASPxClientCustomizeParameterEditorsEventArgs class with the specified settings.
     * @param parameter An IParameterDescriptor object.
     * @param info An ISerializationInfo object.
     */
    constructor(parameter: ASPxDesignerElementParameterDescriptor, info: ASPxDesignerElementSerializationInfo);
    /**
     * Provides access to an object that stores information about a parameter.
     */
    parameter: ASPxDesignerElementParameterDescriptor;
    /**
     * Provides access to an object that stores information required to serialize a parameter editor.
     */
    info: ASPxDesignerElementSerializationInfo;
}
/**
 * Provides data for the ASPxClientWebDocumentViewer.OnServerError, ASPxClientReportDesigner.OnServerError and ASPxClientQueryBuilder.OnServerError events.
 */
declare class ASPxClientErrorEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientErrorEventArgs class with the specified settings.
     * @param error An object that provides information about a server-side error. This value is assigned to the Error property.
     */
    constructor(error: any);
    /**
     * Provides access to information about a server-side error.
     */
    Error: any;
}
/**
 * Provides data for the ASPxClientReportDesigner.CustomizeParameterLookUpSource and ASPxClientWebDocumentViewer.CustomizeParameterLookUpSource events.
 */
declare class ASPxClientCustomizeParameterLookUpSourceEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientCustomizeParameterLookUpSourceEventArgs class with the specified settings.
     * @param parameter An IParameterDescriptor object that stores information about a parameter. This value is assigned to the ASPxClientCustomizeParameterLookUpSourceEventArgs.parameter property.
     * @param items An array of IDisplayedValue objects that stores information about look-up parameter values. This value is assigned to the ASPxClientCustomizeParameterLookUpSourceEventArgs.items property.
     */
    constructor(parameter: ASPxDesignerElementParameterDescriptor, items: ASPxDesignerElementEditorItem[]);
    /**
     * Provides access to an object that stores information about a parameter.
     */
    parameter: ASPxDesignerElementParameterDescriptor;
    /**
     * Provides access to the collection of look-up parameter values.
     */
    items: ASPxDesignerElementEditorItem[];
    /**
     * Specifies the data source that provides look-up values for the parameter editor.
     */
    dataSource: any;
}
declare class ASPxClientMenuAction {
    text: string;
    imageClassName: string;
    imageTemplateName: string;
    clickAction: Function;
    disabled: boolean;
    visible: boolean;
    hotKey: ASPxClientMenuActionHotKey;
    hasSeparator: boolean;
    container: string;
}
declare class ASPxClientMenuActionHotKey {
    keyCode: number;
    ctrlKey: boolean;
}
/**
 * Provides data for the ASPxClientReportDesigner.CustomizeMenuActions, ASPxClientReportDesigner.PreviewCustomizeMenuActions and ASPxClientWebDocumentViewer.CustomizeMenuActions.
 */
declare class ASPxClientCustomizeMenuActionsEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientCustomizeMenuActionsEventArgs class with the specified settings.
     * @param actions An array of IAction objects. This array is assigned to the ASPxClientCustomizeMenuActionsEventArgs.Actions property.
     */
    constructor(actions: ASPxClientMenuAction[]);
    /**
     * Provides access to the collection of actions available in the toolbar and menu.
     */
    Actions: ASPxClientMenuAction[];
    /**
     * Returns a menu action with the specified ID. An IAction object.
     * @param actionId A String value that specifies the action ID.
     */
    GetById(actionId: string): ASPxClientMenuAction;
}
/**
 * Provides data for the ASPxClientReportDesigner.CustomizeElements, ASPxClientReportDesigner.PreviewCustomizeElements and ASPxClientWebDocumentViewer.CustomizeElements events.
 */
declare class ASPxClientCustomizeElementsEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientCustomizeElementsEventArgs class with the specified settings.
     * @param elements An array of ASPxReportUIElement objects. This value is assigned to the ASPxClientCustomizeElementsEventArgs.Elements property.
     */
    constructor(elements: ASPxReportUIElement[]);
    /**
     * Provides access to the collection of UI elements.
     */
    Elements: ASPxReportUIElement[];
    /**
     * Returns UI elements with the specified ID. An array of ASPxReportUIElement objects.
     * @param templateId A string that specifies the element ID.
     */
    GetById(templateId: string): ASPxReportUIElement[];
}
declare class ASPxDesignerElementParameterDescriptor {
    description: string;
    name: string;
    type: string;
    value: any;
    visible: boolean;
}
declare class ASPxDesignerElementSerializationInfo {
    propertyName: string;
    displayName: string;
    modelName: string;
    defaultVal: any;
    info: ASPxDesignerElementSerializationInfo[];
    array: boolean;
    link: boolean;
    editor: ASPxDesignerElementEditor;
    valuesArray: ASPxDesignerElementEditorItem[];
    validationRules: any[];
    visible: any;
    disabled: any;
}
declare class ASPxDesignerElementEditor {
    header: string;
    content: string;
    extendedOptions: any;
    editorType: any;
}
declare class ASPxDesignerElementEditorItem {
    value: any;
    displayValue: string;
}
/**
 * Provides information about a UI element of the Web Report Designer or Web Document Viewer.
 */
declare class ASPxReportUIElement {
    /**
     * Provides access to an element model.
     */
    model: any;
    /**
     * Provides access to the name of an HTML template used by an element.
     */
    templateName: string;
}
/**
 * Provides data for the ASPxClientWebDocumentViewer.DocumentReady  and ASPxClientReportDesigner.PreviewDocumentReady events.
 */
declare class ASPxClientWebDocumentViewerDocumentReadyEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientWebDocumentViewerDocumentReadyEventArgs class with the specified settings.
     * @param documentId A string that specifies the report document ID. This value is assigned to the ASPxClientWebDocumentViewerDocumentReadyEventArgs.DocumentId field.
     * @param reportId A string that specifies the report ID. This value is assigned to the ASPxClientWebDocumentViewerDocumentReadyEventArgs.ReportId field.
     * @param pageCount An integer value that specifies the total number of pages in a report document. This value is assigned to the ASPxClientWebDocumentViewerDocumentReadyEventArgs.PageCount field.
     */
    constructor(documentId: string, reportId: string, pageCount: number);
    /**
     * Specifies the report ID.
     */
    ReportId: string;
    /**
     * Specifies the report document ID.
     */
    DocumentId: string;
    /**
     * Specifies the total number of pages in a report document.
     */
    PageCount: number;
}
/**
 * Provides data for the ASPxClientWebDocumentViewer.EditingFieldChanged and ASPxClientReportDesigner.PreviewEditingFieldChanged events.
 */
declare class ASPxClientWebDocumentViewerEditingFieldChangedEventArgs extends ASPxClientEventArgs {
    /**
     * Creates a new instance of the ASPxClientWebDocumentViewerEditingFieldChangedEventArgs class with the specified settings.
     * @param field An editing field whose value has been changed. This value is assigned to the ASPxClientWebDocumentViewerEditingFieldChangedEventArgs.Field property.
     * @param oldValue An object that specifies an editing field's previous value. This value is assigned to the ASPxClientWebDocumentViewerEditingFieldChangedEventArgs.OldValue property.
     * @param newValue An object that specifies an editing field's new value. This value is assigned to the ASPxClientWebDocumentViewerEditingFieldChangedEventArgs.NewValue property.
     */
    constructor(field: ASPxClientWebDocumentViewerEditingField, oldValue: any, newValue: any);
    /**
     * Gets an editing field whose value has been changed.
     */
    Field: ASPxClientWebDocumentViewerEditingField;
    /**
     * Provides access to a previous value of an editing field.
     */
    OldValue: any;
    /**
     * Provides access to a new value of an editing field.
     */
    NewValue: any;
}
declare class ASPxClientWebDocumentViewerEditingField {
    readOnly: KnockoutObservable<boolean>;
    editValue: KnockoutObservable<any>;
    id(): string;
    groupID(): string;
    editorName(): string;
    pageIndex(): number;
}
/**
 * Provides data for the ASPxClientWebDocumentViewer.ParametersSubmitted and ASPxClientReportDesigner.PreviewParametersSubmitted events.
 */
declare class ASPxClientParametersSubmittedEventArgs extends ASPxClientEventArgs {
    constructor(parameters: { [key: string]: any; });
    ParametersViewModel: any;
    Parameters: { [key: string]: any; };
}
/**
 * Provides data for the ASPxClientWebDocumentViewer.ParametersReset and ASPxClientReportDesigner.PreviewParametersReset events.
 */
declare class ASPxClientParametersResetEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientParametersResetEventArgs class with the specified settings.
     * @param parametersModel A View Model object for report parameters. This value is assigned to the ASPxClientParametersResetEventArgs.ParametersViewModel property.
     * @param parameters An array of IParameter objects. This value is assigned to the ASPxClientParametersResetEventArgs.Parameters property.
     */
    constructor(parametersModel: any, parameters: ASPxClientWebDocumentViewerParameter[]);
    /**
     * Provides access to a View Model for report parameters.
     */
    ParametersViewModel: any;
    /**
     * Provides access to report parameters whose values have been reset.
     */
    Parameters: ASPxClientWebDocumentViewerParameter[];
}
declare class ASPxClientWebDocumentViewerParameter {
    getParameterDescriptor(): ASPxDesignerElementParameterDescriptor;
    value: any;
    type: any;
    isMultiValue: boolean;
}
/**
 * Provides data for the ASPxClientWebDocumentViewer.PreviewClick and ASPxClientReportDesigner.PreviewClick events.
 */
declare class ASPxClientPreviewClickEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientPreviewClickEventArgs class with the specified settings.
     * @param pageIndex An integer value that specifies the zero-based index of the page that has been clicked. This value is assigned to the ASPxClientPreviewClickEventArgs.PageIndex property.
     * @param brick An object that provides information on a visual brick representing the content of a report control that has been clicked. This value is assigned to the ASPxClientPreviewClickEventArgs.Brick property.
     */
    constructor(pageIndex: number, brick: ASPxClientWebDocumentViewerBrick);
    /**
     * Gets a value specifying the zero-based index of the page that has been clicked.
     */
    PageIndex: number;
    /**
     * Provides information on a visual brick representing content of a report control that has been clicked.
     */
    Brick: ASPxClientWebDocumentViewerBrick;
    /**
     * Specifies the default function used to handle the ASPxClientWebDocumentViewer.PreviewClick event.
     */
    DefaultHandler(): void;
    /**
     * Returns the text displayed by the ASPxClientPreviewClickEventArgs.Brick.
     */
    GetBrickText(): string;
    /**
     * Returns a string providing additional information about the current ASPxClientPreviewClickEventArgs.Brick by the specified key. A string that provides additional information on the current brick by the specified key.
     * @param key A string that specifies a unique key.
     */
    GetBrickValue(key?: string): string;
    /**
     * Specifies whether or not the event was handled and no default processing is required.
     */
    Handled: boolean;
}
/**
 * Provides data for the ASPxClientWebDocumentViewer.CustomizeExportOptions and ASPxClientReportDesigner.PreviewCustomizeExportOptions events.
 */
declare class ASPxClientCustomizeExportOptionsEventArgs extends ASPxClientEventArgs {
    /**
     * Initializes a new instance of the ASPxClientCustomizeExportOptionsEventArgs class with the specified export options.
     * @param options An object that stores export options.
     */
    constructor(options: any);
    /**
     * Hides the entire <a href="https://devexpress.github.io/dotnet-eud/interface-elements-for-web/articles/document-viewer/exporting/export-a-document.html">Export Options</a> panel from the Web Document Viewer.
     */
    HideExportOptionsPanel(): void;
    /**
     * Hides the specified export format from the Export To drop-down list and the corresponding category from the <a href="https://devexpress.github.io/dotnet-eud/interface-elements-for-web/articles/document-viewer/exporting/export-a-document.html">Export Options</a> panel.
     * @param format An object that specifies the export format to hide.
     */
    HideFormat(format: any): void;
    /**
     * Hides the specified options for the specified export format from the <a href="https://devexpress.github.io/dotnet-eud/interface-elements-for-web/articles/document-viewer/exporting/export-a-document.html">Export Options</a> panel.
     * @param format An object that specifies the export format whose options should be hidden.
     * @param properties An array of properties to hide.
     */
    HideProperties(format: any, ... properties: any[]): void;
    /**
     * Returns the export options model for the specified export format. An export options model.
     * @param format An object that specifies the export format whose model should be returned.
     */
    GetExportOptionsModel(format: any): any;
}
declare class ASPxClientWebDocumentViewerBrick {
    content: { [key: string]: string; };
    navigation: ASPxClientWebDocumentViewerBrickNavigation;
    top: number;
    left: number;
    width: number;
    height: number;
    rtl: boolean;
}
declare class ASPxClientWebDocumentViewerBrickNavigation {
    url: string;
    target: string;
    drillDownKey: string;
}
/**
 * A client-side equivalent of the ASPxWebDocumentViewer class.
 */
declare class ASPxClientWebDocumentViewer extends ASPxClientControl {
    /**
     * Occurs after the Web Document Viewer loads a report document.
     */
    DocumentReady: ASPxClientEvent<ASPxClientWebDocumentViewerDocumentReadyEventHandler<ASPxClientWebDocumentViewer>>;
    /**
     * Occurs each time an editing field's value changes.
     */
    EditingFieldChanged: ASPxClientEvent<ASPxClientWebDocumentViewerEditingFieldChangedEventHandler<ASPxClientWebDocumentViewer>>;
    /**
     * Allows you to customize the Web Document Viewer's UI elements.
     */
    CustomizeElements: ASPxClientEvent<ASPxClientWebDocumentViewerCustomizeElementsEventHandler<ASPxClientWebDocumentViewer>>;
    /**
     * Enables you to customize the Web Document Viewer's menu actions.
     */
    CustomizeMenuActions: ASPxClientEvent<ASPxClientWebDocumentViewerCustomizeMenuActionsEventHandler<ASPxClientWebDocumentViewer>>;
    /**
     * Occurs each time a standard editor is created for a report parameter based on a parameter type.
     */
    CustomizeParameterEditors: ASPxClientEvent<ASPxClientWebDocumentViewerCustomizeParameterEditorsEventHandler<ASPxClientWebDocumentViewer>>;
    /**
     * Occurs each time a look-up editor is created for a report parameter.
     */
    CustomizeParameterLookUpSource: ASPxClientEvent<ASPxClientWebDocumentViewerCustomizeParameterLookUpSourceEventHandler<ASPxClientWebDocumentViewer>>;
    /**
     * Occurs when the left mouse button is clicked on a report document.
     */
    PreviewClick: ASPxClientEvent<ASPxClientWebDocumentViewerPreviewClickEventHandler<ASPxClientWebDocumentViewer>>;
    /**
     * Occurs after report parameter values are reset to their default values.
     */
    ParametersReset: ASPxClientEvent<ASPxClientWebDocumentViewerParametersResetEventHandler<ASPxClientWebDocumentViewer>>;
    /**
     * Occurs after report parameter values are submitted.
     */
    ParametersSubmitted: ASPxClientEvent<ASPxClientWebDocumentViewerParametersSubmittedEventHandler<ASPxClientWebDocumentViewer>>;
    /**
     * Enables you to customize the Web Document Viewer's localization strings.
     */
    CustomizeLocalization: ASPxClientEvent<ASPxClientWebDocumentViewerCustomizeLocalizationEventHandler<ASPxClientWebDocumentViewer>>;
    /**
     * Occurs before the Web Document Viewer UI is initialized.
     */
    BeforeRender: ASPxClientEvent<ASPxClientWebDocumentViewerBeforeRenderEventHandler<ASPxClientWebDocumentViewer>>;
    /**
     * Allows you to customize the Web Document Viewer's available export formats and corresponding export options.
     */
    CustomizeExportOptions: ASPxClientEvent<ASPxClientWebDocumentViewerCustomizeExportOptionsEventHandler<ASPxClientWebDocumentViewer>>;
    /**
     * Occurs on the client each time a server-side error raises.
     */
    OnServerError: ASPxClientEvent<ASPxClientWebDocumentViewerErrorEventHandler<ASPxClientWebDocumentViewer>>;
    /**
     * Provides access to the Document Viewer's client-side model.
     */
    GetPreviewModel(): ASPxClientSidePreviewModel;
    /**
     * Provides access to the report preview.
     */
    GetReportPreview(): ASPxClientReportPreview;
    /**
     * Provide access to the report parameters' client-side model.
     */
    GetParametersModel(): ASPxClientSideParametersModel;
    /**
     * Enables navigation between drill-through reports on the client-side. A Deferred Promise object.
     * @param customData Provides access to custom client data associated with a currently previewed report.
     */
    DrillThrough(customData: string): JQueryPromise<any>;
    /**
     * Opens the specified report on the Web Document Viewer's client side. A Deferred Promise object.
     * @param url A string that specifies the URL of a report to be opened.
     */
    OpenReport(url: string): JQueryPromise<any>;
    /**
     * Prints the document's page with the specified index.
     * @param pageIndex An index of the page to be printed.
     */
    Print(pageIndex?: number): void;
    /**
     * Exports the document to a specified file format.
     * @param format A String value that specifies the export format. The following formats are currently supported: 'csv', 'html', 'image', 'mht', 'pdf', 'rtf', 'docx', 'txt', 'xls', and 'xlsx'.
     * @param inlineResult true, to try opening the result file in a new browser tab without a download; otherwise, false.
     */
    ExportTo(format?: string, inlineResult?: boolean): void;
    /**
     * Returns the current page's zero-based index.
     */
    GetCurrentPageIndex(): number;
    /**
     * Displays the report page with the specified page index.
     * @param pageIndex A zero-based integer value that specifies the index of a page to be displayed.
     */
    GoToPage(pageIndex: number): void;
    /**
     * Closes the document which is currently opened in the Web Document Viewer.
     */
    Close(): void;
    /**
     * Resets the report parameter values to the default values.
     */
    ResetParameters(): void;
    /**
     * Starts building a report document.
     */
    StartBuild(): void;
    /**
     * Performs a custom operation with a currently opened document on the client-side. A Deferred Promise object.
     * @param customData Provides access to custom client data associated with a target document operation.
     * @param hideMessageFromUser true, to hide a message with the operation result from a user; otherwise, false.
     */
    PerformCustomDocumentOperation(customData?: string, hideMessageFromUser?: boolean): JQueryPromise<ASPxClientWebDocumentViewerDocumentOperationResponse>;
    /**
     * Updates the Web Document Viewer properties' localization settings.
     * @param localization A dictionary containing the property names, along with their localized equivalents.
     */
    UpdateLocalization(localization: { [key: string]: string; }): void;
    /**
     * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress. An ASPxClientWebDocumentViewer object.
     * @param obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
     */
    static Cast(obj: any): ASPxClientWebDocumentViewer;
}
/**
 * A method that will handle the ASPxClientWebDocumentViewer.EditingFieldChanged or ASPxClientReportDesigner.PreviewEditingFieldChanged event.
 * @param source The event sender.
 * @param e An ASPxClientWebDocumentViewerEditingFieldChangedEventArgs object that contains data related to the event.
 */
interface ASPxClientWebDocumentViewerEditingFieldChangedEventHandler<Sender> { (source: Sender, e: ASPxClientWebDocumentViewerEditingFieldChangedEventArgs): void; }
/**
 * A method that will handle the ASPxClientWebDocumentViewer.DocumentReady or ASPxClientReportDesigner.PreviewDocumentReady event.
 * @param source The event sender.
 * @param e An ASPxClientWebDocumentViewerDocumentReadyEventArgs object that contains data related to the event.
 */
interface ASPxClientWebDocumentViewerDocumentReadyEventHandler<Sender> { (source: Sender, e: ASPxClientWebDocumentViewerDocumentReadyEventArgs): void; }
/**
 * A method that will handle the ASPxClientWebDocumentViewer.CustomizeElements or ASPxClientReportDesigner.PreviewCustomizeElements event.
 * @param source The event sender.
 * @param e An ASPxClientCustomizeElementsEventArgs object that contains data related to the event.
 */
interface ASPxClientWebDocumentViewerCustomizeElementsEventHandler<Sender> { (source: Sender, e: ASPxClientCustomizeElementsEventArgs): void; }
/**
 * A method that will handle the ASPxClientWebDocumentViewer.CustomizeMenuActions event.
 * @param source The event sender.
 * @param e An ASPxClientCustomizeMenuActionsEventArgs object that contains data related to the event.
 */
interface ASPxClientWebDocumentViewerCustomizeMenuActionsEventHandler<Sender> { (source: Sender, e: ASPxClientCustomizeMenuActionsEventArgs): void; }
/**
 * A method that will handle the ASPxClientWebDocumentViewer.CustomizeParameterEditors event.
 * @param source The event sender.
 * @param e An ASPxClientCustomizeParameterEditorsEventArgs object that contains data related to the event.
 */
interface ASPxClientWebDocumentViewerCustomizeParameterEditorsEventHandler<Sender> { (source: Sender, e: ASPxClientCustomizeParameterEditorsEventArgs): void; }
/**
 * A method that will handle the ASPxClientWebDocumentViewer.CustomizeParameterLookUpSource event.
 * @param source The event sender.
 * @param e An ASPxClientCustomizeParameterLookUpSourceEventArgs object that contains data related to the event.
 */
interface ASPxClientWebDocumentViewerCustomizeParameterLookUpSourceEventHandler<Sender> { (source: Sender, e: ASPxClientCustomizeParameterLookUpSourceEventArgs): void; }
/**
 * A method that will handle the ASPxClientWebDocumentViewer.PreviewClick or ASPxClientReportDesigner.PreviewClick event.
 * @param source The event sender.
 * @param e An ASPxClientPreviewClickEventArgs object that contains data related to the event.
 */
interface ASPxClientWebDocumentViewerPreviewClickEventHandler<Sender> { (source: Sender, e: ASPxClientPreviewClickEventArgs): void; }
/**
 * A method that will handle the ASPxClientWebDocumentViewer.ParametersReset or ASPxClientReportDesigner.PreviewParametersReset event.
 * @param source The event sender.
 * @param e An ASPxClientParametersResetEventArgs object that contains data related to the event.
 */
interface ASPxClientWebDocumentViewerParametersResetEventHandler<Sender> { (source: Sender, e: ASPxClientParametersResetEventArgs): void; }
/**
 * A method that will handle the ASPxClientWebDocumentViewer.ParametersSubmitted or ASPxClientReportDesigner.PreviewParametersSubmitted event.
 * @param source The event sender.
 * @param e An ASPxClientParametersSubmittedEventArgs object that contains data related to the event.
 */
interface ASPxClientWebDocumentViewerParametersSubmittedEventHandler<Sender> { (source: Sender, e: ASPxClientParametersSubmittedEventArgs): void; }
/**
 * A method that will handle the ASPxClientWebDocumentViewer.CustomizeLocalization event.
 * @param source The event sender.
 */
interface ASPxClientWebDocumentViewerCustomizeLocalizationEventHandler<Sender> { (source: Sender): void; }
/**
 * A method that will handle the ASPxClientWebDocumentViewer.BeforeRender event.
 * @param source The event sender.
 * @param previewModel A client-side Document Viewer model.
 */
interface ASPxClientWebDocumentViewerBeforeRenderEventHandler<Sender> { (source: Sender, previewModel: any): void; }
/**
 * A method that will handle the ASPxClientWebDocumentViewer.CustomizeExportOptions event.
 * @param source The event sender.
 * @param e An ASPxClientCustomizeExportOptionsEventArgs object that contains data related to the event.
 */
interface ASPxClientWebDocumentViewerCustomizeExportOptionsEventHandler<Sender> { (source: Sender, e: ASPxClientCustomizeExportOptionsEventArgs): void; }
/**
 * A method that will handle the ASPxClientWebDocumentViewer.OnServerError event.
 * @param source The event sender.
 * @param e An ASPxClientErrorEventArgs object that contains data related to the event.
 */
interface ASPxClientWebDocumentViewerErrorEventHandler<Sender> { (source: Sender, e: ASPxClientErrorEventArgs): void; }
declare class ASPxClientWebDocumentViewerDocumentOperationResponse {
    succeeded: boolean;
    message: string;
    customData: string;
    documentId: string;
}
declare class ASPxClientSidePreviewModel {
    OpenReport(url: string): JQueryPromise<any>;
    Print(pageIndex?: number): void;
    ExportTo(format?: string, inlineResult?: boolean): void;
    GetCurrentPageIndex(): number;
    GoToPage(pageIndex: number): void;
    Close(): void;
    ResetParameters(): void;
    StartBuild(): void;
    GetParametersModel(): ASPxClientSideParametersModel;
    reportPreview: ASPxClientReportPreview;
    tabPanel: ASPxClientDocumentPreviewTabPanel;
}
declare class ASPxClientDocumentPreviewTabPanel {
    width: KnockoutObservable<any>;
    collapsed: KnockoutObservable<boolean>;
    tabs: ASPxClientDocumentPreviewTab[];
}
declare class ASPxClientDocumentPreviewTab {
    template: string;
    text: string;
    model: any;
    active: KnockoutObservable<boolean>;
    visible: KnockoutObservable<boolean>;
}
declare class ASPxClientSideParametersModel {
    submit(): void;
    serializeParameters(): void;
    tabInfo: ASPxClientDocumentPreviewTab;
}
declare class ASPxClientReportPreview {
    zoom: KnockoutObservable<number>;
    showMultipagePreview: KnockoutObservable<boolean>;
    pageIndex: KnockoutObservable<number>;
    pages: KnockoutObservableArray<any>;
    documentBuilding: KnockoutObservable<boolean>;
}
