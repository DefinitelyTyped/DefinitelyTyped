// Type definitions for non-npm package Google Android Management API v1 1.0
// Project: https://developers.google.com/android/management
// Definitions by: Bolisov Alexey <https://github.com/Bolisov>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.3

// IMPORTANT
// This file was generated by https://github.com/Bolisov/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Bolisov/google-api-typings-generator
// Generated from: https://androidmanagement.googleapis.com/$discovery/rest?version=v1

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Android Management API v1 */
    function load(name: "androidmanagement", version: "v1"): PromiseLike<void>;
    function load(name: "androidmanagement", version: "v1", callback: () => any): void;

    const enterprises: androidmanagement.EnterprisesResource;

    const signupUrls: androidmanagement.SignupUrlsResource;

    namespace androidmanagement {
        interface ApiLevelCondition {
            /**
             * The minimum desired Android Framework API level. If the device does not meet the minimum requirement, this condition is satisfied. Must be greater than
             * zero.
             */
            minApiLevel?: number;
        }
        interface Application {
            /** The set of managed properties available to be pre-configured for the application. */
            managedProperties?: ManagedProperty[];
            /** The name of the application in the form enterprises/{enterpriseId}/applications/{package_name} */
            name?: string;
            /** The permissions required by the app. */
            permissions?: ApplicationPermission[];
            /** The title of the application. Localized. */
            title?: string;
        }
        interface ApplicationPermission {
            /** A longer description of the permission, giving more details of what it affects. Localized. */
            description?: string;
            /** The name of the permission. Localized. */
            name?: string;
            /** An opaque string uniquely identifying the permission. Not localized. */
            permissionId?: string;
        }
        interface ApplicationPolicy {
            /**
             * The default policy for all permissions requested by the app. If specified, this overrides the policy-level default_permission_policy which applies to
             * all apps.
             */
            defaultPermissionPolicy?: string;
            /** The type of installation to perform. */
            installType?: string;
            /** Whether the application is allowed to lock itself in full-screen mode. */
            lockTaskAllowed?: boolean;
            /**
             * Managed configuration applied to the app. The format for the configuration is dictated by the ManagedProperty values supported by the app. Each field
             * name in the managed configuration must match the key field of the ManagedProperty. The field value must be compatible with the type of the
             * ManagedProperty: <table> <tr><td><i>type</i></td><td><i>JSON value</i></td></tr> <tr><td>BOOL</td><td>true or false</td></tr>
             * <tr><td>STRING</td><td>string</td></tr> <tr><td>INTEGER</td><td>number</td></tr> <tr><td>CHOICE</td><td>string</td></tr>
             * <tr><td>MULTISELECT</td><td>array of strings</td></tr> <tr><td>HIDDEN</td><td>string</td></tr> <tr><td>BUNDLE_ARRAY</td><td>array of objects</td></tr>
             * </table>
             */
            managedConfiguration?: Record<string, any>;
            /** The package name of the app, e.g. com.google.android.youtube for the YouTube app. */
            packageName?: string;
            /** Explicit permission grants or denials for the app. These values override the default_permission_policy. */
            permissionGrants?: PermissionGrant[];
        }
        interface Command {
            /** The timestamp at which the command was created. The timestamp is automatically generated by the server. */
            createTime?: string;
            /**
             * The duration for which the command is valid. The command will expire if not executed by the device during this time. The default duration if
             * unspecified is ten minutes. There is no maximum duration.
             */
            duration?: string;
            /** For commands of type RESET_PASSWORD, optionally specifies the new password. */
            newPassword?: string;
            /** For commands of type RESET_PASSWORD, optionally specifies flags. */
            resetPasswordFlags?: string[];
            /** The type of the command. */
            type?: string;
        }
        interface ComplianceRule {
            /** A condition which is satisfied if the Android Framework API level on the device does not meet a minimum requirement. */
            apiLevelCondition?: ApiLevelCondition;
            /**
             * If set to true, the rule includes a mitigating action to disable applications so that the device is effectively disabled, but application data is
             * preserved. If the device is running an app in locked task mode, the app will be closed and a UI showing the reason for non-compliance will be
             * displayed.
             */
            disableApps?: boolean;
            /** A condition which is satisfied if there exists any matching NonComplianceDetail for the device. */
            nonComplianceDetailCondition?: NonComplianceDetailCondition;
        }
        interface Device {
            /** The API level of the Android platform version running on the device. */
            apiLevel?: number;
            /** The name of the policy that is currently applied by the device. */
            appliedPolicyName?: string;
            /** The version of the policy that is currently applied by the device. */
            appliedPolicyVersion?: string;
            /** The state that is currently applied by the device. */
            appliedState?: string;
            /**
             * If the device state is DISABLED, an optional message that is displayed on the device indicating the reason the device is disabled. This field may be
             * modified by an update request.
             */
            disabledReason?: UserFacingMessage;
            /** Displays on the device. This information is only available when displayInfoEnabled is true in the device's policy. */
            displays?: Display[];
            /** The time of device enrollment. */
            enrollmentTime?: string;
            /** If this device was enrolled with an enrollment token with additional data provided, this field contains that data. */
            enrollmentTokenData?: string;
            /** If this device was enrolled with an enrollment token, this field contains the name of the token. */
            enrollmentTokenName?: string;
            /** Detailed information about the device hardware. */
            hardwareInfo?: HardwareInfo;
            /** Hardware status samples in chronological order. This information is only available when hardwareStatusEnabled is true in the device's policy. */
            hardwareStatusSamples?: HardwareStatus[];
            /** The last time the device sent a policy compliance report. */
            lastPolicyComplianceReportTime?: string;
            /** The last time the device fetched its policy. */
            lastPolicySyncTime?: string;
            /** The last time the device sent a status report. */
            lastStatusReportTime?: string;
            /**
             * Events related to memory and storage measurements in chronological order. This information is only available when memoryInfoEnabled is true in the
             * device's policy.
             */
            memoryEvents?: MemoryEvent[];
            /** Memory information. This information is only available when memoryInfoEnabled is true in the device's policy. */
            memoryInfo?: MemoryInfo;
            /** The name of the device in the form enterprises/{enterpriseId}/devices/{deviceId} */
            name?: string;
            /** Device network information. This information is only available when networkInfoEnabled is true in the device's policy. */
            networkInfo?: NetworkInfo;
            /** Details about policy settings for which the device is not in compliance. */
            nonComplianceDetails?: NonComplianceDetail[];
            /** Whether the device is compliant with its policy. */
            policyCompliant?: boolean;
            /**
             * The name of the policy that is intended to be applied to the device. If empty, the policy with id default is applied. This field may be modified by an
             * update request. The name of the policy is in the form enterprises/{enterpriseId}/policies/{policyId}. It is also permissible to only specify the
             * policyId when updating this field as long as the policyId contains no slashes since the rest of the policy name can be inferred from context.
             */
            policyName?: string;
            /**
             * Power management events on the device in chronological order. This information is only available when powerManagementEventsEnabled is true in the
             * device's policy.
             */
            powerManagementEvents?: PowerManagementEvent[];
            /**
             * The previous device names used for the same physical device when it has been enrolled multiple times. The serial number is used as the unique
             * identifier to determine if the same physical device has enrolled previously. The names are in chronological order.
             */
            previousDeviceNames?: string[];
            /** Detailed information about the device software. This information is only available when softwareInfoEnabled is true in the device's policy. */
            softwareInfo?: SoftwareInfo;
            /**
             * The state that is intended to be applied to the device. This field may be modified by an update request. Note that UpdateDevice only handles toggling
             * between ACTIVE and DISABLED states. Use the delete device method to cause the device to enter the DELETED state.
             */
            state?: string;
            /**
             * The resource name of the user of the device in the form enterprises/{enterpriseId}/users/{userId}. This is the name of the device account automatically
             * created for this device.
             */
            userName?: string;
        }
        interface Display {
            /** Display density expressed as dots-per-inch. */
            density?: number;
            /** Unique display id. */
            displayId?: number;
            /** Display height in pixels. */
            height?: number;
            /** Name of the display. */
            name?: string;
            /** Refresh rate of the display in frames per second. */
            refreshRate?: number;
            /** State of the display. */
            state?: string;
            /** Display width in pixels. */
            width?: number;
        }
        interface EnrollmentToken {
            /**
             * Optional, arbitrary data associated with the enrollment token. This could contain, for example, the id of an org unit to which the device is assigned
             * after enrollment. After a device enrolls with the token, this data will be exposed in the enrollment_token_data field of the Device resource. The data
             * must be 1024 characters or less; otherwise, the creation request will fail.
             */
            additionalData?: string;
            /** The duration of the token. If not specified, the duration will be 1 hour. The allowed range is 1 minute to 30 days. */
            duration?: string;
            /** The expiration time of the token. This is a read-only field generated by the server. */
            expirationTimestamp?: string;
            /**
             * The name of the enrollment token, which is generated by the server during creation, in the form
             * enterprises/{enterpriseId}/enrollmentTokens/{enrollmentTokenId}
             */
            name?: string;
            /**
             * The name of the policy that will be initially applied to the enrolled device in the form enterprises/{enterpriseId}/policies/{policyId}. If not
             * specified, the policy with id default is applied. It is permissible to only specify the policyId when updating this field as long as the policyId
             * contains no slashes since the rest of the policy name can be inferred from context.
             */
            policyName?: string;
            /**
             * A JSON string whose UTF-8 representation can be used to generate a QR code to enroll a device with this enrollment token. To enroll a device using NFC,
             * the NFC record must contain a serialized java.util.Properties representation of the properties in the JSON.
             */
            qrCode?: string;
            /** The token value which is passed to the device and authorizes the device to enroll. This is a read-only field generated by the server. */
            value?: string;
        }
        interface Enterprise {
            /**
             * Whether app auto-approval is enabled. When enabled, apps installed via policy for this enterprise have all permissions automatically approved. When
             * enabled, it is the caller's responsibility to display the permissions required by an app to the enterprise admin before setting the app to be installed
             * in a policy.
             */
            appAutoApprovalEnabled?: boolean;
            /** The notification types to enable via Google Cloud Pub/Sub. */
            enabledNotificationTypes?: string[];
            /** The name of the enterprise as it will appear to users. */
            enterpriseDisplayName?: string;
            /**
             * An image displayed as a logo during device provisioning. Supported types are: image/bmp, image/gif, image/x-ico, image/jpeg, image/png, image/webp,
             * image/vnd.wap.wbmp, image/x-adobe-dng.
             */
            logo?: ExternalData;
            /** The name of the enterprise which is generated by the server during creation, in the form enterprises/{enterpriseId} */
            name?: string;
            /**
             * A color in RGB format indicating the predominant color to display in the device management app UI. The color components are stored as follows: (red <<
             * 16) | (green << 8) | blue, where each component may take a value between 0 and 255 inclusive.
             */
            primaryColor?: number;
            /**
             * When Cloud Pub/Sub notifications are enabled, this field is required to indicate the topic to which the notifications will be published. The format of
             * this field is projects/{project}/topics/{topic}. You must have granted the publish permission on this topic to
             * android-cloud-policy@system.gserviceaccount.com
             */
            pubsubTopic?: string;
        }
        interface ExternalData {
            /** The base-64 encoded SHA-256 hash of the content hosted at url. If the content does not match this hash, Android Device Policy will not use the data. */
            sha256Hash?: string;
            /**
             * The absolute URL to the data, which must use either the http or https scheme. Android Device Policy does not provide any credentials in the GET
             * request, so the URL must be publicly accessible. Including a long, random component in the URL may be used to prevent attackers from discovering the
             * URL.
             */
            url?: string;
        }
        interface HardwareInfo {
            /** Battery shutdown temperature thresholds in Celsius for each battery on the device. */
            batteryShutdownTemperatures?: number[];
            /** Battery throttling temperature thresholds in Celsius for each battery on the device. */
            batteryThrottlingTemperatures?: number[];
            /** Brand of the device, e.g. Google. */
            brand?: string;
            /** CPU shutdown temperature thresholds in Celsius for each CPU on the device. */
            cpuShutdownTemperatures?: number[];
            /** CPU throttling temperature thresholds in Celsius for each CPU on the device. */
            cpuThrottlingTemperatures?: number[];
            /** Baseband version, e.g. MDM9625_104662.22.05.34p. */
            deviceBasebandVersion?: string;
            /** GPU shutdown temperature thresholds in Celsius for each GPU on the device. */
            gpuShutdownTemperatures?: number[];
            /** GPU throttling temperature thresholds in Celsius for each GPU on the device. */
            gpuThrottlingTemperatures?: number[];
            /** Name of the hardware, e.g. Angler. */
            hardware?: string;
            /** Manufacturer, e.g. Motorola. */
            manufacturer?: string;
            /** The model of the device, e.g. Asus Nexus 7. */
            model?: string;
            /** The device serial number. */
            serialNumber?: string;
            /** Device skin shutdown temperature thresholds in Celsius. */
            skinShutdownTemperatures?: number[];
            /** Device skin throttling temperature thresholds in Celsius. */
            skinThrottlingTemperatures?: number[];
        }
        interface HardwareStatus {
            /** Current battery temperatures in Celsius for each battery on the device. */
            batteryTemperatures?: number[];
            /** Current CPU temperatures in Celsius for each CPU on the device. */
            cpuTemperatures?: number[];
            /**
             * CPU usages in percentage for each core available on the device. Usage is 0 for each unplugged core. Empty array implies that CPU usage is not supported
             * in the system.
             */
            cpuUsages?: number[];
            /** The time the measurements were taken. */
            createTime?: string;
            /** Fan speeds in RPM for each fan on the device. Empty array means that there are no fans or fan speed is not supported on the system. */
            fanSpeeds?: number[];
            /** Current GPU temperatures in Celsius for each GPU on the device. */
            gpuTemperatures?: number[];
            /** Current device skin temperatures in Celsius. */
            skinTemperatures?: number[];
        }
        interface ListDevicesResponse {
            /** The list of devices. */
            devices?: Device[];
            /** If there are more results, a token to retrieve next page of results. */
            nextPageToken?: string;
        }
        interface ListOperationsResponse {
            /** The standard List next-page token. */
            nextPageToken?: string;
            /** A list of operations that matches the specified filter in the request. */
            operations?: Operation[];
        }
        interface ListPoliciesResponse {
            /** If there are more results, a token to retrieve next page of results. */
            nextPageToken?: string;
            /** The list of policies. */
            policies?: Policy[];
        }
        interface ManagedProperty {
            /** The default value of the properties. BUNDLE_ARRAY properties never have a default value. */
            defaultValue?: any;
            /** A longer description of the property, giving more detail of what it affects. Localized. */
            description?: string;
            /** For CHOICE or MULTISELECT properties, the list of possible entries. */
            entries?: ManagedPropertyEntry[];
            /** The unique key that the application uses to identify the property, e.g. "com.google.android.gm.fieldname". */
            key?: string;
            /** For BUNDLE_ARRAY properties, the list of nested properties. A BUNDLE_ARRAY property is at most two levels deep. */
            nestedProperties?: ManagedProperty[];
            /** The name of the property. Localized. */
            title?: string;
            /** The type of the property. */
            type?: string;
        }
        interface ManagedPropertyEntry {
            /** The human-readable name of the value. Localized. */
            name?: string;
            /** The machine-readable value of the entry, which should be used in the configuration. Not localized. */
            value?: string;
        }
        interface MemoryEvent {
            /** The number of free bytes in the medium, or for EXTERNAL_STORAGE_DETECTED, the total capacity in bytes of the storage medium. */
            byteCount?: string;
            /** The creation time of the event. */
            createTime?: string;
            /** Event type. */
            eventType?: string;
        }
        interface MemoryInfo {
            /** Total internal storage on device in bytes. */
            totalInternalStorage?: string;
            /** Total RAM on device in bytes. */
            totalRam?: string;
        }
        interface NetworkInfo {
            /** IMEI number of the GSM device, e.g. A1000031212. */
            imei?: string;
            /** MEID number of the CDMA device, e.g. A00000292788E1. */
            meid?: string;
            /** WiFi MAC address of the device, e.g. 7c:11:11:11:11:11. */
            wifiMacAddress?: string;
        }
        interface NonComplianceDetail {
            /** If the policy setting could not be applied, the current value of the setting on the device. */
            currentValue?: any;
            /**
             * For settings with nested fields, if a particular nested field is out of compliance, this specifies the full path to the offending field. The path is
             * formatted in the same way the policy JSON field would be referenced in JavaScript, that is: 1) For object-typed fields, the field name is followed by a
             * dot then by a  subfield name. 2) For array-typed fields, the field name is followed by the array index  enclosed in brackets. For example, to indicate
             * a problem with the url field in the externalData field in the 3rd application, the path would be applications[2].externalData.url
             */
            fieldPath?: string;
            /**
             * If package_name is set and the non-compliance reason is APP_NOT_INSTALLED or APP_NOT_UPDATED, the detailed reason the app cannot be installed or
             * updated.
             */
            installationFailureReason?: string;
            /** The reason the device is not in compliance with the setting. */
            nonComplianceReason?: string;
            /** The package name indicating which application is out of compliance, if applicable. */
            packageName?: string;
            /** The name of the policy setting. This is the JSON field name of a top-level Policy  field. */
            settingName?: string;
        }
        interface NonComplianceDetailCondition {
            /** The reason the device is not in compliance with the setting. If not set, then this condition matches any reason. */
            nonComplianceReason?: string;
            /** The package name indicating which application is out of compliance. If not set, then this condition matches any package name. */
            packageName?: string;
            /** The name of the policy setting. This is the JSON field name of a top-level Policy field. If not set, then this condition matches any setting name. */
            settingName?: string;
        }
        interface Operation {
            /** If the value is false, it means the operation is still in progress. If true, the operation is completed, and either error or response is available. */
            done?: boolean;
            /** The error result of the operation in case of failure or cancellation. */
            error?: Status;
            /**
             * Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some
             * services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
             */
            metadata?: Record<string, any>;
            /**
             * The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the name should
             * have the format of operations/some/unique/name.
             */
            name?: string;
            /**
             * The normal response of the operation in case of success. If the original method returns no data on success, such as Delete, the response is
             * google.protobuf.Empty. If the original method is standard Get/Create/Update, the response should be the resource. For other methods, the response
             * should have the type XxxResponse, where Xxx is the original method name. For example, if the original method name is TakeSnapshot(), the inferred
             * response type is TakeSnapshotResponse.
             */
            response?: Record<string, any>;
        }
        interface PasswordRequirements {
            /** A device will be wiped after too many incorrect device-unlock passwords have been entered. A value of 0 means there is no restriction. */
            maximumFailedPasswordsForWipe?: number;
            /** Password expiration timeout. */
            passwordExpirationTimeout?: string;
            /**
             * The length of the password history. After setting this, the user will not be able to enter a new password that is the same as any password in the
             * history. A value of 0 means there is no restriction.
             */
            passwordHistoryLength?: number;
            /**
             * The minimum allowed password length. A value of 0 means there is no restriction. Only enforced when password_quality is NUMERIC, NUMERIC_COMPLEX,
             * ALPHABETIC, ALPHANUMERIC, or COMPLEX.
             */
            passwordMinimumLength?: number;
            /** Minimum number of letters required in the password. Only enforced when password_quality is COMPLEX. */
            passwordMinimumLetters?: number;
            /** Minimum number of lower case letters required in the password. Only enforced when password_quality is COMPLEX. */
            passwordMinimumLowerCase?: number;
            /** Minimum number of non-letter characters (numerical digits or symbols) required in the password. Only enforced when password_quality is COMPLEX. */
            passwordMinimumNonLetter?: number;
            /** Minimum number of numerical digits required in the password. Only enforced when password_quality is COMPLEX. */
            passwordMinimumNumeric?: number;
            /** Minimum number of symbols required in the password. Only enforced when password_quality is COMPLEX. */
            passwordMinimumSymbols?: number;
            /** Minimum number of upper case letters required in the password. Only enforced when password_quality is COMPLEX. */
            passwordMinimumUpperCase?: number;
            /** The required password quality. */
            passwordQuality?: string;
        }
        interface PermissionGrant {
            /** The android permission, e.g. android.permission.READ_CALENDAR. */
            permission?: string;
            /** The policy for granting the permission. */
            policy?: string;
        }
        interface PersistentPreferredActivity {
            /**
             * The intent actions to match in the filter. If any actions are included in the filter, then an intent's action must be one of those values for it to
             * match. If no actions are included, the intent action is ignored.
             */
            actions?: string[];
            /**
             * The intent categories to match in the filter. An intent includes the categories that it requires, all of which must be included in the filter in order
             * to match. In other words, adding a category to the filter has no impact on matching unless that category is specified in the intent.
             */
            categories?: string[];
            /**
             * The activity that should be the default intent handler. This should be an Android component name, e.g. com.android.enterprise.app/.MainActivity.
             * Alternatively, the value may be the package name of an app, which causes Android Device Policy to choose an appropriate activity from the app to handle
             * the intent.
             */
            receiverActivity?: string;
        }
        interface Policy {
            /** Whether adding new users and profiles is disabled. */
            addUserDisabled?: boolean;
            /** Whether adjusting the master volume is disabled. */
            adjustVolumeDisabled?: boolean;
            /** Policy applied to apps. */
            applications?: ApplicationPolicy[];
            /** Whether auto time is required, which prevents the user from manually setting the date and time. */
            autoTimeRequired?: boolean;
            /**
             * Whether applications other than the ones configured in applications are blocked from being installed. When set, applications that were installed under
             * a previous policy but no longer appear in the policy are automatically uninstalled.
             */
            blockApplicationsEnabled?: boolean;
            /** Whether all cameras on the device are disabled. */
            cameraDisabled?: boolean;
            /**
             * Rules declaring which mitigating actions to take when a device is not compliant with its policy. When the conditions for multiple rules are satisfied,
             * all of the mitigating actions for the rules are taken. There is a maximum limit of 100 rules.
             */
            complianceRules?: ComplianceRule[];
            /** Whether the user is allowed to enable debugging features. */
            debuggingFeaturesAllowed?: boolean;
            /** The default permission policy for requests for runtime permissions. */
            defaultPermissionPolicy?: string;
            /** Whether factory resetting from settings is disabled. */
            factoryResetDisabled?: boolean;
            /**
             * Email addresses of device administrators for factory reset protection. When the device is factory reset, it will require one of these admins to log in
             * with the Google account email and password to unlock the device. If no admins are specified, the device will not provide factory reset protection.
             */
            frpAdminEmails?: string[];
            /** Whether the user is allowed to have fun. Controls whether the Easter egg game in Settings is disabled. */
            funDisabled?: boolean;
            /** Whether the user is allowed to enable the "Unknown Sources" setting, which allows installation of apps from unknown sources. */
            installUnknownSourcesAllowed?: boolean;
            /** Whether the keyguard is disabled. */
            keyguardDisabled?: boolean;
            /** Maximum time in milliseconds for user activity until the device will lock. A value of 0 means there is no restriction. */
            maximumTimeToLock?: string;
            /** Whether adding or removing accounts is disabled. */
            modifyAccountsDisabled?: boolean;
            /** The name of the policy in the form enterprises/{enterpriseId}/policies/{policyId} */
            name?: string;
            /**
             * Whether the network escape hatch is enabled. If a network connection can't be made at boot time, the escape hatch prompts the user to temporarily
             * connect to a network in order to refresh the device policy. After applying policy, the temporary network will be forgotten and the device will continue
             * booting. This prevents being unable to connect to a network if there is no suitable network in the last policy and the device boots into an app in lock
             * task mode, or the user is otherwise unable to reach device settings.
             */
            networkEscapeHatchEnabled?: boolean;
            /** Network configuration for the device. See configure networks for more information. */
            openNetworkConfiguration?: Record<string, any>;
            /** Password requirements. */
            passwordRequirements?: PasswordRequirements;
            /** Default intent handler activities. */
            persistentPreferredActivities?: PersistentPreferredActivity[];
            /** Whether removing other users is disabled. */
            removeUserDisabled?: boolean;
            /** Whether rebooting the device into safe boot is disabled. */
            safeBootDisabled?: boolean;
            /** Whether screen capture is disabled. */
            screenCaptureDisabled?: boolean;
            /** Whether the status bar is disabled. This disables notifications, quick settings and other screen overlays that allow escape from full-screen mode. */
            statusBarDisabled?: boolean;
            /** Status reporting settings */
            statusReportingSettings?: StatusReportingSettings;
            /**
             * The battery plugged in modes for which the device stays on. When using this setting, it is recommended to clear maximum_time_to_lock so that the device
             * doesn't lock itself while it stays on.
             */
            stayOnPluggedModes?: string[];
            /**
             * The system update policy, which controls how OS updates are applied. If the update type is WINDOWED and the device has a device account, the update
             * window will automatically apply to Play app updates as well.
             */
            systemUpdate?: SystemUpdate;
            /** Whether the microphone is muted and adjusting microphone volume is disabled. */
            unmuteMicrophoneDisabled?: boolean;
            /** The version of the policy. This is a read-only field. The version is incremented each time the policy is updated. */
            version?: string;
            /** Whether configuring WiFi access points is disabled. */
            wifiConfigDisabled?: boolean;
            /** Whether WiFi networks defined in Open Network Configuration are locked so they cannot be edited by the user. */
            wifiConfigsLockdownEnabled?: boolean;
        }
        interface PowerManagementEvent {
            /** For BATTERY_LEVEL_COLLECTED events, the battery level as a percentage. */
            batteryLevel?: number;
            /** The creation time of the event. */
            createTime?: string;
            /** Event type. */
            eventType?: string;
        }
        interface SignupUrl {
            /** The name of the resource. This must be included in the create enterprise request at the end of the signup flow. */
            name?: string;
            /** A URL under which the Admin can sign up for an enterprise. The page pointed to cannot be rendered in an iframe. */
            url?: string;
        }
        interface SoftwareInfo {
            /** Android build Id string meant for displaying to the user, e.g. shamu-userdebug 6.0.1 MOB30I 2756745 dev-keys. */
            androidBuildNumber?: string;
            /** Build time. */
            androidBuildTime?: string;
            /** The user visible Android version string, e.g. 6.0.1. */
            androidVersion?: string;
            /** The system bootloader version number, e.g. 0.6.7. */
            bootloaderVersion?: string;
            /** Kernel version, e.g. 2.6.32.9-g103d848. */
            deviceKernelVersion?: string;
            /** Security patch level, e.g. 2016-05-01. */
            securityPatchLevel?: string;
        }
        interface Status {
            /** The status code, which should be an enum value of google.rpc.Code. */
            code?: number;
            /** A list of messages that carry the error details. There is a common set of message types for APIs to use. */
            details?: Array<Record<string, any>>;
            /**
             * A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the
             * google.rpc.Status.details field, or localized by the client.
             */
            message?: string;
        }
        interface StatusReportingSettings {
            /** Whether displays reporting is enabled. */
            displayInfoEnabled?: boolean;
            /** Whether hardware status reporting is enabled. */
            hardwareStatusEnabled?: boolean;
            /** Whether memory info reporting is enabled. */
            memoryInfoEnabled?: boolean;
            /** Whether network info reporting is enabled. */
            networkInfoEnabled?: boolean;
            /** Whether power management event reporting is enabled. */
            powerManagementEventsEnabled?: boolean;
            /** Whether software info reporting is enabled. */
            softwareInfoEnabled?: boolean;
        }
        interface SystemUpdate {
            /**
             * If the type is WINDOWED, the end of the maintenance window, measured as the number of minutes after midnight in device local time. This value must be
             * between 0 and 1439, inclusive. If this value is less than start_minutes, then the maintenance window spans midnight. If the maintenance window
             * specified is smaller than 30 minutes, the actual window is extended to 30 minutes beyond the start time.
             */
            endMinutes?: number;
            /**
             * If the type is WINDOWED, the start of the maintenance window, measured as the number of minutes after midnight in device local time. This value must be
             * between 0 and 1439, inclusive.
             */
            startMinutes?: number;
            /** The type of system update to configure. */
            type?: string;
        }
        interface UserFacingMessage {
            /**
             * The default message that gets displayed if no localized message is specified, or the user's locale does not match with any of the localized messages. A
             * default message must be provided if any localized messages are provided.
             */
            defaultMessage?: string;
            /** A map which contains <locale, message> pairs. The locale is a BCP 47 language code, e.g. en-US, es-ES, fr. */
            localizedMessages?: Record<string, string>;
        }
        interface WebToken {
            /** The name of the web token, which is generated by the server during creation, in the form enterprises/{enterpriseId}/webTokens/{webTokenId}. */
            name?: string;
            /**
             * The URL of the parent frame hosting the iframe with the embedded UI. To prevent XSS, the iframe may not be hosted at other URLs. The URL must use the
             * https scheme.
             */
            parentFrameUrl?: string;
            /** Permissions the admin may exercise in the embedded UI. The admin must have all of these permissions in order to view the UI. */
            permissions?: string[];
            /** The token value which is used in the hosting page to generate the iframe with the embedded UI. This is a read-only field generated by the server. */
            value?: string;
        }
        interface ApplicationsResource {
            /** Gets info about an application. */
            get(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** OAuth bearer token. */
                bearer_token?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The preferred language for localized application info, as a BCP47 tag (e.g. "en-US", "de"). If not specified the default language of the application
                 * will be used.
                 */
                languageCode?: string;
                /** The name of the application in the form enterprises/{enterpriseId}/applications/{package_name} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Pretty-print response. */
                pp?: boolean;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
            }): Request<Application>;
        }
        interface OperationsResource {
            /**
             * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If
             * the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED. Clients can use Operations.GetOperation or other methods to check
             * whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted;
             * instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED.
             */
            cancel(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** OAuth bearer token. */
                bearer_token?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation resource to be cancelled. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Pretty-print response. */
                pp?: boolean;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
            }): Request<{}>;
            /**
             * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the
             * operation. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED.
             */
            delete(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** OAuth bearer token. */
                bearer_token?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation resource to be deleted. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Pretty-print response. */
                pp?: boolean;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
            }): Request<{}>;
            /**
             * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API
             * service.
             */
            get(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** OAuth bearer token. */
                bearer_token?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation resource. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Pretty-print response. */
                pp?: boolean;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
            }): Request<Operation>;
            /**
             * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.NOTE: the name
             * binding allows API services to override the binding to use different resource name schemes, such as users/&#42;/operations. To override the binding, API
             * services can add a binding such as "/v1/{name=users/&#42;}/operations" to their service configuration. For backwards compatibility, the default name
             * includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection
             * id.
             */
            list(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** OAuth bearer token. */
                bearer_token?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The standard list filter. */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation's parent resource. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The standard list page size. */
                pageSize?: number;
                /** The standard list page token. */
                pageToken?: string;
                /** Pretty-print response. */
                pp?: boolean;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
            }): Request<ListOperationsResponse>;
        }
        interface DevicesResource {
            /** Deletes a device, which causes the device to be wiped. */
            delete(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** OAuth bearer token. */
                bearer_token?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the device in the form enterprises/{enterpriseId}/devices/{deviceId} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Pretty-print response. */
                pp?: boolean;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
            }): Request<{}>;
            /** Gets a device. */
            get(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** OAuth bearer token. */
                bearer_token?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the device in the form enterprises/{enterpriseId}/devices/{deviceId} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Pretty-print response. */
                pp?: boolean;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
            }): Request<Device>;
            /**
             * Issues a command to a device. The Operation resource returned contains a Command in its metadata field. Use the get operation method to get the status
             * of the command.
             */
            issueCommand(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** OAuth bearer token. */
                bearer_token?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the device in the form enterprises/{enterpriseId}/devices/{deviceId} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Pretty-print response. */
                pp?: boolean;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
            }): Request<Operation>;
            /** Lists devices for a given enterprise. */
            list(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** OAuth bearer token. */
                bearer_token?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The requested page size. The actual page size may be fixed to a min or max value. */
                pageSize?: number;
                /** A token identifying a page of results the server should return. */
                pageToken?: string;
                /** The name of the enterprise in the form enterprises/{enterpriseId} */
                parent: string;
                /** Pretty-print response. */
                pp?: boolean;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
            }): Request<ListDevicesResponse>;
            /** Updates a device. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** OAuth bearer token. */
                bearer_token?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the device in the form enterprises/{enterpriseId}/devices/{deviceId} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Pretty-print response. */
                pp?: boolean;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The field mask indicating the fields to update. If not set, all modifiable fields will be modified. */
                updateMask?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
            }): Request<Device>;
            operations: OperationsResource;
        }
        interface EnrollmentTokensResource {
            /** Creates an enrollment token for a given enterprise. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** OAuth bearer token. */
                bearer_token?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The name of the enterprise in the form enterprises/{enterpriseId} */
                parent: string;
                /** Pretty-print response. */
                pp?: boolean;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
            }): Request<EnrollmentToken>;
            /** Deletes an enrollment token, which prevents future use of the token. */
            delete(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** OAuth bearer token. */
                bearer_token?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the enrollment token in the form enterprises/{enterpriseId}/enrollmentTokens/{enrollmentTokenId} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Pretty-print response. */
                pp?: boolean;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
            }): Request<{}>;
        }
        interface PoliciesResource {
            /** Deletes a policy. This operation is only permitted if no devices are currently referencing the policy. */
            delete(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** OAuth bearer token. */
                bearer_token?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the policy in the form enterprises/{enterpriseId}/policies/{policyId} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Pretty-print response. */
                pp?: boolean;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
            }): Request<{}>;
            /** Gets a policy. */
            get(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** OAuth bearer token. */
                bearer_token?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the policy in the form enterprises/{enterpriseId}/policies/{policyId} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Pretty-print response. */
                pp?: boolean;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
            }): Request<Policy>;
            /** Lists policies for a given enterprise. */
            list(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** OAuth bearer token. */
                bearer_token?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The requested page size. The actual page size may be fixed to a min or max value. */
                pageSize?: number;
                /** A token identifying a page of results the server should return. */
                pageToken?: string;
                /** The name of the enterprise in the form enterprises/{enterpriseId} */
                parent: string;
                /** Pretty-print response. */
                pp?: boolean;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
            }): Request<ListPoliciesResponse>;
            /** Updates or creates a policy. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** OAuth bearer token. */
                bearer_token?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the policy in the form enterprises/{enterpriseId}/policies/{policyId} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Pretty-print response. */
                pp?: boolean;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The field mask indicating the fields to update. If not set, all modifiable fields will be modified. */
                updateMask?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
            }): Request<Policy>;
        }
        interface WebTokensResource {
            /** Creates a web token to access an embeddable managed Google Play web UI for a given enterprise. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** OAuth bearer token. */
                bearer_token?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The name of the enterprise in the form enterprises/{enterpriseId} */
                parent: string;
                /** Pretty-print response. */
                pp?: boolean;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
            }): Request<WebToken>;
        }
        interface EnterprisesResource {
            /** Creates an enterprise by completing the enterprise signup flow. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** OAuth bearer token. */
                bearer_token?: string;
                /** JSONP */
                callback?: string;
                /** The enterprise token appended to the callback URL. */
                enterpriseToken?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Pretty-print response. */
                pp?: boolean;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The id of the Google Cloud Platform project which will own the enterprise. */
                projectId?: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the SignupUrl used to sign up for the enterprise. */
                signupUrlName?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
            }): Request<Enterprise>;
            /** Gets an enterprise. */
            get(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** OAuth bearer token. */
                bearer_token?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the enterprise in the form enterprises/{enterpriseId} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Pretty-print response. */
                pp?: boolean;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
            }): Request<Enterprise>;
            /** Updates an enterprise. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** OAuth bearer token. */
                bearer_token?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the enterprise in the form enterprises/{enterpriseId} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Pretty-print response. */
                pp?: boolean;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The field mask indicating the fields to update. If not set, all modifiable fields will be modified. */
                updateMask?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
            }): Request<Enterprise>;
            applications: ApplicationsResource;
            devices: DevicesResource;
            enrollmentTokens: EnrollmentTokensResource;
            policies: PoliciesResource;
            webTokens: WebTokensResource;
        }
        interface SignupUrlsResource {
            /** Creates an enterprise signup URL. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** OAuth bearer token. */
                bearer_token?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The callback URL to which the admin will be redirected after successfully creating an enterprise. Before redirecting there the system will add a query
                 * parameter to this URL named enterpriseToken which will contain an opaque token to be used for the create enterprise request. The URL will be parsed
                 * then reformatted in order to add the enterpriseToken parameter, so there may be some minor formatting changes.
                 */
                callbackUrl?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Pretty-print response. */
                pp?: boolean;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The id of the Google Cloud Platform project which will own the enterprise. */
                projectId?: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
            }): Request<SignupUrl>;
        }
    }
}
