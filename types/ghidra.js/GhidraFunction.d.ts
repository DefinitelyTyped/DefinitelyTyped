import { Variable } from './Variable';
import { SourceType } from './SourceType';
import { Program } from './Program';
import { DataType } from './DataTypeManager';
import { TaskMonitor } from './TaskMonitor';
import { PrototypeModel } from './PrototypeModel';
import { Address } from './Address';

// https://ghidra.re/ghidra_docs/api/ghidra/program/model/listing/GhidraFunction.html

export interface GhidraFunction {
  addLocalVariable(variable: Variable, source: SourceType): Variable;
  //addParameter(variable: Variable, source: SourceType): Parameter;
  addTag(name: string): boolean;
  getAllVariables(): Variable[];
  getAutoParameterCount(): number;
  getCalledGhidraFunctions(monitor: TaskMonitor): Set<GhidraFunction>;
  getCallFixup(): string;
  getCallingConvention(): PrototypeModel;
  getCallingConventionName(): string;
  getCallingGhidraFunctions(monitor: TaskMonitor): Set<GhidraFunction>;
  getComment(): string;
  getCommentAsArray(): string[];
  getDefaultCallingConventionName(): string;
  getEntryPoint(): Address;
  //getExternalLocation(): ExternalLocation;
  getGhidraFunctionThunkAddresses(): Address[];
  getLocalVariables(): Variable[];
  //getLocalVariables(filter: VariableFilter): Variable[];
  getName(): string;
  //getParameter(ordinal: number): Parameter;
  getParameterCount(): number;
  //getParameters(): Parameter[];
  //getParameters(filter: VariableFilter): Parameter[];
  getProgram(): Program;
  getPrototypeString(formalSignature: boolean, includeCallingConvention: boolean): string;
  getRepeatableComment(): string;
  //getRepeatableCommentAsArray(): java.lang.String[];
  //getReturn(): Parameter;
  getReturnType(): DataType;
  //getSignature(): GhidraFunctionSignature;
  //getSignature(formalSignature: boolean): GhidraFunctionSignature;
  getSignatureSource(): SourceType;
  //getStackFrame(): StackFrame;
  getStackPurgeSize(): number;
  //getTags(): java.util.Set<GhidraFunctionTag>;
  getThunkedGhidraFunction(recursive: boolean): GhidraFunction;
  //getVariables(filter: VariableFilter): Variable[];
  hasCustomVariableStorage(): boolean;
  hasNoReturn(): boolean;
  hasVarArgs(): boolean;
  //insertParameter(ordinal: number, variable: Variable, source: SourceType): Parameter;
  isDeleted(): boolean;
  isExternal(): boolean;
  isInline(): boolean;
  isStackPurgeSizeValid(): boolean;
  isThunk(): boolean;
  //moveParameter(fromOrdinal: number, toOrdinal: number): Parameter;
  promoteLocalUserLabelsToGlobal(): void;
  removeParameter(ordinal: number): void;
  removeTag(name: string): void;
  removeVariable(variable: Variable): void;
  //replaceParameters(updateType: GhidraFunction.GhidraFunctionUpdateType, force: boolean, source: SourceType, params: Variable...): void;
  //replaceParameters(params: java.util.List<?extendsVariable>, updateType: GhidraFunction.GhidraFunctionUpdateType, force: boolean, source: SourceType): void;
  //setBody(newBody: AddressSetView): void;
  setCallFixup(name: string): void;
  setCallingConvention(name: string): void;
  setComment(comment: string): void;
  setCustomVariableStorage(hasCustomVariableStorage: boolean): void;
  setInline(isInline: boolean): void;
  setName(name: string, source: SourceType): void;
  setNoReturn(hasNoReturn: boolean): void;
  setRepeatableComment(comment: string): void;
  //setReturn(type: DataType, storage: VariableStorage, source: SourceType): void;
  setReturnType(type: DataType, source: SourceType): void;
  setSignatureSource(signatureSource: SourceType): void;
  setStackPurgeSize(purgeSize: number): void;
  setThunkedGhidraFunction(thunkedGhidraFunction: GhidraFunction): void;
  setVarArgs(hasVarArgs: boolean): void;
  //updateGhidraFunction(callingConvention: string, returnValue: Variable, updateType: GhidraFunction.GhidraFunctionUpdateType, force: boolean, source: SourceType, newParams: Variable...): void;
  //updateGhidraFunction(callingConvention: string, returnVar: Variable, newParams: java.util.List<?extendsVariable>, updateType: GhidraFunction.GhidraFunctionUpdateType, force: boolean, source: SourceType): void;
}
