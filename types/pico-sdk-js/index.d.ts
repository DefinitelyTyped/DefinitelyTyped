// THIS FILE IS AUTOGENERATED
// Do not directly modify this file. Instead, consider adding to
// /script/native-modules.json or the /script/*.handlebars templates
// within the https://github.com/pico-sdk-js/pico-sdk-js-engine repository.
//
// To regenerate these files run 'node build --gen'
//

// global module

declare function require(id: string): any;

declare function print(...data: any[]): void;

// highlevel module
declare module "pico/highlevel" {
    type absolute_time_t = number;

    function sleep_until(target: absolute_time_t): void;

    function sleep_us(us: number): void;

    function sleep_ms(ms: number): void;

    function best_effort_wfe_or_timeout(timeout_timestamp: absolute_time_t): boolean;
}

// hardware module
declare module "pico/hardware" {
    type resus_callback_t = () => void;

    type gpio_irq_callback_t = (gpio: number, event_mask: number) => void;

    type hardware_alarm_callback_t = (alarm_num: number) => void;

    function adc_init(): void;

    function adc_gpio_init(gpio: number): void;

    function adc_select_input(input: number): void;

    function adc_get_selected_input(): number;

    function adc_set_round_robin(input_mask: number): void;

    function adc_set_temp_sensor_enabled(enable: boolean): void;

    function adc_read(): number;

    function adc_run(run: boolean): void;

    function adc_set_clkdiv(clkdiv: number): void;

    function adc_fifo_setup(
        en: boolean,
        dreq_en: boolean,
        dreq_thresh: number,
        err_in_fifo: boolean,
        byte_shift: boolean,
    ): void;

    function adc_fifo_is_empty(): boolean;

    function adc_fifo_get_level(): number;

    function adc_fifo_get(): number;

    function adc_fifo_get_blocking(): number;

    function adc_fifo_drain(): void;

    function adc_irq_set_enabled(enabled: boolean): void;

    function clocks_init(): void;

    function clock_configure(clk_index: number, src: number, auxsrc: number, src_freq: number, freq: number): boolean;

    function clock_stop(clk_index: number): void;

    function clock_get_hz(clk_index: number): number;

    function frequency_count_khz(src: number): number;

    function clock_set_reported_hz(clk_index: number, hz: number): void;

    function clocks_enable_resus(resus_callback: resus_callback_t): void;

    function clock_gpio_init_int_frac(gpio: number, src: number, div_int: number, div_frac: number): void;

    function clock_gpio_init(gpio: number, src: number, div: number): void;

    function clock_configure_gpin(clk_index: number, gpio: number, src_freq: number, freq: number): boolean;

    function gpio_set_function(gpio: number, fn: number): void;

    function gpio_get_function(gpio: number): number;

    function gpio_set_pulls(gpio: number, up: boolean, down: boolean): void;

    function gpio_pull_up(gpio: number): void;

    function gpio_is_pulled_up(gpio: number): boolean;

    function gpio_pull_down(gpio: number): void;

    function gpio_is_pulled_down(gpio: number): boolean;

    function gpio_disable_pulls(gpio: number): void;

    function gpio_set_irqover(gpio: number, value: number): void;

    function gpio_set_outover(gpio: number, value: number): void;

    function gpio_set_inover(gpio: number, value: number): void;

    function gpio_set_oeover(gpio: number, value: number): void;

    function gpio_set_input_enabled(gpio: number, enabled: boolean): void;

    function gpio_set_input_hysteresis_enabled(gpio: number, enabled: boolean): void;

    function gpio_is_input_hysteresis_enabled(gpio: number): boolean;

    function gpio_set_slew_rate(gpio: number, slew: number): void;

    function gpio_get_slew_rate(gpio: number): number;

    function gpio_set_drive_strength(gpio: number, drive: number): void;

    function gpio_get_drive_strength(gpio: number): number;

    function gpio_set_irq_enabled(gpio: number, event_mask: number, enabled: boolean): void;

    function gpio_set_irq_callback(callback: gpio_irq_callback_t): void;

    function gpio_set_irq_enabled_with_callback(
        gpio: number,
        event_mask: number,
        enabled: boolean,
        callback: gpio_irq_callback_t,
    ): void;

    function gpio_set_dormant_irq_enabled(gpio: number, event_mask: number, enabled: boolean): void;

    function gpio_get_irq_event_mask(gpio: number): number;

    function gpio_acknowledge_irq(gpio: number, event_mask: number): void;

    function gpio_init(gpio: number): void;

    function gpio_deinit(gpio: number): void;

    function gpio_init_mask(gpio_mask: number): void;

    function gpio_get(gpio: number): boolean;

    function gpio_get_all(): number;

    function gpio_set_mask(mask: number): void;

    function gpio_clr_mask(mask: number): void;

    function gpio_xor_mask(mask: number): void;

    function gpio_put_masked(mask: number, value: number): void;

    function gpio_put_all(value: number): void;

    function gpio_put(gpio: number, value: boolean): void;

    function gpio_get_out_level(gpio: number): boolean;

    function gpio_set_dir_out_masked(mask: number): void;

    function gpio_set_dir_in_masked(mask: number): void;

    function gpio_set_dir_masked(mask: number, value: number): void;

    function gpio_set_dir_all_bits(values: number): void;

    function gpio_set_dir(gpio: number, out: boolean): void;

    function gpio_is_dir_out(gpio: number): boolean;

    function gpio_get_dir(gpio: number): number;

    function time_us_32(): number;

    function time_us_64(): number;

    function busy_wait_us_32(delay_us: number): void;

    function busy_wait_us(delay_us: number): void;

    function busy_wait_ms(delay_ms: number): void;

    function busy_wait_until(t: number): void;

    function time_reached(t: number): boolean;

    function hardware_alarm_claim(alarm_num: number): void;

    function hardware_alarm_claim_unused(required: boolean): number;

    function hardware_alarm_unclaim(alarm_num: number): void;

    function hardware_alarm_is_claimed(alarm_num: number): boolean;

    function hardware_alarm_set_callback(alarm_num: number, callback: hardware_alarm_callback_t): void;

    function hardware_alarm_set_target(alarm_num: number, t: number): boolean;

    function hardware_alarm_cancel(alarm_num: number): void;

    function hardware_alarm_force_irq(alarm_num: number): void;
}
