/* This is stub file for gapi.client.{{=it.name}} definition tests */
/* IMPORTANT.
* This file was automatically generated by https://github.com/Bolisov/google-api-typings-generator. Please do not edit it manually.
* In case of any problems please post issue to https://github.com/Bolisov/google-api-typings-generator
**/
gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('gamesconfiguration', 'v1configuration', () => {
        /** now we can use gapi.client.gamesconfiguration */

        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [
            /** View and manage your Google Play Developer account */
            'https://www.googleapis.com/auth/androidpublisher',
        ];
        const immediate = true;
        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /** handle succesfull authorization */
                run();
            } else {
                /** handle authorization error */
            }
        });
        run();
    });

    async function run() {
        /** Delete the achievement configuration with the given ID. */
        await gapi.client.achievementConfigurations.delete({
            achievementId: "achievementId",
        });
        /** Retrieves the metadata of the achievement configuration with the given ID. */
        await gapi.client.achievementConfigurations.get({
            achievementId: "achievementId",
        });
        /** Insert a new achievement configuration in this application. */
        await gapi.client.achievementConfigurations.insert({
            applicationId: "applicationId",
        });
        /** Returns a list of the achievement configurations in this application. */
        await gapi.client.achievementConfigurations.list({
            applicationId: "applicationId",
            maxResults: 2,
            pageToken: "pageToken",
        });
        /** Update the metadata of the achievement configuration with the given ID. This method supports patch semantics. */
        await gapi.client.achievementConfigurations.patch({
            achievementId: "achievementId",
        });
        /** Update the metadata of the achievement configuration with the given ID. */
        await gapi.client.achievementConfigurations.update({
            achievementId: "achievementId",
        });
        /** Uploads an image for a resource with the given ID and image type. */
        await gapi.client.imageConfigurations.upload({
            imageType: "imageType",
            resourceId: "resourceId",
        });
        /** Delete the leaderboard configuration with the given ID. */
        await gapi.client.leaderboardConfigurations.delete({
            leaderboardId: "leaderboardId",
        });
        /** Retrieves the metadata of the leaderboard configuration with the given ID. */
        await gapi.client.leaderboardConfigurations.get({
            leaderboardId: "leaderboardId",
        });
        /** Insert a new leaderboard configuration in this application. */
        await gapi.client.leaderboardConfigurations.insert({
            applicationId: "applicationId",
        });
        /** Returns a list of the leaderboard configurations in this application. */
        await gapi.client.leaderboardConfigurations.list({
            applicationId: "applicationId",
            maxResults: 2,
            pageToken: "pageToken",
        });
        /** Update the metadata of the leaderboard configuration with the given ID. This method supports patch semantics. */
        await gapi.client.leaderboardConfigurations.patch({
            leaderboardId: "leaderboardId",
        });
        /** Update the metadata of the leaderboard configuration with the given ID. */
        await gapi.client.leaderboardConfigurations.update({
            leaderboardId: "leaderboardId",
        });
    }
});
