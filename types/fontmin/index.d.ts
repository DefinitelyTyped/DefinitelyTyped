// Type definitions for fontmin 0.9
// Project: https://github.com/ecomfe/fontmin#readme
// Definitions by: AsPulse <https://github.com/AsPulse>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

/// <reference types="node" />
/** Declaration file generated by dts-gen */

import stream = require('stream');

type probableAsSrc = string[] | string | Buffer;

// tslint:disable-next-line ban-types
type fontminPlugin = Function | stream.Transform;

interface pluginCloneOption {
    clone?: boolean;
}

interface pluginHintOption {
    hinting?: boolean;
}

interface pluginFromSVGOption extends pluginHintOption {
    fontName?: string;
    adjust?: {
        leftSidebearing: number;
        rightSidebearing: number;
        ajdustToEmBox: boolean;
        ajdustToEmPadding: number;
    };
    name?: {
        fontFamily?: string;
        fontSubFamily?: string;
        uniqueSubFamily?: string;
        postScriptName?: string;
    };
}

interface fontInfo {
    fontFile: string;
    fontPath: string;
    base64: boolean;
    glyph: boolean;
    iconPrefix: string;
    local: boolean;
}

interface CSSOption {
    glyph?: boolean;
    base64?: boolean;
    iconPrefix?: string;
    fontFamily?: string | ((fontinfo: fontInfo, ttf: any) => string);
    filename?: string;
    fontPath?: string;
    asFileName?: boolean;
    local?: boolean;
}

interface glyphOption {
    text?: string;
    basicText?: boolean;
    hinting?: boolean;
    use?: fontminPlugin;
}

declare class Fontmin<srcType extends probableAsSrc> {
    constructor();

    dest(): string;

    dest(dir: string): Fontmin<srcType>;

    run(cb: (err: Error, files: Array<{ _contents: stream.Readable }>, stream: any) => void): any;

    src(): srcType;

    src<T extends probableAsSrc>(file: T): Fontmin<T>;

    use(plugin: fontminPlugin): Fontmin<srcType>;

    static css(opts: CSSOption): stream.Transform;

    static glyph(opts: glyphOption): stream.Transform;

    static mime: {
        '.*': string;
        eot: string;
        otf: string;
        svg: string;
        svgz: string;
        ttf: string;
        woff: string;
        woff2: string;
    };

    static otf2ttf(opts?: pluginCloneOption & pluginHintOption): stream.Transform;

    static plugins: string[];

    static svg2ttf(opts?: pluginCloneOption & pluginHintOption): stream.Transform;

    static svgs2ttf(file: string, opts?: pluginFromSVGOption): stream.Transform;

    static ttf2eot(opts?: pluginCloneOption): stream.Transform;

    static ttf2svg(opts?: pluginCloneOption): stream.Transform;

    static ttf2woff(opts?: pluginCloneOption): stream.Transform;

    static ttf2woff2(opts?: pluginCloneOption): stream.Transform;
}

export = Fontmin;
