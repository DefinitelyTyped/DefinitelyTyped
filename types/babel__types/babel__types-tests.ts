// this test is auto-generated by ./scripts/generate.ts

import {ALIAS_KEYS} from '@babel/types';
import {AnyTypeAnnotation} from '@babel/types';
import {ArrayExpression} from '@babel/types';
import {ArrayPattern} from '@babel/types';
import {ArrayTypeAnnotation} from '@babel/types';
import {ArrowFunctionExpression} from '@babel/types';
import {AssignmentExpression} from '@babel/types';
import {AssignmentPattern} from '@babel/types';
import {AwaitExpression} from '@babel/types';
import {BINARY_OPERATORS} from '@babel/types';
import {BINARY_TYPES} from '@babel/types';
import {BLOCKPARENT_TYPES} from '@babel/types';
import {BLOCK_SCOPED_SYMBOL} from '@babel/types';
import {BLOCK_TYPES} from '@babel/types';
import {BOOLEAN_BINARY_OPERATORS} from '@babel/types';
import {BOOLEAN_NUMBER_BINARY_OPERATORS} from '@babel/types';
import {BOOLEAN_UNARY_OPERATORS} from '@babel/types';
import {BUILDER_KEYS} from '@babel/types';
import {BinaryExpression} from '@babel/types';
import {BindExpression} from '@babel/types';
import {BlockStatement} from '@babel/types';
import {BooleanLiteral} from '@babel/types';
import {BooleanLiteralTypeAnnotation} from '@babel/types';
import {BooleanTypeAnnotation} from '@babel/types';
import {BreakStatement} from '@babel/types';
import {CLASS_TYPES} from '@babel/types';
import {COMMENT_KEYS} from '@babel/types';
import {COMPARISON_BINARY_OPERATORS} from '@babel/types';
import {COMPLETIONSTATEMENT_TYPES} from '@babel/types';
import {CONDITIONAL_TYPES} from '@babel/types';
import {CallExpression} from '@babel/types';
import {CatchClause} from '@babel/types';
import {ClassBody} from '@babel/types';
import {ClassDeclaration} from '@babel/types';
import {ClassExpression} from '@babel/types';
import {ClassImplements} from '@babel/types';
import {ClassMethod} from '@babel/types';
import {ClassProperty} from '@babel/types';
import {ConditionalExpression} from '@babel/types';
import {ContinueStatement} from '@babel/types';
import {DECLARATION_TYPES} from '@babel/types';
import {DEPRECATED_KEYS} from '@babel/types';
import {DebuggerStatement} from '@babel/types';
import {DeclareClass} from '@babel/types';
import {DeclareExportAllDeclaration} from '@babel/types';
import {DeclareExportDeclaration} from '@babel/types';
import {DeclareFunction} from '@babel/types';
import {DeclareInterface} from '@babel/types';
import {DeclareModule} from '@babel/types';
import {DeclareModuleExports} from '@babel/types';
import {DeclareOpaqueType} from '@babel/types';
import {DeclareTypeAlias} from '@babel/types';
import {DeclareVariable} from '@babel/types';
import {DeclaredPredicate} from '@babel/types';
import {Decorator} from '@babel/types';
import {Directive} from '@babel/types';
import {DirectiveLiteral} from '@babel/types';
import {DoExpression} from '@babel/types';
import {DoWhileStatement} from '@babel/types';
import {EQUALITY_BINARY_OPERATORS} from '@babel/types';
import {EXPORTDECLARATION_TYPES} from '@babel/types';
import {EXPRESSIONWRAPPER_TYPES} from '@babel/types';
import {EXPRESSION_TYPES} from '@babel/types';
import {EmptyStatement} from '@babel/types';
import {EmptyTypeAnnotation} from '@babel/types';
import {ExistsTypeAnnotation} from '@babel/types';
import {ExportAllDeclaration} from '@babel/types';
import {ExportDefaultDeclaration} from '@babel/types';
import {ExportDefaultSpecifier} from '@babel/types';
import {ExportNamedDeclaration} from '@babel/types';
import {ExportNamespaceSpecifier} from '@babel/types';
import {ExportSpecifier} from '@babel/types';
import {ExpressionStatement} from '@babel/types';
import {FLATTENABLE_KEYS} from '@babel/types';
import {FLIPPED_ALIAS_KEYS} from '@babel/types';
import {FLOWBASEANNOTATION_TYPES} from '@babel/types';
import {FLOWDECLARATION_TYPES} from '@babel/types';
import {FLOWPREDICATE_TYPES} from '@babel/types';
import {FLOWTYPE_TYPES} from '@babel/types';
import {FLOW_TYPES} from '@babel/types';
import {FORXSTATEMENT_TYPES} from '@babel/types';
import {FOR_INIT_KEYS} from '@babel/types';
import {FOR_TYPES} from '@babel/types';
import {FUNCTIONPARENT_TYPES} from '@babel/types';
import {FUNCTION_TYPES} from '@babel/types';
import {File} from '@babel/types';
import {ForInStatement} from '@babel/types';
import {ForOfStatement} from '@babel/types';
import {ForStatement} from '@babel/types';
import {FunctionDeclaration} from '@babel/types';
import {FunctionExpression} from '@babel/types';
import {FunctionTypeAnnotation} from '@babel/types';
import {FunctionTypeParam} from '@babel/types';
import {GenericTypeAnnotation} from '@babel/types';
import {IMMUTABLE_TYPES} from '@babel/types';
import {INHERIT_KEYS} from '@babel/types';
import {Identifier} from '@babel/types';
import {IfStatement} from '@babel/types';
import {Import} from '@babel/types';
import {ImportDeclaration} from '@babel/types';
import {ImportDefaultSpecifier} from '@babel/types';
import {ImportNamespaceSpecifier} from '@babel/types';
import {ImportSpecifier} from '@babel/types';
import {InferredPredicate} from '@babel/types';
import {InterfaceDeclaration} from '@babel/types';
import {InterfaceExtends} from '@babel/types';
import {IntersectionTypeAnnotation} from '@babel/types';
import {JSXAttribute} from '@babel/types';
import {JSXClosingElement} from '@babel/types';
import {JSXClosingFragment} from '@babel/types';
import {JSXElement} from '@babel/types';
import {JSXEmptyExpression} from '@babel/types';
import {JSXExpressionContainer} from '@babel/types';
import {JSXFragment} from '@babel/types';
import {JSXIdentifier} from '@babel/types';
import {JSXMemberExpression} from '@babel/types';
import {JSXNamespacedName} from '@babel/types';
import {JSXOpeningElement} from '@babel/types';
import {JSXOpeningFragment} from '@babel/types';
import {JSXSpreadAttribute} from '@babel/types';
import {JSXSpreadChild} from '@babel/types';
import {JSXText} from '@babel/types';
import {JSX_TYPES} from '@babel/types';
import {LITERAL_TYPES} from '@babel/types';
import {LOGICAL_OPERATORS} from '@babel/types';
import {LOOP_TYPES} from '@babel/types';
import {LVAL_TYPES} from '@babel/types';
import {LabeledStatement} from '@babel/types';
import {LogicalExpression} from '@babel/types';
import {METHOD_TYPES} from '@babel/types';
import {MODULEDECLARATION_TYPES} from '@babel/types';
import {MODULESPECIFIER_TYPES} from '@babel/types';
import {MemberExpression} from '@babel/types';
import {MetaProperty} from '@babel/types';
import {MixedTypeAnnotation} from '@babel/types';
import {NODE_FIELDS} from '@babel/types';
import {NOT_LOCAL_BINDING} from '@babel/types';
import {NUMBER_BINARY_OPERATORS} from '@babel/types';
import {NUMBER_UNARY_OPERATORS} from '@babel/types';
import {NewExpression} from '@babel/types';
import {Noop} from '@babel/types';
import {NullLiteral} from '@babel/types';
import {NullLiteralTypeAnnotation} from '@babel/types';
import {NullableTypeAnnotation} from '@babel/types';
import {NumberLiteralTypeAnnotation} from '@babel/types';
import {NumberTypeAnnotation} from '@babel/types';
import {NumericLiteral} from '@babel/types';
import {OBJECTMEMBER_TYPES} from '@babel/types';
import {ObjectExpression} from '@babel/types';
import {ObjectMethod} from '@babel/types';
import {ObjectPattern} from '@babel/types';
import {ObjectProperty} from '@babel/types';
import {ObjectTypeAnnotation} from '@babel/types';
import {ObjectTypeCallProperty} from '@babel/types';
import {ObjectTypeIndexer} from '@babel/types';
import {ObjectTypeProperty} from '@babel/types';
import {ObjectTypeSpreadProperty} from '@babel/types';
import {OpaqueType} from '@babel/types';
import {OptionalCallExpression} from '@babel/types';
import {OptionalMemberExpression} from '@babel/types';
import {PATTERNLIKE_TYPES} from '@babel/types';
import {PATTERN_TYPES} from '@babel/types';
import {PROPERTY_TYPES} from '@babel/types';
import {PUREISH_TYPES} from '@babel/types';
import {ParenthesizedExpression} from '@babel/types';
import {Program} from '@babel/types';
import {QualifiedTypeIdentifier} from '@babel/types';
import {RegExpLiteral} from '@babel/types';
import {RestElement} from '@babel/types';
import {ReturnStatement} from '@babel/types';
import {SCOPABLE_TYPES} from '@babel/types';
import {STATEMENT_OR_BLOCK_KEYS} from '@babel/types';
import {STATEMENT_TYPES} from '@babel/types';
import {STRING_UNARY_OPERATORS} from '@babel/types';
import {SequenceExpression} from '@babel/types';
import {SpreadElement} from '@babel/types';
import {StringLiteral} from '@babel/types';
import {StringLiteralTypeAnnotation} from '@babel/types';
import {StringTypeAnnotation} from '@babel/types';
import {Super} from '@babel/types';
import {SwitchCase} from '@babel/types';
import {SwitchStatement} from '@babel/types';
import {TERMINATORLESS_TYPES} from '@babel/types';
import {TSAnyKeyword} from '@babel/types';
import {TSArrayType} from '@babel/types';
import {TSAsExpression} from '@babel/types';
import {TSBooleanKeyword} from '@babel/types';
import {TSCallSignatureDeclaration} from '@babel/types';
import {TSConstructSignatureDeclaration} from '@babel/types';
import {TSConstructorType} from '@babel/types';
import {TSDeclareFunction} from '@babel/types';
import {TSDeclareMethod} from '@babel/types';
import {TSENTITYNAME_TYPES} from '@babel/types';
import {TSEnumDeclaration} from '@babel/types';
import {TSEnumMember} from '@babel/types';
import {TSExportAssignment} from '@babel/types';
import {TSExpressionWithTypeArguments} from '@babel/types';
import {TSExternalModuleReference} from '@babel/types';
import {TSFunctionType} from '@babel/types';
import {TSImportEqualsDeclaration} from '@babel/types';
import {TSIndexSignature} from '@babel/types';
import {TSIndexedAccessType} from '@babel/types';
import {TSInterfaceBody} from '@babel/types';
import {TSInterfaceDeclaration} from '@babel/types';
import {TSIntersectionType} from '@babel/types';
import {TSLiteralType} from '@babel/types';
import {TSMappedType} from '@babel/types';
import {TSMethodSignature} from '@babel/types';
import {TSModuleBlock} from '@babel/types';
import {TSModuleDeclaration} from '@babel/types';
import {TSNamespaceExportDeclaration} from '@babel/types';
import {TSNeverKeyword} from '@babel/types';
import {TSNonNullExpression} from '@babel/types';
import {TSNullKeyword} from '@babel/types';
import {TSNumberKeyword} from '@babel/types';
import {TSObjectKeyword} from '@babel/types';
import {TSParameterProperty} from '@babel/types';
import {TSParenthesizedType} from '@babel/types';
import {TSPropertySignature} from '@babel/types';
import {TSQualifiedName} from '@babel/types';
import {TSStringKeyword} from '@babel/types';
import {TSSymbolKeyword} from '@babel/types';
import {TSTYPEELEMENT_TYPES} from '@babel/types';
import {TSTYPE_TYPES} from '@babel/types';
import {TSThisType} from '@babel/types';
import {TSTupleType} from '@babel/types';
import {TSTypeAliasDeclaration} from '@babel/types';
import {TSTypeAnnotation} from '@babel/types';
import {TSTypeAssertion} from '@babel/types';
import {TSTypeLiteral} from '@babel/types';
import {TSTypeOperator} from '@babel/types';
import {TSTypeParameter} from '@babel/types';
import {TSTypeParameterDeclaration} from '@babel/types';
import {TSTypeParameterInstantiation} from '@babel/types';
import {TSTypePredicate} from '@babel/types';
import {TSTypeQuery} from '@babel/types';
import {TSTypeReference} from '@babel/types';
import {TSUndefinedKeyword} from '@babel/types';
import {TSUnionType} from '@babel/types';
import {TSVoidKeyword} from '@babel/types';
import {TYPES} from '@babel/types';
import {TaggedTemplateExpression} from '@babel/types';
import {TemplateElement} from '@babel/types';
import {TemplateLiteral} from '@babel/types';
import {ThisExpression} from '@babel/types';
import {ThisTypeAnnotation} from '@babel/types';
import {ThrowStatement} from '@babel/types';
import {TryStatement} from '@babel/types';
import {TupleTypeAnnotation} from '@babel/types';
import {TypeAlias} from '@babel/types';
import {TypeAnnotation} from '@babel/types';
import {TypeCastExpression} from '@babel/types';
import {TypeParameter} from '@babel/types';
import {TypeParameterDeclaration} from '@babel/types';
import {TypeParameterInstantiation} from '@babel/types';
import {TypeofTypeAnnotation} from '@babel/types';
import {UNARYLIKE_TYPES} from '@babel/types';
import {UNARY_OPERATORS} from '@babel/types';
import {UPDATE_OPERATORS} from '@babel/types';
import {USERWHITESPACABLE_TYPES} from '@babel/types';
import {UnaryExpression} from '@babel/types';
import {UnionTypeAnnotation} from '@babel/types';
import {UpdateExpression} from '@babel/types';
import {VISITOR_KEYS} from '@babel/types';
import {VariableDeclaration} from '@babel/types';
import {VariableDeclarator} from '@babel/types';
import {Variance} from '@babel/types';
import {VoidTypeAnnotation} from '@babel/types';
import {WHILE_TYPES} from '@babel/types';
import {WhileStatement} from '@babel/types';
import {WithStatement} from '@babel/types';
import {YieldExpression} from '@babel/types';
import {addComment} from '@babel/types';
import {addComments} from '@babel/types';
import {anyTypeAnnotation} from '@babel/types';
import {appendToMemberExpression} from '@babel/types';
import {arrayExpression} from '@babel/types';
import {arrayPattern} from '@babel/types';
import {arrayTypeAnnotation} from '@babel/types';
import {arrowFunctionExpression} from '@babel/types';
import {assertAnyTypeAnnotation} from '@babel/types';
import {assertArrayExpression} from '@babel/types';
import {assertArrayPattern} from '@babel/types';
import {assertArrayTypeAnnotation} from '@babel/types';
import {assertArrowFunctionExpression} from '@babel/types';
import {assertAssignmentExpression} from '@babel/types';
import {assertAssignmentPattern} from '@babel/types';
import {assertAwaitExpression} from '@babel/types';
import {assertBinary} from '@babel/types';
import {assertBinaryExpression} from '@babel/types';
import {assertBindExpression} from '@babel/types';
import {assertBlock} from '@babel/types';
import {assertBlockParent} from '@babel/types';
import {assertBlockStatement} from '@babel/types';
import {assertBooleanLiteral} from '@babel/types';
import {assertBooleanLiteralTypeAnnotation} from '@babel/types';
import {assertBooleanTypeAnnotation} from '@babel/types';
import {assertBreakStatement} from '@babel/types';
import {assertCallExpression} from '@babel/types';
import {assertCatchClause} from '@babel/types';
import {assertClass} from '@babel/types';
import {assertClassBody} from '@babel/types';
import {assertClassDeclaration} from '@babel/types';
import {assertClassExpression} from '@babel/types';
import {assertClassImplements} from '@babel/types';
import {assertClassMethod} from '@babel/types';
import {assertClassProperty} from '@babel/types';
import {assertCompletionStatement} from '@babel/types';
import {assertConditional} from '@babel/types';
import {assertConditionalExpression} from '@babel/types';
import {assertContinueStatement} from '@babel/types';
import {assertDebuggerStatement} from '@babel/types';
import {assertDeclaration} from '@babel/types';
import {assertDeclareClass} from '@babel/types';
import {assertDeclareExportAllDeclaration} from '@babel/types';
import {assertDeclareExportDeclaration} from '@babel/types';
import {assertDeclareFunction} from '@babel/types';
import {assertDeclareInterface} from '@babel/types';
import {assertDeclareModule} from '@babel/types';
import {assertDeclareModuleExports} from '@babel/types';
import {assertDeclareOpaqueType} from '@babel/types';
import {assertDeclareTypeAlias} from '@babel/types';
import {assertDeclareVariable} from '@babel/types';
import {assertDeclaredPredicate} from '@babel/types';
import {assertDecorator} from '@babel/types';
import {assertDirective} from '@babel/types';
import {assertDirectiveLiteral} from '@babel/types';
import {assertDoExpression} from '@babel/types';
import {assertDoWhileStatement} from '@babel/types';
import {assertEmptyStatement} from '@babel/types';
import {assertEmptyTypeAnnotation} from '@babel/types';
import {assertExistsTypeAnnotation} from '@babel/types';
import {assertExportAllDeclaration} from '@babel/types';
import {assertExportDeclaration} from '@babel/types';
import {assertExportDefaultDeclaration} from '@babel/types';
import {assertExportDefaultSpecifier} from '@babel/types';
import {assertExportNamedDeclaration} from '@babel/types';
import {assertExportNamespaceSpecifier} from '@babel/types';
import {assertExportSpecifier} from '@babel/types';
import {assertExpression} from '@babel/types';
import {assertExpressionStatement} from '@babel/types';
import {assertExpressionWrapper} from '@babel/types';
import {assertFile} from '@babel/types';
import {assertFlow} from '@babel/types';
import {assertFlowBaseAnnotation} from '@babel/types';
import {assertFlowDeclaration} from '@babel/types';
import {assertFlowPredicate} from '@babel/types';
import {assertFlowType} from '@babel/types';
import {assertFor} from '@babel/types';
import {assertForInStatement} from '@babel/types';
import {assertForOfStatement} from '@babel/types';
import {assertForStatement} from '@babel/types';
import {assertForXStatement} from '@babel/types';
import {assertFunction} from '@babel/types';
import {assertFunctionDeclaration} from '@babel/types';
import {assertFunctionExpression} from '@babel/types';
import {assertFunctionParent} from '@babel/types';
import {assertFunctionTypeAnnotation} from '@babel/types';
import {assertFunctionTypeParam} from '@babel/types';
import {assertGenericTypeAnnotation} from '@babel/types';
import {assertIdentifier} from '@babel/types';
import {assertIfStatement} from '@babel/types';
import {assertImmutable} from '@babel/types';
import {assertImport} from '@babel/types';
import {assertImportDeclaration} from '@babel/types';
import {assertImportDefaultSpecifier} from '@babel/types';
import {assertImportNamespaceSpecifier} from '@babel/types';
import {assertImportSpecifier} from '@babel/types';
import {assertInferredPredicate} from '@babel/types';
import {assertInterfaceDeclaration} from '@babel/types';
import {assertInterfaceExtends} from '@babel/types';
import {assertIntersectionTypeAnnotation} from '@babel/types';
import {assertJSX} from '@babel/types';
import {assertJSXAttribute} from '@babel/types';
import {assertJSXClosingElement} from '@babel/types';
import {assertJSXClosingFragment} from '@babel/types';
import {assertJSXElement} from '@babel/types';
import {assertJSXEmptyExpression} from '@babel/types';
import {assertJSXExpressionContainer} from '@babel/types';
import {assertJSXFragment} from '@babel/types';
import {assertJSXIdentifier} from '@babel/types';
import {assertJSXMemberExpression} from '@babel/types';
import {assertJSXNamespacedName} from '@babel/types';
import {assertJSXOpeningElement} from '@babel/types';
import {assertJSXOpeningFragment} from '@babel/types';
import {assertJSXSpreadAttribute} from '@babel/types';
import {assertJSXSpreadChild} from '@babel/types';
import {assertJSXText} from '@babel/types';
import {assertLVal} from '@babel/types';
import {assertLabeledStatement} from '@babel/types';
import {assertLiteral} from '@babel/types';
import {assertLogicalExpression} from '@babel/types';
import {assertLoop} from '@babel/types';
import {assertMemberExpression} from '@babel/types';
import {assertMetaProperty} from '@babel/types';
import {assertMethod} from '@babel/types';
import {assertMixedTypeAnnotation} from '@babel/types';
import {assertModuleDeclaration} from '@babel/types';
import {assertModuleSpecifier} from '@babel/types';
import {assertNewExpression} from '@babel/types';
import {assertNode} from '@babel/types';
import {assertNoop} from '@babel/types';
import {assertNullLiteral} from '@babel/types';
import {assertNullLiteralTypeAnnotation} from '@babel/types';
import {assertNullableTypeAnnotation} from '@babel/types';
import {assertNumberLiteralTypeAnnotation} from '@babel/types';
import {assertNumberTypeAnnotation} from '@babel/types';
import {assertNumericLiteral} from '@babel/types';
import {assertObjectExpression} from '@babel/types';
import {assertObjectMember} from '@babel/types';
import {assertObjectMethod} from '@babel/types';
import {assertObjectPattern} from '@babel/types';
import {assertObjectProperty} from '@babel/types';
import {assertObjectTypeAnnotation} from '@babel/types';
import {assertObjectTypeCallProperty} from '@babel/types';
import {assertObjectTypeIndexer} from '@babel/types';
import {assertObjectTypeProperty} from '@babel/types';
import {assertObjectTypeSpreadProperty} from '@babel/types';
import {assertOpaqueType} from '@babel/types';
import {assertOptionalCallExpression} from '@babel/types';
import {assertOptionalMemberExpression} from '@babel/types';
import {assertParenthesizedExpression} from '@babel/types';
import {assertPattern} from '@babel/types';
import {assertPatternLike} from '@babel/types';
import {assertProgram} from '@babel/types';
import {assertProperty} from '@babel/types';
import {assertPureish} from '@babel/types';
import {assertQualifiedTypeIdentifier} from '@babel/types';
import {assertRegExpLiteral} from '@babel/types';
import {assertRestElement} from '@babel/types';
import {assertReturnStatement} from '@babel/types';
import {assertScopable} from '@babel/types';
import {assertSequenceExpression} from '@babel/types';
import {assertSpreadElement} from '@babel/types';
import {assertStatement} from '@babel/types';
import {assertStringLiteral} from '@babel/types';
import {assertStringLiteralTypeAnnotation} from '@babel/types';
import {assertStringTypeAnnotation} from '@babel/types';
import {assertSuper} from '@babel/types';
import {assertSwitchCase} from '@babel/types';
import {assertSwitchStatement} from '@babel/types';
import {assertTSAnyKeyword} from '@babel/types';
import {assertTSArrayType} from '@babel/types';
import {assertTSAsExpression} from '@babel/types';
import {assertTSBooleanKeyword} from '@babel/types';
import {assertTSCallSignatureDeclaration} from '@babel/types';
import {assertTSConstructSignatureDeclaration} from '@babel/types';
import {assertTSConstructorType} from '@babel/types';
import {assertTSDeclareFunction} from '@babel/types';
import {assertTSDeclareMethod} from '@babel/types';
import {assertTSEntityName} from '@babel/types';
import {assertTSEnumDeclaration} from '@babel/types';
import {assertTSEnumMember} from '@babel/types';
import {assertTSExportAssignment} from '@babel/types';
import {assertTSExpressionWithTypeArguments} from '@babel/types';
import {assertTSExternalModuleReference} from '@babel/types';
import {assertTSFunctionType} from '@babel/types';
import {assertTSImportEqualsDeclaration} from '@babel/types';
import {assertTSIndexSignature} from '@babel/types';
import {assertTSIndexedAccessType} from '@babel/types';
import {assertTSInterfaceBody} from '@babel/types';
import {assertTSInterfaceDeclaration} from '@babel/types';
import {assertTSIntersectionType} from '@babel/types';
import {assertTSLiteralType} from '@babel/types';
import {assertTSMappedType} from '@babel/types';
import {assertTSMethodSignature} from '@babel/types';
import {assertTSModuleBlock} from '@babel/types';
import {assertTSModuleDeclaration} from '@babel/types';
import {assertTSNamespaceExportDeclaration} from '@babel/types';
import {assertTSNeverKeyword} from '@babel/types';
import {assertTSNonNullExpression} from '@babel/types';
import {assertTSNullKeyword} from '@babel/types';
import {assertTSNumberKeyword} from '@babel/types';
import {assertTSObjectKeyword} from '@babel/types';
import {assertTSParameterProperty} from '@babel/types';
import {assertTSParenthesizedType} from '@babel/types';
import {assertTSPropertySignature} from '@babel/types';
import {assertTSQualifiedName} from '@babel/types';
import {assertTSStringKeyword} from '@babel/types';
import {assertTSSymbolKeyword} from '@babel/types';
import {assertTSThisType} from '@babel/types';
import {assertTSTupleType} from '@babel/types';
import {assertTSType} from '@babel/types';
import {assertTSTypeAliasDeclaration} from '@babel/types';
import {assertTSTypeAnnotation} from '@babel/types';
import {assertTSTypeAssertion} from '@babel/types';
import {assertTSTypeElement} from '@babel/types';
import {assertTSTypeLiteral} from '@babel/types';
import {assertTSTypeOperator} from '@babel/types';
import {assertTSTypeParameter} from '@babel/types';
import {assertTSTypeParameterDeclaration} from '@babel/types';
import {assertTSTypeParameterInstantiation} from '@babel/types';
import {assertTSTypePredicate} from '@babel/types';
import {assertTSTypeQuery} from '@babel/types';
import {assertTSTypeReference} from '@babel/types';
import {assertTSUndefinedKeyword} from '@babel/types';
import {assertTSUnionType} from '@babel/types';
import {assertTSVoidKeyword} from '@babel/types';
import {assertTaggedTemplateExpression} from '@babel/types';
import {assertTemplateElement} from '@babel/types';
import {assertTemplateLiteral} from '@babel/types';
import {assertTerminatorless} from '@babel/types';
import {assertThisExpression} from '@babel/types';
import {assertThisTypeAnnotation} from '@babel/types';
import {assertThrowStatement} from '@babel/types';
import {assertTryStatement} from '@babel/types';
import {assertTupleTypeAnnotation} from '@babel/types';
import {assertTypeAlias} from '@babel/types';
import {assertTypeAnnotation} from '@babel/types';
import {assertTypeCastExpression} from '@babel/types';
import {assertTypeParameter} from '@babel/types';
import {assertTypeParameterDeclaration} from '@babel/types';
import {assertTypeParameterInstantiation} from '@babel/types';
import {assertTypeofTypeAnnotation} from '@babel/types';
import {assertUnaryExpression} from '@babel/types';
import {assertUnaryLike} from '@babel/types';
import {assertUnionTypeAnnotation} from '@babel/types';
import {assertUpdateExpression} from '@babel/types';
import {assertUserWhitespacable} from '@babel/types';
import {assertVariableDeclaration} from '@babel/types';
import {assertVariableDeclarator} from '@babel/types';
import {assertVariance} from '@babel/types';
import {assertVoidTypeAnnotation} from '@babel/types';
import {assertWhile} from '@babel/types';
import {assertWhileStatement} from '@babel/types';
import {assertWithStatement} from '@babel/types';
import {assertYieldExpression} from '@babel/types';
import {assignmentExpression} from '@babel/types';
import {assignmentPattern} from '@babel/types';
import {awaitExpression} from '@babel/types';
import {binaryExpression} from '@babel/types';
import {bindExpression} from '@babel/types';
import {blockStatement} from '@babel/types';
import {booleanLiteral} from '@babel/types';
import {booleanLiteralTypeAnnotation} from '@babel/types';
import {booleanTypeAnnotation} from '@babel/types';
import {breakStatement} from '@babel/types';
import {buildMatchMemberExpression} from '@babel/types';
import {callExpression} from '@babel/types';
import {catchClause} from '@babel/types';
import {classBody} from '@babel/types';
import {classDeclaration} from '@babel/types';
import {classExpression} from '@babel/types';
import {classImplements} from '@babel/types';
import {classMethod} from '@babel/types';
import {classProperty} from '@babel/types';
import {clone} from '@babel/types';
import {cloneDeep} from '@babel/types';
import {cloneNode} from '@babel/types';
import {cloneWithoutLoc} from '@babel/types';
import {conditionalExpression} from '@babel/types';
import {continueStatement} from '@babel/types';
import {createTypeAnnotationBasedOnTypeof} from '@babel/types';
import {createUnionTypeAnnotation} from '@babel/types';
import {debuggerStatement} from '@babel/types';
import {declareClass} from '@babel/types';
import {declareExportAllDeclaration} from '@babel/types';
import {declareExportDeclaration} from '@babel/types';
import {declareFunction} from '@babel/types';
import {declareInterface} from '@babel/types';
import {declareModule} from '@babel/types';
import {declareModuleExports} from '@babel/types';
import {declareOpaqueType} from '@babel/types';
import {declareTypeAlias} from '@babel/types';
import {declareVariable} from '@babel/types';
import {declaredPredicate} from '@babel/types';
import {decorator} from '@babel/types';
import {directive} from '@babel/types';
import {directiveLiteral} from '@babel/types';
import {doExpression} from '@babel/types';
import {doWhileStatement} from '@babel/types';
import {emptyStatement} from '@babel/types';
import {emptyTypeAnnotation} from '@babel/types';
import {ensureBlock} from '@babel/types';
import {existsTypeAnnotation} from '@babel/types';
import {exportAllDeclaration} from '@babel/types';
import {exportDefaultDeclaration} from '@babel/types';
import {exportDefaultSpecifier} from '@babel/types';
import {exportNamedDeclaration} from '@babel/types';
import {exportNamespaceSpecifier} from '@babel/types';
import {exportSpecifier} from '@babel/types';
import {expressionStatement} from '@babel/types';
import {file} from '@babel/types';
import {forInStatement} from '@babel/types';
import {forOfStatement} from '@babel/types';
import {forStatement} from '@babel/types';
import {functionDeclaration} from '@babel/types';
import {functionExpression} from '@babel/types';
import {functionTypeAnnotation} from '@babel/types';
import {functionTypeParam} from '@babel/types';
import {genericTypeAnnotation} from '@babel/types';
import {getBindingIdentifiers} from '@babel/types';
import {getOuterBindingIdentifiers} from '@babel/types';
import {identifier} from '@babel/types';
import {ifStatement} from '@babel/types';
import {importDeclaration} from '@babel/types';
import {importDefaultSpecifier} from '@babel/types';
import {importNamespaceSpecifier} from '@babel/types';
import {importSpecifier} from '@babel/types';
import {inferredPredicate} from '@babel/types';
import {inheritInnerComments} from '@babel/types';
import {inheritLeadingComments} from '@babel/types';
import {inheritTrailingComments} from '@babel/types';
import {inherits} from '@babel/types';
import {inheritsComments} from '@babel/types';
import {interfaceDeclaration} from '@babel/types';
import {interfaceExtends} from '@babel/types';
import {intersectionTypeAnnotation} from '@babel/types';
import {is} from '@babel/types';
import {isAnyTypeAnnotation} from '@babel/types';
import {isArrayExpression} from '@babel/types';
import {isArrayPattern} from '@babel/types';
import {isArrayTypeAnnotation} from '@babel/types';
import {isArrowFunctionExpression} from '@babel/types';
import {isAssignmentExpression} from '@babel/types';
import {isAssignmentPattern} from '@babel/types';
import {isAwaitExpression} from '@babel/types';
import {isBinary} from '@babel/types';
import {isBinaryExpression} from '@babel/types';
import {isBindExpression} from '@babel/types';
import {isBinding} from '@babel/types';
import {isBlock} from '@babel/types';
import {isBlockParent} from '@babel/types';
import {isBlockScoped} from '@babel/types';
import {isBlockStatement} from '@babel/types';
import {isBooleanLiteral} from '@babel/types';
import {isBooleanLiteralTypeAnnotation} from '@babel/types';
import {isBooleanTypeAnnotation} from '@babel/types';
import {isBreakStatement} from '@babel/types';
import {isCallExpression} from '@babel/types';
import {isCatchClause} from '@babel/types';
import {isClass} from '@babel/types';
import {isClassBody} from '@babel/types';
import {isClassDeclaration} from '@babel/types';
import {isClassExpression} from '@babel/types';
import {isClassImplements} from '@babel/types';
import {isClassMethod} from '@babel/types';
import {isClassProperty} from '@babel/types';
import {isCompletionStatement} from '@babel/types';
import {isConditional} from '@babel/types';
import {isConditionalExpression} from '@babel/types';
import {isContinueStatement} from '@babel/types';
import {isDebuggerStatement} from '@babel/types';
import {isDeclaration} from '@babel/types';
import {isDeclareClass} from '@babel/types';
import {isDeclareExportAllDeclaration} from '@babel/types';
import {isDeclareExportDeclaration} from '@babel/types';
import {isDeclareFunction} from '@babel/types';
import {isDeclareInterface} from '@babel/types';
import {isDeclareModule} from '@babel/types';
import {isDeclareModuleExports} from '@babel/types';
import {isDeclareOpaqueType} from '@babel/types';
import {isDeclareTypeAlias} from '@babel/types';
import {isDeclareVariable} from '@babel/types';
import {isDeclaredPredicate} from '@babel/types';
import {isDecorator} from '@babel/types';
import {isDirective} from '@babel/types';
import {isDirectiveLiteral} from '@babel/types';
import {isDoExpression} from '@babel/types';
import {isDoWhileStatement} from '@babel/types';
import {isEmptyStatement} from '@babel/types';
import {isEmptyTypeAnnotation} from '@babel/types';
import {isExistsTypeAnnotation} from '@babel/types';
import {isExportAllDeclaration} from '@babel/types';
import {isExportDeclaration} from '@babel/types';
import {isExportDefaultDeclaration} from '@babel/types';
import {isExportDefaultSpecifier} from '@babel/types';
import {isExportNamedDeclaration} from '@babel/types';
import {isExportNamespaceSpecifier} from '@babel/types';
import {isExportSpecifier} from '@babel/types';
import {isExpression} from '@babel/types';
import {isExpressionStatement} from '@babel/types';
import {isExpressionWrapper} from '@babel/types';
import {isFile} from '@babel/types';
import {isFlow} from '@babel/types';
import {isFlowBaseAnnotation} from '@babel/types';
import {isFlowDeclaration} from '@babel/types';
import {isFlowPredicate} from '@babel/types';
import {isFlowType} from '@babel/types';
import {isFor} from '@babel/types';
import {isForInStatement} from '@babel/types';
import {isForOfStatement} from '@babel/types';
import {isForStatement} from '@babel/types';
import {isForXStatement} from '@babel/types';
import {isFunction} from '@babel/types';
import {isFunctionDeclaration} from '@babel/types';
import {isFunctionExpression} from '@babel/types';
import {isFunctionParent} from '@babel/types';
import {isFunctionTypeAnnotation} from '@babel/types';
import {isFunctionTypeParam} from '@babel/types';
import {isGenericTypeAnnotation} from '@babel/types';
import {isIdentifier} from '@babel/types';
import {isIfStatement} from '@babel/types';
import {isImmutable} from '@babel/types';
import {isImport} from '@babel/types';
import {isImportDeclaration} from '@babel/types';
import {isImportDefaultSpecifier} from '@babel/types';
import {isImportNamespaceSpecifier} from '@babel/types';
import {isImportSpecifier} from '@babel/types';
import {isInferredPredicate} from '@babel/types';
import {isInterfaceDeclaration} from '@babel/types';
import {isInterfaceExtends} from '@babel/types';
import {isIntersectionTypeAnnotation} from '@babel/types';
import {isJSX} from '@babel/types';
import {isJSXAttribute} from '@babel/types';
import {isJSXClosingElement} from '@babel/types';
import {isJSXClosingFragment} from '@babel/types';
import {isJSXElement} from '@babel/types';
import {isJSXEmptyExpression} from '@babel/types';
import {isJSXExpressionContainer} from '@babel/types';
import {isJSXFragment} from '@babel/types';
import {isJSXIdentifier} from '@babel/types';
import {isJSXMemberExpression} from '@babel/types';
import {isJSXNamespacedName} from '@babel/types';
import {isJSXOpeningElement} from '@babel/types';
import {isJSXOpeningFragment} from '@babel/types';
import {isJSXSpreadAttribute} from '@babel/types';
import {isJSXSpreadChild} from '@babel/types';
import {isJSXText} from '@babel/types';
import {isLVal} from '@babel/types';
import {isLabeledStatement} from '@babel/types';
import {isLet} from '@babel/types';
import {isLiteral} from '@babel/types';
import {isLogicalExpression} from '@babel/types';
import {isLoop} from '@babel/types';
import {isMemberExpression} from '@babel/types';
import {isMetaProperty} from '@babel/types';
import {isMethod} from '@babel/types';
import {isMixedTypeAnnotation} from '@babel/types';
import {isModuleDeclaration} from '@babel/types';
import {isModuleSpecifier} from '@babel/types';
import {isNewExpression} from '@babel/types';
import {isNode} from '@babel/types';
import {isNodesEquivalent} from '@babel/types';
import {isNoop} from '@babel/types';
import {isNullLiteral} from '@babel/types';
import {isNullLiteralTypeAnnotation} from '@babel/types';
import {isNullableTypeAnnotation} from '@babel/types';
import {isNumberLiteralTypeAnnotation} from '@babel/types';
import {isNumberTypeAnnotation} from '@babel/types';
import {isNumericLiteral} from '@babel/types';
import {isObjectExpression} from '@babel/types';
import {isObjectMember} from '@babel/types';
import {isObjectMethod} from '@babel/types';
import {isObjectPattern} from '@babel/types';
import {isObjectProperty} from '@babel/types';
import {isObjectTypeAnnotation} from '@babel/types';
import {isObjectTypeCallProperty} from '@babel/types';
import {isObjectTypeIndexer} from '@babel/types';
import {isObjectTypeProperty} from '@babel/types';
import {isObjectTypeSpreadProperty} from '@babel/types';
import {isOpaqueType} from '@babel/types';
import {isOptionalCallExpression} from '@babel/types';
import {isOptionalMemberExpression} from '@babel/types';
import {isParenthesizedExpression} from '@babel/types';
import {isPattern} from '@babel/types';
import {isPatternLike} from '@babel/types';
import {isProgram} from '@babel/types';
import {isProperty} from '@babel/types';
import {isPureish} from '@babel/types';
import {isQualifiedTypeIdentifier} from '@babel/types';
import {isReferenced} from '@babel/types';
import {isRegExpLiteral} from '@babel/types';
import {isRestElement} from '@babel/types';
import {isReturnStatement} from '@babel/types';
import {isScopable} from '@babel/types';
import {isScope} from '@babel/types';
import {isSequenceExpression} from '@babel/types';
import {isSpecifierDefault} from '@babel/types';
import {isSpreadElement} from '@babel/types';
import {isStatement} from '@babel/types';
import {isStringLiteral} from '@babel/types';
import {isStringLiteralTypeAnnotation} from '@babel/types';
import {isStringTypeAnnotation} from '@babel/types';
import {isSuper} from '@babel/types';
import {isSwitchCase} from '@babel/types';
import {isSwitchStatement} from '@babel/types';
import {isTSAnyKeyword} from '@babel/types';
import {isTSArrayType} from '@babel/types';
import {isTSAsExpression} from '@babel/types';
import {isTSBooleanKeyword} from '@babel/types';
import {isTSCallSignatureDeclaration} from '@babel/types';
import {isTSConstructSignatureDeclaration} from '@babel/types';
import {isTSConstructorType} from '@babel/types';
import {isTSDeclareFunction} from '@babel/types';
import {isTSDeclareMethod} from '@babel/types';
import {isTSEntityName} from '@babel/types';
import {isTSEnumDeclaration} from '@babel/types';
import {isTSEnumMember} from '@babel/types';
import {isTSExportAssignment} from '@babel/types';
import {isTSExpressionWithTypeArguments} from '@babel/types';
import {isTSExternalModuleReference} from '@babel/types';
import {isTSFunctionType} from '@babel/types';
import {isTSImportEqualsDeclaration} from '@babel/types';
import {isTSIndexSignature} from '@babel/types';
import {isTSIndexedAccessType} from '@babel/types';
import {isTSInterfaceBody} from '@babel/types';
import {isTSInterfaceDeclaration} from '@babel/types';
import {isTSIntersectionType} from '@babel/types';
import {isTSLiteralType} from '@babel/types';
import {isTSMappedType} from '@babel/types';
import {isTSMethodSignature} from '@babel/types';
import {isTSModuleBlock} from '@babel/types';
import {isTSModuleDeclaration} from '@babel/types';
import {isTSNamespaceExportDeclaration} from '@babel/types';
import {isTSNeverKeyword} from '@babel/types';
import {isTSNonNullExpression} from '@babel/types';
import {isTSNullKeyword} from '@babel/types';
import {isTSNumberKeyword} from '@babel/types';
import {isTSObjectKeyword} from '@babel/types';
import {isTSParameterProperty} from '@babel/types';
import {isTSParenthesizedType} from '@babel/types';
import {isTSPropertySignature} from '@babel/types';
import {isTSQualifiedName} from '@babel/types';
import {isTSStringKeyword} from '@babel/types';
import {isTSSymbolKeyword} from '@babel/types';
import {isTSThisType} from '@babel/types';
import {isTSTupleType} from '@babel/types';
import {isTSType} from '@babel/types';
import {isTSTypeAliasDeclaration} from '@babel/types';
import {isTSTypeAnnotation} from '@babel/types';
import {isTSTypeAssertion} from '@babel/types';
import {isTSTypeElement} from '@babel/types';
import {isTSTypeLiteral} from '@babel/types';
import {isTSTypeOperator} from '@babel/types';
import {isTSTypeParameter} from '@babel/types';
import {isTSTypeParameterDeclaration} from '@babel/types';
import {isTSTypeParameterInstantiation} from '@babel/types';
import {isTSTypePredicate} from '@babel/types';
import {isTSTypeQuery} from '@babel/types';
import {isTSTypeReference} from '@babel/types';
import {isTSUndefinedKeyword} from '@babel/types';
import {isTSUnionType} from '@babel/types';
import {isTSVoidKeyword} from '@babel/types';
import {isTaggedTemplateExpression} from '@babel/types';
import {isTemplateElement} from '@babel/types';
import {isTemplateLiteral} from '@babel/types';
import {isTerminatorless} from '@babel/types';
import {isThisExpression} from '@babel/types';
import {isThisTypeAnnotation} from '@babel/types';
import {isThrowStatement} from '@babel/types';
import {isTryStatement} from '@babel/types';
import {isTupleTypeAnnotation} from '@babel/types';
import {isType} from '@babel/types';
import {isTypeAlias} from '@babel/types';
import {isTypeAnnotation} from '@babel/types';
import {isTypeCastExpression} from '@babel/types';
import {isTypeParameter} from '@babel/types';
import {isTypeParameterDeclaration} from '@babel/types';
import {isTypeParameterInstantiation} from '@babel/types';
import {isTypeofTypeAnnotation} from '@babel/types';
import {isUnaryExpression} from '@babel/types';
import {isUnaryLike} from '@babel/types';
import {isUnionTypeAnnotation} from '@babel/types';
import {isUpdateExpression} from '@babel/types';
import {isUserWhitespacable} from '@babel/types';
import {isValidES3Identifier} from '@babel/types';
import {isValidIdentifier} from '@babel/types';
import {isVar} from '@babel/types';
import {isVariableDeclaration} from '@babel/types';
import {isVariableDeclarator} from '@babel/types';
import {isVariance} from '@babel/types';
import {isVoidTypeAnnotation} from '@babel/types';
import {isWhile} from '@babel/types';
import {isWhileStatement} from '@babel/types';
import {isWithStatement} from '@babel/types';
import {isYieldExpression} from '@babel/types';
import {jSXAttribute} from '@babel/types';
import {jSXClosingElement} from '@babel/types';
import {jSXClosingFragment} from '@babel/types';
import {jSXElement} from '@babel/types';
import {jSXEmptyExpression} from '@babel/types';
import {jSXExpressionContainer} from '@babel/types';
import {jSXFragment} from '@babel/types';
import {jSXIdentifier} from '@babel/types';
import {jSXMemberExpression} from '@babel/types';
import {jSXNamespacedName} from '@babel/types';
import {jSXOpeningElement} from '@babel/types';
import {jSXOpeningFragment} from '@babel/types';
import {jSXSpreadAttribute} from '@babel/types';
import {jSXSpreadChild} from '@babel/types';
import {jSXText} from '@babel/types';
import {jsxAttribute} from '@babel/types';
import {jsxClosingElement} from '@babel/types';
import {jsxClosingFragment} from '@babel/types';
import {jsxElement} from '@babel/types';
import {jsxEmptyExpression} from '@babel/types';
import {jsxExpressionContainer} from '@babel/types';
import {jsxFragment} from '@babel/types';
import {jsxIdentifier} from '@babel/types';
import {jsxMemberExpression} from '@babel/types';
import {jsxNamespacedName} from '@babel/types';
import {jsxOpeningElement} from '@babel/types';
import {jsxOpeningFragment} from '@babel/types';
import {jsxSpreadAttribute} from '@babel/types';
import {jsxSpreadChild} from '@babel/types';
import {jsxText} from '@babel/types';
import {labeledStatement} from '@babel/types';
import {logicalExpression} from '@babel/types';
import {matchesPattern} from '@babel/types';
import {memberExpression} from '@babel/types';
import {metaProperty} from '@babel/types';
import {mixedTypeAnnotation} from '@babel/types';
import {newExpression} from '@babel/types';
import {noop} from '@babel/types';
import {nullLiteral} from '@babel/types';
import {nullLiteralTypeAnnotation} from '@babel/types';
import {nullableTypeAnnotation} from '@babel/types';
import {numberLiteralTypeAnnotation} from '@babel/types';
import {numberTypeAnnotation} from '@babel/types';
import {numericLiteral} from '@babel/types';
import {objectExpression} from '@babel/types';
import {objectMethod} from '@babel/types';
import {objectPattern} from '@babel/types';
import {objectProperty} from '@babel/types';
import {objectTypeAnnotation} from '@babel/types';
import {objectTypeCallProperty} from '@babel/types';
import {objectTypeIndexer} from '@babel/types';
import {objectTypeProperty} from '@babel/types';
import {objectTypeSpreadProperty} from '@babel/types';
import {opaqueType} from '@babel/types';
import {optionalCallExpression} from '@babel/types';
import {optionalMemberExpression} from '@babel/types';
import {parenthesizedExpression} from '@babel/types';
import {prependToMemberExpression} from '@babel/types';
import {program} from '@babel/types';
import {qualifiedTypeIdentifier} from '@babel/types';
import {react} from '@babel/types';
import {regExpLiteral} from '@babel/types';
import {removeComments} from '@babel/types';
import {removeProperties} from '@babel/types';
import {removePropertiesDeep} from '@babel/types';
import {removeTypeDuplicates} from '@babel/types';
import {restElement} from '@babel/types';
import {returnStatement} from '@babel/types';
import {sequenceExpression} from '@babel/types';
import {shallowEqual} from '@babel/types';
import {spreadElement} from '@babel/types';
import {stringLiteral} from '@babel/types';
import {stringLiteralTypeAnnotation} from '@babel/types';
import {stringTypeAnnotation} from '@babel/types';
import {switchCase} from '@babel/types';
import {switchStatement} from '@babel/types';
import {tSAnyKeyword} from '@babel/types';
import {tSArrayType} from '@babel/types';
import {tSAsExpression} from '@babel/types';
import {tSBooleanKeyword} from '@babel/types';
import {tSCallSignatureDeclaration} from '@babel/types';
import {tSConstructSignatureDeclaration} from '@babel/types';
import {tSConstructorType} from '@babel/types';
import {tSDeclareFunction} from '@babel/types';
import {tSDeclareMethod} from '@babel/types';
import {tSEnumDeclaration} from '@babel/types';
import {tSEnumMember} from '@babel/types';
import {tSExportAssignment} from '@babel/types';
import {tSExpressionWithTypeArguments} from '@babel/types';
import {tSExternalModuleReference} from '@babel/types';
import {tSFunctionType} from '@babel/types';
import {tSImportEqualsDeclaration} from '@babel/types';
import {tSIndexSignature} from '@babel/types';
import {tSIndexedAccessType} from '@babel/types';
import {tSInterfaceBody} from '@babel/types';
import {tSInterfaceDeclaration} from '@babel/types';
import {tSIntersectionType} from '@babel/types';
import {tSLiteralType} from '@babel/types';
import {tSMappedType} from '@babel/types';
import {tSMethodSignature} from '@babel/types';
import {tSModuleBlock} from '@babel/types';
import {tSModuleDeclaration} from '@babel/types';
import {tSNamespaceExportDeclaration} from '@babel/types';
import {tSNeverKeyword} from '@babel/types';
import {tSNonNullExpression} from '@babel/types';
import {tSNullKeyword} from '@babel/types';
import {tSNumberKeyword} from '@babel/types';
import {tSObjectKeyword} from '@babel/types';
import {tSParameterProperty} from '@babel/types';
import {tSParenthesizedType} from '@babel/types';
import {tSPropertySignature} from '@babel/types';
import {tSQualifiedName} from '@babel/types';
import {tSStringKeyword} from '@babel/types';
import {tSSymbolKeyword} from '@babel/types';
import {tSThisType} from '@babel/types';
import {tSTupleType} from '@babel/types';
import {tSTypeAliasDeclaration} from '@babel/types';
import {tSTypeAnnotation} from '@babel/types';
import {tSTypeAssertion} from '@babel/types';
import {tSTypeLiteral} from '@babel/types';
import {tSTypeOperator} from '@babel/types';
import {tSTypeParameter} from '@babel/types';
import {tSTypeParameterDeclaration} from '@babel/types';
import {tSTypeParameterInstantiation} from '@babel/types';
import {tSTypePredicate} from '@babel/types';
import {tSTypeQuery} from '@babel/types';
import {tSTypeReference} from '@babel/types';
import {tSUndefinedKeyword} from '@babel/types';
import {tSUnionType} from '@babel/types';
import {tSVoidKeyword} from '@babel/types';
import {taggedTemplateExpression} from '@babel/types';
import {templateElement} from '@babel/types';
import {templateLiteral} from '@babel/types';
import {thisExpression} from '@babel/types';
import {thisTypeAnnotation} from '@babel/types';
import {throwStatement} from '@babel/types';
import {toBindingIdentifierName} from '@babel/types';
import {toBlock} from '@babel/types';
import {toComputedKey} from '@babel/types';
import {toExpression} from '@babel/types';
import {toIdentifier} from '@babel/types';
import {toKeyAlias} from '@babel/types';
import {toSequenceExpression} from '@babel/types';
import {toStatement} from '@babel/types';
import {traverse} from '@babel/types';
import {traverseFast} from '@babel/types';
import {tryStatement} from '@babel/types';
import {tsAnyKeyword} from '@babel/types';
import {tsArrayType} from '@babel/types';
import {tsAsExpression} from '@babel/types';
import {tsBooleanKeyword} from '@babel/types';
import {tsCallSignatureDeclaration} from '@babel/types';
import {tsConstructSignatureDeclaration} from '@babel/types';
import {tsConstructorType} from '@babel/types';
import {tsDeclareFunction} from '@babel/types';
import {tsDeclareMethod} from '@babel/types';
import {tsEnumDeclaration} from '@babel/types';
import {tsEnumMember} from '@babel/types';
import {tsExportAssignment} from '@babel/types';
import {tsExpressionWithTypeArguments} from '@babel/types';
import {tsExternalModuleReference} from '@babel/types';
import {tsFunctionType} from '@babel/types';
import {tsImportEqualsDeclaration} from '@babel/types';
import {tsIndexSignature} from '@babel/types';
import {tsIndexedAccessType} from '@babel/types';
import {tsInterfaceBody} from '@babel/types';
import {tsInterfaceDeclaration} from '@babel/types';
import {tsIntersectionType} from '@babel/types';
import {tsLiteralType} from '@babel/types';
import {tsMappedType} from '@babel/types';
import {tsMethodSignature} from '@babel/types';
import {tsModuleBlock} from '@babel/types';
import {tsModuleDeclaration} from '@babel/types';
import {tsNamespaceExportDeclaration} from '@babel/types';
import {tsNeverKeyword} from '@babel/types';
import {tsNonNullExpression} from '@babel/types';
import {tsNullKeyword} from '@babel/types';
import {tsNumberKeyword} from '@babel/types';
import {tsObjectKeyword} from '@babel/types';
import {tsParameterProperty} from '@babel/types';
import {tsParenthesizedType} from '@babel/types';
import {tsPropertySignature} from '@babel/types';
import {tsQualifiedName} from '@babel/types';
import {tsStringKeyword} from '@babel/types';
import {tsSymbolKeyword} from '@babel/types';
import {tsThisType} from '@babel/types';
import {tsTupleType} from '@babel/types';
import {tsTypeAliasDeclaration} from '@babel/types';
import {tsTypeAnnotation} from '@babel/types';
import {tsTypeAssertion} from '@babel/types';
import {tsTypeLiteral} from '@babel/types';
import {tsTypeOperator} from '@babel/types';
import {tsTypeParameter} from '@babel/types';
import {tsTypeParameterDeclaration} from '@babel/types';
import {tsTypeParameterInstantiation} from '@babel/types';
import {tsTypePredicate} from '@babel/types';
import {tsTypeQuery} from '@babel/types';
import {tsTypeReference} from '@babel/types';
import {tsUndefinedKeyword} from '@babel/types';
import {tsUnionType} from '@babel/types';
import {tsVoidKeyword} from '@babel/types';
import {tupleTypeAnnotation} from '@babel/types';
import {typeAlias} from '@babel/types';
import {typeAnnotation} from '@babel/types';
import {typeCastExpression} from '@babel/types';
import {typeParameter} from '@babel/types';
import {typeParameterDeclaration} from '@babel/types';
import {typeParameterInstantiation} from '@babel/types';
import {typeofTypeAnnotation} from '@babel/types';
import {unaryExpression} from '@babel/types';
import {unionTypeAnnotation} from '@babel/types';
import {updateExpression} from '@babel/types';
import {validate} from '@babel/types';
import {valueToNode} from '@babel/types';
import {variableDeclaration} from '@babel/types';
import {variableDeclarator} from '@babel/types';
import {variance} from '@babel/types';
import {voidTypeAnnotation} from '@babel/types';
import {whileStatement} from '@babel/types';
import {withStatement} from '@babel/types';
import {yieldExpression} from '@babel/types';
