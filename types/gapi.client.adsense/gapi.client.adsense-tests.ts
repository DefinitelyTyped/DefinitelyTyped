/* This is stub file for gapi.client.{{=it.name}} definition tests */
/* IMPORTANT.
* This file was automatically generated by https://github.com/Bolisov/google-api-typings-generator. Please do not edit it manually.
* In case of any problems please post issue to https://github.com/Bolisov/google-api-typings-generator
**/
gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('adsense', 'v1.4', () => {
        /** now we can use gapi.client.adsense */

        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [
            /** View and manage your AdSense data */
            'https://www.googleapis.com/auth/adsense',
            /** View your AdSense data */
            'https://www.googleapis.com/auth/adsense.readonly',
        ];
        const immediate = true;
        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /** handle succesfull authorization */
                run();
            } else {
                /** handle authorization error */
            }
        });
        run();
    });

    async function run() {
        /** Get information about the selected AdSense account. */
        await gapi.client.accounts.get({
            accountId: "accountId",
            tree: true,
        });
        /** List all accounts available to this AdSense account. */
        await gapi.client.accounts.list({
            maxResults: 1,
            pageToken: "pageToken",
        });
        /** List all ad clients in this AdSense account. */
        await gapi.client.adclients.list({
            maxResults: 1,
            pageToken: "pageToken",
        });
        /** Gets the specified ad unit in the specified ad client. */
        await gapi.client.adunits.get({
            adClientId: "adClientId",
            adUnitId: "adUnitId",
        });
        /** Get ad code for the specified ad unit. */
        await gapi.client.adunits.getAdCode({
            adClientId: "adClientId",
            adUnitId: "adUnitId",
        });
        /** List all ad units in the specified ad client for this AdSense account. */
        await gapi.client.adunits.list({
            adClientId: "adClientId",
            includeInactive: true,
            maxResults: 3,
            pageToken: "pageToken",
        });
        /** Dismiss (delete) the specified alert from the publisher's AdSense account. */
        await gapi.client.alerts.delete({
            alertId: "alertId",
        });
        /** List the alerts for this AdSense account. */
        await gapi.client.alerts.list({
            locale: "locale",
        });
        /** Get the specified custom channel from the specified ad client. */
        await gapi.client.customchannels.get({
            adClientId: "adClientId",
            customChannelId: "customChannelId",
        });
        /** List all custom channels in the specified ad client for this AdSense account. */
        await gapi.client.customchannels.list({
            adClientId: "adClientId",
            maxResults: 2,
            pageToken: "pageToken",
        });
        /** List the payments for this AdSense account. */
        await gapi.client.payments.list({
        });
        /**
         * Generate an AdSense report based on the report request sent in the query parameters. Returns the result as JSON; to retrieve output in CSV format
         * specify "alt=csv" as a query parameter.
         */
        await gapi.client.reports.generate({
            accountId: "accountId",
            currency: "currency",
            dimension: "dimension",
            endDate: "endDate",
            filter: "filter",
            locale: "locale",
            maxResults: 7,
            metric: "metric",
            sort: "sort",
            startDate: "startDate",
            startIndex: 11,
            useTimezoneReporting: true,
        });
        /** Get a specific saved ad style from the user's account. */
        await gapi.client.savedadstyles.get({
            savedAdStyleId: "savedAdStyleId",
        });
        /** List all saved ad styles in the user's account. */
        await gapi.client.savedadstyles.list({
            maxResults: 1,
            pageToken: "pageToken",
        });
        /** List all URL channels in the specified ad client for this AdSense account. */
        await gapi.client.urlchannels.list({
            adClientId: "adClientId",
            maxResults: 2,
            pageToken: "pageToken",
        });
    }
});
