import * as areEqual from 'fbjs/lib/areEqual';
import * as invariant from 'fbjs/lib/invariant';
import * as warning from 'fbjs/lib/warning';
import * as BrowserSupportCore from 'fbjs/lib/BrowserSupportCore';
import * as base62 from 'fbjs/lib/base62';
import * as _shouldPolyfillES6Collection from 'fbjs/lib/_shouldPolyfillES6Collection';
import * as camelize from 'fbjs/lib/camelize';
import * as camelizeStyleName from 'fbjs/lib/camelizeStyleName';
import * as cancelAnimationFramePolyfill from 'fbjs/lib/cancelAnimationFramePolyfill';
import * as CircularBuffer from 'fbjs/lib/CircularBuffer';
import * as clamp from 'fbjs/lib/clamp';
import * as compactArray from 'fbjs/lib/compactArray';
import * as concatAllArray from 'fbjs/lib/concatAllArray';
import * as containsNode from 'fbjs/lib/containsNode';
import * as countDistinct from 'fbjs/lib/countDistinct';
import * as crc32 from 'fbjs/lib/crc32';
import * as createArrayFromMixed from 'fbjs/lib/createArrayFromMixed';
import * as createNodesFromMarkup from 'fbjs/lib/createNodesFromMarkup';
import * as CSSCore from 'fbjs/lib/CSSCore';
import * as cssVar from 'fbjs/lib/cssVar';
import * as cx from 'fbjs/lib/cx';
import * as DataTransfer from 'fbjs/lib/DataTransfer';
import * as debounceCore from 'fbjs/lib/debounceCore';
import * as Deferred from 'fbjs/lib/Deferred';
import * as distinctArray from 'fbjs/lib/distinctArray';
import * as DOMMouseMoveTracker from 'fbjs/lib/DOMMouseMoveTracker';
import * as emptyFunction from 'fbjs/lib/emptyFunction';
import * as emptyObject from 'fbjs/lib/emptyObject';
import * as enumerate from 'fbjs/lib/enumerate';
import * as equalsIterable from 'fbjs/lib/equalsIterable';
import * as equalsSet from 'fbjs/lib/equalsSet';
import * as ErrorUtils from 'fbjs/lib/ErrorUtils';
import * as EventListener from 'fbjs/lib/EventListener';
import * as everyObject from 'fbjs/lib/everyObject';
import * as everySet from 'fbjs/lib/everySet';
import * as ExecutionEnvironment from 'fbjs/lib/ExecutionEnvironment';
import * as fetchWithRetries from 'fbjs/lib/fetchWithRetries';
import * as filterObject from 'fbjs/lib/filterObject';
import * as flatMapArray from 'fbjs/lib/flatMapArray';
import * as flattenArray from 'fbjs/lib/flattenArray';
import * as focusNode from 'fbjs/lib/focusNode';
import * as forEachObject from 'fbjs/lib/forEachObject';
import * as getActiveElement from 'fbjs/lib/getActiveElement';
import * as getByPath from 'fbjs/lib/getByPath';
import * as getDocumentScrollElement from 'fbjs/lib/getDocumentScrollElement';
import * as getElementPosition from 'fbjs/lib/getElementPosition';
import * as getElementRect from 'fbjs/lib/getElementRect';
import * as getMarkupWrap from 'fbjs/lib/getMarkupWrap';
import * as getScrollPosition from 'fbjs/lib/getScrollPosition';
import * as getStyleProperty from 'fbjs/lib/getStyleProperty';
import * as getUnboundedScrollPosition from 'fbjs/lib/getUnboundedScrollPosition';
import * as getVendorPrefixedName from 'fbjs/lib/getVendorPrefixedName';
import * as getViewportDimensions from 'fbjs/lib/getViewportDimensions';
import * as groupArray from 'fbjs/lib/groupArray';
import * as Heap from 'fbjs/lib/Heap';
import * as hyphenate from 'fbjs/lib/hyphenate';
import * as hyphenateStyleName from 'fbjs/lib/hyphenateStyleName';
import * as IntegerBufferSet from 'fbjs/lib/IntegerBufferSet';
import * as isEmail from 'fbjs/lib/isEmail';
import * as isEmpty from 'fbjs/lib/isEmpty';
import * as isEventSupported from 'fbjs/lib/isEventSupported';
import * as isInternationalPhoneNumber from 'fbjs/lib/isInternationalPhoneNumber';
import * as isNode from 'fbjs/lib/isNode';
import * as isTextNode from 'fbjs/lib/isTextNode';
import * as joinClasses from 'fbjs/lib/joinClasses';
import * as keyMirror from 'fbjs/lib/keyMirror';
import * as keyMirrorRecursive from 'fbjs/lib/keyMirrorRecursive';
import * as keyOf from 'fbjs/lib/keyOf';
import * as Keys from 'fbjs/lib/Keys';
import * as Locale from 'fbjs/lib/Locale';
import * as mapObject from 'fbjs/lib/mapObject';
import * as maxBy from 'fbjs/lib/maxBy';
import * as memoizeStringOnly from 'fbjs/lib/memoizeStringOnly';
import * as minBy from 'fbjs/lib/minBy';
import * as monitorCodeUse from 'fbjs/lib/monitorCodeUse';
import * as nativeRequestAnimationFrame from 'fbjs/lib/nativeRequestAnimationFrame';
import * as normalizeWheel from 'fbjs/lib/normalizeWheel';
import * as nullthrows from 'fbjs/lib/nullthrows';
import * as partitionArray from 'fbjs/lib/partitionArray';
import * as partitionObject from 'fbjs/lib/partitionObject';
import * as partitionObjectByKey from 'fbjs/lib/partitionObjectByKey';
import * as PhotosMimeType from 'fbjs/lib/PhotosMimeType';
import * as PrefixIntervalTree from 'fbjs/lib/PrefixIntervalTree';
import * as ReactWheelHandler from 'fbjs/lib/ReactWheelHandler';
import * as removeFromArray from 'fbjs/lib/removeFromArray';
import * as requestAnimationFrame from 'fbjs/lib/requestAnimationFrame';
import * as requestAnimationFramePolyfill from 'fbjs/lib/requestAnimationFramePolyfill';
import * as resolveImmediate from 'fbjs/lib/resolveImmediate';
import * as Scroll from 'fbjs/lib/Scroll';
import * as setImmediate from 'fbjs/lib/setImmediate';
import * as shallowEqual from 'fbjs/lib/shallowEqual';
import * as SiteData from 'fbjs/lib/SiteData';
import * as someObject from 'fbjs/lib/someObject';
import * as someSet from 'fbjs/lib/someSet';
import * as sprintf from 'fbjs/lib/sprintf';
import * as Style from 'fbjs/lib/Style';
import * as TokenizeUtil from 'fbjs/lib/TokenizeUtil';
import * as TouchEventUtils from 'fbjs/lib/TouchEventUtils';
import * as translateDOMPositionXY from 'fbjs/lib/translateDOMPositionXY';
import * as UnicodeBidi from 'fbjs/lib/UnicodeBidi';
import * as UnicodeBidiDirection from 'fbjs/lib/UnicodeBidiDirection';
import * as UnicodeBidiService from 'fbjs/lib/UnicodeBidiService';
import * as UnicodeCJK from 'fbjs/lib/UnicodeCJK';
import * as UnicodeHangulKorean from 'fbjs/lib/UnicodeHangulKorean';
import * as UnicodeUtils from 'fbjs/lib/UnicodeUtils';
import * as UnicodeUtilsExtra from 'fbjs/lib/UnicodeUtilsExtra';
import * as URI from 'fbjs/lib/URI';
import * as UserAgent from 'fbjs/lib/UserAgent';
import * as UserAgentData from 'fbjs/lib/UserAgentData';
import * as VersionRange from 'fbjs/lib/VersionRange';
import * as xhrSimpleDataSerializer from 'fbjs/lib/xhrSimpleDataSerializer';

const array = ['array'];
const setTemp = new Set<string>();
const element = document.createElement('div');
const stringTest = 'background-color';
const className = 'className';
camelize(stringTest);
camelizeStyleName(stringTest);
cancelAnimationFramePolyfill(3);
const circularBuffer = new CircularBuffer();
circularBuffer.clear();
clamp(4, 1, 5);
compactArray(array);
concatAllArray(array);
containsNode(element, element);
countDistinct(array, item => item);
crc32(stringTest);
createArrayFromMixed(emptyObject);
createNodesFromMarkup(stringTest);
CSSCore.hasClass(element, className);
cssVar(stringTest);
cx(className);
const dataTransfer = new DataTransfer(null);
dataTransfer.isImage();
debounceCore(areEqual, 100);
const deferred = new Deferred();
deferred.isSettled();
distinctArray(array);
const domMouseMoveTracker = new DOMMouseMoveTracker(
    () => undefined,
    () => undefined,
    element,
);
domMouseMoveTracker.isDragging();
emptyFunction();
enumerate(emptyObject);
equalsIterable(array, array);
equalsSet(setTemp, setTemp);
ErrorUtils.guard(emptyFunction, stringTest);
EventListener.registerDefault();
everyObject(emptyObject, emptyFunction);
everySet(setTemp, emptyFunction.thatReturnsFalse);
ExecutionEnvironment.canUseDOM;
fetchWithRetries(stringTest);
filterObject(emptyObject, emptyFunction);
flatMapArray(array, () => array);
flattenArray(array);
focusNode(element);
forEachObject(emptyObject, emptyFunction);
getActiveElement();
getByPath(emptyObject, array);
getDocumentScrollElement();
getElementPosition(element);
getElementRect(element);
getMarkupWrap(stringTest);
getScrollPosition(element);
getStyleProperty(element, stringTest);
getUnboundedScrollPosition(element);
getVendorPrefixedName(stringTest);
getViewportDimensions();
groupArray(array, emptyObject);
const heap = new Heap();
heap.size();
hyphenate(stringTest);
hyphenateStyleName(stringTest);
const integerBufferSet = new IntegerBufferSet();
integerBufferSet.getSize();
isEmail(stringTest);
isEmpty(stringTest);
isEventSupported(stringTest);
isInternationalPhoneNumber(stringTest);
isNode();
isTextNode();
joinClasses(stringTest);
keyMirror(emptyObject);
keyMirrorRecursive(emptyObject);
keyOf(emptyObject);
Keys.BACKSPACE;
Locale.isRTL();
mapObject(emptyObject, emptyFunction);
maxBy(array, emptyFunction);
memoizeStringOnly(s => s);
minBy(array, emptyFunction);
monitorCodeUse(stringTest);
nativeRequestAnimationFrame();
normalizeWheel(stringTest);
nullthrows(stringTest);
partitionArray(array, emptyFunction.thatReturnsFalse);
partitionObject({}, emptyFunction.thatReturnsFalse);
partitionObjectByKey(emptyObject, setTemp);
PhotosMimeType.isImage(stringTest);
const prefixIntervalTree = new PrefixIntervalTree([10]);
prefixIntervalTree.getSize();
const reactWheelHandler = new ReactWheelHandler(emptyFunction, false, false);
reactWheelHandler.onWheel(stringTest);
removeFromArray(array, stringTest);
requestAnimationFrame();
requestAnimationFramePolyfill();
resolveImmediate(emptyFunction);
Scroll.getTop(element);
setImmediate(emptyFunction);
shallowEqual(emptyObject, emptyObject);
SiteData.is_rtl;
someObject(emptyObject, emptyFunction);
someSet(setTemp, emptyFunction.thatReturnsFalse);
sprintf(stringTest);
Style.get(element, stringTest);
TokenizeUtil.getPunctuation();
TouchEventUtils.extractSingleTouch(new Event(stringTest));
translateDOMPositionXY();
UnicodeBidi.isDirectionLTR(stringTest, UnicodeBidiDirection.LTR);
const unicode = new UnicodeBidiService(null);
unicode.reset();
UnicodeCJK.hasKana(stringTest);
UnicodeHangulKorean.toConjoiningJamo(stringTest);
UnicodeUtils.substr(stringTest);
UnicodeUtilsExtra.pyEscape(stringTest);
const uri = new URI(stringTest);
uri.toString();
UserAgent.isDevice(stringTest);
UserAgentData.deviceName;
VersionRange.contains(stringTest, stringTest);
xhrSimpleDataSerializer(emptyObject);

const a = {};

const isEqual = areEqual(a, a);
invariant(isEqual, 'areEqual(`%s`, `%s`)', a, a);
warning(isEqual, 'areEqual(`%s`, `%s`)', a, a);
base62(53);
_shouldPolyfillES6Collection('collectionName');

BrowserSupportCore.hasCSS3DTransforms();
