import _shouldPolyfillES6Collection from "fbjs/lib/_shouldPolyfillES6Collection";
import areEqual from "fbjs/lib/areEqual";
import base62 from "fbjs/lib/base62";
import * as BrowserSupportCore from "fbjs/lib/BrowserSupportCore";
import camelize from "fbjs/lib/camelize";
import camelizeStyleName from "fbjs/lib/camelizeStyleName";
import cancelAnimationFramePolyfill from "fbjs/lib/cancelAnimationFramePolyfill";
import CircularBuffer from "fbjs/lib/CircularBuffer";
import clamp from "fbjs/lib/clamp";
import compactArray from "fbjs/lib/compactArray";
import concatAllArray from "fbjs/lib/concatAllArray";
import containsNode from "fbjs/lib/containsNode";
import countDistinct from "fbjs/lib/countDistinct";
import crc32 from "fbjs/lib/crc32";
import createArrayFromMixed from "fbjs/lib/createArrayFromMixed";
import createNodesFromMarkup from "fbjs/lib/createNodesFromMarkup";
import * as CSSCore from "fbjs/lib/CSSCore";
import cssVar from "fbjs/lib/cssVar";
import cx from "fbjs/lib/cx";
import DataTransfer from "fbjs/lib/DataTransfer";
import debounceCore from "fbjs/lib/debounceCore";
import Deferred from "fbjs/lib/Deferred";
import distinctArray from "fbjs/lib/distinctArray";
import DOMMouseMoveTracker from "fbjs/lib/DOMMouseMoveTracker";
import emptyFunction from "fbjs/lib/emptyFunction";
import * as emptyObject from "fbjs/lib/emptyObject";
import enumerate from "fbjs/lib/enumerate";
import equalsIterable from "fbjs/lib/equalsIterable";
import equalsSet from "fbjs/lib/equalsSet";
import * as ErrorUtils from "fbjs/lib/ErrorUtils";
import * as EventListener from "fbjs/lib/EventListener";
import everyObject from "fbjs/lib/everyObject";
import everySet from "fbjs/lib/everySet";
import * as ExecutionEnvironment from "fbjs/lib/ExecutionEnvironment";
import fetchWithRetries from "fbjs/lib/fetchWithRetries";
import filterObject from "fbjs/lib/filterObject";
import flatMapArray from "fbjs/lib/flatMapArray";
import flattenArray from "fbjs/lib/flattenArray";
import focusNode from "fbjs/lib/focusNode";
import forEachObject from "fbjs/lib/forEachObject";
import getActiveElement from "fbjs/lib/getActiveElement";
import getByPath from "fbjs/lib/getByPath";
import getDocumentScrollElement from "fbjs/lib/getDocumentScrollElement";
import getElementPosition from "fbjs/lib/getElementPosition";
import getElementRect from "fbjs/lib/getElementRect";
import getMarkupWrap from "fbjs/lib/getMarkupWrap";
import getScrollPosition from "fbjs/lib/getScrollPosition";
import getStyleProperty from "fbjs/lib/getStyleProperty";
import getUnboundedScrollPosition from "fbjs/lib/getUnboundedScrollPosition";
import getVendorPrefixedName from "fbjs/lib/getVendorPrefixedName";
import getViewportDimensions from "fbjs/lib/getViewportDimensions";
import groupArray from "fbjs/lib/groupArray";
import Heap from "fbjs/lib/Heap";
import hyphenate from "fbjs/lib/hyphenate";
import hyphenateStyleName from "fbjs/lib/hyphenateStyleName";
import IntegerBufferSet from "fbjs/lib/IntegerBufferSet";
import invariant from "fbjs/lib/invariant";
import isEmail from "fbjs/lib/isEmail";
import isEmpty from "fbjs/lib/isEmpty";
import isEventSupported from "fbjs/lib/isEventSupported";
import isInternationalPhoneNumber from "fbjs/lib/isInternationalPhoneNumber";
import isNode from "fbjs/lib/isNode";
import isTextNode from "fbjs/lib/isTextNode";
import joinClasses from "fbjs/lib/joinClasses";
import keyMirror from "fbjs/lib/keyMirror";
import keyMirrorRecursive from "fbjs/lib/keyMirrorRecursive";
import keyOf from "fbjs/lib/keyOf";
import * as Keys from "fbjs/lib/Keys";
import * as Locale from "fbjs/lib/Locale";
import mapObject from "fbjs/lib/mapObject";
import maxBy from "fbjs/lib/maxBy";
import memoizeStringOnly from "fbjs/lib/memoizeStringOnly";
import minBy from "fbjs/lib/minBy";
import monitorCodeUse from "fbjs/lib/monitorCodeUse";
import nativeRequestAnimationFrame from "fbjs/lib/nativeRequestAnimationFrame";
import normalizeWheel from "fbjs/lib/normalizeWheel";
import nullthrows from "fbjs/lib/nullthrows";
import partitionArray from "fbjs/lib/partitionArray";
import partitionObject from "fbjs/lib/partitionObject";
import partitionObjectByKey from "fbjs/lib/partitionObjectByKey";
import * as PhotosMimeType from "fbjs/lib/PhotosMimeType";
import PrefixIntervalTree from "fbjs/lib/PrefixIntervalTree";
import ReactWheelHandler from "fbjs/lib/ReactWheelHandler";
import removeFromArray from "fbjs/lib/removeFromArray";
import requestAnimationFrame from "fbjs/lib/requestAnimationFrame";
import requestAnimationFramePolyfill from "fbjs/lib/requestAnimationFramePolyfill";
import resolveImmediate from "fbjs/lib/resolveImmediate";
import * as Scroll from "fbjs/lib/Scroll";
import setImmediate from "fbjs/lib/setImmediate";
import shallowEqual from "fbjs/lib/shallowEqual";
import * as SiteData from "fbjs/lib/SiteData";
import someObject from "fbjs/lib/someObject";
import someSet from "fbjs/lib/someSet";
import sprintf from "fbjs/lib/sprintf";
import * as Style from "fbjs/lib/Style";
import * as TokenizeUtil from "fbjs/lib/TokenizeUtil";
import * as TouchEventUtils from "fbjs/lib/TouchEventUtils";
import translateDOMPositionXY from "fbjs/lib/translateDOMPositionXY";
import * as UnicodeBidi from "fbjs/lib/UnicodeBidi";
import * as UnicodeBidiDirection from "fbjs/lib/UnicodeBidiDirection";
import UnicodeBidiService from "fbjs/lib/UnicodeBidiService";
import * as UnicodeCJK from "fbjs/lib/UnicodeCJK";
import * as UnicodeHangulKorean from "fbjs/lib/UnicodeHangulKorean";
import * as UnicodeUtils from "fbjs/lib/UnicodeUtils";
import * as UnicodeUtilsExtra from "fbjs/lib/UnicodeUtilsExtra";
import URI from "fbjs/lib/URI";
import * as UserAgent from "fbjs/lib/UserAgent";
import * as UserAgentData from "fbjs/lib/UserAgentData";
import * as VersionRange from "fbjs/lib/VersionRange";
import warning from "fbjs/lib/warning";
import xhrSimpleDataSerializer from "fbjs/lib/xhrSimpleDataSerializer";

const array = ["array"];
const setTemp = new Set<string>();
const element = document.createElement("div");
const stringTest = "background-color";
const className = "className";
camelize(stringTest);
camelizeStyleName(stringTest);
cancelAnimationFramePolyfill(3);
const circularBuffer = new CircularBuffer();
circularBuffer.clear();
clamp(4, 1, 5);
compactArray(array);
concatAllArray(array);
containsNode(element, element);
countDistinct(array, item => item);
crc32(stringTest);
createArrayFromMixed(emptyObject);
createNodesFromMarkup(stringTest);
CSSCore.hasClass(element, className);
cssVar(stringTest);
cx(className);
const dataTransfer = new DataTransfer(null);
dataTransfer.isImage();
debounceCore(areEqual, 100);
const deferred = new Deferred();
deferred.isSettled();
distinctArray(array);
const domMouseMoveTracker = new DOMMouseMoveTracker(
    () => undefined,
    () => undefined,
    element,
);
domMouseMoveTracker.isDragging();
emptyFunction();
enumerate(emptyObject);
equalsIterable(array, array);
equalsSet(setTemp, setTemp);
ErrorUtils.guard(emptyFunction, stringTest);
EventListener.registerDefault();
everyObject(emptyObject, emptyFunction);
everySet(setTemp, emptyFunction.thatReturnsFalse);
ExecutionEnvironment.canUseDOM;
fetchWithRetries(stringTest);
filterObject(emptyObject, emptyFunction);
flatMapArray(array, () => array);
flattenArray(array);
focusNode(element);
forEachObject(emptyObject, emptyFunction);
getActiveElement();
getByPath(emptyObject, array);
getDocumentScrollElement();
getElementPosition(element);
getElementRect(element);
getMarkupWrap(stringTest);
getScrollPosition(element);
getStyleProperty(element, stringTest);
getUnboundedScrollPosition(element);
getVendorPrefixedName(stringTest);
getViewportDimensions();
groupArray(array, emptyObject);
const heap = new Heap();
heap.size();
hyphenate(stringTest);
hyphenateStyleName(stringTest);
const integerBufferSet = new IntegerBufferSet();
integerBufferSet.getSize();
isEmail(stringTest);
isEmpty(stringTest);
isEventSupported(stringTest);
isInternationalPhoneNumber(stringTest);
isNode();
isTextNode();
joinClasses(stringTest);
keyMirror(emptyObject);
keyMirrorRecursive(emptyObject);
keyOf(emptyObject);
Keys.BACKSPACE;
Locale.isRTL();
mapObject(emptyObject, emptyFunction);
maxBy(array, emptyFunction);
memoizeStringOnly(s => s);
minBy(array, emptyFunction);
monitorCodeUse(stringTest);
nativeRequestAnimationFrame();
normalizeWheel(stringTest);
nullthrows(stringTest);
partitionArray(array, emptyFunction.thatReturnsFalse);
partitionObject({}, emptyFunction.thatReturnsFalse);
partitionObjectByKey(emptyObject, setTemp);
PhotosMimeType.isImage(stringTest);
const prefixIntervalTree = new PrefixIntervalTree([10]);
prefixIntervalTree.getSize();
const reactWheelHandler = new ReactWheelHandler(emptyFunction, false, false);
reactWheelHandler.onWheel(stringTest);
removeFromArray(array, stringTest);
requestAnimationFrame();
requestAnimationFramePolyfill();
resolveImmediate(emptyFunction);
Scroll.getTop(element);
setImmediate(emptyFunction);
shallowEqual(emptyObject, emptyObject);
SiteData.is_rtl;
someObject(emptyObject, emptyFunction);
someSet(setTemp, emptyFunction.thatReturnsFalse);
sprintf(stringTest);
Style.get(element, stringTest);
TokenizeUtil.getPunctuation();
TouchEventUtils.extractSingleTouch(new Event(stringTest));
translateDOMPositionXY();
UnicodeBidi.isDirectionLTR(stringTest, UnicodeBidiDirection.LTR);
const unicode = new UnicodeBidiService(null);
unicode.reset();
UnicodeCJK.hasKana(stringTest);
UnicodeHangulKorean.toConjoiningJamo(stringTest);
UnicodeUtils.substr(stringTest);
UnicodeUtilsExtra.pyEscape(stringTest);
const uri = new URI(stringTest);
uri.toString();
UserAgent.isDevice(stringTest);
UserAgentData.deviceName;
VersionRange.contains(stringTest, stringTest);
xhrSimpleDataSerializer(emptyObject);

const a = {};

const isEqual = areEqual(a, a);
invariant(isEqual, "areEqual(`%s`, `%s`)", a, a);
warning(isEqual, "areEqual(`%s`, `%s`)", a, a);
base62(53);
_shouldPolyfillES6Collection("collectionName");

BrowserSupportCore.hasCSS3DTransforms();
