tests/test.ts:R.propIs(Number, 'x', {});

Expected error Argument of type 'x' is not assignable to parameter of type 'never'.`, because 'x' is not in `{}`.

tests/test.ts:xy(3);

Expected type
  <Y>(v2: Y) => { x: number; y: Y; }
but got:
  (v2: {}) => { x: {}; y: {}; }

tests/test.ts:xy(3)(1);

Expected type
  { x: number; y: number; }
but got:
  { x: {}; y: {}; }

tests/test.ts:xyz(3, 2, 1);

Expected type
  { x: number; y: number; z: number; }
but got:
  { x: {}; y: {}; z: {}; }

tests/test.ts:xyz(3)(2)(1);

Expected type
  { x: number; y: number; z: number; }
but got:
  { x: {}; y: {}; z: {}; }

tests/test.ts:xyz(3, 2);

Expected type
  <Z>(v3: Z) => ({ x: number; y: number; z: Z; })
but got:
  (v3: {}) => { x: {}; y: {}; z: {}; }

tests/test.ts:xyz(3)(2);

Expected type
  <Z>(v3: Z) => ({ x: number; y: number; z: Z; })
but got:
  (v2: {}) => { x: {}; y: {}; z: {}; }

tests/test.ts:xyz(3);

Expected type
  <Y, Z>(v2: Y, v3: Z) => ({ x: number; y: Y; z: Z; })
but got:
  CurriedFunction2<{}, {}, { x: {}; y: {}; z: {}; }>

tests/test.ts:curriedFourNumbers(1)(2)(3);

Expected type
  <T1,R>(v1: T1) => R
but got:
  (v2: number) => number

tests/test.ts:curriedFourNumbers(1,2,4);

Expected type
  <T1,R>(v1: T1) => R
but got:
  (v4: number) => number

tests/test.ts:R.nAry(0, takesNoArg);

Expected type
  () => boolean
but got:
  Variadic<boolean>

tests/test.ts:R.nAry(0, takesOneArg);

Expected type
  () => number[]
but got:
  Variadic<number[]>

tests/test.ts:R.nAry(1, takesTwoArgs);

Expected type
  (a: number) => number[]
but got:
  Variadic<number[]>

tests/test.ts:R.nAry(1, takesThreeArgs);

Expected type
  (a: number) => number[]
but got:
  Variadic<number[]>

tests/test.ts:R.binary(takesTwoArgs);

Expected type
  (a: number, b: number) => number[]
but got:
  (a: any, b: any) => number[]

tests/test.ts:R.binary(takesThreeArgs);

Expected type
  (a: number, b: number) => number[]
but got:
  (a: any, b: any) => number[]

tests/test.ts:let addTwoNumbersCurried = R.curry(addTwoNumbers);

Expected type
  CurriedFunction2<number, number, number>
but got:
  any

tests/test.ts:const coerceArray = R.unless(R.isArrayLike, R.of);

Expected type
  <a>(v: a|[a]) => [a]
but got:
  any

tests/test.ts:coerceArray([1, 2, 3]);

Expected type
  number[]
but got:
  any[]

tests/test.ts:coerceArray(1);

Expected type
  number[]
but got:
  any[]

tests/test.ts:R.nthArg(1)('a', 'b', 'c');

Expected type
  string
but got:
  "a" | "b" | "c"

tests/test.ts:R.nthArg(-1)('a', 'b', 'c');

Expected type
  string
but got:
  "a" | "b" | "c"

tests/test.ts:R.unapply(JSON.stringify);

Expected type
  (...args: string[])=>string
but got:
  Variadic<string>

tests/test.ts:const g = R.compose(g3, g2, g1, g0);

Expected type
  (list: number[]) => boolean
but got:
  any

tests/test.ts:const capitalize = (str: string) => R.pipe(
        R.split(''),
        R.adjust(R.toUpper, 0),
        R.join('')
    )(str);

Expected type
  string
but got:
  any

tests/test.ts:R.pipe(R.identity, double);

Expected type
  (x0: number) => number
but got:
  (x0: {}) => number

tests/test.ts: Unexpected error
  'Promise' only refers to a type, but is being used as a value here.

tests/test.ts: Unexpected error
  'Promise' only refers to a type, but is being used as a value here.

tests/test.ts:R.invoker(0, 'toUpperCase', 'foo');

Expected type
  string
but got:
  {}

tests/test.ts:R.invoker(1, 'charAt', 'foo', 1);

Expected type
  string
but got:
  {}

tests/test.ts:chopped('longstring');

Expected type
  string[]
but got:
  ({} | undefined)[]

tests/test.ts:R.clone([{},{},{}]);

Expected type
  Object[]
but got:
  {}[]

tests/test.ts:R.reduceRight(flattenPairs, [], pairs);

Expected type
  Array<number|string>
but got:
  [string, number]

tests/test.ts:R.empty('unicorns');

Expected type
  string
but got:
  "unicorns"

tests/test.ts:R.empty({x: 1, y: 2});

Expected type
  {}
but got:
  { x: number; y: number; }

tests/test.ts:filterIndexed(lastTwo, [8, 6, 7, 5, 3, 0, 9]);

Expected type
  number[]
but got:
  any[]

tests/test.ts:R.unfold(f, 10);

Expected type
  number[]
but got:
  TResult[]

tests/test.ts: Unexpected error
  Argument of type '(n: number) => false | number[]' is not assignable to parameter of type '(seed: number) => false | [{}, number]'.
  Type 'false | number[]' is not assignable to type 'false | [{}, number]'.
    Type 'number[]' is not assignable to type 'false | [{}, number]'.
      Type 'number[]' is not assignable to type '[{}, number]'.

tests/test.ts:b(10);

Expected type
  number[]
but got:
  TResult[]

tests/test.ts:let peopleByYoungestFirst = R.sort(byAge, people);

Expected type
  typeof people
but got:
  any

tests/test.ts:R.append<string, string[]>(['tests'], ['write', 'more']);

Expected type
  Array<string[]|string>
but got:
  (string & string[])[]

tests/test.ts:R.append(['tests'], ['write', 'more']);

Expected type
  Array<string[]|string>
but got:
  (string & string[])[]

tests/test.ts:R.append<string[]>(['tests'])(['write', 'more']);

Expected type
  Array<string[]|string>
but got:
  (string & string[])[]

tests/test.ts:R.append(['tests'])(['write', 'more']);

Expected type
  Array<string[]|string>
but got:
  (string & string[])[]

tests/test.ts:R.chain(R.append, R.head)([1, 2, 3]);

Expected type
  number[]
but got:
  any

tests/test.ts:R.chain(R.append)(R.head)([1, 2, 3]);

Expected type
  number[]
but got:
  any

tests/test.ts:R.clamp(1, 10, -1);

Expected type
  number
but got:
  1 | -1 | 10

tests/test.ts:R.clamp('a', 'd', 'e');

Expected type
  string
but got:
  "a" | "d" | "e"

tests/test.ts:let peopleByOldestFirst = R.sort(byAge, people);

Expected type
  typeof people
but got:
  any

tests/test.ts:R.drop(3)([1,2,3,4,5,6,7]);

Expected type
  number[]
but got:
  List<any>

tests/test.ts:R.drop(3, 'ramda');

Expected type
  string
but got:
  "ramda"

tests/test.ts:R.drop(3)('ramda');

Expected type
  string
but got:
  List<any>

tests/test.ts:R.dropLast(2)(['foo', 'bar', 'baz']);

Expected type
  string[]
but got:
  List<any>

tests/test.ts:R.dropLast(3, 'ramda');

Expected type
  string
but got:
  "ramda"

tests/test.ts:R.dropLast(3)('ramda');

Expected type
  string
but got:
  List<any>

tests/test.ts:R.filter(isEven, {a: 1, b: 2, c: 3, d: 4});

Expected type
  Dictionary<number>
but got:
  Partial<{ a: number; b: number; c: number; d: number; }>

tests/test.ts:onlyNumberObj(R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}));

Expected type
  Dictionary<number>
but got:
  { [key: string]: number; }

tests/test.ts:filterIndexed(lastTwo, [8, 6, 7, 5, 3, 0, 9]);

Expected type
  number[]
but got:
  any[]

tests/test.ts:lastTwoFn([8, 6, 7, 5, 3, 0, 9]);

Expected type
  number[]
but got:
  any[]

tests/test.ts:R.find(R.propEq('a', 2))(xs);

Expected type
  Dictionary<number>
but got:
  {}

tests/test.ts:R.find(R.propEq('a', 4))(xs);

Expected type
  undefined
but got:
  {}

tests/test.ts:R.findLast(R.propEq('a', 1))(xs);

Expected type
  Dictionary<number>
but got:
  {}

tests/test.ts:R.findLast(R.propEq('a', 4))(xs);

Expected type
  undefined
but got:
  {}

tests/test.ts:R.findLastIndex((x: number) => x === 1, [1, 2, 3]);

Expected type
  number[]
but got:
  number

tests/test.ts:R.filter(isFamous, users);

Expected type
  Object[]
but got:
  any[]

tests/test.ts:R.forEachObjIndexed(printKeyConcatValue, {x: 1, y: 2});

Expected type
  {x: 1, y: 2}
but got:
  { x: number; y: number; }

tests/test.ts:R.forEachObjIndexed(printKeyConcatValue)({x: 1, y: 2});

Expected type
  {x: 1, y: 2}
but got:
  any

tests/test.ts:R.forEachObjIndexed(printKeyConcatValue, [1, 2]);

Expected type
  [1, 2]
but got:
  number[]

tests/test.ts:R.forEachObjIndexed(printKeyConcatValue)([1, 2]);

Expected type
  [1, 2]
but got:
  any

tests/test.ts:R.addIndex(R.forEach)(plusFive)([1, 2, 3]);

Expected type
  number[]
but got:
  any[]

tests/test.ts:byGrade(students);

Expected type
  Dictionary<Object[]>
but got:
  Dictionary<{ score: number; name: string; }[]>

tests/test.ts:R.head(['fi', 'fo', 'fum']);

Expected type
  string
but got:
  string | undefined

tests/test.ts:R.head([10, 'ten']);

Expected type
  number
but got:
  string | number | undefined

tests/test.ts:R.head(['10', 10]);

Expected type
  string
but got:
  string | number | undefined

tests/test.ts:R.indexBy(R.prop('id'), list);

Expected type
  Dictionary<Object>
but got:
  Dictionary<Struct<any>>

tests/test.ts:R.indexBy(R.prop('id'))(list);

Expected type
  Dictionary<Object>
but got:
  Dictionary<Struct<any>>

tests/test.ts:R.indexBy<{id: string}>(R.prop('id'))(list);

Expected type
  Dictionary<Object>
but got:
  Dictionary<{ id: string; }>

tests/test.ts:R.intersectionWith(R.eqBy(R.prop('id')), buffaloSpringfield, csny);

Expected type
  { id: number, name: string }[]
but got:
  any[]

tests/test.ts:R.intersectionWith(R.eqBy(R.prop('id')), buffaloSpringfield, csny);

Expected type
  { id: number, name: string }[]
but got:
  any[]

tests/test.ts:R.intersectionWith(R.eqBy(R.prop('id')))(buffaloSpringfield, csny);

Expected type
  { id: number, name: string }[]
but got:
  any[]

tests/test.ts:R.intersectionWith(R.eqBy(R.prop('id')))(buffaloSpringfield)(csny);

Expected type
  { id: number, name: string }[]
but got:
  any[]

tests/test.ts:R.last(['fi', 'fo', 'fum']);

Expected type
  string
but got:
  {} | undefined

tests/test.ts:headLens([10, 20, 30, 40]);

Expected type
  number
but got:
  {}

tests/test.ts:headLens.set('mu', [10, 20, 30, 40]);

Expected type
  Array<number|string>
but got:
  number[]

tests/test.ts:R.view(headLens, ['a', 'b', 'c']);

Expected type
  string
but got:
  {}

tests/test.ts:R.set(headLens, 'x', ['a', 'b', 'c']);

Expected type
  string[]
but got:
  any

tests/test.ts:R.map(double)([1, 2, 3]);

Expected type
  number[]
but got:
  Functor<number>

tests/test.ts:R.map(arrayify, [1, 'a']);

Expected type
  [number[], string[]]
but got:
  {}[][]

tests/test.ts:R.map(arrayify)([1, 'a']);

Expected type
  [number[], string[]]
but got:
  Functor<{}[]>

tests/test.ts:R.map(arrayify, { a: 1, b: 'c' });

Expected type
  { a: number[], b: string[] }
but got:
  Dictionary<{}[]>

tests/test.ts:R.map(arrayify)({ a: 1, b: 'c' });

Expected type
  { a: number[], b: string[] }
but got:
  Dictionary<{}[]>

tests/test.ts:R.mapAccum(append, '0', digits);

Expected type
  Array<string[]|string>
but got:
  [string, string[]]

tests/test.ts:R.mapAccum(append)('0', digits);

Expected type
  Array<string[]|string>
but got:
  [string, string[]]

tests/test.ts:R.mapAccum(append, '0')(digits);

Expected type
  Array<string[]|string>
but got:
  [string, string[]]

tests/test.ts:R.mapAccum(append)('0')(digits);

Expected type
  Array<string[]|string>
but got:
  [string, string[]]

tests/test.ts:R.mapAccumRight(append, '0', digits);

Expected type
  Array<string|string[]>
but got:
  [string[], string]

tests/test.ts:R.mapAccumRight(append)('0', digits);

Expected type
  Array<string|string[]>
but got:
  [string[], string]

tests/test.ts:R.mapAccumRight(append, '0')(digits);

Expected type
  Array<string|string[]>
but got:
  [string[], string]

tests/test.ts:R.mapAccumRight(append)('0')(digits);

Expected type
  Array<string|string[]>
but got:
  [string[], string]

tests/test.ts:R.addIndex(R.map)(squareEnds, [8, 5, 3, 0, 9]);

Expected type
  number[]
but got:
  any[]

tests/test.ts:R.addIndex(R.map)(squareEnds)([8, 5, 3, 0, 9]);

Expected type
  number[]
but got:
  any[]

tests/test.ts:R.nth(1, list);

Expected type
  string
but got:
  string | undefined

tests/test.ts:R.nth(-1, list);

Expected type
  string
but got:
  string | undefined

tests/test.ts:R.nth(-99, list);

Expected type
  undefined
but got:
  string | undefined

tests/test.ts:R.nth(-99)(list);

Expected type
  undefined
but got:
  string | undefined

tests/test.ts:R.partition(R.contains('s'),{ a: 'sss', b: 'ttt', foo: 'bars' });

Expected type
  Object[]
but got:
  [Dictionary<string>, Dictionary<string>]

tests/test.ts:R.pluck(0, [[1, 2], [3, 4]]);

Expected type
  number[]
but got:
  {}[]

tests/test.ts:R.pluck('a')([{a: 1}, {a: 2}]);

Expected type
  number[]
but got:
  {}[]

tests/test.ts:R.pluck(0)([[1, 2], [3, 4]]);

Expected type
  number[]
but got:
  {}[]

tests/test.ts:namesByGrade(students);

Expected type
  Dictionary<string[]>
but got:
  string[]

tests/test.ts:reduceIndexed(objectify, {}, letters);

Expected type
  Dictionary<number>
but got:
  any

tests/test.ts:reduceIndexed(objectify)({}, letters);

Expected type
  Dictionary<number>
but got:
  any

tests/test.ts:reduceIndexed(objectify, {})(letters);

Expected type
  Dictionary<number>
but got:
  any

tests/test.ts:R.reduceRight(flattenPairs, [], pairs);

Expected type
  Array<string[]|string>
but got:
  KeyValuePair<string, number>[]

tests/test.ts:R.reduceRight(flattenPairs, [])(pairs);

Expected type
  Array<string[]|string>
but got:
  KeyValuePair<string, number>[]

tests/test.ts:R.reduceRight(flattenPairs)([], pairs);

Expected type
  Array<string[]|string>
but got:
  KeyValuePair<string, number>[]

tests/test.ts:rejectIndexed(lastTwo, [8, 6, 7, 5, 3, 0, 9]);

Expected type
  number[]
but got:
  any[]

tests/test.ts:rejectIndexed(lastTwo)([8, 6, 7, 5, 3, 0, 9]);

Expected type
  number[]
but got:
  any[]

tests/test.ts:R.reverse([]);

Expected type
  number[]
but got:
  never[]

tests/test.ts:R.take(3,'Example');

Expected type
  string
but got:
  "Example"

tests/test.ts:takeThree('Example');

Expected type
  string
but got:
  "Example"

tests/test.ts:R.takeLast(3, 'ramda');

Expected type
  string
but got:
  "ramda"

tests/test.ts:R.takeLast(3)('ramda');

Expected type
  string
but got:
  "ramda"

tests/test.ts:R.transduce(transducer, fn, [] as number[], numbers);

Expected type
  number[]
but got:
  number | undefined

tests/test.ts:R.transduce(transducer, fn, [] as number[])(numbers);

Expected type
  number[]
but got:
  number | undefined

tests/test.ts:R.transduce(transducer, fn)([] as number[], numbers);

Expected type
  number[]
but got:
  number | undefined

tests/test.ts:R.transduce(transducer)(fn, [] as number[], numbers);

Expected type
  number[]
but got:
  number | undefined

tests/test.ts:R.transpose([[1, 'a'], [2, 'b'], [3, 'c']]);

Expected type
  any[][]
but got:
  Index[][]

tests/test.ts:R.uniq([{}, {}]);

Expected type
  Object[]
but got:
  {}[]

tests/test.ts:R.uniq([1, '1']);

Expected type
  any[]
but got:
  Index[]

tests/test.ts:R.uniqWith(strEq, [1, '1', 2, 1]);

Expected type
  number[]
but got:
  any[]

tests/test.ts:R.uniqWith(strEq)([1, '1', 2, 1]);

Expected type
  number[]
but got:
  any[]

tests/test.ts:R.uniqWith(strEq)([{}, {}]);

Expected type
  Object[]
but got:
  any[]

tests/test.ts:R.uniqWith(strEq)([1, '1', 1]);

Expected type
  number[]
but got:
  any[]

tests/test.ts:R.uniqWith(strEq)(['1', 1, 1]);

Expected type
  string[]
but got:
  any[]

tests/test.ts:R.xprod([1, 2], ['a', 'b']);

Expected type
  [number, string][]
but got:
  KeyValuePair<number, string>[]

tests/test.ts:R.xprod([1, 2])(['a', 'b']);

Expected type
  [number, string][]
but got:
  KeyValuePair<number, string>[]

tests/test.ts:R.zip([1, 2, 3], ['a', 'b', 'c']);

Expected type
  [number, string][]
but got:
  KeyValuePair<number, string>[]

tests/test.ts:R.zip([1, 2, 3])(['a', 'b', 'c']);

Expected type
  [number, string][]
but got:
  KeyValuePair<number, string>[]

tests/test.ts:R.zipWith(f, [1, 2, 3], ['a', 'b', 'c']);

Expected type
  any[]
but got:
  void[]

tests/test.ts:R.zipWith(f)([1, 2, 3], ['a', 'b', 'c']);

Expected type
  any[]
but got:
  void[]

tests/test.ts:R.zipWith(f, [1, 2, 3])(['a', 'b', 'c']);

Expected type
  any[]
but got:
  void[]

tests/test.ts:R.assoc('c', 3, {a: 1, b: 2});

Expected type
  Dictionary<number>
but got:
  { a: number; b: number; }

tests/test.ts:R.assoc('c')(3, {a: 1, b: 2});

Expected type
  Dictionary<number>
but got:
  Struct<{}>

tests/test.ts:R.assoc('c', 3)({a: 1, b: 2});

Expected type
  Dictionary<number>
but got:
  { a: number; b: number; }

tests/test.ts:R.dissoc<{a: number, c: number}>('b', {a: 1, b: 2, c: 3});

Expected type
  Dictionary<number>
but got:
  { a: number; c: number; }

tests/test.ts:R.dissoc('b', {a: 1, b: 2, c: 3});

Expected type
  Dictionary<number>
but got:
  {}

tests/test.ts:R.dissoc('b')<{a: number, c: number}>({a: 1, b: 2, c: 3});

Expected type
  Dictionary<number>
but got:
  { a: number; c: number; }

tests/test.ts:R.assocPath(['a', 'b', 'c'], 42, {a: {b: {c: 0}}});

Expected type
  {a: {b: {c: number}}}
but got:
  { a: { b: { c: number; }; }; }

tests/test.ts:R.assocPath(['a', 'b', 'c'])(42, {a: {b: {c: 0}}});

Expected type
  {a: {b: {c: number}}}
but got:
  { a: { b: { c: number; }; }; }

tests/test.ts:R.assocPath(['a', 'b', 'c'], 42)({a: {b: {c: 0}}});

Expected type
  {a: {b: {c: number}}}
but got:
  { a: { b: { c: number; }; }; }

tests/test.ts:R.dissocPath(['a', 'b', 'c'], {a: {b: {c: 42}}});

Expected type
  {a: {b: {}}}
but got:
  {}

tests/test.ts:R.dissocPath<{a : { b: number}}>(['a', 'b', 'c'], {a: {b: {c: 42}}});

Expected type
  {a: {b: {}}}
but got:
  { a: { b: number; }; }

tests/test.ts:R.dissocPath(['a', 'b', 'c'])({a: {b: {c: 42}}});

Expected type
  {a: {b: {}}}
but got:
  {}

tests/test.ts:R.clone(obj1);

Expected type
  any[]
but got:
  {}[]

tests/test.ts:R.clone(obj2);

Expected type
  {a: number}[]
but got:
  { a: number; }[]

tests/test.ts:R.clone({});

Expected type
  Object
but got:
  {}

tests/test.ts:R.eqProps('c');

Expected type
  {<T,U>(obj1: T, obj2: U): boolean}
but got:
  { <T, U>(obj1: T, obj2: U): boolean; <T>(obj1: T): <U>(obj2: U) => boolean; }

tests/test.ts:R.eqProps('c', o1);

Expected type
  {<U>(obj2: U): boolean}
but got:
  <U>(obj2: U) => boolean

tests/test.ts:const a: typeof tomato = R.evolve(transformations, tomato);

Expected type
  typeof tomato
but got:
  any

tests/test.ts:const b: typeof tomato = R.evolve(transformations)(tomato);

Expected type
  typeof tomato
but got:
  any

tests/test.ts:R.invert(raceResultsByFirstName);

Expected type
  Dictionary<string[]>
but got:
  Dictionary<List<string>>

tests/test.ts:R.set(xLens, 4, {x: 1, y: 2});

Expected type
  { x: number, y: number }
but got:
  any

tests/test.ts:R.set(xLens)(4, {x: 1, y: 2});

Expected type
  { x: number, y: number }
but got:
  any

tests/test.ts:R.set(xLens, 4)({x: 1, y: 2});

Expected type
  { x: number, y: number }
but got:
  any

tests/test.ts:R.over(xLens, R.negate, {x: 1, y: 2});

Expected type
  { x: number, y: number }
but got:
  { x: number; y: number; }

tests/test.ts:R.over(xLens, R.negate)({x: 1, y: 2});

Expected type
  { x: number, y: number }
but got:
  {}

tests/test.ts:R.over(xLens)(R.negate, {x: 1, y: 2});

Expected type
  { x: number, y: number }
but got:
  {}

tests/test.ts:R.view(headLens, ['a', 'b', 'c']);

Expected type
  string
but got:
  {}

tests/test.ts:R.set(headLens, 'x', ['a', 'b', 'c']);

Expected type
  string[]
but got:
  any

tests/test.ts:R.view(xLens, {x: 1, y: 2});

Expected type
  number
but got:
  {}

tests/test.ts:R.set(xLens, 4, {x: 1, y: 2});

Expected type
  Dictionary<number>
but got:
  any

tests/test.ts:R.over(xLens, R.negate, {x: 1, y: 2});

Expected type
  Dictionary<number>
but got:
  { x: number; y: number; }

tests/test.ts:R.view(xyLens, {x: {y: 2, z: 3}});

Expected type
  number
but got:
  {}

tests/test.ts:R.set(xyLens, 4, {x: {y: 2, z: 3}});

Expected type
  { [s: string]: { [s: string]: number } }
but got:
  any

tests/test.ts:R.over(xyLens, R.negate, {x: {y: 2, z: 3}});

Expected type
  { [s: string]: { [s: string]: number } }
but got:
  { x: { y: number; z: number; }; }

tests/test.ts:phraseLens(obj1);

Expected type
  string
but got:
  any

tests/test.ts:phraseLens(obj2);

Expected type
  string
but got:
  any

tests/test.ts:phraseLens.set('Ooh Betty', obj1);

Expected type
  Dictionary<string>
but got:
  { phrase: string; }

tests/test.ts:phraseLens(obj1);

Expected type
  string
but got:
  {}

tests/test.ts:phraseLens(obj2);

Expected type
  string
but got:
  {}

tests/test.ts:phraseLens.set('Ooh Betty', obj1);

Expected type
  Dictionary<string>
but got:
  { phrase: string; }

tests/test.ts:R.merge({ 'name': 'fred', 'age': 10 }, { 'age': 40 });

Expected type
  Dictionary<any>
but got:
  { 'name': string; 'age': number; } & { 'age': number; }

tests/test.ts:resetToDefault({x: 5, y: 2});

Expected type
  Dictionary<number>
but got:
  any

tests/test.ts:R.mergeAll([{foo: 1},{bar: 2},{baz: 3}]);

Expected type
  Dictionary<number>
but got:
  {}

tests/test.ts:R.mergeAll([{foo: 1},{foo: 2},{bar: 2}]);

Expected type
  Dictionary<number>
but got:
  {}

tests/test.ts:R.mergeWith(R.concat,
        { a: true, values: [10, 20] },
        { b: true, values: [15, 35] });

Expected type
  { a: boolean, b: boolean, values: number[] }
but got:
  { a: boolean; values: number[]; } & { b: boolean; values: number[]; }

tests/test.ts:merge({ a: true, thing: 'foo', values: [10, 20] }, { b: true, thing: 'bar', values: [15, 35] });

Expected type
  { a: boolean, b: boolean, values: number[], thing: string }
but got:
  { a: boolean; thing: string; values: number[]; } & { b: boolean; thing: string; values: number[]; }

tests/test.ts:R.pathOr('N/A', ['a', 'b'], {a: {b: 2}});

Expected type
  number
but got:
  any

tests/test.ts:R.pathOr('N/A', ['a', 'b'])({a: {b: 2}});

Expected type
  number
but got:
  any

tests/test.ts:R.pathOr('N/A', ['a', 'b'], {c: {b: 2}});

Expected type
  number
but got:
  any

tests/test.ts:R.pathOr({c: 2})(['a', 'b'], {c: {b: 2}});

Expected type
  number
but got:
  any

tests/test.ts:R.pickBy(isPositive, {a: 1, b: 2, c: -1, d: 0, e: 5});

Expected type
  Dictionary<number>
but got:
  Partial<{ a: number; b: number; c: number; d: number; e: number; }>

tests/test.ts:R.pickBy(containsBackground, colors);

Expected type
  { 2: R.Dictionary<string> }
but got:
  Partial<{ 1: { color: string; }; 2: { color: string; bgcolor: string; }; }>

tests/test.ts:R.pickBy(isUpperCase, {a: 1, b: 2, A: 3, B: 4});

Expected type
  Dictionary<number>
but got:
  Partial<{ a: number; b: number; A: number; B: number; }>

tests/test.ts:R.pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4});

Expected type
  Dictionary<number>
but got:
  { a: number; b: number; c: number; d: number; }

tests/test.ts:let no1 = R.pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4});

Expected error not keys

tests/test.ts:let no2 = R.pick(['a', 'e', 'f'])({a: 1, b: 2, c: 3, d: 4});

Expected error not keys

tests/test.ts:let no3 = R.pick(['a', 'e', 'f'], [1, 2, 3, 4]);

Expected error not keys

tests/test.ts:matchPhrases(['foo', 'bar', 'baz']);

Expected type
  { must: { match_phrase: string }[] }
but got:
  Dictionary<{}>

tests/test.ts:R.omit(['a', 'd'], {a: 1, b: 2, c: 3, d: 4});

Expected type
  Dictionary<number>
but got:
  { a: number; b: number; c: number; d: number; }

tests/test.ts:R.omit(['a', 'd'])({a: 1, b: 2, c: 3, d: 4});

Expected type
  Dictionary<number>
but got:
  { a: number; b: number; c: number; d: number; }

tests/test.ts:R.pickAll(['a', 'd'], {a: 1, b: 2, c: 3, d: 4});

Expected type
  Dictionary<number>
but got:
  Partial<{ a: number; b: number; c: number; d: number; }>

tests/test.ts:R.pickAll(['a', 'd'])({a: 1, b: 2, c: 3, d: 4});

Expected type
  Dictionary<number>
but got:
  Partial<{}>

tests/test.ts:R.pickAll(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4});

Expected type
  Dictionary<number>
but got:
  Partial<{ a: number; b: number; c: number; d: number; }>

tests/test.ts:R.pickAll(['a', 'e', 'f'])({a: 1, b: 2, c: 3, d: 4});

Expected type
  Dictionary<number>
but got:
  Partial<{}>

tests/test.ts:R.pickBy(isUpperCase, {a: 1, b: 2, A: 3, B: 4});

Expected type
  Dictionary<number>
but got:
  Partial<{ a: number; b: number; A: number; B: number; }>

tests/test.ts:R.project(['name', 'grade'], kids);

Expected type
  { name: string, grade: number }[]
but got:
  Pick<{ name: string; age: number; hair: string; grade: number; }, "name" | "grade">[]

tests/test.ts:R.prop('x', {});

Expected error Argument of type 'x' is not assignable to parameter of type 'never'.

tests/test.ts:favorite(alice);

Expected type
  undefined
but got:
  {}

tests/test.ts:favoriteWithDefault(alice);

Expected type
  string
but got:
  any

tests/test.ts:R.props(['c', 'a', 'b'], {b: 2, a: 1});

Expected type
  Array<number|undefined>
but got:
  number[]

tests/test.ts:R.toPairsIn(f);

Expected type
  [string, string][]
but got:
  [string, any][]

tests/test.ts:R.toPairsIn(f);

Expected type
  [string, string][]
but got:
  [string, any][]

tests/test.ts:R.valuesIn(f);

Expected type
  string[]
but got:
  any[]

tests/test.ts:R.filter(R.where({x: 10}), xs);

Expected type
  { x: number, y: number }[]
but got:
  {}[]

tests/test.ts:R.filter(R.where({x: 10}))(xs);

Expected type
  { x: number, y: number }[]
but got:
  {}[]

tests/test.ts:let pred = R.whereEq({a: 1, b: 2});

Expected type
  (v: Object) => Boolean
but got:
  any

tests/test.ts: Unexpected error
  Argument of type '{ <T, U>(fn: (x: T) => U, list: List<T>): U[]; <T, U, M extends Dictionary<T>>(fn: (value: T) => ...' is not assignable to parameter of type '(f: (acc: string, item: string) => string, aci: string, list: List<string>) => string'.
  Type 'any[]' is not assignable to type 'string'.

tests/test.ts:mapIndexed(function(val: string, idx: number) {return idx + '-' + val;})(['f', 'o', 'o', 'b', 'a', 'r']);

Expected type
  string[]
but got:
  (v2: List<string>) => string

tests/test.ts:reduceIndexed(
      (acc: string, val: string, idx: number) => acc + ',' + idx + '-' + val
      ,''
      ,['f', 'o', 'o', 'b', 'a', 'r']
    );

Expected type
  string[]
but got:
  any

tests/test.ts:R.sort(cmp, people);

Expected type
  { age: number, name: string }[]
but got:
  T[]

tests/test.ts:R.compose(double, R.identity);

Expected type
  (x0: number) => number
but got:
  (x0: {}) => number

tests/test.ts:circleN(1, 'red');

Expected type
  circle
but got:
  any

tests/test.ts:circle(1, 'red');

Expected type
  circle
but got:
  any

tests/test.ts:R.differenceWith(cmp, l1, l2);

Expected type
  {a: number}[]
but got:
  any[]

tests/test.ts:R.differenceWith(cmp)(l1, l2);

Expected type
  {a: number}[]
but got:
  any[]

tests/test.ts:R.differenceWith(cmp)(l1)(l2);

Expected type
  {a: number}[]
but got:
  any[]

tests/test.ts:R.path(['a', 'b'])({a: {b: 2}});

Expected type
  number
but got:
  {} | undefined

tests/test.ts:sortByNameCaseInsensitive(people);

Expected type
  { name: string, age: number }[]
but got:
  Struct<any>[]

tests/test.ts:R.sortWith([
    R.descend(R.prop('age')),
    R.ascend(R.prop('name'))
  ], people);

Expected type
  typeof people
but got:
  Struct<any>[]

tests/test.ts:ageNameSort(people);

Expected type
  typeof people
but got:
  Struct<any>[]

tests/test.ts:R.splitAt(5, 'hello world');

Expected type
  string[]
but got:
  [string, string]

tests/test.ts:R.splitAt(-1, 'foobar');

Expected type
  string[]
but got:
  [string, string]

tests/test.ts:R.max(7, 3);

Expected type
  number
but got:
  3 | 7

tests/test.ts:R.max('a', 'z');

Expected type
  string
but got:
  "a" | "z"

tests/test.ts:R.min(9, 3);

Expected type
  number
but got:
  3 | 9

tests/test.ts:R.min('a', 'z');

Expected type
  string
but got:
  "a" | "z"

tests/test.ts:R.minBy(cmp, a, b);

Expected type
  { x: number }
but got:
  { x: number; }

tests/test.ts:R.minBy(cmp)(a, b);

Expected type
  { x: number }
but got:
  { x: number; }

tests/test.ts:R.minBy(cmp)(a)(c);

Expected type
  { x: number }
but got:
  { x: number; }

tests/test.ts:R.minBy(cmp, d, e);

Expected error
  Argument of type '{ x: string; }' is not assignable to parameter of type '{ x: number; }'
but got:
  The type argument for type parameter 'T' cannot be inferred from the usage. Consider specifying the type arguments explicitly.
  Type argument candidate '{ x: string; }' is not a valid type argument because it is not a supertype of candidate '{ x: number; }'.
    Types of property 'x' are incompatible.
      Type 'number' is not assignable to type 'string'.

tests/test.ts:R.symmetricDifferenceWith(eqA, l1, l2);

Expected type
  { a: number }[]
but got:
  any[]

tests/test.ts:R.symmetricDifferenceWith(eqA)(l1, l2);

Expected type
  { a: number }[]
but got:
  any[]

tests/test.ts:R.symmetricDifferenceWith(eqA)(l1);

Expected type
  (a: any[]) => any[]
but got:
  (list2: List<any>) => any[]

tests/test.ts:R.and(0, []);

Expected type
  number
but got:
  boolean

tests/test.ts:R.and(0)([]);

Expected type
  number
but got:
  boolean

tests/test.ts:R.and(null, '');

Expected type
  null
but got:
  boolean

tests/test.ts:defaultTo42(null);

Expected type
  number
but got:
  number | null

tests/test.ts:defaultTo42(undefined);

Expected type
  number
but got:
  number | undefined

tests/test.ts:defaultTo42('Ramda');

Expected type
  string
but got:
  number | "Ramda"

tests/test.ts:flattenArrays([[0], [[10], [8]], 1234, {}]);

Expected type
  any[]
but got:
  Dictionary<any>

tests/test.ts:flattenArrays([[[10], 123], [8, [10]], 'hello']);

Expected type
  any[]
but got:
  Dictionary<any>

tests/test.ts:R.or(0, []);

Expected type
  number|any[]
but got:
  0 | never[]

tests/test.ts:R.or(0)([]);

Expected type
  number|any[]
but got:
  number | never[]

tests/test.ts:R.or(null, '');

Expected type
  string
but got:
  "" | null

tests/test.ts:R.or(why, false);

Expected type
  Why|boolean
but got:
  false | Why

tests/test.ts:R.evolve({ a: R.add(1)}, test );

Expected type
  { a: number, b: number }
but got:
  { a: number; b: number; }

tests/test.ts: Unexpected error
  Type '{}[]' is not assignable to type 'number[]'.
  Type '{}' is not assignable to type 'number'.

tests/test.ts:R.pipe(R.append('a'), R.uniq)(['a', 'b', 'c']);

Expected type
  string[]
but got:
  ({} & string)[]

tests/test.ts: Unexpected error
  Argument of type '(x0: any) => {}' is not assignable to parameter of type 'UnknownLens | ManualLens<{}> | Lens<any, {}>'.
  Type '(x0: any) => {}' is not assignable to type 'Lens<any, {}>'.
    Property 'set' is missing in type '(x0: any) => {}'.

tests/test.ts:updateBy((n: number) => n > 1, 0, [1,2,3]);

Expected type
  number[]
but got:
  {}[]

tests/test.ts:R.fromPairs ([['1','A'], ['2','B'], ['3','C']]);

Expected type
  { [index: string]: string }
but got:
  Dictionary<string>

tests/test.ts:R.fromPairs (pairs);

Expected type
  { [index: string]: string }
but got:
  Dictionary<V>

tests/test.ts:R.pipe   (R.fromPairs)([['1','A'], ['2','B'], ['3','C']]);

Expected type
  { [index: string]: string }
but got:
  Dictionary<{}>

tests/test.ts:R.compose(R.fromPairs)([['1','A'], ['2','B'], ['3','C']]);

Expected type
  { [index: string]: string }
but got:
  Dictionary<{}>

tests/test.ts: Unexpected error
  Argument of type 'CurriedFunction2<{}, Struct<{}>, Struct<{}>>' is not assignable to parameter of type '(some: string) => (x: number) => 1'.
  Type '(v2: Struct<{}>) => Struct<{}>' is not assignable to type '(x: number) => 1'.
    Types of parameters 'v2' and 'x' are incompatible.
      Type 'number' is not assignable to type 'Struct<{}>'.

tests/test.ts: Unexpected error
  Argument of type 'CurriedFunction2<{}, Struct<{}>, Struct<{}>>' is not assignable to parameter of type '(some: string, other: string) => "1"'.
  Type '(v2: Struct<{}>) => Struct<{}>' is not assignable to type '"1"'.

tests/test.ts:const x = R.cond([
        [R.F, R.F],
        [R.T, R.identity]
    ]);

Expected type
  <T>(v: T) => T
but got:
  any

tests/test.ts:R.pipe   (R.inc, x);

Expected type
  (v: number) => number
but got:
  (x0: number) => {}

tests/test.ts:R.compose(x, R.inc);

Expected type
  (v: number) => number
but got:
  (x0: number) => {}

tests/test.ts:compF1(1);

Expected type
  number
but got:
  {}

tests/test.ts: Unexpected error
  Type 'Struct<number[]>' is not assignable to type 'SomeStruct'.
  Type 'number[][]' is not assignable to type 'SomeStruct'.
    Property 'a' is missing in type 'number[][]'.

tests/test.ts:R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);

Expected type
  number[]
but got:
  (number | (number | (number | (number | number[])[])[])[])[]

tests/test.ts:R.path(['a', 'b', 'c'], {a: {b: 2}});

Expected type
  null
but got:
  { b: number; }

tests/test.ts: 450 / 725 checks passed.
