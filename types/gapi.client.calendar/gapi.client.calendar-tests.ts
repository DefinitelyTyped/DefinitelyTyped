/* This is stub file for gapi.client.{{=it.name}} definition tests */
/* IMPORTANT.
* This file was automatically generated by https://github.com/harpojaeger/google-api-typings-generator. Please do not edit it manually.
* In case of any problems please post issue to https://github.com/harpojaeger/google-api-typings-generator
**/
gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('calendar', 'v3', () => {
        /** now we can use gapi.client.calendar */

        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [
            /** See, edit, share, and permanently delete all the calendars you can access using Google Calendar */
            'https://www.googleapis.com/auth/calendar',
            /** View and edit events on all your calendars */
            'https://www.googleapis.com/auth/calendar.events',
            /** View events on all your calendars */
            'https://www.googleapis.com/auth/calendar.events.readonly',
            /** View your calendars */
            'https://www.googleapis.com/auth/calendar.readonly',
            /** View your Calendar settings */
            'https://www.googleapis.com/auth/calendar.settings.readonly',
        ];
        const immediate = true;
        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /** handle succesfull authorization */
                run();
            } else {
                /** handle authorization error */
            }
        });
        run();
    });

    async function run() {
        /** Deletes an access control rule. */
        await gapi.client.calendar.acl.delete({
            calendarId: "calendarId",
            ruleId: "ruleId",
        });
        /** Returns an access control rule. */
        await gapi.client.calendar.acl.get({
            calendarId: "calendarId",
            ruleId: "ruleId",
        });
        /** Creates an access control rule. */
        await gapi.client.calendar.acl.insert({
            calendarId: "calendarId",
            sendNotifications: true,
        });
        /** Returns the rules in the access control list for the calendar. */
        await gapi.client.calendar.acl.list({
            calendarId: "calendarId",
            maxResults: 2,
            pageToken: "pageToken",
            showDeleted: true,
            syncToken: "syncToken",
        });
        /** Updates an access control rule. This method supports patch semantics. */
        await gapi.client.calendar.acl.patch({
            calendarId: "calendarId",
            ruleId: "ruleId",
            sendNotifications: true,
        });
        /** Updates an access control rule. */
        await gapi.client.calendar.acl.update({
            calendarId: "calendarId",
            ruleId: "ruleId",
            sendNotifications: true,
        });
        /** Watch for changes to ACL resources. */
        await gapi.client.calendar.acl.watch({
            calendarId: "calendarId",
            maxResults: 2,
            pageToken: "pageToken",
            showDeleted: true,
            syncToken: "syncToken",
        });
        /** Removes a calendar from the user's calendar list. */
        await gapi.client.calendar.calendarList.delete({
            calendarId: "calendarId",
        });
        /** Returns a calendar from the user's calendar list. */
        await gapi.client.calendar.calendarList.get({
            calendarId: "calendarId",
        });
        /** Inserts an existing calendar into the user's calendar list. */
        await gapi.client.calendar.calendarList.insert({
            colorRgbFormat: true,
        });
        /** Returns the calendars on the user's calendar list. */
        await gapi.client.calendar.calendarList.list({
            maxResults: 1,
            minAccessRole: "minAccessRole",
            pageToken: "pageToken",
            showDeleted: true,
            showHidden: true,
            syncToken: "syncToken",
        });
        /** Updates an existing calendar on the user's calendar list. This method supports patch semantics. */
        await gapi.client.calendar.calendarList.patch({
            calendarId: "calendarId",
            colorRgbFormat: true,
        });
        /** Updates an existing calendar on the user's calendar list. */
        await gapi.client.calendar.calendarList.update({
            calendarId: "calendarId",
            colorRgbFormat: true,
        });
        /** Watch for changes to CalendarList resources. */
        await gapi.client.calendar.calendarList.watch({
            maxResults: 1,
            minAccessRole: "minAccessRole",
            pageToken: "pageToken",
            showDeleted: true,
            showHidden: true,
            syncToken: "syncToken",
        });
        /** Clears a primary calendar. This operation deletes all events associated with the primary calendar of an account. */
        await gapi.client.calendar.calendars.clear({
            calendarId: "calendarId",
        });
        /** Deletes a secondary calendar. Use calendars.clear for clearing all events on primary calendars. */
        await gapi.client.calendar.calendars.delete({
            calendarId: "calendarId",
        });
        /** Returns metadata for a calendar. */
        await gapi.client.calendar.calendars.get({
            calendarId: "calendarId",
        });
        /** Creates a secondary calendar. */
        await gapi.client.calendar.calendars.insert({
        });
        /** Updates metadata for a calendar. This method supports patch semantics. */
        await gapi.client.calendar.calendars.patch({
            calendarId: "calendarId",
        });
        /** Updates metadata for a calendar. */
        await gapi.client.calendar.calendars.update({
            calendarId: "calendarId",
        });
        /** Stop watching resources through this channel */
        await gapi.client.calendar.channels.stop({
        });
        /** Returns the color definitions for calendars and events. */
        await gapi.client.calendar.colors.get({
        });
        /** Deletes an event. */
        await gapi.client.calendar.events.delete({
            calendarId: "calendarId",
            eventId: "eventId",
            sendNotifications: true,
            sendUpdates: "sendUpdates",
        });
        /** Returns an event. */
        await gapi.client.calendar.events.get({
            alwaysIncludeEmail: true,
            calendarId: "calendarId",
            eventId: "eventId",
            maxAttendees: 4,
            timeZone: "timeZone",
        });
        /** Imports an event. This operation is used to add a private copy of an existing event to a calendar. */
        await gapi.client.calendar.events.import({
            calendarId: "calendarId",
            conferenceDataVersion: 2,
            supportsAttachments: true,
        });
        /** Creates an event. */
        await gapi.client.calendar.events.insert({
            calendarId: "calendarId",
            conferenceDataVersion: 2,
            maxAttendees: 3,
            sendNotifications: true,
            sendUpdates: "sendUpdates",
            supportsAttachments: true,
        });
        /** Returns instances of the specified recurring event. */
        await gapi.client.calendar.events.instances({
            alwaysIncludeEmail: true,
            calendarId: "calendarId",
            eventId: "eventId",
            maxAttendees: 4,
            maxResults: 5,
            originalStart: "originalStart",
            pageToken: "pageToken",
            showDeleted: true,
            timeMax: "timeMax",
            timeMin: "timeMin",
            timeZone: "timeZone",
        });
        /** Returns events on the specified calendar. */
        await gapi.client.calendar.events.list({
            alwaysIncludeEmail: true,
            calendarId: "calendarId",
            iCalUID: "iCalUID",
            maxAttendees: 4,
            maxResults: 5,
            orderBy: "orderBy",
            pageToken: "pageToken",
            privateExtendedProperty: "privateExtendedProperty",
            q: "q",
            sharedExtendedProperty: "sharedExtendedProperty",
            showDeleted: true,
            showHiddenInvitations: true,
            singleEvents: true,
            syncToken: "syncToken",
            timeMax: "timeMax",
            timeMin: "timeMin",
            timeZone: "timeZone",
            updatedMin: "updatedMin",
        });
        /** Moves an event to another calendar, i.e. changes an event's organizer. */
        await gapi.client.calendar.events.move({
            calendarId: "calendarId",
            destination: "destination",
            eventId: "eventId",
            sendNotifications: true,
            sendUpdates: "sendUpdates",
        });
        /** Updates an event. This method supports patch semantics. */
        await gapi.client.calendar.events.patch({
            alwaysIncludeEmail: true,
            calendarId: "calendarId",
            conferenceDataVersion: 3,
            eventId: "eventId",
            maxAttendees: 5,
            sendNotifications: true,
            sendUpdates: "sendUpdates",
            supportsAttachments: true,
        });
        /** Creates an event based on a simple text string. */
        await gapi.client.calendar.events.quickAdd({
            calendarId: "calendarId",
            sendNotifications: true,
            sendUpdates: "sendUpdates",
            text: "text",
        });
        /** Updates an event. */
        await gapi.client.calendar.events.update({
            alwaysIncludeEmail: true,
            calendarId: "calendarId",
            conferenceDataVersion: 3,
            eventId: "eventId",
            maxAttendees: 5,
            sendNotifications: true,
            sendUpdates: "sendUpdates",
            supportsAttachments: true,
        });
        /** Watch for changes to Events resources. */
        await gapi.client.calendar.events.watch({
            alwaysIncludeEmail: true,
            calendarId: "calendarId",
            iCalUID: "iCalUID",
            maxAttendees: 4,
            maxResults: 5,
            orderBy: "orderBy",
            pageToken: "pageToken",
            privateExtendedProperty: "privateExtendedProperty",
            q: "q",
            sharedExtendedProperty: "sharedExtendedProperty",
            showDeleted: true,
            showHiddenInvitations: true,
            singleEvents: true,
            syncToken: "syncToken",
            timeMax: "timeMax",
            timeMin: "timeMin",
            timeZone: "timeZone",
            updatedMin: "updatedMin",
        });
        /** Returns free/busy information for a set of calendars. */
        await gapi.client.calendar.freebusy.query({
        });
        /** Returns a single user setting. */
        await gapi.client.calendar.settings.get({
            setting: "setting",
        });
        /** Returns all user settings for the authenticated user. */
        await gapi.client.calendar.settings.list({
            maxResults: 1,
            pageToken: "pageToken",
            syncToken: "syncToken",
        });
        /** Watch for changes to Settings resources. */
        await gapi.client.calendar.settings.watch({
            maxResults: 1,
            pageToken: "pageToken",
            syncToken: "syncToken",
        });
    }
});
