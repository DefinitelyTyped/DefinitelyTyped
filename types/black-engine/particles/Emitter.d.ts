export class Emitter extends DisplayObject {
    private mTextures;
    private mParticles;
    private mRecycled;
    private mInitializers;
    private mActions;
    private mSpace;
    private mIsLocal;
    private mMaxParticles;
    private mEmitCount;
    private mEmitNumRepeats;
    private mEmitNumRepeatsLeft;
    private mEmitDuration;
    private mEmitDurationLeft;
    private mEmitInterval;
    private mEmitIntervalLeft;
    private mEmitDelay;
    private mEmitDelayLeft;
    private mNextUpdateAt;
    private mState;
    private __tmpLocal;
    private __tmpWorld;
    private mSortOrder;
    private mTextureNames;
    private mPresimulateSeconds;
    private mCurrentPresimulationTime;
    play(): void;
    pause(): void;
    stop(): void;
    simulate(time: number): void;
    add(...modifiers: Array<GameObject | Component | Modifier>): Emitter;
    addModifier(modifier: Modifier): Modifier;
    removeModifier(modifier: Modifier): boolean;
    __getTime(): any;
    private updateNextTick;
    private __create;
    get state(): number;
    set maxParticles(arg: number);
    get maxParticles(): number;
    set emitCount(arg: FloatScatter);
    get emitCount(): FloatScatter;
    set emitNumRepeats(arg: FloatScatter);
    get emitNumRepeats(): FloatScatter;
    set emitDuration(arg: FloatScatter);
    get emitDuration(): FloatScatter;
    set emitInterval(arg: FloatScatter);
    get emitInterval(): FloatScatter;
    set emitDelay(arg: FloatScatter);
    get emitDelay(): FloatScatter;
    set space(arg: GameObject);
    get space(): GameObject;
    set textures(arg: Texture[]);
    get textures(): Texture[];
    set textureNames(arg: string[]);
    get textureNames(): string[];
    set sortOrder(arg: string);
    get sortOrder(): string;
}
import { DisplayObject } from '../display/DisplayObject';
import { Modifier } from './Modifier';
import { FloatScatter } from '../scatters/FloatScatter';
import { GameObject } from '../core/GameObject';
import { Texture } from '../textures/Texture';
import { Component } from '../core/Component';
