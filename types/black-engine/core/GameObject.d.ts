export class GameObject extends MessageDispatcher {
    static getBoundsWithPoints(points: number[], worldTransformation: Matrix, outRect?: Rectangle): Rectangle;
    static intersects(gameObject: GameObject, point: Vector): boolean;
    static intersectsAt(gameObject: GameObject, point: Vector, outVector?: Vector): boolean;
    static intersectsWith(gameObject: GameObject, point: Vector): GameObject | null;
    static findWithTag(tag: string): GameObject[] | null;
    static findComponents(gameObject: GameObject, type: new () => Component): Component[];
    static forEach(gameObject: GameObject, action: (arg0: GameObject) => any): void;
    static find(name: string, node?: GameObject): GameObject;
    static findById(id: number, node?: GameObject): GameObject;
    constructor();
    private mId;
    private mName;
    private mComponents;
    protected mChildren: GameObject[];
    private mX;
    private mY;
    private mScaleX;
    private mScaleY;
    protected mPivotX: number;
    protected mPivotY: number;
    protected mSkewX: number;
    protected mSkewY: number;
    protected mAnchorX: number | null;
    protected mAnchorY: number | null;
    protected mPivotOffsetX: number;
    protected mPivotOffsetY: number;
    private mRotation;
    protected mBoundsCache: Rectangle;
    private mLocalTransform;
    private mWorldTransform;
    private mWorldTransformInverted;
    private mDirty;
    protected mParent: GameObject;
    private mTag;
    private mAdded;
    private mNumChildrenRemoved;
    private mNumComponentsRemoved;
    private mDirtyFrameNum;
    private mSuspendDirty;
    private mCollidersCache;
    private mChildOrComponentBeenAdded;
    private mChildrenClone;
    private mComponentClone;
    make(values: any): GameObject;
    get id(): number;
    checkStatic(includeChildren?: boolean): boolean;
    onAdded(): void;
    onRemoved(): void;
    add(...gameObjectsAndOrComponents: Array<GameObject | Component>): GameObject;
    addChild(child: GameObject): GameObject;
    addChildAt(child: GameObject, index?: number): GameObject;
    private __setParent;
    setChildIndex(child: GameObject, index: number): GameObject;
    removeFromParent(): GameObject;
    removeChild(child: GameObject): GameObject;
    getChildByName(name: string): GameObject | null;
    removeChildAt(index: number): GameObject | null;
    removeAllChildren(): GameObject;
    getChildAt(index: number): GameObject;
    addComponent(component: Component): Component;
    addComponentAt(component: Component, index?: number): Component;
    removeComponentAt(index: number): Component | null;
    removeComponent(instance: Component): Component | null;
    removeAllComponents(): GameObject;
    getComponent(typeName: typeof Component): Component | null;
    get numComponents(): number;
    getComponentAt(index: number): Component | null;
    set localTransformation(arg: Matrix);
    get localTransformation(): Matrix;
    get worldTransformation(): Matrix;
    get worldTransformationInverted(): Matrix;
    private __update;
    protected onUpdate(): void;
    protected onGetLocalBounds(outRect?: Rectangle): Rectangle;
    getBounds(space?: GameObject, includeChildren?: boolean, outRect?: Rectangle): Rectangle;
    getStageBounds(outRect?: Rectangle): Rectangle;
    hitTest(localPoint: Vector): GameObject | null;
    protected onHitTest(localPoint: Vector): boolean;
    protected onHitTestMask(localPoint: Vector): boolean;
    get localBounds(): Rectangle;
    get bounds(): Rectangle;
    setTransform(
        x?: number,
        y?: number,
        r?: number,
        scaleX?: number,
        scaleY?: number,
        anchorX?: number,
        anchorY?: number,
        includeChildren?: boolean,
    ): GameObject;
    relativeTo(gameObject: GameObject, outVector?: Vector | null): Vector;
    localToGlobal(localPoint: Vector, outVector?: Vector | null): Vector;
    globalToLocal(globalPoint: Vector, outVector?: Vector | null): Vector;
    get numChildren(): number;
    set name(arg: string);
    get name(): string;
    set x(arg: number);
    get x(): number;
    set y(arg: number);
    get y(): number;
    set xy(arg: Vector);
    get xy(): Vector;
    set pivotOffsetX(arg: number);
    get pivotOffsetX(): number;
    set pivotOffsetY(arg: number);
    get pivotOffsetY(): number;
    set anchorX(arg: number);
    get anchorX(): number;
    set anchorY(arg: number);
    get anchorY(): number;
    get pivotX(): number;
    get pivotY(): number;
    alignAnchor(ax?: number, ay?: number): GameObject;
    alignPivot(ax?: number, ay?: number): GameObject;
    alignPivotOffset(ax?: number, ay?: number, includeChildren?: boolean): GameObject;
    set scaleX(arg: number);
    get scaleX(): number;
    set scaleY(arg: number);
    get scaleY(): number;
    set scale(arg: number);
    get scale(): number;
    set skewX(arg: number);
    get skewX(): number;
    set skewY(arg: number);
    get skewY(): number;
    set rotation(arg: number);
    get rotation(): number;
    get parent(): GameObject;
    get root(): GameObject;
    set width(arg: number);
    get width(): number;
    set height(arg: number);
    get height(): number;
    get localWidth(): number;
    get localHeight(): number;
    set tag(arg: string);
    get tag(): string;
    spawn(gen: () => void, ctx?: any): any;
    wait(seconds?: number): (arg0: any) => any;
    waitMessage(message: string): (arg0: any) => any;
    setDirty(flag: DirtyFlag, includeChildren?: boolean): void;
    private __updatePivots;
    setParentDirty(flag: DirtyFlag): void;
    setTransformDirty(): void;
    setRenderDirty(): void;
    set touchable(arg: boolean);
    get touchable(): boolean;
}
import { MessageDispatcher } from '../messages/MessageDispatcher';
import { Rectangle } from '../geom/Rectangle';
import { Component } from './Component';
import { Matrix } from '../geom/Matrix';
import { Vector } from '../geom/Vector';
import { DirtyFlag } from './DirtyFlag';
