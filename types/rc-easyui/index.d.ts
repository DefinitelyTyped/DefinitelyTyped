// Type definitions for rc-easyui 1.0
// Project: https://www.jeasyui.com/demo-react/main/index.php
// Definitions by: Bangkit Ilham Maulana <https://github.com/maspinguin>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

/** Declaration file generated by dts-gen */
import * as React from 'react';

export class Accordion extends React.Component <any> {
    constructor(e: any);

    accordionClasses(): any;

    changePanels(): void;

    componentDidUpdate(e: any): any;

    getPanel(e: any): any;

    getPanelIndex(e: any): any;

    getPanels(e: any): any;

    getSelectedIndex(): any;

    getSelectedPanel(): any;

    getSelectedPanels(): any;

    handlePanelAdd(e: any): void;

    handlePanelRemove(e: any): void;

    handlePanelSelect(e: any): void;

    handlePanelUnselect(e: any): void;

    initPanels(): any;

    initSelectedPanel(): any;

    render(): any;

    select(e: any): void;

    unselect(e: any): void;
}

export class AccordionPanel  extends React.Component <any> {
    constructor(e: any);

    bodyClasses(): any;

    clickCollapsibleTool(e: any): void;

    clickPanelHeader(e: any): void;

    componentDidMount(): void;

    componentWillUnmount(): void;

    full(): any;

    headerClasses(): any;

    panelClasses(): any;

    select(): any;

    selectedState(): any;

    setLast(e: any): void;

    unselect(): void;
}

export class ButtonGroup extends React.Component <any> {
    constructor(e: any);

    render(): any;

    static defaultProps: {
        selectionMode: string;    };
}

export class Calendar extends React.Component <any> {
    constructor(e: any);

    componentDidMount(): void;

    componentDidUpdate(e: any): any;

    getHeaderData(): any;

    getWeeks(): any;

    handleDayClick(e: any): void;

    handleDayMouseEnter(e: any): void;

    handleDayMouseLeave(): void;

    handleMenuClick(): void;

    handleMonthClick(e: any): any;

    handleMonthMouseEnter(e: any): void;

    handleMonthMouseLeave(): void;

    handleMonthNext(): void;

    handleMonthPrev(): void;

    handleYearChange(e: any): any;

    handleYearNext(): void;

    handleYearPrev(): void;

    highlightDate(e: any): void;

    isDiff(e: any, t: any): any;

    isStateEmpty(e: any): any;

    isValid(e: any): any;

    moveTo(e: any): any;

    navDate(e: any): void;

    refresh(): void;

    render(): any;

    selectDate(...args: any[]): void;

    toArray(e: any): any;

    toDate(e: any): any;
}

export class CheckBox extends React.Component <any> {
    constructor(e: any);

    checkClasses(): any;

    componentDidMount(): void;

    componentDidUpdate(e: any): void;

    handleChange(): void;

    handleClick(e: any): void;

    initChecked(e: any, ...args: any[]): void;

    render(): any;

    updateValues(): void;

    wrapperClasses(): any;
}

export class ComboBox extends React.Component <any> {
    constructor(e: any);

    blur(): void;

    clearSelections(): void;

    closePanel(): void;

    componentDidMount(): void;

    componentDidUpdate(e: any): void;

    doFilter(e: any): any;

    findItem(e: any, ...args: any[]): any;

    fixValue(): any;

    focus(): void;

    handleKeyDown(e: any): any;

    handlePageChange(e: any): void;

    handleRowClick(e: any): any;

    handleSelectionChange(e: any): any;

    initValue(e: any): any;

    openPanel(): void;

    renderInput(): any;

    renderItem(e: any): any;

    renderPanel(): any;

    setData(e: any): void;

    setValue(e: any): void;

    text(): any;

    updateSelection(e: any): void;

    updateText(e: any): void;
}

export class ComboGrid extends React.Component <any> {
    constructor(e: any);

    blur(): void;

    closePanel(): void;

    componentDidMount(): void;

    doFilter(): void;

    findRow(e: any): any;

    fixValue(): any;

    handleSelectionChange(e: any): any;

    initValue(e: any): any;

    openPanel(): void;

    renderContent(): any;

    setValue(e: any): void;

    updateText(): void;
}

export class ComboTree extends React.Component <any> {
    constructor(e: any);

    blur(): void;

    componentDidMount(): void;

    doFilter(e: any): void;

    fixValue(): any;

    handleCheckChange(e: any): any;

    handleSelectionChange(e: any): void;

    initTreeValue(e: any): any;

    initValue(e: any): any;

    isDiff(e: any, t: any): any;

    openPanel(): any;

    renderContent(): any;

    setValue(e: any): void;

    updateText(): void;
}

export class DataGrid extends React.Component <any> {
    constructor(e: any);

    collapseGroup(e: any): void;

    collapseRow(e: any): any;

    expandGroup(e: any): void;

    expandRow(e: any): void;

    frozenRows(): any;

    getAbsoluteIndex(e: any): any;

    getExpandedIndex(e: any): any;

    getGroup(e: any, t: any): any;

    handleBodyScroll(e: any): void;

    isGroupRow(e: any): any;

    isGrouped(e: any): any;

    isRowExpanded(e: any): any;

    makeGroup(e: any): any;

    makeGroupedRows(): any;

    setGroupData(): void;

    sortData(): any;

    toggleGroup(e: any): void;

    toggleRow(e: any): void;

    updateFrozenView(e: any, t: any): void;

    viewComponent(): any;
}

export class DataList extends React.Component <any> {
    constructor(...args: any[]);

    container(): any;

    getItemClass(e: any): any;

    getRowIndex(e: any): any;

    handleMouseEnter(e: any): any;

    handleMouseLeave(): void;

    handleRowClick(e: any): any;

    handleScroll(e: any): void;

    highlightFirstRow(): void;

    innerClasses(): any;

    innerStyle(): any;

    navRow(e: any): void;

    render(): any;

    renderList(): any;

    renderLoading(): any;

    renderPagination(e: any): any;

    renderVirtualList(): any;

    scrollToSelectedRow(): void;

    scrollTop(e: any): any;

    setData(e: any): void;

    virtualItemStyle(): any;
}

export class DateBox extends React.Component <any> {
    constructor(...args: any[]);

    blur(): void;

    componentDidMount(): void;

    defaultFormatter(e: any): any;

    defaultParser(e: any): any;

    doFilter(e: any): void;

    fixValue(): void;

    handleCloseClick(e: any): void;

    handleKeyDown(e: any): any;

    handleSelectionChange(e: any): void;

    handleTodayClick(e: any): void;

    isDiff(e: any, t: any): any;

    renderInput(): any;

    renderPanel(): any;

    setValue(e: any): void;

    text(): any;
}

export class Dialog extends React.Component <any> {
    constructor(e: any);

    bodyClasses(): any;

    center(): void;

    clickCloseTool(e: any): void;

    close(): void;

    closeMask(): void;

    componentDidMount(): void;

    componentDidUpdate(e: any): void;

    componentWillUnmount(): void;

    displaying(): void;

    footerClasses(): any;

    handleDragEnd(e: any): void;

    handleResizeStop(e: any): void;

    hcenter(): void;

    headerClasses(): any;

    initDialog(): void;

    moveToTop(): void;

    open(): void;

    openMask(): void;

    panelClasses(): any;

    panelStyles(): any;

    render(): any;

    vcenter(): void;

    static zIndex: number;
}

export class Draggable {
    constructor(e: any);

    componentDidMount(): void;

    componentDidUpdate(e: any): void;

    componentWillUnmount(): void;

    hideProxy(): void;

    render(): any;

    renderProxy(): any;

    showProxy(): any;
}

export class DraggableProxy extends React.Component <any> {
    constructor(e: any);

    componentDidMount(): void;

    componentDidUpdate(e: any): void;

    componentWillUnmount(): void;

    handleTransitionEnd(): void;

    proxyClasses(): any;

    proxyStyles(): any;

    render(): any;
}

export class Droppable extends React.Component <any> {
    constructor(...args: any[]);

    componentDidMount(): void;

    componentDidUpdate(): void;

    componentWillUnmount(): void;

    render(): any;
}

export class FieldBase extends React.Component <any> {
    constructor(e: any);

    componentDidMount(): void;

    componentDidUpdate(e: any): void;

    componentWillUnmount(): void;

    getFieldName(): any;

    render(): any;

    static defaultProps: {
        invalid: boolean;
        validateOnBlur: boolean;
        validateOnChange: boolean;
        validateOnCreate: boolean;    };
}

export class FileButton extends React.Component <any> {
    constructor(...args: any[]);

    clear(): void;

    componentDidMount(): void;

    getFiles(): any;

    handleFileSelect(): void;

    renderOthers(): any;

    upload(): void;

    static fileId: number;
}

export class Form extends React.Component <any> {
    constructor(...args: any[]);

    getChildContext(): any;

    handleSubmit(e: any): void;

    render(): any;
}

export class FormField extends React.Component <any> {
    constructor(e: any);

    render(): any;

    renderError(e: any): any;

    renderField(e: any): any;

    renderInput(e: any, t: any): any;

    renderLabel(e: any): any;

    static idIndex: number;
}

export class GridBase extends React.Component <any> {
    constructor(e: any);

    addFilterRule(e: any): void;

    addSort(e: any): any;

    allColumns(): any;

    beginEdit(e: any, ...args: any[]): void;

    cancelEdit(): void;

    changeColumns(): void;

    componentDidMount(): void;

    componentDidUpdate(e: any): void;

    componentWillUnmount(): void;

    endEdit(): any;

    findColumn(e: any): any;

    footerRows(): any;

    getColumnCount(e: any): any;

    getColumnIndex(e: any): any;

    getColumnLayout(e: any): any;

    handleBodyScroll(e: any): void;

    initColumnSort(): void;

    initColumns(): any;

    initFilterRules(): void;

    initHeaderHeight(): void;

    isEditing(e: any, ...args: any[]): any;

    leftFrozenWidth(): any;

    moveColumn(e: any, t: any, n: any): any;

    onColumnAdd(e: any): void;

    onColumnGroupAdd(e: any): void;

    onColumnGroupRemove(e: any): void;

    onColumnRemove(e: any): void;

    render(): any;

    renderColumns(): any;

    renderLoading(): any;

    renderPagination(e: any): any;

    renderSplitHelper(): any;

    renderToolbar(): any;

    renderView(e: any): any;

    resizeColumn(e: any, t: any): void;

    rightFrozenWidth(): any;

    scrollTo(e: any): void;

    scrollTop(e: any): any;

    viewComponent(): any;
}

export class GridColumn extends React.Component <any> {
    constructor(e: any);

    componentDidMount(): void;

    componentDidUpdate(e: any): void;

    componentWillUnmount(): void;

    doFilter(): void;

    render(): any;

    updateFilterRule(): void;

    static defaultProps: {
        colspan: number;
        defaultFilterOperator: string;
        editable: boolean;
        expander: boolean;
        filterOperators: any[];
        filterable: boolean;
        frozen: boolean;
        order: string;
        rowspan: number;
        sortable: boolean;    };
}

export class GridColumnGroup extends React.Component <any> {
    constructor(e: any);

    componentDidMount(): void;

    componentWillUnmount(): void;

    onRowAdd(e: any): void;

    onRowRemove(e: any): void;

    render(): any;

    static defaultProps: {
        align: string;
        frozen: boolean;    };
}

export class GridHeaderRow extends React.Component <any> {
    constructor(e: any);

    componentDidMount(): void;

    componentWillUnmount(): void;

    onColumnAdd(e: any): void;

    onColumnRemove(e: any): void;

    render(): any;
}

export class InputBase extends React.Component <any> {
    constructor(e: any);

    addonClasses(): any;

    addonIconClasses(): any;

    baseClasses(): any;

    blur(): void;

    componentDidUpdate(e: any): void;

    focus(): void;

    getSelectionRange(): any;

    getSelectionStart(): any;

    handleInputChange(e: any): void;

    inputClasses(): any;

    isDiff(e: any, t: any): any;

    render(): any;

    renderAddon(e: any): any;

    renderInput(): any;

    renderOthers(): any;

    setSelectionRange(e: any, t: any): void;

    setValue(e: any): void;

    text(): any;
}

export class Label extends React.Component <any> {
    constructor(...args: any[]);

    render(): any;

    static defaultProps: {
        align: string;    };
}

export class Layout extends React.Component <any> {
    constructor(e: any);

    changePanels(): void;

    getPaddingValue(e: any): any;

    getPanel(e: any): any;

    handleClick(e: any): any;

    handlePanelAdd(e: any): void;

    handlePanelRemove(e: any): void;

    handlePanelResizeStart(e: any, t: any): void;

    handlePanelResizeStop(e: any, t: any): void;

    handlePanelResizing(e: any, t: any): void;

    render(): any;

    renderCollapsedPanel(e: any): any;

    renderConsumer(): any;

    renderLayout(): any;

    updatePaddings(): void;
}

export class LayoutPanel extends React.Component <any> {
    constructor(e: any);

    clickCollapsibleTool(e: any): void;

    collapse(): void;

    collapsibleClasses(): any;

    componentDidMount(): void;

    componentWillUnmount(): void;

    expand(): void;

    fixStyle(): void;

    handleResizeStart(e: any): void;

    handleResizeStop(e: any): void;

    handleResizing(e: any): void;

    handleSlideEnd(): void;

    panelClasses(): any;

    panelStyles(): any;

    render(): any;
}

export class LinkButton extends React.Component <any> {
    constructor(e: any);

    blur(): void;

    btnIconCls(): any;

    btnLeftCls(): any;

    btnTextCls(): any;

    componentDidUpdate(e: any): void;

    focus(): void;

    handleClick(e: any): any;

    innerCls(): any;

    isDisabled(): any;

    isEmpty(): any;

    render(): any;

    renderButton(): any;

    renderInners(): any;

    renderOthers(): any;

    text(): any;
}

export class LocaleBase {
    constructor(...args: any[]);

    t(e: any, ...args: any[]): any;
}

export class LocaleProvider  extends React.Component <any> {
    constructor(e: any, ...args: any[]);

    componentDidUpdate(e: any): void;

    getChildContext(): any;

    render(): any;
}

export class MaskedBox  extends React.Component <any> {
    constructor(...args: any[]);

    componentDidMount(): void;

    deleteChar(e: any): void;

    formatter(e: any): any;

    getInputOffset(e: any): any;

    handleKeyDown(e: any): void;

    insertChar(e: any): void;

    parser(e: any): any;

    renderInput(): any;

    seekNext(e: any): any;

    seekPrev(e: any): any;
}

export class Menu  extends React.Component <any> {
    constructor(e: any);

    alignContextMenu(): void;

    alignTo(e: any, ...args: any[]): void;

    componentDidMount(): void;

    componentWillUnmount(): void;

    containerClasses(): any;

    containerStyle(): any;

    delayHide(): void;

    handleDocumentClick(e: any): void;

    handleItemClick(e: any): void;

    handleMouseOut(): void;

    handleMouseOver(): void;

    hide(): void;

    render(): any;

    show(e: any, n: any): any;

    showAt(e: any, ...args: any[]): any;

    showContextMenu(e: any, t: any): any;

    static zIndex: number;
}

export class MenuButton  extends React.Component <any> {
    constructor(e: any);

    handleClick(e: any): void;

    handleItemClick(e: any): void;

    handleMenuHide(): void;

    handleMenuShow(): void;

    handleMouseEnter(): void;

    handleMouseLeave(): void;

    innerCls(): any;

    render(): any;

    renderInners(): any;

    renderMenu(): any;

    showMenu(): void;
}

export class MenuItem  extends React.Component <any> {
    constructor(e: any);

    componentDidUpdate(e: any): void;

    handleItemClick(e: any): void;

    handleMenuAdd(e: any): void;

    handleMenuRemove(): void;

    handleMouseEnter(): void;

    handleMouseLeave(): void;

    itemClasses(): any;

    render(): any;

    static defaultProps: {
        disabled: boolean;    };
}

export class MenuSep extends React.Component <any> {
    constructor(...args: any[]);

    render(): any;
}

export class Messager extends React.Component <any> {
    constructor(e: any);

    alert(e: any): void;

    close(e: any): void;

    confirm(e: any): void;

    openDialog(e: any, ...args: any[]): void;

    prompt(e: any): void;

    render(): any;

    static defaultProps: {
        buttons: any[];
        defaultCancel: string;
        defaultOk: string;    };
}

export class NumberBox extends React.Component <any> {
    constructor(...args: any[]);

    blur(): void;

    componentDidMount(): void;

    componentDidUpdate(e: any): void;

    doSpinDown(): void;

    doSpinUp(): void;

    filter(e: any): any;

    formatter(e: any): any;

    handleInputChange(e: any): void;

    handleKeyPress(e: any): void;

    parser(e: any): any;

    renderInput(): any;

    setValue(e: any): void;
}

export class Pagination extends React.Component <any> {
    constructor(e: any);

    adjustPage(): void;

    afterPageText(): any;

    beforePageText(): any;

    componentDidMount(): void;

    componentDidUpdate(e: any): void;

    handleButtonClick(e: any): void;

    handleLinkChange(e: any): void;

    handleListChange(e: any): void;

    handlePageInput(e: any): void;

    isButton(e: any): any;

    pageCount(): any;

    pageInfo(): any;

    refreshPage(): void;

    render(): any;

    renderLayout(e: any, t: any): any;

    selectPage(e: any): void;
}

export class Panel extends React.Component <any> {
    constructor(e: any);

    bodyClasses(): any;

    clickCloseTool(e: any): void;

    clickCollapsibleTool(e: any): void;

    clickPanelHeader(): void;

    closableClasses(): any;

    collapse(): void;

    collapsibleClasses(): any;

    componentDidUpdate(e: any): void;

    expand(): void;

    footerClasses(): any;

    hasFooter(): any;

    hasHeader(): any;

    headerClasses(): any;

    panelBody(): any;

    panelClasses(): any;

    panelFooter(): any;

    panelHeader(): any;

    panelStyles(): any;

    render(): any;

    toggle(): void;
}

export class PasswordBox extends React.Component <any> {
    constructor(e: any);

    componentDidMount(): void;

    convert(e: any, ...args: any[]): void;

    eyeClasses(): any;

    eyeIconClasses(): any;

    handleEyeClick(): void;

    handleInputChange(e: any): void;

    renderOthers(): any;
}

export class ProgressBar extends React.Component <any> {
    constructor(...args: any[]);

    barClasses(): any;

    barStyles(): any;

    render(): any;

    static defaultProps: {
        showValue: boolean;
        value: number;    };
}

export class RadioButton extends React.Component <any> {
    constructor(e: any);

    componentDidMount(): void;

    componentDidUpdate(e: any): void;

    handleChange(): void;

    handleClick(): void;

    radioClasses(): any;

    render(): any;

    select(): void;

    setChecked(e: any): void;

    wrapperClasses(): any;
}

export class Resizable extends React.Component <any> {
    constructor(...args: any[]);

    componentDidMount(): void;

    componentDidUpdate(): void;

    componentWillUnmount(): void;

    render(): any;
}

export class SearchBox extends React.Component <any> {
    constructor(e: any);

    baseClasses(): any;

    componentDidMount(): void;

    componentDidUpdate(e: any): void;

    doSearch(): void;

    findItem(e: any): any;

    handleIconClick(): void;

    handleKeyDown(e: any): void;

    handleMenuItemClick(e: any): void;

    renderInput(): any;

    renderMenu(): any;

    renderOthers(): any;

    setCategory(e: any): void;
}

export class SideMenu extends React.Component <any> {
    constructor(e: any);

    componentDidMount(): void;

    componentDidUpdate(e: any): void;

    handleItemClick(e: any): void;

    handleNodeClick(e: any): any;

    handleSelectionChange(e: any): void;

    render(): any;

    renderCollapsed(): any;

    renderItems(): any;

    setData(e: any): void;
}

export class Slider extends React.Component <any> {
    constructor(e: any);

    componentDidUpdate(e: any): void;

    displayingRule(): any;

    getPosStyle(e: any): any;

    getRuleValueStyle(e: any): any;

    handleDown(e: any): void;

    handleDrag(e: any, ...args: any[]): void;

    isDiff(e: any, t: any): any;

    pos2value(e: any): any;

    render(): any;

    renderHandle(e: any): any;

    renderRule(): any;

    renderTip(e: any): any;

    setPos(e: any, ...args: any[]): any;

    setValue(e: any): void;

    sliderClasses(): any;

    value1(): any;

    value2(): any;

    value2pos(e: any): any;
}

export class SplitButton extends React.Component <any> {
    constructor(e: any);

    handleLineClick(e: any): void;

    innerCls(): any;

    render(): any;

    renderInners(): any;
}

export class SubMenu extends React.Component <any> {
    constructor(e: any);

    alignMenu(): void;

    componentDidMount(): void;

    componentWillUnmount(): void;

    render(): any;
}

export class SwitchButton extends React.Component <any> {
    constructor(e: any);

    buttonClasses(): any;

    componentDidUpdate(e: any): void;

    handleClick(e: any): void;

    render(): any;

    setValue(e: any): void;
}

export class TabPanel extends React.Component <any> {
    constructor(e: any);

    close(): void;

    componentDidMount(): void;

    componentWillUnmount(): void;

    panelClasses(): any;

    render(): any;

    select(): any;

    unselect(): void;
}

export class Tabs extends React.Component <any> {
    constructor(e: any);

    addHis(e: any): void;

    backHis(): void;

    bodyClasses(): any;

    changePanels(): void;

    componentDidUpdate(e: any): void;

    componentWillUnmount(): void;

    containerClasses(): any;

    getPanel(e: any): any;

    getPanelIndex(e: any): any;

    getSelectedPanel(): any;

    handlePanelAdd(e: any): void;

    handlePanelRemove(e: any): void;

    handleTabClick(e: any): void;

    handleTabClose(e: any): void;

    headerClasses(): any;

    initPanels(): any;

    initSelectedPanel(): any;

    initUsedPanels(): any;

    isHorizontal(): any;

    isScrollable(): any;

    isScrollerVisible(): any;

    removeHis(e: any): any;

    render(): any;

    scrollBy(e: any): void;

    select(e: any): void;

    setMaxScrollDistance(e: any): void;

    setScrollers(): void;

    tabsClasses(): any;

    tabsStyle(): any;

    unselect(e: any): void;
}

export class TagBox extends React.Component <any> {
    constructor(...args: any[]);

    autoSizeInput(): any;

    baseClasses(): any;

    blur(): void;

    clearText(): void;

    componentDidMount(): void;

    componentWillUnmount(): void;

    doEnter(): any;

    fixValue(): void;

    getCss(e: any, t: any, n: any): any;

    getTagClass(e: any): any;

    getTagStyle(e: any): any;

    handleClick(): any;

    handleInputChange(e: any): void;

    handleKeyDown(e: any): void;

    handleRemoveClick(e: any, t: any): any;

    renderInput(): any;

    updateText(e: any): void;
}

export class TextBox extends React.Component <any> {
    constructor(...args: any[]);

    text(): any;
}

export class TextEditor extends React.Component <any> {
    constructor(e: any);

    baseClasses(): any;

    componentDidMount(): void;

    componentDidUpdate(e: any): void;

    handleInputBlur(e: any): void;

    handleInputFocus(e: any): void;

    isDiff(e: any, t: any): any;

    render(): any;

    setValue(e: any): void;
}

export class TimePicker extends React.Component <any> {
    constructor(e: any);

    handleCloseClick(e: any): void;

    handleOkClick(e: any): void;

    handleTimeChange(e: any): void;

    renderPanel(): any;
}

export class TimeSpinner extends React.Component <any> {
    constructor(e: any);

    blur(): void;

    componentDidMount(): void;

    defaultFormatter(e: any): any;

    defaultParser(e: any): any;

    doSpin(e: any): void;

    doSpinDown(): void;

    doSpinUp(): void;

    handleClick(): void;

    handleInputChange(e: any): void;

    handleKeyDown(e: any): void;

    handleKeyPress(e: any): any;

    highlightRange(e: any): void;

    parseD(e: any): any;

    renderInput(): any;

    setValue(e: any): void;

    text(): any;
}

export class Tooltip extends React.Component <any> {
    constructor(e: any);

    bindEvents(...args: any[]): void;

    clearTimeouts(): void;

    componentDidMount(): void;

    componentWillUnmount(): void;

    handleActive(e: any): void;

    handleContentMouseEnter(): any;

    handleContentMouseLeave(): void;

    handleDeactive(): void;

    handleDocumentClick(e: any): void;

    handleMouseMove(e: any): void;

    hide(): void;

    render(): any;

    renderTip(): any;

    show(): void;
}

export class Tree extends React.Component <any> {
    constructor(e: any);

    beginEdit(e: any, ...args: any[]): any;

    cancelEdit(): void;

    checkNode(e: any): void;

    collapseNode(e: any): void;

    componentDidUpdate(e: any): void;

    doFilter(e: any): void;

    endEdit(): any;

    expandNode(e: any): void;

    getCheckedNodes(...args: any[]): any;

    isEditing(e: any): any;

    render(): any;

    selectNode(e: any): void;

    uncheckAllNodes(): void;

    uncheckNode(e: any): void;
}

export class TreeGrid extends React.Component <any> {
    constructor(...args: any[]);

    checkRow(e: any): void;

    collapseRow(e: any): void;

    doFilter(e: any): void;

    expandRow(e: any): void;

    getCheckedRows(...args: any[]): any;

    sortData(): any;

    uncheckAllRows(): void;

    uncheckRow(e: any): void;

    viewComponent(): any;
}

export class Validation extends React.Component <any> {
    constructor(e: any);

    getChildContext(): any;

    getError(e: any): any;

    getErrors(e: any): any;

    getFieldValue(e: any): any;

    hasError(e: any): any;

    isFocused(e: any): any;

    render(): any;

    valid(): any;

    validate(e: any): void;

    validateField(e: any, t: any): any;
}

export class VirtualScroll extends React.Component <any> {
    constructor(e: any);

    componentDidMount(): any;

    componentDidUpdate(e: any): void;

    fetchPage(e: any): void;

    handleScroll(e: any): void;

    loadPage(e: any): void;

    populate(e: any): void;

    refresh(): void;

    relativeScrollTop(): any;

    render(): any;

    renderContent(): any;

    resetData(e: any): void;

    scrollLeft(e: any): any;

    scrollState(e: any): any;

    scrollTop(e: any): any;

    scrollbarWidth(): any;

    scrolling(): void;

    setData(e: any): void;

    splitHeights(e: any): any;
}

export const filterOperators: {
    beginwith: {
        isMatch: any;
        text: string;    };
    contains: {
        isMatch: any;
        text: string;    };
    endwith: {
        isMatch: any;
        text: string;    };
    equal: {
        isMatch: any;
        text: string;    };
    greater: {
        isMatch: any;
        text: string;    };
    greaterorequal: {
        isMatch: any;
        text: string;    };
    less: {
        isMatch: any;
        text: string;    };
    lessorequal: {
        isMatch: any;
        text: string;    };
    nofilter: {
        isMatch: any;
        text: string;    };
    notequal: {
        isMatch: any;
        text: string;    };
};

export function DateTimeSpinner(...args: any[]): any;

export namespace Accordion {
    namespace contextTypes {
        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace locale {
            // Circular reference from rc_easyui.Accordion.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.Accordion.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const animate: boolean;

        const border: boolean;

        const multiple: boolean;

        const selectedIndex: number;

        function onPanelSelect(e: any): void;

        function onPanelUnselect(e: any): void;
    }

    namespace propTypes {
        function animate(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function border(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function className(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function multiple(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onPanelSelect(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onPanelUnselect(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function selectedIndex(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function style(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace animate {
            // Circular reference from rc_easyui.Accordion.propTypes.animate
            const isRequired: any;
        }

        namespace border {
            // Circular reference from rc_easyui.Accordion.propTypes.border
            const isRequired: any;
        }

        namespace className {
            // Circular reference from rc_easyui.Accordion.propTypes.className
            const isRequired: any;
        }

        namespace multiple {
            // Circular reference from rc_easyui.Accordion.propTypes.multiple
            const isRequired: any;
        }

        namespace onPanelSelect {
            // Circular reference from rc_easyui.Accordion.propTypes.onPanelSelect
            const isRequired: any;
        }

        namespace onPanelUnselect {
            // Circular reference from rc_easyui.Accordion.propTypes.onPanelUnselect
            const isRequired: any;
        }

        namespace selectedIndex {
            // Circular reference from rc_easyui.Accordion.propTypes.selectedIndex
            const isRequired: any;
        }

        namespace style {
            // Circular reference from rc_easyui.Accordion.propTypes.style
            const isRequired: any;
        }
    }
}

export namespace AccordionPanel {
    namespace contextTypes {
        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace locale {
            // Circular reference from rc_easyui.AccordionPanel.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.AccordionPanel.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const animate: boolean;

        const border: boolean;

        const closable: boolean;

        const closeIconCls: string;

        const closed: boolean;

        const collapseIconCls: string;

        const collapsed: boolean;

        const collapsible: boolean;

        const expandIconCls: string;

        const selected: boolean;

        const showFooter: boolean;

        const showHeader: boolean;

        const title: string;

        function onCollapse(): void;

        function onExpand(): void;
    }

    namespace propTypes {
        function animate(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function bodyCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function bodyStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function border(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function closable(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function closeIconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function closed(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function collapseIconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function collapsed(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function collapsible(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function expandIconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function footer(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function footerCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function footerStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function header(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function headerCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function headerStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onCollapse(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onExpand(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function showFooter(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function showHeader(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function title(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace animate {
            // Circular reference from rc_easyui.AccordionPanel.propTypes.animate
            const isRequired: any;
        }

        namespace bodyCls {
            // Circular reference from rc_easyui.AccordionPanel.propTypes.bodyCls
            const isRequired: any;
        }

        namespace bodyStyle {
            // Circular reference from rc_easyui.AccordionPanel.propTypes.bodyStyle
            const isRequired: any;
        }

        namespace border {
            // Circular reference from rc_easyui.AccordionPanel.propTypes.border
            const isRequired: any;
        }

        namespace closable {
            // Circular reference from rc_easyui.AccordionPanel.propTypes.closable
            const isRequired: any;
        }

        namespace closeIconCls {
            // Circular reference from rc_easyui.AccordionPanel.propTypes.closeIconCls
            const isRequired: any;
        }

        namespace closed {
            // Circular reference from rc_easyui.AccordionPanel.propTypes.closed
            const isRequired: any;
        }

        namespace collapseIconCls {
            // Circular reference from rc_easyui.AccordionPanel.propTypes.collapseIconCls
            const isRequired: any;
        }

        namespace collapsed {
            // Circular reference from rc_easyui.AccordionPanel.propTypes.collapsed
            const isRequired: any;
        }

        namespace collapsible {
            // Circular reference from rc_easyui.AccordionPanel.propTypes.collapsible
            const isRequired: any;
        }

        namespace expandIconCls {
            // Circular reference from rc_easyui.AccordionPanel.propTypes.expandIconCls
            const isRequired: any;
        }

        namespace footer {
            // Circular reference from rc_easyui.AccordionPanel.propTypes.footer
            const isRequired: any;
        }

        namespace footerCls {
            // Circular reference from rc_easyui.AccordionPanel.propTypes.footerCls
            const isRequired: any;
        }

        namespace footerStyle {
            // Circular reference from rc_easyui.AccordionPanel.propTypes.footerStyle
            const isRequired: any;
        }

        namespace header {
            // Circular reference from rc_easyui.AccordionPanel.propTypes.header
            const isRequired: any;
        }

        namespace headerCls {
            // Circular reference from rc_easyui.AccordionPanel.propTypes.headerCls
            const isRequired: any;
        }

        namespace headerStyle {
            // Circular reference from rc_easyui.AccordionPanel.propTypes.headerStyle
            const isRequired: any;
        }

        namespace iconCls {
            // Circular reference from rc_easyui.AccordionPanel.propTypes.iconCls
            const isRequired: any;
        }

        namespace onCollapse {
            // Circular reference from rc_easyui.AccordionPanel.propTypes.onCollapse
            const isRequired: any;
        }

        namespace onExpand {
            // Circular reference from rc_easyui.AccordionPanel.propTypes.onExpand
            const isRequired: any;
        }

        namespace showFooter {
            // Circular reference from rc_easyui.AccordionPanel.propTypes.showFooter
            const isRequired: any;
        }

        namespace showHeader {
            // Circular reference from rc_easyui.AccordionPanel.propTypes.showHeader
            const isRequired: any;
        }

        namespace title {
            // Circular reference from rc_easyui.AccordionPanel.propTypes.title
            const isRequired: any;
        }
    }
}

export namespace ButtonGroup {
    namespace contextTypes {
        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace locale {
            // Circular reference from rc_easyui.ButtonGroup.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.ButtonGroup.contextTypes.t
            const isRequired: any;
        }
    }

    namespace propTypes {
        function selectionMode(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace selectionMode {
            // Circular reference from rc_easyui.ButtonGroup.propTypes.selectionMode
            const isRequired: any;
        }
    }
}

export namespace Calendar {
    namespace contextTypes {
        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace locale {
            // Circular reference from rc_easyui.Calendar.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.Calendar.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const border: boolean;

        const defaultMonths: string[];

        const defaultWeeks: string[];

        const firstDay: number;

        const info: any;

        const month: number;

        const showInfo: boolean;

        const showWeek: boolean;

        const weekNumberHeader: string;

        const year: number;

        function defaultInfo(e: any): any;

        function onSelectionChange(e: any): void;

        function validator(e: any): any;
    }

    namespace propTypes {
        function border(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function className(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function firstDay(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function info(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function month(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function months(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function selection(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function showInfo(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function showWeek(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function style(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function validator(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function weekNumberHeader(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function weeks(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function year(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace border {
            // Circular reference from rc_easyui.Calendar.propTypes.border
            const isRequired: any;
        }

        namespace className {
            // Circular reference from rc_easyui.Calendar.propTypes.className
            const isRequired: any;
        }

        namespace firstDay {
            // Circular reference from rc_easyui.Calendar.propTypes.firstDay
            const isRequired: any;
        }

        namespace info {
            // Circular reference from rc_easyui.Calendar.propTypes.info
            const isRequired: any;
        }

        namespace month {
            // Circular reference from rc_easyui.Calendar.propTypes.month
            const isRequired: any;
        }

        namespace months {
            // Circular reference from rc_easyui.Calendar.propTypes.months
            const isRequired: any;
        }

        namespace selection {
            // Circular reference from rc_easyui.Calendar.propTypes.selection
            const isRequired: any;
        }

        namespace showInfo {
            // Circular reference from rc_easyui.Calendar.propTypes.showInfo
            const isRequired: any;
        }

        namespace showWeek {
            // Circular reference from rc_easyui.Calendar.propTypes.showWeek
            const isRequired: any;
        }

        namespace style {
            // Circular reference from rc_easyui.Calendar.propTypes.style
            const isRequired: any;
        }

        namespace validator {
            // Circular reference from rc_easyui.Calendar.propTypes.validator
            const isRequired: any;
        }

        namespace weekNumberHeader {
            // Circular reference from rc_easyui.Calendar.propTypes.weekNumberHeader
            const isRequired: any;
        }

        namespace weeks {
            // Circular reference from rc_easyui.Calendar.propTypes.weeks
            const isRequired: any;
        }

        namespace year {
            // Circular reference from rc_easyui.Calendar.propTypes.year
            const isRequired: any;
        }
    }
}

export namespace CheckBox {
    namespace contextTypes {
        function fieldAdd(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldFocus(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldName(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldRemove(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace fieldAdd {
            // Circular reference from rc_easyui.CheckBox.contextTypes.fieldAdd
            const isRequired: any;
        }

        namespace fieldBlur {
            // Circular reference from rc_easyui.CheckBox.contextTypes.fieldBlur
            const isRequired: any;
        }

        namespace fieldChange {
            // Circular reference from rc_easyui.CheckBox.contextTypes.fieldChange
            const isRequired: any;
        }

        namespace fieldFocus {
            // Circular reference from rc_easyui.CheckBox.contextTypes.fieldFocus
            const isRequired: any;
        }

        namespace fieldName {
            // Circular reference from rc_easyui.CheckBox.contextTypes.fieldName
            const isRequired: any;
        }

        namespace fieldRemove {
            // Circular reference from rc_easyui.CheckBox.contextTypes.fieldRemove
            const isRequired: any;
        }

        namespace locale {
            // Circular reference from rc_easyui.CheckBox.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.CheckBox.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const checked: boolean;

        const disabled: boolean;

        const multiple: boolean;

        const values: any[];

        function onChange(e: any): void;
    }

    namespace propTypes {
        function checked(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function disabled(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputId(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function multiple(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function value(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function values(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace checked {
            // Circular reference from rc_easyui.CheckBox.propTypes.checked
            const isRequired: any;
        }

        namespace disabled {
            // Circular reference from rc_easyui.CheckBox.propTypes.disabled
            const isRequired: any;
        }

        namespace inputId {
            // Circular reference from rc_easyui.CheckBox.propTypes.inputId
            const isRequired: any;
        }

        namespace multiple {
            // Circular reference from rc_easyui.CheckBox.propTypes.multiple
            const isRequired: any;
        }

        namespace onChange {
            // Circular reference from rc_easyui.CheckBox.propTypes.onChange
            const isRequired: any;
        }

        namespace value {
            // Circular reference from rc_easyui.CheckBox.propTypes.value
            const isRequired: any;
        }

        namespace values {
            // Circular reference from rc_easyui.CheckBox.propTypes.values
            const isRequired: any;
        }
    }
}

export namespace ComboBox {
    namespace contextTypes {
        function fieldAdd(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldFocus(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldName(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldRemove(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace fieldAdd {
            // Circular reference from rc_easyui.ComboBox.contextTypes.fieldAdd
            const isRequired: any;
        }

        namespace fieldBlur {
            // Circular reference from rc_easyui.ComboBox.contextTypes.fieldBlur
            const isRequired: any;
        }

        namespace fieldChange {
            // Circular reference from rc_easyui.ComboBox.contextTypes.fieldChange
            const isRequired: any;
        }

        namespace fieldFocus {
            // Circular reference from rc_easyui.ComboBox.contextTypes.fieldFocus
            const isRequired: any;
        }

        namespace fieldName {
            // Circular reference from rc_easyui.ComboBox.contextTypes.fieldName
            const isRequired: any;
        }

        namespace fieldRemove {
            // Circular reference from rc_easyui.ComboBox.contextTypes.fieldRemove
            const isRequired: any;
        }

        namespace locale {
            // Circular reference from rc_easyui.ComboBox.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.ComboBox.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const arrowAlign: string;

        const arrowIconCls: string;

        const data: any[];

        const delay: number;

        const disabled: boolean;

        const editable: boolean;

        const hasDownArrow: boolean;

        const iconAlign: string;

        const invalid: boolean;

        const lazy: boolean;

        const limitToList: boolean;

        const multiline: boolean;

        const multiple: boolean;

        const pageNumber: number;

        const pageSize: number;

        const panelAlign: string;

        const readOnly: boolean;

        const rowHeight: number;

        const separator: string;

        const textField: string;

        const total: number;

        const validateOnBlur: boolean;

        const validateOnChange: boolean;

        const validateOnCreate: boolean;

        const value: any;

        const valueField: string;

        const virtualScroll: boolean;

        function filter(e: any, t: any): any;

        function onBlur(): void;

        function onChange(e: any): void;

        function onFilterChange(e: any): void;

        function onFocus(): void;

        function onSelectionChange(e: any): void;

        function textFormatter(e: any): any;
    }

    namespace propTypes {
        function addonLeft(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function addonRight(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function arrowAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function arrowIconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function className(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function data(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function delay(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function disabled(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function editable(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function filter(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function groupField(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function hasDownArrow(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputId(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function lazy(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function limitToList(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function multiline(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function multiple(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onFocus(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function pageNumber(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function pageSize(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function panelAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function panelStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function placeholder(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function readOnly(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function renderItem(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function rowHeight(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function separator(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function style(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function tabIndex(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function textField(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function textFormatter(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function total(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function value(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function valueField(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function virtualScroll(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace addonLeft {
            // Circular reference from rc_easyui.ComboBox.propTypes.addonLeft
            const isRequired: any;
        }

        namespace addonRight {
            // Circular reference from rc_easyui.ComboBox.propTypes.addonRight
            const isRequired: any;
        }

        namespace arrowAlign {
            // Circular reference from rc_easyui.ComboBox.propTypes.arrowAlign
            const isRequired: any;
        }

        namespace arrowIconCls {
            // Circular reference from rc_easyui.ComboBox.propTypes.arrowIconCls
            const isRequired: any;
        }

        namespace className {
            // Circular reference from rc_easyui.ComboBox.propTypes.className
            const isRequired: any;
        }

        namespace data {
            // Circular reference from rc_easyui.ComboBox.propTypes.data
            const isRequired: any;
        }

        namespace delay {
            // Circular reference from rc_easyui.ComboBox.propTypes.delay
            const isRequired: any;
        }

        namespace disabled {
            // Circular reference from rc_easyui.ComboBox.propTypes.disabled
            const isRequired: any;
        }

        namespace editable {
            // Circular reference from rc_easyui.ComboBox.propTypes.editable
            const isRequired: any;
        }

        namespace filter {
            // Circular reference from rc_easyui.ComboBox.propTypes.filter
            const isRequired: any;
        }

        namespace groupField {
            // Circular reference from rc_easyui.ComboBox.propTypes.groupField
            const isRequired: any;
        }

        namespace hasDownArrow {
            // Circular reference from rc_easyui.ComboBox.propTypes.hasDownArrow
            const isRequired: any;
        }

        namespace iconAlign {
            // Circular reference from rc_easyui.ComboBox.propTypes.iconAlign
            const isRequired: any;
        }

        namespace iconCls {
            // Circular reference from rc_easyui.ComboBox.propTypes.iconCls
            const isRequired: any;
        }

        namespace inputCls {
            // Circular reference from rc_easyui.ComboBox.propTypes.inputCls
            const isRequired: any;
        }

        namespace inputId {
            // Circular reference from rc_easyui.ComboBox.propTypes.inputId
            const isRequired: any;
        }

        namespace inputStyle {
            // Circular reference from rc_easyui.ComboBox.propTypes.inputStyle
            const isRequired: any;
        }

        namespace lazy {
            // Circular reference from rc_easyui.ComboBox.propTypes.lazy
            const isRequired: any;
        }

        namespace limitToList {
            // Circular reference from rc_easyui.ComboBox.propTypes.limitToList
            const isRequired: any;
        }

        namespace multiline {
            // Circular reference from rc_easyui.ComboBox.propTypes.multiline
            const isRequired: any;
        }

        namespace multiple {
            // Circular reference from rc_easyui.ComboBox.propTypes.multiple
            const isRequired: any;
        }

        namespace onBlur {
            // Circular reference from rc_easyui.ComboBox.propTypes.onBlur
            const isRequired: any;
        }

        namespace onChange {
            // Circular reference from rc_easyui.ComboBox.propTypes.onChange
            const isRequired: any;
        }

        namespace onFocus {
            // Circular reference from rc_easyui.ComboBox.propTypes.onFocus
            const isRequired: any;
        }

        namespace pageNumber {
            // Circular reference from rc_easyui.ComboBox.propTypes.pageNumber
            const isRequired: any;
        }

        namespace pageSize {
            // Circular reference from rc_easyui.ComboBox.propTypes.pageSize
            const isRequired: any;
        }

        namespace panelAlign {
            // Circular reference from rc_easyui.ComboBox.propTypes.panelAlign
            const isRequired: any;
        }

        namespace panelStyle {
            // Circular reference from rc_easyui.ComboBox.propTypes.panelStyle
            const isRequired: any;
        }

        namespace placeholder {
            // Circular reference from rc_easyui.ComboBox.propTypes.placeholder
            const isRequired: any;
        }

        namespace readOnly {
            // Circular reference from rc_easyui.ComboBox.propTypes.readOnly
            const isRequired: any;
        }

        namespace renderItem {
            // Circular reference from rc_easyui.ComboBox.propTypes.renderItem
            const isRequired: any;
        }

        namespace rowHeight {
            // Circular reference from rc_easyui.ComboBox.propTypes.rowHeight
            const isRequired: any;
        }

        namespace separator {
            // Circular reference from rc_easyui.ComboBox.propTypes.separator
            const isRequired: any;
        }

        namespace style {
            // Circular reference from rc_easyui.ComboBox.propTypes.style
            const isRequired: any;
        }

        namespace tabIndex {
            // Circular reference from rc_easyui.ComboBox.propTypes.tabIndex
            const isRequired: any;
        }

        namespace textField {
            // Circular reference from rc_easyui.ComboBox.propTypes.textField
            const isRequired: any;
        }

        namespace textFormatter {
            // Circular reference from rc_easyui.ComboBox.propTypes.textFormatter
            const isRequired: any;
        }

        namespace total {
            // Circular reference from rc_easyui.ComboBox.propTypes.total
            const isRequired: any;
        }

        namespace value {
            // Circular reference from rc_easyui.ComboBox.propTypes.value
            const isRequired: any;
        }

        namespace valueField {
            // Circular reference from rc_easyui.ComboBox.propTypes.valueField
            const isRequired: any;
        }

        namespace virtualScroll {
            // Circular reference from rc_easyui.ComboBox.propTypes.virtualScroll
            const isRequired: any;
        }
    }
}

export namespace ComboGrid {
    namespace contextTypes {
        function fieldAdd(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldFocus(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldName(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldRemove(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace fieldAdd {
            // Circular reference from rc_easyui.ComboGrid.contextTypes.fieldAdd
            const isRequired: any;
        }

        namespace fieldBlur {
            // Circular reference from rc_easyui.ComboGrid.contextTypes.fieldBlur
            const isRequired: any;
        }

        namespace fieldChange {
            // Circular reference from rc_easyui.ComboGrid.contextTypes.fieldChange
            const isRequired: any;
        }

        namespace fieldFocus {
            // Circular reference from rc_easyui.ComboGrid.contextTypes.fieldFocus
            const isRequired: any;
        }

        namespace fieldName {
            // Circular reference from rc_easyui.ComboGrid.contextTypes.fieldName
            const isRequired: any;
        }

        namespace fieldRemove {
            // Circular reference from rc_easyui.ComboGrid.contextTypes.fieldRemove
            const isRequired: any;
        }

        namespace locale {
            // Circular reference from rc_easyui.ComboGrid.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.ComboGrid.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const arrowAlign: string;

        const arrowIconCls: string;

        const data: any[];

        const delay: number;

        const disabled: boolean;

        const editable: boolean;

        const hasDownArrow: boolean;

        const iconAlign: string;

        const invalid: boolean;

        const limitToList: boolean;

        const multiline: boolean;

        const multiple: boolean;

        const panelAlign: string;

        const readOnly: boolean;

        const separator: string;

        const textField: string;

        const validateOnBlur: boolean;

        const validateOnChange: boolean;

        const validateOnCreate: boolean;

        const value: any;

        const valueField: string;

        function onBlur(): void;

        function onChange(e: any): void;

        function onFocus(): void;

        function textFormatter(e: any): any;
    }

    namespace propTypes {
        function addonLeft(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function addonRight(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function arrowAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function arrowIconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function className(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function data(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function delay(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function disabled(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function editable(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function hasDownArrow(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputId(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function multiline(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function multiple(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onFocus(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function panelAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function panelStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function placeholder(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function readOnly(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function separator(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function style(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function tabIndex(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function textFormatter(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function value(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace addonLeft {
            // Circular reference from rc_easyui.ComboGrid.propTypes.addonLeft
            const isRequired: any;
        }

        namespace addonRight {
            // Circular reference from rc_easyui.ComboGrid.propTypes.addonRight
            const isRequired: any;
        }

        namespace arrowAlign {
            // Circular reference from rc_easyui.ComboGrid.propTypes.arrowAlign
            const isRequired: any;
        }

        namespace arrowIconCls {
            // Circular reference from rc_easyui.ComboGrid.propTypes.arrowIconCls
            const isRequired: any;
        }

        namespace className {
            // Circular reference from rc_easyui.ComboGrid.propTypes.className
            const isRequired: any;
        }

        namespace data {
            // Circular reference from rc_easyui.ComboGrid.propTypes.data
            const isRequired: any;
        }

        namespace delay {
            // Circular reference from rc_easyui.ComboGrid.propTypes.delay
            const isRequired: any;
        }

        namespace disabled {
            // Circular reference from rc_easyui.ComboGrid.propTypes.disabled
            const isRequired: any;
        }

        namespace editable {
            // Circular reference from rc_easyui.ComboGrid.propTypes.editable
            const isRequired: any;
        }

        namespace hasDownArrow {
            // Circular reference from rc_easyui.ComboGrid.propTypes.hasDownArrow
            const isRequired: any;
        }

        namespace iconAlign {
            // Circular reference from rc_easyui.ComboGrid.propTypes.iconAlign
            const isRequired: any;
        }

        namespace iconCls {
            // Circular reference from rc_easyui.ComboGrid.propTypes.iconCls
            const isRequired: any;
        }

        namespace inputCls {
            // Circular reference from rc_easyui.ComboGrid.propTypes.inputCls
            const isRequired: any;
        }

        namespace inputId {
            // Circular reference from rc_easyui.ComboGrid.propTypes.inputId
            const isRequired: any;
        }

        namespace inputStyle {
            // Circular reference from rc_easyui.ComboGrid.propTypes.inputStyle
            const isRequired: any;
        }

        namespace multiline {
            // Circular reference from rc_easyui.ComboGrid.propTypes.multiline
            const isRequired: any;
        }

        namespace multiple {
            // Circular reference from rc_easyui.ComboGrid.propTypes.multiple
            const isRequired: any;
        }

        namespace onBlur {
            // Circular reference from rc_easyui.ComboGrid.propTypes.onBlur
            const isRequired: any;
        }

        namespace onChange {
            // Circular reference from rc_easyui.ComboGrid.propTypes.onChange
            const isRequired: any;
        }

        namespace onFocus {
            // Circular reference from rc_easyui.ComboGrid.propTypes.onFocus
            const isRequired: any;
        }

        namespace panelAlign {
            // Circular reference from rc_easyui.ComboGrid.propTypes.panelAlign
            const isRequired: any;
        }

        namespace panelStyle {
            // Circular reference from rc_easyui.ComboGrid.propTypes.panelStyle
            const isRequired: any;
        }

        namespace placeholder {
            // Circular reference from rc_easyui.ComboGrid.propTypes.placeholder
            const isRequired: any;
        }

        namespace readOnly {
            // Circular reference from rc_easyui.ComboGrid.propTypes.readOnly
            const isRequired: any;
        }

        namespace separator {
            // Circular reference from rc_easyui.ComboGrid.propTypes.separator
            const isRequired: any;
        }

        namespace style {
            // Circular reference from rc_easyui.ComboGrid.propTypes.style
            const isRequired: any;
        }

        namespace tabIndex {
            // Circular reference from rc_easyui.ComboGrid.propTypes.tabIndex
            const isRequired: any;
        }

        namespace textFormatter {
            // Circular reference from rc_easyui.ComboGrid.propTypes.textFormatter
            const isRequired: any;
        }

        namespace value {
            // Circular reference from rc_easyui.ComboGrid.propTypes.value
            const isRequired: any;
        }
    }
}

export namespace ComboTree {
    namespace contextTypes {
        function fieldAdd(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldFocus(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldName(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldRemove(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace fieldAdd {
            // Circular reference from rc_easyui.ComboTree.contextTypes.fieldAdd
            const isRequired: any;
        }

        namespace fieldBlur {
            // Circular reference from rc_easyui.ComboTree.contextTypes.fieldBlur
            const isRequired: any;
        }

        namespace fieldChange {
            // Circular reference from rc_easyui.ComboTree.contextTypes.fieldChange
            const isRequired: any;
        }

        namespace fieldFocus {
            // Circular reference from rc_easyui.ComboTree.contextTypes.fieldFocus
            const isRequired: any;
        }

        namespace fieldName {
            // Circular reference from rc_easyui.ComboTree.contextTypes.fieldName
            const isRequired: any;
        }

        namespace fieldRemove {
            // Circular reference from rc_easyui.ComboTree.contextTypes.fieldRemove
            const isRequired: any;
        }

        namespace locale {
            // Circular reference from rc_easyui.ComboTree.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.ComboTree.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const arrowAlign: string;

        const arrowIconCls: string;

        const data: any[];

        const delay: number;

        const disabled: boolean;

        const editable: boolean;

        const hasDownArrow: boolean;

        const iconAlign: string;

        const invalid: boolean;

        const limitToList: boolean;

        const multiline: boolean;

        const multiple: boolean;

        const panelAlign: string;

        const readOnly: boolean;

        const separator: string;

        const textField: string;

        const validateOnBlur: boolean;

        const validateOnChange: boolean;

        const validateOnCreate: boolean;

        const value: any;

        const valueField: string;

        function onBlur(): void;

        function onChange(e: any): void;

        function onFocus(): void;

        function textFormatter(e: any): any;
    }

    namespace propTypes {
        function addonLeft(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function addonRight(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function arrowAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function arrowIconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function className(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function data(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function delay(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function disabled(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function editable(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function hasDownArrow(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputId(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function multiline(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function multiple(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onFocus(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function panelAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function panelStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function placeholder(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function readOnly(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function separator(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function style(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function tabIndex(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function textFormatter(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function value(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace addonLeft {
            // Circular reference from rc_easyui.ComboTree.propTypes.addonLeft
            const isRequired: any;
        }

        namespace addonRight {
            // Circular reference from rc_easyui.ComboTree.propTypes.addonRight
            const isRequired: any;
        }

        namespace arrowAlign {
            // Circular reference from rc_easyui.ComboTree.propTypes.arrowAlign
            const isRequired: any;
        }

        namespace arrowIconCls {
            // Circular reference from rc_easyui.ComboTree.propTypes.arrowIconCls
            const isRequired: any;
        }

        namespace className {
            // Circular reference from rc_easyui.ComboTree.propTypes.className
            const isRequired: any;
        }

        namespace data {
            // Circular reference from rc_easyui.ComboTree.propTypes.data
            const isRequired: any;
        }

        namespace delay {
            // Circular reference from rc_easyui.ComboTree.propTypes.delay
            const isRequired: any;
        }

        namespace disabled {
            // Circular reference from rc_easyui.ComboTree.propTypes.disabled
            const isRequired: any;
        }

        namespace editable {
            // Circular reference from rc_easyui.ComboTree.propTypes.editable
            const isRequired: any;
        }

        namespace hasDownArrow {
            // Circular reference from rc_easyui.ComboTree.propTypes.hasDownArrow
            const isRequired: any;
        }

        namespace iconAlign {
            // Circular reference from rc_easyui.ComboTree.propTypes.iconAlign
            const isRequired: any;
        }

        namespace iconCls {
            // Circular reference from rc_easyui.ComboTree.propTypes.iconCls
            const isRequired: any;
        }

        namespace inputCls {
            // Circular reference from rc_easyui.ComboTree.propTypes.inputCls
            const isRequired: any;
        }

        namespace inputId {
            // Circular reference from rc_easyui.ComboTree.propTypes.inputId
            const isRequired: any;
        }

        namespace inputStyle {
            // Circular reference from rc_easyui.ComboTree.propTypes.inputStyle
            const isRequired: any;
        }

        namespace multiline {
            // Circular reference from rc_easyui.ComboTree.propTypes.multiline
            const isRequired: any;
        }

        namespace multiple {
            // Circular reference from rc_easyui.ComboTree.propTypes.multiple
            const isRequired: any;
        }

        namespace onBlur {
            // Circular reference from rc_easyui.ComboTree.propTypes.onBlur
            const isRequired: any;
        }

        namespace onChange {
            // Circular reference from rc_easyui.ComboTree.propTypes.onChange
            const isRequired: any;
        }

        namespace onFocus {
            // Circular reference from rc_easyui.ComboTree.propTypes.onFocus
            const isRequired: any;
        }

        namespace panelAlign {
            // Circular reference from rc_easyui.ComboTree.propTypes.panelAlign
            const isRequired: any;
        }

        namespace panelStyle {
            // Circular reference from rc_easyui.ComboTree.propTypes.panelStyle
            const isRequired: any;
        }

        namespace placeholder {
            // Circular reference from rc_easyui.ComboTree.propTypes.placeholder
            const isRequired: any;
        }

        namespace readOnly {
            // Circular reference from rc_easyui.ComboTree.propTypes.readOnly
            const isRequired: any;
        }

        namespace separator {
            // Circular reference from rc_easyui.ComboTree.propTypes.separator
            const isRequired: any;
        }

        namespace style {
            // Circular reference from rc_easyui.ComboTree.propTypes.style
            const isRequired: any;
        }

        namespace tabIndex {
            // Circular reference from rc_easyui.ComboTree.propTypes.tabIndex
            const isRequired: any;
        }

        namespace textFormatter {
            // Circular reference from rc_easyui.ComboTree.propTypes.textFormatter
            const isRequired: any;
        }

        namespace value {
            // Circular reference from rc_easyui.ComboTree.propTypes.value
            const isRequired: any;
        }
    }
}

export namespace DataGrid {
    namespace contextTypes {
        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace locale {
            // Circular reference from rc_easyui.DataGrid.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.DataGrid.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const border: boolean;

        const clickToEdit: boolean;

        const columnMoving: boolean;

        const columnResizing: boolean;

        const data: any[];

        const dblclickToEdit: boolean;

        const defaultLoadMsg: string;

        const expanderWidth: number;

        const filterBtnPosition: string;

        const filterDelay: number;

        const filterMatchingType: string;

        const filterOperators: {
            beginwith: {
                isMatch: any;
                text: string;
            };
            contains: {
                isMatch: any;
                text: string;
            };
            endwith: {
                isMatch: any;
                text: string;
            };
            equal: {
                isMatch: any;
                text: string;
            };
            greater: {
                isMatch: any;
                text: string;
            };
            greaterorequal: {
                isMatch: any;
                text: string;
            };
            less: {
                isMatch: any;
                text: string;
            };
            lessorequal: {
                isMatch: any;
                text: string;
            };
            nofilter: {
                isMatch: any;
                text: string;
            };
            notequal: {
                isMatch: any;
                text: string;
            };        };

        const filterPosition: string;

        const filterRules: any[];

        const filterable: boolean;

        const footerData: any[];

        const frozenAlign: string;

        const frozenWidth: string;

        const lazy: boolean;

        const loading: boolean;

        const multiSort: boolean;

        const pageNumber: number;

        const pagePosition: string;

        const pageSize: number;

        const pagination: boolean;

        const rowHeight: number;

        const showFooter: boolean;

        const showHeader: boolean;

        const sorts: any[];

        const striped: boolean;

        const total: number;

        const virtualScroll: boolean;

        function onCellClick(): void;

        function onCellContextMenu(e: any): void;

        function onCellDblClick(): void;

        function onCellSelect(): void;

        function onCellUnselect(): void;

        function onColumnMove(e: any): void;

        function onColumnResize(e: any): void;

        function onEditBegin(e: any): void;

        function onEditCancel(e: any): void;

        function onEditEnd(e: any): void;

        function onEditValidate(e: any): void;

        function onFilterChange(): void;

        function onGroupCollapse(e: any): void;

        function onGroupExpand(e: any): void;

        function onPageChange(): void;

        function onRowClick(e: any): void;

        function onRowCollapse(e: any): void;

        function onRowContextMenu(e: any): void;

        function onRowDblClick(e: any): void;

        function onRowExpand(e: any): void;

        function onRowSelect(): void;

        function onRowUnselect(): void;

        function onSelectionChange(): void;

        function onSortChange(): void;
    }

    namespace propTypes {
        function border(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function clickToEdit(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function columnMoving(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function data(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function dblclickToEdit(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function editMode(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function expanderWidth(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function filterBtnPosition(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function filterDelay(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function filterMatchingType(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function filterOperators(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function filterPosition(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function filterRules(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function filterable(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function footerData(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function frozenAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function frozenWidth(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function groupField(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function idField(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function lazy(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function loadMsg(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function loading(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function multiSort(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function pageNumber(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function pageOptions(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function pagePosition(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function pageSize(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function pagination(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function renderDetail(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function renderGroup(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function rowCss(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function rowHeight(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function selection(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function selectionMode(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function showFooter(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function showHeader(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function sorts(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function striped(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function total(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function virtualScroll(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace border {
            // Circular reference from rc_easyui.DataGrid.propTypes.border
            const isRequired: any;
        }

        namespace clickToEdit {
            // Circular reference from rc_easyui.DataGrid.propTypes.clickToEdit
            const isRequired: any;
        }

        namespace columnMoving {
            // Circular reference from rc_easyui.DataGrid.propTypes.columnMoving
            const isRequired: any;
        }

        namespace data {
            // Circular reference from rc_easyui.DataGrid.propTypes.data
            const isRequired: any;
        }

        namespace dblclickToEdit {
            // Circular reference from rc_easyui.DataGrid.propTypes.dblclickToEdit
            const isRequired: any;
        }

        namespace editMode {
            // Circular reference from rc_easyui.DataGrid.propTypes.editMode
            const isRequired: any;
        }

        namespace expanderWidth {
            // Circular reference from rc_easyui.DataGrid.propTypes.expanderWidth
            const isRequired: any;
        }

        namespace filterBtnPosition {
            // Circular reference from rc_easyui.DataGrid.propTypes.filterBtnPosition
            const isRequired: any;
        }

        namespace filterDelay {
            // Circular reference from rc_easyui.DataGrid.propTypes.filterDelay
            const isRequired: any;
        }

        namespace filterMatchingType {
            // Circular reference from rc_easyui.DataGrid.propTypes.filterMatchingType
            const isRequired: any;
        }

        namespace filterOperators {
            // Circular reference from rc_easyui.DataGrid.propTypes.filterOperators
            const isRequired: any;
        }

        namespace filterPosition {
            // Circular reference from rc_easyui.DataGrid.propTypes.filterPosition
            const isRequired: any;
        }

        namespace filterRules {
            // Circular reference from rc_easyui.DataGrid.propTypes.filterRules
            const isRequired: any;
        }

        namespace filterable {
            // Circular reference from rc_easyui.DataGrid.propTypes.filterable
            const isRequired: any;
        }

        namespace footerData {
            // Circular reference from rc_easyui.DataGrid.propTypes.footerData
            const isRequired: any;
        }

        namespace frozenAlign {
            // Circular reference from rc_easyui.DataGrid.propTypes.frozenAlign
            const isRequired: any;
        }

        namespace frozenWidth {
            // Circular reference from rc_easyui.DataGrid.propTypes.frozenWidth
            const isRequired: any;
        }

        namespace groupField {
            // Circular reference from rc_easyui.DataGrid.propTypes.groupField
            const isRequired: any;
        }

        namespace idField {
            // Circular reference from rc_easyui.DataGrid.propTypes.idField
            const isRequired: any;
        }

        namespace lazy {
            // Circular reference from rc_easyui.DataGrid.propTypes.lazy
            const isRequired: any;
        }

        namespace loadMsg {
            // Circular reference from rc_easyui.DataGrid.propTypes.loadMsg
            const isRequired: any;
        }

        namespace loading {
            // Circular reference from rc_easyui.DataGrid.propTypes.loading
            const isRequired: any;
        }

        namespace multiSort {
            // Circular reference from rc_easyui.DataGrid.propTypes.multiSort
            const isRequired: any;
        }

        namespace pageNumber {
            // Circular reference from rc_easyui.DataGrid.propTypes.pageNumber
            const isRequired: any;
        }

        namespace pageOptions {
            // Circular reference from rc_easyui.DataGrid.propTypes.pageOptions
            const isRequired: any;
        }

        namespace pagePosition {
            // Circular reference from rc_easyui.DataGrid.propTypes.pagePosition
            const isRequired: any;
        }

        namespace pageSize {
            // Circular reference from rc_easyui.DataGrid.propTypes.pageSize
            const isRequired: any;
        }

        namespace pagination {
            // Circular reference from rc_easyui.DataGrid.propTypes.pagination
            const isRequired: any;
        }

        namespace renderDetail {
            // Circular reference from rc_easyui.DataGrid.propTypes.renderDetail
            const isRequired: any;
        }

        namespace renderGroup {
            // Circular reference from rc_easyui.DataGrid.propTypes.renderGroup
            const isRequired: any;
        }

        namespace rowCss {
            // Circular reference from rc_easyui.DataGrid.propTypes.rowCss
            const isRequired: any;
        }

        namespace rowHeight {
            // Circular reference from rc_easyui.DataGrid.propTypes.rowHeight
            const isRequired: any;
        }

        namespace selection {
            // Circular reference from rc_easyui.DataGrid.propTypes.selection
            const isRequired: any;
        }

        namespace selectionMode {
            // Circular reference from rc_easyui.DataGrid.propTypes.selectionMode
            const isRequired: any;
        }

        namespace showFooter {
            // Circular reference from rc_easyui.DataGrid.propTypes.showFooter
            const isRequired: any;
        }

        namespace showHeader {
            // Circular reference from rc_easyui.DataGrid.propTypes.showHeader
            const isRequired: any;
        }

        namespace sorts {
            // Circular reference from rc_easyui.DataGrid.propTypes.sorts
            const isRequired: any;
        }

        namespace striped {
            // Circular reference from rc_easyui.DataGrid.propTypes.striped
            const isRequired: any;
        }

        namespace total {
            // Circular reference from rc_easyui.DataGrid.propTypes.total
            const isRequired: any;
        }

        namespace virtualScroll {
            // Circular reference from rc_easyui.DataGrid.propTypes.virtualScroll
            const isRequired: any;
        }
    }
}

export namespace DataList {
    namespace contextTypes {
        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace locale {
            // Circular reference from rc_easyui.DataList.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.DataList.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const border: boolean;

        const data: any[];

        const defaultLoadMsg: string;

        const filterBtnPosition: string;

        const filterDelay: number;

        const filterMatchingType: string;

        const filterOperators: {
            beginwith: {
                isMatch: any;
                text: string;
            };
            contains: {
                isMatch: any;
                text: string;
            };
            endwith: {
                isMatch: any;
                text: string;
            };
            equal: {
                isMatch: any;
                text: string;
            };
            greater: {
                isMatch: any;
                text: string;
            };
            greaterorequal: {
                isMatch: any;
                text: string;
            };
            less: {
                isMatch: any;
                text: string;
            };
            lessorequal: {
                isMatch: any;
                text: string;
            };
            nofilter: {
                isMatch: any;
                text: string;
            };
            notequal: {
                isMatch: any;
                text: string;
            };        };

        const filterPosition: string;

        const filterRules: any[];

        const filterable: boolean;

        const hoverCls: string;

        const lazy: boolean;

        const loading: boolean;

        const pageNumber: number;

        const pagePosition: string;

        const pageSize: number;

        const pagination: boolean;

        const rowHeight: number;

        const selectedCls: string;

        const total: number;

        const virtualScroll: boolean;

        function onCellClick(): void;

        function onCellDblClick(): void;

        function onCellSelect(): void;

        function onCellUnselect(): void;

        function onFilterChange(): void;

        function onListScroll(e: any): void;

        function onPageChange(): void;

        function onRowClick(e: any): void;

        function onRowDblClick(e: any): void;

        function onRowSelect(): void;

        function onRowUnselect(): void;

        function onSelectionChange(): void;
    }

    namespace propTypes {
        function border(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function data(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function filterBtnPosition(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function filterDelay(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function filterMatchingType(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function filterOperators(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function filterPosition(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function filterRules(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function filterable(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function hoverCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function idField(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function itemCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function itemStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function lazy(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function loadMsg(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function loading(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onListScroll(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function pageNumber(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function pageOptions(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function pagePosition(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function pageSize(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function pagination(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function renderItem(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function rowHeight(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function scrollPosition(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function selectedCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function selection(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function selectionMode(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function total(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function virtualScroll(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace border {
            // Circular reference from rc_easyui.DataList.propTypes.border
            const isRequired: any;
        }

        namespace data {
            // Circular reference from rc_easyui.DataList.propTypes.data
            const isRequired: any;
        }

        namespace filterBtnPosition {
            // Circular reference from rc_easyui.DataList.propTypes.filterBtnPosition
            const isRequired: any;
        }

        namespace filterDelay {
            // Circular reference from rc_easyui.DataList.propTypes.filterDelay
            const isRequired: any;
        }

        namespace filterMatchingType {
            // Circular reference from rc_easyui.DataList.propTypes.filterMatchingType
            const isRequired: any;
        }

        namespace filterOperators {
            // Circular reference from rc_easyui.DataList.propTypes.filterOperators
            const isRequired: any;
        }

        namespace filterPosition {
            // Circular reference from rc_easyui.DataList.propTypes.filterPosition
            const isRequired: any;
        }

        namespace filterRules {
            // Circular reference from rc_easyui.DataList.propTypes.filterRules
            const isRequired: any;
        }

        namespace filterable {
            // Circular reference from rc_easyui.DataList.propTypes.filterable
            const isRequired: any;
        }

        namespace hoverCls {
            // Circular reference from rc_easyui.DataList.propTypes.hoverCls
            const isRequired: any;
        }

        namespace idField {
            // Circular reference from rc_easyui.DataList.propTypes.idField
            const isRequired: any;
        }

        namespace itemCls {
            // Circular reference from rc_easyui.DataList.propTypes.itemCls
            const isRequired: any;
        }

        namespace itemStyle {
            // Circular reference from rc_easyui.DataList.propTypes.itemStyle
            const isRequired: any;
        }

        namespace lazy {
            // Circular reference from rc_easyui.DataList.propTypes.lazy
            const isRequired: any;
        }

        namespace loadMsg {
            // Circular reference from rc_easyui.DataList.propTypes.loadMsg
            const isRequired: any;
        }

        namespace loading {
            // Circular reference from rc_easyui.DataList.propTypes.loading
            const isRequired: any;
        }

        namespace onListScroll {
            // Circular reference from rc_easyui.DataList.propTypes.onListScroll
            const isRequired: any;
        }

        namespace pageNumber {
            // Circular reference from rc_easyui.DataList.propTypes.pageNumber
            const isRequired: any;
        }

        namespace pageOptions {
            // Circular reference from rc_easyui.DataList.propTypes.pageOptions
            const isRequired: any;
        }

        namespace pagePosition {
            // Circular reference from rc_easyui.DataList.propTypes.pagePosition
            const isRequired: any;
        }

        namespace pageSize {
            // Circular reference from rc_easyui.DataList.propTypes.pageSize
            const isRequired: any;
        }

        namespace pagination {
            // Circular reference from rc_easyui.DataList.propTypes.pagination
            const isRequired: any;
        }

        namespace renderItem {
            // Circular reference from rc_easyui.DataList.propTypes.renderItem
            const isRequired: any;
        }

        namespace rowHeight {
            // Circular reference from rc_easyui.DataList.propTypes.rowHeight
            const isRequired: any;
        }

        namespace scrollPosition {
            // Circular reference from rc_easyui.DataList.propTypes.scrollPosition
            const isRequired: any;
        }

        namespace selectedCls {
            // Circular reference from rc_easyui.DataList.propTypes.selectedCls
            const isRequired: any;
        }

        namespace selection {
            // Circular reference from rc_easyui.DataList.propTypes.selection
            const isRequired: any;
        }

        namespace selectionMode {
            // Circular reference from rc_easyui.DataList.propTypes.selectionMode
            const isRequired: any;
        }

        namespace total {
            // Circular reference from rc_easyui.DataList.propTypes.total
            const isRequired: any;
        }

        namespace virtualScroll {
            // Circular reference from rc_easyui.DataList.propTypes.virtualScroll
            const isRequired: any;
        }
    }
}

export namespace DateBox {
    namespace contextTypes {
        function fieldAdd(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldFocus(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldName(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldRemove(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace fieldAdd {
            // Circular reference from rc_easyui.DateBox.contextTypes.fieldAdd
            const isRequired: any;
        }

        namespace fieldBlur {
            // Circular reference from rc_easyui.DateBox.contextTypes.fieldBlur
            const isRequired: any;
        }

        namespace fieldChange {
            // Circular reference from rc_easyui.DateBox.contextTypes.fieldChange
            const isRequired: any;
        }

        namespace fieldFocus {
            // Circular reference from rc_easyui.DateBox.contextTypes.fieldFocus
            const isRequired: any;
        }

        namespace fieldName {
            // Circular reference from rc_easyui.DateBox.contextTypes.fieldName
            const isRequired: any;
        }

        namespace fieldRemove {
            // Circular reference from rc_easyui.DateBox.contextTypes.fieldRemove
            const isRequired: any;
        }

        namespace locale {
            // Circular reference from rc_easyui.DateBox.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.DateBox.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const arrowAlign: string;

        const arrowIconCls: string;

        const defaultCloseText: string;

        const defaultCurrentText: string;

        const defaultOkText: string;

        const delay: number;

        const disabled: boolean;

        const editable: boolean;

        const format: string;

        const hasDownArrow: boolean;

        const iconAlign: string;

        const info: any;

        const invalid: boolean;

        const multiline: boolean;

        const multiple: boolean;

        const panelAlign: string;

        const readOnly: boolean;

        const separator: string;

        const showInfo: boolean;

        const validateOnBlur: boolean;

        const validateOnChange: boolean;

        const validateOnCreate: boolean;

        const value: any;

        function onBlur(): void;

        function onChange(e: any): void;

        function onFocus(): void;

        function textFormatter(e: any): any;
    }

    namespace propTypes {
        function addonLeft(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function addonRight(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function arrowAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function arrowIconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function calendarOptions(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function className(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function closeText(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function currentText(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function delay(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function disabled(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function editable(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function format(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function hasDownArrow(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function info(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputId(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function multiline(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function multiple(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function okText(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onFocus(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function panelAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function panelStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function placeholder(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function readOnly(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function separator(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function showInfo(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function style(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function tabIndex(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function textFormatter(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function value(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace addonLeft {
            // Circular reference from rc_easyui.DateBox.propTypes.addonLeft
            const isRequired: any;
        }

        namespace addonRight {
            // Circular reference from rc_easyui.DateBox.propTypes.addonRight
            const isRequired: any;
        }

        namespace arrowAlign {
            // Circular reference from rc_easyui.DateBox.propTypes.arrowAlign
            const isRequired: any;
        }

        namespace arrowIconCls {
            // Circular reference from rc_easyui.DateBox.propTypes.arrowIconCls
            const isRequired: any;
        }

        namespace calendarOptions {
            // Circular reference from rc_easyui.DateBox.propTypes.calendarOptions
            const isRequired: any;
        }

        namespace className {
            // Circular reference from rc_easyui.DateBox.propTypes.className
            const isRequired: any;
        }

        namespace closeText {
            // Circular reference from rc_easyui.DateBox.propTypes.closeText
            const isRequired: any;
        }

        namespace currentText {
            // Circular reference from rc_easyui.DateBox.propTypes.currentText
            const isRequired: any;
        }

        namespace delay {
            // Circular reference from rc_easyui.DateBox.propTypes.delay
            const isRequired: any;
        }

        namespace disabled {
            // Circular reference from rc_easyui.DateBox.propTypes.disabled
            const isRequired: any;
        }

        namespace editable {
            // Circular reference from rc_easyui.DateBox.propTypes.editable
            const isRequired: any;
        }

        namespace format {
            // Circular reference from rc_easyui.DateBox.propTypes.format
            const isRequired: any;
        }

        namespace hasDownArrow {
            // Circular reference from rc_easyui.DateBox.propTypes.hasDownArrow
            const isRequired: any;
        }

        namespace iconAlign {
            // Circular reference from rc_easyui.DateBox.propTypes.iconAlign
            const isRequired: any;
        }

        namespace iconCls {
            // Circular reference from rc_easyui.DateBox.propTypes.iconCls
            const isRequired: any;
        }

        namespace info {
            // Circular reference from rc_easyui.DateBox.propTypes.info
            const isRequired: any;
        }

        namespace inputCls {
            // Circular reference from rc_easyui.DateBox.propTypes.inputCls
            const isRequired: any;
        }

        namespace inputId {
            // Circular reference from rc_easyui.DateBox.propTypes.inputId
            const isRequired: any;
        }

        namespace inputStyle {
            // Circular reference from rc_easyui.DateBox.propTypes.inputStyle
            const isRequired: any;
        }

        namespace multiline {
            // Circular reference from rc_easyui.DateBox.propTypes.multiline
            const isRequired: any;
        }

        namespace multiple {
            // Circular reference from rc_easyui.DateBox.propTypes.multiple
            const isRequired: any;
        }

        namespace okText {
            // Circular reference from rc_easyui.DateBox.propTypes.okText
            const isRequired: any;
        }

        namespace onBlur {
            // Circular reference from rc_easyui.DateBox.propTypes.onBlur
            const isRequired: any;
        }

        namespace onChange {
            // Circular reference from rc_easyui.DateBox.propTypes.onChange
            const isRequired: any;
        }

        namespace onFocus {
            // Circular reference from rc_easyui.DateBox.propTypes.onFocus
            const isRequired: any;
        }

        namespace panelAlign {
            // Circular reference from rc_easyui.DateBox.propTypes.panelAlign
            const isRequired: any;
        }

        namespace panelStyle {
            // Circular reference from rc_easyui.DateBox.propTypes.panelStyle
            const isRequired: any;
        }

        namespace placeholder {
            // Circular reference from rc_easyui.DateBox.propTypes.placeholder
            const isRequired: any;
        }

        namespace readOnly {
            // Circular reference from rc_easyui.DateBox.propTypes.readOnly
            const isRequired: any;
        }

        namespace separator {
            // Circular reference from rc_easyui.DateBox.propTypes.separator
            const isRequired: any;
        }

        namespace showInfo {
            // Circular reference from rc_easyui.DateBox.propTypes.showInfo
            const isRequired: any;
        }

        namespace style {
            // Circular reference from rc_easyui.DateBox.propTypes.style
            const isRequired: any;
        }

        namespace tabIndex {
            // Circular reference from rc_easyui.DateBox.propTypes.tabIndex
            const isRequired: any;
        }

        namespace textFormatter {
            // Circular reference from rc_easyui.DateBox.propTypes.textFormatter
            const isRequired: any;
        }

        namespace value {
            // Circular reference from rc_easyui.DateBox.propTypes.value
            const isRequired: any;
        }
    }
}

export namespace DateTimeSpinner {
    namespace contextTypes {
        function fieldAdd(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldFocus(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldName(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldRemove(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace fieldAdd {
            // Circular reference from rc_easyui.DateTimeSpinner.contextTypes.fieldAdd
            const isRequired: any;
        }

        namespace fieldBlur {
            // Circular reference from rc_easyui.DateTimeSpinner.contextTypes.fieldBlur
            const isRequired: any;
        }

        namespace fieldChange {
            // Circular reference from rc_easyui.DateTimeSpinner.contextTypes.fieldChange
            const isRequired: any;
        }

        namespace fieldFocus {
            // Circular reference from rc_easyui.DateTimeSpinner.contextTypes.fieldFocus
            const isRequired: any;
        }

        namespace fieldName {
            // Circular reference from rc_easyui.DateTimeSpinner.contextTypes.fieldName
            const isRequired: any;
        }

        namespace fieldRemove {
            // Circular reference from rc_easyui.DateTimeSpinner.contextTypes.fieldRemove
            const isRequired: any;
        }

        namespace locale {
            // Circular reference from rc_easyui.DateTimeSpinner.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.DateTimeSpinner.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const ampm: string[];

        const disabled: boolean;

        const editable: boolean;

        const format: string;

        const highlight: number;

        const iconAlign: string;

        const increment: number;

        const invalid: boolean;

        const multiline: boolean;

        const readOnly: boolean;

        const reversed: boolean;

        const selections: Array<(number[])>;

        const spinAlign: string;

        const spinners: boolean;

        const validateOnBlur: boolean;

        const validateOnChange: boolean;

        const validateOnCreate: boolean;

        const value: any;

        function onBlur(): void;

        function onChange(e: any): void;

        function onFocus(): void;

        function textFormatter(e: any): any;
    }

    namespace propTypes {
        function addonLeft(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function addonRight(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function ampm(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function className(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function disabled(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function editable(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function format(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function highlight(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function increment(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputId(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function max(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function min(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function multiline(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onFocus(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function placeholder(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function readOnly(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function reversed(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function selections(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function spinAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function spinners(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function style(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function tabIndex(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function textFormatter(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function value(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace addonLeft {
            // Circular reference from rc_easyui.DateTimeSpinner.propTypes.addonLeft
            const isRequired: any;
        }

        namespace addonRight {
            // Circular reference from rc_easyui.DateTimeSpinner.propTypes.addonRight
            const isRequired: any;
        }

        namespace ampm {
            // Circular reference from rc_easyui.DateTimeSpinner.propTypes.ampm
            const isRequired: any;
        }

        namespace className {
            // Circular reference from rc_easyui.DateTimeSpinner.propTypes.className
            const isRequired: any;
        }

        namespace disabled {
            // Circular reference from rc_easyui.DateTimeSpinner.propTypes.disabled
            const isRequired: any;
        }

        namespace editable {
            // Circular reference from rc_easyui.DateTimeSpinner.propTypes.editable
            const isRequired: any;
        }

        namespace format {
            // Circular reference from rc_easyui.DateTimeSpinner.propTypes.format
            const isRequired: any;
        }

        namespace highlight {
            // Circular reference from rc_easyui.DateTimeSpinner.propTypes.highlight
            const isRequired: any;
        }

        namespace iconAlign {
            // Circular reference from rc_easyui.DateTimeSpinner.propTypes.iconAlign
            const isRequired: any;
        }

        namespace iconCls {
            // Circular reference from rc_easyui.DateTimeSpinner.propTypes.iconCls
            const isRequired: any;
        }

        namespace increment {
            // Circular reference from rc_easyui.DateTimeSpinner.propTypes.increment
            const isRequired: any;
        }

        namespace inputCls {
            // Circular reference from rc_easyui.DateTimeSpinner.propTypes.inputCls
            const isRequired: any;
        }

        namespace inputId {
            // Circular reference from rc_easyui.DateTimeSpinner.propTypes.inputId
            const isRequired: any;
        }

        namespace inputStyle {
            // Circular reference from rc_easyui.DateTimeSpinner.propTypes.inputStyle
            const isRequired: any;
        }

        namespace max {
            // Circular reference from rc_easyui.DateTimeSpinner.propTypes.max
            const isRequired: any;
        }

        namespace min {
            // Circular reference from rc_easyui.DateTimeSpinner.propTypes.min
            const isRequired: any;
        }

        namespace multiline {
            // Circular reference from rc_easyui.DateTimeSpinner.propTypes.multiline
            const isRequired: any;
        }

        namespace onBlur {
            // Circular reference from rc_easyui.DateTimeSpinner.propTypes.onBlur
            const isRequired: any;
        }

        namespace onChange {
            // Circular reference from rc_easyui.DateTimeSpinner.propTypes.onChange
            const isRequired: any;
        }

        namespace onFocus {
            // Circular reference from rc_easyui.DateTimeSpinner.propTypes.onFocus
            const isRequired: any;
        }

        namespace placeholder {
            // Circular reference from rc_easyui.DateTimeSpinner.propTypes.placeholder
            const isRequired: any;
        }

        namespace readOnly {
            // Circular reference from rc_easyui.DateTimeSpinner.propTypes.readOnly
            const isRequired: any;
        }

        namespace reversed {
            // Circular reference from rc_easyui.DateTimeSpinner.propTypes.reversed
            const isRequired: any;
        }

        namespace selections {
            // Circular reference from rc_easyui.DateTimeSpinner.propTypes.selections
            const isRequired: any;
        }

        namespace spinAlign {
            // Circular reference from rc_easyui.DateTimeSpinner.propTypes.spinAlign
            const isRequired: any;
        }

        namespace spinners {
            // Circular reference from rc_easyui.DateTimeSpinner.propTypes.spinners
            const isRequired: any;
        }

        namespace style {
            // Circular reference from rc_easyui.DateTimeSpinner.propTypes.style
            const isRequired: any;
        }

        namespace tabIndex {
            // Circular reference from rc_easyui.DateTimeSpinner.propTypes.tabIndex
            const isRequired: any;
        }

        namespace textFormatter {
            // Circular reference from rc_easyui.DateTimeSpinner.propTypes.textFormatter
            const isRequired: any;
        }

        namespace value {
            // Circular reference from rc_easyui.DateTimeSpinner.propTypes.value
            const isRequired: any;
        }
    }
}

export namespace Dialog {
    namespace contextTypes {
        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace locale {
            // Circular reference from rc_easyui.Dialog.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.Dialog.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const animate: boolean;

        const autoCenter: boolean;

        const border: boolean;

        const borderType: string;

        const closable: boolean;

        const closeIconCls: string;

        const closed: boolean;

        const collapseIconCls: string;

        const collapsed: boolean;

        const collapsible: boolean;

        const draggable: boolean;

        const expandIconCls: string;

        const modal: boolean;

        const resizable: boolean;

        const showFooter: boolean;

        const showHeader: boolean;

        function onClose(): void;

        function onCollapse(): void;

        function onExpand(): void;

        function onMove(e: any): void;

        function onOpen(): void;

        function onResize(e: any): void;
    }

    namespace propTypes {
        function animate(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function autoCenter(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function bodyCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function bodyStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function border(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function borderType(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function closable(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function closeIconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function closed(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function collapseIconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function collapsed(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function collapsible(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function draggable(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function expandIconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function footer(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function footerCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function footerStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function header(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function headerCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function headerStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function modal(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onCollapse(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onExpand(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function resizable(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function showFooter(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function showHeader(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function title(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace animate {
            // Circular reference from rc_easyui.Dialog.propTypes.animate
            const isRequired: any;
        }

        namespace autoCenter {
            // Circular reference from rc_easyui.Dialog.propTypes.autoCenter
            const isRequired: any;
        }

        namespace bodyCls {
            // Circular reference from rc_easyui.Dialog.propTypes.bodyCls
            const isRequired: any;
        }

        namespace bodyStyle {
            // Circular reference from rc_easyui.Dialog.propTypes.bodyStyle
            const isRequired: any;
        }

        namespace border {
            // Circular reference from rc_easyui.Dialog.propTypes.border
            const isRequired: any;
        }

        namespace borderType {
            // Circular reference from rc_easyui.Dialog.propTypes.borderType
            const isRequired: any;
        }

        namespace closable {
            // Circular reference from rc_easyui.Dialog.propTypes.closable
            const isRequired: any;
        }

        namespace closeIconCls {
            // Circular reference from rc_easyui.Dialog.propTypes.closeIconCls
            const isRequired: any;
        }

        namespace closed {
            // Circular reference from rc_easyui.Dialog.propTypes.closed
            const isRequired: any;
        }

        namespace collapseIconCls {
            // Circular reference from rc_easyui.Dialog.propTypes.collapseIconCls
            const isRequired: any;
        }

        namespace collapsed {
            // Circular reference from rc_easyui.Dialog.propTypes.collapsed
            const isRequired: any;
        }

        namespace collapsible {
            // Circular reference from rc_easyui.Dialog.propTypes.collapsible
            const isRequired: any;
        }

        namespace draggable {
            // Circular reference from rc_easyui.Dialog.propTypes.draggable
            const isRequired: any;
        }

        namespace expandIconCls {
            // Circular reference from rc_easyui.Dialog.propTypes.expandIconCls
            const isRequired: any;
        }

        namespace footer {
            // Circular reference from rc_easyui.Dialog.propTypes.footer
            const isRequired: any;
        }

        namespace footerCls {
            // Circular reference from rc_easyui.Dialog.propTypes.footerCls
            const isRequired: any;
        }

        namespace footerStyle {
            // Circular reference from rc_easyui.Dialog.propTypes.footerStyle
            const isRequired: any;
        }

        namespace header {
            // Circular reference from rc_easyui.Dialog.propTypes.header
            const isRequired: any;
        }

        namespace headerCls {
            // Circular reference from rc_easyui.Dialog.propTypes.headerCls
            const isRequired: any;
        }

        namespace headerStyle {
            // Circular reference from rc_easyui.Dialog.propTypes.headerStyle
            const isRequired: any;
        }

        namespace iconCls {
            // Circular reference from rc_easyui.Dialog.propTypes.iconCls
            const isRequired: any;
        }

        namespace modal {
            // Circular reference from rc_easyui.Dialog.propTypes.modal
            const isRequired: any;
        }

        namespace onCollapse {
            // Circular reference from rc_easyui.Dialog.propTypes.onCollapse
            const isRequired: any;
        }

        namespace onExpand {
            // Circular reference from rc_easyui.Dialog.propTypes.onExpand
            const isRequired: any;
        }

        namespace resizable {
            // Circular reference from rc_easyui.Dialog.propTypes.resizable
            const isRequired: any;
        }

        namespace showFooter {
            // Circular reference from rc_easyui.Dialog.propTypes.showFooter
            const isRequired: any;
        }

        namespace showHeader {
            // Circular reference from rc_easyui.Dialog.propTypes.showHeader
            const isRequired: any;
        }

        namespace title {
            // Circular reference from rc_easyui.Dialog.propTypes.title
            const isRequired: any;
        }
    }
}

export namespace Draggable {
    namespace contextTypes {
        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace locale {
            // Circular reference from rc_easyui.Draggable.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.Draggable.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const cursor: string;

        const delay: number;

        const disabled: boolean;

        const edge: number;

        const revert: boolean;

        function onDrag(e: any): void;

        function onDragEnd(e: any): void;

        function onDragStart(e: any): void;
    }

    namespace propTypes {
        function axis(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function cursor(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function delay(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function deltaX(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function deltaY(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function disabled(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function edge(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function handle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onDrag(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onDragEnd(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onDragStart(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function proxy(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function proxyCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function proxyStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function revert(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function scope(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace axis {
            // Circular reference from rc_easyui.Draggable.propTypes.axis
            const isRequired: any;
        }

        namespace cursor {
            // Circular reference from rc_easyui.Draggable.propTypes.cursor
            const isRequired: any;
        }

        namespace delay {
            // Circular reference from rc_easyui.Draggable.propTypes.delay
            const isRequired: any;
        }

        namespace deltaX {
            // Circular reference from rc_easyui.Draggable.propTypes.deltaX
            const isRequired: any;
        }

        namespace deltaY {
            // Circular reference from rc_easyui.Draggable.propTypes.deltaY
            const isRequired: any;
        }

        namespace disabled {
            // Circular reference from rc_easyui.Draggable.propTypes.disabled
            const isRequired: any;
        }

        namespace edge {
            // Circular reference from rc_easyui.Draggable.propTypes.edge
            const isRequired: any;
        }

        namespace handle {
            // Circular reference from rc_easyui.Draggable.propTypes.handle
            const isRequired: any;
        }

        namespace onDrag {
            // Circular reference from rc_easyui.Draggable.propTypes.onDrag
            const isRequired: any;
        }

        namespace onDragEnd {
            // Circular reference from rc_easyui.Draggable.propTypes.onDragEnd
            const isRequired: any;
        }

        namespace onDragStart {
            // Circular reference from rc_easyui.Draggable.propTypes.onDragStart
            const isRequired: any;
        }

        namespace proxy {
            // Circular reference from rc_easyui.Draggable.propTypes.proxy
            const isRequired: any;
        }

        namespace proxyCls {
            // Circular reference from rc_easyui.Draggable.propTypes.proxyCls
            const isRequired: any;
        }

        namespace proxyStyle {
            // Circular reference from rc_easyui.Draggable.propTypes.proxyStyle
            const isRequired: any;
        }

        namespace revert {
            // Circular reference from rc_easyui.Draggable.propTypes.revert
            const isRequired: any;
        }

        namespace scope {
            // Circular reference from rc_easyui.Draggable.propTypes.scope
            const isRequired: any;
        }
    }
}

export namespace DraggableProxy {
    namespace contextTypes {
        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace locale {
            // Circular reference from rc_easyui.DraggableProxy.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.DraggableProxy.contextTypes.t
            const isRequired: any;
        }
    }

    namespace propTypes {
        function className(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function style(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace className {
            // Circular reference from rc_easyui.DraggableProxy.propTypes.className
            const isRequired: any;
        }

        namespace style {
            // Circular reference from rc_easyui.DraggableProxy.propTypes.style
            const isRequired: any;
        }
    }
}

export namespace Droppable {
    namespace contextTypes {
        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace locale {
            // Circular reference from rc_easyui.Droppable.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.Droppable.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const disabled: boolean;

        function onDragEnter(e: any): void;

        function onDragLeave(e: any): void;

        function onDragOver(e: any): void;

        function onDrop(e: any): void;
    }

    namespace propTypes {
        function disabled(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function scope(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace disabled {
            // Circular reference from rc_easyui.Droppable.propTypes.disabled
            const isRequired: any;
        }

        namespace scope {
            // Circular reference from rc_easyui.Droppable.propTypes.scope
            const isRequired: any;
        }
    }
}

export namespace FieldBase {
    namespace contextTypes {
        function fieldAdd(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldFocus(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldName(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldRemove(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace fieldAdd {
            // Circular reference from rc_easyui.FieldBase.contextTypes.fieldAdd
            const isRequired: any;
        }

        namespace fieldBlur {
            // Circular reference from rc_easyui.FieldBase.contextTypes.fieldBlur
            const isRequired: any;
        }

        namespace fieldChange {
            // Circular reference from rc_easyui.FieldBase.contextTypes.fieldChange
            const isRequired: any;
        }

        namespace fieldFocus {
            // Circular reference from rc_easyui.FieldBase.contextTypes.fieldFocus
            const isRequired: any;
        }

        namespace fieldName {
            // Circular reference from rc_easyui.FieldBase.contextTypes.fieldName
            const isRequired: any;
        }

        namespace fieldRemove {
            // Circular reference from rc_easyui.FieldBase.contextTypes.fieldRemove
            const isRequired: any;
        }

        namespace locale {
            // Circular reference from rc_easyui.FieldBase.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.FieldBase.contextTypes.t
            const isRequired: any;
        }
    }

    namespace propTypes {
        function invalid(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function name(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function validateOnBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function validateOnChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function validateOnCreate(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace invalid {
            // Circular reference from rc_easyui.FieldBase.propTypes.invalid
            const isRequired: any;
        }

        namespace name {
            // Circular reference from rc_easyui.FieldBase.propTypes.name
            const isRequired: any;
        }

        namespace validateOnBlur {
            // Circular reference from rc_easyui.FieldBase.propTypes.validateOnBlur
            const isRequired: any;
        }

        namespace validateOnChange {
            // Circular reference from rc_easyui.FieldBase.propTypes.validateOnChange
            const isRequired: any;
        }

        namespace validateOnCreate {
            // Circular reference from rc_easyui.FieldBase.propTypes.validateOnCreate
            const isRequired: any;
        }
    }
}

export namespace FileButton {
    namespace contextTypes {
        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace locale {
            // Circular reference from rc_easyui.FileButton.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.FileButton.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const autoUpload: boolean;

        const disabled: boolean;

        const href: string;

        const iconAlign: string;

        const method: string;

        const multiple: boolean;

        const name: string;

        const outline: boolean;

        const plain: boolean;

        const selected: boolean;

        const size: string;

        const toggle: boolean;

        const withCredentials: boolean;

        function onClick(): void;

        function onError(e: any): void;

        function onProgress(e: any): void;

        function onSelect(e: any): void;

        function onSuccess(e: any): void;
    }

    namespace propTypes {
        function accept(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function autoUpload(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function capture(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function className(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function disabled(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function href(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function method(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function multiple(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onClick(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function outline(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function plain(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function selected(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function size(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function style(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function text(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function toggle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function url(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function withCredentials(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace accept {
            // Circular reference from rc_easyui.FileButton.propTypes.accept
            const isRequired: any;
        }

        namespace autoUpload {
            // Circular reference from rc_easyui.FileButton.propTypes.autoUpload
            const isRequired: any;
        }

        namespace capture {
            // Circular reference from rc_easyui.FileButton.propTypes.capture
            const isRequired: any;
        }

        namespace className {
            // Circular reference from rc_easyui.FileButton.propTypes.className
            const isRequired: any;
        }

        namespace disabled {
            // Circular reference from rc_easyui.FileButton.propTypes.disabled
            const isRequired: any;
        }

        namespace href {
            // Circular reference from rc_easyui.FileButton.propTypes.href
            const isRequired: any;
        }

        namespace iconAlign {
            // Circular reference from rc_easyui.FileButton.propTypes.iconAlign
            const isRequired: any;
        }

        namespace iconCls {
            // Circular reference from rc_easyui.FileButton.propTypes.iconCls
            const isRequired: any;
        }

        namespace method {
            // Circular reference from rc_easyui.FileButton.propTypes.method
            const isRequired: any;
        }

        namespace multiple {
            // Circular reference from rc_easyui.FileButton.propTypes.multiple
            const isRequired: any;
        }

        namespace onClick {
            // Circular reference from rc_easyui.FileButton.propTypes.onClick
            const isRequired: any;
        }

        namespace outline {
            // Circular reference from rc_easyui.FileButton.propTypes.outline
            const isRequired: any;
        }

        namespace plain {
            // Circular reference from rc_easyui.FileButton.propTypes.plain
            const isRequired: any;
        }

        namespace selected {
            // Circular reference from rc_easyui.FileButton.propTypes.selected
            const isRequired: any;
        }

        namespace size {
            // Circular reference from rc_easyui.FileButton.propTypes.size
            const isRequired: any;
        }

        namespace style {
            // Circular reference from rc_easyui.FileButton.propTypes.style
            const isRequired: any;
        }

        namespace text {
            // Circular reference from rc_easyui.FileButton.propTypes.text
            const isRequired: any;
        }

        namespace toggle {
            // Circular reference from rc_easyui.FileButton.propTypes.toggle
            const isRequired: any;
        }

        namespace url {
            // Circular reference from rc_easyui.FileButton.propTypes.url
            const isRequired: any;
        }

        namespace withCredentials {
            // Circular reference from rc_easyui.FileButton.propTypes.withCredentials
            const isRequired: any;
        }
    }
}

export namespace Form {
    namespace childContextTypes {
        function fieldAdd(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldFocus(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldName(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldRemove(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function floatingLabel(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function labelAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function labelPosition(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function labelWidth(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace fieldAdd {
            // Circular reference from rc_easyui.Form.childContextTypes.fieldAdd
            const isRequired: any;
        }

        namespace fieldBlur {
            // Circular reference from rc_easyui.Form.childContextTypes.fieldBlur
            const isRequired: any;
        }

        namespace fieldChange {
            // Circular reference from rc_easyui.Form.childContextTypes.fieldChange
            const isRequired: any;
        }

        namespace fieldFocus {
            // Circular reference from rc_easyui.Form.childContextTypes.fieldFocus
            const isRequired: any;
        }

        namespace fieldName {
            // Circular reference from rc_easyui.Form.childContextTypes.fieldName
            const isRequired: any;
        }

        namespace fieldRemove {
            // Circular reference from rc_easyui.Form.childContextTypes.fieldRemove
            const isRequired: any;
        }

        namespace floatingLabel {
            // Circular reference from rc_easyui.Form.childContextTypes.floatingLabel
            const isRequired: any;
        }

        namespace labelAlign {
            // Circular reference from rc_easyui.Form.childContextTypes.labelAlign
            const isRequired: any;
        }

        namespace labelPosition {
            // Circular reference from rc_easyui.Form.childContextTypes.labelPosition
            const isRequired: any;
        }

        namespace labelWidth {
            // Circular reference from rc_easyui.Form.childContextTypes.labelWidth
            const isRequired: any;
        }
    }

    namespace contextTypes {
        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace locale {
            // Circular reference from rc_easyui.Form.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.Form.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const delay: number;

        const errorType: string;

        const floatingLabel: boolean;

        const labelAlign: string;

        const labelPosition: string;

        const labelWidth: number;

        const tooltipPosition: string;

        function onChange(e: any, t: any): void;

        function onSubmit(e: any): void;

        function onValidate(e: any): void;
    }

    namespace propTypes {
        function className(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function delay(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function errorType(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function floatingLabel(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function labelAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function labelPosition(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function labelWidth(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function model(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onValidate(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function rules(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function style(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function tooltipPosition(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function validateRules(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace className {
            // Circular reference from rc_easyui.Form.propTypes.className
            const isRequired: any;
        }

        namespace delay {
            // Circular reference from rc_easyui.Form.propTypes.delay
            const isRequired: any;
        }

        namespace errorType {
            // Circular reference from rc_easyui.Form.propTypes.errorType
            const isRequired: any;
        }

        namespace floatingLabel {
            // Circular reference from rc_easyui.Form.propTypes.floatingLabel
            const isRequired: any;
        }

        namespace labelAlign {
            // Circular reference from rc_easyui.Form.propTypes.labelAlign
            const isRequired: any;
        }

        namespace labelPosition {
            // Circular reference from rc_easyui.Form.propTypes.labelPosition
            const isRequired: any;
        }

        namespace labelWidth {
            // Circular reference from rc_easyui.Form.propTypes.labelWidth
            const isRequired: any;
        }

        namespace model {
            // Circular reference from rc_easyui.Form.propTypes.model
            const isRequired: any;
        }

        namespace onChange {
            // Circular reference from rc_easyui.Form.propTypes.onChange
            const isRequired: any;
        }

        namespace onValidate {
            // Circular reference from rc_easyui.Form.propTypes.onValidate
            const isRequired: any;
        }

        namespace rules {
            // Circular reference from rc_easyui.Form.propTypes.rules
            const isRequired: any;
        }

        namespace style {
            // Circular reference from rc_easyui.Form.propTypes.style
            const isRequired: any;
        }

        namespace tooltipPosition {
            // Circular reference from rc_easyui.Form.propTypes.tooltipPosition
            const isRequired: any;
        }

        namespace validateRules {
            // Circular reference from rc_easyui.Form.propTypes.validateRules
            const isRequired: any;
        }
    }
}

export namespace FormField {
    namespace contextTypes {
        function floatingLabel(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function labelAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function labelPosition(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function labelWidth(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace floatingLabel {
            // Circular reference from rc_easyui.FormField.contextTypes.floatingLabel
            const isRequired: any;
        }

        namespace labelAlign {
            // Circular reference from rc_easyui.FormField.contextTypes.labelAlign
            const isRequired: any;
        }

        namespace labelPosition {
            // Circular reference from rc_easyui.FormField.contextTypes.labelPosition
            const isRequired: any;
        }

        namespace labelWidth {
            // Circular reference from rc_easyui.FormField.contextTypes.labelWidth
            const isRequired: any;
        }

        namespace locale {
            // Circular reference from rc_easyui.FormField.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.FormField.contextTypes.t
            const isRequired: any;
        }
    }

    namespace propTypes {
        function className(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function label(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function labelAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function labelPosition(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function labelWidth(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function name(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function style(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace className {
            // Circular reference from rc_easyui.FormField.propTypes.className
            const isRequired: any;
        }

        namespace label {
            // Circular reference from rc_easyui.FormField.propTypes.label
            const isRequired: any;
        }

        namespace labelAlign {
            // Circular reference from rc_easyui.FormField.propTypes.labelAlign
            const isRequired: any;
        }

        namespace labelPosition {
            // Circular reference from rc_easyui.FormField.propTypes.labelPosition
            const isRequired: any;
        }

        namespace labelWidth {
            // Circular reference from rc_easyui.FormField.propTypes.labelWidth
            const isRequired: any;
        }

        namespace name {
            // Circular reference from rc_easyui.FormField.propTypes.name
            const isRequired: any;
        }

        namespace style {
            // Circular reference from rc_easyui.FormField.propTypes.style
            const isRequired: any;
        }
    }
}

export namespace GridBase {
    namespace contextTypes {
        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace locale {
            // Circular reference from rc_easyui.GridBase.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.GridBase.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const border: boolean;

        const clickToEdit: boolean;

        const columnMoving: boolean;

        const columnResizing: boolean;

        const data: any[];

        const dblclickToEdit: boolean;

        const defaultLoadMsg: string;

        const filterBtnPosition: string;

        const filterDelay: number;

        const filterMatchingType: string;

        const filterOperators: {
            beginwith: {
                isMatch: any;
                text: string;
            };
            contains: {
                isMatch: any;
                text: string;
            };
            endwith: {
                isMatch: any;
                text: string;
            };
            equal: {
                isMatch: any;
                text: string;
            };
            greater: {
                isMatch: any;
                text: string;
            };
            greaterorequal: {
                isMatch: any;
                text: string;
            };
            less: {
                isMatch: any;
                text: string;
            };
            lessorequal: {
                isMatch: any;
                text: string;
            };
            nofilter: {
                isMatch: any;
                text: string;
            };
            notequal: {
                isMatch: any;
                text: string;
            };        };

        const filterPosition: string;

        const filterRules: any[];

        const filterable: boolean;

        const footerData: any[];

        const frozenAlign: string;

        const frozenWidth: string;

        const lazy: boolean;

        const loading: boolean;

        const multiSort: boolean;

        const pageNumber: number;

        const pagePosition: string;

        const pageSize: number;

        const pagination: boolean;

        const rowHeight: number;

        const showFooter: boolean;

        const showHeader: boolean;

        const sorts: any[];

        const striped: boolean;

        const total: number;

        const virtualScroll: boolean;

        function onCellClick(): void;

        function onCellContextMenu(e: any): void;

        function onCellDblClick(): void;

        function onCellSelect(): void;

        function onCellUnselect(): void;

        function onColumnMove(e: any): void;

        function onColumnResize(e: any): void;

        function onEditBegin(e: any): void;

        function onEditCancel(e: any): void;

        function onEditEnd(e: any): void;

        function onEditValidate(e: any): void;

        function onFilterChange(): void;

        function onPageChange(): void;

        function onRowClick(e: any): void;

        function onRowContextMenu(e: any): void;

        function onRowDblClick(e: any): void;

        function onRowSelect(): void;

        function onRowUnselect(): void;

        function onSelectionChange(): void;

        function onSortChange(): void;
    }

    namespace propTypes {
        function border(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function clickToEdit(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function columnMoving(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function data(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function dblclickToEdit(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function editMode(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function filterBtnPosition(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function filterDelay(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function filterMatchingType(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function filterOperators(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function filterPosition(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function filterRules(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function filterable(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function footerData(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function frozenAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function frozenWidth(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function idField(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function lazy(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function loadMsg(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function loading(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function multiSort(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function pageNumber(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function pageOptions(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function pagePosition(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function pageSize(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function pagination(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function rowCss(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function rowHeight(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function selection(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function selectionMode(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function showFooter(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function showHeader(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function sorts(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function striped(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function total(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function virtualScroll(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace border {
            // Circular reference from rc_easyui.GridBase.propTypes.border
            const isRequired: any;
        }

        namespace clickToEdit {
            // Circular reference from rc_easyui.GridBase.propTypes.clickToEdit
            const isRequired: any;
        }

        namespace columnMoving {
            // Circular reference from rc_easyui.GridBase.propTypes.columnMoving
            const isRequired: any;
        }

        namespace data {
            // Circular reference from rc_easyui.GridBase.propTypes.data
            const isRequired: any;
        }

        namespace dblclickToEdit {
            // Circular reference from rc_easyui.GridBase.propTypes.dblclickToEdit
            const isRequired: any;
        }

        namespace editMode {
            // Circular reference from rc_easyui.GridBase.propTypes.editMode
            const isRequired: any;
        }

        namespace filterBtnPosition {
            // Circular reference from rc_easyui.GridBase.propTypes.filterBtnPosition
            const isRequired: any;
        }

        namespace filterDelay {
            // Circular reference from rc_easyui.GridBase.propTypes.filterDelay
            const isRequired: any;
        }

        namespace filterMatchingType {
            // Circular reference from rc_easyui.GridBase.propTypes.filterMatchingType
            const isRequired: any;
        }

        namespace filterOperators {
            // Circular reference from rc_easyui.GridBase.propTypes.filterOperators
            const isRequired: any;
        }

        namespace filterPosition {
            // Circular reference from rc_easyui.GridBase.propTypes.filterPosition
            const isRequired: any;
        }

        namespace filterRules {
            // Circular reference from rc_easyui.GridBase.propTypes.filterRules
            const isRequired: any;
        }

        namespace filterable {
            // Circular reference from rc_easyui.GridBase.propTypes.filterable
            const isRequired: any;
        }

        namespace footerData {
            // Circular reference from rc_easyui.GridBase.propTypes.footerData
            const isRequired: any;
        }

        namespace frozenAlign {
            // Circular reference from rc_easyui.GridBase.propTypes.frozenAlign
            const isRequired: any;
        }

        namespace frozenWidth {
            // Circular reference from rc_easyui.GridBase.propTypes.frozenWidth
            const isRequired: any;
        }

        namespace idField {
            // Circular reference from rc_easyui.GridBase.propTypes.idField
            const isRequired: any;
        }

        namespace lazy {
            // Circular reference from rc_easyui.GridBase.propTypes.lazy
            const isRequired: any;
        }

        namespace loadMsg {
            // Circular reference from rc_easyui.GridBase.propTypes.loadMsg
            const isRequired: any;
        }

        namespace loading {
            // Circular reference from rc_easyui.GridBase.propTypes.loading
            const isRequired: any;
        }

        namespace multiSort {
            // Circular reference from rc_easyui.GridBase.propTypes.multiSort
            const isRequired: any;
        }

        namespace pageNumber {
            // Circular reference from rc_easyui.GridBase.propTypes.pageNumber
            const isRequired: any;
        }

        namespace pageOptions {
            // Circular reference from rc_easyui.GridBase.propTypes.pageOptions
            const isRequired: any;
        }

        namespace pagePosition {
            // Circular reference from rc_easyui.GridBase.propTypes.pagePosition
            const isRequired: any;
        }

        namespace pageSize {
            // Circular reference from rc_easyui.GridBase.propTypes.pageSize
            const isRequired: any;
        }

        namespace pagination {
            // Circular reference from rc_easyui.GridBase.propTypes.pagination
            const isRequired: any;
        }

        namespace rowCss {
            // Circular reference from rc_easyui.GridBase.propTypes.rowCss
            const isRequired: any;
        }

        namespace rowHeight {
            // Circular reference from rc_easyui.GridBase.propTypes.rowHeight
            const isRequired: any;
        }

        namespace selection {
            // Circular reference from rc_easyui.GridBase.propTypes.selection
            const isRequired: any;
        }

        namespace selectionMode {
            // Circular reference from rc_easyui.GridBase.propTypes.selectionMode
            const isRequired: any;
        }

        namespace showFooter {
            // Circular reference from rc_easyui.GridBase.propTypes.showFooter
            const isRequired: any;
        }

        namespace showHeader {
            // Circular reference from rc_easyui.GridBase.propTypes.showHeader
            const isRequired: any;
        }

        namespace sorts {
            // Circular reference from rc_easyui.GridBase.propTypes.sorts
            const isRequired: any;
        }

        namespace striped {
            // Circular reference from rc_easyui.GridBase.propTypes.striped
            const isRequired: any;
        }

        namespace total {
            // Circular reference from rc_easyui.GridBase.propTypes.total
            const isRequired: any;
        }

        namespace virtualScroll {
            // Circular reference from rc_easyui.GridBase.propTypes.virtualScroll
            const isRequired: any;
        }
    }
}

export namespace GridColumn {
    namespace contextTypes {
        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace locale {
            // Circular reference from rc_easyui.GridColumn.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.GridColumn.contextTypes.t
            const isRequired: any;
        }
    }

    namespace propTypes {
        function align(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function cellCss(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function colspan(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function defaultFilterOperator(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function editRules(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function editable(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function editor(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function expander(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function field(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function filter(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function filterOperators(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function filterable(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function footer(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function frozen(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function halign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function header(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function order(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function render(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function rowspan(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function sortable(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function sorter(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function title(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function width(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace align {
            // Circular reference from rc_easyui.GridColumn.propTypes.align
            const isRequired: any;
        }

        namespace cellCss {
            // Circular reference from rc_easyui.GridColumn.propTypes.cellCss
            const isRequired: any;
        }

        namespace colspan {
            // Circular reference from rc_easyui.GridColumn.propTypes.colspan
            const isRequired: any;
        }

        namespace defaultFilterOperator {
            // Circular reference from rc_easyui.GridColumn.propTypes.defaultFilterOperator
            const isRequired: any;
        }

        namespace editRules {
            // Circular reference from rc_easyui.GridColumn.propTypes.editRules
            const isRequired: any;
        }

        namespace editable {
            // Circular reference from rc_easyui.GridColumn.propTypes.editable
            const isRequired: any;
        }

        namespace editor {
            // Circular reference from rc_easyui.GridColumn.propTypes.editor
            const isRequired: any;
        }

        namespace expander {
            // Circular reference from rc_easyui.GridColumn.propTypes.expander
            const isRequired: any;
        }

        namespace field {
            // Circular reference from rc_easyui.GridColumn.propTypes.field
            const isRequired: any;
        }

        namespace filter {
            // Circular reference from rc_easyui.GridColumn.propTypes.filter
            const isRequired: any;
        }

        namespace filterOperators {
            // Circular reference from rc_easyui.GridColumn.propTypes.filterOperators
            const isRequired: any;
        }

        namespace filterable {
            // Circular reference from rc_easyui.GridColumn.propTypes.filterable
            const isRequired: any;
        }

        namespace footer {
            // Circular reference from rc_easyui.GridColumn.propTypes.footer
            const isRequired: any;
        }

        namespace frozen {
            // Circular reference from rc_easyui.GridColumn.propTypes.frozen
            const isRequired: any;
        }

        namespace halign {
            // Circular reference from rc_easyui.GridColumn.propTypes.halign
            const isRequired: any;
        }

        namespace header {
            // Circular reference from rc_easyui.GridColumn.propTypes.header
            const isRequired: any;
        }

        namespace order {
            // Circular reference from rc_easyui.GridColumn.propTypes.order
            const isRequired: any;
        }

        namespace render {
            // Circular reference from rc_easyui.GridColumn.propTypes.render
            const isRequired: any;
        }

        namespace rowspan {
            // Circular reference from rc_easyui.GridColumn.propTypes.rowspan
            const isRequired: any;
        }

        namespace sortable {
            // Circular reference from rc_easyui.GridColumn.propTypes.sortable
            const isRequired: any;
        }

        namespace sorter {
            // Circular reference from rc_easyui.GridColumn.propTypes.sorter
            const isRequired: any;
        }

        namespace title {
            // Circular reference from rc_easyui.GridColumn.propTypes.title
            const isRequired: any;
        }

        namespace width {
            // Circular reference from rc_easyui.GridColumn.propTypes.width
            const isRequired: any;
        }
    }
}

export namespace GridColumnGroup {
    namespace contextTypes {
        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace locale {
            // Circular reference from rc_easyui.GridColumnGroup.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.GridColumnGroup.contextTypes.t
            const isRequired: any;
        }
    }

    namespace propTypes {
        function align(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function frozen(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function width(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace align {
            // Circular reference from rc_easyui.GridColumnGroup.propTypes.align
            const isRequired: any;
        }

        namespace frozen {
            // Circular reference from rc_easyui.GridColumnGroup.propTypes.frozen
            const isRequired: any;
        }

        namespace width {
            // Circular reference from rc_easyui.GridColumnGroup.propTypes.width
            const isRequired: any;
        }
    }
}

export namespace GridHeaderRow {
    namespace contextTypes {
        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace locale {
            // Circular reference from rc_easyui.GridHeaderRow.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.GridHeaderRow.contextTypes.t
            const isRequired: any;
        }
    }

    namespace propTypes {
        function className(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function style(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace className {
            // Circular reference from rc_easyui.GridHeaderRow.propTypes.className
            const isRequired: any;
        }

        namespace style {
            // Circular reference from rc_easyui.GridHeaderRow.propTypes.style
            const isRequired: any;
        }
    }
}

export namespace InputBase {
    namespace contextTypes {
        function fieldAdd(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldFocus(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldName(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldRemove(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace fieldAdd {
            // Circular reference from rc_easyui.InputBase.contextTypes.fieldAdd
            const isRequired: any;
        }

        namespace fieldBlur {
            // Circular reference from rc_easyui.InputBase.contextTypes.fieldBlur
            const isRequired: any;
        }

        namespace fieldChange {
            // Circular reference from rc_easyui.InputBase.contextTypes.fieldChange
            const isRequired: any;
        }

        namespace fieldFocus {
            // Circular reference from rc_easyui.InputBase.contextTypes.fieldFocus
            const isRequired: any;
        }

        namespace fieldName {
            // Circular reference from rc_easyui.InputBase.contextTypes.fieldName
            const isRequired: any;
        }

        namespace fieldRemove {
            // Circular reference from rc_easyui.InputBase.contextTypes.fieldRemove
            const isRequired: any;
        }

        namespace locale {
            // Circular reference from rc_easyui.InputBase.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.InputBase.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const disabled: boolean;

        const editable: boolean;

        const iconAlign: string;

        const invalid: boolean;

        const multiline: boolean;

        const readOnly: boolean;

        const validateOnBlur: boolean;

        const validateOnChange: boolean;

        const validateOnCreate: boolean;

        const value: any;

        function onBlur(): void;

        function onChange(e: any): void;

        function onFocus(): void;

        function textFormatter(e: any): any;
    }

    namespace propTypes {
        function addonLeft(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function addonRight(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function className(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function disabled(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function editable(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputId(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function multiline(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onFocus(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function placeholder(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function readOnly(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function style(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function tabIndex(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function textFormatter(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function value(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace addonLeft {
            // Circular reference from rc_easyui.InputBase.propTypes.addonLeft
            const isRequired: any;
        }

        namespace addonRight {
            // Circular reference from rc_easyui.InputBase.propTypes.addonRight
            const isRequired: any;
        }

        namespace className {
            // Circular reference from rc_easyui.InputBase.propTypes.className
            const isRequired: any;
        }

        namespace disabled {
            // Circular reference from rc_easyui.InputBase.propTypes.disabled
            const isRequired: any;
        }

        namespace editable {
            // Circular reference from rc_easyui.InputBase.propTypes.editable
            const isRequired: any;
        }

        namespace iconAlign {
            // Circular reference from rc_easyui.InputBase.propTypes.iconAlign
            const isRequired: any;
        }

        namespace iconCls {
            // Circular reference from rc_easyui.InputBase.propTypes.iconCls
            const isRequired: any;
        }

        namespace inputCls {
            // Circular reference from rc_easyui.InputBase.propTypes.inputCls
            const isRequired: any;
        }

        namespace inputId {
            // Circular reference from rc_easyui.InputBase.propTypes.inputId
            const isRequired: any;
        }

        namespace inputStyle {
            // Circular reference from rc_easyui.InputBase.propTypes.inputStyle
            const isRequired: any;
        }

        namespace multiline {
            // Circular reference from rc_easyui.InputBase.propTypes.multiline
            const isRequired: any;
        }

        namespace onBlur {
            // Circular reference from rc_easyui.InputBase.propTypes.onBlur
            const isRequired: any;
        }

        namespace onChange {
            // Circular reference from rc_easyui.InputBase.propTypes.onChange
            const isRequired: any;
        }

        namespace onFocus {
            // Circular reference from rc_easyui.InputBase.propTypes.onFocus
            const isRequired: any;
        }

        namespace placeholder {
            // Circular reference from rc_easyui.InputBase.propTypes.placeholder
            const isRequired: any;
        }

        namespace readOnly {
            // Circular reference from rc_easyui.InputBase.propTypes.readOnly
            const isRequired: any;
        }

        namespace style {
            // Circular reference from rc_easyui.InputBase.propTypes.style
            const isRequired: any;
        }

        namespace tabIndex {
            // Circular reference from rc_easyui.InputBase.propTypes.tabIndex
            const isRequired: any;
        }

        namespace textFormatter {
            // Circular reference from rc_easyui.InputBase.propTypes.textFormatter
            const isRequired: any;
        }

        namespace value {
            // Circular reference from rc_easyui.InputBase.propTypes.value
            const isRequired: any;
        }
    }
}

export namespace Label {
    namespace propTypes {
        function align(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function htmlFor(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace align {
            // Circular reference from rc_easyui.Label.propTypes.align
            const isRequired: any;
        }

        namespace htmlFor {
            // Circular reference from rc_easyui.Label.propTypes.htmlFor
            const isRequired: any;
        }
    }
}

export namespace Layout {
    namespace contextTypes {
        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace locale {
            // Circular reference from rc_easyui.Layout.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.Layout.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        function onPanelResizeStart(e: any): void;

        function onPanelResizeStop(e: any): void;

        function onPanelResizing(e: any): void;
    }

    namespace propTypes {
        function selectedTab(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace selectedTab {
            // Circular reference from rc_easyui.Layout.propTypes.selectedTab
            const isRequired: any;
        }
    }
}

export namespace LayoutPanel {
    namespace contextTypes {
        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace locale {
            // Circular reference from rc_easyui.LayoutPanel.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.LayoutPanel.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const animate: boolean;

        const border: boolean;

        const closable: boolean;

        const closeIconCls: string;

        const closed: boolean;

        const collapseIconCls: any;

        const collapsed: boolean;

        const collapsedSize: number;

        const collapsible: boolean;

        const expandIconCls: any;

        const expander: boolean;

        const region: string;

        const showFooter: boolean;

        const showHeader: boolean;

        const split: boolean;

        function onCollapse(): void;

        function onExpand(): void;
    }

    namespace propTypes {
        function animate(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function bodyCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function bodyStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function border(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function closable(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function closeIconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function closed(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function collapseIconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function collapsed(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function collapsedSize(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function collapsible(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function expandIconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function expander(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function footer(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function footerCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function footerStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function header(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function headerCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function headerStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onCollapse(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onExpand(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function region(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function showFooter(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function showHeader(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function split(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function title(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace animate {
            // Circular reference from rc_easyui.LayoutPanel.propTypes.animate
            const isRequired: any;
        }

        namespace bodyCls {
            // Circular reference from rc_easyui.LayoutPanel.propTypes.bodyCls
            const isRequired: any;
        }

        namespace bodyStyle {
            // Circular reference from rc_easyui.LayoutPanel.propTypes.bodyStyle
            const isRequired: any;
        }

        namespace border {
            // Circular reference from rc_easyui.LayoutPanel.propTypes.border
            const isRequired: any;
        }

        namespace closable {
            // Circular reference from rc_easyui.LayoutPanel.propTypes.closable
            const isRequired: any;
        }

        namespace closeIconCls {
            // Circular reference from rc_easyui.LayoutPanel.propTypes.closeIconCls
            const isRequired: any;
        }

        namespace closed {
            // Circular reference from rc_easyui.LayoutPanel.propTypes.closed
            const isRequired: any;
        }

        namespace collapseIconCls {
            // Circular reference from rc_easyui.LayoutPanel.propTypes.collapseIconCls
            const isRequired: any;
        }

        namespace collapsed {
            // Circular reference from rc_easyui.LayoutPanel.propTypes.collapsed
            const isRequired: any;
        }

        namespace collapsedSize {
            // Circular reference from rc_easyui.LayoutPanel.propTypes.collapsedSize
            const isRequired: any;
        }

        namespace collapsible {
            // Circular reference from rc_easyui.LayoutPanel.propTypes.collapsible
            const isRequired: any;
        }

        namespace expandIconCls {
            // Circular reference from rc_easyui.LayoutPanel.propTypes.expandIconCls
            const isRequired: any;
        }

        namespace expander {
            // Circular reference from rc_easyui.LayoutPanel.propTypes.expander
            const isRequired: any;
        }

        namespace footer {
            // Circular reference from rc_easyui.LayoutPanel.propTypes.footer
            const isRequired: any;
        }

        namespace footerCls {
            // Circular reference from rc_easyui.LayoutPanel.propTypes.footerCls
            const isRequired: any;
        }

        namespace footerStyle {
            // Circular reference from rc_easyui.LayoutPanel.propTypes.footerStyle
            const isRequired: any;
        }

        namespace header {
            // Circular reference from rc_easyui.LayoutPanel.propTypes.header
            const isRequired: any;
        }

        namespace headerCls {
            // Circular reference from rc_easyui.LayoutPanel.propTypes.headerCls
            const isRequired: any;
        }

        namespace headerStyle {
            // Circular reference from rc_easyui.LayoutPanel.propTypes.headerStyle
            const isRequired: any;
        }

        namespace iconCls {
            // Circular reference from rc_easyui.LayoutPanel.propTypes.iconCls
            const isRequired: any;
        }

        namespace onCollapse {
            // Circular reference from rc_easyui.LayoutPanel.propTypes.onCollapse
            const isRequired: any;
        }

        namespace onExpand {
            // Circular reference from rc_easyui.LayoutPanel.propTypes.onExpand
            const isRequired: any;
        }

        namespace region {
            // Circular reference from rc_easyui.LayoutPanel.propTypes.region
            const isRequired: any;
        }

        namespace showFooter {
            // Circular reference from rc_easyui.LayoutPanel.propTypes.showFooter
            const isRequired: any;
        }

        namespace showHeader {
            // Circular reference from rc_easyui.LayoutPanel.propTypes.showHeader
            const isRequired: any;
        }

        namespace split {
            // Circular reference from rc_easyui.LayoutPanel.propTypes.split
            const isRequired: any;
        }

        namespace title {
            // Circular reference from rc_easyui.LayoutPanel.propTypes.title
            const isRequired: any;
        }
    }
}

export namespace LinkButton {
    namespace contextTypes {
        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace locale {
            // Circular reference from rc_easyui.LinkButton.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.LinkButton.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const disabled: boolean;

        const iconAlign: string;

        const outline: boolean;

        const plain: boolean;

        const selected: boolean;

        const size: string;

        const toggle: boolean;

        function onClick(): void;
    }

    namespace propTypes {
        function className(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function disabled(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function href(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onClick(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function outline(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function plain(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function selected(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function size(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function style(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function text(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function toggle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace className {
            // Circular reference from rc_easyui.LinkButton.propTypes.className
            const isRequired: any;
        }

        namespace disabled {
            // Circular reference from rc_easyui.LinkButton.propTypes.disabled
            const isRequired: any;
        }

        namespace href {
            // Circular reference from rc_easyui.LinkButton.propTypes.href
            const isRequired: any;
        }

        namespace iconAlign {
            // Circular reference from rc_easyui.LinkButton.propTypes.iconAlign
            const isRequired: any;
        }

        namespace iconCls {
            // Circular reference from rc_easyui.LinkButton.propTypes.iconCls
            const isRequired: any;
        }

        namespace onClick {
            // Circular reference from rc_easyui.LinkButton.propTypes.onClick
            const isRequired: any;
        }

        namespace outline {
            // Circular reference from rc_easyui.LinkButton.propTypes.outline
            const isRequired: any;
        }

        namespace plain {
            // Circular reference from rc_easyui.LinkButton.propTypes.plain
            const isRequired: any;
        }

        namespace selected {
            // Circular reference from rc_easyui.LinkButton.propTypes.selected
            const isRequired: any;
        }

        namespace size {
            // Circular reference from rc_easyui.LinkButton.propTypes.size
            const isRequired: any;
        }

        namespace style {
            // Circular reference from rc_easyui.LinkButton.propTypes.style
            const isRequired: any;
        }

        namespace text {
            // Circular reference from rc_easyui.LinkButton.propTypes.text
            const isRequired: any;
        }

        namespace toggle {
            // Circular reference from rc_easyui.LinkButton.propTypes.toggle
            const isRequired: any;
        }
    }
}

export namespace LocaleBase {
    namespace contextTypes {
        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace locale {
            // Circular reference from rc_easyui.LocaleBase.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.LocaleBase.contextTypes.t
            const isRequired: any;
        }
    }

    namespace propTypes {
        function className(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function style(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace className {
            // Circular reference from rc_easyui.LocaleBase.propTypes.className
            const isRequired: any;
        }

        namespace style {
            // Circular reference from rc_easyui.LocaleBase.propTypes.style
            const isRequired: any;
        }
    }
}

export namespace LocaleProvider {
    namespace childContextTypes {
        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace locale {
            // Circular reference from rc_easyui.LocaleProvider.childContextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.LocaleProvider.childContextTypes.t
            const isRequired: any;
        }
    }
}

export namespace MaskedBox {
    namespace contextTypes {
        function fieldAdd(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldFocus(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldName(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldRemove(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace fieldAdd {
            // Circular reference from rc_easyui.MaskedBox.contextTypes.fieldAdd
            const isRequired: any;
        }

        namespace fieldBlur {
            // Circular reference from rc_easyui.MaskedBox.contextTypes.fieldBlur
            const isRequired: any;
        }

        namespace fieldChange {
            // Circular reference from rc_easyui.MaskedBox.contextTypes.fieldChange
            const isRequired: any;
        }

        namespace fieldFocus {
            // Circular reference from rc_easyui.MaskedBox.contextTypes.fieldFocus
            const isRequired: any;
        }

        namespace fieldName {
            // Circular reference from rc_easyui.MaskedBox.contextTypes.fieldName
            const isRequired: any;
        }

        namespace fieldRemove {
            // Circular reference from rc_easyui.MaskedBox.contextTypes.fieldRemove
            const isRequired: any;
        }

        namespace locale {
            // Circular reference from rc_easyui.MaskedBox.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.MaskedBox.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const disabled: boolean;

        const editable: boolean;

        const iconAlign: string;

        const invalid: boolean;

        const masks: {
            "*": string;
            "9": string;
            a: string;        };

        const multiline: boolean;

        const promptChar: string;

        const readOnly: boolean;

        const validateOnBlur: boolean;

        const validateOnChange: boolean;

        const validateOnCreate: boolean;

        const value: any;

        function onBlur(): void;

        function onChange(e: any): void;

        function onFocus(): void;

        function textFormatter(e: any): any;
    }

    namespace propTypes {
        function addonLeft(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function addonRight(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function className(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function disabled(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function editable(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputId(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function mask(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function masks(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function multiline(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onFocus(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function placeholder(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function promptChar(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function readOnly(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function style(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function tabIndex(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function textFormatter(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function value(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace addonLeft {
            // Circular reference from rc_easyui.MaskedBox.propTypes.addonLeft
            const isRequired: any;
        }

        namespace addonRight {
            // Circular reference from rc_easyui.MaskedBox.propTypes.addonRight
            const isRequired: any;
        }

        namespace className {
            // Circular reference from rc_easyui.MaskedBox.propTypes.className
            const isRequired: any;
        }

        namespace disabled {
            // Circular reference from rc_easyui.MaskedBox.propTypes.disabled
            const isRequired: any;
        }

        namespace editable {
            // Circular reference from rc_easyui.MaskedBox.propTypes.editable
            const isRequired: any;
        }

        namespace iconAlign {
            // Circular reference from rc_easyui.MaskedBox.propTypes.iconAlign
            const isRequired: any;
        }

        namespace iconCls {
            // Circular reference from rc_easyui.MaskedBox.propTypes.iconCls
            const isRequired: any;
        }

        namespace inputCls {
            // Circular reference from rc_easyui.MaskedBox.propTypes.inputCls
            const isRequired: any;
        }

        namespace inputId {
            // Circular reference from rc_easyui.MaskedBox.propTypes.inputId
            const isRequired: any;
        }

        namespace inputStyle {
            // Circular reference from rc_easyui.MaskedBox.propTypes.inputStyle
            const isRequired: any;
        }

        namespace mask {
            // Circular reference from rc_easyui.MaskedBox.propTypes.mask
            const isRequired: any;
        }

        namespace masks {
            // Circular reference from rc_easyui.MaskedBox.propTypes.masks
            const isRequired: any;
        }

        namespace multiline {
            // Circular reference from rc_easyui.MaskedBox.propTypes.multiline
            const isRequired: any;
        }

        namespace onBlur {
            // Circular reference from rc_easyui.MaskedBox.propTypes.onBlur
            const isRequired: any;
        }

        namespace onChange {
            // Circular reference from rc_easyui.MaskedBox.propTypes.onChange
            const isRequired: any;
        }

        namespace onFocus {
            // Circular reference from rc_easyui.MaskedBox.propTypes.onFocus
            const isRequired: any;
        }

        namespace placeholder {
            // Circular reference from rc_easyui.MaskedBox.propTypes.placeholder
            const isRequired: any;
        }

        namespace promptChar {
            // Circular reference from rc_easyui.MaskedBox.propTypes.promptChar
            const isRequired: any;
        }

        namespace readOnly {
            // Circular reference from rc_easyui.MaskedBox.propTypes.readOnly
            const isRequired: any;
        }

        namespace style {
            // Circular reference from rc_easyui.MaskedBox.propTypes.style
            const isRequired: any;
        }

        namespace tabIndex {
            // Circular reference from rc_easyui.MaskedBox.propTypes.tabIndex
            const isRequired: any;
        }

        namespace textFormatter {
            // Circular reference from rc_easyui.MaskedBox.propTypes.textFormatter
            const isRequired: any;
        }

        namespace value {
            // Circular reference from rc_easyui.MaskedBox.propTypes.value
            const isRequired: any;
        }
    }
}

export namespace Menu {
    namespace contextTypes {
        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace locale {
            // Circular reference from rc_easyui.Menu.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.Menu.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const duration: number;

        const inline: boolean;

        const noline: boolean;

        function onHide(): void;

        function onItemClick(e: any): void;

        function onShow(): void;
    }

    namespace propTypes {
        function className(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function duration(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inline(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function menuCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function menuStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function menuWidth(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function noline(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function style(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace className {
            // Circular reference from rc_easyui.Menu.propTypes.className
            const isRequired: any;
        }

        namespace duration {
            // Circular reference from rc_easyui.Menu.propTypes.duration
            const isRequired: any;
        }

        namespace inline {
            // Circular reference from rc_easyui.Menu.propTypes.inline
            const isRequired: any;
        }

        namespace menuCls {
            // Circular reference from rc_easyui.Menu.propTypes.menuCls
            const isRequired: any;
        }

        namespace menuStyle {
            // Circular reference from rc_easyui.Menu.propTypes.menuStyle
            const isRequired: any;
        }

        namespace menuWidth {
            // Circular reference from rc_easyui.Menu.propTypes.menuWidth
            const isRequired: any;
        }

        namespace noline {
            // Circular reference from rc_easyui.Menu.propTypes.noline
            const isRequired: any;
        }

        namespace style {
            // Circular reference from rc_easyui.Menu.propTypes.style
            const isRequired: any;
        }
    }
}

export namespace MenuButton {
    namespace contextTypes {
        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace locale {
            // Circular reference from rc_easyui.MenuButton.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.MenuButton.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const disabled: boolean;

        const duration: number;

        const iconAlign: string;

        const menuAlign: string;

        const outline: boolean;

        const plain: boolean;

        const selected: boolean;

        const size: string;

        const toggle: boolean;

        function onClick(): void;

        function onMenuHide(): void;

        function onMenuItemClick(e: any): void;

        function onMenuShow(): void;
    }

    namespace propTypes {
        function className(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function disabled(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function duration(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function href(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function menu(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function menuAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onClick(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function outline(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function plain(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function selected(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function size(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function style(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function text(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function toggle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace className {
            // Circular reference from rc_easyui.MenuButton.propTypes.className
            const isRequired: any;
        }

        namespace disabled {
            // Circular reference from rc_easyui.MenuButton.propTypes.disabled
            const isRequired: any;
        }

        namespace duration {
            // Circular reference from rc_easyui.MenuButton.propTypes.duration
            const isRequired: any;
        }

        namespace href {
            // Circular reference from rc_easyui.MenuButton.propTypes.href
            const isRequired: any;
        }

        namespace iconAlign {
            // Circular reference from rc_easyui.MenuButton.propTypes.iconAlign
            const isRequired: any;
        }

        namespace iconCls {
            // Circular reference from rc_easyui.MenuButton.propTypes.iconCls
            const isRequired: any;
        }

        namespace menu {
            // Circular reference from rc_easyui.MenuButton.propTypes.menu
            const isRequired: any;
        }

        namespace menuAlign {
            // Circular reference from rc_easyui.MenuButton.propTypes.menuAlign
            const isRequired: any;
        }

        namespace onClick {
            // Circular reference from rc_easyui.MenuButton.propTypes.onClick
            const isRequired: any;
        }

        namespace outline {
            // Circular reference from rc_easyui.MenuButton.propTypes.outline
            const isRequired: any;
        }

        namespace plain {
            // Circular reference from rc_easyui.MenuButton.propTypes.plain
            const isRequired: any;
        }

        namespace selected {
            // Circular reference from rc_easyui.MenuButton.propTypes.selected
            const isRequired: any;
        }

        namespace size {
            // Circular reference from rc_easyui.MenuButton.propTypes.size
            const isRequired: any;
        }

        namespace style {
            // Circular reference from rc_easyui.MenuButton.propTypes.style
            const isRequired: any;
        }

        namespace text {
            // Circular reference from rc_easyui.MenuButton.propTypes.text
            const isRequired: any;
        }

        namespace toggle {
            // Circular reference from rc_easyui.MenuButton.propTypes.toggle
            const isRequired: any;
        }
    }
}

export namespace MenuItem {
    namespace contextTypes {
        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace locale {
            // Circular reference from rc_easyui.MenuItem.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.MenuItem.contextTypes.t
            const isRequired: any;
        }
    }

    namespace propTypes {
        function className(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function disabled(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function style(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function text(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function value(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace className {
            // Circular reference from rc_easyui.MenuItem.propTypes.className
            const isRequired: any;
        }

        namespace disabled {
            // Circular reference from rc_easyui.MenuItem.propTypes.disabled
            const isRequired: any;
        }

        namespace iconCls {
            // Circular reference from rc_easyui.MenuItem.propTypes.iconCls
            const isRequired: any;
        }

        namespace style {
            // Circular reference from rc_easyui.MenuItem.propTypes.style
            const isRequired: any;
        }

        namespace text {
            // Circular reference from rc_easyui.MenuItem.propTypes.text
            const isRequired: any;
        }

        namespace value {
            // Circular reference from rc_easyui.MenuItem.propTypes.value
            const isRequired: any;
        }
    }
}

export namespace Messager {
    namespace contextTypes {
        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace locale {
            // Circular reference from rc_easyui.Messager.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.Messager.contextTypes.t
            const isRequired: any;
        }
    }

    namespace propTypes {
        function buttons(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function className(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function content(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function icon(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function messagerType(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function msg(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function style(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace buttons {
            // Circular reference from rc_easyui.Messager.propTypes.buttons
            const isRequired: any;
        }

        namespace className {
            // Circular reference from rc_easyui.Messager.propTypes.className
            const isRequired: any;
        }

        namespace content {
            // Circular reference from rc_easyui.Messager.propTypes.content
            const isRequired: any;
        }

        namespace icon {
            // Circular reference from rc_easyui.Messager.propTypes.icon
            const isRequired: any;
        }

        namespace messagerType {
            // Circular reference from rc_easyui.Messager.propTypes.messagerType
            const isRequired: any;
        }

        namespace msg {
            // Circular reference from rc_easyui.Messager.propTypes.msg
            const isRequired: any;
        }

        namespace style {
            // Circular reference from rc_easyui.Messager.propTypes.style
            const isRequired: any;
        }
    }
}

export namespace NumberBox {
    namespace contextTypes {
        function fieldAdd(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldFocus(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldName(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldRemove(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace fieldAdd {
            // Circular reference from rc_easyui.NumberBox.contextTypes.fieldAdd
            const isRequired: any;
        }

        namespace fieldBlur {
            // Circular reference from rc_easyui.NumberBox.contextTypes.fieldBlur
            const isRequired: any;
        }

        namespace fieldChange {
            // Circular reference from rc_easyui.NumberBox.contextTypes.fieldChange
            const isRequired: any;
        }

        namespace fieldFocus {
            // Circular reference from rc_easyui.NumberBox.contextTypes.fieldFocus
            const isRequired: any;
        }

        namespace fieldName {
            // Circular reference from rc_easyui.NumberBox.contextTypes.fieldName
            const isRequired: any;
        }

        namespace fieldRemove {
            // Circular reference from rc_easyui.NumberBox.contextTypes.fieldRemove
            const isRequired: any;
        }

        namespace locale {
            // Circular reference from rc_easyui.NumberBox.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.NumberBox.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const decimalSeparator: string;

        const disabled: boolean;

        const editable: boolean;

        const groupSeparator: string;

        const iconAlign: string;

        const increment: number;

        const invalid: boolean;

        const multiline: boolean;

        const precision: number;

        const prefix: string;

        const readOnly: boolean;

        const reversed: boolean;

        const spinAlign: string;

        const spinners: boolean;

        const suffix: string;

        const validateOnBlur: boolean;

        const validateOnChange: boolean;

        const validateOnCreate: boolean;

        const value: any;

        function onBlur(): void;

        function onChange(e: any): void;

        function onFocus(): void;

        function textFormatter(e: any): any;
    }

    namespace propTypes {
        function addonLeft(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function addonRight(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function className(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function decimalSeparator(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function disabled(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function editable(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function groupSeparator(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function increment(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputId(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function max(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function min(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function multiline(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onFocus(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function placeholder(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function precision(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function prefix(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function readOnly(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function reversed(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function spinAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function spinners(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function style(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function suffix(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function tabIndex(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function textFormatter(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function value(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace addonLeft {
            // Circular reference from rc_easyui.NumberBox.propTypes.addonLeft
            const isRequired: any;
        }

        namespace addonRight {
            // Circular reference from rc_easyui.NumberBox.propTypes.addonRight
            const isRequired: any;
        }

        namespace className {
            // Circular reference from rc_easyui.NumberBox.propTypes.className
            const isRequired: any;
        }

        namespace decimalSeparator {
            // Circular reference from rc_easyui.NumberBox.propTypes.decimalSeparator
            const isRequired: any;
        }

        namespace disabled {
            // Circular reference from rc_easyui.NumberBox.propTypes.disabled
            const isRequired: any;
        }

        namespace editable {
            // Circular reference from rc_easyui.NumberBox.propTypes.editable
            const isRequired: any;
        }

        namespace groupSeparator {
            // Circular reference from rc_easyui.NumberBox.propTypes.groupSeparator
            const isRequired: any;
        }

        namespace iconAlign {
            // Circular reference from rc_easyui.NumberBox.propTypes.iconAlign
            const isRequired: any;
        }

        namespace iconCls {
            // Circular reference from rc_easyui.NumberBox.propTypes.iconCls
            const isRequired: any;
        }

        namespace increment {
            // Circular reference from rc_easyui.NumberBox.propTypes.increment
            const isRequired: any;
        }

        namespace inputCls {
            // Circular reference from rc_easyui.NumberBox.propTypes.inputCls
            const isRequired: any;
        }

        namespace inputId {
            // Circular reference from rc_easyui.NumberBox.propTypes.inputId
            const isRequired: any;
        }

        namespace inputStyle {
            // Circular reference from rc_easyui.NumberBox.propTypes.inputStyle
            const isRequired: any;
        }

        namespace max {
            // Circular reference from rc_easyui.NumberBox.propTypes.max
            const isRequired: any;
        }

        namespace min {
            // Circular reference from rc_easyui.NumberBox.propTypes.min
            const isRequired: any;
        }

        namespace multiline {
            // Circular reference from rc_easyui.NumberBox.propTypes.multiline
            const isRequired: any;
        }

        namespace onBlur {
            // Circular reference from rc_easyui.NumberBox.propTypes.onBlur
            const isRequired: any;
        }

        namespace onChange {
            // Circular reference from rc_easyui.NumberBox.propTypes.onChange
            const isRequired: any;
        }

        namespace onFocus {
            // Circular reference from rc_easyui.NumberBox.propTypes.onFocus
            const isRequired: any;
        }

        namespace placeholder {
            // Circular reference from rc_easyui.NumberBox.propTypes.placeholder
            const isRequired: any;
        }

        namespace precision {
            // Circular reference from rc_easyui.NumberBox.propTypes.precision
            const isRequired: any;
        }

        namespace prefix {
            // Circular reference from rc_easyui.NumberBox.propTypes.prefix
            const isRequired: any;
        }

        namespace readOnly {
            // Circular reference from rc_easyui.NumberBox.propTypes.readOnly
            const isRequired: any;
        }

        namespace reversed {
            // Circular reference from rc_easyui.NumberBox.propTypes.reversed
            const isRequired: any;
        }

        namespace spinAlign {
            // Circular reference from rc_easyui.NumberBox.propTypes.spinAlign
            const isRequired: any;
        }

        namespace spinners {
            // Circular reference from rc_easyui.NumberBox.propTypes.spinners
            const isRequired: any;
        }

        namespace style {
            // Circular reference from rc_easyui.NumberBox.propTypes.style
            const isRequired: any;
        }

        namespace suffix {
            // Circular reference from rc_easyui.NumberBox.propTypes.suffix
            const isRequired: any;
        }

        namespace tabIndex {
            // Circular reference from rc_easyui.NumberBox.propTypes.tabIndex
            const isRequired: any;
        }

        namespace textFormatter {
            // Circular reference from rc_easyui.NumberBox.propTypes.textFormatter
            const isRequired: any;
        }

        namespace value {
            // Circular reference from rc_easyui.NumberBox.propTypes.value
            const isRequired: any;
        }
    }
}

export namespace Pagination {
    namespace contextTypes {
        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace locale {
            // Circular reference from rc_easyui.Pagination.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.Pagination.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const defaultAfterPageText: string;

        const defaultBeforePageText: string;

        const defaultDisplayMsg: string;

        const layout: string[];

        const links: number;

        const loading: boolean;

        const pageList: number[];

        const pageNumber: number;

        const pageSize: number;

        const showPageInfo: boolean;

        const showPageList: boolean;

        const showPageRefresh: boolean;

        const total: number;

        function onPageChange(): void;
    }

    namespace propTypes {
        function afterPageText(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function beforePageText(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function displayMsg(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function layout(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function links(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function loading(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onPageChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function pageList(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function pageNumber(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function pageSize(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function renderExt(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function showPageInfo(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function showPageList(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function showPageRefresh(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function total(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace afterPageText {
            // Circular reference from rc_easyui.Pagination.propTypes.afterPageText
            const isRequired: any;
        }

        namespace beforePageText {
            // Circular reference from rc_easyui.Pagination.propTypes.beforePageText
            const isRequired: any;
        }

        namespace displayMsg {
            // Circular reference from rc_easyui.Pagination.propTypes.displayMsg
            const isRequired: any;
        }

        namespace layout {
            // Circular reference from rc_easyui.Pagination.propTypes.layout
            const isRequired: any;
        }

        namespace links {
            // Circular reference from rc_easyui.Pagination.propTypes.links
            const isRequired: any;
        }

        namespace loading {
            // Circular reference from rc_easyui.Pagination.propTypes.loading
            const isRequired: any;
        }

        namespace onPageChange {
            // Circular reference from rc_easyui.Pagination.propTypes.onPageChange
            const isRequired: any;
        }

        namespace pageList {
            // Circular reference from rc_easyui.Pagination.propTypes.pageList
            const isRequired: any;
        }

        namespace pageNumber {
            // Circular reference from rc_easyui.Pagination.propTypes.pageNumber
            const isRequired: any;
        }

        namespace pageSize {
            // Circular reference from rc_easyui.Pagination.propTypes.pageSize
            const isRequired: any;
        }

        namespace renderExt {
            // Circular reference from rc_easyui.Pagination.propTypes.renderExt
            const isRequired: any;
        }

        namespace showPageInfo {
            // Circular reference from rc_easyui.Pagination.propTypes.showPageInfo
            const isRequired: any;
        }

        namespace showPageList {
            // Circular reference from rc_easyui.Pagination.propTypes.showPageList
            const isRequired: any;
        }

        namespace showPageRefresh {
            // Circular reference from rc_easyui.Pagination.propTypes.showPageRefresh
            const isRequired: any;
        }

        namespace total {
            // Circular reference from rc_easyui.Pagination.propTypes.total
            const isRequired: any;
        }
    }
}

export namespace Panel {
    namespace contextTypes {
        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace locale {
            // Circular reference from rc_easyui.Panel.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.Panel.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const animate: boolean;

        const border: boolean;

        const closable: boolean;

        const closeIconCls: string;

        const closed: boolean;

        const collapseIconCls: string;

        const collapsed: boolean;

        const collapsible: boolean;

        const expandIconCls: string;

        const showFooter: boolean;

        const showHeader: boolean;

        function onCollapse(): void;

        function onExpand(): void;
    }

    namespace propTypes {
        function animate(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function bodyCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function bodyStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function border(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function closable(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function closeIconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function closed(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function collapseIconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function collapsed(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function collapsible(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function expandIconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function footer(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function footerCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function footerStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function header(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function headerCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function headerStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onCollapse(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onExpand(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function showFooter(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function showHeader(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function title(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace animate {
            // Circular reference from rc_easyui.Panel.propTypes.animate
            const isRequired: any;
        }

        namespace bodyCls {
            // Circular reference from rc_easyui.Panel.propTypes.bodyCls
            const isRequired: any;
        }

        namespace bodyStyle {
            // Circular reference from rc_easyui.Panel.propTypes.bodyStyle
            const isRequired: any;
        }

        namespace border {
            // Circular reference from rc_easyui.Panel.propTypes.border
            const isRequired: any;
        }

        namespace closable {
            // Circular reference from rc_easyui.Panel.propTypes.closable
            const isRequired: any;
        }

        namespace closeIconCls {
            // Circular reference from rc_easyui.Panel.propTypes.closeIconCls
            const isRequired: any;
        }

        namespace closed {
            // Circular reference from rc_easyui.Panel.propTypes.closed
            const isRequired: any;
        }

        namespace collapseIconCls {
            // Circular reference from rc_easyui.Panel.propTypes.collapseIconCls
            const isRequired: any;
        }

        namespace collapsed {
            // Circular reference from rc_easyui.Panel.propTypes.collapsed
            const isRequired: any;
        }

        namespace collapsible {
            // Circular reference from rc_easyui.Panel.propTypes.collapsible
            const isRequired: any;
        }

        namespace expandIconCls {
            // Circular reference from rc_easyui.Panel.propTypes.expandIconCls
            const isRequired: any;
        }

        namespace footer {
            // Circular reference from rc_easyui.Panel.propTypes.footer
            const isRequired: any;
        }

        namespace footerCls {
            // Circular reference from rc_easyui.Panel.propTypes.footerCls
            const isRequired: any;
        }

        namespace footerStyle {
            // Circular reference from rc_easyui.Panel.propTypes.footerStyle
            const isRequired: any;
        }

        namespace header {
            // Circular reference from rc_easyui.Panel.propTypes.header
            const isRequired: any;
        }

        namespace headerCls {
            // Circular reference from rc_easyui.Panel.propTypes.headerCls
            const isRequired: any;
        }

        namespace headerStyle {
            // Circular reference from rc_easyui.Panel.propTypes.headerStyle
            const isRequired: any;
        }

        namespace iconCls {
            // Circular reference from rc_easyui.Panel.propTypes.iconCls
            const isRequired: any;
        }

        namespace onCollapse {
            // Circular reference from rc_easyui.Panel.propTypes.onCollapse
            const isRequired: any;
        }

        namespace onExpand {
            // Circular reference from rc_easyui.Panel.propTypes.onExpand
            const isRequired: any;
        }

        namespace showFooter {
            // Circular reference from rc_easyui.Panel.propTypes.showFooter
            const isRequired: any;
        }

        namespace showHeader {
            // Circular reference from rc_easyui.Panel.propTypes.showHeader
            const isRequired: any;
        }

        namespace title {
            // Circular reference from rc_easyui.Panel.propTypes.title
            const isRequired: any;
        }
    }
}

export namespace PasswordBox {
    namespace contextTypes {
        function fieldAdd(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldFocus(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldName(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldRemove(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace fieldAdd {
            // Circular reference from rc_easyui.PasswordBox.contextTypes.fieldAdd
            const isRequired: any;
        }

        namespace fieldBlur {
            // Circular reference from rc_easyui.PasswordBox.contextTypes.fieldBlur
            const isRequired: any;
        }

        namespace fieldChange {
            // Circular reference from rc_easyui.PasswordBox.contextTypes.fieldChange
            const isRequired: any;
        }

        namespace fieldFocus {
            // Circular reference from rc_easyui.PasswordBox.contextTypes.fieldFocus
            const isRequired: any;
        }

        namespace fieldName {
            // Circular reference from rc_easyui.PasswordBox.contextTypes.fieldName
            const isRequired: any;
        }

        namespace fieldRemove {
            // Circular reference from rc_easyui.PasswordBox.contextTypes.fieldRemove
            const isRequired: any;
        }

        namespace locale {
            // Circular reference from rc_easyui.PasswordBox.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.PasswordBox.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const checkInterval: number;

        const disabled: boolean;

        const editable: boolean;

        const eyeAlign: string;

        const iconAlign: string;

        const invalid: boolean;

        const lastDelay: number;

        const multiline: boolean;

        const passwordChar: string;

        const readOnly: boolean;

        const revealed: boolean;

        const showEye: boolean;

        const validateOnBlur: boolean;

        const validateOnChange: boolean;

        const validateOnCreate: boolean;

        const value: any;

        function onBlur(): void;

        function onChange(e: any): void;

        function onFocus(): void;

        function textFormatter(e: any): any;
    }

    namespace propTypes {
        function addonLeft(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function addonRight(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function checkInterval(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function className(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function disabled(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function editable(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function eyeAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputId(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function lastDelay(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function multiline(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onFocus(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function passwordChar(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function placeholder(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function readOnly(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function revealed(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function showEye(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function style(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function tabIndex(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function textFormatter(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function value(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace addonLeft {
            // Circular reference from rc_easyui.PasswordBox.propTypes.addonLeft
            const isRequired: any;
        }

        namespace addonRight {
            // Circular reference from rc_easyui.PasswordBox.propTypes.addonRight
            const isRequired: any;
        }

        namespace checkInterval {
            // Circular reference from rc_easyui.PasswordBox.propTypes.checkInterval
            const isRequired: any;
        }

        namespace className {
            // Circular reference from rc_easyui.PasswordBox.propTypes.className
            const isRequired: any;
        }

        namespace disabled {
            // Circular reference from rc_easyui.PasswordBox.propTypes.disabled
            const isRequired: any;
        }

        namespace editable {
            // Circular reference from rc_easyui.PasswordBox.propTypes.editable
            const isRequired: any;
        }

        namespace eyeAlign {
            // Circular reference from rc_easyui.PasswordBox.propTypes.eyeAlign
            const isRequired: any;
        }

        namespace iconAlign {
            // Circular reference from rc_easyui.PasswordBox.propTypes.iconAlign
            const isRequired: any;
        }

        namespace iconCls {
            // Circular reference from rc_easyui.PasswordBox.propTypes.iconCls
            const isRequired: any;
        }

        namespace inputCls {
            // Circular reference from rc_easyui.PasswordBox.propTypes.inputCls
            const isRequired: any;
        }

        namespace inputId {
            // Circular reference from rc_easyui.PasswordBox.propTypes.inputId
            const isRequired: any;
        }

        namespace inputStyle {
            // Circular reference from rc_easyui.PasswordBox.propTypes.inputStyle
            const isRequired: any;
        }

        namespace lastDelay {
            // Circular reference from rc_easyui.PasswordBox.propTypes.lastDelay
            const isRequired: any;
        }

        namespace multiline {
            // Circular reference from rc_easyui.PasswordBox.propTypes.multiline
            const isRequired: any;
        }

        namespace onBlur {
            // Circular reference from rc_easyui.PasswordBox.propTypes.onBlur
            const isRequired: any;
        }

        namespace onChange {
            // Circular reference from rc_easyui.PasswordBox.propTypes.onChange
            const isRequired: any;
        }

        namespace onFocus {
            // Circular reference from rc_easyui.PasswordBox.propTypes.onFocus
            const isRequired: any;
        }

        namespace passwordChar {
            // Circular reference from rc_easyui.PasswordBox.propTypes.passwordChar
            const isRequired: any;
        }

        namespace placeholder {
            // Circular reference from rc_easyui.PasswordBox.propTypes.placeholder
            const isRequired: any;
        }

        namespace readOnly {
            // Circular reference from rc_easyui.PasswordBox.propTypes.readOnly
            const isRequired: any;
        }

        namespace revealed {
            // Circular reference from rc_easyui.PasswordBox.propTypes.revealed
            const isRequired: any;
        }

        namespace showEye {
            // Circular reference from rc_easyui.PasswordBox.propTypes.showEye
            const isRequired: any;
        }

        namespace style {
            // Circular reference from rc_easyui.PasswordBox.propTypes.style
            const isRequired: any;
        }

        namespace tabIndex {
            // Circular reference from rc_easyui.PasswordBox.propTypes.tabIndex
            const isRequired: any;
        }

        namespace textFormatter {
            // Circular reference from rc_easyui.PasswordBox.propTypes.textFormatter
            const isRequired: any;
        }

        namespace value {
            // Circular reference from rc_easyui.PasswordBox.propTypes.value
            const isRequired: any;
        }
    }
}

export namespace ProgressBar {
    namespace contextTypes {
        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace locale {
            // Circular reference from rc_easyui.ProgressBar.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.ProgressBar.contextTypes.t
            const isRequired: any;
        }
    }

    namespace propTypes {
        function barCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function barStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function className(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function showValue(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function style(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function value(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace barCls {
            // Circular reference from rc_easyui.ProgressBar.propTypes.barCls
            const isRequired: any;
        }

        namespace barStyle {
            // Circular reference from rc_easyui.ProgressBar.propTypes.barStyle
            const isRequired: any;
        }

        namespace className {
            // Circular reference from rc_easyui.ProgressBar.propTypes.className
            const isRequired: any;
        }

        namespace showValue {
            // Circular reference from rc_easyui.ProgressBar.propTypes.showValue
            const isRequired: any;
        }

        namespace style {
            // Circular reference from rc_easyui.ProgressBar.propTypes.style
            const isRequired: any;
        }

        namespace value {
            // Circular reference from rc_easyui.ProgressBar.propTypes.value
            const isRequired: any;
        }
    }
}

export namespace RadioButton {
    namespace contextTypes {
        function fieldAdd(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldFocus(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldName(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldRemove(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace fieldAdd {
            // Circular reference from rc_easyui.RadioButton.contextTypes.fieldAdd
            const isRequired: any;
        }

        namespace fieldBlur {
            // Circular reference from rc_easyui.RadioButton.contextTypes.fieldBlur
            const isRequired: any;
        }

        namespace fieldChange {
            // Circular reference from rc_easyui.RadioButton.contextTypes.fieldChange
            const isRequired: any;
        }

        namespace fieldFocus {
            // Circular reference from rc_easyui.RadioButton.contextTypes.fieldFocus
            const isRequired: any;
        }

        namespace fieldName {
            // Circular reference from rc_easyui.RadioButton.contextTypes.fieldName
            const isRequired: any;
        }

        namespace fieldRemove {
            // Circular reference from rc_easyui.RadioButton.contextTypes.fieldRemove
            const isRequired: any;
        }

        namespace locale {
            // Circular reference from rc_easyui.RadioButton.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.RadioButton.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const disabled: boolean;

        function onChange(e: any): void;
    }

    namespace propTypes {
        function disabled(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function groupValue(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputId(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function value(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace disabled {
            // Circular reference from rc_easyui.RadioButton.propTypes.disabled
            const isRequired: any;
        }

        namespace groupValue {
            // Circular reference from rc_easyui.RadioButton.propTypes.groupValue
            const isRequired: any;
        }

        namespace inputId {
            // Circular reference from rc_easyui.RadioButton.propTypes.inputId
            const isRequired: any;
        }

        namespace onChange {
            // Circular reference from rc_easyui.RadioButton.propTypes.onChange
            const isRequired: any;
        }

        namespace value {
            // Circular reference from rc_easyui.RadioButton.propTypes.value
            const isRequired: any;
        }
    }
}

export namespace Resizable {
    namespace contextTypes {
        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace locale {
            // Circular reference from rc_easyui.Resizable.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.Resizable.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const disabled: boolean;

        const edge: number;

        const handles: string;

        const maxHeight: number;

        const maxWidth: number;

        const minHeight: number;

        const minWidth: number;

        function onResizeStart(e: any): void;

        function onResizeStop(e: any): void;

        function onResizing(e: any): void;
    }

    namespace propTypes {
        function disabled(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function edge(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function handles(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function maxHeight(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function maxWidth(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function minHeight(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function minWidth(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onResizeStart(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onResizeStop(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onResizing(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace disabled {
            // Circular reference from rc_easyui.Resizable.propTypes.disabled
            const isRequired: any;
        }

        namespace edge {
            // Circular reference from rc_easyui.Resizable.propTypes.edge
            const isRequired: any;
        }

        namespace handles {
            // Circular reference from rc_easyui.Resizable.propTypes.handles
            const isRequired: any;
        }

        namespace maxHeight {
            // Circular reference from rc_easyui.Resizable.propTypes.maxHeight
            const isRequired: any;
        }

        namespace maxWidth {
            // Circular reference from rc_easyui.Resizable.propTypes.maxWidth
            const isRequired: any;
        }

        namespace minHeight {
            // Circular reference from rc_easyui.Resizable.propTypes.minHeight
            const isRequired: any;
        }

        namespace minWidth {
            // Circular reference from rc_easyui.Resizable.propTypes.minWidth
            const isRequired: any;
        }

        namespace onResizeStart {
            // Circular reference from rc_easyui.Resizable.propTypes.onResizeStart
            const isRequired: any;
        }

        namespace onResizeStop {
            // Circular reference from rc_easyui.Resizable.propTypes.onResizeStop
            const isRequired: any;
        }

        namespace onResizing {
            // Circular reference from rc_easyui.Resizable.propTypes.onResizing
            const isRequired: any;
        }
    }
}

export namespace SearchBox {
    namespace contextTypes {
        function fieldAdd(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldFocus(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldName(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldRemove(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace fieldAdd {
            // Circular reference from rc_easyui.SearchBox.contextTypes.fieldAdd
            const isRequired: any;
        }

        namespace fieldBlur {
            // Circular reference from rc_easyui.SearchBox.contextTypes.fieldBlur
            const isRequired: any;
        }

        namespace fieldChange {
            // Circular reference from rc_easyui.SearchBox.contextTypes.fieldChange
            const isRequired: any;
        }

        namespace fieldFocus {
            // Circular reference from rc_easyui.SearchBox.contextTypes.fieldFocus
            const isRequired: any;
        }

        namespace fieldName {
            // Circular reference from rc_easyui.SearchBox.contextTypes.fieldName
            const isRequired: any;
        }

        namespace fieldRemove {
            // Circular reference from rc_easyui.SearchBox.contextTypes.fieldRemove
            const isRequired: any;
        }

        namespace locale {
            // Circular reference from rc_easyui.SearchBox.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.SearchBox.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const buttonAlign: string;

        const buttonIconCls: string;

        const categories: any[];

        const disabled: boolean;

        const editable: boolean;

        const iconAlign: string;

        const invalid: boolean;

        const menuAlign: string;

        const multiline: boolean;

        const readOnly: boolean;

        const validateOnBlur: boolean;

        const validateOnChange: boolean;

        const validateOnCreate: boolean;

        const value: any;

        function onBlur(): void;

        function onChange(e: any): void;

        function onFocus(): void;

        function onSearch(e: any): void;

        function textFormatter(e: any): any;
    }

    namespace propTypes {
        function addonLeft(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function addonRight(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function buttonAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function buttonIconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function categories(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function category(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function className(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function disabled(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function editable(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputId(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function menuAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function multiline(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onFocus(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onSearch(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function placeholder(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function readOnly(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function style(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function tabIndex(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function textFormatter(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function value(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace addonLeft {
            // Circular reference from rc_easyui.SearchBox.propTypes.addonLeft
            const isRequired: any;
        }

        namespace addonRight {
            // Circular reference from rc_easyui.SearchBox.propTypes.addonRight
            const isRequired: any;
        }

        namespace buttonAlign {
            // Circular reference from rc_easyui.SearchBox.propTypes.buttonAlign
            const isRequired: any;
        }

        namespace buttonIconCls {
            // Circular reference from rc_easyui.SearchBox.propTypes.buttonIconCls
            const isRequired: any;
        }

        namespace categories {
            // Circular reference from rc_easyui.SearchBox.propTypes.categories
            const isRequired: any;
        }

        namespace category {
            // Circular reference from rc_easyui.SearchBox.propTypes.category
            const isRequired: any;
        }

        namespace className {
            // Circular reference from rc_easyui.SearchBox.propTypes.className
            const isRequired: any;
        }

        namespace disabled {
            // Circular reference from rc_easyui.SearchBox.propTypes.disabled
            const isRequired: any;
        }

        namespace editable {
            // Circular reference from rc_easyui.SearchBox.propTypes.editable
            const isRequired: any;
        }

        namespace iconAlign {
            // Circular reference from rc_easyui.SearchBox.propTypes.iconAlign
            const isRequired: any;
        }

        namespace iconCls {
            // Circular reference from rc_easyui.SearchBox.propTypes.iconCls
            const isRequired: any;
        }

        namespace inputCls {
            // Circular reference from rc_easyui.SearchBox.propTypes.inputCls
            const isRequired: any;
        }

        namespace inputId {
            // Circular reference from rc_easyui.SearchBox.propTypes.inputId
            const isRequired: any;
        }

        namespace inputStyle {
            // Circular reference from rc_easyui.SearchBox.propTypes.inputStyle
            const isRequired: any;
        }

        namespace menuAlign {
            // Circular reference from rc_easyui.SearchBox.propTypes.menuAlign
            const isRequired: any;
        }

        namespace multiline {
            // Circular reference from rc_easyui.SearchBox.propTypes.multiline
            const isRequired: any;
        }

        namespace onBlur {
            // Circular reference from rc_easyui.SearchBox.propTypes.onBlur
            const isRequired: any;
        }

        namespace onChange {
            // Circular reference from rc_easyui.SearchBox.propTypes.onChange
            const isRequired: any;
        }

        namespace onFocus {
            // Circular reference from rc_easyui.SearchBox.propTypes.onFocus
            const isRequired: any;
        }

        namespace onSearch {
            // Circular reference from rc_easyui.SearchBox.propTypes.onSearch
            const isRequired: any;
        }

        namespace placeholder {
            // Circular reference from rc_easyui.SearchBox.propTypes.placeholder
            const isRequired: any;
        }

        namespace readOnly {
            // Circular reference from rc_easyui.SearchBox.propTypes.readOnly
            const isRequired: any;
        }

        namespace style {
            // Circular reference from rc_easyui.SearchBox.propTypes.style
            const isRequired: any;
        }

        namespace tabIndex {
            // Circular reference from rc_easyui.SearchBox.propTypes.tabIndex
            const isRequired: any;
        }

        namespace textFormatter {
            // Circular reference from rc_easyui.SearchBox.propTypes.textFormatter
            const isRequired: any;
        }

        namespace value {
            // Circular reference from rc_easyui.SearchBox.propTypes.value
            const isRequired: any;
        }
    }
}

export namespace SideMenu {
    namespace contextTypes {
        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace locale {
            // Circular reference from rc_easyui.SideMenu.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.SideMenu.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const animate: boolean;

        const border: boolean;

        const collapsed: boolean;

        const floatMenuPosition: string;

        const floatMenuWidth: number;

        const multiple: boolean;

        const showCollapsedText: boolean;

        function onItemClick(e: any): void;

        function onSelectionChange(e: any): void;
    }

    namespace propTypes {
        function animate(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function border(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function className(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function collapsed(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function collapsedCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function data(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function floatMenuPosition(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function floatMenuWidth(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function multiple(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function selection(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function showCollapsedText(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function style(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace animate {
            // Circular reference from rc_easyui.SideMenu.propTypes.animate
            const isRequired: any;
        }

        namespace border {
            // Circular reference from rc_easyui.SideMenu.propTypes.border
            const isRequired: any;
        }

        namespace className {
            // Circular reference from rc_easyui.SideMenu.propTypes.className
            const isRequired: any;
        }

        namespace collapsed {
            // Circular reference from rc_easyui.SideMenu.propTypes.collapsed
            const isRequired: any;
        }

        namespace collapsedCls {
            // Circular reference from rc_easyui.SideMenu.propTypes.collapsedCls
            const isRequired: any;
        }

        namespace data {
            // Circular reference from rc_easyui.SideMenu.propTypes.data
            const isRequired: any;
        }

        namespace floatMenuPosition {
            // Circular reference from rc_easyui.SideMenu.propTypes.floatMenuPosition
            const isRequired: any;
        }

        namespace floatMenuWidth {
            // Circular reference from rc_easyui.SideMenu.propTypes.floatMenuWidth
            const isRequired: any;
        }

        namespace multiple {
            // Circular reference from rc_easyui.SideMenu.propTypes.multiple
            const isRequired: any;
        }

        namespace selection {
            // Circular reference from rc_easyui.SideMenu.propTypes.selection
            const isRequired: any;
        }

        namespace showCollapsedText {
            // Circular reference from rc_easyui.SideMenu.propTypes.showCollapsedText
            const isRequired: any;
        }

        namespace style {
            // Circular reference from rc_easyui.SideMenu.propTypes.style
            const isRequired: any;
        }
    }
}

export namespace Slider {
    namespace contextTypes {
        function fieldAdd(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldFocus(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldName(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldRemove(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace fieldAdd {
            // Circular reference from rc_easyui.Slider.contextTypes.fieldAdd
            const isRequired: any;
        }

        namespace fieldBlur {
            // Circular reference from rc_easyui.Slider.contextTypes.fieldBlur
            const isRequired: any;
        }

        namespace fieldChange {
            // Circular reference from rc_easyui.Slider.contextTypes.fieldChange
            const isRequired: any;
        }

        namespace fieldFocus {
            // Circular reference from rc_easyui.Slider.contextTypes.fieldFocus
            const isRequired: any;
        }

        namespace fieldName {
            // Circular reference from rc_easyui.Slider.contextTypes.fieldName
            const isRequired: any;
        }

        namespace fieldRemove {
            // Circular reference from rc_easyui.Slider.contextTypes.fieldRemove
            const isRequired: any;
        }

        namespace locale {
            // Circular reference from rc_easyui.Slider.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.Slider.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const disabled: boolean;

        const invalid: boolean;

        const max: number;

        const min: number;

        const mode: string;

        const range: boolean;

        const reversed: boolean;

        const rule: any[];

        const showTip: boolean;

        const step: number;

        const validateOnBlur: boolean;

        const validateOnChange: boolean;

        const validateOnCreate: boolean;

        function onChange(e: any): void;
    }

    namespace propTypes {
        function disabled(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function invalid(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function max(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function min(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function mode(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function name(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function range(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function reversed(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function rule(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function showTip(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function step(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function validateOnBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function validateOnChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function validateOnCreate(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function value(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace disabled {
            // Circular reference from rc_easyui.Slider.propTypes.disabled
            const isRequired: any;
        }

        namespace invalid {
            // Circular reference from rc_easyui.Slider.propTypes.invalid
            const isRequired: any;
        }

        namespace max {
            // Circular reference from rc_easyui.Slider.propTypes.max
            const isRequired: any;
        }

        namespace min {
            // Circular reference from rc_easyui.Slider.propTypes.min
            const isRequired: any;
        }

        namespace mode {
            // Circular reference from rc_easyui.Slider.propTypes.mode
            const isRequired: any;
        }

        namespace name {
            // Circular reference from rc_easyui.Slider.propTypes.name
            const isRequired: any;
        }

        namespace range {
            // Circular reference from rc_easyui.Slider.propTypes.range
            const isRequired: any;
        }

        namespace reversed {
            // Circular reference from rc_easyui.Slider.propTypes.reversed
            const isRequired: any;
        }

        namespace rule {
            // Circular reference from rc_easyui.Slider.propTypes.rule
            const isRequired: any;
        }

        namespace showTip {
            // Circular reference from rc_easyui.Slider.propTypes.showTip
            const isRequired: any;
        }

        namespace step {
            // Circular reference from rc_easyui.Slider.propTypes.step
            const isRequired: any;
        }

        namespace validateOnBlur {
            // Circular reference from rc_easyui.Slider.propTypes.validateOnBlur
            const isRequired: any;
        }

        namespace validateOnChange {
            // Circular reference from rc_easyui.Slider.propTypes.validateOnChange
            const isRequired: any;
        }

        namespace validateOnCreate {
            // Circular reference from rc_easyui.Slider.propTypes.validateOnCreate
            const isRequired: any;
        }

        namespace value {
            // Circular reference from rc_easyui.Slider.propTypes.value
            const isRequired: any;
        }
    }
}

export namespace SplitButton {
    namespace contextTypes {
        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace locale {
            // Circular reference from rc_easyui.SplitButton.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.SplitButton.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const disabled: boolean;

        const duration: number;

        const iconAlign: string;

        const menuAlign: string;

        const outline: boolean;

        const plain: boolean;

        const selected: boolean;

        const size: string;

        const toggle: boolean;

        function onClick(): void;

        function onMenuHide(): void;

        function onMenuItemClick(e: any): void;

        function onMenuShow(): void;
    }

    namespace propTypes {
        function className(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function disabled(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function duration(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function href(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function menu(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function menuAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onClick(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function outline(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function plain(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function selected(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function size(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function style(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function text(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function toggle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace className {
            // Circular reference from rc_easyui.SplitButton.propTypes.className
            const isRequired: any;
        }

        namespace disabled {
            // Circular reference from rc_easyui.SplitButton.propTypes.disabled
            const isRequired: any;
        }

        namespace duration {
            // Circular reference from rc_easyui.SplitButton.propTypes.duration
            const isRequired: any;
        }

        namespace href {
            // Circular reference from rc_easyui.SplitButton.propTypes.href
            const isRequired: any;
        }

        namespace iconAlign {
            // Circular reference from rc_easyui.SplitButton.propTypes.iconAlign
            const isRequired: any;
        }

        namespace iconCls {
            // Circular reference from rc_easyui.SplitButton.propTypes.iconCls
            const isRequired: any;
        }

        namespace menu {
            // Circular reference from rc_easyui.SplitButton.propTypes.menu
            const isRequired: any;
        }

        namespace menuAlign {
            // Circular reference from rc_easyui.SplitButton.propTypes.menuAlign
            const isRequired: any;
        }

        namespace onClick {
            // Circular reference from rc_easyui.SplitButton.propTypes.onClick
            const isRequired: any;
        }

        namespace outline {
            // Circular reference from rc_easyui.SplitButton.propTypes.outline
            const isRequired: any;
        }

        namespace plain {
            // Circular reference from rc_easyui.SplitButton.propTypes.plain
            const isRequired: any;
        }

        namespace selected {
            // Circular reference from rc_easyui.SplitButton.propTypes.selected
            const isRequired: any;
        }

        namespace size {
            // Circular reference from rc_easyui.SplitButton.propTypes.size
            const isRequired: any;
        }

        namespace style {
            // Circular reference from rc_easyui.SplitButton.propTypes.style
            const isRequired: any;
        }

        namespace text {
            // Circular reference from rc_easyui.SplitButton.propTypes.text
            const isRequired: any;
        }

        namespace toggle {
            // Circular reference from rc_easyui.SplitButton.propTypes.toggle
            const isRequired: any;
        }
    }
}

export namespace SubMenu {
    namespace contextTypes {
        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace locale {
            // Circular reference from rc_easyui.SubMenu.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.SubMenu.contextTypes.t
            const isRequired: any;
        }
    }

    namespace propTypes {
        function className(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function menuCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function menuStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function menuWidth(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function style(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace className {
            // Circular reference from rc_easyui.SubMenu.propTypes.className
            const isRequired: any;
        }

        namespace menuCls {
            // Circular reference from rc_easyui.SubMenu.propTypes.menuCls
            const isRequired: any;
        }

        namespace menuStyle {
            // Circular reference from rc_easyui.SubMenu.propTypes.menuStyle
            const isRequired: any;
        }

        namespace menuWidth {
            // Circular reference from rc_easyui.SubMenu.propTypes.menuWidth
            const isRequired: any;
        }

        namespace style {
            // Circular reference from rc_easyui.SubMenu.propTypes.style
            const isRequired: any;
        }
    }
}

export namespace SwitchButton {
    namespace contextTypes {
        function fieldAdd(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldFocus(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldName(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldRemove(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace fieldAdd {
            // Circular reference from rc_easyui.SwitchButton.contextTypes.fieldAdd
            const isRequired: any;
        }

        namespace fieldBlur {
            // Circular reference from rc_easyui.SwitchButton.contextTypes.fieldBlur
            const isRequired: any;
        }

        namespace fieldChange {
            // Circular reference from rc_easyui.SwitchButton.contextTypes.fieldChange
            const isRequired: any;
        }

        namespace fieldFocus {
            // Circular reference from rc_easyui.SwitchButton.contextTypes.fieldFocus
            const isRequired: any;
        }

        namespace fieldName {
            // Circular reference from rc_easyui.SwitchButton.contextTypes.fieldName
            const isRequired: any;
        }

        namespace fieldRemove {
            // Circular reference from rc_easyui.SwitchButton.contextTypes.fieldRemove
            const isRequired: any;
        }

        namespace locale {
            // Circular reference from rc_easyui.SwitchButton.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.SwitchButton.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const disabled: boolean;

        const invalid: boolean;

        const offText: string;

        const onText: string;

        const readonly: boolean;

        const validateOnBlur: boolean;

        const validateOnChange: boolean;

        const validateOnCreate: boolean;

        function onChange(e: any): void;
    }

    namespace propTypes {
        function disabled(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function handleText(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputId(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function invalid(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function name(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function offText(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onText(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function readonly(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function validateOnBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function validateOnChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function validateOnCreate(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function value(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace disabled {
            // Circular reference from rc_easyui.SwitchButton.propTypes.disabled
            const isRequired: any;
        }

        namespace handleText {
            // Circular reference from rc_easyui.SwitchButton.propTypes.handleText
            const isRequired: any;
        }

        namespace inputId {
            // Circular reference from rc_easyui.SwitchButton.propTypes.inputId
            const isRequired: any;
        }

        namespace invalid {
            // Circular reference from rc_easyui.SwitchButton.propTypes.invalid
            const isRequired: any;
        }

        namespace name {
            // Circular reference from rc_easyui.SwitchButton.propTypes.name
            const isRequired: any;
        }

        namespace offText {
            // Circular reference from rc_easyui.SwitchButton.propTypes.offText
            const isRequired: any;
        }

        namespace onText {
            // Circular reference from rc_easyui.SwitchButton.propTypes.onText
            const isRequired: any;
        }

        namespace readonly {
            // Circular reference from rc_easyui.SwitchButton.propTypes.readonly
            const isRequired: any;
        }

        namespace validateOnBlur {
            // Circular reference from rc_easyui.SwitchButton.propTypes.validateOnBlur
            const isRequired: any;
        }

        namespace validateOnChange {
            // Circular reference from rc_easyui.SwitchButton.propTypes.validateOnChange
            const isRequired: any;
        }

        namespace validateOnCreate {
            // Circular reference from rc_easyui.SwitchButton.propTypes.validateOnCreate
            const isRequired: any;
        }

        namespace value {
            // Circular reference from rc_easyui.SwitchButton.propTypes.value
            const isRequired: any;
        }
    }
}

export namespace TabPanel {
    namespace contextTypes {
        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace locale {
            // Circular reference from rc_easyui.TabPanel.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.TabPanel.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const animate: boolean;

        const border: boolean;

        const closable: boolean;

        const closeIconCls: string;

        const closed: boolean;

        const collapseIconCls: string;

        const collapsed: boolean;

        const collapsible: boolean;

        const disabled: boolean;

        const expandIconCls: string;

        const selected: boolean;

        const showFooter: boolean;

        const showHeader: boolean;

        function onCollapse(): void;

        function onExpand(): void;
    }

    namespace propTypes {
        function animate(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function bodyCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function bodyStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function border(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function closable(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function closeIconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function closed(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function collapseIconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function collapsed(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function collapsible(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function disabled(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function expandIconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function footer(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function footerCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function footerStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function header(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function headerCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function headerStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onCollapse(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onExpand(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function selected(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function showFooter(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function showHeader(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function title(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace animate {
            // Circular reference from rc_easyui.TabPanel.propTypes.animate
            const isRequired: any;
        }

        namespace bodyCls {
            // Circular reference from rc_easyui.TabPanel.propTypes.bodyCls
            const isRequired: any;
        }

        namespace bodyStyle {
            // Circular reference from rc_easyui.TabPanel.propTypes.bodyStyle
            const isRequired: any;
        }

        namespace border {
            // Circular reference from rc_easyui.TabPanel.propTypes.border
            const isRequired: any;
        }

        namespace closable {
            // Circular reference from rc_easyui.TabPanel.propTypes.closable
            const isRequired: any;
        }

        namespace closeIconCls {
            // Circular reference from rc_easyui.TabPanel.propTypes.closeIconCls
            const isRequired: any;
        }

        namespace closed {
            // Circular reference from rc_easyui.TabPanel.propTypes.closed
            const isRequired: any;
        }

        namespace collapseIconCls {
            // Circular reference from rc_easyui.TabPanel.propTypes.collapseIconCls
            const isRequired: any;
        }

        namespace collapsed {
            // Circular reference from rc_easyui.TabPanel.propTypes.collapsed
            const isRequired: any;
        }

        namespace collapsible {
            // Circular reference from rc_easyui.TabPanel.propTypes.collapsible
            const isRequired: any;
        }

        namespace disabled {
            // Circular reference from rc_easyui.TabPanel.propTypes.disabled
            const isRequired: any;
        }

        namespace expandIconCls {
            // Circular reference from rc_easyui.TabPanel.propTypes.expandIconCls
            const isRequired: any;
        }

        namespace footer {
            // Circular reference from rc_easyui.TabPanel.propTypes.footer
            const isRequired: any;
        }

        namespace footerCls {
            // Circular reference from rc_easyui.TabPanel.propTypes.footerCls
            const isRequired: any;
        }

        namespace footerStyle {
            // Circular reference from rc_easyui.TabPanel.propTypes.footerStyle
            const isRequired: any;
        }

        namespace header {
            // Circular reference from rc_easyui.TabPanel.propTypes.header
            const isRequired: any;
        }

        namespace headerCls {
            // Circular reference from rc_easyui.TabPanel.propTypes.headerCls
            const isRequired: any;
        }

        namespace headerStyle {
            // Circular reference from rc_easyui.TabPanel.propTypes.headerStyle
            const isRequired: any;
        }

        namespace iconCls {
            // Circular reference from rc_easyui.TabPanel.propTypes.iconCls
            const isRequired: any;
        }

        namespace onCollapse {
            // Circular reference from rc_easyui.TabPanel.propTypes.onCollapse
            const isRequired: any;
        }

        namespace onExpand {
            // Circular reference from rc_easyui.TabPanel.propTypes.onExpand
            const isRequired: any;
        }

        namespace selected {
            // Circular reference from rc_easyui.TabPanel.propTypes.selected
            const isRequired: any;
        }

        namespace showFooter {
            // Circular reference from rc_easyui.TabPanel.propTypes.showFooter
            const isRequired: any;
        }

        namespace showHeader {
            // Circular reference from rc_easyui.TabPanel.propTypes.showHeader
            const isRequired: any;
        }

        namespace title {
            // Circular reference from rc_easyui.TabPanel.propTypes.title
            const isRequired: any;
        }
    }
}

export namespace Tabs {
    namespace contextTypes {
        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace locale {
            // Circular reference from rc_easyui.Tabs.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.Tabs.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const border: boolean;

        const headerHeight: number;

        const headerWidth: number;

        const justified: boolean;

        const narrow: boolean;

        const plain: boolean;

        const scrollIncrement: number;

        const scrollable: boolean;

        const selectedIndex: number;

        const tabHeight: number;

        const tabPosition: string;

        function onTabClose(e: any): void;

        function onTabSelect(e: any): void;

        function onTabUnselect(e: any): void;
    }

    namespace propTypes {
        function border(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function className(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function headerHeight(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function headerWidth(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function justified(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function narrow(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function plain(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function scrollIncrement(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function scrollable(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function selectedIndex(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function style(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function tabHeight(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function tabPosition(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function tabWidth(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace border {
            // Circular reference from rc_easyui.Tabs.propTypes.border
            const isRequired: any;
        }

        namespace className {
            // Circular reference from rc_easyui.Tabs.propTypes.className
            const isRequired: any;
        }

        namespace headerHeight {
            // Circular reference from rc_easyui.Tabs.propTypes.headerHeight
            const isRequired: any;
        }

        namespace headerWidth {
            // Circular reference from rc_easyui.Tabs.propTypes.headerWidth
            const isRequired: any;
        }

        namespace justified {
            // Circular reference from rc_easyui.Tabs.propTypes.justified
            const isRequired: any;
        }

        namespace narrow {
            // Circular reference from rc_easyui.Tabs.propTypes.narrow
            const isRequired: any;
        }

        namespace plain {
            // Circular reference from rc_easyui.Tabs.propTypes.plain
            const isRequired: any;
        }

        namespace scrollIncrement {
            // Circular reference from rc_easyui.Tabs.propTypes.scrollIncrement
            const isRequired: any;
        }

        namespace scrollable {
            // Circular reference from rc_easyui.Tabs.propTypes.scrollable
            const isRequired: any;
        }

        namespace selectedIndex {
            // Circular reference from rc_easyui.Tabs.propTypes.selectedIndex
            const isRequired: any;
        }

        namespace style {
            // Circular reference from rc_easyui.Tabs.propTypes.style
            const isRequired: any;
        }

        namespace tabHeight {
            // Circular reference from rc_easyui.Tabs.propTypes.tabHeight
            const isRequired: any;
        }

        namespace tabPosition {
            // Circular reference from rc_easyui.Tabs.propTypes.tabPosition
            const isRequired: any;
        }

        namespace tabWidth {
            // Circular reference from rc_easyui.Tabs.propTypes.tabWidth
            const isRequired: any;
        }
    }
}

export namespace TagBox {
    namespace contextTypes {
        function fieldAdd(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldFocus(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldName(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldRemove(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace fieldAdd {
            // Circular reference from rc_easyui.TagBox.contextTypes.fieldAdd
            const isRequired: any;
        }

        namespace fieldBlur {
            // Circular reference from rc_easyui.TagBox.contextTypes.fieldBlur
            const isRequired: any;
        }

        namespace fieldChange {
            // Circular reference from rc_easyui.TagBox.contextTypes.fieldChange
            const isRequired: any;
        }

        namespace fieldFocus {
            // Circular reference from rc_easyui.TagBox.contextTypes.fieldFocus
            const isRequired: any;
        }

        namespace fieldName {
            // Circular reference from rc_easyui.TagBox.contextTypes.fieldName
            const isRequired: any;
        }

        namespace fieldRemove {
            // Circular reference from rc_easyui.TagBox.contextTypes.fieldRemove
            const isRequired: any;
        }

        namespace locale {
            // Circular reference from rc_easyui.TagBox.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.TagBox.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const arrowAlign: string;

        const arrowIconCls: string;

        const data: any[];

        const delay: number;

        const disabled: boolean;

        const editable: boolean;

        const hasDownArrow: boolean;

        const iconAlign: string;

        const invalid: boolean;

        const lazy: boolean;

        const limitToList: boolean;

        const multiline: boolean;

        const multiple: boolean;

        const pageNumber: number;

        const pageSize: number;

        const panelAlign: string;

        const readOnly: boolean;

        const rowHeight: number;

        const separator: string;

        const textField: string;

        const total: number;

        const validateOnBlur: boolean;

        const validateOnChange: boolean;

        const validateOnCreate: boolean;

        const value: any;

        const valueField: string;

        const virtualScroll: boolean;

        function filter(e: any, t: any): any;

        function onBlur(): void;

        function onChange(e: any): void;

        function onFilterChange(e: any): void;

        function onFocus(): void;

        function onSelectionChange(e: any): void;

        function textFormatter(e: any): any;
    }

    namespace propTypes {
        function addonLeft(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function addonRight(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function arrowAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function arrowIconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function className(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function data(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function delay(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function disabled(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function editable(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function filter(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function groupField(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function hasDownArrow(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputId(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function lazy(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function limitToList(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function multiline(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function multiple(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onFocus(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function pageNumber(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function pageSize(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function panelAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function panelStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function placeholder(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function readOnly(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function renderItem(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function rowHeight(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function separator(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function style(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function tabIndex(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function tagCss(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function textField(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function textFormatter(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function total(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function value(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function valueField(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function virtualScroll(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace addonLeft {
            // Circular reference from rc_easyui.TagBox.propTypes.addonLeft
            const isRequired: any;
        }

        namespace addonRight {
            // Circular reference from rc_easyui.TagBox.propTypes.addonRight
            const isRequired: any;
        }

        namespace arrowAlign {
            // Circular reference from rc_easyui.TagBox.propTypes.arrowAlign
            const isRequired: any;
        }

        namespace arrowIconCls {
            // Circular reference from rc_easyui.TagBox.propTypes.arrowIconCls
            const isRequired: any;
        }

        namespace className {
            // Circular reference from rc_easyui.TagBox.propTypes.className
            const isRequired: any;
        }

        namespace data {
            // Circular reference from rc_easyui.TagBox.propTypes.data
            const isRequired: any;
        }

        namespace delay {
            // Circular reference from rc_easyui.TagBox.propTypes.delay
            const isRequired: any;
        }

        namespace disabled {
            // Circular reference from rc_easyui.TagBox.propTypes.disabled
            const isRequired: any;
        }

        namespace editable {
            // Circular reference from rc_easyui.TagBox.propTypes.editable
            const isRequired: any;
        }

        namespace filter {
            // Circular reference from rc_easyui.TagBox.propTypes.filter
            const isRequired: any;
        }

        namespace groupField {
            // Circular reference from rc_easyui.TagBox.propTypes.groupField
            const isRequired: any;
        }

        namespace hasDownArrow {
            // Circular reference from rc_easyui.TagBox.propTypes.hasDownArrow
            const isRequired: any;
        }

        namespace iconAlign {
            // Circular reference from rc_easyui.TagBox.propTypes.iconAlign
            const isRequired: any;
        }

        namespace iconCls {
            // Circular reference from rc_easyui.TagBox.propTypes.iconCls
            const isRequired: any;
        }

        namespace inputCls {
            // Circular reference from rc_easyui.TagBox.propTypes.inputCls
            const isRequired: any;
        }

        namespace inputId {
            // Circular reference from rc_easyui.TagBox.propTypes.inputId
            const isRequired: any;
        }

        namespace inputStyle {
            // Circular reference from rc_easyui.TagBox.propTypes.inputStyle
            const isRequired: any;
        }

        namespace lazy {
            // Circular reference from rc_easyui.TagBox.propTypes.lazy
            const isRequired: any;
        }

        namespace limitToList {
            // Circular reference from rc_easyui.TagBox.propTypes.limitToList
            const isRequired: any;
        }

        namespace multiline {
            // Circular reference from rc_easyui.TagBox.propTypes.multiline
            const isRequired: any;
        }

        namespace multiple {
            // Circular reference from rc_easyui.TagBox.propTypes.multiple
            const isRequired: any;
        }

        namespace onBlur {
            // Circular reference from rc_easyui.TagBox.propTypes.onBlur
            const isRequired: any;
        }

        namespace onChange {
            // Circular reference from rc_easyui.TagBox.propTypes.onChange
            const isRequired: any;
        }

        namespace onFocus {
            // Circular reference from rc_easyui.TagBox.propTypes.onFocus
            const isRequired: any;
        }

        namespace pageNumber {
            // Circular reference from rc_easyui.TagBox.propTypes.pageNumber
            const isRequired: any;
        }

        namespace pageSize {
            // Circular reference from rc_easyui.TagBox.propTypes.pageSize
            const isRequired: any;
        }

        namespace panelAlign {
            // Circular reference from rc_easyui.TagBox.propTypes.panelAlign
            const isRequired: any;
        }

        namespace panelStyle {
            // Circular reference from rc_easyui.TagBox.propTypes.panelStyle
            const isRequired: any;
        }

        namespace placeholder {
            // Circular reference from rc_easyui.TagBox.propTypes.placeholder
            const isRequired: any;
        }

        namespace readOnly {
            // Circular reference from rc_easyui.TagBox.propTypes.readOnly
            const isRequired: any;
        }

        namespace renderItem {
            // Circular reference from rc_easyui.TagBox.propTypes.renderItem
            const isRequired: any;
        }

        namespace rowHeight {
            // Circular reference from rc_easyui.TagBox.propTypes.rowHeight
            const isRequired: any;
        }

        namespace separator {
            // Circular reference from rc_easyui.TagBox.propTypes.separator
            const isRequired: any;
        }

        namespace style {
            // Circular reference from rc_easyui.TagBox.propTypes.style
            const isRequired: any;
        }

        namespace tabIndex {
            // Circular reference from rc_easyui.TagBox.propTypes.tabIndex
            const isRequired: any;
        }

        namespace tagCss {
            // Circular reference from rc_easyui.TagBox.propTypes.tagCss
            const isRequired: any;
        }

        namespace textField {
            // Circular reference from rc_easyui.TagBox.propTypes.textField
            const isRequired: any;
        }

        namespace textFormatter {
            // Circular reference from rc_easyui.TagBox.propTypes.textFormatter
            const isRequired: any;
        }

        namespace total {
            // Circular reference from rc_easyui.TagBox.propTypes.total
            const isRequired: any;
        }

        namespace value {
            // Circular reference from rc_easyui.TagBox.propTypes.value
            const isRequired: any;
        }

        namespace valueField {
            // Circular reference from rc_easyui.TagBox.propTypes.valueField
            const isRequired: any;
        }

        namespace virtualScroll {
            // Circular reference from rc_easyui.TagBox.propTypes.virtualScroll
            const isRequired: any;
        }
    }
}

export namespace TextBox {
    namespace contextTypes {
        function fieldAdd(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldFocus(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldName(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldRemove(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace fieldAdd {
            // Circular reference from rc_easyui.TextBox.contextTypes.fieldAdd
            const isRequired: any;
        }

        namespace fieldBlur {
            // Circular reference from rc_easyui.TextBox.contextTypes.fieldBlur
            const isRequired: any;
        }

        namespace fieldChange {
            // Circular reference from rc_easyui.TextBox.contextTypes.fieldChange
            const isRequired: any;
        }

        namespace fieldFocus {
            // Circular reference from rc_easyui.TextBox.contextTypes.fieldFocus
            const isRequired: any;
        }

        namespace fieldName {
            // Circular reference from rc_easyui.TextBox.contextTypes.fieldName
            const isRequired: any;
        }

        namespace fieldRemove {
            // Circular reference from rc_easyui.TextBox.contextTypes.fieldRemove
            const isRequired: any;
        }

        namespace locale {
            // Circular reference from rc_easyui.TextBox.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.TextBox.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const disabled: boolean;

        const editable: boolean;

        const iconAlign: string;

        const invalid: boolean;

        const multiline: boolean;

        const readOnly: boolean;

        const validateOnBlur: boolean;

        const validateOnChange: boolean;

        const validateOnCreate: boolean;

        const value: any;

        function onBlur(): void;

        function onChange(e: any): void;

        function onFocus(): void;

        function textFormatter(e: any): any;
    }

    namespace propTypes {
        function addonLeft(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function addonRight(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function className(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function disabled(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function editable(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputId(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function multiline(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onFocus(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function placeholder(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function readOnly(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function style(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function tabIndex(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function textFormatter(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function value(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace addonLeft {
            // Circular reference from rc_easyui.TextBox.propTypes.addonLeft
            const isRequired: any;
        }

        namespace addonRight {
            // Circular reference from rc_easyui.TextBox.propTypes.addonRight
            const isRequired: any;
        }

        namespace className {
            // Circular reference from rc_easyui.TextBox.propTypes.className
            const isRequired: any;
        }

        namespace disabled {
            // Circular reference from rc_easyui.TextBox.propTypes.disabled
            const isRequired: any;
        }

        namespace editable {
            // Circular reference from rc_easyui.TextBox.propTypes.editable
            const isRequired: any;
        }

        namespace iconAlign {
            // Circular reference from rc_easyui.TextBox.propTypes.iconAlign
            const isRequired: any;
        }

        namespace iconCls {
            // Circular reference from rc_easyui.TextBox.propTypes.iconCls
            const isRequired: any;
        }

        namespace inputCls {
            // Circular reference from rc_easyui.TextBox.propTypes.inputCls
            const isRequired: any;
        }

        namespace inputId {
            // Circular reference from rc_easyui.TextBox.propTypes.inputId
            const isRequired: any;
        }

        namespace inputStyle {
            // Circular reference from rc_easyui.TextBox.propTypes.inputStyle
            const isRequired: any;
        }

        namespace multiline {
            // Circular reference from rc_easyui.TextBox.propTypes.multiline
            const isRequired: any;
        }

        namespace onBlur {
            // Circular reference from rc_easyui.TextBox.propTypes.onBlur
            const isRequired: any;
        }

        namespace onChange {
            // Circular reference from rc_easyui.TextBox.propTypes.onChange
            const isRequired: any;
        }

        namespace onFocus {
            // Circular reference from rc_easyui.TextBox.propTypes.onFocus
            const isRequired: any;
        }

        namespace placeholder {
            // Circular reference from rc_easyui.TextBox.propTypes.placeholder
            const isRequired: any;
        }

        namespace readOnly {
            // Circular reference from rc_easyui.TextBox.propTypes.readOnly
            const isRequired: any;
        }

        namespace style {
            // Circular reference from rc_easyui.TextBox.propTypes.style
            const isRequired: any;
        }

        namespace tabIndex {
            // Circular reference from rc_easyui.TextBox.propTypes.tabIndex
            const isRequired: any;
        }

        namespace textFormatter {
            // Circular reference from rc_easyui.TextBox.propTypes.textFormatter
            const isRequired: any;
        }

        namespace value {
            // Circular reference from rc_easyui.TextBox.propTypes.value
            const isRequired: any;
        }
    }
}

export namespace TextEditor {
    namespace contextTypes {
        function fieldAdd(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldFocus(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldName(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldRemove(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace fieldAdd {
            // Circular reference from rc_easyui.TextEditor.contextTypes.fieldAdd
            const isRequired: any;
        }

        namespace fieldBlur {
            // Circular reference from rc_easyui.TextEditor.contextTypes.fieldBlur
            const isRequired: any;
        }

        namespace fieldChange {
            // Circular reference from rc_easyui.TextEditor.contextTypes.fieldChange
            const isRequired: any;
        }

        namespace fieldFocus {
            // Circular reference from rc_easyui.TextEditor.contextTypes.fieldFocus
            const isRequired: any;
        }

        namespace fieldName {
            // Circular reference from rc_easyui.TextEditor.contextTypes.fieldName
            const isRequired: any;
        }

        namespace fieldRemove {
            // Circular reference from rc_easyui.TextEditor.contextTypes.fieldRemove
            const isRequired: any;
        }

        namespace locale {
            // Circular reference from rc_easyui.TextEditor.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.TextEditor.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        function onBlur(): void;

        function onChange(e: any): void;

        function onFocus(): void;
    }

    namespace propTypes {
        function invalid(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function name(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onFocus(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function validateOnBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function validateOnChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function validateOnCreate(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace invalid {
            // Circular reference from rc_easyui.TextEditor.propTypes.invalid
            const isRequired: any;
        }

        namespace name {
            // Circular reference from rc_easyui.TextEditor.propTypes.name
            const isRequired: any;
        }

        namespace onBlur {
            // Circular reference from rc_easyui.TextEditor.propTypes.onBlur
            const isRequired: any;
        }

        namespace onChange {
            // Circular reference from rc_easyui.TextEditor.propTypes.onChange
            const isRequired: any;
        }

        namespace onFocus {
            // Circular reference from rc_easyui.TextEditor.propTypes.onFocus
            const isRequired: any;
        }

        namespace validateOnBlur {
            // Circular reference from rc_easyui.TextEditor.propTypes.validateOnBlur
            const isRequired: any;
        }

        namespace validateOnChange {
            // Circular reference from rc_easyui.TextEditor.propTypes.validateOnChange
            const isRequired: any;
        }

        namespace validateOnCreate {
            // Circular reference from rc_easyui.TextEditor.propTypes.validateOnCreate
            const isRequired: any;
        }
    }
}

export namespace TimePicker {
    namespace contextTypes {
        function fieldAdd(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldFocus(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldName(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldRemove(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace fieldAdd {
            // Circular reference from rc_easyui.TimePicker.contextTypes.fieldAdd
            const isRequired: any;
        }

        namespace fieldBlur {
            // Circular reference from rc_easyui.TimePicker.contextTypes.fieldBlur
            const isRequired: any;
        }

        namespace fieldChange {
            // Circular reference from rc_easyui.TimePicker.contextTypes.fieldChange
            const isRequired: any;
        }

        namespace fieldFocus {
            // Circular reference from rc_easyui.TimePicker.contextTypes.fieldFocus
            const isRequired: any;
        }

        namespace fieldName {
            // Circular reference from rc_easyui.TimePicker.contextTypes.fieldName
            const isRequired: any;
        }

        namespace fieldRemove {
            // Circular reference from rc_easyui.TimePicker.contextTypes.fieldRemove
            const isRequired: any;
        }

        namespace locale {
            // Circular reference from rc_easyui.TimePicker.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.TimePicker.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const ampm: string[];

        const arrowAlign: string;

        const arrowIconCls: string;

        const defaultCloseText: string;

        const defaultOkText: string;

        const delay: number;

        const disabled: boolean;

        const editable: boolean;

        const hasDownArrow: boolean;

        const iconAlign: string;

        const invalid: boolean;

        const multiline: boolean;

        const multiple: boolean;

        const panelAlign: string;

        const readOnly: boolean;

        const separator: string;

        const validateOnBlur: boolean;

        const validateOnChange: boolean;

        const validateOnCreate: boolean;

        const value: any;

        function onBlur(): void;

        function onChange(e: any): void;

        function onFocus(): void;

        function textFormatter(e: any): any;
    }

    namespace propTypes {
        function addonLeft(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function addonRight(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function ampm(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function arrowAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function arrowIconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function className(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function delay(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function disabled(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function editable(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function hasDownArrow(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputId(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function multiline(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function multiple(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onFocus(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function panelAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function panelStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function placeholder(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function readOnly(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function separator(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function style(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function tabIndex(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function textFormatter(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function value(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace addonLeft {
            // Circular reference from rc_easyui.TimePicker.propTypes.addonLeft
            const isRequired: any;
        }

        namespace addonRight {
            // Circular reference from rc_easyui.TimePicker.propTypes.addonRight
            const isRequired: any;
        }

        namespace ampm {
            // Circular reference from rc_easyui.TimePicker.propTypes.ampm
            const isRequired: any;
        }

        namespace arrowAlign {
            // Circular reference from rc_easyui.TimePicker.propTypes.arrowAlign
            const isRequired: any;
        }

        namespace arrowIconCls {
            // Circular reference from rc_easyui.TimePicker.propTypes.arrowIconCls
            const isRequired: any;
        }

        namespace className {
            // Circular reference from rc_easyui.TimePicker.propTypes.className
            const isRequired: any;
        }

        namespace delay {
            // Circular reference from rc_easyui.TimePicker.propTypes.delay
            const isRequired: any;
        }

        namespace disabled {
            // Circular reference from rc_easyui.TimePicker.propTypes.disabled
            const isRequired: any;
        }

        namespace editable {
            // Circular reference from rc_easyui.TimePicker.propTypes.editable
            const isRequired: any;
        }

        namespace hasDownArrow {
            // Circular reference from rc_easyui.TimePicker.propTypes.hasDownArrow
            const isRequired: any;
        }

        namespace iconAlign {
            // Circular reference from rc_easyui.TimePicker.propTypes.iconAlign
            const isRequired: any;
        }

        namespace iconCls {
            // Circular reference from rc_easyui.TimePicker.propTypes.iconCls
            const isRequired: any;
        }

        namespace inputCls {
            // Circular reference from rc_easyui.TimePicker.propTypes.inputCls
            const isRequired: any;
        }

        namespace inputId {
            // Circular reference from rc_easyui.TimePicker.propTypes.inputId
            const isRequired: any;
        }

        namespace inputStyle {
            // Circular reference from rc_easyui.TimePicker.propTypes.inputStyle
            const isRequired: any;
        }

        namespace multiline {
            // Circular reference from rc_easyui.TimePicker.propTypes.multiline
            const isRequired: any;
        }

        namespace multiple {
            // Circular reference from rc_easyui.TimePicker.propTypes.multiple
            const isRequired: any;
        }

        namespace onBlur {
            // Circular reference from rc_easyui.TimePicker.propTypes.onBlur
            const isRequired: any;
        }

        namespace onChange {
            // Circular reference from rc_easyui.TimePicker.propTypes.onChange
            const isRequired: any;
        }

        namespace onFocus {
            // Circular reference from rc_easyui.TimePicker.propTypes.onFocus
            const isRequired: any;
        }

        namespace panelAlign {
            // Circular reference from rc_easyui.TimePicker.propTypes.panelAlign
            const isRequired: any;
        }

        namespace panelStyle {
            // Circular reference from rc_easyui.TimePicker.propTypes.panelStyle
            const isRequired: any;
        }

        namespace placeholder {
            // Circular reference from rc_easyui.TimePicker.propTypes.placeholder
            const isRequired: any;
        }

        namespace readOnly {
            // Circular reference from rc_easyui.TimePicker.propTypes.readOnly
            const isRequired: any;
        }

        namespace separator {
            // Circular reference from rc_easyui.TimePicker.propTypes.separator
            const isRequired: any;
        }

        namespace style {
            // Circular reference from rc_easyui.TimePicker.propTypes.style
            const isRequired: any;
        }

        namespace tabIndex {
            // Circular reference from rc_easyui.TimePicker.propTypes.tabIndex
            const isRequired: any;
        }

        namespace textFormatter {
            // Circular reference from rc_easyui.TimePicker.propTypes.textFormatter
            const isRequired: any;
        }

        namespace value {
            // Circular reference from rc_easyui.TimePicker.propTypes.value
            const isRequired: any;
        }
    }
}

export namespace TimeSpinner {
    namespace contextTypes {
        function fieldAdd(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldFocus(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldName(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldRemove(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace fieldAdd {
            // Circular reference from rc_easyui.TimeSpinner.contextTypes.fieldAdd
            const isRequired: any;
        }

        namespace fieldBlur {
            // Circular reference from rc_easyui.TimeSpinner.contextTypes.fieldBlur
            const isRequired: any;
        }

        namespace fieldChange {
            // Circular reference from rc_easyui.TimeSpinner.contextTypes.fieldChange
            const isRequired: any;
        }

        namespace fieldFocus {
            // Circular reference from rc_easyui.TimeSpinner.contextTypes.fieldFocus
            const isRequired: any;
        }

        namespace fieldName {
            // Circular reference from rc_easyui.TimeSpinner.contextTypes.fieldName
            const isRequired: any;
        }

        namespace fieldRemove {
            // Circular reference from rc_easyui.TimeSpinner.contextTypes.fieldRemove
            const isRequired: any;
        }

        namespace locale {
            // Circular reference from rc_easyui.TimeSpinner.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.TimeSpinner.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const ampm: string[];

        const disabled: boolean;

        const editable: boolean;

        const format: string;

        const highlight: number;

        const iconAlign: string;

        const increment: number;

        const invalid: boolean;

        const multiline: boolean;

        const readOnly: boolean;

        const reversed: boolean;

        const selections: Array<(number[])>;

        const spinAlign: string;

        const spinners: boolean;

        const validateOnBlur: boolean;

        const validateOnChange: boolean;

        const validateOnCreate: boolean;

        const value: any;

        function onBlur(): void;

        function onChange(e: any): void;

        function onFocus(): void;

        function textFormatter(e: any): any;
    }

    namespace propTypes {
        function addonLeft(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function addonRight(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function ampm(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function className(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function disabled(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function editable(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function format(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function highlight(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function iconCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function increment(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputId(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function inputStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function max(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function min(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function multiline(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onFocus(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function placeholder(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function readOnly(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function reversed(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function selections(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function spinAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function spinners(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function style(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function tabIndex(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function textFormatter(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function value(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace addonLeft {
            // Circular reference from rc_easyui.TimeSpinner.propTypes.addonLeft
            const isRequired: any;
        }

        namespace addonRight {
            // Circular reference from rc_easyui.TimeSpinner.propTypes.addonRight
            const isRequired: any;
        }

        namespace ampm {
            // Circular reference from rc_easyui.TimeSpinner.propTypes.ampm
            const isRequired: any;
        }

        namespace className {
            // Circular reference from rc_easyui.TimeSpinner.propTypes.className
            const isRequired: any;
        }

        namespace disabled {
            // Circular reference from rc_easyui.TimeSpinner.propTypes.disabled
            const isRequired: any;
        }

        namespace editable {
            // Circular reference from rc_easyui.TimeSpinner.propTypes.editable
            const isRequired: any;
        }

        namespace format {
            // Circular reference from rc_easyui.TimeSpinner.propTypes.format
            const isRequired: any;
        }

        namespace highlight {
            // Circular reference from rc_easyui.TimeSpinner.propTypes.highlight
            const isRequired: any;
        }

        namespace iconAlign {
            // Circular reference from rc_easyui.TimeSpinner.propTypes.iconAlign
            const isRequired: any;
        }

        namespace iconCls {
            // Circular reference from rc_easyui.TimeSpinner.propTypes.iconCls
            const isRequired: any;
        }

        namespace increment {
            // Circular reference from rc_easyui.TimeSpinner.propTypes.increment
            const isRequired: any;
        }

        namespace inputCls {
            // Circular reference from rc_easyui.TimeSpinner.propTypes.inputCls
            const isRequired: any;
        }

        namespace inputId {
            // Circular reference from rc_easyui.TimeSpinner.propTypes.inputId
            const isRequired: any;
        }

        namespace inputStyle {
            // Circular reference from rc_easyui.TimeSpinner.propTypes.inputStyle
            const isRequired: any;
        }

        namespace max {
            // Circular reference from rc_easyui.TimeSpinner.propTypes.max
            const isRequired: any;
        }

        namespace min {
            // Circular reference from rc_easyui.TimeSpinner.propTypes.min
            const isRequired: any;
        }

        namespace multiline {
            // Circular reference from rc_easyui.TimeSpinner.propTypes.multiline
            const isRequired: any;
        }

        namespace onBlur {
            // Circular reference from rc_easyui.TimeSpinner.propTypes.onBlur
            const isRequired: any;
        }

        namespace onChange {
            // Circular reference from rc_easyui.TimeSpinner.propTypes.onChange
            const isRequired: any;
        }

        namespace onFocus {
            // Circular reference from rc_easyui.TimeSpinner.propTypes.onFocus
            const isRequired: any;
        }

        namespace placeholder {
            // Circular reference from rc_easyui.TimeSpinner.propTypes.placeholder
            const isRequired: any;
        }

        namespace readOnly {
            // Circular reference from rc_easyui.TimeSpinner.propTypes.readOnly
            const isRequired: any;
        }

        namespace reversed {
            // Circular reference from rc_easyui.TimeSpinner.propTypes.reversed
            const isRequired: any;
        }

        namespace selections {
            // Circular reference from rc_easyui.TimeSpinner.propTypes.selections
            const isRequired: any;
        }

        namespace spinAlign {
            // Circular reference from rc_easyui.TimeSpinner.propTypes.spinAlign
            const isRequired: any;
        }

        namespace spinners {
            // Circular reference from rc_easyui.TimeSpinner.propTypes.spinners
            const isRequired: any;
        }

        namespace style {
            // Circular reference from rc_easyui.TimeSpinner.propTypes.style
            const isRequired: any;
        }

        namespace tabIndex {
            // Circular reference from rc_easyui.TimeSpinner.propTypes.tabIndex
            const isRequired: any;
        }

        namespace textFormatter {
            // Circular reference from rc_easyui.TimeSpinner.propTypes.textFormatter
            const isRequired: any;
        }

        namespace value {
            // Circular reference from rc_easyui.TimeSpinner.propTypes.value
            const isRequired: any;
        }
    }
}

export namespace Tooltip {
    namespace contextTypes {
        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace locale {
            // Circular reference from rc_easyui.Tooltip.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.Tooltip.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const deltaX: number;

        const deltaY: number;

        const disabled: boolean;

        const hideDelay: number;

        const hideEvent: string;

        const position: string;

        const showDelay: number;

        const showEvent: string;

        const trackMouse: boolean;

        const tracking: boolean;

        const valign: string;

        const zIndex: number;

        function onHide(): void;

        function onPosition(e: any): void;

        function onShow(): void;
    }

    namespace propTypes {
        function className(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function content(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function deltaX(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function deltaY(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function disabled(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function hideDelay(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function hideEvent(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onHide(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onPosition(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onShow(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function position(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function showDelay(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function showEvent(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function style(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function target(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function tooltipCls(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function tooltipStyle(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function trackMouse(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function tracking(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function valign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function zIndex(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace className {
            // Circular reference from rc_easyui.Tooltip.propTypes.className
            const isRequired: any;
        }

        namespace content {
            // Circular reference from rc_easyui.Tooltip.propTypes.content
            const isRequired: any;
        }

        namespace deltaX {
            // Circular reference from rc_easyui.Tooltip.propTypes.deltaX
            const isRequired: any;
        }

        namespace deltaY {
            // Circular reference from rc_easyui.Tooltip.propTypes.deltaY
            const isRequired: any;
        }

        namespace disabled {
            // Circular reference from rc_easyui.Tooltip.propTypes.disabled
            const isRequired: any;
        }

        namespace hideDelay {
            // Circular reference from rc_easyui.Tooltip.propTypes.hideDelay
            const isRequired: any;
        }

        namespace hideEvent {
            // Circular reference from rc_easyui.Tooltip.propTypes.hideEvent
            const isRequired: any;
        }

        namespace onHide {
            // Circular reference from rc_easyui.Tooltip.propTypes.onHide
            const isRequired: any;
        }

        namespace onPosition {
            // Circular reference from rc_easyui.Tooltip.propTypes.onPosition
            const isRequired: any;
        }

        namespace onShow {
            // Circular reference from rc_easyui.Tooltip.propTypes.onShow
            const isRequired: any;
        }

        namespace position {
            // Circular reference from rc_easyui.Tooltip.propTypes.position
            const isRequired: any;
        }

        namespace showDelay {
            // Circular reference from rc_easyui.Tooltip.propTypes.showDelay
            const isRequired: any;
        }

        namespace showEvent {
            // Circular reference from rc_easyui.Tooltip.propTypes.showEvent
            const isRequired: any;
        }

        namespace style {
            // Circular reference from rc_easyui.Tooltip.propTypes.style
            const isRequired: any;
        }

        namespace target {
            // Circular reference from rc_easyui.Tooltip.propTypes.target
            const isRequired: any;
        }

        namespace tooltipCls {
            // Circular reference from rc_easyui.Tooltip.propTypes.tooltipCls
            const isRequired: any;
        }

        namespace tooltipStyle {
            // Circular reference from rc_easyui.Tooltip.propTypes.tooltipStyle
            const isRequired: any;
        }

        namespace trackMouse {
            // Circular reference from rc_easyui.Tooltip.propTypes.trackMouse
            const isRequired: any;
        }

        namespace tracking {
            // Circular reference from rc_easyui.Tooltip.propTypes.tracking
            const isRequired: any;
        }

        namespace valign {
            // Circular reference from rc_easyui.Tooltip.propTypes.valign
            const isRequired: any;
        }

        namespace zIndex {
            // Circular reference from rc_easyui.Tooltip.propTypes.zIndex
            const isRequired: any;
        }
    }
}

export namespace Tree {
    namespace contextTypes {
        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace locale {
            // Circular reference from rc_easyui.Tree.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.Tree.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const animate: boolean;

        const cascadeCheck: boolean;

        const checkbox: boolean;

        const clickToEdit: boolean;

        const data: any[];

        const dblclickToEdit: boolean;

        const filterIncludingChild: boolean;

        const selectLeafOnly: boolean;

        function filter(e: any, t: any): any;

        function onCheckChange(e: any): void;

        function onEditBegin(e: any): void;

        function onEditCancel(e: any): void;

        function onEditEnd(e: any): void;

        function onNodeCheck(e: any): void;

        function onNodeClick(e: any): void;

        function onNodeCollapse(e: any): void;

        function onNodeContextMenu(e: any): void;

        function onNodeDblClick(e: any): void;

        function onNodeExpand(e: any): void;

        function onNodeUncheck(e: any): void;

        function onSelectionChange(e: any): void;
    }

    namespace propTypes {
        function animate(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function cascadeCheck(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function checkbox(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function clickToEdit(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function data(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function dblclickToEdit(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function editor(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function filter(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function filterIncludingChild(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function render(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function selectLeafOnly(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function selection(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace animate {
            // Circular reference from rc_easyui.Tree.propTypes.animate
            const isRequired: any;
        }

        namespace cascadeCheck {
            // Circular reference from rc_easyui.Tree.propTypes.cascadeCheck
            const isRequired: any;
        }

        namespace checkbox {
            // Circular reference from rc_easyui.Tree.propTypes.checkbox
            const isRequired: any;
        }

        namespace clickToEdit {
            // Circular reference from rc_easyui.Tree.propTypes.clickToEdit
            const isRequired: any;
        }

        namespace data {
            // Circular reference from rc_easyui.Tree.propTypes.data
            const isRequired: any;
        }

        namespace dblclickToEdit {
            // Circular reference from rc_easyui.Tree.propTypes.dblclickToEdit
            const isRequired: any;
        }

        namespace editor {
            // Circular reference from rc_easyui.Tree.propTypes.editor
            const isRequired: any;
        }

        namespace filter {
            // Circular reference from rc_easyui.Tree.propTypes.filter
            const isRequired: any;
        }

        namespace filterIncludingChild {
            // Circular reference from rc_easyui.Tree.propTypes.filterIncludingChild
            const isRequired: any;
        }

        namespace render {
            // Circular reference from rc_easyui.Tree.propTypes.render
            const isRequired: any;
        }

        namespace selectLeafOnly {
            // Circular reference from rc_easyui.Tree.propTypes.selectLeafOnly
            const isRequired: any;
        }

        namespace selection {
            // Circular reference from rc_easyui.Tree.propTypes.selection
            const isRequired: any;
        }
    }
}

export namespace TreeGrid {
    namespace contextTypes {
        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace locale {
            // Circular reference from rc_easyui.TreeGrid.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.TreeGrid.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const animate: boolean;

        const border: boolean;

        const cascadeCheck: boolean;

        const checkbox: boolean;

        const clickToEdit: boolean;

        const columnMoving: boolean;

        const columnResizing: boolean;

        const data: any[];

        const dblclickToEdit: boolean;

        const defaultLoadMsg: string;

        const filterBtnPosition: string;

        const filterDelay: number;

        const filterIncludingChild: boolean;

        const filterMatchingType: string;

        const filterOperators: {
            beginwith: {
                isMatch: any;
                text: string;
            };
            contains: {
                isMatch: any;
                text: string;
            };
            endwith: {
                isMatch: any;
                text: string;
            };
            equal: {
                isMatch: any;
                text: string;
            };
            greater: {
                isMatch: any;
                text: string;
            };
            greaterorequal: {
                isMatch: any;
                text: string;
            };
            less: {
                isMatch: any;
                text: string;
            };
            lessorequal: {
                isMatch: any;
                text: string;
            };
            nofilter: {
                isMatch: any;
                text: string;
            };
            notequal: {
                isMatch: any;
                text: string;
            };        };

        const filterPosition: string;

        const filterRules: any[];

        const filterable: boolean;

        const footerData: any[];

        const frozenAlign: string;

        const frozenWidth: string;

        const lazy: boolean;

        const loading: boolean;

        const multiSort: boolean;

        const pageNumber: number;

        const pagePosition: string;

        const pageSize: number;

        const pagination: boolean;

        const rowHeight: number;

        const selectionMode: string;

        const showFooter: boolean;

        const showHeader: boolean;

        const sorts: any[];

        const striped: boolean;

        const total: number;

        const virtualScroll: boolean;

        function filter(e: any, t: any, n: any): any;

        function onCellClick(): void;

        function onCellContextMenu(e: any): void;

        function onCellDblClick(): void;

        function onCellSelect(): void;

        function onCellUnselect(): void;

        function onCheckChange(e: any): void;

        function onColumnMove(e: any): void;

        function onColumnResize(e: any): void;

        function onEditBegin(e: any): void;

        function onEditCancel(e: any): void;

        function onEditEnd(e: any): void;

        function onEditValidate(e: any): void;

        function onFilterChange(): void;

        function onPageChange(): void;

        function onRowCheck(e: any): void;

        function onRowClick(e: any): void;

        function onRowCollapse(e: any): void;

        function onRowContextMenu(e: any): void;

        function onRowDblClick(e: any): void;

        function onRowExpand(e: any): void;

        function onRowSelect(): void;

        function onRowUncheck(e: any): void;

        function onRowUnselect(): void;

        function onSelectionChange(): void;

        function onSortChange(): void;
    }

    namespace propTypes {
        function animate(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function border(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function cascadeCheck(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function checkbox(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function clickToEdit(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function columnMoving(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function data(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function dblclickToEdit(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function editMode(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function filter(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function filterBtnPosition(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function filterDelay(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function filterIncludingChild(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function filterMatchingType(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function filterOperators(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function filterPosition(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function filterRules(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function filterable(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function footerData(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function frozenAlign(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function frozenWidth(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function idField(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function lazy(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function loadMsg(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function loading(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function multiSort(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function pageNumber(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function pageOptions(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function pagePosition(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function pageSize(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function pagination(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function rowCss(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function rowHeight(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function selection(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function selectionMode(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function showFooter(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function showHeader(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function sorts(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function striped(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function total(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function treeField(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function virtualScroll(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace animate {
            // Circular reference from rc_easyui.TreeGrid.propTypes.animate
            const isRequired: any;
        }

        namespace border {
            // Circular reference from rc_easyui.TreeGrid.propTypes.border
            const isRequired: any;
        }

        namespace cascadeCheck {
            // Circular reference from rc_easyui.TreeGrid.propTypes.cascadeCheck
            const isRequired: any;
        }

        namespace checkbox {
            // Circular reference from rc_easyui.TreeGrid.propTypes.checkbox
            const isRequired: any;
        }

        namespace clickToEdit {
            // Circular reference from rc_easyui.TreeGrid.propTypes.clickToEdit
            const isRequired: any;
        }

        namespace columnMoving {
            // Circular reference from rc_easyui.TreeGrid.propTypes.columnMoving
            const isRequired: any;
        }

        namespace data {
            // Circular reference from rc_easyui.TreeGrid.propTypes.data
            const isRequired: any;
        }

        namespace dblclickToEdit {
            // Circular reference from rc_easyui.TreeGrid.propTypes.dblclickToEdit
            const isRequired: any;
        }

        namespace editMode {
            // Circular reference from rc_easyui.TreeGrid.propTypes.editMode
            const isRequired: any;
        }

        namespace filter {
            // Circular reference from rc_easyui.TreeGrid.propTypes.filter
            const isRequired: any;
        }

        namespace filterBtnPosition {
            // Circular reference from rc_easyui.TreeGrid.propTypes.filterBtnPosition
            const isRequired: any;
        }

        namespace filterDelay {
            // Circular reference from rc_easyui.TreeGrid.propTypes.filterDelay
            const isRequired: any;
        }

        namespace filterIncludingChild {
            // Circular reference from rc_easyui.TreeGrid.propTypes.filterIncludingChild
            const isRequired: any;
        }

        namespace filterMatchingType {
            // Circular reference from rc_easyui.TreeGrid.propTypes.filterMatchingType
            const isRequired: any;
        }

        namespace filterOperators {
            // Circular reference from rc_easyui.TreeGrid.propTypes.filterOperators
            const isRequired: any;
        }

        namespace filterPosition {
            // Circular reference from rc_easyui.TreeGrid.propTypes.filterPosition
            const isRequired: any;
        }

        namespace filterRules {
            // Circular reference from rc_easyui.TreeGrid.propTypes.filterRules
            const isRequired: any;
        }

        namespace filterable {
            // Circular reference from rc_easyui.TreeGrid.propTypes.filterable
            const isRequired: any;
        }

        namespace footerData {
            // Circular reference from rc_easyui.TreeGrid.propTypes.footerData
            const isRequired: any;
        }

        namespace frozenAlign {
            // Circular reference from rc_easyui.TreeGrid.propTypes.frozenAlign
            const isRequired: any;
        }

        namespace frozenWidth {
            // Circular reference from rc_easyui.TreeGrid.propTypes.frozenWidth
            const isRequired: any;
        }

        namespace idField {
            // Circular reference from rc_easyui.TreeGrid.propTypes.idField
            const isRequired: any;
        }

        namespace lazy {
            // Circular reference from rc_easyui.TreeGrid.propTypes.lazy
            const isRequired: any;
        }

        namespace loadMsg {
            // Circular reference from rc_easyui.TreeGrid.propTypes.loadMsg
            const isRequired: any;
        }

        namespace loading {
            // Circular reference from rc_easyui.TreeGrid.propTypes.loading
            const isRequired: any;
        }

        namespace multiSort {
            // Circular reference from rc_easyui.TreeGrid.propTypes.multiSort
            const isRequired: any;
        }

        namespace pageNumber {
            // Circular reference from rc_easyui.TreeGrid.propTypes.pageNumber
            const isRequired: any;
        }

        namespace pageOptions {
            // Circular reference from rc_easyui.TreeGrid.propTypes.pageOptions
            const isRequired: any;
        }

        namespace pagePosition {
            // Circular reference from rc_easyui.TreeGrid.propTypes.pagePosition
            const isRequired: any;
        }

        namespace pageSize {
            // Circular reference from rc_easyui.TreeGrid.propTypes.pageSize
            const isRequired: any;
        }

        namespace pagination {
            // Circular reference from rc_easyui.TreeGrid.propTypes.pagination
            const isRequired: any;
        }

        namespace rowCss {
            // Circular reference from rc_easyui.TreeGrid.propTypes.rowCss
            const isRequired: any;
        }

        namespace rowHeight {
            // Circular reference from rc_easyui.TreeGrid.propTypes.rowHeight
            const isRequired: any;
        }

        namespace selection {
            // Circular reference from rc_easyui.TreeGrid.propTypes.selection
            const isRequired: any;
        }

        namespace selectionMode {
            // Circular reference from rc_easyui.TreeGrid.propTypes.selectionMode
            const isRequired: any;
        }

        namespace showFooter {
            // Circular reference from rc_easyui.TreeGrid.propTypes.showFooter
            const isRequired: any;
        }

        namespace showHeader {
            // Circular reference from rc_easyui.TreeGrid.propTypes.showHeader
            const isRequired: any;
        }

        namespace sorts {
            // Circular reference from rc_easyui.TreeGrid.propTypes.sorts
            const isRequired: any;
        }

        namespace striped {
            // Circular reference from rc_easyui.TreeGrid.propTypes.striped
            const isRequired: any;
        }

        namespace total {
            // Circular reference from rc_easyui.TreeGrid.propTypes.total
            const isRequired: any;
        }

        namespace treeField {
            // Circular reference from rc_easyui.TreeGrid.propTypes.treeField
            const isRequired: any;
        }

        namespace virtualScroll {
            // Circular reference from rc_easyui.TreeGrid.propTypes.virtualScroll
            const isRequired: any;
        }
    }
}

export namespace Validation {
    namespace childContextTypes {
        function fieldAdd(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldBlur(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldFocus(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldName(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function fieldRemove(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace fieldAdd {
            // Circular reference from rc_easyui.Validation.childContextTypes.fieldAdd
            const isRequired: any;
        }

        namespace fieldBlur {
            // Circular reference from rc_easyui.Validation.childContextTypes.fieldBlur
            const isRequired: any;
        }

        namespace fieldChange {
            // Circular reference from rc_easyui.Validation.childContextTypes.fieldChange
            const isRequired: any;
        }

        namespace fieldFocus {
            // Circular reference from rc_easyui.Validation.childContextTypes.fieldFocus
            const isRequired: any;
        }

        namespace fieldName {
            // Circular reference from rc_easyui.Validation.childContextTypes.fieldName
            const isRequired: any;
        }

        namespace fieldRemove {
            // Circular reference from rc_easyui.Validation.childContextTypes.fieldRemove
            const isRequired: any;
        }
    }

    namespace contextTypes {
        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace locale {
            // Circular reference from rc_easyui.Validation.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.Validation.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const delay: number;

        function onChange(e: any, t: any): void;

        function onValidate(e: any): void;
    }

    namespace propTypes {
        function className(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function delay(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function model(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onValidate(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function rules(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function style(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function validateRules(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace className {
            // Circular reference from rc_easyui.Validation.propTypes.className
            const isRequired: any;
        }

        namespace delay {
            // Circular reference from rc_easyui.Validation.propTypes.delay
            const isRequired: any;
        }

        namespace model {
            // Circular reference from rc_easyui.Validation.propTypes.model
            const isRequired: any;
        }

        namespace onChange {
            // Circular reference from rc_easyui.Validation.propTypes.onChange
            const isRequired: any;
        }

        namespace onValidate {
            // Circular reference from rc_easyui.Validation.propTypes.onValidate
            const isRequired: any;
        }

        namespace rules {
            // Circular reference from rc_easyui.Validation.propTypes.rules
            const isRequired: any;
        }

        namespace style {
            // Circular reference from rc_easyui.Validation.propTypes.style
            const isRequired: any;
        }

        namespace validateRules {
            // Circular reference from rc_easyui.Validation.propTypes.validateRules
            const isRequired: any;
        }
    }
}

export namespace VirtualScroll {
    namespace contextTypes {
        function locale(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function t(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace locale {
            // Circular reference from rc_easyui.VirtualScroll.contextTypes.locale
            const isRequired: any;
        }

        namespace t {
            // Circular reference from rc_easyui.VirtualScroll.contextTypes.t
            const isRequired: any;
        }
    }

    namespace defaultProps {
        const data: any[];

        const lazy: boolean;

        const maxDivHeight: number;

        const maxVisibleHeight: number;

        const pageNumber: number;

        const pageSize: number;

        const rowHeight: number;

        const total: number;

        function onBodyScroll(e: any): void;

        function onPageChange(e: any): void;

        function onUpdate(e: any): void;
    }

    namespace propTypes {
        function data(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function lazy(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function maxDivHeight(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function maxVisibleHeight(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onPageChange(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function onUpdate(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function pageNumber(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function pageSize(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function renderItem(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function renderItems(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function reset(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function rowHeight(e: any, t: any, n: any, r: any, i: any, a: any): void;

        function total(e: any, t: any, n: any, r: any, i: any, a: any): void;

        namespace data {
            // Circular reference from rc_easyui.VirtualScroll.propTypes.data
            const isRequired: any;
        }

        namespace lazy {
            // Circular reference from rc_easyui.VirtualScroll.propTypes.lazy
            const isRequired: any;
        }

        namespace maxDivHeight {
            // Circular reference from rc_easyui.VirtualScroll.propTypes.maxDivHeight
            const isRequired: any;
        }

        namespace maxVisibleHeight {
            // Circular reference from rc_easyui.VirtualScroll.propTypes.maxVisibleHeight
            const isRequired: any;
        }

        namespace onPageChange {
            // Circular reference from rc_easyui.VirtualScroll.propTypes.onPageChange
            const isRequired: any;
        }

        namespace onUpdate {
            // Circular reference from rc_easyui.VirtualScroll.propTypes.onUpdate
            const isRequired: any;
        }

        namespace pageNumber {
            // Circular reference from rc_easyui.VirtualScroll.propTypes.pageNumber
            const isRequired: any;
        }

        namespace pageSize {
            // Circular reference from rc_easyui.VirtualScroll.propTypes.pageSize
            const isRequired: any;
        }

        namespace renderItem {
            // Circular reference from rc_easyui.VirtualScroll.propTypes.renderItem
            const isRequired: any;
        }

        namespace renderItems {
            // Circular reference from rc_easyui.VirtualScroll.propTypes.renderItems
            const isRequired: any;
        }

        namespace reset {
            // Circular reference from rc_easyui.VirtualScroll.propTypes.reset
            const isRequired: any;
        }

        namespace rowHeight {
            // Circular reference from rc_easyui.VirtualScroll.propTypes.rowHeight
            const isRequired: any;
        }

        namespace total {
            // Circular reference from rc_easyui.VirtualScroll.propTypes.total
            const isRequired: any;
        }
    }
}

export namespace classHelper {
    function classNames(...args: any[]): any;
}

export namespace dateHelper {
    const ampm: string[];

    function formatDate(e: any, t: any): any;

    function parseDate(e: any, t: any): any;

    function parseSelections(e: any): any;

    function setAmPm(e: any): void;
}

export namespace domHelper {
    function addClass(e: any, t: any): void;

    function bind(e: any, t: any, n: any): void;

    function closest(e: any, t: any): any;

    function getElement(e: any): any;

    function getScrollLeft(): any;

    function getScrollTop(): any;

    function getViewport(): any;

    function hasClass(e: any, t: any): any;

    function isAutoSize(e: any): any;

    function isChild(e: any, t: any): any;

    function nextGuid(): any;

    function offset(e: any): any;

    function outerHeight(e: any, t: any): any;

    function outerWidth(e: any, t: any): any;

    function position(e: any): any;

    function removeClass(e: any, t: any): void;

    function scrollTo(e: any, t: any): void;

    function slideDown(e: any): void;

    function slideUp(e: any): void;

    function toStyleValue(e: any): any;

    function unbind(e: any, t: any, n: any): void;
}

export namespace treeHelper {
    const cascadeCheck: boolean;

    function adjustCheck(e: any): void;

    function calcNodeState(e: any): any;

    function checkNode(e: any, t: any): void;

    function findNode(e: any, t: any, n: any): any;

    function forNodes(e: any, t: any): void;

    function setCheckState(e: any, t: any): void;

    function setChildCheckbox(e: any, t: any): void;

    function setParentCheckbox(e: any): void;

    function uncheckAllNodes(e: any, t: any): void;

    function uncheckNode(e: any, t: any): void;
}
