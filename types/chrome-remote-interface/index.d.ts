// Type definitions for chrome-remote-interface 0.27
// Project: https://github.com/cyrus-and/chrome-remote-interface
// Definitions by: My Self <https://github.com/me>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

/** Declaration file generated by dts-gen */

export default CDP;

declare function CDP(options?: CDP.ChromeRemoteInterfaceOptions | Callback, callback?: Callback): Promise<void>;

type Callback = (...args: any[]) => void;

declare namespace CDP {
    interface ChromeRemoteInterfaceOptions {
        host?: string;
        port?: number;
        secure?: boolean;
        useHostName?: boolean;
        target?: (targets: Target[]) => Target | string;
        protocol?: DevtoolsProtocol;
        local?: boolean;
    }

  interface ProtocolOptions {
      host?: string;
      port?: number;
      secure?: boolean;
      useHostName?: boolean;
      local?: boolean;
  }

  interface ListTargetOptions {
      host?: string;
      port?: number;
      secure?: boolean;
      useHostName?: boolean;
  }

  interface NewTargetOptions {
      host?: string;
      port?: number;
      secure?: boolean;
      useHostName?: boolean;
      url?: string;
  }

  interface TargetOptions {
      host?: string;
      port?: number;
      secure?: boolean;
      useHostName?: boolean;
      url?: string;
      id: string;
  }

  interface VersionOptions {
      host?: string;
      port?: number;
      secure?: boolean;
      useHostName?: boolean;
  }

  interface VersionResult {
      Browser: string;
      'Protocol-Version': string;
      'User-Agent': string;
      'V8-Version': string;
      'Webkit-Version': string;
      webSocketDebuggerUrl: string;
  }

  interface Target {
      description: string;
      devtoolsFrontendUrl: string;
      id: string;
      title: string;
      type: string;
      url: string;
      webSocketDebuggerUrl: string;
  }

  interface Type {
      id: string;
      description: string;
      type: string;
      enum?: string[];
  }

  interface Command {
      description: string;
      name: string;
      experimental: boolean;
      parameters?: any[];
      returns?: any[];
  }

  interface Domain {
      domain: string;
      experimental: string;
      dependencies: string[];
      types: Type[];
      commands: Command[];
  }

  interface DevtoolsProtocol extends Object {
      version: { major: string, minor: string };
      domains: Domain[];
  }
  function Activate(options: TargetOptions, callback: ((err: Error) => void)): void;
  function Activate(options?: TargetOptions): Promise<void>;
  function Close(options: TargetOptions, callback: ((err: Error) => void)): void;
  function Close(options?: TargetOptions): Promise<void>;
  function List(options: ListTargetOptions, callback: ((err: Error, targets: Target[]) => Target[])): Target[];
  function List(options?: ListTargetOptions): Promise<Target[]>;
  function New(options: NewTargetOptions, callback: ((err: Error, target: Target) => Target)): Target;
  function New(options?: NewTargetOptions): Promise<Target>;
  function Protocol(options: ProtocolOptions, callback: ((err: Error, protocol: DevtoolsProtocol) => DevtoolsProtocol)): DevtoolsProtocol;
  function Protocol(options?: ProtocolOptions): Promise<DevtoolsProtocol>;
  function Version(options: VersionOptions, callback: ((err: Error, browserVersion: VersionResult) => void)): VersionResult;
  function Version(options?: VersionOptions): Promise<VersionResult>;
}
