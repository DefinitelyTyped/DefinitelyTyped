// Type definitions for non-npm package Node.js 12.19
// Project: http://nodejs.org/
// Definitions by: Microsoft TypeScript <https://github.com/Microsoft>
//                 DefinitelyTyped <https://github.com/DefinitelyTyped>
//                 Alberto Schiabel <https://github.com/jkomyno>
//                 Alexander T. <https://github.com/a-tarasyuk>
//                 Alvis HT Tang <https://github.com/alvis>
//                 Andrew Makarov <https://github.com/r3nya>
//                 Benjamin Toueg <https://github.com/btoueg>
//                 Bruno Scheufler <https://github.com/brunoscheufler>
//                 Chigozirim C. <https://github.com/smac89>
//                 David Junger <https://github.com/touffy>
//                 Deividas Bakanas <https://github.com/DeividasBakanas>
//                 Eugene Y. Q. Shen <https://github.com/eyqs>
//                 Flarna <https://github.com/Flarna>
//                 Hannes Magnusson <https://github.com/Hannes-Magnusson-CK>
//                 Hoàng Văn Khải <https://github.com/KSXGitHub>
//                 Huw <https://github.com/hoo29>
//                 Kelvin Jin <https://github.com/kjin>
//                 Klaus Meinhardt <https://github.com/ajafff>
//                 Lishude <https://github.com/islishude>
//                 Mariusz Wiktorczyk <https://github.com/mwiktorczyk>
//                 Mohsen Azimi <https://github.com/mohsen1>
//                 Nicolas Even <https://github.com/n-e>
//                 Nikita Galkin <https://github.com/galkin>
//                 Parambir Singh <https://github.com/parambirs>
//                 Sebastian Silbermann <https://github.com/eps1lon>
//                 Simon Schick <https://github.com/SimonSchick>
//                 Thomas den Hollander <https://github.com/ThomasdenH>
//                 Wilco Bakker <https://github.com/WilcoBakker>
//                 wwwy3y3 <https://github.com/wwwy3y3>
//                 Zane Hannan AU <https://github.com/ZaneHannanAU>
//                 Samuel Ainsworth <https://github.com/samuela>
//                 Kyle Uehlein <https://github.com/kuehlein>
//                 Jordi Oliveras Rovira <https://github.com/j-oliveras>
//                 Thanik Bhongbhibhat <https://github.com/bhongy>
//                 Marcin Kopacz <https://github.com/chyzwar>
//                 Trivikram Kamat <https://github.com/trivikr>
//                 Minh Son Nguyen <https://github.com/nguymin4>
//                 Junxiao Shi <https://github.com/yoursunny>
//                 Ilia Baryshnikov <https://github.com/qwelias>
//                 ExE Boss <https://github.com/ExE-Boss>
//                 Jason Kwok <https://github.com/JasonHK>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

export {};

/**
 * A parsed path object generated by path.parse() or consumed by path.format().
 */
export interface ParsedPath {
    /**
     * The root of the path such as '/' or 'c:\'
     */
    root: string;
    /**
     * The full directory path such as '/home/user/dir' or 'c:\path\dir'
     */
    dir: string;
    /**
     * The file name including extension (if any) such as 'index.html'
     */
    base: string;
    /**
     * The file extension (if any) such as '.html'
     */
    ext: string;
    /**
     * The file name without extension (if any) such as 'index'
     */
    name: string;
}
export interface FormatInputPathObject {
    /**
     * The root of the path such as '/' or 'c:\'
     */
    root?: string;
    /**
     * The full directory path such as '/home/user/dir' or 'c:\path\dir'
     */
    dir?: string;
    /**
     * The file name including extension (if any) such as 'index.html'
     */
    base?: string;
    /**
     * The file extension (if any) such as '.html'
     */
    ext?: string;
    /**
     * The file name without extension (if any) such as 'index'
     */
    name?: string;
}

/**
 * Normalize a string path, reducing '..' and '.' parts.
 * When multiple slashes are found, they're replaced by a single one; when the path contains a trailing slash, it is preserved. On Windows backslashes are used.
 *
 * @param p string path to normalize.
 */
export function normalize(p: string): string;
/**
 * Join all arguments together and normalize the resulting path.
 * Arguments must be strings. In v0.8, non-string arguments were silently ignored. In v0.10 and up, an exception is thrown.
 *
 * @param paths paths to join.
 */
export function join(...paths: string[]): string;
/**
 * The right-most parameter is considered {to}.  Other parameters are considered an array of {from}.
 *
 * Starting from leftmost {from} parameter, resolves {to} to an absolute path.
 *
 * If {to} isn't already absolute, {from} arguments are prepended in right to left order,
 * until an absolute path is found. If after using all {from} paths still no absolute path is found,
 * the current working directory is used as well. The resulting path is normalized,
 * and trailing slashes are removed unless the path gets resolved to the root directory.
 *
 * @param pathSegments string paths to join.  Non-string arguments are ignored.
 */
export function resolve(...pathSegments: string[]): string;
/**
 * Determines whether {path} is an absolute path. An absolute path will always resolve to the same location, regardless of the working directory.
 *
 * @param path path to test.
 */
export function isAbsolute(path: string): boolean;
/**
 * Solve the relative path from {from} to {to}.
 * At times we have two absolute paths, and we need to derive the relative path from one to the other. This is actually the reverse transform of path.resolve.
 */
export function relative(from: string, to: string): string;
/**
 * Return the directory name of a path. Similar to the Unix dirname command.
 *
 * @param p the path to evaluate.
 */
export function dirname(p: string): string;
/**
 * Return the last portion of a path. Similar to the Unix basename command.
 * Often used to extract the file name from a fully qualified path.
 *
 * @param p the path to evaluate.
 * @param ext optionally, an extension to remove from the result.
 */
export function basename(p: string, ext?: string): string;
/**
 * Return the extension of the path, from the last '.' to end of string in the last portion of the path.
 * If there is no '.' in the last portion of the path or the first character of it is '.', then it returns an empty string
 *
 * @param p the path to evaluate.
 */
export function extname(p: string): string;
/**
 * The platform-specific file separator. '\\' or '/'.
 */
export const sep: '\\' | '/';
/**
 * The platform-specific file delimiter. ';' or ':'.
 */
export const delimiter: ';' | ':';
/**
 * Returns an object from a path string - the opposite of format().
 *
 * @param pathString path to evaluate.
 */
export function parse(pathString: string): ParsedPath;
/**
 * Returns a path string from an object - the opposite of parse().
 *
 * @param pathString path to evaluate.
 */
export function format(pathObject: FormatInputPathObject): string;

export namespace posix {
    function normalize(p: string): string;
    function join(...paths: string[]): string;
    function resolve(...pathSegments: string[]): string;
    function isAbsolute(p: string): boolean;
    function relative(from: string, to: string): string;
    function dirname(p: string): string;
    function basename(p: string, ext?: string): string;
    function extname(p: string): string;
    const sep: string;
    const delimiter: string;
    function parse(p: string): ParsedPath;
    function format(pP: FormatInputPathObject): string;
}

export namespace win32 {
    function normalize(p: string): string;
    function join(...paths: string[]): string;
    function resolve(...pathSegments: string[]): string;
    function isAbsolute(p: string): boolean;
    function relative(from: string, to: string): string;
    function dirname(p: string): string;
    function basename(p: string, ext?: string): string;
    function extname(p: string): string;
    const sep: string;
    const delimiter: string;
    function parse(p: string): ParsedPath;
    function format(pP: FormatInputPathObject): string;
}
