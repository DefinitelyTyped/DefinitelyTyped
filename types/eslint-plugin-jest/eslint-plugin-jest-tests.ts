import { Rules } from 'eslint-plugin-jest';

const rules: Partial<Rules> = {
    'consistent-test-it': ['error', { fn: 'it', withinDescribe: 'test' }],
    'expect-expect': ['warn', { additionalTestBlockFunctions: ['abc'], assertFunctionNames: ['foo'] }],
    'max-nested-describe': [2, { max: 6 }],
    'no-alias-methods': 'warn',
    'no-commented-out-tests': 'off',
    'no-conditional-expect': [0],
    'no-deprecated-functions': 1,
    'no-disabled-tests': ['off'],
    'no-done-callback': 'error',
    'no-duplicate-hooks': 0,
    'no-export': 2,
    'no-focused-tests': 1,
    'no-hooks': [2, { allow: ['afterAll', 'afterEach', 'beforeAll', 'beforeEach'] }],
    'no-identical-title': 1,
    'no-if': 0,
    'no-interpolation-in-snapshots': ['error'],
    'no-jasmine-globals': 0,
    'no-jest-import': 1,
    'no-large-snapshots': ['error', { inlineMaxSize: 20, maxSize: 1 }],
    'no-mocks-import': 1,
    'no-restricted-matchers': ['error', { foo: null, bar: "Don't use bar, kthxbai" }],
    'no-standalone-expect': ['error', { additionalTestBlockFunctions: ['abc'] }],
    'no-test-prefixes': 2,
    'no-test-return-statement': 1,
    'prefer-called-with': 0,
    'prefer-expect-assertions': [1, { onlyFunctionsWithAsyncKeyword: true }],
    'prefer-expect-resolves': 0,
    'prefer-hooks-on-top': 1,
    'prefer-lowercase-title': [2, { allowedPrefixes: ['FOO: '], ignore: ['describe', 'it', 'test'], ignoreTopLevelDescribe: false }],
    'prefer-spy-on': 1,
    'prefer-strict-equal': 2,
    'prefer-to-contain': 0,
    'prefer-to-have-length': 'off',
    'prefer-todo': 'error',
    'require-hook': 'warn',
    'require-to-throw-message': 'error',
    'require-top-level-describe': 1,
    'unbound-method': [0, { ignoreStatic: true }],
    'valid-expect-in-promise': 2,
    'valid-expect': [2, { alwaysAwait: false, maxArgs: 2, minArgs: 2 }],
    'valid-title': [0, {
        disallowedWords: ['bad'],
        ignoreTypeOfDescribeName: true,
        mustMatch: 'blah',
        mustNotMatch: { describe: 'foo', it: 'bar', test: 'baz' }
    }]
};
