namespace isTests {
    { const a: boolean = adone.is.null({}); }
    { const a: boolean = adone.is.undefined({}); }
    { const a: boolean = adone.is.exist({}); }
    { const a: boolean = adone.is.nil({}); }
    { const a: boolean = adone.is.number({}); }
    { const a: boolean = adone.is.numeral({}); }
    { const a: boolean = adone.is.infinite({}); }
    { const a: boolean = adone.is.odd({}); }
    { const a: boolean = adone.is.even({}); }
    { const a: boolean = adone.is.float({}); }
    { const a: boolean = adone.is.negativeZero({}); }
    { const a: boolean = adone.is.string({}); }
    { const a: boolean = adone.is.emptyString({}); }
    { const a: boolean = adone.is.substring("abc", "abcdef"); }
    { const a: boolean = adone.is.substring("abc", "abcdef", 0); }
    { const a: boolean = adone.is.prefix("abc", "abcdef"); }
    { const a: boolean = adone.is.suffix("def", "abbdef"); }
    { const a: boolean = adone.is.boolean({}); }
    { const a: boolean = adone.is.json({}); }
    { const a: boolean = adone.is.object({}); }
    { const a: boolean = adone.is.plainObject({}); }
    { const a: boolean = adone.is.class({}); }
    { const a: boolean = adone.is.emptyObject({}); }
    { const a: boolean = adone.is.propertyOwned({}, "a"); }
    { const a: boolean = adone.is.propertyDefined({}, "a"); }
    { const a: boolean = adone.is.conforms({}, {}); }
    { const a: boolean = adone.is.conforms({}, {}, true); }
    { const a: boolean = adone.is.arrayLikeObject({}); }
    { const a: boolean = adone.is.inArray(1, [1, 2, 3]); }
    { const a: boolean = adone.is.inArray(1, [1, 2, 3], 0); }
    { const a: boolean = adone.is.inArray(1, [1, 2, 3], 0, (a, b) => a === b); }
    { const a: boolean = adone.is.sameType({}, {}); }
    { const a: boolean = adone.is.primitive({}); }
    { const a: boolean = adone.is.equalArrays([], []); }
    { const a: boolean = adone.is.deepEqual({}, {}); }
    { const a: boolean = adone.is.shallowEqual({}, {}); }
    { const a: boolean = adone.is.stream({}); }
    { const a: boolean = adone.is.writableStream({}); }
    { const a: boolean = adone.is.readableStream({}); }
    { const a: boolean = adone.is.duplexStream({}); }
    { const a: boolean = adone.is.transformStream({}); }
    { const a: boolean = adone.is.utf8(Buffer.alloc(10)); }
    { const a: boolean = adone.is.win32PathAbsolute("abc"); }
    { const a: boolean = adone.is.posixPathAbsolute("abc"); }
    { const a: boolean = adone.is.pathAbsolute("abc"); }
    { const a: boolean = adone.is.glob("abc"); }
    { const a: boolean = adone.is.dotfile("abc"); }
    { const a: boolean = adone.is.function(() => { }); }
    { const a: boolean = adone.is.asyncFunction(async () => { }); }
    { const a: boolean = adone.is.promise({}); }
    { const a: boolean = adone.is.validDate("07.08.2017"); }
    { const a: boolean = adone.is.buffer({}); }
    { const a: boolean = adone.is.callback({}); }
    { const a: boolean = adone.is.generator({}); }
    { const a: boolean = adone.is.nan({}); }
    { const a: boolean = adone.is.finite({}); }
    { const a: boolean = adone.is.integer({}); }
    { const a: boolean = adone.is.safeInteger({}); }
    { const a: boolean = adone.is.array({}); }
    { const a: boolean = adone.is.uint8Array({}); }
    { const a: boolean = adone.is.configuration({}); }
    { const a: boolean = adone.is.long({}); }
    { const a: boolean = adone.is.bigNumber({}); }
    { const a: boolean = adone.is.byteArray({}); }
    { const a: boolean = adone.is.datetime({}); }
    { const a: boolean = adone.is.transform({}); }
    { const a: boolean = adone.is.subsystem({}); }
    { const a: boolean = adone.is.application({}); }
    { const a: boolean = adone.is.logger({}); }
    { const a: boolean = adone.is.coreStream({}); }
    { const a: boolean = adone.is.fastStream({}); }
    { const a: boolean = adone.is.fastLocalStream({}); }
    { const a: boolean = adone.is.fastLocalMapStream({}); }
    { const a: boolean = adone.is.genesisNetron({}); }
    { const a: boolean = adone.is.genesisPeer({}); }
    { const a: boolean = adone.is.netronAdapter({}); }
    { const a: boolean = adone.is.netron({}); }
    { const a: boolean = adone.is.netronPeer({}); }
    { const a: boolean = adone.is.netronDefinition({}); }
    { const a: boolean = adone.is.netronDefinitions({}); }
    { const a: boolean = adone.is.netronReference({}); }
    { const a: boolean = adone.is.netronInterface({}); }
    { const a: boolean = adone.is.netronContext({}); }
    { const a: boolean = adone.is.netronIMethod({}, "hello"); }
    { const a: boolean = adone.is.netronIProperty({}, "hello"); }
    { const a: boolean = adone.is.netronStub({}); }
    { const a: boolean = adone.is.netronRemoteStub({}); }
    { const a: boolean = adone.is.netronStream({}); }
    { const a: boolean = adone.is.iterable({}); }
    { const a: boolean = adone.is.windows; }
    { const a: boolean = adone.is.linux; }
    { const a: boolean = adone.is.freebsd; }
    { const a: boolean = adone.is.darwin; }
    { const a: boolean = adone.is.sunos; }
    { const a: boolean = adone.is.uppercase("abc"); }
    { const a: boolean = adone.is.lowercase("abc"); }
    { const a: boolean = adone.is.digits("012"); }
    { const a: boolean = adone.is.identifier("someMethod"); }
    { const a: boolean = adone.is.binaryExtension("mp3"); }
    { const a: boolean = adone.is.binaryPath("a.mp3"); }
    { const a: boolean = adone.is.ip4("192.168.1.1"); }
    { const a: boolean = adone.is.ip6("::192.168.1.1"); }
    { const a: boolean = adone.is.arrayBuffer({}); }
    { const a: boolean = adone.is.arrayBufferView({}); }
    { const a: boolean = adone.is.date({}); }
    { const a: boolean = adone.is.error({}); }
    { const a: boolean = adone.is.map({}); }
    { const a: boolean = adone.is.regexp({}); }
    { const a: boolean = adone.is.set({}); }
    { const a: boolean = adone.is.symbol({}); }
    { const a: boolean = adone.is.validUTF8(Buffer.from("hello")); }
    { const a: boolean = adone.is.vaultValuable({}); }
    { const a: boolean = adone.is.task({}); }
}
