declare namespace GrandTheftMultiplayer.Client.Javascript {

	class BooleanEvent {
		constructor(object: any, method: any);
		Invoke(value: boolean): void;
		BeginInvoke(value: boolean, callback: System.AsyncCallback, object: any): System.IAsyncResult;
		EndInvoke(result: System.IAsyncResult): void;
	}

	class GlobalCamera {
		readonly Active: boolean;
		readonly AttachOffset: GrandTheftMultiplayer.Shared.Math.Vector3;
		readonly BoneAttached: number;
		readonly BonePointing: number;
		readonly CamObj: GTA.Camera;
		readonly EntityAttached: number;
		readonly EntityPointing: number;
		readonly Fov: number;
		readonly PointOffset: GrandTheftMultiplayer.Shared.Math.Vector3;
		readonly Position: GrandTheftMultiplayer.Shared.Math.Vector3;
		readonly Rotation: GrandTheftMultiplayer.Shared.Math.Vector3;
		readonly Shake: string;
		readonly ShakeAmp: number;
		readonly VectorPointing: GrandTheftMultiplayer.Shared.Math.Vector3;
		constructor();
	}

	class IntegerEvent {
		constructor(object: any, method: any);
		Invoke(value: number): void;
		BeginInvoke(value: number, callback: System.AsyncCallback, object: any): System.IAsyncResult;
		EndInvoke(result: System.IAsyncResult): void;
	}

	class JavascriptChat {
		CurrentInput: string;
		IsFocused: boolean;
		SanitationLevel: number;
		onAddMessageRequest: IEvent<(msg: string, hasColor: boolean, r: number, g: number, b: number) => void>;
		onCharInput: IEvent<(value: number) => void>;
		onChatHideRequest: IEvent<(value: boolean) => void>;
		onClearRequest: IEvent<() => void>;
		OnComplete: IEvent<(sender: any, e: System.EventArgs) => void>;
		onFocusChange: IEvent<(value: boolean) => void>;
		onInit: IEvent<() => void>;
		onKeyDown: IEvent<(sender: any, e: System.Windows.Forms.KeyEventArgs) => void>;
		onTick: IEvent<() => void>;
		constructor();
		AddMessage(sender: string, message: string): void;
		Clear(): void;
		Init(): void;
		OnKeyDown(key: System.Windows.Forms.Keys): void;
		sendMessage(msg: string): void;
		Tick(): void;
	}

	class MessageEvent {
		constructor(object: any, method: any);
		Invoke(msg: string, hasColor: boolean, r: number, g: number, b: number): void;
		BeginInvoke(msg: string, hasColor: boolean, r: number, g: number, b: number, callback: System.AsyncCallback, object: any): System.IAsyncResult;
		EndInvoke(result: System.IAsyncResult): void;
	}

	class ScriptContext {
		onResourceStart: IEvent<() => void>;
		onResourceStop: IEvent<() => void>;
		onUpdate: IEvent<() => void>;
		onKeyDown: IEvent<(sender: any, e: System.Windows.Forms.KeyEventArgs) => void>;
		onKeyUp: IEvent<(sender: any, e: System.Windows.Forms.KeyEventArgs) => void>;
		onServerEventTrigger: IEvent<(eventName: string, _arguments: any[]) => void>;
		onChatMessage: IEvent<(msg: string) => void>;
		onChatCommand: IEvent<(msg: string) => void>;
		onEntityStreamIn: IEvent<(item: GrandTheftMultiplayer.Client.Util.LocalHandle, entityType: number) => void>;
		onEntityStreamOut: IEvent<(item: GrandTheftMultiplayer.Client.Util.LocalHandle, entityType: number) => void>;
		onEntityDataChange: IEvent<(entity: GrandTheftMultiplayer.Client.Util.LocalHandle, key: string, oldValue: any) => void>;
		onCustomDataReceived: IEvent<(data: string) => void>;
		onPlayerDeath: IEvent<(killer: GrandTheftMultiplayer.Client.Util.LocalHandle, weapon: number) => void>;
		onPlayerRespawn: IEvent<() => void>;
		onPlayerPickup: IEvent<(entity: GrandTheftMultiplayer.Client.Util.LocalHandle) => void>;
		onPlayerEnterVehicle: IEvent<(entity: GrandTheftMultiplayer.Client.Util.LocalHandle) => void>;
		onPlayerExitVehicle: IEvent<(entity: GrandTheftMultiplayer.Client.Util.LocalHandle) => void>;
		onVehicleHealthChange: IEvent<(oldValue: number) => void>;
		onVehicleDoorBreak: IEvent<(oldValue: number) => void>;
		onVehicleWindowSmash: IEvent<(oldValue: number) => void>;
		onPlayerHealthChange: IEvent<(oldValue: number) => void>;
		onPlayerArmorChange: IEvent<(oldValue: number) => void>;
		onPlayerWeaponSwitch: IEvent<(oldValue: number) => void>;
		onPlayerModelChange: IEvent<(oldValue: number) => void>;
		onVehicleSirenToggle: IEvent<() => void>;
		onPlayerDetonateStickies: IEvent<() => void>;
		onVehicleTyreBurst: IEvent<(oldValue: number) => void>;
		onLocalPlayerDamaged: IEvent<(attacker: GrandTheftMultiplayer.Client.Util.LocalHandle, weaponUsed: number, boneHit: number) => void>;
		onLocalPlayerMeleeHit: IEvent<(attacker: GrandTheftMultiplayer.Client.Util.LocalHandle, weaponUsed: number) => void>;
		onLocalPlayerShoot: IEvent<(weaponUsed: number, aimCoords: GrandTheftMultiplayer.Shared.Math.Vector3) => void>;
		constructor(engine: any);
		startMusic(path: string, looped?: boolean): void;
		stopMusic(): void;
		setMusicVolume(volume: number): void;
		getMusicVolume(): number;
		setMusicTime(time: number): void;
		getMusicTime(): number;
		setAudioTime(time: number): void;
		getAudioTime(): number;
		preloadAudio(path: string): void;
		startAudio(path: string, looped?: boolean): GrandTheftMultiplayer.Client.Javascript.SoundEvent;
		pauseAudio(ev?: GrandTheftMultiplayer.Client.Javascript.SoundEvent): void;
		resumeAudio(ev?: GrandTheftMultiplayer.Client.Javascript.SoundEvent): void;
		stopAudio(ev?: GrandTheftMultiplayer.Client.Javascript.SoundEvent): void;
		isAudioPlaying(ev?: GrandTheftMultiplayer.Client.Javascript.SoundEvent): boolean;
		setGameVolume(vol: number): void;
		setAudioVolume(vol: number): void;
		isAudioInitialized(): boolean;
		playSoundFrontEnd(soundName: string, soundSetName: string): void;
		createCamera(position: GrandTheftMultiplayer.Shared.Math.Vector3, rotation: GrandTheftMultiplayer.Shared.Math.Vector3): GrandTheftMultiplayer.Client.Javascript.GlobalCamera;
		setActiveCamera(camera: GrandTheftMultiplayer.Client.Javascript.GlobalCamera): void;
		setGameplayCameraActive(): void;
		getActiveCamera(): GrandTheftMultiplayer.Client.Javascript.GlobalCamera;
		setCameraShake(cam: GrandTheftMultiplayer.Client.Javascript.GlobalCamera, shakeType: string, amplitute: number): void;
		stopCameraShake(cam: GrandTheftMultiplayer.Client.Javascript.GlobalCamera): void;
		isCameraShaking(cam: GrandTheftMultiplayer.Client.Javascript.GlobalCamera): boolean;
		setCameraPosition(cam: GrandTheftMultiplayer.Client.Javascript.GlobalCamera, pos: GrandTheftMultiplayer.Shared.Math.Vector3): void;
		getCameraPosition(cam: GrandTheftMultiplayer.Client.Javascript.GlobalCamera): GrandTheftMultiplayer.Shared.Math.Vector3;
		setCameraRotation(cam: GrandTheftMultiplayer.Client.Javascript.GlobalCamera, rotation: GrandTheftMultiplayer.Shared.Math.Vector3): void;
		getCameraRotation(cam: GrandTheftMultiplayer.Client.Javascript.GlobalCamera): GrandTheftMultiplayer.Shared.Math.Vector3;
		setCameraFov(cam: GrandTheftMultiplayer.Client.Javascript.GlobalCamera, fov: number): void;
		getCameraFov(cam: GrandTheftMultiplayer.Client.Javascript.GlobalCamera): number;
		pointCameraAtPosition(cam: GrandTheftMultiplayer.Client.Javascript.GlobalCamera, pos: GrandTheftMultiplayer.Shared.Math.Vector3): void;
		pointCameraAtEntity(cam: GrandTheftMultiplayer.Client.Javascript.GlobalCamera, ent: GrandTheftMultiplayer.Client.Util.LocalHandle, offset: GrandTheftMultiplayer.Shared.Math.Vector3): void;
		pointCameraAtEntityBone(cam: GrandTheftMultiplayer.Client.Javascript.GlobalCamera, ent: GrandTheftMultiplayer.Client.Util.LocalHandle, bone: number, offset: GrandTheftMultiplayer.Shared.Math.Vector3): void;
		stopCameraPointing(cam: GrandTheftMultiplayer.Client.Javascript.GlobalCamera): void;
		attachCameraToEntity(cam: GrandTheftMultiplayer.Client.Javascript.GlobalCamera, ent: GrandTheftMultiplayer.Client.Util.LocalHandle, offset: GrandTheftMultiplayer.Shared.Math.Vector3): void;
		attachCameraToEntityBone(cam: GrandTheftMultiplayer.Client.Javascript.GlobalCamera, ent: GrandTheftMultiplayer.Client.Util.LocalHandle, bone: number, offset: GrandTheftMultiplayer.Shared.Math.Vector3): void;
		detachCamera(cam: GrandTheftMultiplayer.Client.Javascript.GlobalCamera): void;
		interpolateCameras(from: GrandTheftMultiplayer.Client.Javascript.GlobalCamera, to: GrandTheftMultiplayer.Client.Javascript.GlobalCamera, duration: number, easepos: boolean, easerot: boolean): void;
		getGameplayCamPos(): GrandTheftMultiplayer.Shared.Math.Vector3;
		getGameplayCamRot(): GrandTheftMultiplayer.Shared.Math.Vector3;
		getGameplayCamDir(): GrandTheftMultiplayer.Shared.Math.Vector3;
		createCefBrowser(width: number, height: number, local?: boolean): GrandTheftMultiplayer.Client.GUI.Browser;
		destroyCefBrowser(browser: GrandTheftMultiplayer.Client.GUI.Browser): void;
		isCefBrowserInitialized(browser: GrandTheftMultiplayer.Client.GUI.Browser): boolean;
		waitUntilCefBrowserInit(browser: GrandTheftMultiplayer.Client.GUI.Browser): void;
		waitUntilCefBrowserLoaded(browser: GrandTheftMultiplayer.Client.GUI.Browser): void;
		setCefBrowserSize(browser: GrandTheftMultiplayer.Client.GUI.Browser, width: number, height: number): void;
		getCefBrowserSize(browser: GrandTheftMultiplayer.Client.GUI.Browser): System.Drawing.Size;
		setCefBrowserHeadless(browser: GrandTheftMultiplayer.Client.GUI.Browser, headless: boolean): void;
		getCefBrowserHeadless(browser: GrandTheftMultiplayer.Client.GUI.Browser): boolean;
		setCefBrowserPosition(browser: GrandTheftMultiplayer.Client.GUI.Browser, xPos: number, yPos: number): void;
		getCefBrowserPosition(browser: GrandTheftMultiplayer.Client.GUI.Browser): System.Drawing.Point;
		loadPageCefBrowser(browser: GrandTheftMultiplayer.Client.GUI.Browser, uri: string, noCache?: boolean): void;
		loadHtmlCefBrowser(browser: GrandTheftMultiplayer.Client.GUI.Browser, html: string): void;
		goBackCefBrowser(browser: GrandTheftMultiplayer.Client.GUI.Browser): void;
		isCefBrowserLoading(browser: GrandTheftMultiplayer.Client.GUI.Browser): boolean;
		pinCefBrowser(browser: GrandTheftMultiplayer.Client.GUI.Browser, x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, x4: number, y4: number): void;
		clearCefPinning(browser: GrandTheftMultiplayer.Client.GUI.Browser): void;
		getBytesSentPerSecond(): number;
		getBytesReceivedPerSecond(): number;
		isControlJustPressed(control: number): boolean;
		isControlPressed(control: number): boolean;
		isDisabledControlJustReleased(control: number): boolean;
		isDisabledControlJustPressed(control: number): boolean;
		isDisabledControlPressed(control: number): boolean;
		isControlJustReleased(control: number): boolean;
		disableControlThisFrame(control: number): void;
		enableControlThisFrame(control: number): void;
		disableAllControlsThisFrame(): void;
		getControlNormal(control: number): number;
		getDisabledControlNormal(control: number): number;
		setControlNormal(control: number, value: number): void;
		drawLine(start: GrandTheftMultiplayer.Shared.Math.Vector3, end: GrandTheftMultiplayer.Shared.Math.Vector3, a: number, r: number, g: number, b: number): void;
		drawGameTexture(dict: string, txtName: string, x: number, y: number, width: number, height: number, heading: number, r: number, g: number, b: number, alpha: number): void;
		drawRectangle(xPos: number, yPos: number, wSize: number, hSize: number, r: number, g: number, b: number, alpha: number): void;
		drawText(caption: string, xPos: number, yPos: number, scale: number, r: number, g: number, b: number, alpha: number, font: number, justify: number, shadow: boolean, outline: boolean, wordWrap: number): void;
		addTextElement(caption: string, x: number, y: number, scale: number, r: number, g: number, b: number, a: number, font: number, alignment: number): NativeUI.UIResText;
		dxDrawTexture(path: string, pos: System.Drawing.Point, size: System.Drawing.Size, rotation?: number): void;
		createParticleEffectOnPosition(ptfxLibrary: string, ptfxName: string, position: GrandTheftMultiplayer.Shared.Math.Vector3, rotation: GrandTheftMultiplayer.Shared.Math.Vector3, scale: number): void;
		createParticleEffectOnEntity(ptfxLibrary: string, ptfxName: string, entity: GrandTheftMultiplayer.Client.Util.LocalHandle, offset: GrandTheftMultiplayer.Shared.Math.Vector3, rotation: GrandTheftMultiplayer.Shared.Math.Vector3, scale: number, boneIndex?: number): void;
		createExplosion(explosionType: number, position: GrandTheftMultiplayer.Shared.Math.Vector3, damageScale: number): void;
		createOwnedExplosion(owner: GrandTheftMultiplayer.Client.Util.LocalHandle, explosionType: number, position: GrandTheftMultiplayer.Shared.Math.Vector3, damageScale: number): void;
		deleteEntity(handle: GrandTheftMultiplayer.Client.Util.LocalHandle): void;
		setEntityPosition(ent: GrandTheftMultiplayer.Client.Util.LocalHandle, pos: GrandTheftMultiplayer.Shared.Math.Vector3, ground?: boolean): void;
		getEntityPosition(entity: GrandTheftMultiplayer.Client.Util.LocalHandle): GrandTheftMultiplayer.Shared.Math.Vector3;
		setEntityRotation(ent: GrandTheftMultiplayer.Client.Util.LocalHandle, rot: GrandTheftMultiplayer.Shared.Math.Vector3): void;
		getEntityRotation(entity: GrandTheftMultiplayer.Client.Util.LocalHandle): GrandTheftMultiplayer.Shared.Math.Vector3;
		setEntityVelocity(entity: GrandTheftMultiplayer.Client.Util.LocalHandle, velocity: GrandTheftMultiplayer.Shared.Math.Vector3): void;
		getEntityVelocity(entity: GrandTheftMultiplayer.Client.Util.LocalHandle): GrandTheftMultiplayer.Shared.Math.Vector3;
		setEntityTransparency(entity: GrandTheftMultiplayer.Client.Util.LocalHandle, alpha: number): void;
		getEntityTransparency(entity: GrandTheftMultiplayer.Client.Util.LocalHandle): number;
		getEntityType(entity: GrandTheftMultiplayer.Client.Util.LocalHandle): number;
		setEntityDimension(entity: GrandTheftMultiplayer.Client.Util.LocalHandle, dimension: number): void;
		getEntityDimension(entity: GrandTheftMultiplayer.Client.Util.LocalHandle): number;
		getEntityModel(entity: GrandTheftMultiplayer.Client.Util.LocalHandle): number;
		doesEntityExist(entity: GrandTheftMultiplayer.Client.Util.LocalHandle): boolean;
		setEntityInvincible(entity: GrandTheftMultiplayer.Client.Util.LocalHandle, invincible: boolean): void;
		getEntityInvincible(entity: GrandTheftMultiplayer.Client.Util.LocalHandle): boolean;
		getEntityBoneIndexByName(entity: GrandTheftMultiplayer.Client.Util.LocalHandle, boneName: string): number;
		setEntityCollisionless(entity: GrandTheftMultiplayer.Client.Util.LocalHandle, status: boolean): void;
		getEntityCollisionless(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle): boolean;
		setEntityPositionFrozen(entity: GrandTheftMultiplayer.Client.Util.LocalHandle, frozen: boolean): void;
		isEntityPositionFrozen(entity: GrandTheftMultiplayer.Client.Util.LocalHandle): boolean;
		isEntityOnScreen(entity: GrandTheftMultiplayer.Client.Util.LocalHandle): boolean;
		attachEntity(ent1: GrandTheftMultiplayer.Client.Util.LocalHandle, ent2: GrandTheftMultiplayer.Client.Util.LocalHandle, bone: string, positionOffset: GrandTheftMultiplayer.Shared.Math.Vector3, rotationOffset: GrandTheftMultiplayer.Shared.Math.Vector3): void;
		detachEntity(ent: GrandTheftMultiplayer.Client.Util.LocalHandle): void;
		isEntityAttachedToAnything(ent: GrandTheftMultiplayer.Client.Util.LocalHandle): boolean;
		isEntityAttachedToEntity(from: GrandTheftMultiplayer.Client.Util.LocalHandle, to: GrandTheftMultiplayer.Client.Util.LocalHandle): boolean;
		isInRangeOf(entity: GrandTheftMultiplayer.Shared.Math.Vector3, destination: GrandTheftMultiplayer.Shared.Math.Vector3, range: number): boolean;
		vehicleNameToModel(modelName: string): number;
		pedNameToModel(modelName: string): number;
		pickupNameToModel(modelName: string): number;
		weaponNameToModel(modelName: string): number;
		isPed(ent: GrandTheftMultiplayer.Client.Util.LocalHandle): boolean;
		isVehicle(ent: GrandTheftMultiplayer.Client.Util.LocalHandle): boolean;
		isProp(ent: GrandTheftMultiplayer.Client.Util.LocalHandle): boolean;
		setEntitySyncedData(entity: GrandTheftMultiplayer.Client.Util.LocalHandle, key: string, data: any): boolean;
		resetEntitySyncedData(entity: GrandTheftMultiplayer.Client.Util.LocalHandle, key: string): void;
		hasEntitySyncedData(entity: GrandTheftMultiplayer.Client.Util.LocalHandle, key: string): boolean;
		getEntitySyncedData(entity: GrandTheftMultiplayer.Client.Util.LocalHandle, key: string): any;
		getAllEntitySyncedData(entity: GrandTheftMultiplayer.Client.Util.LocalHandle): System.Array<any>;
		setWorldSyncedData(key: string, data: any): boolean;
		resetWorldSyncedData(key: string): void;
		hasWorldSyncedData(key: string): boolean;
		getWorldSyncedData(key: string): any;
		getAllWorldSyncedData(): System.Array<any>;
		createBlip(pos: GrandTheftMultiplayer.Shared.Math.Vector3): GrandTheftMultiplayer.Client.Util.LocalHandle;
		setBlipPosition(blip: GrandTheftMultiplayer.Client.Util.LocalHandle, pos: GrandTheftMultiplayer.Shared.Math.Vector3): void;
		getBlipPosition(blip: GrandTheftMultiplayer.Client.Util.LocalHandle): GrandTheftMultiplayer.Shared.Math.Vector3;
		setBlipColor(blip: GrandTheftMultiplayer.Client.Util.LocalHandle, color: number): void;
		getBlipColor(blip: GrandTheftMultiplayer.Client.Util.LocalHandle): number;
		setBlipSprite(blip: GrandTheftMultiplayer.Client.Util.LocalHandle, sprite: number): void;
		getBlipSprite(blip: GrandTheftMultiplayer.Client.Util.LocalHandle): number;
		setBlipName(blip: GrandTheftMultiplayer.Client.Util.LocalHandle, name: string): void;
		getBlipName(blip: GrandTheftMultiplayer.Client.Util.LocalHandle): string;
		setBlipTransparency(blip: GrandTheftMultiplayer.Client.Util.LocalHandle, alpha: number): void;
		getBlipTransparency(blip: GrandTheftMultiplayer.Client.Util.LocalHandle): number;
		setBlipShortRange(blip: GrandTheftMultiplayer.Client.Util.LocalHandle, shortRange: boolean): void;
		getBlipShortRange(blip: GrandTheftMultiplayer.Client.Util.LocalHandle): boolean;
		showBlipRoute(blip: GrandTheftMultiplayer.Client.Util.LocalHandle, show: boolean): void;
		setBlipScale(blip: GrandTheftMultiplayer.Client.Util.LocalHandle, scale: number): void;
		getBlipScale(blip: GrandTheftMultiplayer.Client.Util.LocalHandle): number;
		setBlipRouteVisible(blip: GrandTheftMultiplayer.Client.Util.LocalHandle, visible: boolean): void;
		getBlipRouteVisible(blip: GrandTheftMultiplayer.Client.Util.LocalHandle): boolean;
		setBlipRouteColor(blip: GrandTheftMultiplayer.Client.Util.LocalHandle, color: number): void;
		getBlipRouteColor(blip: GrandTheftMultiplayer.Client.Util.LocalHandle): number;
		createMarker(markerType: number, pos: GrandTheftMultiplayer.Shared.Math.Vector3, dir: GrandTheftMultiplayer.Shared.Math.Vector3, rot: GrandTheftMultiplayer.Shared.Math.Vector3, scale: GrandTheftMultiplayer.Shared.Math.Vector3, r: number, g: number, b: number, alpha: number): GrandTheftMultiplayer.Client.Util.LocalHandle;
		setMarkerType(marker: GrandTheftMultiplayer.Client.Util.LocalHandle, type: number): void;
		getMarkerType(marker: GrandTheftMultiplayer.Client.Util.LocalHandle): number;
		setMarkerColor(marker: GrandTheftMultiplayer.Client.Util.LocalHandle, alpha: number, r: number, g: number, b: number): void;
		getMarkerColor(marker: GrandTheftMultiplayer.Client.Util.LocalHandle): System.Drawing.Color;
		setMarkerScale(marker: GrandTheftMultiplayer.Client.Util.LocalHandle, scale: GrandTheftMultiplayer.Shared.Math.Vector3): void;
		getMarkerScale(marker: GrandTheftMultiplayer.Client.Util.LocalHandle): GrandTheftMultiplayer.Shared.Math.Vector3;
		setMarkerDirection(marker: GrandTheftMultiplayer.Client.Util.LocalHandle, dir: GrandTheftMultiplayer.Shared.Math.Vector3): void;
		getMarkerDirection(marker: GrandTheftMultiplayer.Client.Util.LocalHandle): GrandTheftMultiplayer.Shared.Math.Vector3;
		createPed(model: number, pos: GrandTheftMultiplayer.Shared.Math.Vector3, rot: GrandTheftMultiplayer.Shared.Math.Vector3): GrandTheftMultiplayer.Client.Util.LocalHandle;
		createPed(model: number, pos: GrandTheftMultiplayer.Shared.Math.Vector3, heading: number): GrandTheftMultiplayer.Client.Util.LocalHandle;
		getBoneName(bone: number): string;
		createTextLabel(text: string, pos: GrandTheftMultiplayer.Shared.Math.Vector3, range: number, size: number, entitySeethrough?: boolean): GrandTheftMultiplayer.Client.Util.LocalHandle;
		setTextLabelText(label: GrandTheftMultiplayer.Client.Util.LocalHandle, text: string): void;
		setTextLabelColor(textLabel: GrandTheftMultiplayer.Client.Util.LocalHandle, alpha: number, r: number, g: number, b: number): void;
		getTextLabelColor(textLabel: GrandTheftMultiplayer.Client.Util.LocalHandle): System.Drawing.Color;
		setTextLabelSeethrough(handle: GrandTheftMultiplayer.Client.Util.LocalHandle, seethrough: boolean): void;
		getTextLabelSeethrough(handle: GrandTheftMultiplayer.Client.Util.LocalHandle): boolean;
		createVehicle(model: number, pos: GrandTheftMultiplayer.Shared.Math.Vector3, rot: GrandTheftMultiplayer.Shared.Math.Vector3): GrandTheftMultiplayer.Client.Util.LocalHandle;
		setVehicleLivery(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle, livery: number): void;
		getVehicleLivery(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle): number;
		setVehicleLocked(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle, locked: boolean): void;
		getVehicleLocked(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle): boolean;
		getVehicleTrailer(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle): GrandTheftMultiplayer.Client.Util.LocalHandle;
		getVehicleTraileredBy(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle): GrandTheftMultiplayer.Client.Util.LocalHandle;
		getVehicleSirenState(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle): boolean;
		isVehicleTyrePopped(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle, tyre: number): boolean;
		popVehicleTyre(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle, tyre: number, pop: boolean): void;
		isVehicleDoorBroken(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle, door: number): boolean;
		setVehicleDoorState(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle, door: number, open: boolean): void;
		getVehicleDoorState(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle, door: number): boolean;
		breakVehicleTyre(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle, door: number, breakDoor: boolean): void;
		isVehicleWindowBroken(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle, window: number): boolean;
		breakVehicleWindow(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle, window: number, breakWindow: boolean): void;
		setVehicleExtra(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle, slot: number, enabled: boolean): void;
		getVehicleExtra(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle, slot: number): boolean;
		setVehicleNumberPlate(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle, plate: string): void;
		getVehicleNumberPlate(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle): string;
		setVehicleEngineStatus(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle, turnedOn: boolean): void;
		getVehicleEngineStatus(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle): boolean;
		setVehicleSpecialLightStatus(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle, status: boolean): void;
		getVehicleSpecialLightStatus(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle): boolean;
		setVehicleMod(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle, slot: number, modType: number): void;
		getVehicleMod(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle, slot: number): number;
		removeVehicleMod(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle, slot: number): void;
		setVehicleBulletproofTyres(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle, bulletproof: boolean): void;
		getVehicleBulletproofTyres(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle): boolean;
		setVehicleNumberPlateStyle(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle, style: number): void;
		getVehicleNumberPlateStyle(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle): number;
		setVehiclePearlescentColor(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle, color: number): void;
		getVehiclePearlescentColor(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle): number;
		setVehicleWheelColor(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle, color: number): void;
		getVehicleWheelColor(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle): number;
		setVehicleWheelType(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle, type: number): void;
		getVehicleWheelType(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle): number;
		setVehicleModColor1(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle, r: number, g: number, b: number): void;
		setVehicleModColor2(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle, r: number, g: number, b: number): void;
		setVehicleTyreSmokeColor(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle, r: number, g: number, b: number): void;
		setVehicleWindowTint(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle, type: number): void;
		getVehicleWindowTint(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle): number;
		setVehicleEnginePowerMultiplier(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle, mult: number): void;
		getVehicleEnginePowerMultiplier(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle): number;
		setVehicleEngineTorqueMultiplier(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle, mult: number): void;
		getVehicleEngineTorqueMultiplier(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle): number;
		setVehicleNeonState(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle, slot: number, turnedOn: boolean): void;
		getVehicleNeonState(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle, slot: number): boolean;
		setVehicleNeonColor(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle, r: number, g: number, b: number): void;
		getVehicleNeonColor(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle): System.Drawing.Color;
		setVehicleDashboardColor(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle, type: number): void;
		getVehicleDashboardColor(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle): number;
		setVehicleTrimColor(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle, type: number): void;
		getVehicleTrimColor(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle): number;
		getVehicleDisplayName(model: number): string;
		getVehicleMaxSpeed(model: number): number;
		getVehicleMaxBraking(model: number): number;
		getVehicleMaxTraction(model: number): number;
		getVehicleMaxAcceleration(model: number): number;
		getVehicleMaxOccupants(model: number): number;
		getVehicleClass(model: number): number;
		setVehiclePrimaryColor(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle, color: number): void;
		setVehicleSecondaryColor(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle, color: number): void;
		setVehicleCustomPrimaryColor(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle, r: number, g: number, b: number): void;
		setVehicleCustomSecondaryColor(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle, r: number, g: number, b: number): void;
		getVehicleCustomPrimaryColor(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle): System.Drawing.Color;
		getVehicleCustomSecondaryColor(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle): System.Drawing.Color;
		getVehiclePrimaryColor(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle): number;
		getVehicleSecondaryColor(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle): number;
		getVehicleHealth(entity: GrandTheftMultiplayer.Client.Util.LocalHandle): number;
		getVehicleRPM(entity: GrandTheftMultiplayer.Client.Util.LocalHandle): number;
		explodeVehicle(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle): void;
		getVehicleModelName(model: number): string;
		registerChatOverride(): GrandTheftMultiplayer.Client.Javascript.JavascriptChat;
		setCanOpenChat(show: boolean): void;
		getCanOpenChat(): boolean;
		setChatVisible(display: boolean): void;
		getChatVisible(): boolean;
		isChatOpen(): boolean;
		setDisplayWastedShard(show: boolean): void;
		getDisplayWastedShard(): boolean;
		setUiColor(r: number, g: number, b: number): void;
		sendChatMessage(sender: string, text: string): void;
		sendChatMessage(text: string): void;
		getScreenResolutionMantainRatio(): System.Drawing.SizeF;
		getScreenResolutionMaintainRatio(): System.Drawing.SizeF;
		getScreenResolution(): System.Drawing.Size;
		sendNotification(text: string): void;
		displaySubtitle(text: string): void;
		displaySubtitle(text: string, duration: number): void;
		displayHelpTextThisFrame(text: string): void;
		showShard(text: string, timeout?: number): void;
		showColorShard(text: string, description: string, color1: number, color2: number, time?: number): void;
		showWeaponPurchasedShard(text: string, weaponName: string, weapon: number, time?: number): void;
		getWaypointPosition(): GrandTheftMultiplayer.Shared.Math.Vector3;
		isWaypointSet(): boolean;
		setWaypoint(x: number, y: number): void;
		removeWaypoint(): void;
		setHudVisible(visible: boolean): void;
		getHudVisible(): boolean;
		createMenu(subtitle: string, x: number, y: number, anchor: number): NativeUI.UIMenu;
		createMenu(title: string, subtitle: string, x: number, y: number, anchor: number, enableBanner?: boolean): NativeUI.UIMenu;
		createMenuItem(label: string, description: string): NativeUI.UIMenuItem;
		createColoredItem(label: string, description: string, hexColor: string, hexHighlightColor: string): NativeUI.UIMenuColoredItem;
		createCheckboxItem(label: string, description: string, isChecked: boolean): NativeUI.UIMenuCheckboxItem;
		createListItem(label: string, description: string, items: System.Collections.Generic.List<string>, index: number): NativeUI.UIMenuListItem;
		getMenuPool(): NativeUI.MenuPool;
		drawMenu(menu: NativeUI.UIMenu): void;
		setMenuBannerSprite(menu: NativeUI.UIMenu, spritedict: string, spritename: string): void;
		setMenuBannerTexture(menu: NativeUI.UIMenu, path: string): void;
		setMenuBannerRectangle(menu: NativeUI.UIMenu, alpha: number, red: number, green: number, blue: number): void;
		setMenuTitle(menu: NativeUI.UIMenu, title: string): void;
		setMenuSubtitle(menu: NativeUI.UIMenu, text: string): void;
		getUserInput(defaultText: string, maxlen: number): string;
		requestScaleform(scaleformName: string): GTA.Scaleform;
		renderScaleform(sc: GTA.Scaleform, x: number, y: number, w: number, h: number): void;
		playScreenEffect(effectName: string, duration: number, looped: boolean): void;
		lerpVector(start: GrandTheftMultiplayer.Shared.Math.Vector3, end: GrandTheftMultiplayer.Shared.Math.Vector3, currentTime: number, duration: number): GrandTheftMultiplayer.Shared.Math.Vector3;
		lerpFloat(start: number, end: number, currentTime: number, duration: number): number;
		angleBetween(from: GrandTheftMultiplayer.Shared.Math.Vector3, to: GrandTheftMultiplayer.Shared.Math.Vector3): number;
		loadModel(model: number): void;
		getModelDimensions(model: number): GrandTheftMultiplayer.Client.Misc.ModelDimensions;
		callNative(hash: string, ...args: any[]): void;
		returnNative(hash: string, returnType: number, ...args: any[]): any;
		getGamePlayer(): number;
		getLocalPlayer(): GrandTheftMultiplayer.Client.Util.LocalHandle;
		getLocalPlayerInvincible(): boolean;
		detonatePlayerStickies(): void;
		setPlayerNametag(player: GrandTheftMultiplayer.Client.Util.LocalHandle, text: string): void;
		resetPlayerNametag(player: GrandTheftMultiplayer.Client.Util.LocalHandle): void;
		setPlayerNametagVisible(player: GrandTheftMultiplayer.Client.Util.LocalHandle, show: boolean): void;
		getPlayerNametagVisible(player: GrandTheftMultiplayer.Client.Util.LocalHandle): boolean;
		setPlayerNametagColor(player: GrandTheftMultiplayer.Client.Util.LocalHandle, r: number, g: number, b: number): void;
		resetPlayerNametagColor(player: GrandTheftMultiplayer.Client.Util.LocalHandle): void;
		isPlayerInAnyVehicle(player: GrandTheftMultiplayer.Client.Util.LocalHandle): boolean;
		isPlayerOnFire(player: GrandTheftMultiplayer.Client.Util.LocalHandle): boolean;
		isPlayerParachuting(player: GrandTheftMultiplayer.Client.Util.LocalHandle): boolean;
		isPlayerInFreefall(player: GrandTheftMultiplayer.Client.Util.LocalHandle): boolean;
		isPlayerAiming(player: GrandTheftMultiplayer.Client.Util.LocalHandle): boolean;
		isPlayerShooting(player: GrandTheftMultiplayer.Client.Util.LocalHandle): boolean;
		isPlayerReloading(player: GrandTheftMultiplayer.Client.Util.LocalHandle): boolean;
		isPlayerInCover(player: GrandTheftMultiplayer.Client.Util.LocalHandle): boolean;
		isPlayerOnLadder(player: GrandTheftMultiplayer.Client.Util.LocalHandle): boolean;
		getPlayerAimingPoint(player: GrandTheftMultiplayer.Client.Util.LocalHandle): GrandTheftMultiplayer.Shared.Math.Vector3;
		isPlayerDead(player: GrandTheftMultiplayer.Client.Util.LocalHandle): boolean;
		setPlayerSkin(model: number): void;
		setPlayerDefaultClothes(): void;
		setPlayerTeam(team: number): void;
		getPlayerTeam(): number;
		playPlayerScenario(name: string): void;
		playPlayerAnimation(animDict: string, animName: string, flag: number, duration?: number): void;
		stopPlayerAnimation(): void;
		setPlayerClothes(player: GrandTheftMultiplayer.Client.Util.LocalHandle, slot: number, drawable: number, texture: number): void;
		setPlayerAccessory(player: GrandTheftMultiplayer.Client.Util.LocalHandle, slot: number, drawable: number, texture: number): void;
		clearPlayerAccessory(player: GrandTheftMultiplayer.Client.Util.LocalHandle, slot: number): void;
		clearPlayerTasks(): void;
		setPlayerInvincible(invinc: boolean): void;
		setPlayerWantedLevel(wantedLevel: number): void;
		getPlayerWantedLevel(): number;
		getPlayerInvincible(): boolean;
		setPlayerArmor(armor: number): void;
		getPlayerArmor(player: GrandTheftMultiplayer.Client.Util.LocalHandle): number;
		getPlayerByName(name: string): GrandTheftMultiplayer.Client.Util.LocalHandle;
		getPlayerName(player: GrandTheftMultiplayer.Client.Util.LocalHandle): string;
		getPlayerVehicleSeat(player: GrandTheftMultiplayer.Client.Util.LocalHandle): number;
		getPlayerSeatbelt(player: GrandTheftMultiplayer.Client.Util.LocalHandle): boolean;
		setPlayerIntoVehicle(vehicle: GrandTheftMultiplayer.Client.Util.LocalHandle, seat: number): void;
		setPlayerHealth(health: number): void;
		getPlayerHealth(player: GrandTheftMultiplayer.Client.Util.LocalHandle): number;
		getPlayerAimCoords(player: GrandTheftMultiplayer.Client.Util.LocalHandle): GrandTheftMultiplayer.Shared.Math.Vector3;
		getPlayerPing(player: GrandTheftMultiplayer.Client.Util.LocalHandle): number;
		getPlayerVehicle(player: GrandTheftMultiplayer.Client.Util.LocalHandle): GrandTheftMultiplayer.Client.Util.LocalHandle;
		requestControlOfPlayer(player: GrandTheftMultiplayer.Client.Util.LocalHandle): void;
		stopControlOfPlayer(player: GrandTheftMultiplayer.Client.Util.LocalHandle): void;
		setPlayerWeaponTint(weapon: number, tint: number): void;
		getPlayerWeaponTint(weapon: number): number;
		givePlayerWeaponComponent(weapon: number, component: number): void;
		removePlayerWeaponComponent(weapon: number, component: number): void;
		hasPlayerWeaponComponent(weapon: number, component: number): boolean;
		getAllWeaponComponents(weapon: GrandTheftMultiplayer.Shared.WeaponHash): System.Array<any>;
		getPlayerCurrentWeapon(): number;
		getWeaponName(weapon: number): string;
		removeAllPlayerWeapons(): void;
		doesPlayerHaveWeapon(weapon: number): boolean;
		removePlayerWeapon(weapon: number): void;
		createRaycast(start: GrandTheftMultiplayer.Shared.Math.Vector3, end: GrandTheftMultiplayer.Shared.Math.Vector3, flag: number, ignoreEntity: any): GrandTheftMultiplayer.Client.Javascript.ScriptContext.Raycast;
		showCursor(show: boolean): void;
		isCursorShown(): boolean;
		getCursorPosition(): System.Drawing.PointF;
		getCursorPositionMantainRatio(): System.Drawing.PointF;
		getCursorPositionMaintainRatio(): System.Drawing.PointF;
		worldToScreen(pos: GrandTheftMultiplayer.Shared.Math.Vector3): System.Drawing.PointF;
		worldToScreenMantainRatio(pos: GrandTheftMultiplayer.Shared.Math.Vector3): System.Drawing.PointF;
		worldToScreenMaintainRatio(pos: GrandTheftMultiplayer.Shared.Math.Vector3): System.Drawing.PointF;
		screenToWorld(pos: System.Drawing.PointF): GrandTheftMultiplayer.Shared.Math.Vector3;
		screenToWorldMantainRatio(pos: System.Drawing.PointF): GrandTheftMultiplayer.Shared.Math.Vector3;
		screenToWorldMaintainRatio(pos: System.Drawing.PointF): GrandTheftMultiplayer.Shared.Math.Vector3;
		screenToWorld(pos: System.Drawing.PointF, camPos: GrandTheftMultiplayer.Shared.Math.Vector3, camRot: GrandTheftMultiplayer.Shared.Math.Vector3): GrandTheftMultiplayer.Shared.Math.Vector3;
		screenToWorldMantainRatio(pos: System.Drawing.PointF, camPos: GrandTheftMultiplayer.Shared.Math.Vector3, camrot: GrandTheftMultiplayer.Shared.Math.Vector3): GrandTheftMultiplayer.Shared.Math.Vector3;
		screenToWorldMaintainRatio(pos: System.Drawing.PointF, camPos: GrandTheftMultiplayer.Shared.Math.Vector3, camrot: GrandTheftMultiplayer.Shared.Math.Vector3): GrandTheftMultiplayer.Shared.Math.Vector3;
		setSetting(name: string, value: any): void;
		getSetting(name: string): any;
		doesSettingExist(name: string): boolean;
		removeSetting(name: string): void;
		loadConfig(config: string): GrandTheftMultiplayer.Client.Javascript.XmlGroup;
		fromJson(json: string): any;
		toJson(data: any): string;
		getStreamedPlayers(): System.Array<any>;
		getStreamedVehicles(): System.Array<any>;
		getStreamedObjects(): System.Array<any>;
		getStreamedPickups(): System.Array<any>;
		getStreamedPeds(): System.Array<any>;
		getStreamedMarkers(): System.Array<any>;
		getStreamedTextLabels(): System.Array<any>;
		getAllPlayers(): System.Array<any>;
		getAllVehicles(): System.Array<any>;
		getAllObjects(): System.Array<any>;
		getAllPickups(): System.Array<any>;
		getAllPeds(): System.Array<any>;
		getAllMarkers(): System.Array<any>;
		getAllTextLabels(): System.Array<any>;
		setWeather(weather: number): void;
		getWeather(): number;
		resetWeather(): void;
		setTime(hours: number, minutes: number): void;
		getTime(): System.TimeSpan;
		resetTime(): void;
		setSnowEnabled(toggle: boolean, deepPedTracks: boolean, deepVehicleTracks: boolean, infoSubtitle?: boolean): void;
		getOffsetInWorldCoords(entity: GrandTheftMultiplayer.Client.Util.LocalHandle, offset: GrandTheftMultiplayer.Shared.Math.Vector3): GrandTheftMultiplayer.Shared.Math.Vector3;
		getOffsetFromWorldCoords(entity: GrandTheftMultiplayer.Client.Util.LocalHandle, pos: GrandTheftMultiplayer.Shared.Math.Vector3): GrandTheftMultiplayer.Shared.Math.Vector3;
		getStreetName(position: GrandTheftMultiplayer.Shared.Math.Vector3): string;
		getZoneName(position: GrandTheftMultiplayer.Shared.Math.Vector3): string;
		getZoneNameLabel(position: GrandTheftMultiplayer.Shared.Math.Vector3): string;
		getGroundHeight(position: GrandTheftMultiplayer.Shared.Math.Vector3): number;
		startCoroutine(target: any): void;
		getCurrentResourceName(): string;
		verifyIntegrityOfCache(): void;
		getHashKey(input: string): number;
		createProjectile(weapon: number, start: GrandTheftMultiplayer.Shared.Math.Vector3, target: GrandTheftMultiplayer.Shared.Math.Vector3, damage: number, speed?: number, dimension?: number): void;
		createOwnedProjectile(owner: GrandTheftMultiplayer.Client.Util.LocalHandle, weapon: number, start: GrandTheftMultiplayer.Shared.Math.Vector3, target: GrandTheftMultiplayer.Shared.Math.Vector3, damage: number, speed?: number, dimension?: number): void;
		loadInterior(pos: GrandTheftMultiplayer.Shared.Math.Vector3): void;
		disconnect(reason: string): void;
		formatTime(ms: number, format: string): string;
		forceSendAimData(force: boolean): void;
		isAimDataForced(): boolean;
		isSpectating(): boolean;
		getGameTime(): number;
		getGlobalTime(): number;
		f(value: number): GrandTheftMultiplayer.Client.Javascript.ScriptContext.fArg;
		sleep(ms: number): void;
		triggerServerEvent(eventName: string, ..._arguments: any[]): void;
		toString(obj: any): string;
		loadAnimationDict(dict: string): void;
		playPoliceReport(reportName: string): void;
		getGameText(labelName: string): string;
	}

	class SoundEvent {
		play(): void;
		stop(): void;
		isPlaying(): boolean;
	}

	class xmlElement {
		constructor();
		getElementData(elementName: string, returnType: number): any;
		hasElementData(elementName: string): boolean;
	}

	class XmlGroup {
		constructor();
		getElementByType(typeName: string): GrandTheftMultiplayer.Client.Javascript.xmlElement;
		getElementsByType(typeName: string): System.Collections.Generic.IEnumerable<GrandTheftMultiplayer.Client.Javascript.xmlElement>;
		getNumberOfElementsOfType(typeName: string): number;
		getSubgroup(groupName: string): GrandTheftMultiplayer.Client.Javascript.XmlGroup;
		hasAnyElementOfType(typeName: string): boolean;
	}

}
