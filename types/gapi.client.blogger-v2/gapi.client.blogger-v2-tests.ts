/* This is stub file for gapi.client.blogger definition tests */
/* IMPORTANT. 
 * This file was automatically generated by https://github.com/Bolisov/google-api-typings-generator. Please do not edit it manually.
 * In case of any problems please post issue to https://github.com/Bolisov/google-api-typings-generator    
 **/

gapi.load('client', () => { 
    // now we can use gapi.client
    
    gapi.client.load('blogger', 'v2', () => {
        // now we can use gapi.client.blogger
   
        // don't forget to authenticate your client before sending any request to resources:     
        // declare client_id registered in Google Developers Console
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [     
                // Manage your Blogger account
                'https://www.googleapis.com/auth/blogger',
            ];
        const immediate = true;

        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /* handle succesfull authorization */
                run();
            } else {
                /* handle authorization error */
            }
        }); 
    });

    async function run() {  
        
        // Gets one blog by id.
        await gapi.client.blogs.get({ blogId: "blogId",  }); 
        
        // Gets one comment by id.
        await gapi.client.comments.get({ blogId: "blogId", commentId: "commentId", postId: "postId",  }); 
        
        // Retrieves the comments for a blog, possibly filtered.
        await gapi.client.comments.list({ blogId: "blogId", postId: "postId",  }); 
        
        // Gets one blog page by id.
        await gapi.client.pages.get({ blogId: "blogId", pageId: "pageId",  }); 
        
        // Retrieves pages for a blog, possibly filtered.
        await gapi.client.pages.list({ blogId: "blogId",  }); 
        
        // Get a post by id.
        await gapi.client.posts.get({ blogId: "blogId", postId: "postId",  }); 
        
        // Retrieves a list of posts, possibly filtered.
        await gapi.client.posts.list({ blogId: "blogId",  }); 
        
        // Gets one user by id.
        await gapi.client.users.get({ userId: "userId",  });
    }
});
