import { AbstractCrudObject } from "./../abstract-crud-object";
import AbstractObject from "./../abstract-object";
import Cursor from "./../cursor";
import AdStudy from "./ad-study";
import AdAccount from "./ad-account";
import Application from "./application";
import AdsPixel from "./ads-pixel";
import BusinessUser from "./business-user";
import CustomConversion from "./custom-conversion";
import ProductCatalog from "./product-catalog";
import CPASCollaborationRequest from "./cpas-collaboration-request";
import CPASBusinessSetupConfig from "./cpas-business-setup-config";
import BusinessCreativeFolder from "./business-creative-folder";
import EventSourceGroup from "./event-source-group";
import BusinessImage from "./business-image";
import OpenBridgeConfiguration from "./open-bridge-configuration";
import SystemUser from "./system-user";
import AdVideo from "./ad-video";
/**
 * Business

 * @see {@link https://developers.facebook.com/docs/marketing-api/}
 */
export default class Business extends AbstractCrudObject {
    static get Fields(): Record<string, any>;
    static get TwoFactorType(): Record<string, any>;
    static get Vertical(): Record<string, any>;
    static get PermittedTasks(): Record<string, any>;
    static get SurveyBusinessType(): Record<string, any>;
    static get TimezoneId(): Record<string, any>;
    static get PagePermittedTasks(): Record<string, any>;
    static get SubverticalV2(): Record<string, any>;
    static get VerticalV2(): Record<string, any>;
    static get ActionSource(): Record<string, any>;
    createAccessToken(fields: string[], params?: Record<string, any>, pathOverride?: string | null): Promise<Business>;
    deleteAdAccounts(params?: Record<string, any>): Promise<any>;
    getAdStudies(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    createAdStudy(fields: string[], params?: Record<string, any>, pathOverride?: string | null): Promise<AdStudy>;
    createAdAccount(fields: string[], params?: Record<string, any>, pathOverride?: string | null): Promise<AdAccount>;
    createAddPhoneNumber(fields: string[], params?: Record<string, any>, pathOverride?: string | null): Promise<Business>;
    createAdNetworkApplication(fields: string[], params?: Record<string, any>, pathOverride?: string | null): Promise<Application>;
    getAdNetworkAnalytics(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    createAdNetworkAnalytic(fields: string[], params?: Record<string, any>, pathOverride?: string | null): Promise<Business>;
    getAdNetworkAnalyticsResults(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    getAdsReportingMmmReports(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    getAdsReportingMmmSchedulers(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    getAdsPixels(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    createAdsPixel(fields: string[], params?: Record<string, any>, pathOverride?: string | null): Promise<AdsPixel>;
    deleteAgencies(params?: Record<string, any>): Promise<any>;
    getAgencies(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    getAnPlacements(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    createBlockListDraft(fields: string[], params?: Record<string, any>, pathOverride?: string | null): Promise<Business>;
    getBusinessAssetGroups(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    getBusinessInvoices(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    getBusinessUsers(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    createBusinessUser(fields: string[], params?: Record<string, any>, pathOverride?: string | null): Promise<BusinessUser>;
    getBusinessProjects(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    createClaimCustomConversion(fields: string[], params?: Record<string, any>, pathOverride?: string | null): Promise<CustomConversion>;
    getClientAdAccounts(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    getClientApps(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    createClientApp(fields: string[], params?: Record<string, any>, pathOverride?: string | null): Promise<Business>;
    getClientOffsiteSignalContainerBusinessObjects(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    getClientPages(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    createClientPage(fields: string[], params?: Record<string, any>, pathOverride?: string | null): Promise<Business>;
    getClientPixels(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    getClientProductCatalogs(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    getClientWhatsAppBusinessAccounts(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    deleteClients(params?: Record<string, any>): Promise<any>;
    getClients(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    getCollaborativeAdsCollaborationRequests(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    createCollaborativeAdsCollaborationRequest(fields: string[], params?: Record<string, any>, pathOverride?: string | null): Promise<CPASCollaborationRequest>;
    getCollaborativeAdsSuggestedPartners(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    getCommerceMerchantSettings(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    getCpasBusinessSetupConfig(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    createCpasBusinessSetupConfig(fields: string[], params?: Record<string, any>, pathOverride?: string | null): Promise<CPASBusinessSetupConfig>;
    getCpasMerchantConfig(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    createCreativeFolder(fields: string[], params?: Record<string, any>, pathOverride?: string | null): Promise<BusinessCreativeFolder>;
    getCreditCards(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    createCustomConversion(fields: string[], params?: Record<string, any>, pathOverride?: string | null): Promise<CustomConversion>;
    createDraftNegativeKeywordList(fields: string[], params?: Record<string, any>, pathOverride?: string | null): Promise<AbstractObject>;
    getEventSourceGroups(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    createEventSourceGroup(fields: string[], params?: Record<string, any>, pathOverride?: string | null): Promise<EventSourceGroup>;
    getExtendedCreditApplications(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    getExtendedCredits(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    createImage(fields: string[], params?: Record<string, any>, pathOverride?: string | null): Promise<BusinessImage>;
    getInitiatedAudienceSharingRequests(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    deleteInstagramAccounts(params?: Record<string, any>): Promise<any>;
    getInstagramAccounts(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    getInstagramBusinessAccounts(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    deleteMAnAgeDBusinesses(params?: Record<string, any>): Promise<any>;
    createMAnAgeDBusiness(fields: string[], params?: Record<string, any>, pathOverride?: string | null): Promise<Business>;
    createMAnAgeDPartnerBusinessSetup(fields: string[], params?: Record<string, any>, pathOverride?: string | null): Promise<Business>;
    deleteMAnAgeDPartnerBusinesses(params?: Record<string, any>): Promise<any>;
    createMAnAgeDPartnerBusiness(fields: string[], params?: Record<string, any>, pathOverride?: string | null): Promise<AbstractObject>;
    getNegativeKeywordLists(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    getOpenBridgeConfigurations(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    createOpenBridgeConfiguration(fields: string[], params?: Record<string, any>, pathOverride?: string | null): Promise<OpenBridgeConfiguration>;
    getOwnedAdAccounts(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    createOwnedAdAccount(fields: string[], params?: Record<string, any>, pathOverride?: string | null): Promise<Business>;
    getOwnedApps(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    createOwnedApp(fields: string[], params?: Record<string, any>, pathOverride?: string | null): Promise<Business>;
    deleteOwnedBusinesses(params?: Record<string, any>): Promise<any>;
    getOwnedBusinesses(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    createOwnedBusiness(fields: string[], params?: Record<string, any>, pathOverride?: string | null): Promise<Business>;
    getOwnedInstagramAccounts(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    getOwnedOffsiteSignalContainerBusinessObjects(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    getOwnedPages(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    createOwnedPage(fields: string[], params?: Record<string, any>, pathOverride?: string | null): Promise<Business>;
    getOwnedPixels(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    getOwnedProductCatalogs(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    createOwnedProductCatalog(fields: string[], params?: Record<string, any>, pathOverride?: string | null): Promise<ProductCatalog>;
    getOwnedWhatsAppBusinessAccounts(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    deletePages(params?: Record<string, any>): Promise<any>;
    getPartnerAccountLinking(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    createPartnerPremiumOption(fields: string[], params?: Record<string, any>, pathOverride?: string | null): Promise<AbstractObject>;
    getPendingClientAdAccounts(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    getPendingClientApps(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    getPendingClientPages(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    getPendingOwnedAdAccounts(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    getPendingOwnedPages(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    getPendingShareDOffsiteSignalContainerBusinessObjects(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    getPendingUsers(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    getPicture(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    createPixelTo(fields: string[], params?: Record<string, any>, pathOverride?: string | null): Promise<AbstractObject>;
    getPreVerifiedNumbers(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    getReceivedAudienceSharingRequests(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    getResellerGuidances(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    getSelfCertifiedWhatsappBusinessSubmissions(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    createSetupMAnAgeDPartnerAdAccount(fields: string[], params?: Record<string, any>, pathOverride?: string | null): Promise<Business>;
    deleteSharePreVerifiedNumbers(params?: Record<string, any>): Promise<any>;
    createSharePreVerifiedNumber(fields: string[], params?: Record<string, any>, pathOverride?: string | null): Promise<Business>;
    createSystemUserAccessToken(fields: string[], params?: Record<string, any>, pathOverride?: string | null): Promise<Business>;
    getSystemUsers(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    createSystemUser(fields: string[], params?: Record<string, any>, pathOverride?: string | null): Promise<SystemUser>;
    getThirdPartyMeasurementReportDataset(fields: string[], params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<Cursor>;
    createVideo(fields: string[], params?: Record<string, any>, pathOverride?: string | null): Promise<AdVideo>;
    get(fields: string[], params?: Record<string, any>): Promise<Business>;    get(fields: string[], params?: Record<string, any>): Promise<Business>;
}
