import { AbstractCrudObject } from "./../abstract-crud-object";
import AbstractObject from "./../abstract-object";
import Cursor from "./../cursor";
import AdStudy from "./ad-study";
import Business from "./business";
import Post from "./post";
import FundraiserPersonToCharity from "./fundraiser-person-to-charity";
import LiveVideo from "./live-video";
import Photo from "./photo";
import AdVideo from "./ad-video";
/**
 * User
 * @extends AbstractCrudObject
 * @see {@link https://developers.facebook.com/docs/marketing-api/}
 */
export default class User extends AbstractCrudObject {
    static get Fields(): Readonly<{
        about: "about";
        age_range: "age_range";
        avatar_2d_profile_picture: "avatar_2d_profile_picture";
        birthday: "birthday";
        community: "community";
        cover: "cover";
        currency: "currency";
        education: "education";
        email: "email";
        favorite_athletes: "favorite_athletes";
        favorite_teams: "favorite_teams";
        first_name: "first_name";
        gender: "gender";
        hometown: "hometown";
        id: "id";
        id_for_avatars: "id_for_avatars";
        inspirational_people: "inspirational_people";
        install_type: "install_type";
        installed: "installed";
        is_guest_user: "is_guest_user";
        is_work_account: "is_work_account";
        languages: "languages";
        last_name: "last_name";
        link: "link";
        local_news_megaphone_dismiss_status: "local_news_megaphone_dismiss_status";
        local_news_subscription_status: "local_news_subscription_status";
        locale: "locale";
        location: "location";
        meeting_for: "meeting_for";
        middle_name: "middle_name";
        name: "name";
        name_format: "name_format";
        payment_pricepoints: "payment_pricepoints";
        political: "political";
        profile_pic: "profile_pic";
        quotes: "quotes";
        relationship_status: "relationship_status";
        shared_login_upgrade_required_by: "shared_login_upgrade_required_by";
        short_name: "short_name";
        significant_other: "significant_other";
        sports: "sports";
        supports_donate_button_in_live_video: "supports_donate_button_in_live_video";
        third_party_id: "third_party_id";
        timezone: "timezone";
        token_for_business: "token_for_business";
        updated_time: "updated_time";
        verified: "verified";
        video_upload_limits: "video_upload_limits";
        website: "website";
    }>;
    static get LocalNewsMegaphoneDismissStatus(): Readonly<{
        no: "NO";
        yes: "YES";
    }>;
    static get LocalNewsSubscriptionStatus(): Readonly<{
        status_off: "STATUS_OFF";
        status_on: "STATUS_ON";
    }>;
    static get Filtering(): Readonly<{
        ema: "ema";
        groups: "groups";
        groups_social: "groups_social";
    }>;
    static get Type(): Readonly<{
        content_update: "content_update";
        generic: "generic";
    }>;
    deleteAccessTokens(params?: Record<string, any>): Promise<any>;
    createAccessToken(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<User>;
    getAccounts(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createAccount(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<AbstractObject>;
    getAdStudies(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createAdStudy(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<AdStudy>;
    getAdAccounts(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getAlbums(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createApplication(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<User>;
    getAppRequestFormerRecipients(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getAppRequests(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getAssignedAdAccounts(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getAssignedApplications(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getAssignedBusinessAssetGroups(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getAssignedPages(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getAssignedProductCatalogs(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getAvatars(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getBusinessUsers(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    deleteBusinesses(params?: Record<string, any>): Promise<any>;
    getBusinesses(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createBusiness(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<Business>;
    getConversations(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getCustomLabels(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getEvents(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getFeed(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createFeed(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<Post>;
    getFriends(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getFundraisers(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createFundraiser(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<FundraiserPersonToCharity>;
    getGroups(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getIdsForApps(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getIdsForBusiness(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getIdsForPages(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getLikes(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getLiveVideos(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createLiveVideo(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<LiveVideo>;
    createMessengerDesktopPerformanceTrace(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<User>;
    getMusic(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createNotification(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<User>;
    getPaymentTransactions(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    deletePermissions(params?: Record<string, any>): Promise<any>;
    getPermissions(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getPersonalAdAccounts(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getPhotos(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createPhoto(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<Photo>;
    getPicture(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getPosts(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getRichMediaDocuments(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createStagingResource(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<User>;
    getVideos(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createVideo(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<AdVideo>;
    delete(fields: Array<string>, params?: Record<string, any>): AbstractObject;
    get(fields: Array<string>, params?: Record<string, any>): User;
    update(fields: Array<string>, params?: Record<string, any>): User;
}
