import { AbstractCrudObject } from "./../abstract-crud-object";
import AbstractObject from "./../abstract-object";
import Cursor from "./../cursor";
import PagePostExperiment from "./page-post-experiment";
import CanvasBodyElement from "./canvas-body-element";
import Canvas from "./canvas";
import VideoCopyrightMatch from "./video-copyright-match";
import PageUserMessageThreadLabel from "./page-user-message-thread-label";
import AdsPixel from "./ads-pixel";
import ImageCopyright from "./image-copyright";
import AdVideo from "./ad-video";
import InstagramUser from "./instagram-user";
import LeadgenForm from "./leadgen-form";
import LiveVideo from "./live-video";
import MediaFingerprint from "./media-fingerprint";
import Persona from "./persona";
import Photo from "./photo";
import ProfilePictureSource from "./profile-picture-source";
import VideoCopyrightRule from "./video-copyright-rule";
import VideoCopyright from "./video-copyright";
/**
 * Page
 * @extends AbstractCrudObject
 * @see {@link https://developers.facebook.com/docs/marketing-api/}
 */
export default class Page extends AbstractCrudObject {
    static get Fields(): Record<string, any>;
    static get Attire(): Record<string, any>;
    static get FoodStyles(): Record<string, any>;
    static get PickupOptions(): Record<string, any>;
    static get TemporaryStatus(): Record<string, any>;
    static get PermittedTasks(): Record<string, any>;
    static get Tasks(): Record<string, any>;
    static get Alignment(): Record<string, any>;
    static get EntryPointIcon(): Record<string, any>;
    static get EntryPointLabel(): Record<string, any>;
    static get GreetingDialogDisplay(): Record<string, any>;
    static get GuestChatMode(): Record<string, any>;
    static get MobileChatDisplay(): Record<string, any>;
    static get BackdatedTimeGranularity(): Record<string, any>;
    static get Formatting(): Record<string, any>;
    static get PlaceAttachmentSetting(): Record<string, any>;
    static get PostSurfacesBlacklist(): Record<string, any>;
    static get PostingToRedspace(): Record<string, any>;
    static get TargetSurface(): Record<string, any>;
    static get UnpublishedContentType(): Record<string, any>;
    static get MessagingType(): Record<string, any>;
    static get NotificationType(): Record<string, any>;
    static get SenderAction(): Record<string, any>;
    static get SuggestionAction(): Record<string, any>;
    static get Platform(): Record<string, any>;
    static get Model(): Record<string, any>;
    static get DeveloperAction(): Record<string, any>;
    static get SubscribedFields(): Record<string, any>;
    static get Action(): Record<string, any>;
    static get ActionType(): Record<string, any>;
    getAbTests(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createAbTest(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<PagePostExperiment>;
    createAcknowledgeOrder(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<Page>;
    getAdsPosts(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    deleteAgencies(params?: Record<string, any>): Promise<any>;
    getAgencies(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createAgency(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<Page>;
    getAlbums(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getArExperience(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    deleteAssignedUsers(params?: Record<string, any>): Promise<any>;
    getAssignedUsers(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createAssignedUser(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<Page>;
    deleteBlocked(params?: Record<string, any>): Promise<any>;
    getBlocked(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createBlocked(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<AbstractObject>;
    createBusinessDatum(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<AbstractObject>;
    getBusinessProjects(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getCallToActions(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createCall(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<AbstractObject>;
    getCanvasElements(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createCanvasElement(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<CanvasBodyElement>;
    getCanvases(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createCanvase(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<Canvas>;
    getChatPlugin(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createChatPlugin(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<Page>;
    getCommerceMerchantSettings(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getCommerceOrders(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getCommercePayouts(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getCommerceTransactions(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getConversations(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createCopyrightManualClaim(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<VideoCopyrightMatch>;
    getCrosspostWhitelistedPages(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getCustomLabels(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createCustomLabel(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<PageUserMessageThreadLabel>;
    deleteCustomUserSettings(params?: Record<string, any>): Promise<any>;
    getCustomUserSettings(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createCustomUserSetting(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<Page>;
    getDataSet(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createDataSet(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<AdsPixel>;
    getEvents(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createExtendThreadControl(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<Page>;
    getFantasyGames(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getFeed(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createFeed(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<Page>;
    getGlobalBrandChildren(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getGroups(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getImageCopyrights(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createImageCopyright(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<ImageCopyright>;
    getIndexedVideos(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getInsights(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getInstagramAccounts(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getLeadGenForms(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createLeadGenForm(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<LeadgenForm>;
    getLikes(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getLiveVideos(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createLiveVideo(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<LiveVideo>;
    deleteLocations(params?: Record<string, any>): Promise<any>;
    getLocations(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createLocation(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<Page>;
    getMediaFingerprints(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createMediaFingerprint(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<MediaFingerprint>;
    createMessageAttachMEnt(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<AbstractObject>;
    createMessage(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<Page>;
    getMessagingFeatureReview(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getMessengerCallSettings(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createMessengerCallSetting(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<Page>;
    getMessengerLeadForMs(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createMessengerLeadForM(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<Page>;
    deleteMessengerProfile(params?: Record<string, any>): Promise<any>;
    getMessengerProfile(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createMessengerProfile(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<Page>;
    createNlpConfig(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<Page>;
    getNotificationMessageTokens(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createNotificationMessagesDevSupport(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<Page>;
    getPageBackedInstagramAccounts(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createPageBackedInstagramAccount(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<InstagramUser>;
    createPageWhatsAppNumberVerification(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<Page>;
    createPassThreadControl(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<Page>;
    createPassThreadMetadatum(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<Page>;
    getPersonas(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createPersona(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<Persona>;
    createPhotoStory(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<Page>;
    getPhotos(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createPhoto(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<Photo>;
    getPicture(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createPicture(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<ProfilePictureSource>;
    getPosts(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getProductCatalogs(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getPublishedPosts(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getRatings(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createReleaseThreadControl(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<Page>;
    createRequestThreadControl(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<Page>;
    getRoles(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getRtbDynamicPosts(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getScheduleDPosts(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getSecondaryReceivers(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getSettings(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createSetting(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<Page>;
    getShopSetupStatus(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getStories(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    deleteSubscribedApps(params?: Record<string, any>): Promise<any>;
    getSubscribedApps(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createSubscribedApp(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<Page>;
    getTabs(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getTagged(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createTakeThreadControl(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<Page>;
    createThreadAction(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<Page>;
    getThreadOwner(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getThreads(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createUnlinkAccount(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<Page>;
    getVideoCopyrightRules(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createVideoCopyrightRule(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<VideoCopyrightRule>;
    createVideoCopyright(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<VideoCopyright>;
    getVideoLists(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    getVideoReels(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createVideoReel(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<AdVideo>;
    createVideoStory(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<AbstractObject>;
    getVideos(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createVideo(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<AdVideo>;
    getVisitorPosts(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    deleteWelcomeMessageFlows(params?: Record<string, any>): Promise<any>;
    getWelcomeMessageFlows(fields: Array<string>, params?: Record<string, any>, fetchFirstPage?: boolean): Cursor | Promise<any>;
    createWelcomeMessageFlow(fields: Array<string>, params?: Record<string, any>, pathOverride?: string | null | undefined): Promise<AbstractObject>;
    get(fields: Array<string>, params?: Record<string, any>): Page;
    update(fields: Array<string>, params?: Record<string, any>): Page;
}
