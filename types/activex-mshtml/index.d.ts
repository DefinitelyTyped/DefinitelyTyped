// Type definitions for Microsoft HTML Object Library - MSHTML 4.0
// Project: https://msdn.microsoft.com/en-us/library/aa741317(v=vs.85).aspx
// Definitions by: Zev Spitz <https://github.com/zspitz>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

declare namespace MSHTML {
    const enum _BEHAVIOR_EVENT {
        BEHAVIOR_EVENT_Max = 2147483647,
        BEHAVIOREVENT_APPLYSTYLE = 2,
        BEHAVIOREVENT_CONTENTREADY = 0,
        BEHAVIOREVENT_CONTENTSAVE = 4,
        BEHAVIOREVENT_DOCUMENTCONTEXTCHANGE = 3,
        BEHAVIOREVENT_DOCUMENTREADY = 1,
        BEHAVIOREVENT_FIRST = 0,
        BEHAVIOREVENT_LAST = 4,
    }

    const enum _BEHAVIOR_EVENT_FLAGS {
        BEHAVIOR_EVENT_FLAGS_Max = 2147483647,
        BEHAVIOREVENTFLAGS_BUBBLE = 1,
        BEHAVIOREVENTFLAGS_STANDARDADDITIVE = 2,
    }

    const enum _BEHAVIOR_LAYOUT_INFO {
        BEHAVIOR_LAYOUT_INFO_Max = 2147483647,
        BEHAVIORLAYOUTINFO_FULLDELEGATION = 1,
        BEHAVIORLAYOUTINFO_MAPSIZE = 4,
        BEHAVIORLAYOUTINFO_MODIFYNATURAL = 2,
    }

    const enum _BEHAVIOR_LAYOUT_MODE {
        BEHAVIOR_LAYOUT_MODE_Max = 2147483647,
        BEHAVIORLAYOUTMODE_FINAL_PERCENT = 32768,
        BEHAVIORLAYOUTMODE_MAXWIDTH = 4,
        BEHAVIORLAYOUTMODE_MEDIA_RESOLUTION = 16384,
        BEHAVIORLAYOUTMODE_MINWIDTH = 2,
        BEHAVIORLAYOUTMODE_NATURAL = 1,
    }

    const enum _BEHAVIOR_RELATION {
        BEHAVIOR_CHILD = 2,
        BEHAVIOR_FIRSTRELATION = 0,
        BEHAVIOR_LASTRELATION = 3,
        BEHAVIOR_PARENT = 1,
        BEHAVIOR_RELATION_Max = 2147483647,
        BEHAVIOR_SAMEELEMENT = 0,
        BEHAVIOR_SIBLING = 3,
    }

    const enum _BEHAVIOR_RENDER_INFO {
        BEHAVIOR_RENDER_INFO_Max = 2147483647,
        BEHAVIORRENDERINFO_3DSURFACE = 2097152,
        BEHAVIORRENDERINFO_ABOVECONTENT = 40,
        BEHAVIORRENDERINFO_AFTERBACKGROUND = 2,
        BEHAVIORRENDERINFO_AFTERCONTENT = 8,
        BEHAVIORRENDERINFO_AFTERFOREGROUND = 32,
        BEHAVIORRENDERINFO_ALLLAYERS = 255,
        BEHAVIORRENDERINFO_BEFOREBACKGROUND = 1,
        BEHAVIORRENDERINFO_BEFORECONTENT = 4,
        BEHAVIORRENDERINFO_DISABLEALLLAYERS = 3840,
        BEHAVIORRENDERINFO_DISABLEBACKGROUND = 256,
        BEHAVIORRENDERINFO_DISABLECONTENT = 1024,
        BEHAVIORRENDERINFO_DISABLENEGATIVEZ = 512,
        BEHAVIORRENDERINFO_DISABLEPOSITIVEZ = 2048,
        BEHAVIORRENDERINFO_HITTESTING = 4096,
        BEHAVIORRENDERINFO_SURFACE = 1048576,
    }

    const enum _bodyScroll {
        bodyScroll_Max = 2147483647,
        bodyScrollauto = 4,
        bodyScrolldefault = 3,
        bodyScrollno = 2,
        bodyScrollyes = 1,
    }

    const enum _BoolValue {
        BoolValue_Max = 2147483647,
        False = 0,
        True = 1,
    }

    const enum _CARET_DIRECTION {
        CARET_DIRECTION_BACKWARD = 2,
        CARET_DIRECTION_FORWARD = 3,
        CARET_DIRECTION_INDETERMINATE = 0,
        CARET_DIRECTION_Max = 2147483647,
        CARET_DIRECTION_SAME = 1,
    }

    const enum _COORD_SYSTEM {
        COORD_SYSTEM_CLIENT = 5,
        COORD_SYSTEM_CONTAINER = 2,
        COORD_SYSTEM_CONTENT = 3,
        COORD_SYSTEM_FRAME = 4,
        COORD_SYSTEM_GLOBAL = 0,
        COORD_SYSTEM_Max = 2147483647,
        COORD_SYSTEM_PARENT = 1,
    }

    const enum _DEV_CONSOLE_MESSAGE_LEVEL {
        DCML_ERROR = 2,
        DCML_INFORMATIONAL = 0,
        DCML_WARNING = 1,
        DEV_CONSOLE_MESSAGE_LEVEL_Max = 2147483647,
    }

    const enum _DISPLAY_BREAK {
        DISPLAY_BREAK_Block = 1,
        DISPLAY_BREAK_Break = 2,
        DISPLAY_BREAK_Max = 2147483647,
        DISPLAY_BREAK_None = 0,
    }

    const enum _DISPLAY_GRAVITY {
        DISPLAY_GRAVITY_Max = 2147483647,
        DISPLAY_GRAVITY_NextLine = 2,
        DISPLAY_GRAVITY_PreviousLine = 1,
    }

    const enum _DISPLAY_MOVEUNIT {
        DISPLAY_MOVEUNIT_BottomOfWindow = 6,
        DISPLAY_MOVEUNIT_CurrentLineEnd = 4,
        DISPLAY_MOVEUNIT_CurrentLineStart = 3,
        DISPLAY_MOVEUNIT_Max = 2147483647,
        DISPLAY_MOVEUNIT_NextLine = 2,
        DISPLAY_MOVEUNIT_PreviousLine = 1,
        DISPLAY_MOVEUNIT_TopOfWindow = 5,
    }

    const enum _DOM_EVENT_PHASE {
        DEP_AT_TARGET = 2,
        DEP_BUBBLING_PHASE = 3,
        DEP_CAPTURING_PHASE = 1,
        DOM_EVENT_PHASE_Max = 2147483647,
    }

    const enum _DomConstructor {
        DomConstructor_Max = 2147483647,
        DomConstructorAttr = 1,
        DomConstructorBehaviorUrnsCollection = 2,
        DomConstructorBookmarkCollection = 3,
        DomConstructorCompatibleInfo = 4,
        DomConstructorCompatibleInfoCollection = 5,
        DomConstructorControlRangeCollection = 6,
        DomConstructorCSSCurrentStyleDeclaration = 7,
        DomConstructorCSSRuleList = 8,
        DomConstructorCSSRuleStyleDeclaration = 9,
        DomConstructorCSSStyleDeclaration = 10,
        DomConstructorCSSStyleRule = 11,
        DomConstructorCSSStyleSheet = 12,
        DomConstructorDataTransfer = 13,
        DomConstructorDOMImplementation = 14,
        DomConstructorElement = 15,
        DomConstructorEvent = 16,
        DomConstructorHistory = 17,
        DomConstructorHTCElementBehaviorDefaults = 18,
        DomConstructorHTMLAnchorElement = 19,
        DomConstructorHTMLAreaElement = 20,
        DomConstructorHTMLAreasCollection = 21,
        DomConstructorHTMLBaseElement = 22,
        DomConstructorHTMLBaseFontElement = 23,
        DomConstructorHTMLBGSoundElement = 24,
        DomConstructorHTMLBlockElement = 25,
        DomConstructorHTMLBodyElement = 26,
        DomConstructorHTMLBRElement = 27,
        DomConstructorHTMLButtonElement = 28,
        DomConstructorHTMLCollection = 29,
        DomConstructorHTMLCommentElement = 30,
        DomConstructorHTMLDDElement = 31,
        DomConstructorHTMLDivElement = 32,
        DomConstructorHTMLDListElement = 34,
        DomConstructorHTMLDocument = 33,
        DomConstructorHTMLDTElement = 35,
        DomConstructorHTMLEmbedElement = 36,
        DomConstructorHTMLFieldSetElement = 37,
        DomConstructorHTMLFontElement = 38,
        DomConstructorHTMLFormElement = 39,
        DomConstructorHTMLFrameElement = 40,
        DomConstructorHTMLFrameSetElement = 41,
        DomConstructorHTMLGenericElement = 42,
        DomConstructorHTMLHeadElement = 43,
        DomConstructorHTMLHeadingElement = 44,
        DomConstructorHTMLHRElement = 45,
        DomConstructorHTMLHtmlElement = 46,
        DomConstructorHTMLIFrameElement = 47,
        DomConstructorHTMLImageElement = 48,
        DomConstructorHTMLInputElement = 49,
        DomConstructorHTMLIsIndexElement = 50,
        DomConstructorHTMLLabelElement = 51,
        DomConstructorHTMLLegendElement = 52,
        DomConstructorHTMLLIElement = 53,
        DomConstructorHTMLLinkElement = 54,
        DomConstructorHTMLMapElement = 55,
        DomConstructorHTMLMarqueeElement = 56,
        DomConstructorHTMLMetaElement = 57,
        DomConstructorHTMLModelessDialog = 58,
        DomConstructorHTMLNamespaceInfo = 59,
        DomConstructorHTMLNamespaceInfoCollection = 60,
        DomConstructorHTMLNextIdElement = 61,
        DomConstructorHTMLNoShowElement = 62,
        DomConstructorHTMLObjectElement = 63,
        DomConstructorHTMLOListElement = 64,
        DomConstructorHTMLOptionElement = 65,
        DomConstructorHTMLParagraphElement = 66,
        DomConstructorHTMLParamElement = 67,
        DomConstructorHTMLPhraseElement = 68,
        DomConstructorHTMLPluginsCollection = 69,
        DomConstructorHTMLPopup = 70,
        DomConstructorHTMLScriptElement = 71,
        DomConstructorHTMLSelectElement = 72,
        DomConstructorHTMLSpanElement = 73,
        DomConstructorHTMLStyleElement = 74,
        DomConstructorHTMLTableCaptionElement = 75,
        DomConstructorHTMLTableCellElement = 76,
        DomConstructorHTMLTableColElement = 77,
        DomConstructorHTMLTableElement = 78,
        DomConstructorHTMLTableRowElement = 79,
        DomConstructorHTMLTableSectionElement = 80,
        DomConstructorHTMLTextAreaElement = 81,
        DomConstructorHTMLTextElement = 82,
        DomConstructorHTMLTitleElement = 83,
        DomConstructorHTMLUListElement = 84,
        DomConstructorHTMLUnknownElement = 85,
        DomConstructorImage = 86,
        DomConstructorLocation = 87,
        DomConstructorMax = 107,
        DomConstructorNamedNodeMap = 88,
        DomConstructorNavigator = 89,
        DomConstructorNodeList = 90,
        DomConstructorObject = 0,
        DomConstructorOption = 91,
        DomConstructorScreen = 92,
        DomConstructorSelection = 93,
        DomConstructorStaticNodeList = 94,
        DomConstructorStorage = 95,
        DomConstructorStyleSheetList = 96,
        DomConstructorStyleSheetPage = 97,
        DomConstructorStyleSheetPageList = 98,
        DomConstructorText = 99,
        DomConstructorTextRange = 100,
        DomConstructorTextRangeCollection = 101,
        DomConstructorTextRectangle = 102,
        DomConstructorTextRectangleList = 103,
        DomConstructorWindow = 104,
        DomConstructorXDomainRequest = 105,
        DomConstructorXMLHttpRequest = 106,
    }

    const enum _ELEMENT_ADJACENCY {
        ELEM_ADJ_AfterBegin = 1,
        ELEM_ADJ_AfterEnd = 3,
        ELEM_ADJ_BeforeBegin = 0,
        ELEM_ADJ_BeforeEnd = 2,
        ELEMENT_ADJACENCY_Max = 2147483647,
    }

    const enum _ELEMENT_CORNER {
        ELEMENT_CORNER_BOTTOM = 3,
        ELEMENT_CORNER_BOTTOMLEFT = 7,
        ELEMENT_CORNER_BOTTOMRIGHT = 8,
        ELEMENT_CORNER_LEFT = 2,
        ELEMENT_CORNER_Max = 2147483647,
        ELEMENT_CORNER_NONE = 0,
        ELEMENT_CORNER_RIGHT = 4,
        ELEMENT_CORNER_TOP = 1,
        ELEMENT_CORNER_TOPLEFT = 5,
        ELEMENT_CORNER_TOPRIGHT = 6,
    }

    const enum _ELEMENT_TAG_ID {
        ELEMENT_TAG_ID_Max = 2147483647,
        TAGID_A = 2,
        TAGID_ABBR = 110,
        TAGID_ACRONYM = 3,
        TAGID_ADDRESS = 4,
        TAGID_APPLET = 5,
        TAGID_AREA = 6,
        TAGID_ARTICLE = 199,
        TAGID_ASIDE = 200,
        TAGID_AUDIO = 192,
        TAGID_B = 7,
        TAGID_BASE = 8,
        TAGID_BASEFONT = 9,
        TAGID_BDO = 10,
        TAGID_BGSOUND = 11,
        TAGID_BIG = 12,
        TAGID_BLINK = 13,
        TAGID_BLOCKQUOTE = 14,
        TAGID_BODY = 15,
        TAGID_BR = 16,
        TAGID_BUTTON = 17,
        TAGID_CANVAS = 195,
        TAGID_CAPTION = 18,
        TAGID_CENTER = 19,
        TAGID_CITE = 20,
        TAGID_CODE = 21,
        TAGID_COL = 22,
        TAGID_COLGROUP = 23,
        TAGID_COMMAND = 220,
        TAGID_COMMENT = 24,
        TAGID_COMMENT_RAW = 25,
        TAGID_COUNT = 224,
        TAGID_DATALIST = 217,
        TAGID_DD = 26,
        TAGID_DEL = 27,
        TAGID_DETAILS = 221,
        TAGID_DFN = 28,
        TAGID_DIR = 29,
        TAGID_DIV = 30,
        TAGID_DL = 31,
        TAGID_DOCTYPE = 196,
        TAGID_DT = 32,
        TAGID_EM = 33,
        TAGID_EMBED = 34,
        TAGID_FIELDSET = 35,
        TAGID_FIGCAPTION = 201,
        TAGID_FIGURE = 202,
        TAGID_FONT = 36,
        TAGID_FOOTER = 203,
        TAGID_FORM = 37,
        TAGID_FRAME = 38,
        TAGID_FRAMESET = 39,
        TAGID_GENERIC = 40,
        TAGID_H1 = 41,
        TAGID_H2 = 42,
        TAGID_H3 = 43,
        TAGID_H4 = 44,
        TAGID_H5 = 45,
        TAGID_H6 = 46,
        TAGID_HEAD = 47,
        TAGID_HEADER = 204,
        TAGID_HGROUP = 205,
        TAGID_HR = 48,
        TAGID_HTML = 49,
        TAGID_I = 50,
        TAGID_IFRAME = 51,
        TAGID_IMG = 52,
        TAGID_INPUT = 53,
        TAGID_INS = 54,
        TAGID_ISINDEX = 219,
        TAGID_KBD = 55,
        TAGID_KEYGEN = 197,
        TAGID_LABEL = 56,
        TAGID_LAST_PREDEFINED = 10000,
        TAGID_LEGEND = 57,
        TAGID_LI = 58,
        TAGID_LINK = 59,
        TAGID_LISTING = 60,
        TAGID_MAP = 61,
        TAGID_MARK = 206,
        TAGID_MARQUEE = 62,
        TAGID_MATHML_ANNOTATION_XML = 210,
        TAGID_MATHML_MATH = 211,
        TAGID_MATHML_MI = 212,
        TAGID_MATHML_MN = 213,
        TAGID_MATHML_MO = 214,
        TAGID_MATHML_MS = 215,
        TAGID_MATHML_MTEXT = 216,
        TAGID_MENU = 63,
        TAGID_META = 64,
        TAGID_NAV = 207,
        TAGID_NEXTID = 65,
        TAGID_NOBR = 66,
        TAGID_NOEMBED = 67,
        TAGID_NOFRAMES = 68,
        TAGID_NOSCRIPT = 69,
        TAGID_NULL = 0,
        TAGID_OBJECT = 70,
        TAGID_OL = 71,
        TAGID_OPTGROUP = 109,
        TAGID_OPTION = 72,
        TAGID_P = 73,
        TAGID_PARAM = 74,
        TAGID_PLAINTEXT = 75,
        TAGID_PRE = 76,
        TAGID_PROCESSINGINSTRUCTION = 198,
        TAGID_PROGRESS = 209,
        TAGID_Q = 77,
        TAGID_ROOT = 108,
        TAGID_RP = 78,
        TAGID_RT = 79,
        TAGID_RUBY = 80,
        TAGID_S = 81,
        TAGID_SAMP = 82,
        TAGID_SCRIPT = 83,
        TAGID_SECTION = 208,
        TAGID_SELECT = 84,
        TAGID_SMALL = 85,
        TAGID_SOURCE = 193,
        TAGID_SPAN = 86,
        TAGID_STRIKE = 87,
        TAGID_STRONG = 88,
        TAGID_STYLE = 89,
        TAGID_SUB = 90,
        TAGID_SUMMARY = 222,
        TAGID_SUP = 91,
        TAGID_SVG_A = 111,
        TAGID_SVG_ALTGLYPH = 112,
        TAGID_SVG_ALTGLYPHDEF = 113,
        TAGID_SVG_ALTGLYPHITEM = 114,
        TAGID_SVG_ANIMATE = 115,
        TAGID_SVG_ANIMATECOLOR = 116,
        TAGID_SVG_ANIMATEMOTION = 117,
        TAGID_SVG_ANIMATETRANSFORM = 118,
        TAGID_SVG_CIRCLE = 119,
        TAGID_SVG_CLIPPATH = 120,
        TAGID_SVG_COLOR_PROFILE = 121,
        TAGID_SVG_CURSOR = 122,
        TAGID_SVG_DEFINITION_SRC = 123,
        TAGID_SVG_DEFS = 124,
        TAGID_SVG_DESC = 125,
        TAGID_SVG_ELLIPSE = 126,
        TAGID_SVG_FEBLEND = 127,
        TAGID_SVG_FECOLORMATRIX = 128,
        TAGID_SVG_FECOMPONENTTRANSFER = 129,
        TAGID_SVG_FECOMPOSITE = 130,
        TAGID_SVG_FECONVOLVEMATRIX = 131,
        TAGID_SVG_FEDIFFUSELIGHTING = 132,
        TAGID_SVG_FEDISPLACEMENTMAP = 133,
        TAGID_SVG_FEDISTANTLIGHT = 134,
        TAGID_SVG_FEFLOOD = 135,
        TAGID_SVG_FEFUNCA = 136,
        TAGID_SVG_FEFUNCB = 137,
        TAGID_SVG_FEFUNCG = 138,
        TAGID_SVG_FEFUNCR = 139,
        TAGID_SVG_FEGAUSSIANBLUR = 140,
        TAGID_SVG_FEIMAGE = 141,
        TAGID_SVG_FEMERGE = 142,
        TAGID_SVG_FEMERGENODE = 143,
        TAGID_SVG_FEMORPHOLOGY = 144,
        TAGID_SVG_FEOFFSET = 145,
        TAGID_SVG_FEPOINTLIGHT = 146,
        TAGID_SVG_FESPECULARLIGHTING = 147,
        TAGID_SVG_FESPOTLIGHT = 148,
        TAGID_SVG_FETILE = 149,
        TAGID_SVG_FETURBULENCE = 150,
        TAGID_SVG_FILTER = 151,
        TAGID_SVG_FONT = 152,
        TAGID_SVG_FONT_FACE = 153,
        TAGID_SVG_FONT_FACE_FORMAT = 154,
        TAGID_SVG_FONT_FACE_NAME = 155,
        TAGID_SVG_FONT_FACE_SRC = 156,
        TAGID_SVG_FONT_FACE_URI = 157,
        TAGID_SVG_FOREIGNOBJECT = 158,
        TAGID_SVG_G = 159,
        TAGID_SVG_GLYPH = 160,
        TAGID_SVG_GLYPHREF = 161,
        TAGID_SVG_HKERN = 162,
        TAGID_SVG_IMAGE = 163,
        TAGID_SVG_LINE = 164,
        TAGID_SVG_LINEARGRADIENT = 165,
        TAGID_SVG_MARKER = 166,
        TAGID_SVG_MASK = 167,
        TAGID_SVG_METADATA = 168,
        TAGID_SVG_MISSING_GLYPH = 169,
        TAGID_SVG_MPATH = 170,
        TAGID_SVG_PATH = 171,
        TAGID_SVG_PATTERN = 172,
        TAGID_SVG_POLYGON = 173,
        TAGID_SVG_POLYLINE = 174,
        TAGID_SVG_RADIALGRADIENT = 175,
        TAGID_SVG_RECT = 176,
        TAGID_SVG_SCRIPT = 177,
        TAGID_SVG_SET = 178,
        TAGID_SVG_STOP = 179,
        TAGID_SVG_STYLE = 180,
        TAGID_SVG_SVG = 181,
        TAGID_SVG_SWITCH = 182,
        TAGID_SVG_SYMBOL = 183,
        TAGID_SVG_TEXT = 184,
        TAGID_SVG_TEXTPATH = 185,
        TAGID_SVG_TITLE = 186,
        TAGID_SVG_TREF = 187,
        TAGID_SVG_TSPAN = 188,
        TAGID_SVG_USE = 189,
        TAGID_SVG_VIEW = 190,
        TAGID_SVG_VKERN = 191,
        TAGID_TABLE = 92,
        TAGID_TBODY = 93,
        TAGID_TC = 94,
        TAGID_TD = 95,
        TAGID_TEXTAREA = 96,
        TAGID_TFOOT = 97,
        TAGID_TH = 98,
        TAGID_THEAD = 99,
        TAGID_TITLE = 100,
        TAGID_TR = 101,
        TAGID_TRACK = 218,
        TAGID_TT = 102,
        TAGID_U = 103,
        TAGID_UL = 104,
        TAGID_UNKNOWN = 1,
        TAGID_VAR = 105,
        TAGID_VIDEO = 194,
        TAGID_WBR = 106,
        TAGID_X_MS_WEBVIEW = 223,
        TAGID_XMP = 107,
    }

    const enum _ELEMENTDESCRIPTOR_FLAGS {
        ELEMENTDESCRIPTOR_FLAGS_Max = 2147483647,
        ELEMENTDESCRIPTORFLAGS_LITERAL = 1,
        ELEMENTDESCRIPTORFLAGS_NESTED_LITERAL = 2,
    }

    const enum _ELEMENTNAMESPACE_FLAGS {
        ELEMENTNAMESPACE_FLAGS_Max = 2147483647,
        ELEMENTNAMESPACEFLAGS_ALLOWANYTAG = 1,
        ELEMENTNAMESPACEFLAGS_QUERYFORUNKNOWNTAGS = 2,
    }

    const enum _FINDTEXT_FLAGS {
        FINDTEXT_BACKWARDS = 1,
        FINDTEXT_FLAGS_Max = 2147483647,
        FINDTEXT_MATCHALEFHAMZA = -2147483648,
        FINDTEXT_MATCHCASE = 4,
        FINDTEXT_MATCHDIAC = 536870912,
        FINDTEXT_MATCHKASHIDA = 1073741824,
        FINDTEXT_MATCHREPEATEDWHITESPACE = 262144,
        FINDTEXT_RAW = 131072,
        FINDTEXT_WHOLEWORD = 2,
    }

    const enum _frameScrolling {
        frameScrolling_Max = 2147483647,
        frameScrollingauto = 4,
        frameScrollingno = 2,
        frameScrollingyes = 1,
    }

    const enum _HT_OPTIONS {
        HT_OPT_AllowAfterEOL = 1,
        HT_OPTIONS_Max = 2147483647,
    }

    const enum _HT_RESULTS {
        HT_RESULTS_Glyph = 1,
        HT_RESULTS_Max = 2147483647,
    }

    const enum _HTML_PAINT_DRAW_FLAGS {
        HTML_PAINT_DRAW_FLAGS_Max = 2147483647,
        HTMLPAINT_DRAW_UPDATEREGION = 1,
        HTMLPAINT_DRAW_USE_XFORM = 2,
    }

    const enum _HTML_PAINT_DRAW_INFO_FLAGS {
        HTML_PAINT_DRAW_INFO_FLAGS_Max = 2147483647,
        HTMLPAINT_DRAWINFO_UPDATEREGION = 2,
        HTMLPAINT_DRAWINFO_VIEWPORT = 1,
        HTMLPAINT_DRAWINFO_XFORM = 4,
    }

    const enum _HTML_PAINT_EVENT_FLAGS {
        HTML_PAINT_EVENT_FLAGS_Max = 2147483647,
        HTMLPAINT_EVENT_SETCURSOR = 2,
        HTMLPAINT_EVENT_TARGET = 1,
    }

    const enum _HTML_PAINT_ZORDER {
        HTML_PAINT_ZORDER_Max = 2147483647,
        HTMLPAINT_ZORDER_ABOVE_CONTENT = 7,
        HTMLPAINT_ZORDER_ABOVE_FLOW = 6,
        HTMLPAINT_ZORDER_BELOW_CONTENT = 4,
        HTMLPAINT_ZORDER_BELOW_FLOW = 5,
        HTMLPAINT_ZORDER_NONE = 0,
        HTMLPAINT_ZORDER_REPLACE_ALL = 1,
        HTMLPAINT_ZORDER_REPLACE_BACKGROUND = 3,
        HTMLPAINT_ZORDER_REPLACE_CONTENT = 2,
        HTMLPAINT_ZORDER_WINDOW_TOP = 8,
    }

    const enum _HTML_PAINTER {
        HTML_PAINTER_Max = 2147483647,
        HTMLPAINTER_3DSURFACE = 512,
        HTMLPAINTER_ALPHA = 4,
        HTMLPAINTER_COMPLEX = 8,
        HTMLPAINTER_EXPAND = 65536,
        HTMLPAINTER_HITTEST = 32,
        HTMLPAINTER_NOBAND = 1024,
        HTMLPAINTER_NODC = 4096,
        HTMLPAINTER_NOPHYSICALCLIP = 8192,
        HTMLPAINTER_NOSAVEDC = 16384,
        HTMLPAINTER_NOSCROLLBITS = 131072,
        HTMLPAINTER_OPAQUE = 1,
        HTMLPAINTER_OVERLAY = 16,
        HTMLPAINTER_SUPPORTS_XFORM = 32768,
        HTMLPAINTER_SURFACE = 256,
        HTMLPAINTER_TRANSPARENT = 2,
    }

    const enum _htmlAdjacency {
        htmlAdjacency_Max = 2147483647,
        htmlAdjacencyAfterBegin = 2,
        htmlAdjacencyAfterEnd = 4,
        htmlAdjacencyBeforeBegin = 1,
        htmlAdjacencyBeforeEnd = 3,
    }

    const enum _HTMLAppFlag {
        HTMLAppFlag_Max = 2147483647,
        HTMLAppFlag0 = 0,
        HTMLAppFlag1 = 1,
        HTMLAppFlagNo = 0,
        HTMLAppFlagOff = 0,
        HTMLAppFlagOn = 1,
        HTMLAppFlagYes = 1,
    }

    const enum _htmlApplyLocation {
        htmlApplyLocation_Max = 2147483647,
        htmlApplyLocationInside = 0,
        htmlApplyLocationOutside = 1,
    }

    const enum _htmlBlockAlign {
        htmlBlockAlign_Max = 2147483647,
        htmlBlockAlignCenter = 2,
        htmlBlockAlignJustify = 4,
        htmlBlockAlignLeft = 1,
        htmlBlockAlignNotSet = 0,
        htmlBlockAlignRight = 3,
    }

    const enum _HTMLBorder {
        HTMLBorder_Max = 2147483647,
        HTMLBorderDialog = 4194304,
        HTMLBorderNone = 0,
        HTMLBorderThick = 262144,
        HTMLBorderThin = 8388608,
    }

    const enum _HTMLBorderStyle {
        HTMLBorderStyle_Max = 2147483647,
        HTMLBorderStylecombined = 768,
        HTMLBorderStyleNormal = 0,
        HTMLBorderStyleRaised = 256,
        HTMLBorderStyleStatic = 131072,
        HTMLBorderStyleSunken = 512,
    }

    const enum _htmlCaptionAlign {
        htmlCaptionAlign_Max = 2147483647,
        htmlCaptionAlignBottom = 6,
        htmlCaptionAlignCenter = 2,
        htmlCaptionAlignJustify = 4,
        htmlCaptionAlignLeft = 1,
        htmlCaptionAlignNotSet = 0,
        htmlCaptionAlignRight = 3,
        htmlCaptionAlignTop = 5,
    }

    const enum _HTMLCaptionFlag {
        HTMLCaptionFlag_Max = 2147483647,
        HTMLCaptionFlagNo = 0,
        HTMLCaptionFlagYes = 12582912,
    }

    const enum _htmlCaptionVAlign {
        htmlCaptionVAlign_Max = 2147483647,
        htmlCaptionVAlignBottom = 2,
        htmlCaptionVAlignNotSet = 0,
        htmlCaptionVAlignTop = 1,
    }

    const enum _htmlCellAlign {
        htmlCellAlign_Max = 2147483647,
        htmlCellAlignCenter = 2,
        htmlCellAlignLeft = 1,
        htmlCellAlignMiddle = 2,
        htmlCellAlignNotSet = 0,
        htmlCellAlignRight = 3,
    }

    const enum _htmlCellVAlign {
        htmlCellVAlign_Max = 2147483647,
        htmlCellVAlignBaseline = 4,
        htmlCellVAlignBottom = 3,
        htmlCellVAlignCenter = 2,
        htmlCellVAlignMiddle = 2,
        htmlCellVAlignNotSet = 0,
        htmlCellVAlignTop = 1,
    }

    const enum _htmlClear {
        htmlClear_Max = 2147483647,
        htmlClearAll = 1,
        htmlClearBoth = 4,
        htmlClearLeft = 2,
        htmlClearNone = 5,
        htmlClearNotSet = 0,
        htmlClearRight = 3,
    }

    const enum _htmlCompatMode {
        htmlCompatMode_Max = 2147483647,
        htmlCompatModeBackCompat = 0,
        htmlCompatModeCSS1Compat = 1,
    }

    const enum _htmlComponent {
        htmlComponent_Max = 2147483647,
        htmlComponentClient = 0,
        htmlComponentGHBottom = 27,
        htmlComponentGHBottomLeft = 25,
        htmlComponentGHBottomRight = 29,
        htmlComponentGHLeft = 23,
        htmlComponentGHRight = 28,
        htmlComponentGHTop = 24,
        htmlComponentGHTopLeft = 22,
        htmlComponentGHTopRight = 26,
        htmlComponentOutside = 21,
        htmlComponentSbBottom = 20,
        htmlComponentSbDown = 10,
        htmlComponentSbDown2 = 17,
        htmlComponentSbHThumb = 3,
        htmlComponentSbLeft = 1,
        htmlComponentSbLeft2 = 11,
        htmlComponentSbPageDown = 9,
        htmlComponentSbPageDown2 = 18,
        htmlComponentSbPageLeft = 2,
        htmlComponentSbPageLeft2 = 12,
        htmlComponentSbPageRight = 4,
        htmlComponentSbPageRight2 = 14,
        htmlComponentSbPageUp = 7,
        htmlComponentSbPageUp2 = 16,
        htmlComponentSbRight = 5,
        htmlComponentSbRight2 = 13,
        htmlComponentSbTop = 19,
        htmlComponentSbUp = 6,
        htmlComponentSbUp2 = 15,
        htmlComponentSbVThumb = 8,
    }

    const enum _htmlControlAlign {
        htmlControlAlign_Max = 2147483647,
        htmlControlAlignAbsBottom = 7,
        htmlControlAlignAbsMiddle = 5,
        htmlControlAlignBaseline = 6,
        htmlControlAlignBottom = 8,
        htmlControlAlignCenter = 2,
        htmlControlAlignLeft = 1,
        htmlControlAlignMiddle = 9,
        htmlControlAlignNotSet = 0,
        htmlControlAlignRight = 3,
        htmlControlAlignTextTop = 4,
        htmlControlAlignTop = 10,
    }

    const enum _htmlDesignMode {
        htmlDesignMode_Max = 2147483647,
        htmlDesignModeInherit = -2,
        htmlDesignModeOff = 0,
        htmlDesignModeOn = -1,
    }

    const enum _htmlDir {
        htmlDir_Max = 2147483647,
        htmlDirLeftToRight = 1,
        htmlDirNotSet = 0,
        htmlDirRightToLeft = 2,
    }

    const enum _htmlDirection {
        htmlDirection_Max = 2147483647,
        htmlDirectionBackward = -99999,
        htmlDirectionForward = 99999,
    }

    const enum _HTMLDlgBorder {
        HTMLDlgBorder_Max = 2147483647,
        HTMLDlgBorderThick = 262144,
        HTMLDlgBorderThin = 0,
    }

    const enum _HTMLDlgCenter {
        HTMLDlgCenter_Max = 2147483647,
        HTMLDlgCenter0 = 0,
        HTMLDlgCenter1 = 1,
        HTMLDlgCenterDesktop = 2,
        HTMLDlgCenterNo = 0,
        HTMLDlgCenterOff = 0,
        HTMLDlgCenterOn = 1,
        HTMLDlgCenterParent = 1,
        HTMLDlgCenterYes = 1,
    }

    const enum _HTMLDlgEdge {
        HTMLDlgEdge_Max = 2147483647,
        HTMLDlgEdgeRaised = 16,
        HTMLDlgEdgeSunken = 0,
    }

    const enum _HTMLDlgFlag {
        HTMLDlgFlag_Max = 2147483647,
        HTMLDlgFlag0 = 0,
        HTMLDlgFlag1 = 1,
        HTMLDlgFlagNo = 0,
        HTMLDlgFlagNotSet = -1,
        HTMLDlgFlagOff = 0,
        HTMLDlgFlagOn = 1,
        HTMLDlgFlagYes = 1,
    }

    const enum _htmlDraggable {
        htmlDraggable_Max = 2147483647,
        htmlDraggableAuto = 0,
        htmlDraggableFalse = 2,
        htmlDraggableTrue = 1,
    }

    const enum _htmlDropEffect {
        htmlDropEffect_Max = 2147483647,
        htmlDropEffectCopy = 0,
        htmlDropEffectLink = 1,
        htmlDropEffectMove = 2,
        htmlDropEffectNone = 3,
    }

    const enum _htmlEditable {
        htmlEditable_Max = 2147483647,
        htmlEditableFalse = 2,
        htmlEditableInherit = 0,
        htmlEditableTrue = 1,
    }

    const enum _htmlEffectAllowed {
        htmlEffectAllowed_Max = 2147483647,
        htmlEffectAllowedAll = 6,
        htmlEffectAllowedCopy = 0,
        htmlEffectAllowedCopyLink = 3,
        htmlEffectAllowedCopyMove = 4,
        htmlEffectAllowedLink = 1,
        htmlEffectAllowedLinkMove = 5,
        htmlEffectAllowedMove = 2,
        htmlEffectAllowedNone = 7,
        htmlEffectAllowedUninitialized = 8,
    }

    const enum _htmlEncoding {
        htmlEncoding_Max = 2147483647,
        htmlEncodingMultipart = 1,
        htmlEncodingText = 2,
        htmlEncodingURL = 0,
    }

    const enum _htmlEndPoints {
        htmlEndPoints_Max = 2147483647,
        htmlEndPointsEndToEnd = 4,
        htmlEndPointsEndToStart = 3,
        htmlEndPointsStartToEnd = 2,
        htmlEndPointsStartToStart = 1,
    }

    const enum _htmlFrame {
        htmlFrame_Max = 2147483647,
        htmlFrameabove = 2,
        htmlFramebelow = 3,
        htmlFrameborder = 9,
        htmlFramebox = 8,
        htmlFramehsides = 4,
        htmlFramelhs = 5,
        htmlFrameNotSet = 0,
        htmlFramerhs = 6,
        htmlFramevoid = 1,
        htmlFramevsides = 7,
    }

    const enum _htmlGlyphMode {
        htmlGlyphMode_Max = 2147483647,
        htmlGlyphModeBegin = 1,
        htmlGlyphModeBoth = 3,
        htmlGlyphModeEnd = 2,
        htmlGlyphModeNone = 0,
    }

    const enum _htmlInput {
        htmlInput_Max = 2147483647,
        htmlInputButton = 1,
        htmlInputCheckbox = 2,
        htmlInputEmail = 17,
        htmlInputFile = 3,
        htmlInputHidden = 4,
        htmlInputImage = 5,
        htmlInputNotSet = 0,
        htmlInputNumber = 18,
        htmlInputPassword = 6,
        htmlInputRadio = 7,
        htmlInputRange = 15,
        htmlInputReset = 8,
        htmlInputRichtext = 14,
        htmlInputSearch = 20,
        htmlInputSelectMultiple = 10,
        htmlInputSelectOne = 9,
        htmlInputSubmit = 11,
        htmlInputTel = 19,
        htmlInputText = 12,
        htmlInputTextarea = 13,
        htmlInputUrl = 16,
    }

    const enum _htmlListType {
        htmlListType_Max = 2147483647,
        htmlListTypeCircle = 7,
        htmlListTypeDisc = 6,
        htmlListTypeLargeAlpha = 1,
        htmlListTypeLargeRoman = 3,
        htmlListTypeNotSet = 0,
        htmlListTypeNumbers = 5,
        htmlListTypeSmallAlpha = 2,
        htmlListTypeSmallRoman = 4,
        htmlListTypeSquare = 8,
    }

    const enum _htmlLoop {
        htmlLoop_Max = 2147483647,
        htmlLoopLoopInfinite = -1,
    }

    const enum _htmlMarqueeBehavior {
        htmlMarqueeBehavior_Max = 2147483647,
        htmlMarqueeBehavioralternate = 3,
        htmlMarqueeBehaviorscroll = 1,
        htmlMarqueeBehaviorslide = 2,
    }

    const enum _htmlMarqueeDirection {
        htmlMarqueeDirection_Max = 2147483647,
        htmlMarqueeDirectiondown = 7,
        htmlMarqueeDirectionleft = 1,
        htmlMarqueeDirectionright = 3,
        htmlMarqueeDirectionup = 5,
    }

    const enum _HTMLMaximizeFlag {
        HTMLMaximizeFlag_Max = 2147483647,
        HTMLMaximizeFlagNo = 0,
        HTMLMaximizeFlagYes = 65536,
    }

    const enum _htmlMediaErr {
        htmlMediaErr_Max = 2147483647,
        htmlMediaErrAborted = 0,
        htmlMediaErrDecode = 2,
        htmlMediaErrNetwork = 1,
        htmlMediaErrSrcNotSupported = 3,
    }

    const enum _htmlMediaNetworkState {
        htmlMediaNetworkState_Max = 2147483647,
        htmlMediaNetworkStateEmpty = 0,
        htmlMediaNetworkStateIdle = 1,
        htmlMediaNetworkStateLoading = 2,
        htmlMediaNetworkStateNoSource = 3,
    }

    const enum _htmlMediaReadyState {
        htmlMediaReadyState_Max = 2147483647,
        htmlMediaReadyStateHaveCurrentData = 2,
        htmlMediaReadyStateHaveEnoughData = 4,
        htmlMediaReadyStateHaveFutureData = 3,
        htmlMediaReadyStateHaveMetadata = 1,
        htmlMediaReadyStateHaveNothing = 0,
    }

    const enum _htmlMethod {
        htmlMethod_Max = 2147483647,
        htmlMethodGet = 1,
        htmlMethodNotSet = 0,
        htmlMethodPost = 2,
    }

    const enum _HTMLMinimizeFlag {
        HTMLMinimizeFlag_Max = 2147483647,
        HTMLMinimizeFlagNo = 0,
        HTMLMinimizeFlagYes = 131072,
    }

    const enum _htmlPersistState {
        htmlPersistState_Max = 2147483647,
        htmlPersistStateFavorite = 1,
        htmlPersistStateHistory = 2,
        htmlPersistStateNormal = 0,
        htmlPersistStateSnapshot = 3,
        htmlPersistStateUserData = 4,
    }

    const enum _htmlReadyState {
        htmlReadyState_Max = 2147483647,
        htmlReadyStatecomplete = 4,
        htmlReadyStateinteractive = 3,
        htmlReadyStateloaded = 2,
        htmlReadyStateloading = 1,
        htmlReadyStateuninitialized = 0,
    }

    const enum _htmlRules {
        htmlRules_Max = 2147483647,
        htmlRulesall = 5,
        htmlRulescols = 4,
        htmlRulesgroups = 2,
        htmlRulesnone = 1,
        htmlRulesNotSet = 0,
        htmlRulesrows = 3,
    }

    const enum _htmlSelectExFlag {
        htmlSelectExFlag_Max = 2147483647,
        htmlSelectExFlagHideSelectionInDesign = 1,
        htmlSelectExFlagNone = 0,
    }

    const enum _htmlSelection {
        htmlSelection_Max = 2147483647,
        htmlSelectionControl = 2,
        htmlSelectionNone = 0,
        htmlSelectionTable = 3,
        htmlSelectionText = 1,
    }

    const enum _htmlSelectType {
        htmlSelectType_Max = 2147483647,
        htmlSelectTypeSelectMultiple = 2,
        htmlSelectTypeSelectOne = 1,
    }

    const enum _htmlSpellCheck {
        htmlSpellCheck_Max = 2147483647,
        htmlSpellCheckDefault = 3,
        htmlSpellCheckFalse = 2,
        htmlSpellCheckNotSet = 0,
        htmlSpellCheckTrue = 1,
    }

    const enum _htmlStart {
        htmlStart_Max = 2147483647,
        htmlStartfileopen = 0,
        htmlStartmouseover = 1,
    }

    const enum _HTMLSysMenuFlag {
        HTMLSysMenuFlag_Max = 2147483647,
        HTMLSysMenuFlagNo = 0,
        HTMLSysMenuFlagYes = 524288,
    }

    const enum _htmlTabIndex {
        htmlTabIndex_Max = 2147483647,
        htmlTabIndexNotSet = -32768,
    }

    const enum _htmlUnit {
        htmlUnit_Max = 2147483647,
        htmlUnitCharacter = 1,
        htmlUnitSentence = 3,
        htmlUnitTextEdit = 6,
        htmlUnitWord = 2,
    }

    const enum _HTMLWindowState {
        HTMLWindowState_Max = 2147483647,
        HTMLWindowStateMaximize = 3,
        HTMLWindowStateMinimize = 6,
        HTMLWindowStateNormal = 1,
    }

    const enum _htmlWrap {
        htmlWrap_Max = 2147483647,
        htmlWrapHard = 3,
        htmlWrapOff = 1,
        htmlWrapSoft = 2,
    }

    const enum _htmlZOrder {
        htmlZOrder_Max = 2147483647,
        htmlZOrderBack = 1,
        htmlZOrderFront = 0,
    }

    const enum _lengthAdjust {
        lengthAdjust_Max = 2147483647,
        LENGTHADJUST_SPACING = 1,
        LENGTHADJUST_SPACINGANDGLYPHS = 2,
        LENGTHADJUST_UNKNOWN = 0,
    }

    const enum _LINE_DIRECTION {
        LINE_DIRECTION_LeftToRight = 2,
        LINE_DIRECTION_Max = 2147483647,
        LINE_DIRECTION_RightToLeft = 1,
    }

    const enum _MARKUP_CONTEXT_TYPE {
        CONTEXT_TYPE_EnterScope = 2,
        CONTEXT_TYPE_ExitScope = 3,
        CONTEXT_TYPE_None = 0,
        CONTEXT_TYPE_NoScope = 4,
        CONTEXT_TYPE_Text = 1,
        MARKUP_CONTEXT_TYPE_Max = 2147483647,
    }

    const enum _mediaType {
        mediaType_Max = 2147483647,
        mediaTypeAll = 511,
        mediaTypeAural = 1,
        mediaTypeBraille = 2,
        mediaTypeEmbossed = 4,
        mediaTypeHandheld = 8,
        mediaTypeNotSet = 0,
        mediaTypePrint = 16,
        mediaTypeProjection = 32,
        mediaTypeScreen = 64,
        mediaTypeTty = 128,
        mediaTypeTv = 256,
    }

    const enum _MOVEUNIT_ACTION {
        MOVEUNIT_ACTION_Max = 2147483647,
        MOVEUNIT_NEXTBLOCK = 19,
        MOVEUNIT_NEXTCHAR = 1,
        MOVEUNIT_NEXTCLUSTERBEGIN = 3,
        MOVEUNIT_NEXTCLUSTEREND = 5,
        MOVEUNIT_NEXTPROOFWORD = 11,
        MOVEUNIT_NEXTSENTENCE = 17,
        MOVEUNIT_NEXTURLBEGIN = 12,
        MOVEUNIT_NEXTURLEND = 14,
        MOVEUNIT_NEXTWORDBEGIN = 7,
        MOVEUNIT_NEXTWORDEND = 9,
        MOVEUNIT_PREVBLOCK = 18,
        MOVEUNIT_PREVCHAR = 0,
        MOVEUNIT_PREVCLUSTERBEGIN = 2,
        MOVEUNIT_PREVCLUSTEREND = 4,
        MOVEUNIT_PREVPROOFWORD = 10,
        MOVEUNIT_PREVSENTENCE = 16,
        MOVEUNIT_PREVURLBEGIN = 13,
        MOVEUNIT_PREVURLEND = 15,
        MOVEUNIT_PREVWORDBEGIN = 6,
        MOVEUNIT_PREVWORDEND = 8,
    }

    const enum _PARSE_FLAGS {
        PARSE_ABSOLUTIFYIE40URLS = 1,
        PARSE_DISABLEVML = 2,
        PARSE_FLAGS_Max = 2147483647,
    }

    const enum _POINTER_GRAVITY {
        POINTER_GRAVITY_Left = 0,
        POINTER_GRAVITY_Max = 2147483647,
        POINTER_GRAVITY_Right = 1,
    }

    const enum _sandboxAllow {
        sandboxAllow_Max = 2147483647,
        sandboxAllowForms = 3,
        sandboxAllowPopups = 4,
        sandboxAllowSameOrigin = 1,
        sandboxAllowScripts = 0,
        sandboxAllowTopNavigation = 2,
    }

    const enum _SAVE_SEGMENTS_FLAGS {
        SAVE_SEGMENTS_FLAGS_Max = 2147483647,
        SAVE_SEGMENTS_NoIE4SelectionCompat = 1,
    }

    const enum _SCRIPT_TIMER_TYPE {
        SCRIPT_TIMER_TYPE_Max = 2147483647,
        STT_ANIMATION_FRAME = 3,
        STT_IMMEDIATE = 2,
        STT_INTERVAL = 1,
        STT_TIMEOUT = 0,
    }

    const enum _SECUREURLHOSTVALIDATE_FLAGS {
        SECUREURLHOSTVALIDATE_FLAGS_Max = 2147483647,
        SUHV_PROMPTBEFORENO = 1,
        SUHV_SILENTYES = 2,
        SUHV_UNSECURESOURCE = 4,
    }

    const enum _SELECTION_TYPE {
        SELECTION_TYPE_Caret = 1,
        SELECTION_TYPE_Control = 3,
        SELECTION_TYPE_Max = 2147483647,
        SELECTION_TYPE_None = 0,
        SELECTION_TYPE_Text = 2,
    }

    const enum _styleAccelerator {
        styleAccelerator_Max = 2147483647,
        styleAcceleratorFalse = 0,
        styleAcceleratorTrue = 1,
    }

    const enum _styleAlignContent {
        styleAlignContent_Max = 2147483647,
        styleAlignContentCenter = 2,
        styleAlignContentFlexEnd = 1,
        styleAlignContentFlexStart = 0,
        styleAlignContentNotSet = 6,
        styleAlignContentSpaceAround = 4,
        styleAlignContentSpaceBetween = 3,
        styleAlignContentStretch = 5,
    }

    const enum _styleAlignItems {
        styleAlignItems_Max = 2147483647,
        styleAlignItemsBaseline = 3,
        styleAlignItemsCenter = 2,
        styleAlignItemsFlexEnd = 1,
        styleAlignItemsFlexStart = 0,
        styleAlignItemsNotSet = 5,
        styleAlignItemsStretch = 4,
    }

    const enum _styleAlignmentBaseline {
        styleAlignmentBaseline_Max = 2147483647,
        styleAlignmentBaselineAfterEdge = 1,
        styleAlignmentBaselineAlphabetic = 2,
        styleAlignmentBaselineAuto = 3,
        styleAlignmentBaselineBaseline = 4,
        styleAlignmentBaselineBeforeEdge = 5,
        styleAlignmentBaselineCentral = 6,
        styleAlignmentBaselineHanging = 7,
        styleAlignmentBaselineIdeographic = 12,
        styleAlignmentBaselineMathematical = 8,
        styleAlignmentBaselineMiddle = 9,
        styleAlignmentBaselineNotSet = 0,
        styleAlignmentBaselineTextAfterEdge = 10,
        styleAlignmentBaselineTextBeforeEdge = 11,
    }

    const enum _styleAlignSelf {
        styleAlignSelf_Max = 2147483647,
        styleAlignSelfAuto = 5,
        styleAlignSelfBaseline = 3,
        styleAlignSelfCenter = 2,
        styleAlignSelfFlexEnd = 1,
        styleAlignSelfFlexStart = 0,
        styleAlignSelfNotSet = 6,
        styleAlignSelfStretch = 4,
    }

    const enum _styleAttrType {
        styleAttrType_Max = 2147483647,
        styleAttrTypeAngle = 20,
        styleAttrTypeCh = 15,
        styleAttrTypeCm = 10,
        styleAttrTypeColor = 1,
        styleAttrTypeDeg = 21,
        styleAttrTypeEm = 7,
        styleAttrTypeEx = 8,
        styleAttrTypeGrad = 23,
        styleAttrTypeIn = 9,
        styleAttrTypeInteger = 3,
        styleAttrTypeLength = 5,
        styleAttrTypeMm = 11,
        styleAttrTypeMs = 26,
        styleAttrTypeNumber = 4,
        styleAttrTypePc = 13,
        styleAttrTypePercentage = 19,
        styleAttrTypePt = 12,
        styleAttrTypePx = 6,
        styleAttrTypeRad = 22,
        styleAttrTypeRem = 14,
        styleAttrTypeS = 25,
        styleAttrTypeString = 0,
        styleAttrTypeTime = 24,
        styleAttrTypeUrl = 2,
        styleAttrTypeVh = 16,
        styleAttrTypeVmin = 18,
        styleAttrTypeVw = 17,
    }

    const enum _styleAuto {
        styleAuto_Max = 2147483647,
        styleAutoAuto = 0,
    }

    const enum _styleBackfaceVisibility {
        styleBackfaceVisibility_Max = 2147483647,
        styleBackfaceVisibilityHidden = 1,
        styleBackfaceVisibilityNotSet = 2,
        styleBackfaceVisibilityVisible = 0,
    }

    const enum _styleBackgroundAttachment {
        styleBackgroundAttachment_Max = 2147483647,
        styleBackgroundAttachmentFixed = 0,
        styleBackgroundAttachmentNotSet = 2,
        styleBackgroundAttachmentScroll = 1,
    }

    const enum _styleBackgroundAttachment3 {
        styleBackgroundAttachment3_Max = 2147483647,
        styleBackgroundAttachment3Fixed = 0,
        styleBackgroundAttachment3Local = 2,
        styleBackgroundAttachment3NotSet = 3,
        styleBackgroundAttachment3Scroll = 1,
    }

    const enum _styleBackgroundClip {
        styleBackgroundClip_Max = 2147483647,
        styleBackgroundClipBorderBox = 0,
        styleBackgroundClipContentBox = 2,
        styleBackgroundClipNotSet = 3,
        styleBackgroundClipPaddingBox = 1,
    }

    const enum _styleBackgroundOrigin {
        styleBackgroundOrigin_Max = 2147483647,
        styleBackgroundOriginBorderBox = 0,
        styleBackgroundOriginContentBox = 2,
        styleBackgroundOriginNotSet = 3,
        styleBackgroundOriginPaddingBox = 1,
    }

    const enum _styleBackgroundRepeat {
        styleBackgroundRepeat_Max = 2147483647,
        styleBackgroundRepeatNoRepeat = 3,
        styleBackgroundRepeatNotSet = 4,
        styleBackgroundRepeatRepeat = 0,
        styleBackgroundRepeatRepeatX = 1,
        styleBackgroundRepeatRepeatY = 2,
    }

    const enum _styleBaselineShift {
        styleBaselineShift_Max = 2147483647,
        styleBaselineShiftBaseline = 0,
        styleBaselineShiftSub = 1,
        styleBaselineShiftSuper = 2,
    }

    const enum _styleBidi {
        styleBidi_Max = 2147483647,
        styleBidiEmbed = 2,
        styleBidiInherit = 4,
        styleBidiNormal = 1,
        styleBidiNotSet = 0,
        styleBidiOverride = 3,
    }

    const enum _styleBlockProgression {
        styleBlockProgression_Max = 2147483647,
        styleBlockProgressionBt = 2,
        styleBlockProgressionLr = 3,
        styleBlockProgressionNotSet = 4,
        styleBlockProgressionRl = 1,
        styleBlockProgressionTb = 0,
    }

    const enum _styleBool {
        styleBool_Max = 2147483647,
        styleBoolFalse = 0,
        styleBoolTrue = 1,
    }

    const enum _styleBorderCollapse {
        styleBorderCollapse_Max = 2147483647,
        styleBorderCollapseCollapse = 2,
        styleBorderCollapseNotSet = 0,
        styleBorderCollapseSeparate = 1,
    }

    const enum _styleBorderImageRepeat {
        styleBorderImageRepeat_Max = 2147483647,
        styleBorderImageRepeatNotSet = 4,
        styleBorderImageRepeatRepeat = 1,
        styleBorderImageRepeatRound = 2,
        styleBorderImageRepeatSpace = 3,
        styleBorderImageRepeatStretch = 0,
    }

    const enum _styleBorderImageSliceFill {
        styleBorderImageSliceFill_Max = 2147483647,
        styleBorderImageSliceFillFill = 1,
        styleBorderImageSliceFillNotSet = 0,
    }

    const enum _styleBorderStyle {
        styleBorderStyle_Max = 2147483647,
        styleBorderStyleDashed = 2,
        styleBorderStyleDotted = 1,
        styleBorderStyleDouble = 4,
        styleBorderStyleGroove = 5,
        styleBorderStyleHidden = 11,
        styleBorderStyleInset = 7,
        styleBorderStyleNone = 10,
        styleBorderStyleNotSet = 0,
        styleBorderStyleOutset = 8,
        styleBorderStyleRidge = 6,
        styleBorderStyleSolid = 3,
        styleBorderStyleWindowInset = 9,
    }

    const enum _styleBorderWidth {
        styleBorderWidth_Max = 2147483647,
        styleBorderWidthMedium = 1,
        styleBorderWidthThick = 2,
        styleBorderWidthThin = 0,
    }

    const enum _styleBoxSizing {
        styleBoxSizing_Max = 2147483647,
        styleBoxSizingBorderBox = 2,
        styleBoxSizingContentBox = 1,
        styleBoxSizingNotSet = 0,
    }

    const enum _styleBreak {
        styleBreak_Max = 2147483647,
        styleBreakAlways = 2,
        styleBreakAuto = 1,
        styleBreakAvoid = 3,
        styleBreakAvoidColumn = 9,
        styleBreakAvoidPage = 8,
        styleBreakColumn = 7,
        styleBreakLeft = 4,
        styleBreakNotSet = 0,
        styleBreakPage = 6,
        styleBreakRight = 5,
    }

    const enum _styleBreakInside {
        styleBreakInside_Max = 2147483647,
        styleBreakInsideAuto = 1,
        styleBreakInsideAvoid = 2,
        styleBreakInsideAvoidColumn = 4,
        styleBreakInsideAvoidPage = 3,
        styleBreakInsideNotSet = 0,
    }

    const enum _styleCaptionSide {
        styleCaptionSide_Max = 2147483647,
        styleCaptionSideBottom = 2,
        styleCaptionSideLeft = 3,
        styleCaptionSideNotSet = 0,
        styleCaptionSideRight = 4,
        styleCaptionSideTop = 1,
    }

    const enum _styleClipRule {
        styleClipRule_Max = 2147483647,
        styleClipRuleEvenOdd = 2,
        styleClipRuleNonZero = 1,
        styleClipRuleNotSet = 0,
    }

    const enum _styleColorInterpolationFilters {
        styleColorInterpolationFilters_Max = 2147483647,
        styleColorInterpolationFiltersAuto = 0,
        styleColorInterpolationFiltersLinearRgb = 2,
        styleColorInterpolationFiltersNotSet = 3,
        styleColorInterpolationFiltersSRgb = 1,
    }

    const enum _styleColumnFill {
        styleColumnFill_Max = 2147483647,
        styleColumnFillAuto = 0,
        styleColumnFillBalance = 1,
        styleColumnFillNotSet = 2,
    }

    const enum _styleColumnSpan {
        styleColumnSpan_Max = 2147483647,
        styleColumnSpanAll = 1,
        styleColumnSpanNone = 0,
        styleColumnSpanNotSet = 3,
        styleColumnSpanOne = 2,
    }

    const enum _styleCursor {
        styleCursor_Max = 2147483647,
        styleCursorAlias = 32,
        styleCursorall_scroll = 21,
        styleCursorAuto = 0,
        styleCursorCell = 30,
        styleCursorcol_resize = 22,
        styleCursorContext_menu = 25,
        styleCursorCopy = 31,
        styleCursorCrosshair = 1,
        styleCursorcustom = 33,
        styleCursorDefault = 2,
        styleCursorE_resize = 5,
        styleCursorEw_resize = 26,
        styleCursorHand = 3,
        styleCursorHelp = 15,
        styleCursorMove = 4,
        styleCursorN_resize = 8,
        styleCursorNe_resize = 6,
        styleCursorNesw_resize = 28,
        styleCursorNo_drop = 19,
        styleCursorNone = 24,
        styleCursorNot_allowed = 18,
        styleCursorNotSet = 34,
        styleCursorNs_resize = 27,
        styleCursorNw_resize = 7,
        styleCursorNwse_resize = 29,
        styleCursorPointer = 16,
        styleCursorProgress = 17,
        styleCursorrow_resize = 23,
        styleCursorS_resize = 11,
        styleCursorSe_resize = 9,
        styleCursorSw_resize = 10,
        styleCursorText = 13,
        styleCursorVertical_text = 20,
        styleCursorW_resize = 12,
        styleCursorWait = 14,
    }

    const enum _styleDataRepeat {
        styleDataRepeat_Max = 2147483647,
        styleDataRepeatInner = 1,
        styleDataRepeatNone = 0,
    }

    const enum _styleDefaultTextSelection {
        styleDefaultTextSelection_Max = 2147483647,
        styleDefaultTextSelectionFalse = 0,
        styleDefaultTextSelectionTrue = 1,
    }

    const enum _styleDir {
        styleDir_Max = 2147483647,
        styleDirInherit = 3,
        styleDirLeftToRight = 1,
        styleDirNotSet = 0,
        styleDirRightToLeft = 2,
    }

    const enum _styleDisplay {
        styleDisplay_Max = 2147483647,
        styleDisplayBlock = 1,
        styleDisplayFlex = 26,
        styleDisplayInline = 2,
        styleDisplayInlineBlock = 7,
        styleDisplayInlineFlex = 27,
        styleDisplayInlineTable = 9,
        styleDisplayListItem = 3,
        styleDisplayMsFlexbox = 22,
        styleDisplayMsGrid = 24,
        styleDisplayMsInlineFlexbox = 23,
        styleDisplayMsInlineGrid = 25,
        styleDisplayNone = 4,
        styleDisplayNotSet = 0,
        styleDisplayRuby = 17,
        styleDisplayRubyBase = 18,
        styleDisplayRubyBaseContainer = 20,
        styleDisplayRubyText = 19,
        styleDisplayRubyTextContainer = 21,
        styleDisplayRunIn = 16,
        styleDisplayTable = 8,
        styleDisplayTableCaption = 15,
        styleDisplayTableCell = 14,
        styleDisplayTableColumn = 12,
        styleDisplayTableColumnGroup = 13,
        styleDisplayTableFooterGroup = 6,
        styleDisplayTableHeaderGroup = 5,
        styleDisplayTableRow = 10,
        styleDisplayTableRowGroup = 11,
        styleDisplayWebkitBox = 28,
        styleDisplayWebkitInlineBox = 29,
    }

    const enum _styleDominantBaseline {
        styleDominantBaseline_Max = 2147483647,
        styleDominantBaselineAlphabetic = 1,
        styleDominantBaselineAuto = 2,
        styleDominantBaselineCentral = 3,
        styleDominantBaselineHanging = 4,
        styleDominantBaselineIdeographic = 5,
        styleDominantBaselineMathematical = 6,
        styleDominantBaselineMiddle = 7,
        styleDominantBaselineNoChange = 8,
        styleDominantBaselineNotSet = 0,
        styleDominantBaselineResetSize = 9,
        styleDominantBaselineTextAfterEdge = 10,
        styleDominantBaselineTextBeforeEdge = 11,
        styleDominantBaselineUseScript = 12,
    }

    const enum _styleEmptyCells {
        styleEmptyCells_Max = 2147483647,
        styleEmptyCellsHide = 2,
        styleEmptyCellsNotSet = 0,
        styleEmptyCellsShow = 1,
    }

    const enum _styleEnableBackground {
        styleEnableBackground_Max = 2147483647,
        styleEnableBackgroundAccumulate = 1,
        styleEnableBackgroundInherit = 3,
        styleEnableBackgroundNew = 2,
        styleEnableBackgroundNotSet = 0,
    }

    const enum _styleFillRule {
        styleFillRule_Max = 2147483647,
        styleFillRuleEvenOdd = 2,
        styleFillRuleNonZero = 1,
        styleFillRuleNotSet = 0,
    }

    const enum _styleFlex {
        styleFlex_Max = 2147483647,
        styleFlexNone = 0,
        styleFlexNotSet = 1,
    }

    const enum _styleFlexBasis {
        styleFlexBasis_Max = 2147483647,
        styleFlexBasisAuto = 0,
        styleFlexBasisNotSet = 1,
    }

    const enum _styleFlexDirection {
        styleFlexDirection_Max = 2147483647,
        styleFlexDirectionColumn = 2,
        styleFlexDirectionColumnReverse = 3,
        styleFlexDirectionNotSet = 4,
        styleFlexDirectionRow = 0,
        styleFlexDirectionRowReverse = 1,
    }

    const enum _styleFlexWrap {
        styleFlexWrap_Max = 2147483647,
        styleFlexWrapNotSet = 3,
        styleFlexWrapNowrap = 0,
        styleFlexWrapWrap = 1,
        styleFlexWrapWrapReverse = 2,
    }

    const enum _styleFontSize {
        styleFontSize_Max = 2147483647,
        styleFontSizeLarge = 4,
        styleFontSizeLarger = 8,
        styleFontSizeMedium = 3,
        styleFontSizeSmall = 2,
        styleFontSizeSmaller = 7,
        styleFontSizeXLarge = 5,
        styleFontSizeXSmall = 1,
        styleFontSizeXXLarge = 6,
        styleFontSizeXXSmall = 0,
    }

    const enum _styleFontStretch {
        styleFontStretch_Max = 2147483647,
        styleFontStretchCondensed = 5,
        styleFontStretchExpanded = 9,
        styleFontStretchExtraCondensed = 4,
        styleFontStretchExtraExpanded = 10,
        styleFontStretchNarrower = 2,
        styleFontStretchNormal = 7,
        styleFontStretchNotSet = 0,
        styleFontStretchSemiCondensed = 6,
        styleFontStretchSemiExpanded = 8,
        styleFontStretchUltraCondensed = 3,
        styleFontStretchUltraExpanded = 11,
        styleFontStretchWider = 1,
    }

    const enum _styleFontStyle {
        styleFontStyle_Max = 2147483647,
        styleFontStyleItalic = 1,
        styleFontStyleNormal = 3,
        styleFontStyleNotSet = 0,
        styleFontStyleOblique = 2,
    }

    const enum _styleFontVariant {
        styleFontVariant_Max = 2147483647,
        styleFontVariantNormal = 2,
        styleFontVariantNotSet = 0,
        styleFontVariantSmallCaps = 1,
    }

    const enum _styleFontWeight {
        styleFontWeight_Max = 2147483647,
        styleFontWeight100 = 1,
        styleFontWeight200 = 2,
        styleFontWeight300 = 3,
        styleFontWeight400 = 4,
        styleFontWeight500 = 5,
        styleFontWeight600 = 6,
        styleFontWeight700 = 7,
        styleFontWeight800 = 8,
        styleFontWeight900 = 9,
        styleFontWeightBold = 11,
        styleFontWeightBolder = 12,
        styleFontWeightLighter = 13,
        styleFontWeightNormal = 10,
        styleFontWeightNotSet = 0,
    }

    const enum _styleGridColumn {
        styleGridColumn_Max = 2147483647,
        styleGridColumnNotSet = 0,
    }

    const enum _styleGridColumnAlign {
        styleGridColumnAlign_Max = 2147483647,
        styleGridColumnAlignCenter = 0,
        styleGridColumnAlignEnd = 1,
        styleGridColumnAlignNotSet = 4,
        styleGridColumnAlignStart = 2,
        styleGridColumnAlignStretch = 3,
    }

    const enum _styleGridColumnSpan {
        styleGridColumnSpan_Max = 2147483647,
        styleGridColumnSpanNotSet = 0,
    }

    const enum _styleGridRow {
        styleGridRow_Max = 2147483647,
        styleGridRowNotSet = 0,
    }

    const enum _styleGridRowAlign {
        styleGridRowAlign_Max = 2147483647,
        styleGridRowAlignCenter = 0,
        styleGridRowAlignEnd = 1,
        styleGridRowAlignNotSet = 4,
        styleGridRowAlignStart = 2,
        styleGridRowAlignStretch = 3,
    }

    const enum _styleGridRowSpan {
        styleGridRowSpan_Max = 2147483647,
        styleGridRowSpanNotSet = 0,
    }

    const enum _styleHyphenateLimitLines {
        styleHyphenateLimitLines_Max = 2147483647,
        styleHyphenateLimitLinesNoLimit = 0,
    }

    const enum _styleHyphens {
        styleHyphens_Max = 2147483647,
        styleHyphensAuto = 2,
        styleHyphensManual = 1,
        styleHyphensNone = 0,
        styleHyphensNotSet = 3,
    }

    const enum _styleImeMode {
        styleImeMode_Max = 2147483647,
        styleImeModeActive = 1,
        styleImeModeAuto = 0,
        styleImeModeDisabled = 3,
        styleImeModeInactive = 2,
        styleImeModeNotSet = 4,
    }

    const enum _styleInitialColor {
        styleInitialColor_Max = 2147483647,
        styleInitialColorColorProperty = 1,
        styleInitialColorInvert = 3,
        styleInitialColorNoInitial = 0,
        styleInitialColorTransparent = 2,
    }

    const enum _styleInitialString {
        styleInitialString_Max = 2147483647,
        styleInitialStringAuto = 2,
        styleInitialStringNoInitial = 0,
        styleInitialStringNone = 1,
        styleInitialStringNormal = 3,
    }

    const enum _styleInterpolation {
        styleInterpolation_Max = 2147483647,
        styleInterpolationBCH = 2,
        styleInterpolationNN = 1,
        styleInterpolationNotSet = 0,
    }

    const enum _styleJustifyContent {
        styleJustifyContent_Max = 2147483647,
        styleJustifyContentCenter = 2,
        styleJustifyContentFlexEnd = 1,
        styleJustifyContentFlexStart = 0,
        styleJustifyContentNotSet = 5,
        styleJustifyContentSpaceAround = 4,
        styleJustifyContentSpaceBetween = 3,
    }

    const enum _styleLayoutFlow {
        styleLayoutFlow_Max = 2147483647,
        styleLayoutFlowHorizontal = 0,
        styleLayoutFlowNotSet = 2,
        styleLayoutFlowVerticalIdeographic = 1,
    }

    const enum _styleLayoutGridChar {
        styleLayoutGridChar_Max = 2147483647,
        styleLayoutGridCharAuto = 1,
        styleLayoutGridCharNone = 2,
        styleLayoutGridCharNotSet = 0,
    }

    const enum _styleLayoutGridLine {
        styleLayoutGridLine_Max = 2147483647,
        styleLayoutGridLineAuto = 1,
        styleLayoutGridLineNone = 2,
        styleLayoutGridLineNotSet = 0,
    }

    const enum _styleLayoutGridMode {
        styleLayoutGridMode_Max = 2147483647,
        styleLayoutGridModeBoth = 3,
        styleLayoutGridModeChar = 1,
        styleLayoutGridModeLine = 2,
        styleLayoutGridModeNone = 4,
        styleLayoutGridModeNotSet = 0,
    }

    const enum _styleLayoutGridType {
        styleLayoutGridType_Max = 2147483647,
        styleLayoutGridTypeFixed = 3,
        styleLayoutGridTypeLoose = 1,
        styleLayoutGridTypeNotSet = 0,
        styleLayoutGridTypeStrict = 2,
    }

    const enum _styleLineBreak {
        styleLineBreak_Max = 2147483647,
        styleLineBreakNormal = 1,
        styleLineBreakNotSet = 0,
        styleLineBreakStrict = 2,
    }

    const enum _styleListStylePosition {
        styleListStylePosition_Max = 2147483647,
        styleListStylePositionInside = 1,
        styleListStylePositionNotSet = 0,
        styleListStylePositionOutSide = 2,
    }

    const enum _styleListStyleType {
        styleListStyleType_Max = 2147483647,
        styleListStyleTypeArmenian = 12,
        styleListStyleTypeCircle = 2,
        styleListStyleTypeDecimal = 4,
        styleListStyleTypeDecimalLeadingZero = 10,
        styleListStyleTypeDisc = 1,
        styleListStyleTypeGeorgian = 11,
        styleListStyleTypeLowerAlpha = 7,
        styleListStyleTypeLowerGreek = 16,
        styleListStyleTypeLowerLatin = 14,
        styleListStyleTypeLowerRoman = 5,
        styleListStyleTypeNone = 9,
        styleListStyleTypeNotSet = 0,
        styleListStyleTypeSquare = 3,
        styleListStyleTypeUpperAlpha = 8,
        styleListStyleTypeUpperGreek = 15,
        styleListStyleTypeUpperLatin = 13,
        styleListStyleTypeUpperRoman = 6,
    }

    const enum _styleMsAnimationDirection {
        styleMsAnimationDirection_Max = 2147483647,
        styleMsAnimationDirectionAlternate = 1,
        styleMsAnimationDirectionAlternateReverse = 3,
        styleMsAnimationDirectionNormal = 0,
        styleMsAnimationDirectionNotSet = 4,
        styleMsAnimationDirectionReverse = 2,
    }

    const enum _styleMsAnimationFillMode {
        styleMsAnimationFillMode_Max = 2147483647,
        styleMsAnimationFillModeBackwards = 2,
        styleMsAnimationFillModeBoth = 3,
        styleMsAnimationFillModeForwards = 1,
        styleMsAnimationFillModeNone = 0,
        styleMsAnimationFillModeNotSet = 4,
    }

    const enum _styleMsAnimationPlayState {
        styleMsAnimationPlayState_Max = 2147483647,
        styleMsAnimationPlayStateNotSet = 2,
        styleMsAnimationPlayStatePaused = 1,
        styleMsAnimationPlayStateRunning = 0,
    }

    const enum _styleMsContentZoomChaining {
        styleMsContentZoomChaining_Max = 2147483647,
        styleMsContentZoomChainingChained = 2,
        styleMsContentZoomChainingNone = 1,
        styleMsContentZoomChainingNotSet = 0,
    }

    const enum _styleMsContentZooming {
        styleMsContentZooming_Max = 2147483647,
        styleMsContentZoomingNone = 1,
        styleMsContentZoomingNotSet = 0,
        styleMsContentZoomingZoom = 2,
    }

    const enum _styleMsContentZoomSnapType {
        styleMsContentZoomSnapType_Max = 2147483647,
        styleMsContentZoomSnapTypeMandatory = 2,
        styleMsContentZoomSnapTypeNone = 1,
        styleMsContentZoomSnapTypeNotSet = 0,
        styleMsContentZoomSnapTypeProximity = 3,
    }

    const enum _styleMsFlexAlign {
        styleMsFlexAlign_Max = 2147483647,
        styleMsFlexAlignBaseline = 3,
        styleMsFlexAlignCenter = 2,
        styleMsFlexAlignEnd = 1,
        styleMsFlexAlignNotSet = 5,
        styleMsFlexAlignStart = 0,
        styleMsFlexAlignStretch = 4,
    }

    const enum _styleMsFlexItemAlign {
        styleMsFlexItemAlign_Max = 2147483647,
        styleMsFlexItemAlignAuto = 5,
        styleMsFlexItemAlignBaseline = 3,
        styleMsFlexItemAlignCenter = 2,
        styleMsFlexItemAlignEnd = 1,
        styleMsFlexItemAlignNotSet = 6,
        styleMsFlexItemAlignStart = 0,
        styleMsFlexItemAlignStretch = 4,
    }

    const enum _styleMsFlexLinePack {
        styleMsFlexLinePack_Max = 2147483647,
        styleMsFlexLinePackCenter = 2,
        styleMsFlexLinePackDistribute = 4,
        styleMsFlexLinePackEnd = 1,
        styleMsFlexLinePackJustify = 3,
        styleMsFlexLinePackNotSet = 6,
        styleMsFlexLinePackStart = 0,
        styleMsFlexLinePackStretch = 5,
    }

    const enum _styleMsFlexPack {
        styleMsFlexPack_Max = 2147483647,
        styleMsFlexPackCenter = 2,
        styleMsFlexPackDistribute = 4,
        styleMsFlexPackEnd = 1,
        styleMsFlexPackJustify = 3,
        styleMsFlexPackNotSet = 5,
        styleMsFlexPackStart = 0,
    }

    const enum _styleMsHighContrastAdjust {
        styleMsHighContrastAdjust_Max = 2147483647,
        styleMsHighContrastAdjustAuto = 1,
        styleMsHighContrastAdjustNone = 2,
        styleMsHighContrastAdjustNotSet = 0,
    }

    const enum _styleMsImeAlign {
        styleMsImeAlign_Max = 2147483647,
        styleMsImeAlignAfter = 1,
        styleMsImeAlignAuto = 0,
        styleMsImeAlignNotSet = 2,
    }

    const enum _styleMsOverflowStyle {
        styleMsOverflowStyle_Max = 2147483647,
        styleMsOverflowStyleAuto = 1,
        styleMsOverflowStyleMsAutoHidingScrollbar = 4,
        styleMsOverflowStyleNone = 2,
        styleMsOverflowStyleNotSet = 0,
        styleMsOverflowStyleScrollbar = 3,
    }

    const enum _styleMsScrollChaining {
        styleMsScrollChaining_Max = 2147483647,
        styleMsScrollChainingChained = 2,
        styleMsScrollChainingNone = 1,
        styleMsScrollChainingNotSet = 0,
    }

    const enum _styleMsScrollRails {
        styleMsScrollRails_Max = 2147483647,
        styleMsScrollRailsNone = 1,
        styleMsScrollRailsNotSet = 0,
        styleMsScrollRailsRailed = 2,
    }

    const enum _styleMsScrollSnapType {
        styleMsScrollSnapType_Max = 2147483647,
        styleMsScrollSnapTypeMandatory = 2,
        styleMsScrollSnapTypeNone = 1,
        styleMsScrollSnapTypeNotSet = 0,
        styleMsScrollSnapTypeProximity = 3,
    }

    const enum _styleMsScrollTranslation {
        styleMsScrollTranslation_Max = 2147483647,
        styleMsScrollTranslationNone = 1,
        styleMsScrollTranslationNotSet = 0,
        styleMsScrollTranslationVtoH = 2,
    }

    const enum _styleMsTextCombineHorizontal {
        styleMsTextCombineHorizontal_Max = 2147483647,
        styleMsTextCombineHorizontalAll = 1,
        styleMsTextCombineHorizontalDigits = 2,
        styleMsTextCombineHorizontalNone = 0,
        styleMsTextCombineHorizontalNotSet = 3,
    }

    const enum _styleMsTouchAction {
        styleMsTouchAction_Max = 2147483647,
        styleMsTouchActionAuto = 1,
        styleMsTouchActionCrossSlideX = 64,
        styleMsTouchActionCrossSlideY = 128,
        styleMsTouchActionDoubleTapZoom = 4,
        styleMsTouchActionManipulation = 2,
        styleMsTouchActionNone = 0,
        styleMsTouchActionNotSet = -1,
        styleMsTouchActionPanX = 8,
        styleMsTouchActionPanY = 16,
        styleMsTouchActionPinchZoom = 32,
    }

    const enum _styleMsTouchSelect {
        styleMsTouchSelect_Max = 2147483647,
        styleMsTouchSelectGrippers = 0,
        styleMsTouchSelectNone = 1,
        styleMsTouchSelectNotSet = 2,
    }

    const enum _styleMsUserSelect {
        styleMsUserSelect_Max = 2147483647,
        styleMsUserSelectAuto = 0,
        styleMsUserSelectElement = 2,
        styleMsUserSelectNone = 3,
        styleMsUserSelectNotSet = 4,
        styleMsUserSelectText = 1,
    }

    const enum _styleNone {
        styleNone_Max = 2147483647,
        styleNoneNone = 0,
    }

    const enum _styleNormal {
        styleNormal_Max = 2147483647,
        styleNormalNormal = 0,
    }

    const enum _styleOutlineStyle {
        styleOutlineStyle_Max = 2147483647,
        styleOutlineStyleDashed = 2,
        styleOutlineStyleDotted = 1,
        styleOutlineStyleDouble = 4,
        styleOutlineStyleGroove = 5,
        styleOutlineStyleInset = 7,
        styleOutlineStyleNone = 10,
        styleOutlineStyleNotSet = 0,
        styleOutlineStyleOutset = 8,
        styleOutlineStyleRidge = 6,
        styleOutlineStyleSolid = 3,
        styleOutlineStyleWindowInset = 9,
    }

    const enum _styleOverflow {
        styleOverflow_Max = 2147483647,
        styleOverflowAuto = 1,
        styleOverflowHidden = 2,
        styleOverflowNotSet = 0,
        styleOverflowScroll = 4,
        styleOverflowVisible = 3,
    }

    const enum _stylePageBreak {
        stylePageBreak_Max = 2147483647,
        stylePageBreakAlways = 2,
        stylePageBreakAuto = 1,
        stylePageBreakAvoid = 5,
        stylePageBreakLeft = 3,
        stylePageBreakNotSet = 0,
        stylePageBreakRight = 4,
    }

    const enum _stylePageBreakInside {
        stylePageBreakInside_Max = 2147483647,
        stylePageBreakInsideAuto = 1,
        stylePageBreakInsideAvoid = 2,
        stylePageBreakInsideNotSet = 0,
    }

    const enum _stylePerspectiveOriginX {
        stylePerspectiveOriginX_Max = 2147483647,
        stylePerspectiveOriginXCenter = 2,
        stylePerspectiveOriginXLeft = 1,
        stylePerspectiveOriginXNotSet = 0,
        stylePerspectiveOriginXRight = 3,
    }

    const enum _stylePerspectiveOriginY {
        stylePerspectiveOriginY_Max = 2147483647,
        stylePerspectiveOriginYBottom = 3,
        stylePerspectiveOriginYCenter = 2,
        stylePerspectiveOriginYNotSet = 0,
        stylePerspectiveOriginYTop = 1,
    }

    const enum _stylePointerEvents {
        stylePointerEvents_Max = 2147483647,
        stylePointerEventsAll = 8,
        stylePointerEventsAuto = 11,
        stylePointerEventsFill = 6,
        stylePointerEventsInitial = 10,
        stylePointerEventsNone = 9,
        stylePointerEventsNotSet = 0,
        stylePointerEventsPainted = 5,
        stylePointerEventsStroke = 7,
        stylePointerEventsVisible = 4,
        stylePointerEventsVisibleFill = 2,
        stylePointerEventsVisiblePainted = 1,
        stylePointerEventsVisibleStroke = 3,
    }

    const enum _stylePosition {
        stylePosition_Max = 2147483647,
        stylePositionabsolute = 3,
        stylePositionfixed = 4,
        stylePositionMsDeviceFixed = 6,
        stylePositionMsPage = 5,
        stylePositionNotSet = 0,
        stylePositionrelative = 2,
        stylePositionstatic = 1,
    }

    const enum _styleRubyAlign {
        styleRubyAlign_Max = 2147483647,
        styleRubyAlignAuto = 1,
        styleRubyAlignCenter = 3,
        styleRubyAlignDistributeLetter = 5,
        styleRubyAlignDistributeSpace = 6,
        styleRubyAlignLeft = 2,
        styleRubyAlignLineEdge = 7,
        styleRubyAlignNotSet = 0,
        styleRubyAlignRight = 4,
    }

    const enum _styleRubyOverhang {
        styleRubyOverhang_Max = 2147483647,
        styleRubyOverhangAuto = 1,
        styleRubyOverhangNone = 3,
        styleRubyOverhangNotSet = 0,
        styleRubyOverhangWhitespace = 2,
    }

    const enum _styleRubyPosition {
        styleRubyPosition_Max = 2147483647,
        styleRubyPositionAbove = 1,
        styleRubyPositionInline = 2,
        styleRubyPositionNotSet = 0,
    }

    const enum _styleStrokeLinecap {
        styleStrokeLinecap_Max = 2147483647,
        styleStrokeLinecapButt = 1,
        styleStrokeLinecapNotSet = 0,
        styleStrokeLinecapRound = 2,
        styleStrokeLinecapSquare = 3,
    }

    const enum _styleStrokeLinejoin {
        styleStrokeLinejoin_Max = 2147483647,
        styleStrokeLinejoinBevel = 3,
        styleStrokeLinejoinMiter = 1,
        styleStrokeLinejoinNotSet = 0,
        styleStrokeLinejoinRound = 2,
    }

    const enum _styleStyleFloat {
        styleStyleFloat_Max = 2147483647,
        styleStyleFloatLeft = 1,
        styleStyleFloatNone = 3,
        styleStyleFloatNotSet = 0,
        styleStyleFloatRight = 2,
    }

    const enum _styleTableLayout {
        styleTableLayout_Max = 2147483647,
        styleTableLayoutAuto = 1,
        styleTableLayoutFixed = 2,
        styleTableLayoutNotSet = 0,
    }

    const enum _styleTextAlignLast {
        styleTextAlignLast_Max = 2147483647,
        styleTextAlignLastAuto = 5,
        styleTextAlignLastCenter = 2,
        styleTextAlignLastJustify = 4,
        styleTextAlignLastLeft = 1,
        styleTextAlignLastNotSet = 0,
        styleTextAlignLastRight = 3,
    }

    const enum _styleTextAnchor {
        styleTextAnchor_Max = 2147483647,
        styleTextAnchorEnd = 3,
        styleTextAnchorMiddle = 2,
        styleTextAnchorNotSet = 0,
        styleTextAnchorStart = 1,
    }

    const enum _styleTextDecoration {
        styleTextDecoration_Max = 2147483647,
        styleTextDecorationBlink = 4,
        styleTextDecorationLineThrough = 3,
        styleTextDecorationNone = 0,
        styleTextDecorationOverline = 2,
        styleTextDecorationUnderline = 1,
    }

    const enum _styleTextEffect {
        styleTextEffect_Max = 2147483647,
        styleTextEffectEmboss = 1,
        styleTextEffectEngrave = 2,
        styleTextEffectNone = 0,
        styleTextEffectOutline = 3,
    }

    const enum _styleTextJustify {
        styleTextJustify_Max = 2147483647,
        styleTextJustifyAuto = 8,
        styleTextJustifyDistribute = 3,
        styleTextJustifyDistributeAllLines = 4,
        styleTextJustifyInterCluster = 6,
        styleTextJustifyInterIdeograph = 5,
        styleTextJustifyInterWord = 1,
        styleTextJustifyKashida = 7,
        styleTextJustifyNewspaper = 2,
        styleTextJustifyNotSet = 0,
    }

    const enum _styleTextJustifyTrim {
        styleTextJustifyTrim_Max = 2147483647,
        styleTextJustifyTrimNone = 1,
        styleTextJustifyTrimNotSet = 0,
        styleTextJustifyTrimPunctAndKana = 3,
        styleTextJustifyTrimPunctuation = 2,
    }

    const enum _styleTextLineThroughStyle {
        styleTextLineThroughStyle_Max = 2147483647,
        styleTextLineThroughStyleDouble = 2,
        styleTextLineThroughStyleSingle = 1,
        styleTextLineThroughStyleUndefined = 0,
    }

    const enum _styleTextOverflow {
        styleTextOverflow_Max = 2147483647,
        styleTextOverflowClip = 0,
        styleTextOverflowEllipsis = 1,
        styleTextOverflowNotSet = 2,
    }

    const enum _styleTextSizeAdjust {
        styleTextSizeAdjust_Max = 2147483647,
        styleTextSizeAdjustAuto = 1,
        styleTextSizeAdjustNone = 0,
    }

    const enum _styleTextTransform {
        styleTextTransform_Max = 2147483647,
        styleTextTransformCapitalize = 1,
        styleTextTransformLowercase = 2,
        styleTextTransformNone = 4,
        styleTextTransformNotSet = 0,
        styleTextTransformUppercase = 3,
    }

    const enum _styleTextUnderlinePosition {
        styleTextUnderlinePosition_Max = 2147483647,
        styleTextUnderlinePositionAbove = 1,
        styleTextUnderlinePositionAuto = 2,
        styleTextUnderlinePositionBelow = 0,
        styleTextUnderlinePositionNotSet = 3,
    }

    const enum _styleTextUnderlineStyle {
        styleTextUnderlineStyle_Max = 2147483647,
        styleTextUnderlineStyleDash = 6,
        styleTextUnderlineStyleDotDash = 7,
        styleTextUnderlineStyleDotDotDash = 8,
        styleTextUnderlineStyleDotted = 4,
        styleTextUnderlineStyleDouble = 2,
        styleTextUnderlineStyleDoubleAccounting = 11,
        styleTextUnderlineStyleSingle = 1,
        styleTextUnderlineStyleSingleAccounting = 10,
        styleTextUnderlineStyleThick = 5,
        styleTextUnderlineStyleThickDash = 12,
        styleTextUnderlineStyleUndefined = 0,
        styleTextUnderlineStyleWave = 9,
        styleTextUnderlineStyleWords = 3,
    }

    const enum _styleTransformOriginX {
        styleTransformOriginX_Max = 2147483647,
        styleTransformOriginXCenter = 2,
        styleTransformOriginXLeft = 1,
        styleTransformOriginXNotSet = 0,
        styleTransformOriginXRight = 3,
    }

    const enum _styleTransformOriginY {
        styleTransformOriginY_Max = 2147483647,
        styleTransformOriginYBottom = 3,
        styleTransformOriginYCenter = 2,
        styleTransformOriginYNotSet = 0,
        styleTransformOriginYTop = 1,
    }

    const enum _styleTransformStyle {
        styleTransformStyle_Max = 2147483647,
        styleTransformStyleFlat = 0,
        styleTransformStyleNotSet = 2,
        styleTransformStylePreserve3D = 1,
    }

    const enum _styleUserZoom {
        styleUserZoom_Max = 2147483647,
        styleUserZoomFixed = 2,
        styleUserZoomNotSet = 0,
        styleUserZoomZoom = 1,
    }

    const enum _styleVerticalAlign {
        styleVerticalAlign_Max = 2147483647,
        styleVerticalAlignAuto = 0,
        styleVerticalAlignBaseline = 1,
        styleVerticalAlignBottom = 7,
        styleVerticalAlignInherit = 9,
        styleVerticalAlignMiddle = 6,
        styleVerticalAlignNotSet = 10,
        styleVerticalAlignSub = 2,
        styleVerticalAlignSuper = 3,
        styleVerticalAlignTextBottom = 8,
        styleVerticalAlignTextTop = 5,
        styleVerticalAlignTop = 4,
    }

    const enum _styleViewportSize {
        styleViewportSize_Max = 2147483647,
        styleViewportSizeAuto = 0,
        styleViewportSizeDeviceHeight = 2,
        styleViewportSizeDeviceWidth = 1,
    }

    const enum _styleVisibility {
        styleVisibility_Max = 2147483647,
        styleVisibilityCollapse = 4,
        styleVisibilityHidden = 3,
        styleVisibilityInherit = 1,
        styleVisibilityNotSet = 0,
        styleVisibilityVisible = 2,
    }

    const enum _styleWebkitAppearance {
        styleWebkitAppearance_Max = 2147483647,
        styleWebkitAppearanceButton = 2,
        styleWebkitAppearanceButtonBevel = 3,
        styleWebkitAppearanceCapsLockIndicator = 1,
        styleWebkitAppearanceCaret = 4,
        styleWebkitAppearanceCheckbox = 5,
        styleWebkitAppearanceDefaultButton = 6,
        styleWebkitAppearanceListbox = 7,
        styleWebkitAppearanceListitem = 8,
        styleWebkitAppearanceMediaFullscreenButton = 9,
        styleWebkitAppearanceMediaMuteButton = 10,
        styleWebkitAppearanceMediaPlayButton = 11,
        styleWebkitAppearanceMediaSeekBackButton = 12,
        styleWebkitAppearanceMediaSeekForwardButton = 13,
        styleWebkitAppearanceMediaSlider = 14,
        styleWebkitAppearanceMediaSliderthumb = 15,
        styleWebkitAppearanceMenulist = 16,
        styleWebkitAppearanceMenulistButton = 17,
        styleWebkitAppearanceMenulistText = 18,
        styleWebkitAppearanceMenulistTextfield = 19,
        styleWebkitAppearanceNone = 0,
        styleWebkitAppearanceNotSet = 34,
        styleWebkitAppearancePushButton = 20,
        styleWebkitAppearanceRadio = 21,
        styleWebkitAppearanceSearchfield = 22,
        styleWebkitAppearanceSearchfieldCancelButton = 23,
        styleWebkitAppearanceSearchfieldDecoration = 24,
        styleWebkitAppearanceSearchfieldResultsButton = 25,
        styleWebkitAppearanceSearchfieldResultsDecoration = 26,
        styleWebkitAppearanceSliderHorizontal = 27,
        styleWebkitAppearanceSliderthumbHorizontal = 29,
        styleWebkitAppearanceSliderthumbVertical = 30,
        styleWebkitAppearanceSliderVertical = 28,
        styleWebkitAppearanceSquareButton = 31,
        styleWebkitAppearanceTextarea = 32,
        styleWebkitAppearanceTextfield = 33,
    }

    const enum _styleWebkitBoxDirection {
        styleWebkitBoxDirection_Max = 2147483647,
        styleWebkitBoxDirectionNormal = 0,
        styleWebkitBoxDirectionNotSet = 2,
        styleWebkitBoxDirectionReverse = 1,
    }

    const enum _styleWebkitBoxOrient {
        styleWebkitBoxOrient_Max = 2147483647,
        styleWebkitBoxOrientBlockAxis = 3,
        styleWebkitBoxOrientHorizontal = 0,
        styleWebkitBoxOrientInlineAxis = 1,
        styleWebkitBoxOrientNotSet = 4,
        styleWebkitBoxOrientVertical = 2,
    }

    const enum _styleWebkitBoxPack {
        styleWebkitBoxPack_Max = 2147483647,
        styleWebkitBoxPackCenter = 2,
        styleWebkitBoxPackEnd = 1,
        styleWebkitBoxPackJustify = 3,
        styleWebkitBoxPackNotSet = 5,
        styleWebkitBoxPackStart = 0,
    }

    const enum _styleWhiteSpace {
        styleWhiteSpace_Max = 2147483647,
        styleWhiteSpaceNormal = 1,
        styleWhiteSpaceNotSet = 0,
        styleWhiteSpaceNowrap = 3,
        styleWhiteSpacePre = 2,
        styleWhiteSpacePreline = 4,
        styleWhiteSpacePrewrap = 5,
    }

    const enum _styleWidowsOrphans {
        styleWidowsOrphans_Max = 2147483647,
        styleWidowsOrphansNotSet = -2147483647,
    }

    const enum _styleWordBreak {
        styleWordBreak_Max = 2147483647,
        styleWordBreakBreakAll = 2,
        styleWordBreakKeepAll = 3,
        styleWordBreakNormal = 1,
        styleWordBreakNotSet = 0,
    }

    const enum _styleWordWrap {
        styleWordWrap_Max = 2147483647,
        styleWordWrapNotSet = 0,
        styleWordWrapOff = 1,
        styleWordWrapOn = 2,
    }

    const enum _styleWrapFlow {
        styleWrapFlow_Max = 2147483647,
        styleWrapFlowAuto = 1,
        styleWrapFlowBoth = 2,
        styleWrapFlowClear = 5,
        styleWrapFlowEnd = 4,
        styleWrapFlowMaximum = 7,
        styleWrapFlowMinimum = 6,
        styleWrapFlowNotSet = 0,
        styleWrapFlowStart = 3,
    }

    const enum _styleWrapThrough {
        styleWrapThrough_Max = 2147483647,
        styleWrapThroughNone = 2,
        styleWrapThroughNotSet = 0,
        styleWrapThroughWrap = 1,
    }

    const enum _styleWritingMode {
        styleWritingMode_Max = 2147483647,
        styleWritingModeBtlr = 6,
        styleWritingModeBtrl = 3,
        styleWritingModeLr = 9,
        styleWritingModeLrbt = 7,
        styleWritingModeLrtb = 0,
        styleWritingModeNotSet = 4,
        styleWritingModeRl = 10,
        styleWritingModeRlbt = 8,
        styleWritingModeRltb = 2,
        styleWritingModeTb = 11,
        styleWritingModeTblr = 5,
        styleWritingModeTbrl = 1,
    }

    const enum _styleZIndex {
        styleZIndex_Max = 2147483647,
        styleZIndexAuto = -2147483647,
    }

    const enum _svgAngleType {
        SVG_ANGLETYPE_DEG = 2,
        SVG_ANGLETYPE_GRAD = 4,
        SVG_ANGLETYPE_RAD = 3,
        SVG_ANGLETYPE_UNKNOWN = 0,
        SVG_ANGLETYPE_UNSPECIFIED = 1,
        svgAngleType_Max = 2147483647,
    }

    const enum _svgChannel {
        SVG_CHANNEL_A = 4,
        SVG_CHANNEL_B = 3,
        SVG_CHANNEL_G = 2,
        SVG_CHANNEL_R = 1,
        SVG_CHANNEL_UNKNOWN = 0,
        svgChannel_Max = 2147483647,
    }

    const enum _svgEdgemode {
        SVG_EDGEMODE_DUPLICATE = 1,
        SVG_EDGEMODE_NONE = 3,
        SVG_EDGEMODE_UNKNOWN = 0,
        SVG_EDGEMODE_WRAP = 2,
        svgEdgemode_Max = 2147483647,
    }

    const enum _svgExternalResourcesRequired {
        svgExternalResourcesRequired_Max = 2147483647,
        svgExternalResourcesRequiredFalse = 0,
        svgExternalResourcesRequiredTrue = 1,
    }

    const enum _svgFeblendMode {
        SVG_FEBLEND_MODE_DARKEN = 4,
        SVG_FEBLEND_MODE_LIGHTEN = 5,
        SVG_FEBLEND_MODE_MULTIPLY = 2,
        SVG_FEBLEND_MODE_NORMAL = 1,
        SVG_FEBLEND_MODE_SCREEN = 3,
        SVG_FEBLEND_MODE_UNKNOWN = 0,
        svgFeblendMode_Max = 2147483647,
    }

    const enum _svgFecolormatrixType {
        SVG_FECOLORMATRIX_TYPE_HUEROTATE = 3,
        SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA = 4,
        SVG_FECOLORMATRIX_TYPE_MATRIX = 1,
        SVG_FECOLORMATRIX_TYPE_SATURATE = 2,
        SVG_FECOLORMATRIX_TYPE_UNKNOWN = 0,
        svgFecolormatrixType_Max = 2147483647,
    }

    const enum _svgFecomponenttransferType {
        SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE = 3,
        SVG_FECOMPONENTTRANSFER_TYPE_GAMMA = 5,
        SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY = 1,
        SVG_FECOMPONENTTRANSFER_TYPE_LINEAR = 4,
        SVG_FECOMPONENTTRANSFER_TYPE_TABLE = 2,
        SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN = 0,
        svgFecomponenttransferType_Max = 2147483647,
    }

    const enum _svgFecompositeOperator {
        SVG_FECOMPOSITE_OPERATOR_ARITHMETIC = 6,
        SVG_FECOMPOSITE_OPERATOR_ATOP = 4,
        SVG_FECOMPOSITE_OPERATOR_IN = 2,
        SVG_FECOMPOSITE_OPERATOR_OUT = 3,
        SVG_FECOMPOSITE_OPERATOR_OVER = 1,
        SVG_FECOMPOSITE_OPERATOR_UNKNOWN = 0,
        SVG_FECOMPOSITE_OPERATOR_XOR = 5,
        svgFecompositeOperator_Max = 2147483647,
    }

    const enum _svgFocusable {
        svgFocusable_Max = 2147483647,
        svgFocusableAuto = 1,
        svgFocusableFalse = 3,
        svgFocusableNotSet = 0,
        svgFocusableTrue = 2,
    }

    const enum _svgLengthType {
        SVG_LENGTHTYPE_CM = 6,
        SVG_LENGTHTYPE_EMS = 3,
        SVG_LENGTHTYPE_EXS = 4,
        SVG_LENGTHTYPE_IN = 8,
        SVG_LENGTHTYPE_MM = 7,
        SVG_LENGTHTYPE_NUMBER = 1,
        SVG_LENGTHTYPE_PC = 10,
        SVG_LENGTHTYPE_PERCENTAGE = 2,
        SVG_LENGTHTYPE_PT = 9,
        SVG_LENGTHTYPE_PX = 5,
        SVG_LENGTHTYPE_UNKNOWN = 0,
        svgLengthType_Max = 2147483647,
    }

    const enum _svgMarkerOrient {
        SVG_MARKER_ORIENT_ANGLE = 2,
        SVG_MARKER_ORIENT_AUTO = 1,
        SVG_MARKER_ORIENT_UNKNOWN = 0,
        svgMarkerOrient_Max = 2147483647,
    }

    const enum _svgMarkerOrientAttribute {
        svgMarkerOrientAttribute_Max = 2147483647,
        svgMarkerOrientAttributeAuto = 0,
    }

    const enum _svgMarkerUnits {
        SVG_MARKERUNITS_STROKEWIDTH = 2,
        SVG_MARKERUNITS_UNKNOWN = 0,
        SVG_MARKERUNITS_USERSPACEONUSE = 1,
        svgMarkerUnits_Max = 2147483647,
    }

    const enum _svgMorphologyOperator {
        SVG_MORPHOLOGY_OPERATOR_DILATE = 2,
        SVG_MORPHOLOGY_OPERATOR_ERODE = 1,
        SVG_MORPHOLOGY_OPERATOR_UNKNOWN = 0,
        svgMorphologyOperator_Max = 2147483647,
    }

    const enum _svgPathSegType {
        PATHSEG_ARC_ABS = 10,
        PATHSEG_ARC_REL = 11,
        PATHSEG_CLOSEPATH = 1,
        PATHSEG_CURVETO_CUBIC_ABS = 6,
        PATHSEG_CURVETO_CUBIC_REL = 7,
        PATHSEG_CURVETO_CUBIC_SMOOTH_ABS = 16,
        PATHSEG_CURVETO_CUBIC_SMOOTH_REL = 17,
        PATHSEG_CURVETO_QUADRATIC_ABS = 8,
        PATHSEG_CURVETO_QUADRATIC_REL = 9,
        PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS = 18,
        PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL = 19,
        PATHSEG_LINETO_ABS = 4,
        PATHSEG_LINETO_HORIZONTAL_ABS = 12,
        PATHSEG_LINETO_HORIZONTAL_REL = 13,
        PATHSEG_LINETO_REL = 5,
        PATHSEG_LINETO_VERTICAL_ABS = 14,
        PATHSEG_LINETO_VERTICAL_REL = 15,
        PATHSEG_MOVETO_ABS = 2,
        PATHSEG_MOVETO_REL = 3,
        PATHSEG_UNKNOWN = 0,
        svgPathSegType_Max = 2147483647,
    }

    const enum _svgPreserveAlpha {
        SVG_PRESERVEALPHA_FALSE = 0,
        SVG_PRESERVEALPHA_TRUE = 1,
        svgPreserveAlpha_Max = 2147483647,
    }

    const enum _svgPreserveAspectMeetOrSliceType {
        SVG_MEETORSLICE_MEET = 1,
        SVG_MEETORSLICE_SLICE = 2,
        SVG_MEETORSLICE_UNKNOWN = 0,
        svgPreserveAspectMeetOrSliceType_Max = 2147483647,
    }

    const enum _svgPreserveAspectRatioAlignType {
        SVG_PRESERVEASPECTRATIO_NONE = 1,
        SVG_PRESERVEASPECTRATIO_UNKNOWN = 0,
        SVG_PRESERVEASPECTRATIO_XMAXYMAX = 10,
        SVG_PRESERVEASPECTRATIO_XMAXYMID = 7,
        SVG_PRESERVEASPECTRATIO_XMAXYMIN = 4,
        SVG_PRESERVEASPECTRATIO_XMIDYMAX = 9,
        SVG_PRESERVEASPECTRATIO_XMIDYMID = 6,
        SVG_PRESERVEASPECTRATIO_XMIDYMIN = 3,
        SVG_PRESERVEASPECTRATIO_XMINYMAX = 8,
        SVG_PRESERVEASPECTRATIO_XMINYMID = 5,
        SVG_PRESERVEASPECTRATIO_XMINYMIN = 2,
        svgPreserveAspectRatioAlignType_Max = 2147483647,
    }

    const enum _svgSpreadMethod {
        SVG_SPREADMETHOD_PAD = 1,
        SVG_SPREADMETHOD_REFLECT = 2,
        SVG_SPREADMETHOD_REPEAT = 3,
        SVG_SPREADMETHOD_UNKNOWN = 0,
        svgSpreadMethod_Max = 2147483647,
    }

    const enum _svgStitchtype {
        SVG_STITCHTYPE_NOSTITCH = 2,
        SVG_STITCHTYPE_STITCH = 1,
        SVG_STITCHTYPE_UNKNOWN = 0,
        svgStitchtype_Max = 2147483647,
    }

    const enum _svgTransformType {
        SVG_TRANSFORM_MATRIX = 1,
        SVG_TRANSFORM_ROTATE = 4,
        SVG_TRANSFORM_SCALE = 3,
        SVG_TRANSFORM_SKEWX = 5,
        SVG_TRANSFORM_SKEWY = 6,
        SVG_TRANSFORM_TRANSLATE = 2,
        SVG_TRANSFORM_UNKNOWN = 0,
        svgTransformType_Max = 2147483647,
    }

    const enum _svgTurbulenceType {
        SVG_TURBULENCE_TYPE_FACTALNOISE = 1,
        SVG_TURBULENCE_TYPE_TURBULENCE = 2,
        SVG_TURBULENCE_TYPE_UNKNOWN = 0,
        svgTurbulenceType_Max = 2147483647,
    }

    const enum _svgUnitTypes {
        SVG_UNITTYPE_OBJECTBOUNDINGBOX = 2,
        SVG_UNITTYPE_UNKNOWN = 0,
        SVG_UNITTYPE_USERSPACEONUSE = 1,
        svgUnitTypes_Max = 2147483647,
    }

    const enum _textDecoration {
        textDecoration_Max = 2147483647,
        textDecorationBlink = 4,
        textDecorationLineThrough = 3,
        textDecorationNone = 0,
        textDecorationOverline = 2,
        textDecorationUnderline = 1,
    }

    const enum _textpathMethodtype {
        TEXTPATH_METHODTYPE_ALIGN = 1,
        TEXTPATH_METHODTYPE_STRETCH = 2,
        TEXTPATH_METHODTYPE_UNKNOWN = 0,
        textpathMethodtype_Max = 2147483647,
    }

    const enum _textpathSpacingtype {
        TEXTPATH_SPACINGTYPE_AUTO = 1,
        TEXTPATH_SPACINGTYPE_EXACT = 2,
        TEXTPATH_SPACINGTYPE_UNKNOWN = 0,
        textpathSpacingtype_Max = 2147483647,
    }

    const enum _VIEW_OBJECT_ALPHA_MODE {
        VIEW_OBJECT_ALPHA_MODE_IGNORE = 0,
        VIEW_OBJECT_ALPHA_MODE_Max = 2147483647,
        VIEW_OBJECT_ALPHA_MODE_PREMULTIPLIED = 1,
    }

    const enum _VIEW_OBJECT_COMPOSITION_MODE {
        VIEW_OBJECT_COMPOSITION_MODE_LEGACY = 0,
        VIEW_OBJECT_COMPOSITION_MODE_Max = 2147483647,
        VIEW_OBJECT_COMPOSITION_MODE_SURFACEPRESENTER = 1,
    }

    const enum DXGI_FORMAT {
        DXGI_FORMAT_420_OPAQUE = 106,
        DXGI_FORMAT_A8_UNORM = 65,
        DXGI_FORMAT_A8P8 = 114,
        DXGI_FORMAT_AI44 = 111,
        DXGI_FORMAT_AYUV = 100,
        DXGI_FORMAT_B4G4R4A4_UNORM = 115,
        DXGI_FORMAT_B5G5R5A1_UNORM = 86,
        DXGI_FORMAT_B5G6R5_UNORM = 85,
        DXGI_FORMAT_B8G8R8A8_TYPELESS = 90,
        DXGI_FORMAT_B8G8R8A8_UNORM = 87,
        DXGI_FORMAT_B8G8R8A8_UNORM_SRGB = 91,
        DXGI_FORMAT_B8G8R8X8_TYPELESS = 92,
        DXGI_FORMAT_B8G8R8X8_UNORM = 88,
        DXGI_FORMAT_B8G8R8X8_UNORM_SRGB = 93,
        DXGI_FORMAT_BC1_TYPELESS = 70,
        DXGI_FORMAT_BC1_UNORM = 71,
        DXGI_FORMAT_BC1_UNORM_SRGB = 72,
        DXGI_FORMAT_BC2_TYPELESS = 73,
        DXGI_FORMAT_BC2_UNORM = 74,
        DXGI_FORMAT_BC2_UNORM_SRGB = 75,
        DXGI_FORMAT_BC3_TYPELESS = 76,
        DXGI_FORMAT_BC3_UNORM = 77,
        DXGI_FORMAT_BC3_UNORM_SRGB = 78,
        DXGI_FORMAT_BC4_SNORM = 81,
        DXGI_FORMAT_BC4_TYPELESS = 79,
        DXGI_FORMAT_BC4_UNORM = 80,
        DXGI_FORMAT_BC5_SNORM = 84,
        DXGI_FORMAT_BC5_TYPELESS = 82,
        DXGI_FORMAT_BC5_UNORM = 83,
        DXGI_FORMAT_BC6H_SF16 = 96,
        DXGI_FORMAT_BC6H_TYPELESS = 94,
        DXGI_FORMAT_BC6H_UF16 = 95,
        DXGI_FORMAT_BC7_TYPELESS = 97,
        DXGI_FORMAT_BC7_UNORM = 98,
        DXGI_FORMAT_BC7_UNORM_SRGB = 99,
        DXGI_FORMAT_D16_UNORM = 55,
        DXGI_FORMAT_D24_UNORM_S8_UINT = 45,
        DXGI_FORMAT_D32_FLOAT = 40,
        DXGI_FORMAT_D32_FLOAT_S8X24_UINT = 20,
        DXGI_FORMAT_FORCE_UINT = -1,
        DXGI_FORMAT_G8R8_G8B8_UNORM = 69,
        DXGI_FORMAT_IA44 = 112,
        DXGI_FORMAT_NV11 = 110,
        DXGI_FORMAT_NV12 = 103,
        DXGI_FORMAT_P010 = 104,
        DXGI_FORMAT_P016 = 105,
        DXGI_FORMAT_P208 = 130,
        DXGI_FORMAT_P8 = 113,
        DXGI_FORMAT_R1_UNORM = 66,
        DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM = 89,
        DXGI_FORMAT_R10G10B10A2_TYPELESS = 23,
        DXGI_FORMAT_R10G10B10A2_UINT = 25,
        DXGI_FORMAT_R10G10B10A2_UNORM = 24,
        DXGI_FORMAT_R11G11B10_FLOAT = 26,
        DXGI_FORMAT_R16_FLOAT = 54,
        DXGI_FORMAT_R16_SINT = 59,
        DXGI_FORMAT_R16_SNORM = 58,
        DXGI_FORMAT_R16_TYPELESS = 53,
        DXGI_FORMAT_R16_UINT = 57,
        DXGI_FORMAT_R16_UNORM = 56,
        DXGI_FORMAT_R16G16_FLOAT = 34,
        DXGI_FORMAT_R16G16_SINT = 38,
        DXGI_FORMAT_R16G16_SNORM = 37,
        DXGI_FORMAT_R16G16_TYPELESS = 33,
        DXGI_FORMAT_R16G16_UINT = 36,
        DXGI_FORMAT_R16G16_UNORM = 35,
        DXGI_FORMAT_R16G16B16A16_FLOAT = 10,
        DXGI_FORMAT_R16G16B16A16_SINT = 14,
        DXGI_FORMAT_R16G16B16A16_SNORM = 13,
        DXGI_FORMAT_R16G16B16A16_TYPELESS = 9,
        DXGI_FORMAT_R16G16B16A16_UINT = 12,
        DXGI_FORMAT_R16G16B16A16_UNORM = 11,
        DXGI_FORMAT_R24_UNORM_X8_TYPELESS = 46,
        DXGI_FORMAT_R24G8_TYPELESS = 44,
        DXGI_FORMAT_R32_FLOAT = 41,
        DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS = 21,
        DXGI_FORMAT_R32_SINT = 43,
        DXGI_FORMAT_R32_TYPELESS = 39,
        DXGI_FORMAT_R32_UINT = 42,
        DXGI_FORMAT_R32G32_FLOAT = 16,
        DXGI_FORMAT_R32G32_SINT = 18,
        DXGI_FORMAT_R32G32_TYPELESS = 15,
        DXGI_FORMAT_R32G32_UINT = 17,
        DXGI_FORMAT_R32G32B32_FLOAT = 6,
        DXGI_FORMAT_R32G32B32_SINT = 8,
        DXGI_FORMAT_R32G32B32_TYPELESS = 5,
        DXGI_FORMAT_R32G32B32_UINT = 7,
        DXGI_FORMAT_R32G32B32A32_FLOAT = 2,
        DXGI_FORMAT_R32G32B32A32_SINT = 4,
        DXGI_FORMAT_R32G32B32A32_TYPELESS = 1,
        DXGI_FORMAT_R32G32B32A32_UINT = 3,
        DXGI_FORMAT_R32G8X24_TYPELESS = 19,
        DXGI_FORMAT_R8_SINT = 64,
        DXGI_FORMAT_R8_SNORM = 63,
        DXGI_FORMAT_R8_TYPELESS = 60,
        DXGI_FORMAT_R8_UINT = 62,
        DXGI_FORMAT_R8_UNORM = 61,
        DXGI_FORMAT_R8G8_B8G8_UNORM = 68,
        DXGI_FORMAT_R8G8_SINT = 52,
        DXGI_FORMAT_R8G8_SNORM = 51,
        DXGI_FORMAT_R8G8_TYPELESS = 48,
        DXGI_FORMAT_R8G8_UINT = 50,
        DXGI_FORMAT_R8G8_UNORM = 49,
        DXGI_FORMAT_R8G8B8A8_SINT = 32,
        DXGI_FORMAT_R8G8B8A8_SNORM = 31,
        DXGI_FORMAT_R8G8B8A8_TYPELESS = 27,
        DXGI_FORMAT_R8G8B8A8_UINT = 30,
        DXGI_FORMAT_R8G8B8A8_UNORM = 28,
        DXGI_FORMAT_R8G8B8A8_UNORM_SRGB = 29,
        DXGI_FORMAT_R9G9B9E5_SHAREDEXP = 67,
        DXGI_FORMAT_UNKNOWN = 0,
        DXGI_FORMAT_V208 = 131,
        DXGI_FORMAT_V408 = 132,
        DXGI_FORMAT_X24_TYPELESS_G8_UINT = 47,
        DXGI_FORMAT_X32_TYPELESS_G8X24_UINT = 22,
        DXGI_FORMAT_Y210 = 108,
        DXGI_FORMAT_Y216 = 109,
        DXGI_FORMAT_Y410 = 101,
        DXGI_FORMAT_Y416 = 102,
        DXGI_FORMAT_YUY2 = 107,
    }

    class applicationCache {
        private 'MSHTML.applicationCache_typekey': applicationCache;
        private constructor();
        public abort(): void;
        public oncached: any;
        public onchecking: any;
        public ondownloading: any;
        public onerror: any;
        public onnoupdate: any;
        public onobsolete: any;
        public onprogress: any;
        public onupdateready: any;
        public readonly status: number;
        public swapCache(): void;
        public update(): void;
    }

    class BlockFormats {
        private 'MSHTML.BlockFormats_typekey': BlockFormats;
        private constructor();
        public readonly Count: number;
        public item(pvarIndex: any): string;
    }

    class CanvasGradient {
        private 'MSHTML.CanvasGradient_typekey': CanvasGradient;
        private constructor();
        public addColorStop(offset: number, color: string): void;
    }

    class CanvasImageData {
        private 'MSHTML.CanvasImageData_typekey': CanvasImageData;
        private constructor();
        public readonly data: any;
        public readonly height: number;
        public readonly width: number;
    }

    class CanvasPattern {
        private 'MSHTML.CanvasPattern_typekey': CanvasPattern;
        private constructor();
    }

    class CanvasRenderingContext2D {
        private 'MSHTML.CanvasRenderingContext2D_typekey': CanvasRenderingContext2D;
        private constructor();
        public arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise: number): void;
        public arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): void;
        public beginPath(): void;
        public bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): void;
        public readonly canvas: IHTMLCanvasElement;
        public clearRect(x: number, y: number, w: number, h: number): void;
        public clip(): void;
        public closePath(): void;
        public createImageData(a1: any, a2: any): ICanvasImageData;
        public createLinearGradient(x0: number, y0: number, x1: number, y1: number): ICanvasGradient;
        public createPattern(Image: any, repetition: any): ICanvasPattern;
        public createRadialGradient(x0: number, y0: number, r0: number, x1: number, y1: number, r1: number): ICanvasGradient;
        public drawImage(pSrc: any, a1: any, a2: any, a3: any, a4: any, a5: any, a6: any, a7: any, a8: any): void;
        public fill(): void;
        public fillRect(x: number, y: number, w: number, h: number): void;
        public fillStyle: any;
        public fillText(text: string, x: number, y: number, maxWidth: any): void;
        public font: string;
        public getImageData(sx: number, sy: number, sw: number, sh: number): ICanvasImageData;
        public globalAlpha: number;
        public globalCompositeOperation: string;
        public isPointInPath(x: number, y: number): boolean;
        public lineCap: string;
        public lineJoin: string;
        public lineTo(x: number, y: number): void;
        public lineWidth: number;
        public measureText(text: string): ICanvasTextMetrics;
        public miterLimit: number;
        public moveTo(x: number, y: number): void;
        public putImageData(imagedata: ICanvasImageData, dx: number, dy: number, dirtyX: any, dirtyY: any, dirtyWidth: any, dirtyHeight: any): void;
        public quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void;
        public rect(x: number, y: number, w: number, h: number): void;
        public restore(): void;
        public rotate(angle: number): void;
        public save(): void;
        public scale(x: number, y: number): void;
        public setTransform(m11: number, m12: number, m21: number, m22: number, dx: number, dy: number): void;
        public shadowBlur: number;
        public shadowColor: string;
        public shadowOffsetX: number;
        public shadowOffsetY: number;
        public stroke(): void;
        public strokeRect(x: number, y: number, w: number, h: number): void;
        public strokeStyle: any;
        public strokeText(text: string, x: number, y: number, maxWidth: any): void;
        public textAlign: string;
        public textBaseline: string;
        public transform(m11: number, m12: number, m21: number, m22: number, dx: number, dy: number): void;
        public translate(x: number, y: number): void;
    }

    class CanvasTextMetrics {
        private 'MSHTML.CanvasTextMetrics_typekey': CanvasTextMetrics;
        private constructor();
        public readonly width: number;
    }

    class CClientCaps {
        private 'MSHTML.CClientCaps_typekey': CClientCaps;
        private constructor();

        /** @param string [bStrVer=''] */
        public addComponentRequest(bstrName: string, bstrURL: string, bStrVer?: string): void;
        public readonly availHeight: number;
        public readonly availWidth: number;
        public readonly bufferDepth: number;
        public clearComponentRequest(): void;
        public readonly colorDepth: number;
        public compareVersions(bstrVer1: string, bstrVer2: string): number;
        public readonly connectionSpeed: number;
        public readonly connectionType: string;
        public readonly cookieEnabled: boolean;
        public readonly cpuClass: string;
        public doComponentRequest(): boolean;
        public getComponentVersion(bstrName: string, bstrURL: string): string;
        public readonly height: number;

        /** @param string [bStrVer=''] */
        public isComponentInstalled(bstrName: string, bstrURL: string, bStrVer?: string): boolean;
        public readonly javaEnabled: boolean;
        public readonly onLine: boolean;
        public readonly platform: string;
        public readonly systemLanguage: string;
        public readonly userLanguage: string;
        public readonly width: number;
    }

    class CEventObj {
        private 'MSHTML.CEventObj_typekey': CEventObj;
        private constructor();
        public readonly actionURL: string;
        public altKey: boolean;
        public altLeft: boolean;
        public readonly behaviorCookie: number;
        public readonly behaviorPart: number;
        public bookmarks: IHTMLBookmarkCollection;
        public boundElements: IHTMLElementCollection;
        public button: number;
        public readonly buttonID: number;
        public cancelBubble: boolean;
        public clientX: number;
        public clientY: number;
        public readonly 'constructor': any;
        public readonly contentOverflow: boolean;
        public ctrlKey: boolean;
        public ctrlLeft: boolean;
        public data: string;
        public dataFld: string;
        public readonly dataTransfer: IHTMLDataTransfer;
        public fromElement: IHTMLElement;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public keyCode: number;
        public readonly nextPage: string;
        public offsetX: number;
        public offsetY: number;
        public origin: string;
        public propertyName: string;
        public qualifier: string;
        public reason: number;
        public recordset: any;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public repeat: boolean;
        public returnValue: any;
        public screenX: number;
        public screenY: number;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public shiftKey: boolean;
        public shiftLeft: boolean;
        public readonly source: any;
        public srcElement: IHTMLElement;
        public srcFilter: any;
        public srcUrn: string;
        public toElement: IHTMLElement;
        public type: string;
        public url: string;
        public readonly wheelDelta: number;
        public x: number;
        public y: number;
    }

    class CMimeTypes {
        private 'MSHTML.CMimeTypes_typekey': CMimeTypes;
        private constructor();
        public readonly length: number;
    }

    class COpsProfile {
        private 'MSHTML.COpsProfile_typekey': COpsProfile;
        private constructor();
        public addReadRequest(name: string, reserved?: any): boolean;
        public addRequest(name: string, reserved?: any): boolean;
        public clearRequest(): void;
        public commitChanges(): boolean;
        public doReadRequest(usage: any, fname?: any, domain?: any, path?: any, expire?: any, reserved?: any): void;
        public doRequest(usage: any, fname?: any, domain?: any, path?: any, expire?: any, reserved?: any): void;
        public doWriteRequest(): boolean;
        public getAttribute(name: string): string;
        public setAttribute(name: string, value: string, prefs?: any): boolean;
    }

    class CPlugins {
        private 'MSHTML.CPlugins_typekey': CPlugins;
        private constructor();
        public readonly 'constructor': any;
        public readonly length: number;

        /** @param boolean [reload=false] */
        public refresh(reload?: boolean): void;
    }

    class CPrintManagerTemplatePrinter {
        private 'MSHTML.CPrintManagerTemplatePrinter_typekey': CPrintManagerTemplatePrinter;
        private constructor();
        public allLinkedDocuments: boolean;
        public collate: boolean;
        public copies: number;
        public currentPage: boolean;
        public currentPageAvail: boolean;
        public deviceSupports(bstrProperty: string): any;
        public drawPreviewPage(pElemDisp: any, nPage: number): void;
        public readonly duplex: boolean;
        public endPrint(): void;
        public ensurePrintDialogDefaults(): boolean;
        public footer: string;
        public frameActive: boolean;
        public frameActiveEnabled: boolean;
        public frameAsShown: boolean;
        public framesetDocument: boolean;
        public getPageMarginBottom(pageRule: any, pageWidth: number, pageHeight: number): any;
        public getPageMarginBottomImportant(pageRule: any): boolean;
        public getPageMarginLeft(pageRule: any, pageWidth: number, pageHeight: number): any;
        public getPageMarginLeftImportant(pageRule: any): boolean;
        public getPageMarginRight(pageRule: any, pageWidth: number, pageHeight: number): any;
        public getPageMarginRightImportant(pageRule: any): boolean;
        public getPageMarginTop(pageRule: any, pageWidth: number, pageHeight: number): any;
        public getPageMarginTopImportant(pageRule: any): boolean;
        public getPrintTaskOptionValue(bstrKey: string): any;
        public header: string;
        public headerFooterFont: string;
        public invalidatePreview(): void;
        public marginBottom: number;
        public marginLeft: number;
        public marginRight: number;
        public marginTop: number;
        public orientation: string;
        public pageFrom: number;
        public readonly pageHeight: number;
        public pageTo: number;
        public readonly pageWidth: number;
        public readonly percentScale: number;
        public printBlankPage(): void;
        public printNonNative(pMarkup: any): boolean;
        public printNonNativeFrames(pMarkup: any, fActiveFrame: boolean): void;
        public printPage(pElemDisp: any): void;
        public selectedPages: boolean;
        public selection: boolean;
        public selectionEnabled: boolean;
        public setPageCount(nPage: number): void;
        public readonly showHeaderFooter: boolean;
        public showPageSetupDialog(): boolean;
        public showPrintDialog(): boolean;
        public readonly shrinkToFit: boolean;
        public startDoc(bstrTitle: string): boolean;
        public startPrint(): void;
        public stopDoc(): void;
        public tableOfLinks: boolean;
        public readonly unprintableBottom: number;
        public readonly unprintableLeft: number;
        public readonly unprintableRight: number;
        public readonly unprintableTop: number;
        public updatePageStatus(p: number): void;
        public usePrinterCopyCollate: boolean;
    }

    class CTemplatePrinter {
        private 'MSHTML.CTemplatePrinter_typekey': CTemplatePrinter;
        private constructor();
        public allLinkedDocuments: boolean;
        public collate: boolean;
        public copies: number;
        public currentPage: boolean;
        public currentPageAvail: boolean;
        public deviceSupports(bstrProperty: string): any;
        public readonly duplex: boolean;
        public ensurePrintDialogDefaults(): boolean;
        public footer: string;
        public frameActive: boolean;
        public frameActiveEnabled: boolean;
        public frameAsShown: boolean;
        public framesetDocument: boolean;
        public getPageMarginBottom(pageRule: any, pageWidth: number, pageHeight: number): any;
        public getPageMarginBottomImportant(pageRule: any): boolean;
        public getPageMarginLeft(pageRule: any, pageWidth: number, pageHeight: number): any;
        public getPageMarginLeftImportant(pageRule: any): boolean;
        public getPageMarginRight(pageRule: any, pageWidth: number, pageHeight: number): any;
        public getPageMarginRightImportant(pageRule: any): boolean;
        public getPageMarginTop(pageRule: any, pageWidth: number, pageHeight: number): any;
        public getPageMarginTopImportant(pageRule: any): boolean;
        public header: string;
        public headerFooterFont: string;
        public marginBottom: number;
        public marginLeft: number;
        public marginRight: number;
        public marginTop: number;
        public orientation: string;
        public pageFrom: number;
        public readonly pageHeight: number;
        public pageTo: number;
        public readonly pageWidth: number;
        public printBlankPage(): void;
        public printNonNative(pMarkup: any): boolean;
        public printNonNativeFrames(pMarkup: any, fActiveFrame: boolean): void;
        public printPage(pElemDisp: any): void;
        public selectedPages: boolean;
        public selection: boolean;
        public selectionEnabled: boolean;
        public showPageSetupDialog(): boolean;
        public showPrintDialog(): boolean;
        public startDoc(bstrTitle: string): boolean;
        public stopDoc(): void;
        public tableOfLinks: boolean;
        public readonly unprintableBottom: number;
        public readonly unprintableLeft: number;
        public readonly unprintableRight: number;
        public readonly unprintableTop: number;
        public updatePageStatus(p: number): void;
        public usePrinterCopyCollate: boolean;
    }

    class DOMBeforeUnloadEvent {
        private 'MSHTML.DOMBeforeUnloadEvent_typekey': DOMBeforeUnloadEvent;
        private constructor();
        public readonly bubbles: boolean;
        public readonly cancelable: boolean;
        public cancelBubble: boolean;
        public readonly currentTarget: IEventTarget;
        public readonly defaultPrevented: boolean;
        public readonly eventPhase: number;
        public initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
        public readonly isTrusted: boolean;
        public preventDefault(): void;
        public returnValue: any;
        public readonly srcElement: IHTMLElement;
        public stopImmediatePropagation(): void;
        public stopPropagation(): void;
        public readonly target: IEventTarget;
        public readonly timeStamp: number;
        public readonly type: string;
    }

    class DOMChildrenCollection {
        private 'MSHTML.DOMChildrenCollection_typekey': DOMChildrenCollection;
        private constructor();
        public readonly 'constructor': any;
        public ie9_item(index: number): any;
        public item(index: number): any;
        public readonly length: number;
    }

    class DOMCloseEvent {
        private 'MSHTML.DOMCloseEvent_typekey': DOMCloseEvent;
        private constructor();
        public readonly bubbles: boolean;
        public readonly cancelable: boolean;
        public cancelBubble: boolean;
        public readonly currentTarget: IEventTarget;
        public readonly defaultPrevented: boolean;
        public readonly eventPhase: number;
        public initCloseEvent(eventType: string, canBubble: boolean, cancelable: boolean, wasClean: boolean, code: number, reason: string): void;
        public initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
        public readonly isTrusted: boolean;
        public preventDefault(): void;
        public readonly srcElement: IHTMLElement;
        public stopImmediatePropagation(): void;
        public stopPropagation(): void;
        public readonly target: IEventTarget;
        public readonly timeStamp: number;
        public readonly type: string;
        public readonly wasClean: boolean;
    }

    class DOMCompositionEvent {
        private 'MSHTML.DOMCompositionEvent_typekey': DOMCompositionEvent;
        private constructor();
        public readonly bubbles: boolean;
        public readonly cancelable: boolean;
        public cancelBubble: boolean;
        public readonly currentTarget: IEventTarget;
        public readonly data: string;
        public readonly defaultPrevented: boolean;
        public readonly detail: number;
        public readonly eventPhase: number;
        public initCompositionEvent(eventType: string, canBubble: boolean, cancelable: boolean, viewArg: IHTMLWindow2, data: string, locale: string): void;
        public initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
        public initUIEvent(eventType: string, canBubble: boolean, cancelable: boolean, view: IHTMLWindow2, detail: number): void;
        public readonly isTrusted: boolean;
        public readonly locale: string;
        public preventDefault(): void;
        public readonly srcElement: IHTMLElement;
        public stopImmediatePropagation(): void;
        public stopPropagation(): void;
        public readonly target: IEventTarget;
        public readonly timeStamp: number;
        public readonly type: string;
        public readonly view: IHTMLWindow2;
    }

    class DOMCustomEvent {
        private 'MSHTML.DOMCustomEvent_typekey': DOMCustomEvent;
        private constructor();
        public readonly bubbles: boolean;
        public readonly cancelable: boolean;
        public cancelBubble: boolean;
        public readonly currentTarget: IEventTarget;
        public readonly defaultPrevented: boolean;
        public readonly detail: any;
        public readonly eventPhase: number;
        public initCustomEvent(eventType: string, canBubble: boolean, cancelable: boolean, detail: any): void;
        public initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
        public readonly isTrusted: boolean;
        public preventDefault(): void;
        public readonly srcElement: IHTMLElement;
        public stopImmediatePropagation(): void;
        public stopPropagation(): void;
        public readonly target: IEventTarget;
        public readonly timeStamp: number;
        public readonly type: string;
    }

    class DOMDocumentType {
        private 'MSHTML.DOMDocumentType_typekey': DOMDocumentType;
        private constructor();
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public readonly attributes: any;
        public readonly childNodes: any;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public compareDocumentPosition(otherNode: IHTMLDOMNode): number;
        public readonly entities: any;
        public readonly firstChild: IHTMLDOMNode;
        public hasChildNodes(): boolean;
        public ie9_appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public ie9_removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly internalSubset: any;
        public isDefaultNamespace(pvarNamespace: any): boolean;
        public isEqualNode(otherNode: IHTMLDOMNode3): boolean;
        public isSameNode(otherNode: IHTMLDOMNode3): boolean;
        public isSupported(feature: string, version: any): boolean;
        public readonly lastChild: IHTMLDOMNode;
        public readonly localName: any;
        public lookupNamespaceURI(pvarPrefix: any): any;
        public lookupPrefix(pvarNamespaceURI: any): any;
        public readonly name: string;
        public readonly namespaceURI: any;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public readonly notations: any;
        public readonly ownerDocument: any;
        public readonly parentNode: IHTMLDOMNode;
        public prefix: any;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly publicId: any;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public readonly systemId: any;
        public textContent: any;
    }

    class DOMDragEvent {
        private 'MSHTML.DOMDragEvent_typekey': DOMDragEvent;
        private constructor();
        public readonly altKey: boolean;
        public readonly bubbles: boolean;
        public readonly button: number;
        public readonly buttons: number;
        public readonly cancelable: boolean;
        public cancelBubble: boolean;
        public readonly clientX: number;
        public readonly clientY: number;
        public readonly ctrlKey: boolean;
        public readonly currentTarget: IEventTarget;
        public readonly dataTransfer: IHTMLDataTransfer;
        public readonly defaultPrevented: boolean;
        public readonly detail: number;
        public readonly eventPhase: number;
        public readonly fromElement: IHTMLElement;
        public getModifierState(keyArg: string): boolean;
        public initDragEvent(
            eventType: string, canBubble: boolean, cancelable: boolean, viewArg: IHTMLWindow2, detailArg: number, screenXArg: number, screenYArg: number,
            clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number,
            relatedTargetArg: IEventTarget, dataTransferArg: IHTMLDataTransfer): void;
        public initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
        public initMouseEvent(
            eventType: string, canBubble: boolean, cancelable: boolean, viewArg: IHTMLWindow2, detailArg: number, screenXArg: number, screenYArg: number,
            clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: IEventTarget): void;
        public initUIEvent(eventType: string, canBubble: boolean, cancelable: boolean, view: IHTMLWindow2, detail: number): void;
        public readonly isTrusted: boolean;
        public readonly layerX: number;
        public readonly layerY: number;
        public readonly metaKey: boolean;
        public readonly offsetX: number;
        public readonly offsetY: number;
        public readonly pageX: number;
        public readonly pageY: number;
        public preventDefault(): void;
        public readonly relatedTarget: IEventTarget;
        public readonly screenX: number;
        public readonly screenY: number;
        public readonly shiftKey: boolean;
        public readonly srcElement: IHTMLElement;
        public stopImmediatePropagation(): void;
        public stopPropagation(): void;
        public readonly target: IEventTarget;
        public readonly timeStamp: number;
        public readonly toElement: IHTMLElement;
        public readonly type: string;
        public readonly view: IHTMLWindow2;
        public readonly which: number;
        public readonly x: number;
        public readonly y: number;
    }

    class DOMEvent {
        private 'MSHTML.DOMEvent_typekey': DOMEvent;
        private constructor();
        public readonly bubbles: boolean;
        public readonly cancelable: boolean;
        public cancelBubble: boolean;
        public readonly currentTarget: IEventTarget;
        public readonly defaultPrevented: boolean;
        public readonly eventPhase: number;
        public initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
        public readonly isTrusted: boolean;
        public preventDefault(): void;
        public readonly srcElement: IHTMLElement;
        public stopImmediatePropagation(): void;
        public stopPropagation(): void;
        public readonly target: IEventTarget;
        public readonly timeStamp: number;
        public readonly type: string;
    }

    class DOMException {
        private 'MSHTML.DOMException_typekey': DOMException;
        private constructor();
        public code: number;
        public readonly message: string;
    }

    class DOMFocusEvent {
        private 'MSHTML.DOMFocusEvent_typekey': DOMFocusEvent;
        private constructor();
        public readonly bubbles: boolean;
        public readonly cancelable: boolean;
        public cancelBubble: boolean;
        public readonly currentTarget: IEventTarget;
        public readonly defaultPrevented: boolean;
        public readonly detail: number;
        public readonly eventPhase: number;
        public initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
        public initFocusEvent(eventType: string, canBubble: boolean, cancelable: boolean, view: IHTMLWindow2, detail: number, relatedTargetArg: IEventTarget): void;
        public initUIEvent(eventType: string, canBubble: boolean, cancelable: boolean, view: IHTMLWindow2, detail: number): void;
        public readonly isTrusted: boolean;
        public preventDefault(): void;
        public readonly relatedTarget: IEventTarget;
        public readonly srcElement: IHTMLElement;
        public stopImmediatePropagation(): void;
        public stopPropagation(): void;
        public readonly target: IEventTarget;
        public readonly timeStamp: number;
        public readonly type: string;
        public readonly view: IHTMLWindow2;
    }

    class DOMKeyboardEvent {
        private 'MSHTML.DOMKeyboardEvent_typekey': DOMKeyboardEvent;
        private constructor();
        public readonly altKey: boolean;
        public readonly bubbles: boolean;
        public readonly cancelable: boolean;
        public cancelBubble: boolean;
        public readonly charCode: number;
        public readonly ctrlKey: boolean;
        public readonly currentTarget: IEventTarget;
        public readonly defaultPrevented: boolean;
        public readonly detail: number;
        public readonly eventPhase: number;
        public getModifierState(keyArg: string): boolean;
        public readonly ie9_char: any;
        public initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
        public initKeyboardEvent(
            eventType: string, canBubble: boolean, cancelable: boolean, viewArg: IHTMLWindow2, keyArg: string, locationArg: number, modifiersListArg: string, repeat: boolean, locale: string): void;
        public initUIEvent(eventType: string, canBubble: boolean, cancelable: boolean, view: IHTMLWindow2, detail: number): void;
        public readonly isTrusted: boolean;
        public readonly key: string;
        public readonly keyCode: number;
        public readonly locale: string;
        public readonly location: number;
        public readonly metaKey: boolean;
        public preventDefault(): void;
        public readonly repeat: boolean;
        public readonly shiftKey: boolean;
        public readonly srcElement: IHTMLElement;
        public stopImmediatePropagation(): void;
        public stopPropagation(): void;
        public readonly target: IEventTarget;
        public readonly timeStamp: number;
        public readonly type: string;
        public readonly view: IHTMLWindow2;
        public readonly which: number;
    }

    class DOMMessageEvent {
        private 'MSHTML.DOMMessageEvent_typekey': DOMMessageEvent;
        private constructor();
        public readonly bubbles: boolean;
        public readonly cancelable: boolean;
        public cancelBubble: boolean;
        public readonly currentTarget: IEventTarget;
        public readonly data: string;
        public readonly defaultPrevented: boolean;
        public readonly eventPhase: number;
        public initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
        public initMessageEvent(eventType: string, canBubble: boolean, cancelable: boolean, data: string, origin: string, lastEventId: string, source: IHTMLWindow2): void;
        public readonly isTrusted: boolean;
        public readonly origin: string;
        public preventDefault(): void;
        public readonly source: IHTMLWindow2;
        public readonly srcElement: IHTMLElement;
        public stopImmediatePropagation(): void;
        public stopPropagation(): void;
        public readonly target: IEventTarget;
        public readonly timeStamp: number;
        public readonly type: string;
    }

    class DOMMouseEvent {
        private 'MSHTML.DOMMouseEvent_typekey': DOMMouseEvent;
        private constructor();
        public readonly altKey: boolean;
        public readonly bubbles: boolean;
        public readonly button: number;
        public readonly buttons: number;
        public readonly cancelable: boolean;
        public cancelBubble: boolean;
        public readonly clientX: number;
        public readonly clientY: number;
        public readonly ctrlKey: boolean;
        public readonly currentTarget: IEventTarget;
        public readonly defaultPrevented: boolean;
        public readonly detail: number;
        public readonly eventPhase: number;
        public readonly fromElement: IHTMLElement;
        public getModifierState(keyArg: string): boolean;
        public initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
        public initMouseEvent(
            eventType: string, canBubble: boolean, cancelable: boolean, viewArg: IHTMLWindow2, detailArg: number, screenXArg: number, screenYArg: number,
            clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: IEventTarget): void;
        public initUIEvent(eventType: string, canBubble: boolean, cancelable: boolean, view: IHTMLWindow2, detail: number): void;
        public readonly isTrusted: boolean;
        public readonly layerX: number;
        public readonly layerY: number;
        public readonly metaKey: boolean;
        public readonly offsetX: number;
        public readonly offsetY: number;
        public readonly pageX: number;
        public readonly pageY: number;
        public preventDefault(): void;
        public readonly relatedTarget: IEventTarget;
        public readonly screenX: number;
        public readonly screenY: number;
        public readonly shiftKey: boolean;
        public readonly srcElement: IHTMLElement;
        public stopImmediatePropagation(): void;
        public stopPropagation(): void;
        public readonly target: IEventTarget;
        public readonly timeStamp: number;
        public readonly toElement: IHTMLElement;
        public readonly type: string;
        public readonly view: IHTMLWindow2;
        public readonly which: number;
        public readonly x: number;
        public readonly y: number;
    }

    class DOMMouseWheelEvent {
        private 'MSHTML.DOMMouseWheelEvent_typekey': DOMMouseWheelEvent;
        private constructor();
        public readonly altKey: boolean;
        public readonly bubbles: boolean;
        public readonly button: number;
        public readonly buttons: number;
        public readonly cancelable: boolean;
        public cancelBubble: boolean;
        public readonly clientX: number;
        public readonly clientY: number;
        public readonly ctrlKey: boolean;
        public readonly currentTarget: IEventTarget;
        public readonly defaultPrevented: boolean;
        public readonly detail: number;
        public readonly eventPhase: number;
        public readonly fromElement: IHTMLElement;
        public getModifierState(keyArg: string): boolean;
        public initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
        public initMouseEvent(
            eventType: string, canBubble: boolean, cancelable: boolean, viewArg: IHTMLWindow2, detailArg: number, screenXArg: number, screenYArg: number,
            clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: IEventTarget): void;
        public initMouseWheelEvent(
            eventType: string, canBubble: boolean, cancelable: boolean, viewArg: IHTMLWindow2, detailArg: number, screenXArg: number, screenYArg: number,
            clientXArg: number, clientYArg: number, buttonArg: number, relatedTargetArg: IEventTarget, modifiersListArg: string, wheelDeltaArg: number): void;
        public initUIEvent(eventType: string, canBubble: boolean, cancelable: boolean, view: IHTMLWindow2, detail: number): void;
        public readonly isTrusted: boolean;
        public readonly layerX: number;
        public readonly layerY: number;
        public readonly metaKey: boolean;
        public readonly offsetX: number;
        public readonly offsetY: number;
        public readonly pageX: number;
        public readonly pageY: number;
        public preventDefault(): void;
        public readonly relatedTarget: IEventTarget;
        public readonly screenX: number;
        public readonly screenY: number;
        public readonly shiftKey: boolean;
        public readonly srcElement: IHTMLElement;
        public stopImmediatePropagation(): void;
        public stopPropagation(): void;
        public readonly target: IEventTarget;
        public readonly timeStamp: number;
        public readonly toElement: IHTMLElement;
        public readonly type: string;
        public readonly view: IHTMLWindow2;
        public readonly wheelDelta: number;
        public readonly which: number;
        public readonly x: number;
        public readonly y: number;
    }

    class DOMMSAnimationEvent {
        private 'MSHTML.DOMMSAnimationEvent_typekey': DOMMSAnimationEvent;
        private constructor();
        public readonly animationName: string;
        public readonly bubbles: boolean;
        public readonly cancelable: boolean;
        public cancelBubble: boolean;
        public readonly currentTarget: IEventTarget;
        public readonly defaultPrevented: boolean;
        public readonly elapsedTime: number;
        public readonly eventPhase: number;
        public initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
        public initMSAnimationEvent(eventType: string, canBubble: boolean, cancelable: boolean, animationName: string, elapsedTime: number): void;
        public readonly isTrusted: boolean;
        public preventDefault(): void;
        public readonly srcElement: IHTMLElement;
        public stopImmediatePropagation(): void;
        public stopPropagation(): void;
        public readonly target: IEventTarget;
        public readonly timeStamp: number;
        public readonly type: string;
    }

    class DOMMSManipulationEvent {
        private 'MSHTML.DOMMSManipulationEvent_typekey': DOMMSManipulationEvent;
        private constructor();
        public readonly bubbles: boolean;
        public readonly cancelable: boolean;
        public cancelBubble: boolean;
        public readonly currentState: number;
        public readonly currentTarget: IEventTarget;
        public readonly defaultPrevented: boolean;
        public readonly detail: number;
        public readonly eventPhase: number;
        public initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
        public initMSManipulationEvent(eventType: string, canBubble: boolean, cancelable: boolean, viewArg: IHTMLWindow2, detailArg: number, lastState: number, currentState: number): void;
        public initUIEvent(eventType: string, canBubble: boolean, cancelable: boolean, view: IHTMLWindow2, detail: number): void;
        public readonly isTrusted: boolean;
        public readonly lastState: number;
        public preventDefault(): void;
        public readonly srcElement: IHTMLElement;
        public stopImmediatePropagation(): void;
        public stopPropagation(): void;
        public readonly target: IEventTarget;
        public readonly timeStamp: number;
        public readonly type: string;
        public readonly view: IHTMLWindow2;
    }

    class DOMMSTransitionEvent {
        private 'MSHTML.DOMMSTransitionEvent_typekey': DOMMSTransitionEvent;
        private constructor();
        public readonly bubbles: boolean;
        public readonly cancelable: boolean;
        public cancelBubble: boolean;
        public readonly currentTarget: IEventTarget;
        public readonly defaultPrevented: boolean;
        public readonly elapsedTime: number;
        public readonly eventPhase: number;
        public initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
        public initMSTransitionEvent(eventType: string, canBubble: boolean, cancelable: boolean, propertyName: string, elapsedTime: number): void;
        public readonly isTrusted: boolean;
        public preventDefault(): void;
        public readonly propertyName: string;
        public readonly srcElement: IHTMLElement;
        public stopImmediatePropagation(): void;
        public stopPropagation(): void;
        public readonly target: IEventTarget;
        public readonly timeStamp: number;
        public readonly type: string;
    }

    class DOMMutationEvent {
        private 'MSHTML.DOMMutationEvent_typekey': DOMMutationEvent;
        private constructor();
        public readonly attrChange: number;
        public readonly attrName: string;
        public readonly bubbles: boolean;
        public readonly cancelable: boolean;
        public cancelBubble: boolean;
        public readonly currentTarget: IEventTarget;
        public readonly defaultPrevented: boolean;
        public readonly eventPhase: number;
        public initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
        public initMutationEvent(
            eventType: string, canBubble: boolean, cancelable: boolean, relatedNodeArg: any, prevValueArg: string, newValueArg: string, attrNameArg: string, attrChangeArg: number): void;
        public readonly isTrusted: boolean;
        public readonly newValue: string;
        public preventDefault(): void;
        public readonly prevValue: string;
        public readonly relatedNode: any;
        public readonly srcElement: IHTMLElement;
        public stopImmediatePropagation(): void;
        public stopPropagation(): void;
        public readonly target: IEventTarget;
        public readonly timeStamp: number;
        public readonly type: string;
    }

    class DOMParser {
        private 'MSHTML.DOMParser_typekey': DOMParser;
        private constructor();
        public parseFromString(xmlSource: string, mimeType: string): IHTMLDocument2;
    }

    class DOMParserFactory {
        private 'MSHTML.DOMParserFactory_typekey': DOMParserFactory;
        private constructor();
        public create(): IDOMParser;
    }

    class DOMProcessingInstruction {
        private 'MSHTML.DOMProcessingInstruction_typekey': DOMProcessingInstruction;
        private constructor();
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public readonly attributes: any;
        public readonly childNodes: any;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public compareDocumentPosition(otherNode: IHTMLDOMNode): number;
        public data: string;
        public readonly firstChild: IHTMLDOMNode;
        public hasChildNodes(): boolean;
        public ie9_appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public ie9_removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public isDefaultNamespace(pvarNamespace: any): boolean;
        public isEqualNode(otherNode: IHTMLDOMNode3): boolean;
        public isSameNode(otherNode: IHTMLDOMNode3): boolean;
        public isSupported(feature: string, version: any): boolean;
        public readonly lastChild: IHTMLDOMNode;
        public readonly localName: any;
        public lookupNamespaceURI(pvarPrefix: any): any;
        public lookupPrefix(pvarNamespaceURI: any): any;
        public readonly namespaceURI: any;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public readonly ownerDocument: any;
        public readonly parentNode: IHTMLDOMNode;
        public prefix: any;
        public readonly previousSibling: IHTMLDOMNode;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public readonly target: string;
        public textContent: any;
    }

    class DOMProgressEvent {
        private 'MSHTML.DOMProgressEvent_typekey': DOMProgressEvent;
        private constructor();
        public readonly bubbles: boolean;
        public readonly cancelable: boolean;
        public cancelBubble: boolean;
        public readonly currentTarget: IEventTarget;
        public readonly defaultPrevented: boolean;
        public readonly eventPhase: number;
        public initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
        public initProgressEvent(eventType: string, canBubble: boolean, cancelable: boolean, lengthComputableArg: boolean, loadedArg: number, totalArg: number): void;
        public readonly isTrusted: boolean;
        public readonly lengthComputable: boolean;
        public readonly loaded: number;
        public preventDefault(): void;
        public readonly srcElement: IHTMLElement;
        public stopImmediatePropagation(): void;
        public stopPropagation(): void;
        public readonly target: IEventTarget;
        public readonly timeStamp: number;
        public readonly total: number;
        public readonly type: string;
    }

    class DOMSiteModeEvent {
        private 'MSHTML.DOMSiteModeEvent_typekey': DOMSiteModeEvent;
        private constructor();
        public readonly actionURL: string;
        public readonly bubbles: boolean;
        public readonly buttonID: number;
        public readonly cancelable: boolean;
        public cancelBubble: boolean;
        public readonly currentTarget: IEventTarget;
        public readonly defaultPrevented: boolean;
        public readonly eventPhase: number;
        public initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
        public readonly isTrusted: boolean;
        public preventDefault(): void;
        public readonly srcElement: IHTMLElement;
        public stopImmediatePropagation(): void;
        public stopPropagation(): void;
        public readonly target: IEventTarget;
        public readonly timeStamp: number;
        public readonly type: string;
    }

    class DOMStorageEvent {
        private 'MSHTML.DOMStorageEvent_typekey': DOMStorageEvent;
        private constructor();
        public readonly bubbles: boolean;
        public readonly cancelable: boolean;
        public cancelBubble: boolean;
        public readonly currentTarget: IEventTarget;
        public readonly defaultPrevented: boolean;
        public readonly eventPhase: number;
        public initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
        public initStorageEvent(
            eventType: string, canBubble: boolean, cancelable: boolean, keyArg: string, oldValueArg: string, newValueArg: string, urlArg: string, storageAreaArg: IHTMLStorage): void;
        public readonly isTrusted: boolean;
        public readonly key: string;
        public readonly newValue: string;
        public readonly oldValue: string;
        public preventDefault(): void;
        public readonly srcElement: IHTMLElement;
        public stopImmediatePropagation(): void;
        public stopPropagation(): void;
        public readonly storageArea: IHTMLStorage;
        public readonly target: IEventTarget;
        public readonly timeStamp: number;
        public readonly type: string;
        public readonly url: string;
    }

    class DOMTextEvent {
        private 'MSHTML.DOMTextEvent_typekey': DOMTextEvent;
        private constructor();
        public readonly bubbles: boolean;
        public readonly cancelable: boolean;
        public cancelBubble: boolean;
        public readonly currentTarget: IEventTarget;
        public readonly data: string;
        public readonly defaultPrevented: boolean;
        public readonly detail: number;
        public readonly eventPhase: number;
        public initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
        public initTextEvent(eventType: string, canBubble: boolean, cancelable: boolean, viewArg: IHTMLWindow2, dataArg: string, inputMethod: number, locale: string): void;
        public initUIEvent(eventType: string, canBubble: boolean, cancelable: boolean, view: IHTMLWindow2, detail: number): void;
        public readonly inputMethod: number;
        public readonly isTrusted: boolean;
        public readonly locale: string;
        public preventDefault(): void;
        public readonly srcElement: IHTMLElement;
        public stopImmediatePropagation(): void;
        public stopPropagation(): void;
        public readonly target: IEventTarget;
        public readonly timeStamp: number;
        public readonly type: string;
        public readonly view: IHTMLWindow2;
    }

    class DOMUIEvent {
        private 'MSHTML.DOMUIEvent_typekey': DOMUIEvent;
        private constructor();
        public readonly bubbles: boolean;
        public readonly cancelable: boolean;
        public cancelBubble: boolean;
        public readonly currentTarget: IEventTarget;
        public readonly defaultPrevented: boolean;
        public readonly detail: number;
        public readonly eventPhase: number;
        public initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
        public initUIEvent(eventType: string, canBubble: boolean, cancelable: boolean, view: IHTMLWindow2, detail: number): void;
        public readonly isTrusted: boolean;
        public preventDefault(): void;
        public readonly srcElement: IHTMLElement;
        public stopImmediatePropagation(): void;
        public stopPropagation(): void;
        public readonly target: IEventTarget;
        public readonly timeStamp: number;
        public readonly type: string;
        public readonly view: IHTMLWindow2;
    }

    class DOMWheelEvent {
        private 'MSHTML.DOMWheelEvent_typekey': DOMWheelEvent;
        private constructor();
        public readonly altKey: boolean;
        public readonly bubbles: boolean;
        public readonly button: number;
        public readonly buttons: number;
        public readonly cancelable: boolean;
        public cancelBubble: boolean;
        public readonly clientX: number;
        public readonly clientY: number;
        public readonly ctrlKey: boolean;
        public readonly currentTarget: IEventTarget;
        public readonly defaultPrevented: boolean;
        public readonly deltaMode: number;
        public readonly deltaX: number;
        public readonly deltaY: number;
        public readonly deltaZ: number;
        public readonly detail: number;
        public readonly eventPhase: number;
        public readonly fromElement: IHTMLElement;
        public getModifierState(keyArg: string): boolean;
        public initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
        public initMouseEvent(
            eventType: string, canBubble: boolean, cancelable: boolean, viewArg: IHTMLWindow2, detailArg: number, screenXArg: number, screenYArg: number,
            clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: IEventTarget): void;
        public initUIEvent(eventType: string, canBubble: boolean, cancelable: boolean, view: IHTMLWindow2, detail: number): void;
        public initWheelEvent(
            eventType: string, canBubble: boolean, cancelable: boolean, viewArg: IHTMLWindow2, detailArg: number, screenXArg: number, screenYArg: number,
            clientXArg: number, clientYArg: number, buttonArg: number, relatedTargetArg: IEventTarget, modifiersListArg: string, deltaX: number, deltaY: number,
            deltaZ: number, deltaMode: number): void;
        public readonly isTrusted: boolean;
        public readonly layerX: number;
        public readonly layerY: number;
        public readonly metaKey: boolean;
        public readonly offsetX: number;
        public readonly offsetY: number;
        public readonly pageX: number;
        public readonly pageY: number;
        public preventDefault(): void;
        public readonly relatedTarget: IEventTarget;
        public readonly screenX: number;
        public readonly screenY: number;
        public readonly shiftKey: boolean;
        public readonly srcElement: IHTMLElement;
        public stopImmediatePropagation(): void;
        public stopPropagation(): void;
        public readonly target: IEventTarget;
        public readonly timeStamp: number;
        public readonly toElement: IHTMLElement;
        public readonly type: string;
        public readonly view: IHTMLWindow2;
        public readonly which: number;
        public readonly x: number;
        public readonly y: number;
    }

    class EventException {
        private 'MSHTML.EventException_typekey': EventException;
        private constructor();
    }

    class FontNames {
        private 'MSHTML.FontNames_typekey': FontNames;
        private constructor();
        public readonly Count: number;
        public item(pvarIndex: any): string;
    }

    class FramesCollection {
        private 'MSHTML.FramesCollection_typekey': FramesCollection;
        private constructor();
        public item(pvarIndex: any): any;
        public readonly length: number;
    }

    class HTCAttachBehavior {
        private 'MSHTML.HTCAttachBehavior_typekey': HTCAttachBehavior;
        private constructor();
        public detachEvent(): void;
        public FireEvent(evt: any): void;
    }

    class HTCDefaultDispatch {
        private 'MSHTML.HTCDefaultDispatch_typekey': HTCDefaultDispatch;
        private constructor();
        public CreateEventObject(): IHTMLEventObj;
        public readonly defaults: any;
        public readonly document: any;
        public readonly element: IHTMLElement;
    }

    class HTCDescBehavior {
        private 'MSHTML.HTCDescBehavior_typekey': HTCDescBehavior;
        private constructor();
        public readonly name: string;
        public readonly urn: string;
    }

    class HTCEventBehavior {
        private 'MSHTML.HTCEventBehavior_typekey': HTCEventBehavior;
        private constructor();
        public fire(pVar: IHTMLEventObj): void;
    }

    class HTCMethodBehavior {
        private 'MSHTML.HTCMethodBehavior_typekey': HTCMethodBehavior;
        private constructor();
    }

    class HTCPropertyBehavior {
        private 'MSHTML.HTCPropertyBehavior_typekey': HTCPropertyBehavior;
        private constructor();
        public fireChange(): void;
        public value: any;
    }

    class HTMLAnchorElement {
        private 'MSHTML.HTMLAnchorElement_typekey': HTMLAnchorElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public charset: string;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public compareDocumentPosition(otherNode: IHTMLDOMNode): number;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public coords: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public dataFld: string;
        public dataFormatAs: string;
        public dataSrc: string;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hash: string;
        public hideFocus: boolean;
        public host: string;
        public hostname: string;
        public href: string;
        public hreflang: string;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_coords: string;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_href: string;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_shape: string;
        public ie9_appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public ie9_insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public isDefaultNamespace(pvarNamespace: any): boolean;
        public readonly isDisabled: boolean;
        public isEqualNode(otherNode: IHTMLDOMNode3): boolean;
        public readonly isMultiLine: boolean;
        public isSameNode(otherNode: IHTMLDOMNode3): boolean;
        public isSupported(feature: string, version: any): boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public readonly localName: any;
        public lookupNamespaceURI(pvarPrefix: any): any;
        public lookupPrefix(pvarNamespaceURI: any): any;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public Methods: string;
        public readonly mimeType: string;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public name: string;
        public readonly nameProp: string;
        public readonly namespaceURI: any;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public pathname: string;
        public port: string;
        public prefix: any;
        public readonly previousSibling: IHTMLDOMNode;
        public protocol: string;
        public readonly protocolLong: string;
        public querySelector(v: string): IHTMLElement;
        public querySelectorAll(v: string): IHTMLDOMChildrenCollection;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public rel: string;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public rev: string;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public search: string;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public shape: string;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public target: string;
        public textContent: any;
        public title: string;
        public toString(): string;
        public type: string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public urn: string;
        public xmsAcceleratorKey: string;
    }

    class HTMLAppBehavior {
        private 'MSHTML.HTMLAppBehavior_typekey': HTMLAppBehavior;
        private constructor();
        public applicationName: string;
        public border: string;
        public borderStyle: string;
        public caption: string;
        public readonly commandLine: string;
        public contextMenu: string;
        public icon: string;
        public innerBorder: string;
        public maximizeButton: string;
        public minimizeButton: string;
        public scroll: string;
        public scrollFlat: string;
        public selection: string;
        public showInTaskBar: string;
        public singleInstance: string;
        public sysMenu: string;
        public version: string;
        public windowState: string;
    }

    class HTMLAreaElement {
        private 'MSHTML.HTMLAreaElement_typekey': HTMLAreaElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public alt: string;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public coords: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hash: string;
        public hideFocus: boolean;
        public host: string;
        public hostname: string;
        public href: string;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_coords: string;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_href: string;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_shape: string;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public noHref: boolean;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public pathname: string;
        public port: string;
        public readonly previousSibling: IHTMLDOMNode;
        public protocol: string;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public search: string;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public shape: string;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public target: string;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLAreasCollection {
        private 'MSHTML.HTMLAreasCollection_typekey': HTMLAreasCollection;
        private constructor();
        public add(element: IHTMLElement, before?: any): void;
        public readonly 'constructor': any;
        public ie8_item(index: number): IHTMLElement2;
        public readonly ie8_length: number;
        public ie8_namedItem(name: string): IHTMLElement2;
        public item(name?: any, index?: any): any;
        public length: number;
        public namedItem(name: string): any;

        /** @param number [index=-1] */
        public remove(index?: number): void;
        public tags(tagName: any): any;
        public urns(urn: any): any;
    }

    class HTMLAttributeCollection {
        private 'MSHTML.HTMLAttributeCollection_typekey': HTMLAttributeCollection;
        private constructor();
        public readonly 'constructor': any;
        public getNamedItem(bstrName: string): IHTMLDOMAttribute;
        public getNamedItemNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public ie8_getNamedItem(bstrName: string): IHTMLDOMAttribute;
        public ie8_item(index: number): IHTMLDOMAttribute;
        public readonly ie8_length: number;
        public ie8_removeNamedItem(bstrName: string): IHTMLDOMAttribute;
        public ie8_setNamedItem(pNodeIn: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public ie9_getNamedItem(bstrName: string): IHTMLDOMAttribute2;
        public ie9_item(index: number): IHTMLDOMAttribute2;
        public readonly ie9_length: number;
        public ie9_removeNamedItem(bstrName: string): IHTMLDOMAttribute2;
        public ie9_setNamedItem(pNodeIn: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public item(name?: any): any;
        public readonly length: number;
        public removeNamedItem(bstrName: string): IHTMLDOMAttribute;
        public removeNamedItemNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public setNamedItem(ppNode: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setNamedItemNS(pNodeIn: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
    }

    class HTMLAudioElement {
        private 'MSHTML.HTMLAudioElement_typekey': HTMLAudioElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public autobuffer: boolean;
        public autoplay: boolean;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly buffered: IHTMLTimeRanges;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public canPlayType(type: string): string;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public compareDocumentPosition(otherNode: IHTMLDOMNode): number;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public controls: boolean;
        public createControlRange(): any;
        public readonly currentSrc: string;
        public readonly currentStyle: IHTMLCurrentStyle;
        public currentTime: number;
        public currentTimeDouble: number;
        public dataFld: string;
        public dataFormatAs: string;
        public dataSrc: string;
        public defaultPlaybackRate: number;
        public defaultPlaybackRateDouble: number;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly duration: number;
        public readonly durationDouble: number;
        public readonly ended: boolean;
        public readonly error: IHTMLMediaError;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public ie9_insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public readonly initialTime: number;
        public readonly initialTimeDouble: number;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public isDefaultNamespace(pvarNamespace: any): boolean;
        public readonly isDisabled: boolean;
        public isEqualNode(otherNode: IHTMLDOMNode3): boolean;
        public readonly isMultiLine: boolean;
        public isSameNode(otherNode: IHTMLDOMNode3): boolean;
        public isSupported(feature: string, version: any): boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public load(): void;
        public readonly localName: any;
        public lookupNamespaceURI(pvarPrefix: any): any;
        public lookupPrefix(pvarNamespaceURI: any): any;
        public loop: boolean;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msPlayToDisabled: boolean;
        public msPlayToPrimary: boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public muted: boolean;
        public readonly namespaceURI: any;
        public readonly networkState: number;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public pause(): void;
        public readonly paused: boolean;
        public play(): void;
        public playbackRate: number;
        public playbackRateDouble: number;
        public readonly played: IHTMLTimeRanges;
        public prefix: any;
        public preload: string;
        public readonly previousSibling: IHTMLDOMNode;
        public querySelector(v: string): IHTMLElement;
        public querySelectorAll(v: string): IHTMLDOMChildrenCollection;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public readonly seekable: IHTMLTimeRanges;
        public readonly seeking: boolean;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public src: string;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public textContent: any;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public volume: number;
        public volumeDouble: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLAudioElementFactory {
        private 'MSHTML.HTMLAudioElementFactory_typekey': HTMLAudioElementFactory;
        private constructor();
        public create(src?: any): IHTMLAudioElement;
    }

    class HTMLBaseElement {
        private 'MSHTML.HTMLBaseElement_typekey': HTMLBaseElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public href: string;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_href: string;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public target: string;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLBaseFontElement {
        private 'MSHTML.HTMLBaseFontElement_typekey': HTMLBaseFontElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public color: any;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public face: string;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public size: number;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLBGsound {
        private 'MSHTML.HTMLBGsound_typekey': HTMLBGsound;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public balance: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public loop: any;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public src: string;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public volume: any;
        public xmsAcceleratorKey: string;
    }

    class HTMLBlockElement {
        private 'MSHTML.HTMLBlockElement_typekey': HTMLBlockElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public cite: string;
        public className: string;
        public clear: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_cite: string;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public width: string;
        public xmsAcceleratorKey: string;
    }

    class HTMLBody {
        private 'MSHTML.HTMLBody_typekey': HTMLBody;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public aLink: any;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public background: string;
        public readonly behaviorUrns: any;
        public bgColor: any;
        public bgProperties: string;
        public blur(): void;
        public bottomMargin: any;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public createTextRange(): IHTMLTxtRange;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_background: string;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public leftMargin: any;
        public link: any;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public noWrap: boolean;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterprint: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeprint: any;
        public onbeforeunload: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhashchange: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmessage: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onoffline: any;
        public ononline: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onpopstate: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onstorage: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onunload: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public rightMargin: any;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public scroll: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public text: any;
        public title: string;
        public topMargin: any;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public vLink: any;
        public xmsAcceleratorKey: string;
    }

    class HTMLBRElement {
        private 'MSHTML.HTMLBRElement_typekey': HTMLBRElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clear: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLButtonElement {
        private 'MSHTML.HTMLButtonElement_typekey': HTMLButtonElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public compareDocumentPosition(otherNode: IHTMLDOMNode): number;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public createTextRange(): IHTMLTxtRange;
        public readonly currentStyle: IHTMLCurrentStyle;
        public dataFld: string;
        public dataFormatAs: string;
        public dataSrc: string;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public readonly form: IHTMLFormElement;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public ie9_insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public ie9_type: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public isDefaultNamespace(pvarNamespace: any): boolean;
        public readonly isDisabled: boolean;
        public isEqualNode(otherNode: IHTMLDOMNode3): boolean;
        public readonly isMultiLine: boolean;
        public isSameNode(otherNode: IHTMLDOMNode3): boolean;
        public isSupported(feature: string, version: any): boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public readonly localName: any;
        public lookupNamespaceURI(pvarPrefix: any): any;
        public lookupPrefix(pvarNamespaceURI: any): any;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public name: string;
        public readonly namespaceURI: any;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public prefix: any;
        public readonly previousSibling: IHTMLDOMNode;
        public querySelector(v: string): IHTMLElement;
        public querySelectorAll(v: string): IHTMLDOMChildrenCollection;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public status: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public textContent: any;
        public title: string;
        public toString(): string;
        public readonly type: string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public value: string;
        public xmsAcceleratorKey: string;
    }

    class HTMLCanvasElement {
        private 'MSHTML.HTMLCanvasElement_typekey': HTMLCanvasElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getContext(contextId: string): ICanvasRenderingContext2D;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public height: number;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public title: string;
        public toDataURL(type: string, jpegquality: any): string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public width: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLCommentElement {
        private 'MSHTML.HTMLCommentElement_typekey': HTMLCommentElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public appendData(bstrstring: string): void;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public atomic: number;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public data: string;
        public deleteData(offset: number, Count: number): void;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_deleteData(offset: number, Count: number): void;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public ie9_insertData(offset: number, bstrstring: string): void;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_replaceData(offset: number, Count: number, bstrstring: string): void;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_substringData(offset: number, Count: number): string;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public insertData(offset: number, bstrstring: string): void;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public readonly length: number;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceData(offset: number, Count: number, bstrstring: string): void;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public substringData(offset: number, Count: number): string;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public text: string;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLCSSImportRule {
        private 'MSHTML.HTMLCSSImportRule_typekey': HTMLCSSImportRule;
        private constructor();
        public cssText: string;
        public readonly href: string;
        public media: any;
        public readonly parentRule: IHTMLCSSRule;
        public readonly parentStyleSheet: IHTMLStyleSheet;
        public readonly styleSheet: IHTMLStyleSheet;
        public readonly type: number;
    }

    class HTMLCSSMediaList {
        private 'MSHTML.HTMLCSSMediaList_typekey': HTMLCSSMediaList;
        private constructor();
        public appendMedium(bstrMedium: string): void;
        public deleteMedium(bstrMedium: string): void;
        public item(index: number): string;
        public readonly length: number;
        public mediaText: string;
    }

    class HTMLCSSMediaRule {
        private 'MSHTML.HTMLCSSMediaRule_typekey': HTMLCSSMediaRule;
        private constructor();
        public readonly cssRules: IHTMLStyleSheetRulesCollection;
        public cssText: string;

        /** @param number [lIndex=-1] */
        public deleteRule(lIndex?: number): void;

        /** @param number [lIndex=-1] */
        public insertRule(bstrRule: string, lIndex?: number): number;
        public media: any;
        public readonly parentRule: IHTMLCSSRule;
        public readonly parentStyleSheet: IHTMLStyleSheet;
        public readonly type: number;
    }

    class HTMLCSSNamespaceRule {
        private 'MSHTML.HTMLCSSNamespaceRule_typekey': HTMLCSSNamespaceRule;
        private constructor();
        public cssText: string;
        public readonly namespaceURI: string;
        public readonly parentRule: IHTMLCSSRule;
        public readonly parentStyleSheet: IHTMLStyleSheet;
        public readonly prefix: string;
        public readonly type: number;
    }

    class HTMLCSSRule {
        private 'MSHTML.HTMLCSSRule_typekey': HTMLCSSRule;
        private constructor();
        public cssText: string;
        public readonly parentRule: IHTMLCSSRule;
        public readonly parentStyleSheet: IHTMLStyleSheet;
        public readonly type: number;
    }

    class HTMLCSSStyleDeclaration {
        private 'MSHTML.HTMLCSSStyleDeclaration_typekey': HTMLCSSStyleDeclaration;
        private constructor();
        public accelerator: string;
        public alignContent: string;
        public alignItems: string;
        public alignmentBaseline: string;
        public alignSelf: string;
        public animation: string;
        public animationDelay: string;
        public animationDirection: string;
        public animationDuration: string;
        public animationFillMode: string;
        public animationIterationCount: string;
        public animationName: string;
        public animationPlayState: string;
        public animationTimingFunction: string;
        public backfaceVisibility: string;
        public background: string;
        public backgroundAttachment: string;
        public backgroundClip: string;
        public backgroundColor: any;
        public backgroundImage: string;
        public backgroundOrigin: string;
        public backgroundPosition: string;
        public backgroundPositionX: any;
        public backgroundPositionY: any;
        public backgroundRepeat: string;
        public backgroundSize: string;
        public baselineShift: any;
        public behavior: string;
        public border: string;
        public borderBottom: string;
        public borderBottomColor: any;
        public borderBottomLeftRadius: string;
        public borderBottomRightRadius: string;
        public borderBottomStyle: string;
        public borderBottomWidth: any;
        public borderCollapse: string;
        public borderColor: string;
        public borderImage: string;
        public borderImageOutset: string;
        public borderImageRepeat: string;
        public borderImageSlice: string;
        public borderImageSource: string;
        public borderImageWidth: string;
        public borderLeft: string;
        public borderLeftColor: any;
        public borderLeftStyle: string;
        public borderLeftWidth: any;
        public borderRadius: string;
        public borderRight: string;
        public borderRightColor: any;
        public borderRightStyle: string;
        public borderRightWidth: any;
        public borderSpacing: string;
        public borderStyle: string;
        public borderTop: string;
        public borderTopColor: any;
        public borderTopLeftRadius: string;
        public borderTopRightRadius: string;
        public borderTopStyle: string;
        public borderTopWidth: any;
        public borderWidth: string;
        public bottom: any;
        public boxShadow: string;
        public boxSizing: string;
        public breakAfter: string;
        public breakBefore: string;
        public breakInside: string;
        public captionSide: string;
        public clear: string;
        public clip: string;
        public readonly clipBottom: any;
        public clipLeft: any;
        public clipPath: string;
        public clipRight: any;
        public clipRule: string;
        public clipTop: any;
        public color: any;
        public colorInterpolationFilters: string;
        public columnCount: any;
        public columnFill: string;
        public columnGap: any;
        public columnRule: string;
        public columnRuleColor: any;
        public columnRuleStyle: string;
        public columnRuleWidth: any;
        public columns: string;
        public columnSpan: string;
        public columnWidth: any;
        public content: string;
        public counterIncrement: string;
        public counterReset: string;
        public cssFloat: string;
        public cssText: string;
        public cursor: string;
        public direction: string;
        public display: string;
        public dominantBaseline: string;
        public emptyCells: string;
        public enableBackground: string;
        public fill: string;
        public fillOpacity: any;
        public fillRule: string;
        public filter: string;
        public flex: string;
        public flexBasis: any;
        public flexDirection: string;
        public flexFlow: string;
        public flexGrow: any;
        public flexShrink: any;
        public flexWrap: string;
        public floodColor: any;
        public floodOpacity: any;
        public font: string;
        public fontFamily: string;
        public fontFeatureSettings: string;
        public fontSize: any;
        public fontSizeAdjust: any;
        public fontStretch: string;
        public fontStyle: string;
        public fontVariant: string;
        public fontWeight: string;
        public getPropertyPriority(bstrPropertyName: string): string;
        public getPropertyValue(bstrPropertyName: string): string;
        public glyphOrientationHorizontal: any;
        public glyphOrientationVertical: any;
        public height: any;
        public imeMode: string;
        public item(index: number): string;
        public justifyContent: string;
        public kerning: any;
        public layoutFlow: string;
        public layoutGrid: string;
        public layoutGridChar: any;
        public layoutGridLine: any;
        public layoutGridMode: string;
        public layoutGridType: string;
        public left: any;
        public readonly length: number;
        public letterSpacing: any;
        public lightingColor: any;
        public lineBreak: string;
        public lineHeight: any;
        public listStyle: string;
        public listStyleImage: string;
        public listStylePosition: string;
        public listStyleType: string;
        public margin: string;
        public marginBottom: any;
        public marginLeft: any;
        public marginRight: any;
        public marginTop: any;
        public marker: string;
        public markerEnd: string;
        public markerMid: string;
        public markerStart: string;
        public mask: string;
        public maxHeight: any;
        public maxWidth: any;
        public minHeight: any;
        public minWidth: any;
        public msAnimation: string;
        public msAnimationDelay: string;
        public msAnimationDirection: string;
        public msAnimationDuration: string;
        public msAnimationFillMode: string;
        public msAnimationIterationCount: string;
        public msAnimationName: string;
        public msAnimationPlayState: string;
        public msAnimationTimingFunction: string;
        public msBackfaceVisibility: string;
        public msBlockProgression: string;
        public msContentZoomChaining: string;
        public msContentZooming: string;
        public msContentZoomLimit: string;
        public msContentZoomLimitMax: any;
        public msContentZoomLimitMin: any;
        public msContentZoomSnap: string;
        public msContentZoomSnapPoints: string;
        public msContentZoomSnapType: string;
        public msFlex: string;
        public msFlexAlign: string;
        public msFlexDirection: string;
        public msFlexFlow: string;
        public msFlexItemAlign: string;
        public msFlexLinePack: string;
        public msFlexNegative: any;
        public msFlexOrder: any;
        public msFlexPack: string;
        public msFlexPositive: any;
        public msFlexPreferredSize: any;
        public msFlexWrap: string;
        public msFlowFrom: string;
        public msFlowInto: string;
        public msFontFeatureSettings: string;
        public msGetPropertyEnabled(name: string): boolean;
        public msGridColumn: any;
        public msGridColumnAlign: string;
        public msGridColumns: string;
        public msGridColumnSpan: any;
        public msGridRow: any;
        public msGridRowAlign: string;
        public msGridRows: string;
        public msGridRowSpan: any;
        public msHighContrastAdjust: string;
        public msHyphenateLimitChars: string;
        public msHyphenateLimitLines: any;
        public msHyphenateLimitZone: any;
        public msHyphens: string;
        public msImeAlign: string;
        public msInterpolationMode: string;
        public msOverflowStyle: string;
        public msPerspective: any;
        public msPerspectiveOrigin: string;
        public msPutPropertyEnabled(name: string, b: boolean): void;
        public msScrollChaining: string;
        public msScrollLimit: string;
        public msScrollLimitXMax: any;
        public msScrollLimitXMin: any;
        public msScrollLimitYMax: any;
        public msScrollLimitYMin: any;
        public msScrollRails: string;
        public msScrollSnapPointsX: string;
        public msScrollSnapPointsY: string;
        public msScrollSnapType: string;
        public msScrollSnapX: string;
        public msScrollSnapY: string;
        public msScrollTranslation: string;
        public msTextCombineHorizontal: string;
        public msTextSizeAdjust: any;
        public msTouchAction: string;
        public msTouchSelect: string;
        public msTransform: string;
        public msTransformOrigin: string;
        public msTransformStyle: string;
        public msTransition: string;
        public msTransitionDelay: string;
        public msTransitionDuration: string;
        public msTransitionProperty: string;
        public msTransitionTimingFunction: string;
        public msUserSelect: string;
        public msWrapFlow: string;
        public msWrapMargin: any;
        public msWrapThrough: string;
        public opacity: any;
        public orphans: any;
        public outline: string;
        public outlineColor: any;
        public outlineStyle: string;
        public outlineWidth: any;
        public overflow: string;
        public overflowX: string;
        public overflowY: string;
        public padding: string;
        public paddingBottom: any;
        public paddingLeft: any;
        public paddingRight: any;
        public paddingTop: any;
        public pageBreakAfter: string;
        public pageBreakBefore: string;
        public pageBreakInside: string;
        public readonly parentRule: any;
        public perspective: any;
        public perspectiveOrigin: string;
        public pointerEvents: string;
        public position: string;
        public quotes: string;
        public removeProperty(bstrPropertyName: string): string;
        public right: any;
        public rubyAlign: string;
        public rubyOverhang: string;
        public rubyPosition: string;
        public scrollbar3dLightColor: any;
        public scrollbarArrowColor: any;
        public scrollbarBaseColor: any;
        public scrollbarDarkShadowColor: any;
        public scrollbarFaceColor: any;
        public scrollbarHighlightColor: any;
        public scrollbarShadowColor: any;
        public scrollbarTrackColor: any;

        /** @param any [pvarPropertyPriority=''] */
        public setProperty(bstrPropertyName: string, pvarPropertyValue: any, pvarPropertyPriority?: any): void;
        public stopColor: any;
        public stopOpacity: any;
        public stroke: string;
        public strokeDasharray: string;
        public strokeDashoffset: any;
        public strokeLinecap: string;
        public strokeLinejoin: string;
        public strokeMiterlimit: any;
        public strokeOpacity: any;
        public strokeWidth: any;
        public styleFloat: string;
        public tableLayout: string;
        public textAlign: string;
        public textAlignLast: string;
        public textAnchor: string;
        public textAutospace: string;
        public textDecoration: string;
        public textIndent: any;
        public textJustify: string;
        public textJustifyTrim: string;
        public textKashida: any;
        public textKashidaSpace: any;
        public textOverflow: string;
        public textShadow: string;
        public textTransform: string;
        public textUnderlinePosition: string;
        public top: any;
        public touchAction: string;
        public transform: string;
        public transformOrigin: string;
        public transformStyle: string;
        public transition: string;
        public transitionDelay: string;
        public transitionDuration: string;
        public transitionProperty: string;
        public transitionTimingFunction: string;
        public unicodeBidi: string;
        public verticalAlign: any;
        public visibility: string;
        public webkitAnimation: string;
        public webkitAnimationDelay: string;
        public webkitAnimationDirection: string;
        public webkitAnimationDuration: string;
        public webkitAnimationFillMode: string;
        public webkitAnimationIterationCount: string;
        public webkitAnimationName: string;
        public webkitAnimationPlayState: string;
        public webkitAnimationTimingFunction: string;
        public webkitAppearance: string;
        public webkitBackfaceVisibility: string;
        public webkitBackground: string;
        public webkitBackgroundAttachment: string;
        public webkitBackgroundClip: string;
        public webkitBackgroundColor: any;
        public webkitBackgroundImage: string;
        public webkitBackgroundOrigin: string;
        public webkitBackgroundPosition: string;
        public webkitBackgroundPositionX: any;
        public webkitBackgroundPositionY: any;
        public webkitBackgroundRepeat: string;
        public webkitBackgroundSize: string;
        public webkitBorderImage: string;
        public webkitBorderImageOutset: string;
        public webkitBorderImageRepeat: string;
        public webkitBorderImageSlice: string;
        public webkitBorderImageSource: string;
        public webkitBorderImageWidth: string;
        public webkitBoxAlign: string;
        public webkitBoxDirection: string;
        public webkitBoxFlex: any;
        public webkitBoxOrdinalGroup: any;
        public webkitBoxOrient: string;
        public webkitBoxPack: string;
        public webkitBoxSizing: string;
        public webkitTextSizeAdjust: any;
        public webkitTransform: string;
        public webkitTransformOrigin: string;
        public webkitTransition: string;
        public webkitTransitionDelay: string;
        public webkitTransitionDuration: string;
        public webkitTransitionProperty: string;
        public webkitTransitionTimingFunction: string;
        public webkitUserSelect: string;
        public whiteSpace: string;
        public widows: any;
        public width: any;
        public wordBreak: string;
        public wordSpacing: any;
        public wordWrap: string;
        public writingMode: string;
        public zIndex: any;
        public zoom: any;
    }

    class HTMLCurrentStyle {
        private 'MSHTML.HTMLCurrentStyle_typekey': HTMLCurrentStyle;
        private constructor();
        public readonly accelerator: string;
        public alignContent: string;
        public alignItems: string;
        public alignSelf: string;
        public animation: string;
        public animationDelay: string;
        public animationDirection: string;
        public animationDuration: string;
        public animationFillMode: string;
        public animationIterationCount: string;
        public animationName: string;
        public animationPlayState: string;
        public animationTimingFunction: string;
        public backfaceVisibility: string;
        public readonly backgroundAttachment: string;
        public readonly backgroundColor: any;
        public readonly backgroundImage: string;
        public readonly backgroundPositionX: any;
        public readonly backgroundPositionY: any;
        public readonly backgroundRepeat: string;
        public readonly behavior: string;
        public readonly blockDirection: string;
        public readonly borderBottomColor: any;
        public readonly borderBottomStyle: string;
        public readonly borderBottomWidth: any;
        public readonly borderCollapse: string;
        public readonly borderColor: string;
        public borderImage: string;
        public borderImageOutset: string;
        public borderImageRepeat: string;
        public borderImageSlice: string;
        public borderImageSource: string;
        public borderImageWidth: string;
        public readonly borderLeftColor: any;
        public readonly borderLeftStyle: string;
        public readonly borderLeftWidth: any;
        public readonly borderRightColor: any;
        public readonly borderRightStyle: string;
        public readonly borderRightWidth: any;
        public readonly borderSpacing: string;
        public readonly borderStyle: string;
        public readonly borderTopColor: any;
        public readonly borderTopStyle: string;
        public readonly borderTopWidth: any;
        public readonly borderWidth: string;
        public readonly bottom: any;
        public readonly boxSizing: string;
        public breakAfter: string;
        public breakBefore: string;
        public breakInside: string;
        public readonly captionSide: string;
        public readonly clear: string;
        public readonly clipBottom: any;
        public readonly clipLeft: any;
        public readonly clipRight: any;
        public readonly clipTop: any;
        public readonly color: any;
        public colorInterpolationFilters: string;
        public columnCount: any;
        public columnFill: string;
        public columnGap: any;
        public columnRule: string;
        public columnRuleColor: any;
        public columnRuleStyle: string;
        public columnRuleWidth: any;
        public columns: string;
        public columnSpan: string;
        public columnWidth: any;
        public readonly 'constructor': any;
        public readonly cursor: string;
        public readonly direction: string;
        public readonly display: string;
        public readonly emptyCells: string;
        public enableBackground: string;
        public readonly filter: string;
        public flex: string;
        public flexBasis: any;
        public flexDirection: string;
        public flexFlow: string;
        public flexGrow: any;
        public flexShrink: any;
        public flexWrap: string;
        public floodColor: any;
        public floodOpacity: any;
        public readonly fontFamily: string;
        public fontFeatureSettings: string;
        public readonly fontSize: any;
        public readonly fontStyle: string;
        public readonly fontVariant: string;
        public readonly fontWeight: any;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getPropertyPriority(bstrPropertyName: string): string;
        public getPropertyValue(bstrPropertyName: string): string;
        public readonly hasLayout: boolean;
        public readonly height: any;
        public readonly imeMode: string;
        public item(index: number): string;
        public justifyContent: string;
        public readonly layoutFlow: string;
        public readonly layoutGridChar: any;
        public readonly layoutGridLine: any;
        public readonly layoutGridMode: string;
        public readonly layoutGridType: string;
        public readonly left: any;
        public readonly length: number;
        public readonly letterSpacing: any;
        public lightingColor: any;
        public readonly lineBreak: string;
        public readonly lineHeight: any;
        public readonly listStyleImage: string;
        public readonly listStylePosition: string;
        public readonly listStyleType: string;
        public readonly margin: string;
        public readonly marginBottom: any;
        public readonly marginLeft: any;
        public readonly marginRight: any;
        public readonly marginTop: any;
        public readonly maxHeight: any;
        public readonly maxWidth: any;
        public readonly minHeight: any;
        public readonly minWidth: any;
        public msAnimation: string;
        public msAnimationDelay: string;
        public msAnimationDirection: string;
        public msAnimationDuration: string;
        public msAnimationFillMode: string;
        public msAnimationIterationCount: string;
        public msAnimationName: string;
        public msAnimationPlayState: string;
        public msAnimationTimingFunction: string;
        public msBackfaceVisibility: string;
        public readonly msBlockProgression: string;
        public msContentZoomChaining: string;
        public msContentZooming: string;
        public msContentZoomLimit: string;
        public msContentZoomLimitMax: any;
        public msContentZoomLimitMin: any;
        public msContentZoomSnap: string;
        public msContentZoomSnapPoints: string;
        public msContentZoomSnapType: string;
        public msFlex: string;
        public msFlexAlign: string;
        public msFlexDirection: string;
        public msFlexFlow: string;
        public msFlexItemAlign: string;
        public msFlexLinePack: string;
        public msFlexNegative: any;
        public msFlexOrder: any;
        public msFlexPack: string;
        public msFlexPositive: any;
        public msFlexPreferredSize: any;
        public msFlexWrap: string;
        public msFlowFrom: string;
        public msFlowInto: string;
        public msFontFeatureSettings: string;
        public msGridColumn: any;
        public msGridColumnAlign: string;
        public msGridColumns: string;
        public msGridColumnSpan: any;
        public msGridRow: any;
        public msGridRowAlign: string;
        public msGridRows: string;
        public msGridRowSpan: any;
        public msHighContrastAdjust: string;
        public msHyphenateLimitChars: string;
        public msHyphenateLimitLines: any;
        public msHyphenateLimitZone: any;
        public msHyphens: string;
        public msImeAlign: string;
        public readonly msInterpolationMode: string;
        public msOverflowStyle: string;
        public msPerspective: any;
        public msPerspectiveOrigin: string;
        public msScrollChaining: string;
        public msScrollLimit: string;
        public msScrollLimitXMax: any;
        public msScrollLimitXMin: any;
        public msScrollLimitYMax: any;
        public msScrollLimitYMin: any;
        public msScrollRails: string;
        public msScrollSnapPointsX: string;
        public msScrollSnapPointsY: string;
        public msScrollSnapType: string;
        public msScrollSnapX: string;
        public msScrollSnapY: string;
        public msScrollTranslation: string;
        public msTextCombineHorizontal: string;
        public msTextSizeAdjust: any;
        public msTouchAction: string;
        public msTouchSelect: string;
        public msTransformStyle: string;
        public msTransition: string;
        public msTransitionDelay: string;
        public msTransitionDuration: string;
        public msTransitionProperty: string;
        public msTransitionTimingFunction: string;
        public msUserSelect: string;
        public msWrapFlow: string;
        public msWrapMargin: any;
        public msWrapThrough: string;
        public readonly orphans: any;
        public readonly outline: string;
        public readonly outlineColor: any;
        public readonly outlineStyle: string;
        public readonly outlineWidth: any;
        public readonly overflow: string;
        public readonly overflowX: string;
        public readonly overflowY: string;
        public readonly padding: string;
        public readonly paddingBottom: any;
        public readonly paddingLeft: any;
        public readonly paddingRight: any;
        public readonly paddingTop: any;
        public readonly pageBreakAfter: string;
        public readonly pageBreakBefore: string;
        public readonly pageBreakInside: string;
        public readonly parentRule: any;
        public perspective: any;
        public perspectiveOrigin: string;
        public readonly position: string;
        public readonly quotes: string;
        public removeProperty(bstrPropertyName: string): string;
        public readonly right: any;
        public readonly rubyAlign: string;
        public readonly rubyOverhang: string;
        public readonly rubyPosition: string;
        public readonly scrollbar3dLightColor: any;
        public readonly scrollbarArrowColor: any;
        public readonly scrollbarBaseColor: any;
        public readonly scrollbarDarkShadowColor: any;
        public readonly scrollbarFaceColor: any;
        public readonly scrollbarHighlightColor: any;
        public readonly scrollbarShadowColor: any;
        public readonly scrollbarTrackColor: any;

        /** @param any [pvarPropertyPriority=''] */
        public setProperty(bstrPropertyName: string, pvarPropertyValue: any, pvarPropertyPriority?: any): void;
        public readonly styleFloat: string;
        public readonly tableLayout: string;
        public readonly textAlign: string;
        public readonly textAlignLast: string;
        public readonly textAutospace: string;
        public readonly textDecoration: string;
        public readonly textIndent: any;
        public readonly textJustify: string;
        public readonly textJustifyTrim: string;
        public readonly textKashida: any;
        public readonly textKashidaSpace: any;
        public readonly textOverflow: string;
        public textShadow: string;
        public readonly textTransform: string;
        public readonly textUnderlinePosition: string;
        public readonly top: any;
        public touchAction: string;
        public transform: string;
        public transformOrigin: string;
        public transformStyle: string;
        public transition: string;
        public transitionDelay: string;
        public transitionDuration: string;
        public transitionProperty: string;
        public transitionTimingFunction: string;
        public readonly unicodeBidi: string;
        public readonly verticalAlign: any;
        public readonly visibility: string;
        public webkitAnimation: string;
        public webkitAnimationDelay: string;
        public webkitAnimationDirection: string;
        public webkitAnimationDuration: string;
        public webkitAnimationFillMode: string;
        public webkitAnimationIterationCount: string;
        public webkitAnimationName: string;
        public webkitAnimationPlayState: string;
        public webkitAnimationTimingFunction: string;
        public webkitAppearance: string;
        public webkitBackfaceVisibility: string;
        public webkitBackground: string;
        public webkitBackgroundAttachment: string;
        public webkitBackgroundClip: string;
        public webkitBackgroundColor: any;
        public webkitBackgroundImage: string;
        public webkitBackgroundOrigin: string;
        public webkitBackgroundPosition: string;
        public webkitBackgroundPositionX: any;
        public webkitBackgroundPositionY: any;
        public webkitBackgroundRepeat: string;
        public webkitBackgroundSize: string;
        public webkitBorderImage: string;
        public webkitBorderImageOutset: string;
        public webkitBorderImageRepeat: string;
        public webkitBorderImageSlice: string;
        public webkitBorderImageSource: string;
        public webkitBorderImageWidth: string;
        public webkitBoxAlign: string;
        public webkitBoxDirection: string;
        public webkitBoxFlex: any;
        public webkitBoxOrdinalGroup: any;
        public webkitBoxOrient: string;
        public webkitBoxPack: string;
        public webkitBoxSizing: string;
        public webkitTextSizeAdjust: any;
        public webkitTransform: string;
        public webkitTransformOrigin: string;
        public webkitTransition: string;
        public webkitTransitionDelay: string;
        public webkitTransitionDuration: string;
        public webkitTransitionProperty: string;
        public webkitTransitionTimingFunction: string;
        public webkitUserSelect: string;
        public readonly whiteSpace: string;
        public readonly widows: any;
        public readonly width: any;
        public readonly wordBreak: string;
        public readonly wordSpacing: any;
        public readonly wordWrap: string;
        public readonly writingMode: string;
        public readonly zIndex: any;
        public readonly zoom: any;
    }

    class HTMLDDElement {
        private 'MSHTML.HTMLDDElement_typekey': HTMLDDElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public noWrap: boolean;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLDefaults {
        private 'MSHTML.HTMLDefaults_typekey': HTMLDefaults;
        private constructor();
        public canHaveHTML: boolean;
        public readonly 'constructor': any;
        public contentEditable: string;
        public frozen: boolean;
        public isMultiLine: boolean;
        public scrollSegmentX: number;
        public scrollSegmentY: number;
        public readonly style: IHTMLStyle;
        public tabStop: boolean;
        public viewInheritStyle: boolean;
        public viewLink: IHTMLDocument;
        public viewMasterTab: boolean;
    }

    class HTMLDialog {
        private 'MSHTML.HTMLDialog_typekey': HTMLDialog;
        private constructor();
        public close(): void;
        public readonly dialogArguments: any;
        public dialogHeight: any;
        public dialogLeft: any;
        public dialogTop: any;
        public dialogWidth: any;
        public readonly menuArguments: any;
        public returnValue: any;
        public toString(): string;
    }

    class HTMLDivElement {
        private 'MSHTML.HTMLDivElement_typekey': HTMLDivElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public align: string;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public compareDocumentPosition(otherNode: IHTMLDOMNode): number;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public dataFld: string;
        public dataFormatAs: string;
        public dataSrc: string;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public ie9_insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public isDefaultNamespace(pvarNamespace: any): boolean;
        public readonly isDisabled: boolean;
        public isEqualNode(otherNode: IHTMLDOMNode3): boolean;
        public readonly isMultiLine: boolean;
        public isSameNode(otherNode: IHTMLDOMNode3): boolean;
        public isSupported(feature: string, version: any): boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public readonly localName: any;
        public lookupNamespaceURI(pvarPrefix: any): any;
        public lookupPrefix(pvarNamespaceURI: any): any;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly namespaceURI: any;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public noWrap: boolean;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public prefix: any;
        public readonly previousSibling: IHTMLDOMNode;
        public querySelector(v: string): IHTMLElement;
        public querySelectorAll(v: string): IHTMLDOMChildrenCollection;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public textContent: any;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLDivPosition {
        private 'MSHTML.HTMLDivPosition_typekey': HTMLDivPosition;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public align: string;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public compareDocumentPosition(otherNode: IHTMLDOMNode): number;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public dataFld: string;
        public dataFormatAs: string;
        public dataSrc: string;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public ie9_insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public isDefaultNamespace(pvarNamespace: any): boolean;
        public readonly isDisabled: boolean;
        public isEqualNode(otherNode: IHTMLDOMNode3): boolean;
        public readonly isMultiLine: boolean;
        public isSameNode(otherNode: IHTMLDOMNode3): boolean;
        public isSupported(feature: string, version: any): boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public readonly localName: any;
        public lookupNamespaceURI(pvarPrefix: any): any;
        public lookupPrefix(pvarNamespaceURI: any): any;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly namespaceURI: any;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public prefix: any;
        public readonly previousSibling: IHTMLDOMNode;
        public querySelector(v: string): IHTMLElement;
        public querySelectorAll(v: string): IHTMLDOMChildrenCollection;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public textContent: any;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public xmsAcceleratorKey: string;
    }

    class HtmlDlgSafeHelper {
        private 'MSHTML.HtmlDlgSafeHelper_typekey': HtmlDlgSafeHelper;
        private constructor();
        public readonly BlockFormats: any;
        public choosecolordlg(initColor?: any): any;
        public readonly fonts: any;
        public getCharset(fontName: string): any;
    }

    class HTMLDListElement {
        private 'MSHTML.HTMLDListElement_typekey': HTMLDListElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public compact: boolean;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLDocument {
        private 'MSHTML.HTMLDocument_typekey': HTMLDocument;
        private constructor();
        public readonly activeElement: IHTMLElement;
        public addEventListener(type: string, listener: any, useCapture: boolean): void;
        public adoptNode(pNodeSource: IHTMLDOMNode): IHTMLDOMNode3;
        public alinkColor: any;
        public readonly all: IHTMLElementCollection;
        public readonly anchors: IHTMLElementCollection;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public readonly applets: IHTMLElementCollection;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public bgColor: any;
        public readonly body: IHTMLElement;
        public readonly characterSet: string;
        public charset: string;
        public readonly childNodes: any;
        public clear(): void;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public close(): void;
        public compareDocumentPosition(otherNode: IHTMLDOMNode): number;
        public readonly compatible: IHTMLDocumentCompatibleInfoCollection;
        public readonly compatMode: string;
        public readonly 'constructor': any;
        public cookie: string;
        public createAttribute(bstrAttrName: string): IHTMLDOMAttribute;
        public createAttributeNS(pvarNS: any, bstrAttrName: string): IHTMLDOMAttribute;
        public createCDATASection(text: string): IHTMLDOMNode;
        public createComment(bstrData: string): IHTMLDOMNode;
        public createDocumentFragment(): IHTMLDocument2;
        public createDocumentFromUrl(bstrURL: string, bstrOptions: string): IHTMLDocument2;
        public createElement(eTag: string): IHTMLElement;
        public createElementNS(pvarNS: any, bstrTag: string): IHTMLElement;
        public createEvent(eventType: string): IDOMEvent;
        public CreateEventObject(pvarEventObject?: any): IHTMLEventObj;
        public createNodeIterator(pRootNode: any, ulWhatToShow: number, pFilter: any, fEntityReferenceExpansion: boolean): IDOMNodeIterator;
        public createProcessingInstruction(bstrTarget: string, bstrData: string): IDOMProcessingInstruction;
        public createRange(): IHTMLDOMRange;
        public createRenderStyle(v: string): IHTMLRenderStyle;

        /**
         * @param string [bstrHref='']
         * @param number [lIndex=-1]
         */
        public createStyleSheet(bstrHref?: string, lIndex?: number): IHTMLStyleSheet;
        public createTextNode(text: string): IHTMLDOMNode;
        public createTreeWalker(pRootNode: any, ulWhatToShow: number, pFilter: any, fEntityReferenceExpansion: boolean): IDOMTreeWalker;
        public defaultCharset: string;
        public readonly defaultView: IHTMLWindow2;
        public designMode: string;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public dispatchEvent(evt: IDOMEvent): boolean;
        public readonly doctype: IHTMLDOMNode;
        public readonly documentElement: IHTMLElement;
        public readonly documentMode: any;
        public domain: string;
        public elementFromPoint(x: number, y: number): IHTMLElement;
        public elementsFromPoint(x: number, y: number): IHTMLDOMChildrenCollection;
        public elementsFromRect(left: number, top: number, width: number, height: number): IHTMLDOMChildrenCollection;
        public readonly embeds: IHTMLElementCollection;

        /** @param boolean [showUI=false] */
        public execCommand(cmdID: string, showUI?: boolean, value?: any): boolean;
        public execCommandShowHelp(cmdID: string): boolean;
        public expando: boolean;
        public fgColor: any;
        public readonly fileCreatedDate: string;
        public readonly fileModifiedDate: string;
        public readonly fileSize: string;
        public readonly fileUpdatedDate: string;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public readonly forms: IHTMLElementCollection;
        public readonly frames: FramesCollection;
        public getElementById(v: string): IHTMLElement;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(pvarNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getSelection(): IHTMLSelection;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hasFocus(): boolean;
        public readonly head: IHTMLElement;
        public ie8_getElementById(bstrId: string): IHTMLElement2;
        public readonly ie9_all: IHTMLElementCollection;
        public ie9_appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_body: IHTMLElement;
        public ie9_createAttribute(bstrAttrName: string): IHTMLDOMAttribute;
        public ie9_createElement(bstrTag: string): IHTMLElement;
        public ie9_insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly ie9_parentWindow: IHTMLWindow2;
        public ie9_removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public readonly images: IHTMLElementCollection;
        public readonly implementation: IHTMLDOMImplementation;
        public importNode(pNodeSource: IHTMLDOMNode, fDeep: boolean): IHTMLDOMNode3;
        public readonly inputEncoding: string;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public isDefaultNamespace(pvarNamespace: any): boolean;
        public isEqualNode(otherNode: IHTMLDOMNode3): boolean;
        public isSameNode(otherNode: IHTMLDOMNode3): boolean;
        public isSupported(feature: string, version: any): boolean;
        public readonly lastChild: IHTMLDOMNode;
        public readonly lastModified: string;
        public linkColor: any;
        public readonly links: IHTMLElementCollection;
        public readonly localName: any;
        public readonly location: IHTMLLocation;
        public lookupNamespaceURI(pvarPrefix: any): any;
        public lookupPrefix(pvarNamespaceURI: any): any;
        public media: string;
        public readonly mimeType: string;
        public msCapsLockWarningOff: boolean;
        public readonly nameProp: string;
        public readonly namespaces: any;
        public readonly namespaceURI: any;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onmousedown: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmscontentzoom: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsinertiastart: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmssitemodejumplistitemremoved: any;
        public onmsthumbnailclick: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectionchange: any;
        public onselectstart: any;
        public onstalled: any;
        public onstop: any;
        public onstorage: any;
        public onstoragecommit: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;

        /** @param string [url='text/html'] */
        public open(url?: string, name?: any, features?: any, replace?: any): any;
        public readonly ownerDocument: any;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentWindow: IHTMLWindow2;
        public readonly plugins: IHTMLElementCollection;
        public prefix: any;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly protocol: string;
        public queryCommandEnabled(cmdID: string): boolean;
        public queryCommandIndeterm(cmdID: string): boolean;
        public queryCommandState(cmdID: string): boolean;
        public queryCommandSupported(cmdID: string): boolean;
        public queryCommandText(cmdID: string): string;
        public queryCommandValue(cmdID: string): any;
        public querySelector(v: string): IHTMLElement;
        public querySelectorAll(v: string): IHTMLDOMChildrenCollection;
        public readonly readyState: string;

        /** @param boolean [fForce=false] */
        public recalc(fForce?: boolean): void;
        public readonly referrer: string;
        public releaseCapture(): void;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeEventListener(type: string, listener: any, useCapture: boolean): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public readonly rootElement: ISVGSVGElement;
        public readonly Script: any;
        public readonly scripts: IHTMLElementCollection;
        public readonly security: string;
        public readonly selection: IHTMLSelectionObject;
        public readonly styleSheets: IHTMLStyleSheetsCollection;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public textContent: any;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public updateSettings(): void;
        public url: string;
        public readonly URLUnencoded: string;
        public vlinkColor: any;
        public write(...psarray: any[]): void;
        public writeln(...psarray: any[]): void;
        public readonly xmlEncoding: string;
        public xmlStandalone: boolean;
        public xmlVersion: string;
    }

    class HTMLDocumentCompatibleInfo {
        private 'MSHTML.HTMLDocumentCompatibleInfo_typekey': HTMLDocumentCompatibleInfo;
        private constructor();
        public readonly 'constructor': any;
    }

    class HTMLDocumentCompatibleInfoCollection {
        private 'MSHTML.HTMLDocumentCompatibleInfoCollection_typekey': HTMLDocumentCompatibleInfoCollection;
        private constructor();
        public readonly 'constructor': any;
    }

    class HTMLDOMAttribute {
        private 'MSHTML.HTMLDOMAttribute_typekey': HTMLDOMAttribute;
        private constructor();
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public readonly attributes: any;
        public readonly childNodes: any;
        public cloneNode(fDeep: boolean): IHTMLDOMAttribute;
        public compareDocumentPosition(otherNode: IHTMLDOMNode): number;
        public readonly 'constructor': any;
        public readonly expando: boolean;
        public readonly firstChild: IHTMLDOMNode;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public ie8_nodeValue: any;
        public readonly ie8_specified: boolean;
        public ie8_value: string;
        public ie9_appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public readonly ie9_childNodes: any;
        public readonly ie9_firstChild: IHTMLDOMNode;
        public ie9_hasChildNodes(): boolean;
        public ie9_insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly ie9_lastChild: IHTMLDOMNode;
        public readonly ie9_name: string;
        public readonly ie9_nodeName: string;
        public ie9_nodeValue: any;
        public ie9_removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public readonly ie9_specified: boolean;
        public ie9_value: string;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public isDefaultNamespace(pvarNamespace: any): boolean;
        public isEqualNode(otherNode: IHTMLDOMNode3): boolean;
        public isSameNode(otherNode: IHTMLDOMNode3): boolean;
        public isSupported(feature: string, version: any): boolean;
        public readonly lastChild: IHTMLDOMNode;
        public readonly localName: any;
        public lookupNamespaceURI(pvarPrefix: any): any;
        public lookupPrefix(pvarNamespaceURI: any): any;
        public readonly name: string;
        public readonly namespaceURI: any;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly ownerDocument: any;
        public readonly ownerElement: IHTMLElement2;
        public readonly parentNode: IHTMLDOMNode;
        public prefix: any;
        public readonly previousSibling: IHTMLDOMNode;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public readonly specified: boolean;
        public textContent: any;
        public value: string;
    }

    class HTMLDOMImplementation {
        private 'MSHTML.HTMLDOMImplementation_typekey': HTMLDOMImplementation;
        private constructor();
        public readonly 'constructor': any;
        public createDocument(pvarNS: any, pvarTagName: any, pDocumentType: IDOMDocumentType): IHTMLDocument7;
        public createDocumentType(bstrQualifiedName: string, pvarPublicId: any, pvarSystemId: any): IDOMDocumentType;
        public createHTMLDocument(bstrTitle: string): IHTMLDocument7;
        public hasFeature(bstrfeature: string, version?: any): boolean;
        public ie9_hasFeature(bstrfeature: string, version?: any): boolean;
    }

    class HTMLDOMRange {
        private 'MSHTML.HTMLDOMRange_typekey': HTMLDOMRange;
        private constructor();
        public cloneContents(): any;
        public cloneRange(): IHTMLDOMRange;
        public collapse(toStart: boolean): void;
        public readonly collapsed: boolean;
        public readonly commonAncestorContainer: IHTMLDOMNode;
        public compareBoundaryPoints(how: number, sourceRange: any): number;
        public deleteContents(): void;
        public Detach(): void;
        public readonly endContainer: IHTMLDOMNode;
        public readonly endOffset: number;
        public extractContents(): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public insertNode(newNode: any): void;
        public selectNode(refNode: any): void;
        public selectNodeContents(refNode: any): void;
        public setEnd(refNode: any, offset: number): void;
        public setEndAfter(refNode: any): void;
        public setEndBefore(refNode: any): void;
        public setStart(refNode: any, offset: number): void;
        public setStartAfter(refNode: any): void;
        public setStartBefore(refNode: any): void;
        public readonly startContainer: IHTMLDOMNode;
        public readonly startOffset: number;
        public surroundContents(newParent: any): void;
        public toString(): string;
    }

    class HTMLDOMTextNode {
        private 'MSHTML.HTMLDOMTextNode_typekey': HTMLDOMTextNode;
        private constructor();
        public addEventListener(type: string, listener: any, useCapture: boolean): void;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public appendData(bstrstring: string): void;
        public readonly attributes: any;
        public readonly childNodes: any;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public compareDocumentPosition(otherNode: IHTMLDOMNode): number;
        public readonly 'constructor': any;
        public data: string;
        public deleteData(offset: number, Count: number): void;
        public dispatchEvent(evt: IDOMEvent): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public ie9_appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_deleteData(offset: number, Count: number): void;
        public ie9_insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public ie9_insertData(offset: number, bstrstring: string): void;
        public ie9_removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_replaceData(offset: number, Count: number, bstrstring: string): void;
        public ie9_splitText(offset: number): IHTMLDOMNode;
        public ie9_substringData(offset: number, Count: number): string;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public insertData(offset: number, bstrstring: string): void;
        public isDefaultNamespace(pvarNamespace: any): boolean;
        public isEqualNode(otherNode: IHTMLDOMNode3): boolean;
        public isSameNode(otherNode: IHTMLDOMNode3): boolean;
        public isSupported(feature: string, version: any): boolean;
        public readonly lastChild: IHTMLDOMNode;
        public readonly length: number;
        public readonly localName: any;
        public lookupNamespaceURI(pvarPrefix: any): any;
        public lookupPrefix(pvarNamespaceURI: any): any;
        public readonly namespaceURI: any;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly ownerDocument: any;
        public readonly parentNode: IHTMLDOMNode;
        public prefix: any;
        public readonly previousSibling: IHTMLDOMNode;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeEventListener(type: string, listener: any, useCapture: boolean): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceData(offset: number, Count: number, bstrstring: string): void;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public replaceWholeText(bstrText: string): IHTMLDOMNode;
        public splitText(offset: number): IHTMLDOMNode;
        public substringData(offset: number, Count: number): string;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public textContent: any;
        public toString(): string;
        public readonly wholeText: string;
    }

    class HTMLDOMXmlSerializerFactory {
        private 'MSHTML.HTMLDOMXmlSerializerFactory_typekey': HTMLDOMXmlSerializerFactory;
        private constructor();
        public create(): IDOMXmlSerializer;
    }

    class HTMLDTElement {
        private 'MSHTML.HTMLDTElement_typekey': HTMLDTElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public noWrap: boolean;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLElementCollection {
        private 'MSHTML.HTMLElementCollection_typekey': HTMLElementCollection;
        private constructor();
        public readonly 'constructor': any;
        public ie8_item(index: number): IHTMLElement2;
        public readonly ie8_length: number;
        public ie8_namedItem(name: string): IHTMLElement2;
        public item(name?: any, index?: any): any;
        public length: number;
        public namedItem(name: string): any;
        public tags(tagName: any): any;
        public toString(): string;
        public urns(urn: any): any;
    }

    class HTMLEmbed {
        private 'MSHTML.HTMLEmbed_typekey': HTMLEmbed;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public getSVGDocument(): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public height: any;
        public hidden: string;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public readonly ie8_pluginspage: string;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_src: string;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public name: string;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly palette: string;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly pluginspage: string;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public src: string;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public units: string;
        public width: any;
        public xmsAcceleratorKey: string;
    }

    class HTMLFieldSetElement {
        private 'MSHTML.HTMLFieldSetElement_typekey': HTMLFieldSetElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public align: string;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public readonly form: IHTMLFormElement;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLFontElement {
        private 'MSHTML.HTMLFontElement_typekey': HTMLFontElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public color: any;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public face: string;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public size: any;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLFormElement {
        private 'MSHTML.HTMLFormElement_typekey': HTMLFormElement;
        private constructor();
        public acceptCharset: string;
        public accessKey: string;
        public action: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public appendItemSeparator(): void;

        /**
         * @param string [name='']
         * @param string [filename='']
         */
        public appendNameFilePair(name?: string, filename?: string): void;

        /**
         * @param string [name='']
         * @param string [value='']
         */
        public appendNameValuePair(name?: string, value?: string): void;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly elements: any;
        public encoding: string;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public ie8_action: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public item(name?: any, index?: any): any;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public length: number;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public method: string;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public name: string;
        public namedItem(name: string): any;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public reset(): void;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public submit(): void;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tags(tagName: any): any;
        public tagUrn: string;
        public target: string;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public urns(urn: any): any;
        public xmsAcceleratorKey: string;
    }

    class HTMLFrameBase {
        private 'MSHTML.HTMLFrameBase_typekey': HTMLFrameBase;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public allowTransparency: boolean;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public border: any;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public readonly contentWindow: IHTMLWindow2;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public frameBorder: string;
        public frameSpacing: any;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public longDesc: string;
        public marginHeight: any;
        public marginWidth: any;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public name: string;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public noResize: boolean;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrolling: string;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public src: string;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLFrameElement {
        private 'MSHTML.HTMLFrameElement_typekey': HTMLFrameElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public allowTransparency: boolean;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public border: any;
        public borderColor: any;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public compareDocumentPosition(otherNode: IHTMLDOMNode): number;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public readonly contentDocument: any;
        public contentEditable: string;
        public readonly contentWindow: IHTMLWindow2;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public dataFld: string;
        public dataFormatAs: string;
        public dataSrc: string;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public frameBorder: string;
        public frameSpacing: any;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public getSVGDocument(): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public height: any;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_frameBorder: string;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_longDesc: string;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_src: string;
        public ie9_appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public ie9_insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public isDefaultNamespace(pvarNamespace: any): boolean;
        public readonly isDisabled: boolean;
        public isEqualNode(otherNode: IHTMLDOMNode3): boolean;
        public readonly isMultiLine: boolean;
        public isSameNode(otherNode: IHTMLDOMNode3): boolean;
        public isSupported(feature: string, version: any): boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public readonly localName: any;
        public longDesc: string;
        public lookupNamespaceURI(pvarPrefix: any): any;
        public lookupPrefix(pvarNamespaceURI: any): any;
        public marginHeight: any;
        public marginWidth: any;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public name: string;
        public readonly namespaceURI: any;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public noResize: boolean;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public prefix: any;
        public readonly previousSibling: IHTMLDOMNode;
        public querySelector(v: string): IHTMLElement;
        public querySelectorAll(v: string): IHTMLDOMChildrenCollection;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrolling: string;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public src: string;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public textContent: any;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public width: any;
        public xmsAcceleratorKey: string;
    }

    class HTMLFrameSetSite {
        private 'MSHTML.HTMLFrameSetSite_typekey': HTMLFrameSetSite;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public border: any;
        public borderColor: any;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public cols: string;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public frameBorder: string;
        public frameSpacing: any;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public name: string;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterprint: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeprint: any;
        public onbeforeunload: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhashchange: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmessage: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onoffline: any;
        public ononline: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onstorage: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onunload: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public rows: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLGenericElement {
        private 'MSHTML.HTMLGenericElement_typekey': HTMLGenericElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public namedRecordset(dataMember: string, hierarchy?: any): any;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public readonly recordset: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLHeadElement {
        private 'MSHTML.HTMLHeadElement_typekey': HTMLHeadElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_profile: string;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public profile: string;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLHeaderElement {
        private 'MSHTML.HTMLHeaderElement_typekey': HTMLHeaderElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public align: string;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clear: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLHistory {
        private 'MSHTML.HTMLHistory_typekey': HTMLHistory;
        private constructor();
        public back(pvargdistance?: any): void;
        public readonly 'constructor': any;
        public forward(pvargdistance?: any): void;
        public go(pvargdistance?: any): void;
        public readonly length: number;
    }

    class HTMLHRElement {
        private 'MSHTML.HTMLHRElement_typekey': HTMLHRElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public align: string;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public color: any;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public noShade: boolean;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public size: any;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public width: any;
        public xmsAcceleratorKey: string;
    }

    class HTMLHtmlElement {
        private 'MSHTML.HTMLHtmlElement_typekey': HTMLHtmlElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public version: string;
        public xmsAcceleratorKey: string;
    }

    class HTMLIFrame {
        private 'MSHTML.HTMLIFrame_typekey': HTMLIFrame;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public align: string;
        public readonly all: any;
        public allowTransparency: boolean;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public border: any;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public compareDocumentPosition(otherNode: IHTMLDOMNode): number;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public readonly contentDocument: any;
        public contentEditable: string;
        public readonly contentWindow: IHTMLWindow2;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public dataFld: string;
        public dataFormatAs: string;
        public dataSrc: string;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public frameBorder: string;
        public frameSpacing: any;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public getSVGDocument(): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public height: any;
        public hideFocus: boolean;
        public hspace: number;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_frameBorder: string;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_longDesc: string;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_src: string;
        public ie9_appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public ie9_insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public isDefaultNamespace(pvarNamespace: any): boolean;
        public readonly isDisabled: boolean;
        public isEqualNode(otherNode: IHTMLDOMNode3): boolean;
        public readonly isMultiLine: boolean;
        public isSameNode(otherNode: IHTMLDOMNode3): boolean;
        public isSupported(feature: string, version: any): boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public readonly localName: any;
        public longDesc: string;
        public lookupNamespaceURI(pvarPrefix: any): any;
        public lookupPrefix(pvarNamespaceURI: any): any;
        public marginHeight: any;
        public marginWidth: any;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public name: string;
        public readonly namespaceURI: any;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public noResize: boolean;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public prefix: any;
        public readonly previousSibling: IHTMLDOMNode;
        public querySelector(v: string): IHTMLElement;
        public querySelectorAll(v: string): IHTMLDOMChildrenCollection;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrolling: string;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public src: string;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public textContent: any;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public vspace: number;
        public width: any;
        public xmsAcceleratorKey: string;
    }

    class HTMLImageElementFactory {
        private 'MSHTML.HTMLImageElementFactory_typekey': HTMLImageElementFactory;
        private constructor();
        public create(width?: any, height?: any): IHTMLImgElement;
    }

    class HTMLImg {
        private 'MSHTML.HTMLImg_typekey': HTMLImg;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public align: string;
        public readonly all: any;
        public alt: string;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public border: any;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public compareDocumentPosition(otherNode: IHTMLDOMNode): number;
        public readonly complete: boolean;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public dataFld: string;
        public dataFormatAs: string;
        public dataSrc: string;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public dynsrc: string;
        public readonly fileCreatedDate: string;
        public readonly fileModifiedDate: string;
        public readonly fileSize: string;
        public readonly fileUpdatedDate: string;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public height: number;
        public hideFocus: boolean;
        public readonly href: string;
        public hspace: number;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_dynsrc: string;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_longDesc: string;
        public ie8_lowsrc: string;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_vrml: string;
        public ie9_appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public ie9_insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public isDefaultNamespace(pvarNamespace: any): boolean;
        public readonly isDisabled: boolean;
        public isEqualNode(otherNode: IHTMLDOMNode3): boolean;
        public isMap: boolean;
        public readonly isMultiLine: boolean;
        public isSameNode(otherNode: IHTMLDOMNode3): boolean;
        public isSupported(feature: string, version: any): boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public readonly localName: any;
        public longDesc: string;
        public lookupNamespaceURI(pvarPrefix: any): any;
        public lookupPrefix(pvarNamespaceURI: any): any;
        public loop: any;
        public lowsrc: string;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public readonly mimeType: string;
        public msMatchesSelector(v: string): boolean;
        public msPlayToDisabled: boolean;
        public msPlayToPrimary: boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public name: string;
        public readonly nameProp: string;
        public readonly namespaceURI: any;
        public readonly naturalHeight: number;
        public readonly naturalWidth: number;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public prefix: any;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly protocol: string;
        public querySelector(v: string): IHTMLElement;
        public querySelectorAll(v: string): IHTMLDOMChildrenCollection;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public src: string;
        public start: string;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public textContent: any;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public useMap: string;
        public vrml: string;
        public vspace: number;
        public width: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLInputButtonElement {
        private 'MSHTML.HTMLInputButtonElement_typekey': HTMLInputButtonElement;
        private constructor();
        public accessKey: string;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public blur(): void;
        public readonly children: any;
        public className: string;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public contains(pChild: IHTMLElement): boolean;
        public createTextRange(): IHTMLTxtRange;
        public disabled: boolean;
        public readonly document: any;
        public readonly filters: IHTMLFiltersCollection;
        public focus(): void;
        public readonly form: IHTMLFormElement;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public id: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public name: string;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onafterupdate: any;
        public onbeforeupdate: any;
        public onblur: any;
        public onclick: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondragstart: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onhelp: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onmousedown: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onresize: any;
        public onrowenter: any;
        public onrowexit: any;
        public onselectstart: any;
        public outerHTML: string;
        public outerText: string;
        public readonly parentElement: IHTMLElement;
        public readonly parentTextEdit: IHTMLElement;
        public readonly recordNumber: any;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeFilter(pUnk: any): void;
        public scrollIntoView(varargStart?: any): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public readonly sourceIndex: number;
        public status: any;
        public readonly style: IHTMLStyle;
        public tabIndex: number;
        public readonly tagName: string;
        public title: string;
        public toString(): string;
        public readonly type: string;
        public value: string;
    }

    class HTMLInputElement {
        private 'MSHTML.HTMLInputElement_typekey': HTMLInputElement;
        private constructor();
        public accept: string;
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public align: string;
        public readonly all: any;
        public alt: string;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public border: any;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public checked: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public compareDocumentPosition(otherNode: IHTMLDOMNode): number;
        public readonly complete: boolean;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public createTextRange(): IHTMLTxtRange;
        public readonly currentStyle: IHTMLCurrentStyle;
        public dataFld: string;
        public dataFormatAs: string;
        public dataSrc: string;
        public defaultChecked: boolean;
        public defaultValue: string;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public dynsrc: string;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public readonly form: IHTMLFormElement;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public height: number;
        public hideFocus: boolean;
        public hspace: number;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_dynsrc: string;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_lowsrc: string;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_src: string;
        public ie8_vrml: string;
        public ie9_appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public ie9_insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public indeterminate: boolean;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public isDefaultNamespace(pvarNamespace: any): boolean;
        public readonly isDisabled: boolean;
        public isEqualNode(otherNode: IHTMLDOMNode3): boolean;
        public readonly isMultiLine: boolean;
        public isSameNode(otherNode: IHTMLDOMNode3): boolean;
        public isSupported(feature: string, version: any): boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public readonly localName: any;
        public lookupNamespaceURI(pvarPrefix: any): any;
        public lookupPrefix(pvarNamespaceURI: any): any;
        public loop: any;
        public lowsrc: string;
        public max: string;
        public maxLength: number;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public min: string;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public name: string;
        public readonly namespaceURI: any;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public prefix: any;
        public readonly previousSibling: IHTMLDOMNode;
        public querySelector(v: string): IHTMLElement;
        public querySelectorAll(v: string): IHTMLDOMChildrenCollection;
        public readOnly: boolean;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public select(): void;
        public selectionEnd: number;
        public selectionStart: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public setSelectionRange(start: number, end: number): void;
        public size: number;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public src: string;
        public start: string;
        public status: boolean;
        public step: string;

        /** @param number [n=1] */
        public stepDown(n?: number): void;

        /** @param number [n=1] */
        public stepUp(n?: number): void;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public textContent: any;
        public title: string;
        public toString(): string;
        public type: string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public useMap: string;
        public value: string;
        public valueAsNumber: number;
        public vrml: string;
        public vspace: number;
        public width: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLInputFileElement {
        private 'MSHTML.HTMLInputFileElement_typekey': HTMLInputFileElement;
        private constructor();
        public accessKey: string;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public blur(): void;
        public readonly children: any;
        public className: string;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public contains(pChild: IHTMLElement): boolean;
        public disabled: boolean;
        public readonly document: any;
        public readonly filters: IHTMLFiltersCollection;
        public focus(): void;
        public readonly form: IHTMLFormElement;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public id: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public maxLength: number;
        public name: string;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onafterupdate: any;
        public onbeforeupdate: any;
        public onblur: any;
        public onchange: any;
        public onclick: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondragstart: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onhelp: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onmousedown: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onresize: any;
        public onrowenter: any;
        public onrowexit: any;
        public onselect: any;
        public onselectstart: any;
        public outerHTML: string;
        public outerText: string;
        public readonly parentElement: IHTMLElement;
        public readonly parentTextEdit: IHTMLElement;
        public readonly recordNumber: any;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeFilter(pUnk: any): void;
        public scrollIntoView(varargStart?: any): void;
        public select(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public size: number;
        public readonly sourceIndex: number;
        public status: any;
        public readonly style: IHTMLStyle;
        public tabIndex: number;
        public readonly tagName: string;
        public title: string;
        public toString(): string;
        public readonly type: string;
        public value: string;
    }

    class htmlInputImage {
        private 'MSHTML.htmlInputImage_typekey': htmlInputImage;
        private constructor();
        public accessKey: string;
        public addFilter(pUnk: any): void;
        public align: string;
        public readonly all: any;
        public alt: string;
        public blur(): void;
        public border: any;
        public readonly children: any;
        public className: string;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public readonly complete: boolean;
        public contains(pChild: IHTMLElement): boolean;
        public disabled: boolean;
        public readonly document: any;
        public dynsrc: string;
        public readonly filters: IHTMLFiltersCollection;
        public focus(): void;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public height: number;
        public hspace: number;
        public id: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public loop: any;
        public lowsrc: string;
        public name: string;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onafterupdate: any;
        public onbeforeupdate: any;
        public onblur: any;
        public onclick: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondragstart: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onhelp: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onload: any;
        public onmousedown: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onresize: any;
        public onrowenter: any;
        public onrowexit: any;
        public onselectstart: any;
        public outerHTML: string;
        public outerText: string;
        public readonly parentElement: IHTMLElement;
        public readonly parentTextEdit: IHTMLElement;
        public readonly readyState: string;
        public readonly recordNumber: any;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeFilter(pUnk: any): void;
        public scrollIntoView(varargStart?: any): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public readonly sourceIndex: number;
        public src: string;
        public start: string;
        public readonly style: IHTMLStyle;
        public tabIndex: number;
        public readonly tagName: string;
        public title: string;
        public toString(): string;
        public readonly type: string;
        public vrml: string;
        public vspace: number;
        public width: number;
    }

    class HTMLInputTextElement {
        private 'MSHTML.HTMLInputTextElement_typekey': HTMLInputTextElement;
        private constructor();
        public accessKey: string;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public blur(): void;
        public readonly children: any;
        public className: string;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public contains(pChild: IHTMLElement): boolean;
        public createTextRange(): IHTMLTxtRange;
        public dataFld: string;
        public dataFormatAs: string;
        public dataSrc: string;
        public defaultValue: string;
        public disabled: boolean;
        public readonly document: any;
        public readonly filters: IHTMLFiltersCollection;
        public focus(): void;
        public readonly form: IHTMLFormElement;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public id: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public maxLength: number;
        public name: string;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onafterupdate: any;
        public onbeforeupdate: any;
        public onblur: any;
        public onchange: any;
        public onclick: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondragstart: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onhelp: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onmousedown: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onresize: any;
        public onrowenter: any;
        public onrowexit: any;
        public onselect: any;
        public onselectstart: any;
        public outerHTML: string;
        public outerText: string;
        public readonly parentElement: IHTMLElement;
        public readonly parentTextEdit: IHTMLElement;
        public readOnly: boolean;
        public readonly recordNumber: any;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeFilter(pUnk: any): void;
        public scrollIntoView(varargStart?: any): void;
        public select(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public size: number;
        public readonly sourceIndex: number;
        public status: any;
        public readonly style: IHTMLStyle;
        public tabIndex: number;
        public readonly tagName: string;
        public title: string;
        public toString(): string;
        public readonly type: string;
        public value: string;
    }

    class HTMLIsIndexElement {
        private 'MSHTML.HTMLIsIndexElement_typekey': HTMLIsIndexElement;
        private constructor();
        public accessKey: string;
        public action: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public readonly form: IHTMLFormElement;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public prompt: string;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLLabelElement {
        private 'MSHTML.HTMLLabelElement_typekey': HTMLLabelElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public compareDocumentPosition(otherNode: IHTMLDOMNode): number;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public dataFld: string;
        public dataFormatAs: string;
        public dataSrc: string;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public readonly form: IHTMLFormElement;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public htmlFor: string;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public ie9_insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public isDefaultNamespace(pvarNamespace: any): boolean;
        public readonly isDisabled: boolean;
        public isEqualNode(otherNode: IHTMLDOMNode3): boolean;
        public readonly isMultiLine: boolean;
        public isSameNode(otherNode: IHTMLDOMNode3): boolean;
        public isSupported(feature: string, version: any): boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public readonly localName: any;
        public lookupNamespaceURI(pvarPrefix: any): any;
        public lookupPrefix(pvarNamespaceURI: any): any;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly namespaceURI: any;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public prefix: any;
        public readonly previousSibling: IHTMLDOMNode;
        public querySelector(v: string): IHTMLElement;
        public querySelectorAll(v: string): IHTMLDOMChildrenCollection;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public textContent: any;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLLegendElement {
        private 'MSHTML.HTMLLegendElement_typekey': HTMLLegendElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public align: string;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public compareDocumentPosition(otherNode: IHTMLDOMNode): number;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public dataFld: string;
        public dataFormatAs: string;
        public dataSrc: string;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public readonly form: IHTMLFormElement;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public ie9_insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public isDefaultNamespace(pvarNamespace: any): boolean;
        public readonly isDisabled: boolean;
        public isEqualNode(otherNode: IHTMLDOMNode3): boolean;
        public readonly isMultiLine: boolean;
        public isSameNode(otherNode: IHTMLDOMNode3): boolean;
        public isSupported(feature: string, version: any): boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public readonly localName: any;
        public lookupNamespaceURI(pvarPrefix: any): any;
        public lookupPrefix(pvarNamespaceURI: any): any;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly namespaceURI: any;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public prefix: any;
        public readonly previousSibling: IHTMLDOMNode;
        public querySelector(v: string): IHTMLElement;
        public querySelectorAll(v: string): IHTMLDOMChildrenCollection;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public textContent: any;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLLIElement {
        private 'MSHTML.HTMLLIElement_typekey': HTMLLIElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public title: string;
        public toString(): string;
        public type: string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public value: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLLinkElement {
        private 'MSHTML.HTMLLinkElement_typekey': HTMLLinkElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public charset: string;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public href: string;
        public hreflang: string;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_href: string;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public media: string;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public rel: string;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public rev: string;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sheet: IHTMLStyleSheet;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public readonly styleSheet: IHTMLStyleSheet;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public target: string;
        public title: string;
        public toString(): string;
        public type: string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLListElement {
        private 'MSHTML.HTMLListElement_typekey': HTMLListElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public compact: boolean;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLLocation {
        private 'MSHTML.HTMLLocation_typekey': HTMLLocation;
        private constructor();
        public assign(bstr: string): void;
        public readonly 'constructor': any;
        public hash: string;
        public host: string;
        public hostname: string;
        public href: string;
        public pathname: string;
        public port: string;
        public protocol: string;

        /** @param boolean [flag=false] */
        public reload(flag?: boolean): void;
        public replace(bstr: string): void;
        public search: string;
        public toString(): string;
    }

    class HTMLMapElement {
        private 'MSHTML.HTMLMapElement_typekey': HTMLMapElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public readonly areas: IHTMLAreasCollection;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public name: string;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLMarqueeElement {
        private 'MSHTML.HTMLMarqueeElement_typekey': HTMLMarqueeElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public behavior: string;
        public readonly behaviorUrns: any;
        public bgColor: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public compareDocumentPosition(otherNode: IHTMLDOMNode): number;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public dataFld: string;
        public dataFormatAs: string;
        public dataSrc: string;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public direction: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public height: any;
        public hideFocus: boolean;
        public hspace: number;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public ie9_insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public isDefaultNamespace(pvarNamespace: any): boolean;
        public readonly isDisabled: boolean;
        public isEqualNode(otherNode: IHTMLDOMNode3): boolean;
        public readonly isMultiLine: boolean;
        public isSameNode(otherNode: IHTMLDOMNode3): boolean;
        public isSupported(feature: string, version: any): boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public readonly localName: any;
        public lookupNamespaceURI(pvarPrefix: any): any;
        public lookupPrefix(pvarNamespaceURI: any): any;
        public loop: number;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly namespaceURI: any;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public onbounce: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfinish: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onstart: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public prefix: any;
        public readonly previousSibling: IHTMLDOMNode;
        public querySelector(v: string): IHTMLElement;
        public querySelectorAll(v: string): IHTMLDOMChildrenCollection;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public scrollAmount: number;
        public scrollDelay: number;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public start(): void;
        public stop(): void;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public textContent: any;
        public title: string;
        public toString(): string;
        public trueSpeed: boolean;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public vspace: number;
        public width: any;
        public xmsAcceleratorKey: string;
    }

    class HTMLMediaElement {
        private 'MSHTML.HTMLMediaElement_typekey': HTMLMediaElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public autobuffer: boolean;
        public autoplay: boolean;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly buffered: IHTMLTimeRanges;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public canPlayType(type: string): string;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public compareDocumentPosition(otherNode: IHTMLDOMNode): number;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public controls: boolean;
        public createControlRange(): any;
        public readonly currentSrc: string;
        public readonly currentStyle: IHTMLCurrentStyle;
        public currentTime: number;
        public currentTimeDouble: number;
        public dataFld: string;
        public dataFormatAs: string;
        public dataSrc: string;
        public defaultPlaybackRate: number;
        public defaultPlaybackRateDouble: number;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly duration: number;
        public readonly durationDouble: number;
        public readonly ended: boolean;
        public readonly error: IHTMLMediaError;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public ie9_insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public readonly initialTime: number;
        public readonly initialTimeDouble: number;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public isDefaultNamespace(pvarNamespace: any): boolean;
        public readonly isDisabled: boolean;
        public isEqualNode(otherNode: IHTMLDOMNode3): boolean;
        public readonly isMultiLine: boolean;
        public isSameNode(otherNode: IHTMLDOMNode3): boolean;
        public isSupported(feature: string, version: any): boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public load(): void;
        public readonly localName: any;
        public lookupNamespaceURI(pvarPrefix: any): any;
        public lookupPrefix(pvarNamespaceURI: any): any;
        public loop: boolean;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msPlayToDisabled: boolean;
        public msPlayToPrimary: boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public muted: boolean;
        public readonly namespaceURI: any;
        public readonly networkState: number;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public pause(): void;
        public readonly paused: boolean;
        public play(): void;
        public playbackRate: number;
        public playbackRateDouble: number;
        public readonly played: IHTMLTimeRanges;
        public prefix: any;
        public preload: string;
        public readonly previousSibling: IHTMLDOMNode;
        public querySelector(v: string): IHTMLElement;
        public querySelectorAll(v: string): IHTMLDOMChildrenCollection;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public readonly seekable: IHTMLTimeRanges;
        public readonly seeking: boolean;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public src: string;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public textContent: any;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public volume: number;
        public volumeDouble: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLMediaError {
        private 'MSHTML.HTMLMediaError_typekey': HTMLMediaError;
        private constructor();
        public readonly code: number;
    }

    class HTMLMetaElement {
        private 'MSHTML.HTMLMetaElement_typekey': HTMLMetaElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public charset: string;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public content: string;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public httpEquiv: string;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_url: string;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public name: string;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public scheme: string;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public url: string;
        public xmsAcceleratorKey: string;
    }

    class HTMLMSCSSKeyframeRule {
        private 'MSHTML.HTMLMSCSSKeyframeRule_typekey': HTMLMSCSSKeyframeRule;
        private constructor();
        public cssText: string;
        public keyText: string;
        public readonly parentRule: IHTMLCSSRule;
        public readonly parentStyleSheet: IHTMLStyleSheet;
        public readonly style: IHTMLRuleStyle;
        public readonly type: number;
    }

    class HTMLMSCSSKeyframesRule {
        private 'MSHTML.HTMLMSCSSKeyframesRule_typekey': HTMLMSCSSKeyframesRule;
        private constructor();
        public appendRule(bstrRule: string): void;
        public readonly cssRules: IHTMLStyleSheetRulesCollection;
        public cssText: string;
        public deleteRule(bstrKey: string): void;
        public findRule(bstrKey: string): IHTMLMSCSSKeyframeRule;
        public name: string;
        public readonly parentRule: IHTMLCSSRule;
        public readonly parentStyleSheet: IHTMLStyleSheet;
        public readonly type: number;
    }

    class HTMLNamespace {
        private 'MSHTML.HTMLNamespace_typekey': HTMLNamespace;
        private constructor();
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly 'constructor': any;
        public detachEvent(event: string, pdisp: any): void;
        public doImport(bstrImplementationUrl: string): void;
        public readonly name: string;
        public onreadystatechange: any;
        public readonly readyState: any;
        public readonly tagNames: any;
        public readonly urn: string;
    }

    class HTMLNamespaceCollection {
        private 'MSHTML.HTMLNamespaceCollection_typekey': HTMLNamespaceCollection;
        private constructor();
        public add(bstrNamespace: string, bstrUrn: string, implementationUrl?: any): any;
        public readonly 'constructor': any;
        public item(index: any): any;
        public readonly length: number;
    }

    class HTMLNavigator {
        private 'MSHTML.HTMLNavigator_typekey': HTMLNavigator;
        private constructor();
        public readonly appCodeName: string;
        public readonly appMinorVersion: string;
        public readonly appName: string;
        public readonly appVersion: string;
        public readonly browserLanguage: string;
        public readonly connectionSpeed: number;
        public readonly 'constructor': any;
        public readonly cookieEnabled: boolean;
        public readonly cpuClass: string;
        public readonly geolocation: IWebGeolocation;
        public javaEnabled(): boolean;
        public readonly mimeTypes: CMimeTypes;
        public readonly msDoNotTrack: string;
        public readonly onLine: boolean;
        public readonly opsProfile: COpsProfile;
        public readonly platform: string;
        public readonly plugins: IHTMLPluginsCollection;
        public readonly systemLanguage: string;
        public taintEnabled(): boolean;
        public toString(): string;
        public readonly userAgent: string;
        public readonly userLanguage: string;
        public readonly userProfile: COpsProfile;
    }

    class HTMLNextIdElement {
        private 'MSHTML.HTMLNextIdElement_typekey': HTMLNextIdElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public n: string;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLNoShowElement {
        private 'MSHTML.HTMLNoShowElement_typekey': HTMLNoShowElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLObjectElement {
        private 'MSHTML.HTMLObjectElement_typekey': HTMLObjectElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public align: string;
        public readonly all: any;
        public alt: string;
        public altHtml: string;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public archive: string;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly BaseHref: string;
        public readonly behaviorUrns: any;
        public blur(): void;
        public border: any;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public classid: string;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public code: string;
        public codeBase: string;
        public codeType: string;
        public compareDocumentPosition(otherNode: IHTMLDOMNode): number;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public readonly contentDocument: any;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public data: string;
        public dataFld: string;
        public dataFormatAs: string;
        public dataSrc: string;
        public declare: boolean;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public readonly form: IHTMLFormElement;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public getSVGDocument(): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public height: any;
        public hideFocus: boolean;
        public hspace: number;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_codeBase: string;
        public ie8_data: string;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public ie9_insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly ie9_nodeName: string;
        public ie9_object: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public isDefaultNamespace(pvarNamespace: any): boolean;
        public readonly isDisabled: boolean;
        public isEqualNode(otherNode: IHTMLDOMNode3): boolean;
        public readonly isMultiLine: boolean;
        public isSameNode(otherNode: IHTMLDOMNode3): boolean;
        public isSupported(feature: string, version: any): boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public readonly localName: any;
        public lookupNamespaceURI(pvarPrefix: any): any;
        public lookupPrefix(pvarNamespaceURI: any): any;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public name: string;
        public namedRecordset(dataMember: string, hierarchy?: any): any;
        public readonly namespaceURI: any;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly object: any;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public prefix: any;
        public readonly previousSibling: IHTMLDOMNode;
        public querySelector(v: string): IHTMLElement;
        public querySelectorAll(v: string): IHTMLDOMChildrenCollection;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public recordset: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public standby: string;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public textContent: any;
        public title: string;
        public toString(): string;
        public type: string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public useMap: string;
        public vspace: number;
        public width: any;
        public xmsAcceleratorKey: string;
    }

    class HTMLOListElement {
        private 'MSHTML.HTMLOListElement_typekey': HTMLOListElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public compact: boolean;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public start: number;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public title: string;
        public toString(): string;
        public type: string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLOptionButtonElement {
        private 'MSHTML.HTMLOptionButtonElement_typekey': HTMLOptionButtonElement;
        private constructor();
        public accessKey: string;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public blur(): void;
        public checked: boolean;
        public readonly children: any;
        public className: string;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public contains(pChild: IHTMLElement): boolean;
        public dataFld: string;
        public dataFormatAs: string;
        public dataSrc: string;
        public defaultChecked: boolean;
        public disabled: boolean;
        public readonly document: any;
        public readonly filters: IHTMLFiltersCollection;
        public focus(): void;
        public readonly form: IHTMLFormElement;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public id: string;
        public indeterminate: boolean;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public name: string;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onafterupdate: any;
        public onbeforeupdate: any;
        public onblur: any;
        public onchange: any;
        public onclick: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondragstart: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onhelp: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onmousedown: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onresize: any;
        public onrowenter: any;
        public onrowexit: any;
        public onselectstart: any;
        public outerHTML: string;
        public outerText: string;
        public readonly parentElement: IHTMLElement;
        public readonly parentTextEdit: IHTMLElement;
        public readonly recordNumber: any;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeFilter(pUnk: any): void;
        public scrollIntoView(varargStart?: any): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public readonly sourceIndex: number;
        public status: boolean;
        public readonly style: IHTMLStyle;
        public tabIndex: number;
        public readonly tagName: string;
        public title: string;
        public toString(): string;
        public readonly type: string;
        public value: string;
    }

    class HTMLOptionElement {
        private 'MSHTML.HTMLOptionElement_typekey': HTMLOptionElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public compareDocumentPosition(otherNode: IHTMLDOMNode): number;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public dataFld: string;
        public dataFormatAs: string;
        public dataSrc: string;
        public defaultSelected: boolean;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public readonly form: IHTMLFormElement;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public ie9_insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public ie9_value: string;
        public index: number;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public isDefaultNamespace(pvarNamespace: any): boolean;
        public readonly isDisabled: boolean;
        public isEqualNode(otherNode: IHTMLDOMNode3): boolean;
        public readonly isMultiLine: boolean;
        public isSameNode(otherNode: IHTMLDOMNode3): boolean;
        public isSupported(feature: string, version: any): boolean;
        public readonly isTextEdit: boolean;
        public label: string;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public readonly localName: any;
        public lookupNamespaceURI(pvarPrefix: any): any;
        public lookupPrefix(pvarNamespaceURI: any): any;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly namespaceURI: any;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public prefix: any;
        public readonly previousSibling: IHTMLDOMNode;
        public querySelector(v: string): IHTMLElement;
        public querySelectorAll(v: string): IHTMLDOMChildrenCollection;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public selected: boolean;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public text: string;
        public textContent: any;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public value: string;
        public xmsAcceleratorKey: string;
    }

    class HTMLOptionElementFactory {
        private 'MSHTML.HTMLOptionElementFactory_typekey': HTMLOptionElementFactory;
        private constructor();
        public create(text?: any, value?: any, defaultSelected?: any, selected?: any): IHTMLOptionElement;
    }

    class HTMLParaElement {
        private 'MSHTML.HTMLParaElement_typekey': HTMLParaElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public align: string;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clear: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLParamElement {
        private 'MSHTML.HTMLParamElement_typekey': HTMLParamElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_valueType: string;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public name: string;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public title: string;
        public toString(): string;
        public type: string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public value: string;
        public valueType: string;
        public xmsAcceleratorKey: string;
    }

    class HTMLPerformance {
        private 'MSHTML.HTMLPerformance_typekey': HTMLPerformance;
        private constructor();
        public readonly navigation: IHTMLPerformanceNavigation;
        public readonly timing: IHTMLPerformanceTiming;
        public toJSON(): any;
        public toString(): string;
    }

    class HTMLPerformanceNavigation {
        private 'MSHTML.HTMLPerformanceNavigation_typekey': HTMLPerformanceNavigation;
        private constructor();
        public readonly redirectCount: number;
        public toJSON(): any;
        public toString(): string;
        public readonly type: number;
    }

    class HTMLPerformanceTiming {
        private 'MSHTML.HTMLPerformanceTiming_typekey': HTMLPerformanceTiming;
        private constructor();
        public readonly connectEnd: number;
        public readonly connectStart: number;
        public readonly domainLookupEnd: number;
        public readonly domainLookupStart: number;
        public readonly domComplete: number;
        public readonly domContentLoadedEventEnd: number;
        public readonly domContentLoadedEventStart: number;
        public readonly domInteractive: number;
        public readonly domLoading: number;
        public readonly fetchStart: number;
        public readonly loadEventEnd: number;
        public readonly loadEventStart: number;
        public readonly msFirstPaint: number;
        public readonly navigationStart: number;
        public readonly redirectEnd: number;
        public readonly redirectStart: number;
        public readonly requestStart: number;
        public readonly responseEnd: number;
        public readonly responseStart: number;
        public toJSON(): any;
        public toString(): string;
        public readonly unloadEventEnd: number;
        public readonly unloadEventStart: number;
    }

    class HTMLPhraseElement {
        private 'MSHTML.HTMLPhraseElement_typekey': HTMLPhraseElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public cite: string;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public dateTime: string;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_cite: string;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLPopup {
        private 'MSHTML.HTMLPopup_typekey': HTMLPopup;
        private constructor();
        public readonly 'constructor': any;
        public readonly document: IHTMLDocument;
        public Hide(): void;
        public readonly isOpen: boolean;
        public Show(x: number, y: number, w: number, h: number, pElement: any): void;
    }

    class HTMLProgressElement {
        private 'MSHTML.HTMLProgressElement_typekey': HTMLProgressElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public compareDocumentPosition(otherNode: IHTMLDOMNode): number;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public dataFld: string;
        public dataFormatAs: string;
        public dataSrc: string;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public readonly form: IHTMLFormElement;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public ie9_insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public isDefaultNamespace(pvarNamespace: any): boolean;
        public readonly isDisabled: boolean;
        public isEqualNode(otherNode: IHTMLDOMNode3): boolean;
        public readonly isMultiLine: boolean;
        public isSameNode(otherNode: IHTMLDOMNode3): boolean;
        public isSupported(feature: string, version: any): boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public readonly localName: any;
        public lookupNamespaceURI(pvarPrefix: any): any;
        public lookupPrefix(pvarNamespaceURI: any): any;
        public max: number;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly namespaceURI: any;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly position: number;
        public prefix: any;
        public readonly previousSibling: IHTMLDOMNode;
        public querySelector(v: string): IHTMLElement;
        public querySelectorAll(v: string): IHTMLDOMChildrenCollection;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public textContent: any;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public value: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLRenderStyle {
        private 'MSHTML.HTMLRenderStyle_typekey': HTMLRenderStyle;
        private constructor();
        public defaultTextSelection: string;
        public renderingPriority: number;
        public textBackgroundColor: any;
        public textColor: any;
        public textDecoration: string;
        public textDecorationColor: any;
        public textEffect: string;
        public textLineThroughStyle: string;
        public textUnderlineStyle: string;
    }

    class HTMLRichtextElement {
        private 'MSHTML.HTMLRichtextElement_typekey': HTMLRichtextElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public cols: number;
        public compareDocumentPosition(otherNode: IHTMLDOMNode): number;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public createTextRange(): IHTMLTxtRange;
        public readonly currentStyle: IHTMLCurrentStyle;
        public dataFld: string;
        public dataFormatAs: string;
        public dataSrc: string;
        public defaultValue: string;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public readonly form: IHTMLFormElement;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public ie9_insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public isDefaultNamespace(pvarNamespace: any): boolean;
        public readonly isDisabled: boolean;
        public isEqualNode(otherNode: IHTMLDOMNode3): boolean;
        public readonly isMultiLine: boolean;
        public isSameNode(otherNode: IHTMLDOMNode3): boolean;
        public isSupported(feature: string, version: any): boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public readonly localName: any;
        public lookupNamespaceURI(pvarPrefix: any): any;
        public lookupPrefix(pvarNamespaceURI: any): any;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public name: string;
        public readonly namespaceURI: any;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public prefix: any;
        public readonly previousSibling: IHTMLDOMNode;
        public querySelector(v: string): IHTMLElement;
        public querySelectorAll(v: string): IHTMLDOMChildrenCollection;
        public readOnly: boolean;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public rows: number;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public select(): void;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public status: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public textContent: any;
        public title: string;
        public toString(): string;
        public readonly type: string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public value: string;
        public wrap: string;
        public xmsAcceleratorKey: string;
    }

    class HTMLRuleStyle {
        private 'MSHTML.HTMLRuleStyle_typekey': HTMLRuleStyle;
        private constructor();
        public accelerator: string;
        public alignContent: string;
        public alignItems: string;
        public alignSelf: string;
        public animation: string;
        public animationDelay: string;
        public animationDirection: string;
        public animationDuration: string;
        public animationFillMode: string;
        public animationIterationCount: string;
        public animationName: string;
        public animationPlayState: string;
        public animationTimingFunction: string;
        public backfaceVisibility: string;
        public background: string;
        public backgroundAttachment: string;
        public backgroundColor: any;
        public backgroundImage: string;
        public backgroundPosition: string;
        public backgroundPositionX: any;
        public backgroundPositionY: any;
        public backgroundRepeat: string;
        public behavior: string;
        public border: string;
        public borderBottom: string;
        public borderBottomColor: any;
        public borderBottomStyle: string;
        public borderBottomWidth: any;
        public borderCollapse: string;
        public borderColor: string;
        public borderImage: string;
        public borderImageOutset: string;
        public borderImageRepeat: string;
        public borderImageSlice: string;
        public borderImageSource: string;
        public borderImageWidth: string;
        public borderLeft: string;
        public borderLeftColor: any;
        public borderLeftStyle: string;
        public borderLeftWidth: any;
        public borderRight: string;
        public borderRightColor: any;
        public borderRightStyle: string;
        public borderRightWidth: any;
        public borderSpacing: string;
        public borderStyle: string;
        public borderTop: string;
        public borderTopColor: any;
        public borderTopStyle: string;
        public borderTopWidth: any;
        public borderWidth: string;
        public bottom: any;
        public boxSizing: string;
        public breakAfter: string;
        public breakBefore: string;
        public breakInside: string;
        public captionSide: string;
        public clear: string;
        public clip: string;
        public color: any;
        public colorInterpolationFilters: string;
        public columnCount: any;
        public columnFill: string;
        public columnGap: any;
        public columnRule: string;
        public columnRuleColor: any;
        public columnRuleStyle: string;
        public columnRuleWidth: any;
        public columns: string;
        public columnSpan: string;
        public columnWidth: any;
        public readonly 'constructor': any;
        public content: string;
        public counterIncrement: string;
        public counterReset: string;
        public cssText: string;
        public cursor: string;
        public direction: string;
        public display: string;
        public emptyCells: string;
        public enableBackground: string;
        public filter: string;
        public flex: string;
        public flexBasis: any;
        public flexDirection: string;
        public flexFlow: string;
        public flexGrow: any;
        public flexShrink: any;
        public flexWrap: string;
        public floodColor: any;
        public floodOpacity: any;
        public font: string;
        public fontFamily: string;
        public fontFeatureSettings: string;
        public fontSize: any;
        public fontStyle: string;
        public fontVariant: string;
        public fontWeight: string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getPropertyPriority(bstrPropertyName: string): string;
        public getPropertyValue(bstrPropertyName: string): string;
        public height: any;
        public imeMode: string;
        public item(index: number): string;
        public justifyContent: string;
        public layoutFlow: string;
        public layoutGrid: string;
        public layoutGridChar: any;
        public layoutGridLine: any;
        public layoutGridMode: string;
        public layoutGridType: string;
        public left: any;
        public readonly length: number;
        public letterSpacing: any;
        public lightingColor: any;
        public lineBreak: string;
        public lineHeight: any;
        public listStyle: string;
        public listStyleImage: string;
        public listStylePosition: string;
        public listStyleType: string;
        public margin: string;
        public marginBottom: any;
        public marginLeft: any;
        public marginRight: any;
        public marginTop: any;
        public maxHeight: any;
        public maxWidth: any;
        public minHeight: any;
        public minWidth: any;
        public msAnimation: string;
        public msAnimationDelay: string;
        public msAnimationDirection: string;
        public msAnimationDuration: string;
        public msAnimationFillMode: string;
        public msAnimationIterationCount: string;
        public msAnimationName: string;
        public msAnimationPlayState: string;
        public msAnimationTimingFunction: string;
        public msBackfaceVisibility: string;
        public msBlockProgression: string;
        public msContentZoomChaining: string;
        public msContentZooming: string;
        public msContentZoomLimit: string;
        public msContentZoomLimitMax: any;
        public msContentZoomLimitMin: any;
        public msContentZoomSnap: string;
        public msContentZoomSnapPoints: string;
        public msContentZoomSnapType: string;
        public msFlex: string;
        public msFlexAlign: string;
        public msFlexDirection: string;
        public msFlexFlow: string;
        public msFlexItemAlign: string;
        public msFlexLinePack: string;
        public msFlexNegative: any;
        public msFlexOrder: any;
        public msFlexPack: string;
        public msFlexPositive: any;
        public msFlexPreferredSize: any;
        public msFlexWrap: string;
        public msFlowFrom: string;
        public msFlowInto: string;
        public msFontFeatureSettings: string;
        public msGetPropertyEnabled(name: string): boolean;
        public msGridColumn: any;
        public msGridColumnAlign: string;
        public msGridColumns: string;
        public msGridColumnSpan: any;
        public msGridRow: any;
        public msGridRowAlign: string;
        public msGridRows: string;
        public msGridRowSpan: any;
        public msHighContrastAdjust: string;
        public msHyphenateLimitChars: string;
        public msHyphenateLimitLines: any;
        public msHyphenateLimitZone: any;
        public msHyphens: string;
        public msImeAlign: string;
        public msInterpolationMode: string;
        public msOverflowStyle: string;
        public msPerspective: any;
        public msPerspectiveOrigin: string;
        public msPutPropertyEnabled(name: string, b: boolean): void;
        public msScrollChaining: string;
        public msScrollLimit: string;
        public msScrollLimitXMax: any;
        public msScrollLimitXMin: any;
        public msScrollLimitYMax: any;
        public msScrollLimitYMin: any;
        public msScrollRails: string;
        public msScrollSnapPointsX: string;
        public msScrollSnapPointsY: string;
        public msScrollSnapType: string;
        public msScrollSnapX: string;
        public msScrollSnapY: string;
        public msScrollTranslation: string;
        public msTextCombineHorizontal: string;
        public msTextSizeAdjust: any;
        public msTouchAction: string;
        public msTouchSelect: string;
        public msTransformStyle: string;
        public msTransition: string;
        public msTransitionDelay: string;
        public msTransitionDuration: string;
        public msTransitionProperty: string;
        public msTransitionTimingFunction: string;
        public msUserSelect: string;
        public msWrapFlow: string;
        public msWrapMargin: any;
        public msWrapThrough: string;
        public orphans: any;
        public outline: string;
        public outlineColor: any;
        public outlineStyle: string;
        public outlineWidth: any;
        public overflow: string;
        public overflowX: string;
        public overflowY: string;
        public padding: string;
        public paddingBottom: any;
        public paddingLeft: any;
        public paddingRight: any;
        public paddingTop: any;
        public pageBreakAfter: string;
        public pageBreakBefore: string;
        public pageBreakInside: string;
        public readonly parentRule: any;
        public perspective: any;
        public perspectiveOrigin: string;
        public pixelBottom: number;
        public pixelRight: number;
        public posBottom: number;
        public position: string;
        public posRight: number;
        public quotes: string;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeProperty(bstrPropertyName: string): string;
        public right: any;
        public rubyAlign: string;
        public rubyOverhang: string;
        public rubyPosition: string;
        public scrollbar3dLightColor: any;
        public scrollbarArrowColor: any;
        public scrollbarBaseColor: any;
        public scrollbarDarkShadowColor: any;
        public scrollbarFaceColor: any;
        public scrollbarHighlightColor: any;
        public scrollbarShadowColor: any;
        public scrollbarTrackColor: any;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;

        /** @param any [pvarPropertyPriority=''] */
        public setProperty(bstrPropertyName: string, pvarPropertyValue: any, pvarPropertyPriority?: any): void;
        public styleFloat: string;
        public tableLayout: string;
        public textAlign: string;
        public textAlignLast: string;
        public textAutospace: string;
        public textDecoration: string;
        public textDecorationBlink: boolean;
        public textDecorationLineThrough: boolean;
        public textDecorationNone: boolean;
        public textDecorationOverline: boolean;
        public textDecorationUnderline: boolean;
        public textIndent: any;
        public textJustify: string;
        public textJustifyTrim: string;
        public textKashida: any;
        public textKashidaSpace: any;
        public textOverflow: string;
        public textShadow: string;
        public textTransform: string;
        public textUnderlinePosition: string;
        public top: any;
        public touchAction: string;
        public transform: string;
        public transformOrigin: string;
        public transformStyle: string;
        public transition: string;
        public transitionDelay: string;
        public transitionDuration: string;
        public transitionProperty: string;
        public transitionTimingFunction: string;
        public unicodeBidi: string;
        public verticalAlign: any;
        public visibility: string;
        public webkitAnimation: string;
        public webkitAnimationDelay: string;
        public webkitAnimationDirection: string;
        public webkitAnimationDuration: string;
        public webkitAnimationFillMode: string;
        public webkitAnimationIterationCount: string;
        public webkitAnimationName: string;
        public webkitAnimationPlayState: string;
        public webkitAnimationTimingFunction: string;
        public webkitAppearance: string;
        public webkitBackfaceVisibility: string;
        public webkitBackground: string;
        public webkitBackgroundAttachment: string;
        public webkitBackgroundClip: string;
        public webkitBackgroundColor: any;
        public webkitBackgroundImage: string;
        public webkitBackgroundOrigin: string;
        public webkitBackgroundPosition: string;
        public webkitBackgroundPositionX: any;
        public webkitBackgroundPositionY: any;
        public webkitBackgroundRepeat: string;
        public webkitBackgroundSize: string;
        public webkitBorderImage: string;
        public webkitBorderImageOutset: string;
        public webkitBorderImageRepeat: string;
        public webkitBorderImageSlice: string;
        public webkitBorderImageSource: string;
        public webkitBorderImageWidth: string;
        public webkitBoxAlign: string;
        public webkitBoxDirection: string;
        public webkitBoxFlex: any;
        public webkitBoxOrdinalGroup: any;
        public webkitBoxOrient: string;
        public webkitBoxPack: string;
        public webkitBoxSizing: string;
        public webkitTextSizeAdjust: any;
        public webkitTransform: string;
        public webkitTransformOrigin: string;
        public webkitTransition: string;
        public webkitTransitionDelay: string;
        public webkitTransitionDuration: string;
        public webkitTransitionProperty: string;
        public webkitTransitionTimingFunction: string;
        public webkitUserSelect: string;
        public whiteSpace: string;
        public widows: any;
        public width: any;
        public wordBreak: string;
        public wordSpacing: any;
        public wordWrap: string;
        public writingMode: string;
        public zIndex: any;
        public zoom: any;
    }

    class HTMLScreen {
        private 'MSHTML.HTMLScreen_typekey': HTMLScreen;
        private constructor();
        public readonly availHeight: number;
        public readonly availWidth: number;
        public bufferDepth: number;
        public readonly colorDepth: number;
        public readonly 'constructor': any;
        public readonly deviceXDPI: number;
        public readonly deviceYDPI: number;
        public readonly fontSmoothingEnabled: boolean;
        public readonly height: number;
        public readonly logicalXDPI: number;
        public readonly logicalYDPI: number;
        public readonly pixelDepth: number;
        public readonly systemXDPI: number;
        public readonly systemYDPI: number;
        public updateInterval: number;
        public readonly width: number;
    }

    class HTMLScriptElement {
        private 'MSHTML.HTMLScriptElement_typekey': HTMLScriptElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public charset: string;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public defer: boolean;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public event: string;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public htmlFor: string;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_src: string;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public src: string;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public text: string;
        public title: string;
        public toString(): string;
        public type: string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public readonly usedCharset: string;
        public xmsAcceleratorKey: string;
    }

    class HTMLSelectElement {
        private 'MSHTML.HTMLSelectElement_typekey': HTMLSelectElement;
        private constructor();
        public accessKey: string;
        public add(element: IHTMLElement, before?: any): void;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public compareDocumentPosition(otherNode: IHTMLDOMNode): number;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public dataFld: string;
        public dataFormatAs: string;
        public dataSrc: string;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public readonly form: IHTMLFormElement;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public ie8_add(pElem: IHTMLOptionElement, pvarBefore: any): void;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_add(pElem: IHTMLOptionElement, pvarBefore: any): void;
        public ie9_appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public ie9_insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public ie9_value: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public isDefaultNamespace(pvarNamespace: any): boolean;
        public readonly isDisabled: boolean;
        public isEqualNode(otherNode: IHTMLDOMNode3): boolean;
        public readonly isMultiLine: boolean;
        public isSameNode(otherNode: IHTMLDOMNode3): boolean;
        public isSupported(feature: string, version: any): boolean;
        public readonly isTextEdit: boolean;
        public item(name?: any, index?: any): any;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public length: number;
        public readonly localName: any;
        public lookupNamespaceURI(pvarPrefix: any): any;
        public lookupPrefix(pvarNamespaceURI: any): any;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public multiple: boolean;
        public name: string;
        public namedItem(name: string): any;
        public readonly namespaceURI: any;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public readonly options: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public prefix: any;
        public readonly previousSibling: IHTMLDOMNode;
        public querySelector(v: string): IHTMLElement;
        public querySelectorAll(v: string): IHTMLDOMChildrenCollection;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [index=-1] */
        public remove(index?: number): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public selectedIndex: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public size: number;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tags(tagName: any): any;
        public tagUrn: string;
        public textContent: any;
        public title: string;
        public toString(): string;
        public readonly type: string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public urns(urn: any): any;
        public value: string;
        public xmsAcceleratorKey: string;
    }

    class HTMLSemanticElement {
        private 'MSHTML.HTMLSemanticElement_typekey': HTMLSemanticElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLSourceElement {
        private 'MSHTML.HTMLSourceElement_typekey': HTMLSourceElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public compareDocumentPosition(otherNode: IHTMLDOMNode): number;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public dataFld: string;
        public dataFormatAs: string;
        public dataSrc: string;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public ie9_insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public isDefaultNamespace(pvarNamespace: any): boolean;
        public readonly isDisabled: boolean;
        public isEqualNode(otherNode: IHTMLDOMNode3): boolean;
        public readonly isMultiLine: boolean;
        public isSameNode(otherNode: IHTMLDOMNode3): boolean;
        public isSupported(feature: string, version: any): boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public readonly localName: any;
        public lookupNamespaceURI(pvarPrefix: any): any;
        public lookupPrefix(pvarNamespaceURI: any): any;
        public media: string;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly namespaceURI: any;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public prefix: any;
        public readonly previousSibling: IHTMLDOMNode;
        public querySelector(v: string): IHTMLElement;
        public querySelectorAll(v: string): IHTMLDOMChildrenCollection;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public src: string;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public textContent: any;
        public title: string;
        public toString(): string;
        public type: string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLSpanElement {
        private 'MSHTML.HTMLSpanElement_typekey': HTMLSpanElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public compareDocumentPosition(otherNode: IHTMLDOMNode): number;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public dataFld: string;
        public dataFormatAs: string;
        public dataSrc: string;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public ie9_insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public isDefaultNamespace(pvarNamespace: any): boolean;
        public readonly isDisabled: boolean;
        public isEqualNode(otherNode: IHTMLDOMNode3): boolean;
        public readonly isMultiLine: boolean;
        public isSameNode(otherNode: IHTMLDOMNode3): boolean;
        public isSupported(feature: string, version: any): boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public readonly localName: any;
        public lookupNamespaceURI(pvarPrefix: any): any;
        public lookupPrefix(pvarNamespaceURI: any): any;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly namespaceURI: any;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public prefix: any;
        public readonly previousSibling: IHTMLDOMNode;
        public querySelector(v: string): IHTMLElement;
        public querySelectorAll(v: string): IHTMLDOMChildrenCollection;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public textContent: any;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLSpanFlow {
        private 'MSHTML.HTMLSpanFlow_typekey': HTMLSpanFlow;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public align: string;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public compareDocumentPosition(otherNode: IHTMLDOMNode): number;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public dataFld: string;
        public dataFormatAs: string;
        public dataSrc: string;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public ie9_insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public isDefaultNamespace(pvarNamespace: any): boolean;
        public readonly isDisabled: boolean;
        public isEqualNode(otherNode: IHTMLDOMNode3): boolean;
        public readonly isMultiLine: boolean;
        public isSameNode(otherNode: IHTMLDOMNode3): boolean;
        public isSupported(feature: string, version: any): boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public readonly localName: any;
        public lookupNamespaceURI(pvarPrefix: any): any;
        public lookupPrefix(pvarNamespaceURI: any): any;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly namespaceURI: any;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public prefix: any;
        public readonly previousSibling: IHTMLDOMNode;
        public querySelector(v: string): IHTMLElement;
        public querySelectorAll(v: string): IHTMLDOMChildrenCollection;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public textContent: any;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLStorage {
        private 'MSHTML.HTMLStorage_typekey': HTMLStorage;
        private constructor();
        public clear(): void;
        public readonly 'constructor': any;
        public getItem(bstrKey: string): any;
        public ie9_setItem(bstrKey: string, bstrValue: string): void;
        public key(lIndex: number): string;
        public readonly length: number;
        public readonly remainingSpace: number;
        public removeItem(bstrKey: string): void;
        public setItem(bstrKey: string, bstrValue: string): void;
    }

    class HTMLStyle {
        private 'MSHTML.HTMLStyle_typekey': HTMLStyle;
        private constructor();
        public accelerator: string;
        public alignContent: string;
        public alignItems: string;
        public alignSelf: string;
        public animation: string;
        public animationDelay: string;
        public animationDirection: string;
        public animationDuration: string;
        public animationFillMode: string;
        public animationIterationCount: string;
        public animationName: string;
        public animationPlayState: string;
        public animationTimingFunction: string;
        public backfaceVisibility: string;
        public background: string;
        public backgroundAttachment: string;
        public backgroundColor: any;
        public backgroundImage: string;
        public backgroundPosition: string;
        public backgroundPositionX: any;
        public backgroundPositionY: any;
        public backgroundRepeat: string;
        public behavior: string;
        public border: string;
        public borderBottom: string;
        public borderBottomColor: any;
        public borderBottomStyle: string;
        public borderBottomWidth: any;
        public borderCollapse: string;
        public borderColor: string;
        public borderImage: string;
        public borderImageOutset: string;
        public borderImageRepeat: string;
        public borderImageSlice: string;
        public borderImageSource: string;
        public borderImageWidth: string;
        public borderLeft: string;
        public borderLeftColor: any;
        public borderLeftStyle: string;
        public borderLeftWidth: any;
        public borderRight: string;
        public borderRightColor: any;
        public borderRightStyle: string;
        public borderRightWidth: any;
        public borderSpacing: string;
        public borderStyle: string;
        public borderTop: string;
        public borderTopColor: any;
        public borderTopStyle: string;
        public borderTopWidth: any;
        public borderWidth: string;
        public bottom: any;
        public boxSizing: string;
        public breakAfter: string;
        public breakBefore: string;
        public breakInside: string;
        public captionSide: string;
        public clear: string;
        public clip: string;
        public color: any;
        public colorInterpolationFilters: string;
        public columnCount: any;
        public columnFill: string;
        public columnGap: any;
        public columnRule: string;
        public columnRuleColor: any;
        public columnRuleStyle: string;
        public columnRuleWidth: any;
        public columns: string;
        public columnSpan: string;
        public columnWidth: any;
        public readonly 'constructor': any;
        public content: string;
        public counterIncrement: string;
        public counterReset: string;
        public cssText: string;
        public cursor: string;
        public direction: string;
        public display: string;
        public emptyCells: string;
        public enableBackground: string;
        public filter: string;
        public flex: string;
        public flexBasis: any;
        public flexDirection: string;
        public flexFlow: string;
        public flexGrow: any;
        public flexShrink: any;
        public flexWrap: string;
        public floodColor: any;
        public floodOpacity: any;
        public font: string;
        public fontFamily: string;
        public fontFeatureSettings: string;
        public fontSize: any;
        public fontStyle: string;
        public fontVariant: string;
        public fontWeight: string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getExpression(propname: string): any;
        public getPropertyPriority(bstrPropertyName: string): string;
        public getPropertyValue(bstrPropertyName: string): string;
        public height: any;
        public imeMode: string;
        public item(index: number): string;
        public justifyContent: string;
        public layoutFlow: string;
        public layoutGrid: string;
        public layoutGridChar: any;
        public layoutGridLine: any;
        public layoutGridMode: string;
        public layoutGridType: string;
        public left: any;
        public readonly length: number;
        public letterSpacing: any;
        public lightingColor: any;
        public lineBreak: string;
        public lineHeight: any;
        public listStyle: string;
        public listStyleImage: string;
        public listStylePosition: string;
        public listStyleType: string;
        public margin: string;
        public marginBottom: any;
        public marginLeft: any;
        public marginRight: any;
        public marginTop: any;
        public maxHeight: any;
        public maxWidth: any;
        public minHeight: any;
        public minWidth: any;
        public msAnimation: string;
        public msAnimationDelay: string;
        public msAnimationDirection: string;
        public msAnimationDuration: string;
        public msAnimationFillMode: string;
        public msAnimationIterationCount: string;
        public msAnimationName: string;
        public msAnimationPlayState: string;
        public msAnimationTimingFunction: string;
        public msBackfaceVisibility: string;
        public msBlockProgression: string;
        public msContentZoomChaining: string;
        public msContentZooming: string;
        public msContentZoomLimit: string;
        public msContentZoomLimitMax: any;
        public msContentZoomLimitMin: any;
        public msContentZoomSnap: string;
        public msContentZoomSnapPoints: string;
        public msContentZoomSnapType: string;
        public msFlex: string;
        public msFlexAlign: string;
        public msFlexDirection: string;
        public msFlexFlow: string;
        public msFlexItemAlign: string;
        public msFlexLinePack: string;
        public msFlexNegative: any;
        public msFlexOrder: any;
        public msFlexPack: string;
        public msFlexPositive: any;
        public msFlexPreferredSize: any;
        public msFlexWrap: string;
        public msFlowFrom: string;
        public msFlowInto: string;
        public msFontFeatureSettings: string;
        public msGetPropertyEnabled(name: string): boolean;
        public msGridColumn: any;
        public msGridColumnAlign: string;
        public msGridColumns: string;
        public msGridColumnSpan: any;
        public msGridRow: any;
        public msGridRowAlign: string;
        public msGridRows: string;
        public msGridRowSpan: any;
        public msHighContrastAdjust: string;
        public msHyphenateLimitChars: string;
        public msHyphenateLimitLines: any;
        public msHyphenateLimitZone: any;
        public msHyphens: string;
        public msImeAlign: string;
        public msInterpolationMode: string;
        public msOverflowStyle: string;
        public msPerspective: any;
        public msPerspectiveOrigin: string;
        public msPutPropertyEnabled(name: string, b: boolean): void;
        public msScrollChaining: string;
        public msScrollLimit: string;
        public msScrollLimitXMax: any;
        public msScrollLimitXMin: any;
        public msScrollLimitYMax: any;
        public msScrollLimitYMin: any;
        public msScrollRails: string;
        public msScrollSnapPointsX: string;
        public msScrollSnapPointsY: string;
        public msScrollSnapType: string;
        public msScrollSnapX: string;
        public msScrollSnapY: string;
        public msScrollTranslation: string;
        public msTextCombineHorizontal: string;
        public msTextSizeAdjust: any;
        public msTouchAction: string;
        public msTouchSelect: string;
        public msTransformStyle: string;
        public msTransition: string;
        public msTransitionDelay: string;
        public msTransitionDuration: string;
        public msTransitionProperty: string;
        public msTransitionTimingFunction: string;
        public msUserSelect: string;
        public msWrapFlow: string;
        public msWrapMargin: any;
        public msWrapThrough: string;
        public orphans: any;
        public outline: string;
        public outlineColor: any;
        public outlineStyle: string;
        public outlineWidth: any;
        public overflow: string;
        public overflowX: string;
        public overflowY: string;
        public padding: string;
        public paddingBottom: any;
        public paddingLeft: any;
        public paddingRight: any;
        public paddingTop: any;
        public pageBreakAfter: string;
        public pageBreakBefore: string;
        public pageBreakInside: string;
        public readonly parentRule: any;
        public perspective: any;
        public perspectiveOrigin: string;
        public pixelBottom: number;
        public pixelHeight: number;
        public pixelLeft: number;
        public pixelRight: number;
        public pixelTop: number;
        public pixelWidth: number;
        public posBottom: number;
        public posHeight: number;
        public position: string;
        public posLeft: number;
        public posRight: number;
        public posTop: number;
        public posWidth: number;
        public quotes: string;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeExpression(propname: string): boolean;
        public removeProperty(bstrPropertyName: string): string;
        public right: any;
        public rubyAlign: string;
        public rubyOverhang: string;
        public rubyPosition: string;
        public scrollbar3dLightColor: any;
        public scrollbarArrowColor: any;
        public scrollbarBaseColor: any;
        public scrollbarDarkShadowColor: any;
        public scrollbarFaceColor: any;
        public scrollbarHighlightColor: any;
        public scrollbarShadowColor: any;
        public scrollbarTrackColor: any;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;

        /** @param any [pvarPropertyPriority=''] */
        public setProperty(bstrPropertyName: string, pvarPropertyValue: any, pvarPropertyPriority?: any): void;
        public styleFloat: string;
        public tableLayout: string;
        public textAlign: string;
        public textAlignLast: string;
        public textAutospace: string;
        public textDecoration: string;
        public textDecorationBlink: boolean;
        public textDecorationLineThrough: boolean;
        public textDecorationNone: boolean;
        public textDecorationOverline: boolean;
        public textDecorationUnderline: boolean;
        public textIndent: any;
        public textJustify: string;
        public textJustifyTrim: string;
        public textKashida: any;
        public textKashidaSpace: any;
        public textOverflow: string;
        public textShadow: string;
        public textTransform: string;
        public textUnderlinePosition: string;
        public top: any;
        public toString(): string;
        public touchAction: string;
        public transform: string;
        public transformOrigin: string;
        public transformStyle: string;
        public transition: string;
        public transitionDelay: string;
        public transitionDuration: string;
        public transitionProperty: string;
        public transitionTimingFunction: string;
        public unicodeBidi: string;
        public verticalAlign: any;
        public visibility: string;
        public webkitAnimation: string;
        public webkitAnimationDelay: string;
        public webkitAnimationDirection: string;
        public webkitAnimationDuration: string;
        public webkitAnimationFillMode: string;
        public webkitAnimationIterationCount: string;
        public webkitAnimationName: string;
        public webkitAnimationPlayState: string;
        public webkitAnimationTimingFunction: string;
        public webkitAppearance: string;
        public webkitBackfaceVisibility: string;
        public webkitBackground: string;
        public webkitBackgroundAttachment: string;
        public webkitBackgroundClip: string;
        public webkitBackgroundColor: any;
        public webkitBackgroundImage: string;
        public webkitBackgroundOrigin: string;
        public webkitBackgroundPosition: string;
        public webkitBackgroundPositionX: any;
        public webkitBackgroundPositionY: any;
        public webkitBackgroundRepeat: string;
        public webkitBackgroundSize: string;
        public webkitBorderImage: string;
        public webkitBorderImageOutset: string;
        public webkitBorderImageRepeat: string;
        public webkitBorderImageSlice: string;
        public webkitBorderImageSource: string;
        public webkitBorderImageWidth: string;
        public webkitBoxAlign: string;
        public webkitBoxDirection: string;
        public webkitBoxFlex: any;
        public webkitBoxOrdinalGroup: any;
        public webkitBoxOrient: string;
        public webkitBoxPack: string;
        public webkitBoxSizing: string;
        public webkitTextSizeAdjust: any;
        public webkitTransform: string;
        public webkitTransformOrigin: string;
        public webkitTransition: string;
        public webkitTransitionDelay: string;
        public webkitTransitionDuration: string;
        public webkitTransitionProperty: string;
        public webkitTransitionTimingFunction: string;
        public webkitUserSelect: string;
        public whiteSpace: string;
        public widows: any;
        public width: any;
        public wordBreak: string;
        public wordSpacing: any;
        public wordWrap: string;
        public writingMode: string;
        public zIndex: any;
        public zoom: any;
    }

    class HTMLStyleElement {
        private 'MSHTML.HTMLStyleElement_typekey': HTMLStyleElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public media: string;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sheet: IHTMLStyleSheet;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public readonly styleSheet: IHTMLStyleSheet;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public title: string;
        public toString(): string;
        public type: string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLStyleFontFace {
        private 'MSHTML.HTMLStyleFontFace_typekey': HTMLStyleFontFace;
        private constructor();
        public cssText: string;
        public fontsrc: string;
        public readonly parentRule: IHTMLCSSRule;
        public readonly parentStyleSheet: IHTMLStyleSheet;
        public readonly style: IHTMLRuleStyle;
        public readonly type: number;
    }

    class HTMLStyleMedia {
        private 'MSHTML.HTMLStyleMedia_typekey': HTMLStyleMedia;
        private constructor();
        public matchMedium(mediaQuery: string): boolean;
        public readonly type: string;
    }

    class HTMLStyleSheet {
        private 'MSHTML.HTMLStyleSheet_typekey': HTMLStyleSheet;
        private constructor();

        /** @param number [lIndex=-1] */
        public addImport(bstrURL: string, lIndex?: number): number;

        /** @param number [lIndex=-1] */
        public addPageRule(bstrSelector: string, bstrStyle: string, lIndex?: number): number;

        /** @param number [lIndex=-1] */
        public addRule(bstrSelector: string, bstrStyle: string, lIndex?: number): number;
        public readonly 'constructor': any;
        public readonly cssRules: IHTMLStyleSheetRulesCollection;
        public cssText: string;

        /** @param number [lIndex=-1] */
        public deleteRule(lIndex?: number): void;
        public disabled: boolean;
        public href: string;
        public readonly id: string;
        public ie8_href: string;
        public readonly ie9_href: any;
        public readonly ie9_media: any;
        public readonly ie9_title: string;
        public readonly ie9_type: string;
        public readonly imports: IHTMLStyleSheetsCollection;

        /** @param number [lIndex=-1] */
        public insertRule(bstrRule: string, lIndex?: number): number;
        public readonly isAlternate: boolean;
        public readonly isPrefAlternate: boolean;
        public media: string;
        public readonly ownerNode: IHTMLElement;
        public readonly ownerRule: IHTMLCSSRule;
        public readonly owningElement: IHTMLElement;
        public readonly pages: IHTMLStyleSheetPagesCollection;
        public readonly parentStyleSheet: IHTMLStyleSheet;
        public readonly readOnly: boolean;
        public removeImport(lIndex: number): void;
        public removeRule(lIndex: number): void;
        public readonly rules: IHTMLStyleSheetRulesCollection;
        public title: string;
        public readonly type: string;
    }

    class HTMLStyleSheetPage {
        private 'MSHTML.HTMLStyleSheetPage_typekey': HTMLStyleSheetPage;
        private constructor();
        public readonly 'constructor': any;
        public cssText: string;
        public readonly parentRule: IHTMLCSSRule;
        public readonly parentStyleSheet: IHTMLStyleSheet;
        public readonly pseudoClass: string;
        public readonly selector: string;
        public selectorText: string;
        public readonly style: IHTMLRuleStyle;
        public readonly type: number;
    }

    class HTMLStyleSheetPagesCollection {
        private 'MSHTML.HTMLStyleSheetPagesCollection_typekey': HTMLStyleSheetPagesCollection;
        private constructor();
        public readonly 'constructor': any;
        public item(index: number): IHTMLStyleSheetPage;
        public readonly length: number;
    }

    class HTMLStyleSheetRule {
        private 'MSHTML.HTMLStyleSheetRule_typekey': HTMLStyleSheetRule;
        private constructor();
        public readonly 'constructor': any;
        public cssText: string;
        public ie9_selectorText: string;
        public msGetSpecificity(index: number): number;
        public readonly parentRule: IHTMLCSSRule;
        public readonly parentStyleSheet: IHTMLStyleSheet;
        public readonly readOnly: boolean;
        public selectorText: string;
        public readonly style: IHTMLRuleStyle;
        public readonly type: number;
    }

    class HTMLStyleSheetRulesAppliedCollection {
        private 'MSHTML.HTMLStyleSheetRulesAppliedCollection_typekey': HTMLStyleSheetRulesAppliedCollection;
        private constructor();
        public item(index: number): IHTMLStyleSheetRule;
        public readonly length: number;
        public propertyAppliedBy(name: string): IHTMLStyleSheetRule;
        public propertyAppliedTrace(name: string, index: number): IHTMLStyleSheetRule;
        public propertyAppliedTraceLength(name: string): number;
    }

    class HTMLStyleSheetRulesCollection {
        private 'MSHTML.HTMLStyleSheetRulesCollection_typekey': HTMLStyleSheetRulesCollection;
        private constructor();
        public readonly 'constructor': any;
        public ie9_item(index: number): IHTMLCSSRule;
        public readonly ie9_length: number;
        public item(index: number): IHTMLStyleSheetRule;
        public readonly length: number;
    }

    class HTMLStyleSheetsCollection {
        private 'MSHTML.HTMLStyleSheetsCollection_typekey': HTMLStyleSheetsCollection;
        private constructor();
        public readonly 'constructor': any;
        public ie9_item(index: number): any;
        public item(pvarIndex: any): any;
        public readonly length: number;
    }

    class HTMLTable {
        private 'MSHTML.HTMLTable_typekey': HTMLTable;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public align: string;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public background: string;
        public readonly behaviorUrns: any;
        public bgColor: any;
        public blur(): void;
        public border: any;
        public borderColor: any;
        public borderColorDark: any;
        public borderColorLight: any;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly caption: IHTMLTableCaption;
        public cellPadding: any;
        public readonly cells: IHTMLElementCollection;
        public cellSpacing: any;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public cols: number;
        public compareDocumentPosition(otherNode: IHTMLDOMNode): number;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createCaption(): IHTMLTableCaption;
        public createControlRange(): any;
        public createTBody(): IHTMLTableSection;
        public createTFoot(): any;
        public createTHead(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public dataFld: string;
        public dataFormatAs: string;
        public dataPageSize: number;
        public dataSrc: string;
        public deleteCaption(): void;

        /** @param number [index=-1] */
        public deleteRow(index?: number): void;
        public deleteTFoot(): void;
        public deleteTHead(): void;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public firstPage(): void;
        public focus(): void;
        public frame: string;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public height: any;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_caption: IHTMLTableCaption;

        /** @param number [index=-1] */
        public ie9_deleteRow(index?: number): void;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public ie9_insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;

        /** @param number [index=-1] */
        public ie9_insertRow(index?: number): any;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public ie9_tFoot: IHTMLTableSection;
        public ie9_tHead: IHTMLTableSection;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;

        /** @param number [index=-1] */
        public insertRow(index?: number): any;
        public readonly isContentEditable: boolean;
        public isDefaultNamespace(pvarNamespace: any): boolean;
        public readonly isDisabled: boolean;
        public isEqualNode(otherNode: IHTMLDOMNode3): boolean;
        public readonly isMultiLine: boolean;
        public isSameNode(otherNode: IHTMLDOMNode3): boolean;
        public isSupported(feature: string, version: any): boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public lastPage(): void;
        public readonly localName: any;
        public lookupNamespaceURI(pvarPrefix: any): any;
        public lookupPrefix(pvarNamespaceURI: any): any;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;

        /**
         * @param number [indexFrom=-1]
         * @param number [indexTo=-1]
         */
        public moveRow(indexFrom?: number, indexTo?: number): any;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly namespaceURI: any;
        public nextPage(): void;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public prefix: any;
        public previousPage(): void;
        public readonly previousSibling: IHTMLDOMNode;
        public querySelector(v: string): IHTMLElement;
        public querySelectorAll(v: string): IHTMLDOMChildrenCollection;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public refresh(): void;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly rows: IHTMLElementCollection;
        public rules: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public summary: string;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public readonly tBodies: IHTMLElementCollection;
        public textContent: any;
        public readonly tFoot: IHTMLTableSection;
        public readonly tHead: IHTMLTableSection;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public width: any;
        public xmsAcceleratorKey: string;
    }

    class HTMLTableCaption {
        private 'MSHTML.HTMLTableCaption_typekey': HTMLTableCaption;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public align: string;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public vAlign: string;
        public xmsAcceleratorKey: string;
    }

    class HTMLTableCell {
        private 'MSHTML.HTMLTableCell_typekey': HTMLTableCell;
        private constructor();
        public abbr: string;
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public align: string;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public axis: string;
        public background: string;
        public readonly behaviorUrns: any;
        public bgColor: any;
        public blur(): void;
        public borderColor: any;
        public borderColorDark: any;
        public borderColorLight: any;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly cellIndex: number;
        public ch: string;
        public readonly childNodes: any;
        public readonly children: any;
        public chOff: string;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public colSpan: number;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public headers: string;
        public height: any;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_ch: string;
        public ie9_chOff: string;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public noWrap: boolean;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public rowSpan: number;
        public readonly runtimeStyle: IHTMLStyle;
        public scope: string;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public vAlign: string;
        public width: any;
        public xmsAcceleratorKey: string;
    }

    class HTMLTableCol {
        private 'MSHTML.HTMLTableCol_typekey': HTMLTableCol;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public align: string;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public ch: string;
        public readonly childNodes: any;
        public readonly children: any;
        public chOff: string;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_ch: string;
        public ie9_chOff: string;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public span: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public vAlign: string;
        public width: any;
        public xmsAcceleratorKey: string;
    }

    class HTMLTableRow {
        private 'MSHTML.HTMLTableRow_typekey': HTMLTableRow;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public align: string;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public bgColor: any;
        public blur(): void;
        public borderColor: any;
        public borderColorDark: any;
        public borderColorLight: any;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly cells: IHTMLElementCollection;
        public ch: string;
        public readonly childNodes: any;
        public readonly children: any;
        public chOff: string;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;

        /** @param number [index=-1] */
        public deleteCell(index?: number): void;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public height: any;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_ch: string;
        public ie9_chOff: string;

        /** @param number [index=-1] */
        public ie9_deleteCell(index?: number): void;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;

        /** @param number [index=-1] */
        public ie9_insertCell(index?: number): any;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;

        /** @param number [index=-1] */
        public insertCell(index?: number): any;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly rowIndex: number;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public readonly sectionRowIndex: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public vAlign: string;
        public xmsAcceleratorKey: string;
    }

    class HTMLTableSection {
        private 'MSHTML.HTMLTableSection_typekey': HTMLTableSection;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public align: string;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public bgColor: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public ch: string;
        public readonly childNodes: any;
        public readonly children: any;
        public chOff: string;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;

        /** @param number [index=-1] */
        public deleteRow(index?: number): void;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_ch: string;
        public ie9_chOff: string;

        /** @param number [index=-1] */
        public ie9_deleteRow(index?: number): void;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;

        /** @param number [index=-1] */
        public ie9_insertRow(index?: number): any;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;

        /** @param number [index=-1] */
        public insertRow(index?: number): any;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;

        /**
         * @param number [indexFrom=-1]
         * @param number [indexTo=-1]
         */
        public moveRow(indexFrom?: number, indexTo?: number): any;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly rows: IHTMLElementCollection;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public vAlign: string;
        public xmsAcceleratorKey: string;
    }

    class HTMLTextAreaElement {
        private 'MSHTML.HTMLTextAreaElement_typekey': HTMLTextAreaElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public cols: number;
        public compareDocumentPosition(otherNode: IHTMLDOMNode): number;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public createTextRange(): IHTMLTxtRange;
        public readonly currentStyle: IHTMLCurrentStyle;
        public dataFld: string;
        public dataFormatAs: string;
        public dataSrc: string;
        public defaultValue: string;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public readonly form: IHTMLFormElement;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public ie9_insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public isDefaultNamespace(pvarNamespace: any): boolean;
        public readonly isDisabled: boolean;
        public isEqualNode(otherNode: IHTMLDOMNode3): boolean;
        public readonly isMultiLine: boolean;
        public isSameNode(otherNode: IHTMLDOMNode3): boolean;
        public isSupported(feature: string, version: any): boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public readonly localName: any;
        public lookupNamespaceURI(pvarPrefix: any): any;
        public lookupPrefix(pvarNamespaceURI: any): any;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public name: string;
        public readonly namespaceURI: any;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public prefix: any;
        public readonly previousSibling: IHTMLDOMNode;
        public querySelector(v: string): IHTMLElement;
        public querySelectorAll(v: string): IHTMLDOMChildrenCollection;
        public readOnly: boolean;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public rows: number;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public select(): void;
        public selectionEnd: number;
        public selectionStart: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public setSelectionRange(start: number, end: number): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public status: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public textContent: any;
        public title: string;
        public toString(): string;
        public readonly type: string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public value: string;
        public wrap: string;
        public xmsAcceleratorKey: string;
    }

    class HTMLTextElement {
        private 'MSHTML.HTMLTextElement_typekey': HTMLTextElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLTimeRanges {
        private 'MSHTML.HTMLTimeRanges_typekey': HTMLTimeRanges;
        private constructor();
        public end(index: number): number;
        public endDouble(index: number): number;
        public readonly length: number;
        public start(index: number): number;
        public startDouble(index: number): number;
    }

    class HTMLTitleElement {
        private 'MSHTML.HTMLTitleElement_typekey': HTMLTitleElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public text: string;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLUListElement {
        private 'MSHTML.HTMLUListElement_typekey': HTMLUListElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public compact: boolean;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public title: string;
        public toString(): string;
        public type: string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLUnknownElement {
        private 'MSHTML.HTMLUnknownElement_typekey': HTMLUnknownElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLUrnCollection {
        private 'MSHTML.HTMLUrnCollection_typekey': HTMLUrnCollection;
        private constructor();
        public readonly 'constructor': any;
        public item(index: number): string;
        public readonly length: number;
    }

    class HTMLVideoElement {
        private 'MSHTML.HTMLVideoElement_typekey': HTMLVideoElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public autobuffer: boolean;
        public autoplay: boolean;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly buffered: IHTMLTimeRanges;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public canPlayType(type: string): string;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public compareDocumentPosition(otherNode: IHTMLDOMNode): number;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public controls: boolean;
        public createControlRange(): any;
        public readonly currentSrc: string;
        public readonly currentStyle: IHTMLCurrentStyle;
        public currentTime: number;
        public currentTimeDouble: number;
        public dataFld: string;
        public dataFormatAs: string;
        public dataSrc: string;
        public defaultPlaybackRate: number;
        public defaultPlaybackRateDouble: number;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly duration: number;
        public readonly durationDouble: number;
        public readonly ended: boolean;
        public readonly error: IHTMLMediaError;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public height: number;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public ie9_insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public readonly initialTime: number;
        public readonly initialTimeDouble: number;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public isDefaultNamespace(pvarNamespace: any): boolean;
        public readonly isDisabled: boolean;
        public isEqualNode(otherNode: IHTMLDOMNode3): boolean;
        public readonly isMultiLine: boolean;
        public isSameNode(otherNode: IHTMLDOMNode3): boolean;
        public isSupported(feature: string, version: any): boolean;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public load(): void;
        public readonly localName: any;
        public lookupNamespaceURI(pvarPrefix: any): any;
        public lookupPrefix(pvarNamespaceURI: any): any;
        public loop: boolean;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msPlayToDisabled: boolean;
        public msPlayToPrimary: boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public muted: boolean;
        public readonly namespaceURI: any;
        public readonly networkState: number;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public pause(): void;
        public readonly paused: boolean;
        public play(): void;
        public playbackRate: number;
        public playbackRateDouble: number;
        public readonly played: IHTMLTimeRanges;
        public poster: string;
        public prefix: any;
        public preload: string;
        public readonly previousSibling: IHTMLDOMNode;
        public querySelector(v: string): IHTMLElement;
        public querySelectorAll(v: string): IHTMLDOMChildrenCollection;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public readonly seekable: IHTMLTimeRanges;
        public readonly seeking: boolean;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public src: string;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public textContent: any;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public readonly videoHeight: number;
        public readonly videoWidth: number;
        public volume: number;
        public volumeDouble: number;
        public width: number;
        public xmsAcceleratorKey: string;
    }

    class HTMLW3CComputedStyle {
        private 'MSHTML.HTMLW3CComputedStyle_typekey': HTMLW3CComputedStyle;
        private constructor();
        public accelerator: string;
        public alignContent: string;
        public alignItems: string;
        public alignmentBaseline: string;
        public alignSelf: string;
        public animation: string;
        public animationDelay: string;
        public animationDirection: string;
        public animationDuration: string;
        public animationFillMode: string;
        public animationIterationCount: string;
        public animationName: string;
        public animationPlayState: string;
        public animationTimingFunction: string;
        public backfaceVisibility: string;
        public background: string;
        public backgroundAttachment: string;
        public backgroundClip: string;
        public backgroundColor: any;
        public backgroundImage: string;
        public backgroundOrigin: string;
        public backgroundPosition: string;
        public backgroundPositionX: any;
        public backgroundPositionY: any;
        public backgroundRepeat: string;
        public backgroundSize: string;
        public baselineShift: any;
        public behavior: string;
        public border: string;
        public borderBottom: string;
        public borderBottomColor: any;
        public borderBottomLeftRadius: string;
        public borderBottomRightRadius: string;
        public borderBottomStyle: string;
        public borderBottomWidth: any;
        public borderCollapse: string;
        public borderColor: string;
        public borderImage: string;
        public borderImageOutset: string;
        public borderImageRepeat: string;
        public borderImageSlice: string;
        public borderImageSource: string;
        public borderImageWidth: string;
        public borderLeft: string;
        public borderLeftColor: any;
        public borderLeftStyle: string;
        public borderLeftWidth: any;
        public borderRadius: string;
        public borderRight: string;
        public borderRightColor: any;
        public borderRightStyle: string;
        public borderRightWidth: any;
        public borderSpacing: string;
        public borderStyle: string;
        public borderTop: string;
        public borderTopColor: any;
        public borderTopLeftRadius: string;
        public borderTopRightRadius: string;
        public borderTopStyle: string;
        public borderTopWidth: any;
        public borderWidth: string;
        public bottom: any;
        public boxShadow: string;
        public boxSizing: string;
        public breakAfter: string;
        public breakBefore: string;
        public breakInside: string;
        public captionSide: string;
        public clear: string;
        public clip: string;
        public readonly clipBottom: any;
        public clipLeft: any;
        public clipPath: string;
        public clipRight: any;
        public clipRule: string;
        public clipTop: any;
        public color: any;
        public colorInterpolationFilters: string;
        public columnCount: any;
        public columnFill: string;
        public columnGap: any;
        public columnRule: string;
        public columnRuleColor: any;
        public columnRuleStyle: string;
        public columnRuleWidth: any;
        public columns: string;
        public columnSpan: string;
        public columnWidth: any;
        public content: string;
        public counterIncrement: string;
        public counterReset: string;
        public cssFloat: string;
        public cssText: string;
        public cursor: string;
        public direction: string;
        public display: string;
        public dominantBaseline: string;
        public emptyCells: string;
        public enableBackground: string;
        public fill: string;
        public fillOpacity: any;
        public fillRule: string;
        public filter: string;
        public flex: string;
        public flexBasis: any;
        public flexDirection: string;
        public flexFlow: string;
        public flexGrow: any;
        public flexShrink: any;
        public flexWrap: string;
        public floodColor: any;
        public floodOpacity: any;
        public font: string;
        public fontFamily: string;
        public fontFeatureSettings: string;
        public fontSize: any;
        public fontSizeAdjust: any;
        public fontStretch: string;
        public fontStyle: string;
        public fontVariant: string;
        public fontWeight: string;
        public getPropertyPriority(bstrPropertyName: string): string;
        public getPropertyValue(bstrPropertyName: string): string;
        public glyphOrientationHorizontal: any;
        public glyphOrientationVertical: any;
        public height: any;
        public imeMode: string;
        public item(index: number): string;
        public justifyContent: string;
        public kerning: any;
        public layoutFlow: string;
        public layoutGrid: string;
        public layoutGridChar: any;
        public layoutGridLine: any;
        public layoutGridMode: string;
        public layoutGridType: string;
        public left: any;
        public readonly length: number;
        public letterSpacing: any;
        public lightingColor: any;
        public lineBreak: string;
        public lineHeight: any;
        public listStyle: string;
        public listStyleImage: string;
        public listStylePosition: string;
        public listStyleType: string;
        public margin: string;
        public marginBottom: any;
        public marginLeft: any;
        public marginRight: any;
        public marginTop: any;
        public marker: string;
        public markerEnd: string;
        public markerMid: string;
        public markerStart: string;
        public mask: string;
        public maxHeight: any;
        public maxWidth: any;
        public minHeight: any;
        public minWidth: any;
        public msAnimation: string;
        public msAnimationDelay: string;
        public msAnimationDirection: string;
        public msAnimationDuration: string;
        public msAnimationFillMode: string;
        public msAnimationIterationCount: string;
        public msAnimationName: string;
        public msAnimationPlayState: string;
        public msAnimationTimingFunction: string;
        public msBackfaceVisibility: string;
        public msBlockProgression: string;
        public msContentZoomChaining: string;
        public msContentZooming: string;
        public msContentZoomLimit: string;
        public msContentZoomLimitMax: any;
        public msContentZoomLimitMin: any;
        public msContentZoomSnap: string;
        public msContentZoomSnapPoints: string;
        public msContentZoomSnapType: string;
        public msFlex: string;
        public msFlexAlign: string;
        public msFlexDirection: string;
        public msFlexFlow: string;
        public msFlexItemAlign: string;
        public msFlexLinePack: string;
        public msFlexNegative: any;
        public msFlexOrder: any;
        public msFlexPack: string;
        public msFlexPositive: any;
        public msFlexPreferredSize: any;
        public msFlexWrap: string;
        public msFlowFrom: string;
        public msFlowInto: string;
        public msFontFeatureSettings: string;
        public msGridColumn: any;
        public msGridColumnAlign: string;
        public msGridColumns: string;
        public msGridColumnSpan: any;
        public msGridRow: any;
        public msGridRowAlign: string;
        public msGridRows: string;
        public msGridRowSpan: any;
        public msHighContrastAdjust: string;
        public msHyphenateLimitChars: string;
        public msHyphenateLimitLines: any;
        public msHyphenateLimitZone: any;
        public msHyphens: string;
        public msImeAlign: string;
        public msInterpolationMode: string;
        public msOverflowStyle: string;
        public msPerspective: any;
        public msPerspectiveOrigin: string;
        public msScrollChaining: string;
        public msScrollLimit: string;
        public msScrollLimitXMax: any;
        public msScrollLimitXMin: any;
        public msScrollLimitYMax: any;
        public msScrollLimitYMin: any;
        public msScrollRails: string;
        public msScrollSnapPointsX: string;
        public msScrollSnapPointsY: string;
        public msScrollSnapType: string;
        public msScrollSnapX: string;
        public msScrollSnapY: string;
        public msScrollTranslation: string;
        public msTextCombineHorizontal: string;
        public msTextSizeAdjust: any;
        public msTouchAction: string;
        public msTouchSelect: string;
        public msTransform: string;
        public msTransformOrigin: string;
        public msTransformStyle: string;
        public msTransition: string;
        public msTransitionDelay: string;
        public msTransitionDuration: string;
        public msTransitionProperty: string;
        public msTransitionTimingFunction: string;
        public msUserSelect: string;
        public msWrapFlow: string;
        public msWrapMargin: any;
        public msWrapThrough: string;
        public opacity: any;
        public orphans: any;
        public outline: string;
        public outlineColor: any;
        public outlineStyle: string;
        public outlineWidth: any;
        public overflow: string;
        public overflowX: string;
        public overflowY: string;
        public padding: string;
        public paddingBottom: any;
        public paddingLeft: any;
        public paddingRight: any;
        public paddingTop: any;
        public pageBreakAfter: string;
        public pageBreakBefore: string;
        public pageBreakInside: string;
        public readonly parentRule: any;
        public perspective: any;
        public perspectiveOrigin: string;
        public pointerEvents: string;
        public position: string;
        public quotes: string;
        public removeProperty(bstrPropertyName: string): string;
        public right: any;
        public rubyAlign: string;
        public rubyOverhang: string;
        public rubyPosition: string;
        public scrollbar3dLightColor: any;
        public scrollbarArrowColor: any;
        public scrollbarBaseColor: any;
        public scrollbarDarkShadowColor: any;
        public scrollbarFaceColor: any;
        public scrollbarHighlightColor: any;
        public scrollbarShadowColor: any;
        public scrollbarTrackColor: any;

        /** @param any [pvarPropertyPriority=''] */
        public setProperty(bstrPropertyName: string, pvarPropertyValue: any, pvarPropertyPriority?: any): void;
        public stopColor: any;
        public stopOpacity: any;
        public stroke: string;
        public strokeDasharray: string;
        public strokeDashoffset: any;
        public strokeLinecap: string;
        public strokeLinejoin: string;
        public strokeMiterlimit: any;
        public strokeOpacity: any;
        public strokeWidth: any;
        public styleFloat: string;
        public tableLayout: string;
        public textAlign: string;
        public textAlignLast: string;
        public textAnchor: string;
        public textAutospace: string;
        public textDecoration: string;
        public textIndent: any;
        public textJustify: string;
        public textJustifyTrim: string;
        public textKashida: any;
        public textKashidaSpace: any;
        public textOverflow: string;
        public textShadow: string;
        public textTransform: string;
        public textUnderlinePosition: string;
        public top: any;
        public touchAction: string;
        public transform: string;
        public transformOrigin: string;
        public transformStyle: string;
        public transition: string;
        public transitionDelay: string;
        public transitionDuration: string;
        public transitionProperty: string;
        public transitionTimingFunction: string;
        public unicodeBidi: string;
        public verticalAlign: any;
        public visibility: string;
        public webkitAnimation: string;
        public webkitAnimationDelay: string;
        public webkitAnimationDirection: string;
        public webkitAnimationDuration: string;
        public webkitAnimationFillMode: string;
        public webkitAnimationIterationCount: string;
        public webkitAnimationName: string;
        public webkitAnimationPlayState: string;
        public webkitAnimationTimingFunction: string;
        public webkitAppearance: string;
        public webkitBackfaceVisibility: string;
        public webkitBackground: string;
        public webkitBackgroundAttachment: string;
        public webkitBackgroundClip: string;
        public webkitBackgroundColor: any;
        public webkitBackgroundImage: string;
        public webkitBackgroundOrigin: string;
        public webkitBackgroundPosition: string;
        public webkitBackgroundPositionX: any;
        public webkitBackgroundPositionY: any;
        public webkitBackgroundRepeat: string;
        public webkitBackgroundSize: string;
        public webkitBorderImage: string;
        public webkitBorderImageOutset: string;
        public webkitBorderImageRepeat: string;
        public webkitBorderImageSlice: string;
        public webkitBorderImageSource: string;
        public webkitBorderImageWidth: string;
        public webkitBoxAlign: string;
        public webkitBoxDirection: string;
        public webkitBoxFlex: any;
        public webkitBoxOrdinalGroup: any;
        public webkitBoxOrient: string;
        public webkitBoxPack: string;
        public webkitBoxSizing: string;
        public webkitTextSizeAdjust: any;
        public webkitTransform: string;
        public webkitTransformOrigin: string;
        public webkitTransition: string;
        public webkitTransitionDelay: string;
        public webkitTransitionDuration: string;
        public webkitTransitionProperty: string;
        public webkitTransitionTimingFunction: string;
        public webkitUserSelect: string;
        public whiteSpace: string;
        public widows: any;
        public width: any;
        public wordBreak: string;
        public wordSpacing: any;
        public wordWrap: string;
        public writingMode: string;
        public zIndex: any;
        public zoom: any;
    }

    class HTMLWindow2 {
        private 'MSHTML.HTMLWindow2_typekey': HTMLWindow2;
        private constructor();
        public addEventListener(type: string, listener: any, useCapture: boolean): void;

        /** @param string [message=''] */
        public alert(message?: string): void;
        public readonly applicationCache: applicationCache;
        public attachEvent(event: string, pdisp: any): boolean;
        public blur(): void;
        public clearInterval(timerID: number): void;
        public clearTimeout(timerID: number): void;
        public readonly clientInformation: IOmNavigator;
        public readonly clipboardData: IHTMLDataTransfer;
        public close(): void;
        public readonly closed: boolean;

        /** @param string [message=''] */
        public confirm(message?: string): boolean;
        public readonly 'constructor': any;
        public createPopup(varArgIn?: any): any;
        public defaultStatus: string;
        public detachEvent(event: string, pdisp: any): void;
        public dispatchEvent(evt: IDOMEvent): boolean;
        public readonly document: IHTMLDocument2;
        public readonly event: IHTMLEventObj;

        /** @param string [language='JScript'] */
        public execScript(code: string, language?: string): any;
        public readonly external: any;
        public focus(): void;
        public readonly frameElement: IHTMLFrameBase;
        public readonly frames: FramesCollection;

        /** @param string [bstrPseudoElt=''] */
        public getComputedStyle(varArgIn: IHTMLDOMNode, bstrPseudoElt?: string): IHTMLCSSStyleDeclaration;
        public getSelection(): IHTMLSelection;
        public readonly history: IOmHistory;
        public readonly innerHeight: number;
        public readonly innerWidth: number;
        public item(pvarIndex: any): any;
        public readonly length: number;
        public readonly localStorage: IHTMLStorage;
        public readonly location: IHTMLLocation;
        public readonly maxConnectionsPerServer: number;
        public moveBy(x: number, y: number): void;
        public moveTo(x: number, y: number): void;
        public msWriteProfilerMark(bstrProfilerMarkName: string): void;
        public name: string;
        public navigate(url: string): void;
        public readonly navigator: IOmNavigator;
        public offscreenBuffering: any;
        public onabort: any;
        public onafterprint: any;
        public onbeforeprint: any;
        public onbeforeunload: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public ondblclick: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhashchange: any;
        public onhelp: any;
        public oninput: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onmessage: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsinertiastart: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onoffline: any;
        public ononline: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onpopstate: any;
        public onprogress: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onstalled: any;
        public onstorage: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onunload: any;
        public onvolumechange: any;
        public onwaiting: any;

        /**
         * @param string [url='']
         * @param string [name='']
         * @param string [features='']
         * @param boolean [replace=false]
         */
        public open(url?: string, name?: string, features?: string, replace?: boolean): IHTMLWindow2;
        public opener: any;
        public readonly outerHeight: number;
        public readonly outerWidth: number;
        public readonly pageXOffset: number;
        public readonly pageYOffset: number;
        public readonly parent: IHTMLWindow2;
        public performance: any;
        public postMessage(msg: string, targetOrigin?: any): void;
        public print(): void;

        /**
         * @param string [message='']
         * @param string [defstr='undefined']
         */
        public prompt(message?: string, defstr?: string): any;
        public removeEventListener(type: string, listener: any, useCapture: boolean): void;
        public resizeBy(x: number, y: number): void;
        public resizeTo(x: number, y: number): void;
        public readonly screen: IHTMLScreen;
        public readonly screenLeft: number;
        public readonly screenTop: number;
        public readonly screenX: number;
        public readonly screenY: number;
        public scroll(x: number, y: number): void;
        public scrollBy(x: number, y: number): void;
        public scrollTo(x: number, y: number): void;
        public readonly self: IHTMLWindow2;
        public readonly sessionStorage: IHTMLStorage;
        public setInterval(expression: any, msec: number, language?: any): number;
        public setTimeout(expression: any, msec: number, language?: any): number;

        /** @param string [features=''] */
        public showHelp(helpURL: string, helpArg: any, features?: string): void;
        public showModalDialog(dialog: string, varArgIn?: any, varOptions?: any): any;

        /** @param string [url=''] */
        public showModelessDialog(url?: string, varArgIn?: any, options?: any): IHTMLWindow2;
        public status: string;
        public readonly styleMedia: IHTMLStyleMedia;
        public readonly top: IHTMLWindow2;
        public toStaticHTML(bstrHTML: string): string;
        public toString(): string;
        public readonly window: IHTMLWindow2;
    }

    class HTMLWindowProxy {
        private 'MSHTML.HTMLWindowProxy_typekey': HTMLWindowProxy;
        private constructor();
        public addEventListener(type: string, listener: any, useCapture: boolean): void;

        /** @param string [message=''] */
        public alert(message?: string): void;
        public readonly applicationCache: applicationCache;
        public attachEvent(event: string, pdisp: any): boolean;
        public blur(): void;
        public clearInterval(timerID: number): void;
        public clearTimeout(timerID: number): void;
        public readonly clientInformation: IOmNavigator;
        public readonly clipboardData: IHTMLDataTransfer;
        public close(): void;
        public readonly closed: boolean;

        /** @param string [message=''] */
        public confirm(message?: string): boolean;
        public readonly 'constructor': any;
        public createPopup(varArgIn?: any): any;
        public defaultStatus: string;
        public detachEvent(event: string, pdisp: any): void;
        public dispatchEvent(evt: IDOMEvent): boolean;
        public readonly document: IHTMLDocument2;
        public readonly event: IHTMLEventObj;

        /** @param string [language='JScript'] */
        public execScript(code: string, language?: string): any;
        public readonly external: any;
        public focus(): void;
        public readonly frameElement: IHTMLFrameBase;
        public readonly frames: FramesCollection;

        /** @param string [bstrPseudoElt=''] */
        public getComputedStyle(varArgIn: IHTMLDOMNode, bstrPseudoElt?: string): IHTMLCSSStyleDeclaration;
        public getSelection(): IHTMLSelection;
        public readonly history: IOmHistory;
        public readonly innerHeight: number;
        public readonly innerWidth: number;
        public item(pvarIndex: any): any;
        public readonly length: number;
        public readonly localStorage: IHTMLStorage;
        public readonly location: IHTMLLocation;
        public readonly maxConnectionsPerServer: number;
        public moveBy(x: number, y: number): void;
        public moveTo(x: number, y: number): void;
        public msWriteProfilerMark(bstrProfilerMarkName: string): void;
        public name: string;
        public navigate(url: string): void;
        public readonly navigator: IOmNavigator;
        public offscreenBuffering: any;
        public onabort: any;
        public onafterprint: any;
        public onbeforeprint: any;
        public onbeforeunload: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public ondblclick: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhashchange: any;
        public onhelp: any;
        public oninput: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onmessage: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsinertiastart: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onoffline: any;
        public ononline: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onpopstate: any;
        public onprogress: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onstalled: any;
        public onstorage: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onunload: any;
        public onvolumechange: any;
        public onwaiting: any;

        /**
         * @param string [url='']
         * @param string [name='']
         * @param string [features='']
         * @param boolean [replace=false]
         */
        public open(url?: string, name?: string, features?: string, replace?: boolean): IHTMLWindow2;
        public opener: any;
        public readonly outerHeight: number;
        public readonly outerWidth: number;
        public readonly pageXOffset: number;
        public readonly pageYOffset: number;
        public readonly parent: IHTMLWindow2;
        public performance: any;
        public postMessage(msg: string, targetOrigin?: any): void;
        public print(): void;

        /**
         * @param string [message='']
         * @param string [defstr='undefined']
         */
        public prompt(message?: string, defstr?: string): any;
        public removeEventListener(type: string, listener: any, useCapture: boolean): void;
        public resizeBy(x: number, y: number): void;
        public resizeTo(x: number, y: number): void;
        public readonly screen: IHTMLScreen;
        public readonly screenLeft: number;
        public readonly screenTop: number;
        public readonly screenX: number;
        public readonly screenY: number;
        public scroll(x: number, y: number): void;
        public scrollBy(x: number, y: number): void;
        public scrollTo(x: number, y: number): void;
        public readonly self: IHTMLWindow2;
        public readonly sessionStorage: IHTMLStorage;
        public setInterval(expression: any, msec: number, language?: any): number;
        public setTimeout(expression: any, msec: number, language?: any): number;

        /** @param string [features=''] */
        public showHelp(helpURL: string, helpArg: any, features?: string): void;
        public showModalDialog(dialog: string, varArgIn?: any, varOptions?: any): any;

        /** @param string [url=''] */
        public showModelessDialog(url?: string, varArgIn?: any, options?: any): IHTMLWindow2;
        public status: string;
        public readonly styleMedia: IHTMLStyleMedia;
        public readonly top: IHTMLWindow2;
        public toStaticHTML(bstrHTML: string): string;
        public toString(): string;
        public readonly window: IHTMLWindow2;
    }

    class HTMLWndOptionElement {
        private 'MSHTML.HTMLWndOptionElement_typekey': HTMLWndOptionElement;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public compareDocumentPosition(otherNode: IHTMLDOMNode): number;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public dataFld: string;
        public dataFormatAs: string;
        public dataSrc: string;
        public defaultSelected: boolean;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public readonly form: IHTMLFormElement;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public ie9_insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public index: number;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public isDefaultNamespace(pvarNamespace: any): boolean;
        public readonly isDisabled: boolean;
        public isEqualNode(otherNode: IHTMLDOMNode3): boolean;
        public readonly isMultiLine: boolean;
        public isSameNode(otherNode: IHTMLDOMNode3): boolean;
        public isSupported(feature: string, version: any): boolean;
        public readonly isTextEdit: boolean;
        public label: string;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public readonly localName: any;
        public lookupNamespaceURI(pvarPrefix: any): any;
        public lookupPrefix(pvarNamespaceURI: any): any;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public readonly namespaceURI: any;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public prefix: any;
        public readonly previousSibling: IHTMLDOMNode;
        public querySelector(v: string): IHTMLElement;
        public querySelectorAll(v: string): IHTMLDOMChildrenCollection;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public selected: boolean;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tagUrn: string;
        public text: string;
        public textContent: any;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public value: string;
        public xmsAcceleratorKey: string;
    }

    class HTMLWndSelectElement {
        private 'MSHTML.HTMLWndSelectElement_typekey': HTMLWndSelectElement;
        private constructor();
        public accessKey: string;
        public add(element: IHTMLElement, before?: any): void;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public compareDocumentPosition(otherNode: IHTMLDOMNode): number;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public dataFld: string;
        public dataFormatAs: string;
        public dataSrc: string;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public readonly form: IHTMLFormElement;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public ie9_insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public isDefaultNamespace(pvarNamespace: any): boolean;
        public readonly isDisabled: boolean;
        public isEqualNode(otherNode: IHTMLDOMNode3): boolean;
        public readonly isMultiLine: boolean;
        public isSameNode(otherNode: IHTMLDOMNode3): boolean;
        public isSupported(feature: string, version: any): boolean;
        public readonly isTextEdit: boolean;
        public item(name?: any, index?: any): any;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public length: number;
        public readonly localName: any;
        public lookupNamespaceURI(pvarPrefix: any): any;
        public lookupPrefix(pvarNamespaceURI: any): any;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public multiple: boolean;
        public name: string;
        public namedItem(name: string): any;
        public readonly namespaceURI: any;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public readonly options: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public prefix: any;
        public readonly previousSibling: IHTMLDOMNode;
        public querySelector(v: string): IHTMLElement;
        public querySelectorAll(v: string): IHTMLDOMChildrenCollection;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [index=-1] */
        public remove(index?: number): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public selectedIndex: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public size: number;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tags(tagName: any): any;
        public tagUrn: string;
        public textContent: any;
        public title: string;
        public toString(): string;
        public readonly type: string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public urns(urn: any): any;
        public value: string;
        public xmsAcceleratorKey: string;
    }

    class HTMLXMLHttpRequest {
        private 'MSHTML.HTMLXMLHttpRequest_typekey': HTMLXMLHttpRequest;
        private constructor();
        public abort(): void;
        public addEventListener(type: string, listener: any, useCapture: boolean): void;
        public readonly 'constructor': any;
        public dispatchEvent(evt: IDOMEvent): boolean;
        public getAllResponseHeaders(): string;
        public getResponseHeader(bstrHeader: string): string;
        public onreadystatechange: any;
        public ontimeout: any;
        public open(bstrMethod: string, bstrURL: string, varAsync: any, varUser?: any, varPassword?: any): void;
        public readonly readyState: number;
        public removeEventListener(type: string, listener: any, useCapture: boolean): void;
        public readonly responseBody: any;
        public readonly responseText: string;
        public readonly responseXML: any;
        public send(varBody?: any): void;
        public setRequestHeader(bstrHeader: string, bstrValue: string): void;
        public readonly status: number;
        public readonly statusText: string;
        public timeout: number;
    }

    class HTMLXMLHttpRequestFactory {
        private 'MSHTML.HTMLXMLHttpRequestFactory_typekey': HTMLXMLHttpRequestFactory;
        private constructor();
        public create(): IHTMLXMLHttpRequest;
    }

    class ICanvasGradient {
        private 'MSHTML.ICanvasGradient_typekey': ICanvasGradient;
        private constructor();
        public addColorStop(offset: number, color: string): void;
    }

    class ICanvasImageData {
        private 'MSHTML.ICanvasImageData_typekey': ICanvasImageData;
        private constructor();
        public readonly data: any;
        public readonly height: number;
        public readonly width: number;
    }

    class ICanvasPattern {
        private 'MSHTML.ICanvasPattern_typekey': ICanvasPattern;
        private constructor();
    }

    class ICanvasRenderingContext2D {
        private 'MSHTML.ICanvasRenderingContext2D_typekey': ICanvasRenderingContext2D;
        private constructor();
        public arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise: number): void;
        public arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): void;
        public beginPath(): void;
        public bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): void;
        public readonly canvas: IHTMLCanvasElement;
        public clearRect(x: number, y: number, w: number, h: number): void;
        public clip(): void;
        public closePath(): void;
        public createImageData(a1: any, a2: any): ICanvasImageData;
        public createLinearGradient(x0: number, y0: number, x1: number, y1: number): ICanvasGradient;
        public createPattern(Image: any, repetition: any): ICanvasPattern;
        public createRadialGradient(x0: number, y0: number, r0: number, x1: number, y1: number, r1: number): ICanvasGradient;
        public drawImage(pSrc: any, a1: any, a2: any, a3: any, a4: any, a5: any, a6: any, a7: any, a8: any): void;
        public fill(): void;
        public fillRect(x: number, y: number, w: number, h: number): void;
        public fillStyle: any;
        public fillText(text: string, x: number, y: number, maxWidth: any): void;
        public font: string;
        public getImageData(sx: number, sy: number, sw: number, sh: number): ICanvasImageData;
        public globalAlpha: number;
        public globalCompositeOperation: string;
        public isPointInPath(x: number, y: number): boolean;
        public lineCap: string;
        public lineJoin: string;
        public lineTo(x: number, y: number): void;
        public lineWidth: number;
        public measureText(text: string): ICanvasTextMetrics;
        public miterLimit: number;
        public moveTo(x: number, y: number): void;
        public putImageData(imagedata: ICanvasImageData, dx: number, dy: number, dirtyX: any, dirtyY: any, dirtyWidth: any, dirtyHeight: any): void;
        public quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void;
        public rect(x: number, y: number, w: number, h: number): void;
        public restore(): void;
        public rotate(angle: number): void;
        public save(): void;
        public scale(x: number, y: number): void;
        public setTransform(m11: number, m12: number, m21: number, m22: number, dx: number, dy: number): void;
        public shadowBlur: number;
        public shadowColor: string;
        public shadowOffsetX: number;
        public shadowOffsetY: number;
        public stroke(): void;
        public strokeRect(x: number, y: number, w: number, h: number): void;
        public strokeStyle: any;
        public strokeText(text: string, x: number, y: number, maxWidth: any): void;
        public textAlign: string;
        public textBaseline: string;
        public transform(m11: number, m12: number, m21: number, m22: number, dx: number, dy: number): void;
        public translate(x: number, y: number): void;
    }

    class ICanvasTextMetrics {
        private 'MSHTML.ICanvasTextMetrics_typekey': ICanvasTextMetrics;
        private constructor();
        public readonly width: number;
    }

    class IDOMDocumentType {
        private 'MSHTML.IDOMDocumentType_typekey': IDOMDocumentType;
        private constructor();
        public readonly entities: any;
        public readonly internalSubset: any;
        public readonly name: string;
        public readonly notations: any;
        public readonly publicId: any;
        public readonly systemId: any;
    }

    class IDOMEvent {
        private 'MSHTML.IDOMEvent_typekey': IDOMEvent;
        private constructor();
        public readonly bubbles: boolean;
        public readonly cancelable: boolean;
        public cancelBubble: boolean;
        public readonly currentTarget: IEventTarget;
        public readonly defaultPrevented: boolean;
        public readonly eventPhase: number;
        public initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
        public readonly isTrusted: boolean;
        public preventDefault(): void;
        public readonly srcElement: IHTMLElement;
        public stopImmediatePropagation(): void;
        public stopPropagation(): void;
        public readonly target: IEventTarget;
        public readonly timeStamp: number;
        public readonly type: string;
    }

    class IDOMNodeIterator {
        private 'MSHTML.IDOMNodeIterator_typekey': IDOMNodeIterator;
        private constructor();
        public Detach(): void;
        public readonly expandEntityReferences: boolean;
        public readonly filter: any;
        public nextNode(): any;
        public previousNode(): any;
        public readonly root: any;
        public readonly whatToShow: number;
    }

    class IDOMParser {
        private 'MSHTML.IDOMParser_typekey': IDOMParser;
        private constructor();
        public parseFromString(xmlSource: string, mimeType: string): IHTMLDocument2;
    }

    class IDOMProcessingInstruction {
        private 'MSHTML.IDOMProcessingInstruction_typekey': IDOMProcessingInstruction;
        private constructor();
        public data: string;
        public readonly target: string;
    }

    class IDOMTreeWalker {
        private 'MSHTML.IDOMTreeWalker_typekey': IDOMTreeWalker;
        private constructor();
        public currentNode: any;
        public readonly expandEntityReferences: boolean;
        public readonly filter: any;
        public firstChild(): any;
        public lastChild(): any;
        public nextNode(): any;
        public nextSibling(): any;
        public parentNode(): any;
        public previousNode(): any;
        public previousSibling(): any;
        public readonly root: any;
        public readonly whatToShow: number;
    }

    class IDOMXmlSerializer {
        private 'MSHTML.IDOMXmlSerializer_typekey': IDOMXmlSerializer;
        private constructor();
        public serializeToString(pNode: IHTMLDOMNode): string;
    }

    class IEventTarget {
        private 'MSHTML.IEventTarget_typekey': IEventTarget;
        private constructor();
        public addEventListener(type: string, listener: any, useCapture: boolean): void;
        public dispatchEvent(evt: IDOMEvent): boolean;
        public removeEventListener(type: string, listener: any, useCapture: boolean): void;
    }

    class IHTMLAreasCollection {
        private 'MSHTML.IHTMLAreasCollection_typekey': IHTMLAreasCollection;
        private constructor();
        public add(element: IHTMLElement, before?: any): void;
        public item(name?: any, index?: any): any;
        public length: number;

        /** @param number [index=-1] */
        public remove(index?: number): void;
        public tags(tagName: any): any;
    }

    class IHTMLAttributeCollection3 {
        private 'MSHTML.IHTMLAttributeCollection3_typekey': IHTMLAttributeCollection3;
        private constructor();
        public getNamedItem(bstrName: string): IHTMLDOMAttribute;
        public item(index: number): IHTMLDOMAttribute;
        public readonly length: number;
        public removeNamedItem(bstrName: string): IHTMLDOMAttribute;
        public setNamedItem(pNodeIn: IHTMLDOMAttribute): IHTMLDOMAttribute;
    }

    class IHTMLAudioElement {
        private 'MSHTML.IHTMLAudioElement_typekey': IHTMLAudioElement;
        private constructor();
    }

    class IHTMLBookmarkCollection {
        private 'MSHTML.IHTMLBookmarkCollection_typekey': IHTMLBookmarkCollection;
        private constructor();
        public item(index: number): any;
        public readonly length: number;
    }

    class IHTMLCanvasElement {
        private 'MSHTML.IHTMLCanvasElement_typekey': IHTMLCanvasElement;
        private constructor();
        public getContext(contextId: string): ICanvasRenderingContext2D;
        public height: number;
        public toDataURL(type: string, jpegquality: any): string;
        public width: number;
    }

    class IHTMLCSSRule {
        private 'MSHTML.IHTMLCSSRule_typekey': IHTMLCSSRule;
        private constructor();
        public cssText: string;
        public readonly parentRule: IHTMLCSSRule;
        public readonly parentStyleSheet: IHTMLStyleSheet;
        public readonly type: number;
    }

    class IHTMLCSSStyleDeclaration {
        private 'MSHTML.IHTMLCSSStyleDeclaration_typekey': IHTMLCSSStyleDeclaration;
        private constructor();
        public accelerator: string;
        public alignmentBaseline: string;
        public background: string;
        public backgroundAttachment: string;
        public backgroundClip: string;
        public backgroundColor: any;
        public backgroundImage: string;
        public backgroundOrigin: string;
        public backgroundPosition: string;
        public backgroundPositionX: any;
        public backgroundPositionY: any;
        public backgroundRepeat: string;
        public backgroundSize: string;
        public baselineShift: any;
        public behavior: string;
        public border: string;
        public borderBottom: string;
        public borderBottomColor: any;
        public borderBottomLeftRadius: string;
        public borderBottomRightRadius: string;
        public borderBottomStyle: string;
        public borderBottomWidth: any;
        public borderCollapse: string;
        public borderColor: string;
        public borderLeft: string;
        public borderLeftColor: any;
        public borderLeftStyle: string;
        public borderLeftWidth: any;
        public borderRadius: string;
        public borderRight: string;
        public borderRightColor: any;
        public borderRightStyle: string;
        public borderRightWidth: any;
        public borderSpacing: string;
        public borderStyle: string;
        public borderTop: string;
        public borderTopColor: any;
        public borderTopLeftRadius: string;
        public borderTopRightRadius: string;
        public borderTopStyle: string;
        public borderTopWidth: any;
        public borderWidth: string;
        public bottom: any;
        public boxShadow: string;
        public boxSizing: string;
        public captionSide: string;
        public clear: string;
        public clip: string;
        public readonly clipBottom: any;
        public clipLeft: any;
        public clipPath: string;
        public clipRight: any;
        public clipRule: string;
        public clipTop: any;
        public color: any;
        public content: string;
        public counterIncrement: string;
        public counterReset: string;
        public cssFloat: string;
        public cssText: string;
        public cursor: string;
        public direction: string;
        public display: string;
        public dominantBaseline: string;
        public emptyCells: string;
        public fill: string;
        public fillOpacity: any;
        public fillRule: string;
        public filter: string;
        public font: string;
        public fontFamily: string;
        public fontSize: any;
        public fontSizeAdjust: any;
        public fontStretch: string;
        public fontStyle: string;
        public fontVariant: string;
        public fontWeight: string;
        public getPropertyPriority(bstrPropertyName: string): string;
        public getPropertyValue(bstrPropertyName: string): string;
        public glyphOrientationHorizontal: any;
        public glyphOrientationVertical: any;
        public height: any;
        public imeMode: string;
        public item(index: number): string;
        public kerning: any;
        public layoutFlow: string;
        public layoutGrid: string;
        public layoutGridChar: any;
        public layoutGridLine: any;
        public layoutGridMode: string;
        public layoutGridType: string;
        public left: any;
        public readonly length: number;
        public letterSpacing: any;
        public lineBreak: string;
        public lineHeight: any;
        public listStyle: string;
        public listStyleImage: string;
        public listStylePosition: string;
        public listStyleType: string;
        public margin: string;
        public marginBottom: any;
        public marginLeft: any;
        public marginRight: any;
        public marginTop: any;
        public marker: string;
        public markerEnd: string;
        public markerMid: string;
        public markerStart: string;
        public mask: string;
        public maxHeight: any;
        public maxWidth: any;
        public minHeight: any;
        public minWidth: any;
        public msBlockProgression: string;
        public msInterpolationMode: string;
        public msTransform: string;
        public msTransformOrigin: string;
        public opacity: any;
        public orphans: any;
        public outline: string;
        public outlineColor: any;
        public outlineStyle: string;
        public outlineWidth: any;
        public overflow: string;
        public overflowX: string;
        public overflowY: string;
        public padding: string;
        public paddingBottom: any;
        public paddingLeft: any;
        public paddingRight: any;
        public paddingTop: any;
        public pageBreakAfter: string;
        public pageBreakBefore: string;
        public pageBreakInside: string;
        public readonly parentRule: any;
        public pointerEvents: string;
        public position: string;
        public quotes: string;
        public removeProperty(bstrPropertyName: string): string;
        public right: any;
        public rubyAlign: string;
        public rubyOverhang: string;
        public rubyPosition: string;
        public scrollbar3dLightColor: any;
        public scrollbarArrowColor: any;
        public scrollbarBaseColor: any;
        public scrollbarDarkShadowColor: any;
        public scrollbarFaceColor: any;
        public scrollbarHighlightColor: any;
        public scrollbarShadowColor: any;
        public scrollbarTrackColor: any;

        /** @param any [pvarPropertyPriority=''] */
        public setProperty(bstrPropertyName: string, pvarPropertyValue: any, pvarPropertyPriority?: any): void;
        public stopColor: any;
        public stopOpacity: any;
        public stroke: string;
        public strokeDasharray: string;
        public strokeDashoffset: any;
        public strokeLinecap: string;
        public strokeLinejoin: string;
        public strokeMiterlimit: any;
        public strokeOpacity: any;
        public strokeWidth: any;
        public styleFloat: string;
        public tableLayout: string;
        public textAlign: string;
        public textAlignLast: string;
        public textAnchor: string;
        public textAutospace: string;
        public textDecoration: string;
        public textIndent: any;
        public textJustify: string;
        public textJustifyTrim: string;
        public textKashida: any;
        public textKashidaSpace: any;
        public textOverflow: string;
        public textTransform: string;
        public textUnderlinePosition: string;
        public top: any;
        public unicodeBidi: string;
        public verticalAlign: any;
        public visibility: string;
        public whiteSpace: string;
        public widows: any;
        public width: any;
        public wordBreak: string;
        public wordSpacing: any;
        public wordWrap: string;
        public writingMode: string;
        public zIndex: any;
        public zoom: any;
    }

    class IHTMLCurrentStyle {
        private 'MSHTML.IHTMLCurrentStyle_typekey': IHTMLCurrentStyle;
        private constructor();
        public readonly accelerator: string;
        public readonly backgroundAttachment: string;
        public readonly backgroundColor: any;
        public readonly backgroundImage: string;
        public readonly backgroundPositionX: any;
        public readonly backgroundPositionY: any;
        public readonly backgroundRepeat: string;
        public readonly behavior: string;
        public readonly blockDirection: string;
        public readonly borderBottomColor: any;
        public readonly borderBottomStyle: string;
        public readonly borderBottomWidth: any;
        public readonly borderCollapse: string;
        public readonly borderColor: string;
        public readonly borderLeftColor: any;
        public readonly borderLeftStyle: string;
        public readonly borderLeftWidth: any;
        public readonly borderRightColor: any;
        public readonly borderRightStyle: string;
        public readonly borderRightWidth: any;
        public readonly borderStyle: string;
        public readonly borderTopColor: any;
        public readonly borderTopStyle: string;
        public readonly borderTopWidth: any;
        public readonly borderWidth: string;
        public readonly bottom: any;
        public readonly clear: string;
        public readonly clipBottom: any;
        public readonly clipLeft: any;
        public readonly clipRight: any;
        public readonly clipTop: any;
        public readonly color: any;
        public readonly cursor: string;
        public readonly direction: string;
        public readonly display: string;
        public readonly fontFamily: string;
        public readonly fontSize: any;
        public readonly fontStyle: string;
        public readonly fontVariant: string;
        public readonly fontWeight: any;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public readonly height: any;
        public readonly imeMode: string;
        public readonly layoutGridChar: any;
        public readonly layoutGridLine: any;
        public readonly layoutGridMode: string;
        public readonly layoutGridType: string;
        public readonly left: any;
        public readonly letterSpacing: any;
        public readonly lineBreak: string;
        public readonly lineHeight: any;
        public readonly listStyleImage: string;
        public readonly listStylePosition: string;
        public readonly listStyleType: string;
        public readonly margin: string;
        public readonly marginBottom: any;
        public readonly marginLeft: any;
        public readonly marginRight: any;
        public readonly marginTop: any;
        public readonly overflow: string;
        public readonly overflowX: string;
        public readonly overflowY: string;
        public readonly padding: string;
        public readonly paddingBottom: any;
        public readonly paddingLeft: any;
        public readonly paddingRight: any;
        public readonly paddingTop: any;
        public readonly pageBreakAfter: string;
        public readonly pageBreakBefore: string;
        public readonly position: string;
        public readonly right: any;
        public readonly rubyAlign: string;
        public readonly rubyOverhang: string;
        public readonly rubyPosition: string;
        public readonly styleFloat: string;
        public readonly tableLayout: string;
        public readonly textAlign: string;
        public readonly textAutospace: string;
        public readonly textDecoration: string;
        public readonly textIndent: any;
        public readonly textJustify: string;
        public readonly textJustifyTrim: string;
        public readonly textKashida: any;
        public readonly textTransform: string;
        public readonly top: any;
        public readonly unicodeBidi: string;
        public readonly verticalAlign: any;
        public readonly visibility: string;
        public readonly width: any;
        public readonly wordBreak: string;
        public readonly zIndex: any;
    }

    class IHTMLDataTransfer {
        private 'MSHTML.IHTMLDataTransfer_typekey': IHTMLDataTransfer;
        private constructor();
        public clearData(format: string): boolean;
        public dropEffect: string;
        public effectAllowed: string;
        public getData(format: string): any;
        public setData(format: string, data: any): boolean;
    }

    class IHTMLDocument {
        private 'MSHTML.IHTMLDocument_typekey': IHTMLDocument;
        private constructor();
        public readonly Script: any;
    }

    class IHTMLDocument2 {
        private 'MSHTML.IHTMLDocument2_typekey': IHTMLDocument2;
        private constructor();
        public readonly activeElement: IHTMLElement;
        public alinkColor: any;
        public readonly all: IHTMLElementCollection;
        public readonly anchors: IHTMLElementCollection;
        public readonly applets: IHTMLElementCollection;
        public bgColor: any;
        public readonly body: IHTMLElement;
        public charset: string;
        public clear(): void;
        public close(): void;
        public cookie: string;
        public createElement(eTag: string): IHTMLElement;

        /**
         * @param string [bstrHref='']
         * @param number [lIndex=-1]
         */
        public createStyleSheet(bstrHref?: string, lIndex?: number): IHTMLStyleSheet;
        public defaultCharset: string;
        public designMode: string;
        public domain: string;
        public elementFromPoint(x: number, y: number): IHTMLElement;
        public readonly embeds: IHTMLElementCollection;

        /** @param boolean [showUI=false] */
        public execCommand(cmdID: string, showUI?: boolean, value?: any): boolean;
        public execCommandShowHelp(cmdID: string): boolean;
        public expando: boolean;
        public fgColor: any;
        public readonly fileCreatedDate: string;
        public readonly fileModifiedDate: string;
        public readonly fileSize: string;
        public readonly fileUpdatedDate: string;
        public readonly forms: IHTMLElementCollection;
        public readonly frames: FramesCollection;
        public readonly images: IHTMLElementCollection;
        public readonly lastModified: string;
        public linkColor: any;
        public readonly links: IHTMLElementCollection;
        public readonly location: IHTMLLocation;
        public readonly mimeType: string;
        public readonly nameProp: string;
        public onafterupdate: any;
        public onbeforeupdate: any;
        public onclick: any;
        public ondblclick: any;
        public ondragstart: any;
        public onerrorupdate: any;
        public onhelp: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onmousedown: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onreadystatechange: any;
        public onrowenter: any;
        public onrowexit: any;
        public onselectstart: any;

        /** @param string [url='text/html'] */
        public open(url?: string, name?: any, features?: any, replace?: any): any;
        public readonly parentWindow: IHTMLWindow2;
        public readonly plugins: IHTMLElementCollection;
        public readonly protocol: string;
        public queryCommandEnabled(cmdID: string): boolean;
        public queryCommandIndeterm(cmdID: string): boolean;
        public queryCommandState(cmdID: string): boolean;
        public queryCommandSupported(cmdID: string): boolean;
        public queryCommandText(cmdID: string): string;
        public queryCommandValue(cmdID: string): any;
        public readonly readyState: string;
        public readonly referrer: string;
        public readonly Script: any;
        public readonly scripts: IHTMLElementCollection;
        public readonly security: string;
        public readonly selection: IHTMLSelectionObject;
        public readonly styleSheets: IHTMLStyleSheetsCollection;
        public title: string;
        public toString(): string;
        public url: string;
        public vlinkColor: any;
        public write(...psarray: any[]): void;
        public writeln(...psarray: any[]): void;
    }

    class IHTMLDocument7 {
        private 'MSHTML.IHTMLDocument7_typekey': IHTMLDocument7;
        private constructor();
        public adoptNode(pNodeSource: IHTMLDOMNode): IHTMLDOMNode3;
        public readonly all: IHTMLElementCollection;
        public body: IHTMLElement;
        public readonly characterSet: string;
        public createAttribute(bstrAttrName: string): IHTMLDOMAttribute;
        public createAttributeNS(pvarNS: any, bstrAttrName: string): IHTMLDOMAttribute;
        public createCDATASection(text: string): IHTMLDOMNode;
        public createElement(bstrTag: string): IHTMLElement;
        public createElementNS(pvarNS: any, bstrTag: string): IHTMLElement;
        public createProcessingInstruction(bstrTarget: string, bstrData: string): IDOMProcessingInstruction;
        public readonly defaultView: IHTMLWindow2;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(pvarNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getSelection(): IHTMLSelection;
        public hasAttributes(): boolean;
        public readonly head: IHTMLElement;
        public importNode(pNodeSource: IHTMLDOMNode, fDeep: boolean): IHTMLDOMNode3;
        public readonly inputEncoding: string;
        public normalize(): void;
        public onabort: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public onchange: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onfocus: any;
        public oninput: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onmssitemodejumplistitemremoved: any;
        public onmsthumbnailclick: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onratechange: any;
        public onreset: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public readonly parentWindow: IHTMLWindow2;
        public readonly xmlEncoding: string;
        public xmlStandalone: boolean;
        public xmlVersion: string;
    }

    class IHTMLDocumentCompatibleInfo {
        private 'MSHTML.IHTMLDocumentCompatibleInfo_typekey': IHTMLDocumentCompatibleInfo;
        private constructor();
        public readonly userAgent: string;
        public readonly version: string;
    }

    class IHTMLDocumentCompatibleInfoCollection {
        private 'MSHTML.IHTMLDocumentCompatibleInfoCollection_typekey': IHTMLDocumentCompatibleInfoCollection;
        private constructor();
        public item(index: number): IHTMLDocumentCompatibleInfo;
        public readonly length: number;
    }

    class IHTMLDOMAttribute {
        private 'MSHTML.IHTMLDOMAttribute_typekey': IHTMLDOMAttribute;
        private constructor();
        public readonly nodeName: string;
        public nodeValue: any;
        public readonly specified: boolean;
    }

    class IHTMLDOMAttribute2 {
        private 'MSHTML.IHTMLDOMAttribute2_typekey': IHTMLDOMAttribute2;
        private constructor();
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public readonly attributes: any;
        public readonly childNodes: any;
        public cloneNode(fDeep: boolean): IHTMLDOMAttribute;
        public readonly expando: boolean;
        public readonly firstChild: IHTMLDOMNode;
        public hasChildNodes(): boolean;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly lastChild: IHTMLDOMNode;
        public readonly name: string;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeType: number;
        public readonly ownerDocument: any;
        public readonly parentNode: IHTMLDOMNode;
        public readonly previousSibling: IHTMLDOMNode;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public value: string;
    }

    class IHTMLDOMChildrenCollection {
        private 'MSHTML.IHTMLDOMChildrenCollection_typekey': IHTMLDOMChildrenCollection;
        private constructor();
        public item(index: number): any;
        public readonly length: number;
    }

    class IHTMLDOMImplementation {
        private 'MSHTML.IHTMLDOMImplementation_typekey': IHTMLDOMImplementation;
        private constructor();
        public hasFeature(bstrfeature: string, version?: any): boolean;
    }

    class IHTMLDOMNode {
        private 'MSHTML.IHTMLDOMNode_typekey': IHTMLDOMNode;
        private constructor();
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public readonly attributes: any;
        public readonly childNodes: any;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public readonly firstChild: IHTMLDOMNode;
        public hasChildNodes(): boolean;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly lastChild: IHTMLDOMNode;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public readonly parentNode: IHTMLDOMNode;
        public readonly previousSibling: IHTMLDOMNode;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
    }

    class IHTMLDOMNode3 {
        private 'MSHTML.IHTMLDOMNode3_typekey': IHTMLDOMNode3;
        private constructor();
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public compareDocumentPosition(otherNode: IHTMLDOMNode): number;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public isDefaultNamespace(pvarNamespace: any): boolean;
        public isEqualNode(otherNode: IHTMLDOMNode3): boolean;
        public isSameNode(otherNode: IHTMLDOMNode3): boolean;
        public isSupported(feature: string, version: any): boolean;
        public readonly localName: any;
        public lookupNamespaceURI(pvarPrefix: any): any;
        public lookupPrefix(pvarNamespaceURI: any): any;
        public readonly namespaceURI: any;
        public prefix: any;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public textContent: any;
    }

    class IHTMLDOMRange {
        private 'MSHTML.IHTMLDOMRange_typekey': IHTMLDOMRange;
        private constructor();
        public cloneContents(): any;
        public cloneRange(): IHTMLDOMRange;
        public collapse(toStart: boolean): void;
        public readonly collapsed: boolean;
        public readonly commonAncestorContainer: IHTMLDOMNode;
        public compareBoundaryPoints(how: number, sourceRange: any): number;
        public deleteContents(): void;
        public Detach(): void;
        public readonly endContainer: IHTMLDOMNode;
        public readonly endOffset: number;
        public extractContents(): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public insertNode(newNode: any): void;
        public selectNode(refNode: any): void;
        public selectNodeContents(refNode: any): void;
        public setEnd(refNode: any, offset: number): void;
        public setEndAfter(refNode: any): void;
        public setEndBefore(refNode: any): void;
        public setStart(refNode: any, offset: number): void;
        public setStartAfter(refNode: any): void;
        public setStartBefore(refNode: any): void;
        public readonly startContainer: IHTMLDOMNode;
        public readonly startOffset: number;
        public surroundContents(newParent: any): void;
        public toString(): string;
    }

    class IHTMLElement {
        private 'MSHTML.IHTMLElement_typekey': IHTMLElement;
        private constructor();
        public readonly all: any;
        public readonly children: any;
        public className: string;
        public click(): void;
        public contains(pChild: IHTMLElement): boolean;
        public readonly document: any;
        public readonly filters: IHTMLFiltersCollection;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public id: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onafterupdate: any;
        public onbeforeupdate: any;
        public onclick: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondragstart: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onhelp: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onmousedown: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onrowenter: any;
        public onrowexit: any;
        public onselectstart: any;
        public outerHTML: string;
        public outerText: string;
        public readonly parentElement: IHTMLElement;
        public readonly parentTextEdit: IHTMLElement;
        public readonly recordNumber: any;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public scrollIntoView(varargStart?: any): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public readonly sourceIndex: number;
        public readonly style: IHTMLStyle;
        public readonly tagName: string;
        public title: string;
        public toString(): string;
    }

    class IHTMLElement2 {
        private 'MSHTML.IHTMLElement2_typekey': IHTMLElement2;
        private constructor();
        public accessKey: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public clearAttributes(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public componentFromPoint(x: number, y: number): string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public doScroll(component?: any): void;
        public focus(): void;
        public getAdjacentText(where: string): string;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public mergeAttributes(mergeThis: IHTMLElement): void;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onblur: any;
        public oncellchange: any;
        public oncontextmenu: any;
        public oncopy: any;
        public oncut: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondrop: any;
        public onfocus: any;
        public onlosecapture: any;
        public onpaste: any;
        public onpropertychange: any;
        public onreadystatechange: any;
        public onresize: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public readonly readyState: any;
        public releaseCapture(): void;
        public removeBehavior(cookie: number): boolean;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;
        public replaceAdjacentText(where: string, newText: string): string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public tabIndex: number;
        public tagUrn: string;
    }

    class IHTMLElementCollection {
        private 'MSHTML.IHTMLElementCollection_typekey': IHTMLElementCollection;
        private constructor();
        public item(name?: any, index?: any): any;
        public length: number;
        public tags(tagName: any): any;
        public toString(): string;
    }

    class IHTMLEventObj {
        private 'MSHTML.IHTMLEventObj_typekey': IHTMLEventObj;
        private constructor();
        public readonly altKey: boolean;
        public readonly button: number;
        public cancelBubble: boolean;
        public readonly clientX: number;
        public readonly clientY: number;
        public readonly ctrlKey: boolean;
        public readonly fromElement: IHTMLElement;
        public keyCode: number;
        public readonly offsetX: number;
        public readonly offsetY: number;
        public readonly qualifier: string;
        public readonly reason: number;
        public returnValue: any;
        public readonly screenX: number;
        public readonly screenY: number;
        public readonly shiftKey: boolean;
        public readonly srcElement: IHTMLElement;
        public readonly srcFilter: any;
        public readonly toElement: IHTMLElement;
        public readonly type: string;
        public readonly x: number;
        public readonly y: number;
    }

    class IHTMLFiltersCollection {
        private 'MSHTML.IHTMLFiltersCollection_typekey': IHTMLFiltersCollection;
        private constructor();
        public item(pvarIndex: any): any;
        public readonly length: number;
    }

    class IHTMLFormElement {
        private 'MSHTML.IHTMLFormElement_typekey': IHTMLFormElement;
        private constructor();
        public action: string;
        public dir: string;
        public readonly elements: any;
        public encoding: string;
        public item(name?: any, index?: any): any;
        public length: number;
        public method: string;
        public name: string;
        public onreset: any;
        public onsubmit: any;
        public reset(): void;
        public submit(): void;
        public tags(tagName: any): any;
        public target: string;
    }

    class IHTMLFrameBase {
        private 'MSHTML.IHTMLFrameBase_typekey': IHTMLFrameBase;
        private constructor();
        public border: any;
        public frameBorder: string;
        public frameSpacing: any;
        public marginHeight: any;
        public marginWidth: any;
        public name: string;
        public noResize: boolean;
        public scrolling: string;
        public src: string;
    }

    class IHTMLImgElement {
        private 'MSHTML.IHTMLImgElement_typekey': IHTMLImgElement;
        private constructor();
        public align: string;
        public alt: string;
        public border: any;
        public readonly complete: boolean;
        public dynsrc: string;
        public readonly fileCreatedDate: string;
        public readonly fileModifiedDate: string;
        public readonly fileSize: string;
        public readonly fileUpdatedDate: string;
        public height: number;
        public readonly href: string;
        public hspace: number;
        public isMap: boolean;
        public loop: any;
        public lowsrc: string;
        public readonly mimeType: string;
        public name: string;
        public readonly nameProp: string;
        public onabort: any;
        public onerror: any;
        public onload: any;
        public readonly protocol: string;
        public readonly readyState: string;
        public src: string;
        public start: string;
        public useMap: string;
        public vrml: string;
        public vspace: number;
        public width: number;
    }

    class IHTMLLocation {
        private 'MSHTML.IHTMLLocation_typekey': IHTMLLocation;
        private constructor();
        public assign(bstr: string): void;
        public hash: string;
        public host: string;
        public hostname: string;
        public href: string;
        public pathname: string;
        public port: string;
        public protocol: string;

        /** @param boolean [flag=false] */
        public reload(flag?: boolean): void;
        public replace(bstr: string): void;
        public search: string;
        public toString(): string;
    }

    class IHTMLMediaError {
        private 'MSHTML.IHTMLMediaError_typekey': IHTMLMediaError;
        private constructor();
        public readonly code: number;
    }

    class IHTMLMSCSSKeyframeRule {
        private 'MSHTML.IHTMLMSCSSKeyframeRule_typekey': IHTMLMSCSSKeyframeRule;
        private constructor();
        public keyText: string;
        public readonly style: IHTMLRuleStyle;
    }

    class IHTMLOptionElement {
        private 'MSHTML.IHTMLOptionElement_typekey': IHTMLOptionElement;
        private constructor();
        public defaultSelected: boolean;
        public readonly form: IHTMLFormElement;
        public index: number;
        public selected: boolean;
        public text: string;
        public value: string;
    }

    class IHTMLPerformanceNavigation {
        private 'MSHTML.IHTMLPerformanceNavigation_typekey': IHTMLPerformanceNavigation;
        private constructor();
        public readonly redirectCount: number;
        public toJSON(): any;
        public toString(): string;
        public readonly type: number;
    }

    class IHTMLPerformanceTiming {
        private 'MSHTML.IHTMLPerformanceTiming_typekey': IHTMLPerformanceTiming;
        private constructor();
        public readonly connectEnd: number;
        public readonly connectStart: number;
        public readonly domainLookupEnd: number;
        public readonly domainLookupStart: number;
        public readonly domComplete: number;
        public readonly domContentLoadedEventEnd: number;
        public readonly domContentLoadedEventStart: number;
        public readonly domInteractive: number;
        public readonly domLoading: number;
        public readonly fetchStart: number;
        public readonly loadEventEnd: number;
        public readonly loadEventStart: number;
        public readonly msFirstPaint: number;
        public readonly navigationStart: number;
        public readonly redirectEnd: number;
        public readonly redirectStart: number;
        public readonly requestStart: number;
        public readonly responseEnd: number;
        public readonly responseStart: number;
        public toJSON(): any;
        public toString(): string;
        public readonly unloadEventEnd: number;
        public readonly unloadEventStart: number;
    }

    class IHTMLPluginsCollection {
        private 'MSHTML.IHTMLPluginsCollection_typekey': IHTMLPluginsCollection;
        private constructor();
        public readonly length: number;

        /** @param boolean [reload=false] */
        public refresh(reload?: boolean): void;
    }

    class IHTMLRect {
        private 'MSHTML.IHTMLRect_typekey': IHTMLRect;
        private constructor();
        public bottom: number;
        public left: number;
        public right: number;
        public top: number;
    }

    class IHTMLRectCollection {
        private 'MSHTML.IHTMLRectCollection_typekey': IHTMLRectCollection;
        private constructor();
        public item(pvarIndex: any): any;
        public readonly length: number;
    }

    class IHTMLRenderStyle {
        private 'MSHTML.IHTMLRenderStyle_typekey': IHTMLRenderStyle;
        private constructor();
        public defaultTextSelection: string;
        public renderingPriority: number;
        public textBackgroundColor: any;
        public textColor: any;
        public textDecoration: string;
        public textDecorationColor: any;
        public textEffect: string;
        public textLineThroughStyle: string;
        public textUnderlineStyle: string;
    }

    class IHTMLRuleStyle {
        private 'MSHTML.IHTMLRuleStyle_typekey': IHTMLRuleStyle;
        private constructor();
        public background: string;
        public backgroundAttachment: string;
        public backgroundColor: any;
        public backgroundImage: string;
        public backgroundPosition: string;
        public backgroundPositionX: any;
        public backgroundPositionY: any;
        public backgroundRepeat: string;
        public border: string;
        public borderBottom: string;
        public borderBottomColor: any;
        public borderBottomStyle: string;
        public borderBottomWidth: any;
        public borderColor: string;
        public borderLeft: string;
        public borderLeftColor: any;
        public borderLeftStyle: string;
        public borderLeftWidth: any;
        public borderRight: string;
        public borderRightColor: any;
        public borderRightStyle: string;
        public borderRightWidth: any;
        public borderStyle: string;
        public borderTop: string;
        public borderTopColor: any;
        public borderTopStyle: string;
        public borderTopWidth: any;
        public borderWidth: string;
        public clear: string;
        public clip: string;
        public color: any;
        public cssText: string;
        public cursor: string;
        public display: string;
        public filter: string;
        public font: string;
        public fontFamily: string;
        public fontSize: any;
        public fontStyle: string;
        public fontVariant: string;
        public fontWeight: string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public height: any;
        public left: any;
        public letterSpacing: any;
        public lineHeight: any;
        public listStyle: string;
        public listStyleImage: string;
        public listStylePosition: string;
        public listStyleType: string;
        public margin: string;
        public marginBottom: any;
        public marginLeft: any;
        public marginRight: any;
        public marginTop: any;
        public overflow: string;
        public padding: string;
        public paddingBottom: any;
        public paddingLeft: any;
        public paddingRight: any;
        public paddingTop: any;
        public pageBreakAfter: string;
        public pageBreakBefore: string;
        public readonly position: string;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public styleFloat: string;
        public textAlign: string;
        public textDecoration: string;
        public textDecorationBlink: boolean;
        public textDecorationLineThrough: boolean;
        public textDecorationNone: boolean;
        public textDecorationOverline: boolean;
        public textDecorationUnderline: boolean;
        public textIndent: any;
        public textTransform: string;
        public top: any;
        public verticalAlign: any;
        public visibility: string;
        public whiteSpace: string;
        public width: any;
        public wordSpacing: any;
        public zIndex: any;
    }

    class IHTMLScreen {
        private 'MSHTML.IHTMLScreen_typekey': IHTMLScreen;
        private constructor();
        public readonly availHeight: number;
        public readonly availWidth: number;
        public bufferDepth: number;
        public readonly colorDepth: number;
        public readonly fontSmoothingEnabled: boolean;
        public readonly height: number;
        public updateInterval: number;
        public readonly width: number;
    }

    class IHTMLSelection {
        private 'MSHTML.IHTMLSelection_typekey': IHTMLSelection;
        private constructor();
        public addRange(range: any): void;
        public readonly anchorNode: IHTMLDOMNode;
        public readonly anchorOffset: number;
        public collapse(parentNode: any, offfset: number): void;
        public collapseToEnd(): void;
        public collapseToStart(): void;
        public deleteFromDocument(): void;
        public readonly focusNode: IHTMLDOMNode;
        public readonly focusOffset: number;
        public getRangeAt(index: number): IHTMLDOMRange;
        public readonly isCollapsed: boolean;
        public readonly rangeCount: number;
        public removeAllRanges(): void;
        public removeRange(range: any): void;
        public selectAllChildren(parentNode: any): void;
        public toString(): string;
    }

    class IHTMLSelectionObject {
        private 'MSHTML.IHTMLSelectionObject_typekey': IHTMLSelectionObject;
        private constructor();
        public clear(): void;
        public createRange(): any;
        public empty(): void;
        public readonly type: string;
    }

    class IHTMLStorage {
        private 'MSHTML.IHTMLStorage_typekey': IHTMLStorage;
        private constructor();
        public clear(): void;
        public getItem(bstrKey: string): any;
        public key(lIndex: number): string;
        public readonly length: number;
        public readonly remainingSpace: number;
        public removeItem(bstrKey: string): void;
        public setItem(bstrKey: string, bstrValue: string): void;
    }

    class IHTMLStyle {
        private 'MSHTML.IHTMLStyle_typekey': IHTMLStyle;
        private constructor();
        public background: string;
        public backgroundAttachment: string;
        public backgroundColor: any;
        public backgroundImage: string;
        public backgroundPosition: string;
        public backgroundPositionX: any;
        public backgroundPositionY: any;
        public backgroundRepeat: string;
        public border: string;
        public borderBottom: string;
        public borderBottomColor: any;
        public borderBottomStyle: string;
        public borderBottomWidth: any;
        public borderColor: string;
        public borderLeft: string;
        public borderLeftColor: any;
        public borderLeftStyle: string;
        public borderLeftWidth: any;
        public borderRight: string;
        public borderRightColor: any;
        public borderRightStyle: string;
        public borderRightWidth: any;
        public borderStyle: string;
        public borderTop: string;
        public borderTopColor: any;
        public borderTopStyle: string;
        public borderTopWidth: any;
        public borderWidth: string;
        public clear: string;
        public clip: string;
        public color: any;
        public cssText: string;
        public cursor: string;
        public display: string;
        public filter: string;
        public font: string;
        public fontFamily: string;
        public fontSize: any;
        public fontStyle: string;
        public fontVariant: string;
        public fontWeight: string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public height: any;
        public left: any;
        public letterSpacing: any;
        public lineHeight: any;
        public listStyle: string;
        public listStyleImage: string;
        public listStylePosition: string;
        public listStyleType: string;
        public margin: string;
        public marginBottom: any;
        public marginLeft: any;
        public marginRight: any;
        public marginTop: any;
        public overflow: string;
        public padding: string;
        public paddingBottom: any;
        public paddingLeft: any;
        public paddingRight: any;
        public paddingTop: any;
        public pageBreakAfter: string;
        public pageBreakBefore: string;
        public pixelHeight: number;
        public pixelLeft: number;
        public pixelTop: number;
        public pixelWidth: number;
        public posHeight: number;
        public readonly position: string;
        public posLeft: number;
        public posTop: number;
        public posWidth: number;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public styleFloat: string;
        public textAlign: string;
        public textDecoration: string;
        public textDecorationBlink: boolean;
        public textDecorationLineThrough: boolean;
        public textDecorationNone: boolean;
        public textDecorationOverline: boolean;
        public textDecorationUnderline: boolean;
        public textIndent: any;
        public textTransform: string;
        public top: any;
        public toString(): string;
        public verticalAlign: any;
        public visibility: string;
        public whiteSpace: string;
        public width: any;
        public wordSpacing: any;
        public zIndex: any;
    }

    class IHTMLStyleMedia {
        private 'MSHTML.IHTMLStyleMedia_typekey': IHTMLStyleMedia;
        private constructor();
        public matchMedium(mediaQuery: string): boolean;
        public readonly type: string;
    }

    class IHTMLStyleSheet {
        private 'MSHTML.IHTMLStyleSheet_typekey': IHTMLStyleSheet;
        private constructor();

        /** @param number [lIndex=-1] */
        public addImport(bstrURL: string, lIndex?: number): number;

        /** @param number [lIndex=-1] */
        public addRule(bstrSelector: string, bstrStyle: string, lIndex?: number): number;
        public cssText: string;
        public disabled: boolean;
        public href: string;
        public readonly id: string;
        public readonly imports: IHTMLStyleSheetsCollection;
        public media: string;
        public readonly owningElement: IHTMLElement;
        public readonly parentStyleSheet: IHTMLStyleSheet;
        public readonly readOnly: boolean;
        public removeImport(lIndex: number): void;
        public removeRule(lIndex: number): void;
        public readonly rules: IHTMLStyleSheetRulesCollection;
        public title: string;
        public readonly type: string;
    }

    class IHTMLStyleSheetPage {
        private 'MSHTML.IHTMLStyleSheetPage_typekey': IHTMLStyleSheetPage;
        private constructor();
        public readonly pseudoClass: string;
        public readonly selector: string;
    }

    class IHTMLStyleSheetPagesCollection {
        private 'MSHTML.IHTMLStyleSheetPagesCollection_typekey': IHTMLStyleSheetPagesCollection;
        private constructor();
        public item(index: number): IHTMLStyleSheetPage;
        public readonly length: number;
    }

    class IHTMLStyleSheetRule {
        private 'MSHTML.IHTMLStyleSheetRule_typekey': IHTMLStyleSheetRule;
        private constructor();
        public readonly readOnly: boolean;
        public selectorText: string;
        public readonly style: IHTMLRuleStyle;
    }

    class IHTMLStyleSheetRulesAppliedCollection {
        private 'MSHTML.IHTMLStyleSheetRulesAppliedCollection_typekey': IHTMLStyleSheetRulesAppliedCollection;
        private constructor();
        public item(index: number): IHTMLStyleSheetRule;
        public readonly length: number;
        public propertyAppliedBy(name: string): IHTMLStyleSheetRule;
        public propertyAppliedTrace(name: string, index: number): IHTMLStyleSheetRule;
        public propertyAppliedTraceLength(name: string): number;
    }

    class IHTMLStyleSheetRulesCollection {
        private 'MSHTML.IHTMLStyleSheetRulesCollection_typekey': IHTMLStyleSheetRulesCollection;
        private constructor();
        public item(index: number): IHTMLStyleSheetRule;
        public readonly length: number;
    }

    class IHTMLStyleSheetsCollection {
        private 'MSHTML.IHTMLStyleSheetsCollection_typekey': IHTMLStyleSheetsCollection;
        private constructor();
        public item(pvarIndex: any): any;
        public readonly length: number;
    }

    class IHTMLTableCaption {
        private 'MSHTML.IHTMLTableCaption_typekey': IHTMLTableCaption;
        private constructor();
        public align: string;
        public vAlign: string;
    }

    class IHTMLTableSection {
        private 'MSHTML.IHTMLTableSection_typekey': IHTMLTableSection;
        private constructor();
        public align: string;
        public bgColor: any;

        /** @param number [index=-1] */
        public deleteRow(index?: number): void;

        /** @param number [index=-1] */
        public insertRow(index?: number): any;
        public readonly rows: IHTMLElementCollection;
        public vAlign: string;
    }

    class IHTMLTimeRanges {
        private 'MSHTML.IHTMLTimeRanges_typekey': IHTMLTimeRanges;
        private constructor();
        public end(index: number): number;
        public readonly length: number;
        public start(index: number): number;
    }

    class IHTMLTxtRange {
        private 'MSHTML.IHTMLTxtRange_typekey': IHTMLTxtRange;
        private constructor();

        /** @param boolean [start=true] */
        public collapse(start?: boolean): void;
        public compareEndPoints(how: string, sourceRange: IHTMLTxtRange): number;
        public duplicate(): IHTMLTxtRange;

        /** @param boolean [showUI=false] */
        public execCommand(cmdID: string, showUI?: boolean, value?: any): boolean;
        public execCommandShowHelp(cmdID: string): boolean;
        public expand(Unit: string): boolean;

        /**
         * @param number [Count=1073741823]
         * @param number [flags=0]
         */
        public findText(String: string, Count?: number, flags?: number): boolean;
        public getBookmark(): string;
        public readonly htmlText: string;
        public inRange(range: IHTMLTxtRange): boolean;
        public isEqual(range: IHTMLTxtRange): boolean;

        /** @param number [Count=1] */
        public move(Unit: string, Count?: number): number;

        /** @param number [Count=1] */
        public moveEnd(Unit: string, Count?: number): number;

        /** @param number [Count=1] */
        public moveStart(Unit: string, Count?: number): number;
        public moveToBookmark(Bookmark: string): boolean;
        public moveToElementText(element: IHTMLElement): void;
        public moveToPoint(x: number, y: number): void;
        public parentElement(): IHTMLElement;
        public pasteHTML(html: string): void;
        public queryCommandEnabled(cmdID: string): boolean;
        public queryCommandIndeterm(cmdID: string): boolean;
        public queryCommandState(cmdID: string): boolean;
        public queryCommandSupported(cmdID: string): boolean;
        public queryCommandText(cmdID: string): string;
        public queryCommandValue(cmdID: string): any;

        /** @param boolean [fStart=true] */
        public scrollIntoView(fStart?: boolean): void;
        public select(): void;
        public setEndPoint(how: string, sourceRange: IHTMLTxtRange): void;
        public text: string;
    }

    class IHTMLWindow2 {
        private 'MSHTML.IHTMLWindow2_typekey': IHTMLWindow2;
        private constructor();

        /** @param string [message=''] */
        public alert(message?: string): void;
        public blur(): void;
        public clearInterval(timerID: number): void;
        public clearTimeout(timerID: number): void;
        public readonly clientInformation: IOmNavigator;
        public close(): void;
        public readonly closed: boolean;

        /** @param string [message=''] */
        public confirm(message?: string): boolean;
        public defaultStatus: string;
        public readonly document: IHTMLDocument2;
        public readonly event: IHTMLEventObj;

        /** @param string [language='JScript'] */
        public execScript(code: string, language?: string): any;
        public readonly external: any;
        public focus(): void;
        public readonly frames: FramesCollection;
        public readonly history: IOmHistory;
        public readonly Image: HTMLImageElementFactory;
        public item(pvarIndex: any): any;
        public readonly length: number;
        public readonly location: IHTMLLocation;
        public moveBy(x: number, y: number): void;
        public moveTo(x: number, y: number): void;
        public name: string;
        public navigate(url: string): void;
        public readonly navigator: IOmNavigator;
        public offscreenBuffering: any;
        public onbeforeunload: any;
        public onblur: any;
        public onerror: any;
        public onfocus: any;
        public onhelp: any;
        public onload: any;
        public onresize: any;
        public onscroll: any;
        public onunload: any;

        /**
         * @param string [url='']
         * @param string [name='']
         * @param string [features='']
         * @param boolean [replace=false]
         */
        public open(url?: string, name?: string, features?: string, replace?: boolean): IHTMLWindow2;
        public opener: any;
        public readonly Option: HTMLOptionElementFactory;
        public readonly parent: IHTMLWindow2;

        /**
         * @param string [message='']
         * @param string [defstr='undefined']
         */
        public prompt(message?: string, defstr?: string): any;
        public resizeBy(x: number, y: number): void;
        public resizeTo(x: number, y: number): void;
        public readonly screen: IHTMLScreen;
        public scroll(x: number, y: number): void;
        public scrollBy(x: number, y: number): void;
        public scrollTo(x: number, y: number): void;
        public readonly self: IHTMLWindow2;
        public setInterval(expression: string, msec: number, language?: any): number;
        public setTimeout(expression: string, msec: number, language?: any): number;

        /** @param string [features=''] */
        public showHelp(helpURL: string, helpArg: any, features?: string): void;
        public showModalDialog(dialog: string, varArgIn?: any, varOptions?: any): any;
        public status: string;
        public readonly top: IHTMLWindow2;
        public toString(): string;
        public readonly window: IHTMLWindow2;
    }

    class IHTMLXDomainRequest {
        private 'MSHTML.IHTMLXDomainRequest_typekey': IHTMLXDomainRequest;
        private constructor();
        public abort(): void;
        public readonly contentType: string;
        public onerror: any;
        public onload: any;
        public onprogress: any;
        public ontimeout: any;
        public open(bstrMethod: string, bstrURL: string): void;
        public readonly responseText: string;
        public send(varBody?: any): void;
        public timeout: number;
    }

    class IHTMLXMLHttpRequest {
        private 'MSHTML.IHTMLXMLHttpRequest_typekey': IHTMLXMLHttpRequest;
        private constructor();
        public abort(): void;
        public getAllResponseHeaders(): string;
        public getResponseHeader(bstrHeader: string): string;
        public onreadystatechange: any;
        public open(bstrMethod: string, bstrURL: string, varAsync: any, varUser?: any, varPassword?: any): void;
        public readonly readyState: number;
        public readonly responseBody: any;
        public readonly responseText: string;
        public readonly responseXML: any;
        public send(varBody?: any): void;
        public setRequestHeader(bstrHeader: string, bstrValue: string): void;
        public readonly status: number;
        public readonly statusText: string;
    }

    class IOmHistory {
        private 'MSHTML.IOmHistory_typekey': IOmHistory;
        private constructor();
        public back(pvargdistance?: any): void;
        public forward(pvargdistance?: any): void;
        public go(pvargdistance?: any): void;
        public readonly length: number;
    }

    class IOmNavigator {
        private 'MSHTML.IOmNavigator_typekey': IOmNavigator;
        private constructor();
        public readonly appCodeName: string;
        public readonly appMinorVersion: string;
        public readonly appName: string;
        public readonly appVersion: string;
        public readonly browserLanguage: string;
        public readonly connectionSpeed: number;
        public readonly cookieEnabled: boolean;
        public readonly cpuClass: string;
        public javaEnabled(): boolean;
        public readonly mimeTypes: CMimeTypes;
        public readonly onLine: boolean;
        public readonly opsProfile: COpsProfile;
        public readonly platform: string;
        public readonly plugins: IHTMLPluginsCollection;
        public readonly systemLanguage: string;
        public taintEnabled(): boolean;
        public toString(): string;
        public readonly userAgent: string;
        public readonly userLanguage: string;
        public readonly userProfile: COpsProfile;
    }

    class IRulesApplied {
        private 'MSHTML.IRulesApplied_typekey': IRulesApplied;
        private constructor();
        public readonly appliedRules: IHTMLStyleSheetRulesAppliedCollection;
        public readonly element: IHTMLElement;
        public hasInheritableProperty(): boolean;
        public readonly inlineStyles: IHTMLStyle;
        public propertyIsInheritable(name: string): boolean;
        public propertyIsInline(name: string): boolean;
    }

    class ISVGElement {
        private 'MSHTML.ISVGElement_typekey': ISVGElement;
        private constructor();
        public focusable: SVGAnimatedEnumeration;
        public ownerSVGElement: ISVGSVGElement;
        public viewportElement: ISVGElement;
        public xmlbase: string;
    }

    class ISVGElementInstance {
        private 'MSHTML.ISVGElementInstance_typekey': ISVGElementInstance;
        private constructor();
        public readonly childNodes: ISVGElementInstanceList;
        public readonly correspondingElement: ISVGElement;
        public readonly correspondingUseElement: ISVGUseElement;
        public readonly firstChild: ISVGElementInstance;
        public readonly lastChild: ISVGElementInstance;
        public readonly nextSibling: ISVGElementInstance;
        public readonly parentNode: ISVGElementInstance;
        public readonly previousSibling: ISVGElementInstance;
    }

    class ISVGElementInstanceList {
        private 'MSHTML.ISVGElementInstanceList_typekey': ISVGElementInstanceList;
        private constructor();
        public item(index: number): ISVGElementInstance;
        public readonly length: number;
    }

    class ISVGPathSegArcAbs {
        private 'MSHTML.ISVGPathSegArcAbs_typekey': ISVGPathSegArcAbs;
        private constructor();
        public angle: number;
        public largeArcFlag: boolean;
        public r1: number;
        public r2: number;
        public sweepFlag: boolean;
        public x: number;
        public y: number;
    }

    class ISVGPathSegArcRel {
        private 'MSHTML.ISVGPathSegArcRel_typekey': ISVGPathSegArcRel;
        private constructor();
        public angle: number;
        public largeArcFlag: boolean;
        public r1: number;
        public r2: number;
        public sweepFlag: boolean;
        public x: number;
        public y: number;
    }

    class ISVGPathSegClosePath {
        private 'MSHTML.ISVGPathSegClosePath_typekey': ISVGPathSegClosePath;
        private constructor();
    }

    class ISVGPathSegCurvetoCubicAbs {
        private 'MSHTML.ISVGPathSegCurvetoCubicAbs_typekey': ISVGPathSegCurvetoCubicAbs;
        private constructor();
        public x: number;
        public x1: number;
        public x2: number;
        public y: number;
        public y1: number;
        public y2: number;
    }

    class ISVGPathSegCurvetoCubicRel {
        private 'MSHTML.ISVGPathSegCurvetoCubicRel_typekey': ISVGPathSegCurvetoCubicRel;
        private constructor();
        public x: number;
        public x1: number;
        public x2: number;
        public y: number;
        public y1: number;
        public y2: number;
    }

    class ISVGPathSegCurvetoCubicSmoothAbs {
        private 'MSHTML.ISVGPathSegCurvetoCubicSmoothAbs_typekey': ISVGPathSegCurvetoCubicSmoothAbs;
        private constructor();
        public x: number;
        public x2: number;
        public y: number;
        public y2: number;
    }

    class ISVGPathSegCurvetoCubicSmoothRel {
        private 'MSHTML.ISVGPathSegCurvetoCubicSmoothRel_typekey': ISVGPathSegCurvetoCubicSmoothRel;
        private constructor();
        public x: number;
        public x2: number;
        public y: number;
        public y2: number;
    }

    class ISVGPathSegCurvetoQuadraticAbs {
        private 'MSHTML.ISVGPathSegCurvetoQuadraticAbs_typekey': ISVGPathSegCurvetoQuadraticAbs;
        private constructor();
        public x: number;
        public x1: number;
        public y: number;
        public y1: number;
    }

    class ISVGPathSegCurvetoQuadraticRel {
        private 'MSHTML.ISVGPathSegCurvetoQuadraticRel_typekey': ISVGPathSegCurvetoQuadraticRel;
        private constructor();
        public x: number;
        public x1: number;
        public y: number;
        public y1: number;
    }

    class ISVGPathSegCurvetoQuadraticSmoothAbs {
        private 'MSHTML.ISVGPathSegCurvetoQuadraticSmoothAbs_typekey': ISVGPathSegCurvetoQuadraticSmoothAbs;
        private constructor();
        public x: number;
        public y: number;
    }

    class ISVGPathSegCurvetoQuadraticSmoothRel {
        private 'MSHTML.ISVGPathSegCurvetoQuadraticSmoothRel_typekey': ISVGPathSegCurvetoQuadraticSmoothRel;
        private constructor();
        public x: number;
        public y: number;
    }

    class ISVGPathSegLinetoAbs {
        private 'MSHTML.ISVGPathSegLinetoAbs_typekey': ISVGPathSegLinetoAbs;
        private constructor();
        public x: number;
        public y: number;
    }

    class ISVGPathSegLinetoHorizontalAbs {
        private 'MSHTML.ISVGPathSegLinetoHorizontalAbs_typekey': ISVGPathSegLinetoHorizontalAbs;
        private constructor();
        public x: number;
    }

    class ISVGPathSegLinetoHorizontalRel {
        private 'MSHTML.ISVGPathSegLinetoHorizontalRel_typekey': ISVGPathSegLinetoHorizontalRel;
        private constructor();
        public x: number;
    }

    class ISVGPathSegLinetoRel {
        private 'MSHTML.ISVGPathSegLinetoRel_typekey': ISVGPathSegLinetoRel;
        private constructor();
        public x: number;
        public y: number;
    }

    class ISVGPathSegLinetoVerticalAbs {
        private 'MSHTML.ISVGPathSegLinetoVerticalAbs_typekey': ISVGPathSegLinetoVerticalAbs;
        private constructor();
        public y: number;
    }

    class ISVGPathSegLinetoVerticalRel {
        private 'MSHTML.ISVGPathSegLinetoVerticalRel_typekey': ISVGPathSegLinetoVerticalRel;
        private constructor();
        public y: number;
    }

    class ISVGPathSegMovetoAbs {
        private 'MSHTML.ISVGPathSegMovetoAbs_typekey': ISVGPathSegMovetoAbs;
        private constructor();
        public x: number;
        public y: number;
    }

    class ISVGPathSegMovetoRel {
        private 'MSHTML.ISVGPathSegMovetoRel_typekey': ISVGPathSegMovetoRel;
        private constructor();
        public x: number;
        public y: number;
    }

    class ISVGSVGElement {
        private 'MSHTML.ISVGSVGElement_typekey': ISVGSVGElement;
        private constructor();
        public animationsPaused(): boolean;
        public checkEnclosure(element: ISVGElement, rect: SVGRect): boolean;
        public checkIntersection(element: ISVGElement, rect: SVGRect): boolean;
        public contentScriptType: string;
        public contentStyleType: string;
        public createSVGAngle(): SVGAngle;
        public createSVGLength(): SVGLength;
        public createSVGMatrix(): SVGMatrix;
        public createSVGNumber(): SVGNumber;
        public createSVGPoint(): SVGPoint;
        public createSVGRect(): SVGRect;
        public createSVGTransform(): SVGTransform;
        public createSVGTransformFromMatrix(matrix: SVGMatrix): SVGTransform;
        public currentScale: number;
        public currentTranslate: SVGPoint;
        public currentView: ISVGViewSpec;
        public deselectAll(): void;
        public forceRedraw(): void;
        public getCurrentTime(): number;
        public getElementById(elementId: string): IHTMLElement;
        public getEnclosureList(rect: SVGRect, referenceElement: ISVGElement): any;
        public getIntersectionList(rect: SVGRect, referenceElement: ISVGElement): any;
        public height: SVGAnimatedLength;
        public pauseAnimations(): void;
        public pixelUnitToMillimeterX: number;
        public pixelUnitToMillimeterY: number;
        public screenPixelToMillimeterX: number;
        public screenPixelToMillimeterY: number;
        public setCurrentTime(seconds: number): void;
        public suspendRedraw(maxWaitMilliseconds: number): number;
        public unpauseAnimations(): void;
        public unsuspendRedraw(suspendHandeID: number): void;
        public unsuspendRedrawAll(): void;
        public useCurrentView: boolean;
        public viewport: SVGRect;
        public width: SVGAnimatedLength;
        public x: SVGAnimatedLength;
        public y: SVGAnimatedLength;
    }

    class ISVGUseElement {
        private 'MSHTML.ISVGUseElement_typekey': ISVGUseElement;
        private constructor();
        public animatedInstanceRoot: ISVGElementInstance;
        public height: SVGAnimatedLength;
        public instanceRoot: ISVGElementInstance;
        public width: SVGAnimatedLength;
        public x: SVGAnimatedLength;
        public y: SVGAnimatedLength;
    }

    class ISVGViewSpec {
        private 'MSHTML.ISVGViewSpec_typekey': ISVGViewSpec;
        private constructor();
    }

    class IWebGeocoordinates {
        private 'MSHTML.IWebGeocoordinates_typekey': IWebGeocoordinates;
        private constructor();
        public readonly accuracy: number;
        public readonly altitude: any;
        public readonly altitudeAccuracy: any;
        public readonly heading: any;
        public readonly latitude: number;
        public readonly longitude: number;
        public readonly speed: any;
    }

    class IWebGeolocation {
        private 'MSHTML.IWebGeolocation_typekey': IWebGeolocation;
        private constructor();
        public clearWatch(watchId: number): void;
        public getCurrentPosition(successCallback: any, errorCallback?: any, options?: any): void;
        public watchPosition(successCallback: any, errorCallback?: any, options?: any): number;
    }

    class NodeIterator {
        private 'MSHTML.NodeIterator_typekey': NodeIterator;
        private constructor();
        public Detach(): void;
        public readonly expandEntityReferences: boolean;
        public readonly filter: any;
        public nextNode(): any;
        public previousNode(): any;
        public readonly root: any;
        public readonly whatToShow: number;
    }

    class OldHTMLDocument {
        private 'MSHTML.OldHTMLDocument_typekey': OldHTMLDocument;
        private constructor();
        public readonly activeElement: IHTMLElement;
        public addEventListener(type: string, listener: any, useCapture: boolean): void;
        public adoptNode(pNodeSource: IHTMLDOMNode): IHTMLDOMNode3;
        public alinkColor: any;
        public readonly all: IHTMLElementCollection;
        public readonly anchors: IHTMLElementCollection;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public readonly applets: IHTMLElementCollection;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public bgColor: any;
        public readonly body: IHTMLElement;
        public readonly characterSet: string;
        public charset: string;
        public readonly childNodes: any;
        public clear(): void;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public close(): void;
        public compareDocumentPosition(otherNode: IHTMLDOMNode): number;
        public readonly compatible: IHTMLDocumentCompatibleInfoCollection;
        public readonly compatMode: string;
        public readonly 'constructor': any;
        public cookie: string;
        public createAttribute(bstrAttrName: string): IHTMLDOMAttribute;
        public createAttributeNS(pvarNS: any, bstrAttrName: string): IHTMLDOMAttribute;
        public createCDATASection(text: string): IHTMLDOMNode;
        public createComment(bstrData: string): IHTMLDOMNode;
        public createDocumentFragment(): IHTMLDocument2;
        public createDocumentFromUrl(bstrURL: string, bstrOptions: string): IHTMLDocument2;
        public createElement(eTag: string): IHTMLElement;
        public createElementNS(pvarNS: any, bstrTag: string): IHTMLElement;
        public createEvent(eventType: string): IDOMEvent;
        public CreateEventObject(pvarEventObject?: any): IHTMLEventObj;
        public createNodeIterator(pRootNode: any, ulWhatToShow: number, pFilter: any, fEntityReferenceExpansion: boolean): IDOMNodeIterator;
        public createProcessingInstruction(bstrTarget: string, bstrData: string): IDOMProcessingInstruction;
        public createRange(): IHTMLDOMRange;
        public createRenderStyle(v: string): IHTMLRenderStyle;

        /**
         * @param string [bstrHref='']
         * @param number [lIndex=-1]
         */
        public createStyleSheet(bstrHref?: string, lIndex?: number): IHTMLStyleSheet;
        public createTextNode(text: string): IHTMLDOMNode;
        public createTreeWalker(pRootNode: any, ulWhatToShow: number, pFilter: any, fEntityReferenceExpansion: boolean): IDOMTreeWalker;
        public defaultCharset: string;
        public readonly defaultView: IHTMLWindow2;
        public designMode: string;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public dispatchEvent(evt: IDOMEvent): boolean;
        public readonly doctype: IHTMLDOMNode;
        public readonly documentElement: IHTMLElement;
        public readonly documentMode: any;
        public domain: string;
        public elementFromPoint(x: number, y: number): IHTMLElement;
        public elementsFromPoint(x: number, y: number): IHTMLDOMChildrenCollection;
        public elementsFromRect(left: number, top: number, width: number, height: number): IHTMLDOMChildrenCollection;
        public readonly embeds: IHTMLElementCollection;

        /** @param boolean [showUI=false] */
        public execCommand(cmdID: string, showUI?: boolean, value?: any): boolean;
        public execCommandShowHelp(cmdID: string): boolean;
        public expando: boolean;
        public fgColor: any;
        public readonly fileCreatedDate: string;
        public readonly fileModifiedDate: string;
        public readonly fileSize: string;
        public readonly fileUpdatedDate: string;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public readonly forms: IHTMLElementCollection;
        public readonly frames: FramesCollection;
        public getElementById(v: string): IHTMLElement;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(pvarNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getSelection(): IHTMLSelection;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hasFocus(): boolean;
        public readonly head: IHTMLElement;
        public ie8_getElementById(bstrId: string): IHTMLElement2;
        public readonly ie9_all: IHTMLElementCollection;
        public ie9_appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_body: IHTMLElement;
        public ie9_createAttribute(bstrAttrName: string): IHTMLDOMAttribute;
        public ie9_createElement(bstrTag: string): IHTMLElement;
        public ie9_insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly ie9_parentWindow: IHTMLWindow2;
        public ie9_removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public ie9_replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public readonly images: IHTMLElementCollection;
        public readonly implementation: IHTMLDOMImplementation;
        public importNode(pNodeSource: IHTMLDOMNode, fDeep: boolean): IHTMLDOMNode3;
        public readonly inputEncoding: string;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public isDefaultNamespace(pvarNamespace: any): boolean;
        public isEqualNode(otherNode: IHTMLDOMNode3): boolean;
        public isSameNode(otherNode: IHTMLDOMNode3): boolean;
        public isSupported(feature: string, version: any): boolean;
        public readonly lastChild: IHTMLDOMNode;
        public readonly lastModified: string;
        public linkColor: any;
        public readonly links: IHTMLElementCollection;
        public readonly localName: any;
        public readonly location: IHTMLLocation;
        public lookupNamespaceURI(pvarPrefix: any): any;
        public lookupPrefix(pvarNamespaceURI: any): any;
        public media: string;
        public readonly mimeType: string;
        public msCapsLockWarningOff: boolean;
        public readonly nameProp: string;
        public readonly namespaces: any;
        public readonly namespaceURI: any;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onmousedown: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmscontentzoom: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsinertiastart: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmssitemodejumplistitemremoved: any;
        public onmsthumbnailclick: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectionchange: any;
        public onselectstart: any;
        public onstalled: any;
        public onstop: any;
        public onstorage: any;
        public onstoragecommit: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;

        /** @param string [url='text/html'] */
        public open(url?: string, name?: any, features?: any, replace?: any): any;
        public readonly ownerDocument: any;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentWindow: IHTMLWindow2;
        public readonly plugins: IHTMLElementCollection;
        public prefix: any;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly protocol: string;
        public queryCommandEnabled(cmdID: string): boolean;
        public queryCommandIndeterm(cmdID: string): boolean;
        public queryCommandState(cmdID: string): boolean;
        public queryCommandSupported(cmdID: string): boolean;
        public queryCommandText(cmdID: string): string;
        public queryCommandValue(cmdID: string): any;
        public querySelector(v: string): IHTMLElement;
        public querySelectorAll(v: string): IHTMLDOMChildrenCollection;
        public readonly readyState: string;

        /** @param boolean [fForce=false] */
        public recalc(fForce?: boolean): void;
        public readonly referrer: string;
        public releaseCapture(): void;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeEventListener(type: string, listener: any, useCapture: boolean): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public readonly rootElement: ISVGSVGElement;
        public readonly Script: any;
        public readonly scripts: IHTMLElementCollection;
        public readonly security: string;
        public readonly selection: IHTMLSelectionObject;
        public readonly styleSheets: IHTMLStyleSheetsCollection;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public textContent: any;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public updateSettings(): void;
        public url: string;
        public readonly URLUnencoded: string;
        public vlinkColor: any;
        public write(...psarray: any[]): void;
        public writeln(...psarray: any[]): void;
        public readonly xmlEncoding: string;
        public xmlStandalone: boolean;
        public xmlVersion: string;
    }

    class OldHTMLFormElement {
        private 'MSHTML.OldHTMLFormElement_typekey': OldHTMLFormElement;
        private constructor();
        public acceptCharset: string;
        public accessKey: string;
        public action: string;
        public addBehavior(bstrURL: string, pvarFactory?: any): number;
        public addFilter(pUnk: any): void;
        public readonly all: any;
        public appendChild(newChild: IHTMLDOMNode): IHTMLDOMNode;
        public appendItemSeparator(): void;

        /**
         * @param string [name='']
         * @param string [filename='']
         */
        public appendNameFilePair(name?: string, filename?: string): void;

        /**
         * @param string [name='']
         * @param string [value='']
         */
        public appendNameValuePair(name?: string, value?: string): void;
        public applyElement(apply: IHTMLElement, where: string): IHTMLElement;
        public ariaActivedescendant: string;
        public ariaBusy: string;
        public ariaChecked: string;
        public ariaControls: string;
        public ariaDescribedby: string;
        public ariaDisabled: string;
        public ariaExpanded: string;
        public ariaFlowto: string;
        public ariaHaspopup: string;
        public ariaHidden: string;
        public ariaInvalid: string;
        public ariaLabelledby: string;
        public ariaLevel: number;
        public ariaLive: string;
        public ariaMultiselectable: string;
        public ariaOwns: string;
        public ariaPosinset: number;
        public ariaPressed: string;
        public ariaReadonly: string;
        public ariaRelevant: string;
        public ariaRequired: string;
        public ariaSecret: string;
        public ariaSelected: string;
        public ariaSetsize: number;
        public ariaValuemax: string;
        public ariaValuemin: string;
        public ariaValuenow: string;
        public attachEvent(event: string, pdisp: any): boolean;
        public readonly attributes: any;
        public readonly behaviorUrns: any;
        public blur(): void;
        public readonly canHaveChildren: boolean;
        public readonly canHaveHTML: boolean;
        public readonly childNodes: any;
        public readonly children: any;
        public className: string;
        public clearAttributes(): void;
        public click(): void;
        public readonly clientHeight: number;
        public readonly clientLeft: number;
        public readonly clientTop: number;
        public readonly clientWidth: number;
        public cloneNode(fDeep: boolean): IHTMLDOMNode;
        public componentFromPoint(x: number, y: number): string;
        public readonly 'constructor': any;
        public contains(pChild: IHTMLElement): boolean;
        public contentEditable: string;
        public createControlRange(): any;
        public readonly currentStyle: IHTMLCurrentStyle;
        public detachEvent(event: string, pdisp: any): void;
        public dir: string;
        public disabled: boolean;
        public readonly document: any;
        public doScroll(component?: any): void;
        public dragDrop(): boolean;
        public readonly elements: any;
        public encoding: string;
        public readonly filters: IHTMLFiltersCollection;
        public FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
        public readonly firstChild: IHTMLDOMNode;
        public focus(): void;
        public getAdjacentText(where: string): string;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public getAttributeNode(bstrName: string): IHTMLDOMAttribute;
        public getAttributeNodeNS(pvarNS: any, bstrName: string): IHTMLDOMAttribute2;
        public getAttributeNS(pvarNS: any, strAttributeName: string): any;
        public getBoundingClientRect(): IHTMLRect;
        public getClientRects(): IHTMLRectCollection;
        public getElementsByClassName(v: string): IHTMLElementCollection;
        public getElementsByTagName(v: string): IHTMLElementCollection;
        public getElementsByTagNameNS(varNS: any, bstrLocalName: string): IHTMLElementCollection;
        public getExpression(propname: string): any;
        public hasAttribute(name: string): boolean;
        public hasAttributeNS(pvarNS: any, name: string): boolean;
        public hasAttributes(): boolean;
        public hasChildNodes(): boolean;
        public hideFocus: boolean;
        public id: string;
        public ie8_action: string;
        public readonly ie8_attributes: IHTMLAttributeCollection3;
        public ie8_getAttribute(strAttributeName: string): any;
        public ie8_getAttributeNode(bstrName: string): IHTMLDOMAttribute2;
        public ie8_removeAttribute(strAttributeName: string): boolean;
        public ie8_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
        public ie8_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_getAttribute(strAttributeName: string): any;
        public ie9_getAttributeNode(strAttributeName: string): IHTMLDOMAttribute2;
        public ie9_hasAttribute(name: string): boolean;
        public ie9_hasAttributes(): boolean;
        public readonly ie9_nodeName: string;
        public ie9_removeAttribute(strAttributeName: string): void;
        public ie9_removeAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
        public ie9_setAttributeNode(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public readonly ie9_tagName: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentElement(where: string, insertedElement: IHTMLElement): IHTMLElement;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public insertBefore(newChild: IHTMLDOMNode, refChild?: any): IHTMLDOMNode;
        public readonly isContentEditable: boolean;
        public readonly isDisabled: boolean;
        public readonly isMultiLine: boolean;
        public readonly isTextEdit: boolean;
        public item(name?: any, index?: any): any;
        public lang: string;
        public language: string;
        public readonly lastChild: IHTMLDOMNode;
        public length: number;
        public mergeAttributes(mergeThis: IHTMLElement, pvarFlags?: any): void;
        public method: string;
        public msMatchesSelector(v: string): boolean;
        public msReleasePointerCapture(pointerId: number): void;
        public msSetPointerCapture(pointerId: number): void;
        public name: string;
        public namedItem(name: string): any;
        public readonly nextSibling: IHTMLDOMNode;
        public readonly nodeName: string;
        public readonly nodeType: number;
        public nodeValue: any;
        public normalize(): void;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onabort: any;
        public onactivate: any;
        public onafterupdate: any;
        public onbeforeactivate: any;
        public onbeforecopy: any;
        public onbeforecut: any;
        public onbeforedeactivate: any;
        public onbeforeeditfocus: any;
        public onbeforepaste: any;
        public onbeforeupdate: any;
        public onblur: any;
        public oncanplay: any;
        public oncanplaythrough: any;
        public oncellchange: any;
        public onchange: any;
        public onclick: any;
        public oncontextmenu: any;
        public oncontrolselect: any;
        public oncopy: any;
        public oncuechange: any;
        public oncut: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondeactivate: any;
        public ondrag: any;
        public ondragend: any;
        public ondragenter: any;
        public ondragleave: any;
        public ondragover: any;
        public ondragstart: any;
        public ondrop: any;
        public ondurationchange: any;
        public onemptied: any;
        public onended: any;
        public onerror: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onfocus: any;
        public onfocusin: any;
        public onfocusout: any;
        public onhelp: any;
        public oninput: any;
        public oninvalid: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onlayoutcomplete: any;
        public onload: any;
        public onloadeddata: any;
        public onloadedmetadata: any;
        public onloadstart: any;
        public onlosecapture: any;
        public onmousedown: any;
        public onmouseenter: any;
        public onmouseleave: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onmousewheel: any;
        public onmove: any;
        public onmoveend: any;
        public onmovestart: any;
        public onmsanimationend: any;
        public onmsanimationiteration: any;
        public onmsanimationstart: any;
        public onmsgesturechange: any;
        public onmsgesturedoubletap: any;
        public onmsgestureend: any;
        public onmsgesturehold: any;
        public onmsgesturestart: any;
        public onmsgesturetap: any;
        public onmsgotpointercapture: any;
        public onmsinertiastart: any;
        public onmslostpointercapture: any;
        public onmsmanipulationstatechanged: any;
        public onmspointercancel: any;
        public onmspointerdown: any;
        public onmspointerhover: any;
        public onmspointermove: any;
        public onmspointerout: any;
        public onmspointerover: any;
        public onmspointerup: any;
        public onmstransitionend: any;
        public onmstransitionstart: any;
        public onpage: any;
        public onpaste: any;
        public onpause: any;
        public onplay: any;
        public onplaying: any;
        public onprogress: any;
        public onpropertychange: any;
        public onratechange: any;
        public onreadystatechange: any;
        public onreset: any;
        public onresize: any;
        public onresizeend: any;
        public onresizestart: any;
        public onrowenter: any;
        public onrowexit: any;
        public onrowsdelete: any;
        public onrowsinserted: any;
        public onscroll: any;
        public onseeked: any;
        public onseeking: any;
        public onselect: any;
        public onselectstart: any;
        public onstalled: any;
        public onsubmit: any;
        public onsuspend: any;
        public ontimeupdate: any;
        public onvolumechange: any;
        public onwaiting: any;
        public outerHTML: string;
        public outerText: string;
        public readonly ownerDocument: any;
        public readonly parentElement: IHTMLElement;
        public readonly parentNode: IHTMLDOMNode;
        public readonly parentTextEdit: IHTMLElement;
        public readonly previousSibling: IHTMLDOMNode;
        public readonly readyState: any;
        public readonly recordNumber: any;
        public releaseCapture(): void;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public removeAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public removeAttributeNS(pvarNS: any, strAttributeName: string): void;
        public removeBehavior(cookie: number): boolean;
        public removeChild(oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public removeExpression(propname: string): boolean;
        public removeFilter(pUnk: any): void;

        /** @param boolean [fDeep=false] */
        public removeNode(fDeep?: boolean): IHTMLDOMNode;
        public replaceAdjacentText(where: string, newText: string): string;
        public replaceChild(newChild: IHTMLDOMNode, oldChild: IHTMLDOMNode): IHTMLDOMNode;
        public replaceNode(replacement: IHTMLDOMNode): IHTMLDOMNode;
        public reset(): void;
        public role: string;
        public readonly runtimeStyle: IHTMLStyle;
        public readonly scopeName: string;
        public readonly scrollHeight: number;
        public scrollIntoView(varargStart?: any): void;
        public scrollLeft: number;
        public scrollTop: number;
        public readonly scrollWidth: number;
        public setActive(): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public setAttributeNode(pattr: IHTMLDOMAttribute): IHTMLDOMAttribute;
        public setAttributeNodeNS(pattr: IHTMLDOMAttribute2): IHTMLDOMAttribute2;
        public setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

        /** @param boolean [containerCapture=true] */
        public setCapture(containerCapture?: boolean): void;

        /** @param string [language=''] */
        public setExpression(propname: string, expression: string, language?: string): void;
        public readonly sourceIndex: number;
        public spellcheck: any;
        public readonly style: IHTMLStyle;
        public submit(): void;
        public swapNode(otherNode: IHTMLDOMNode): IHTMLDOMNode;
        public tabIndex: number;
        public readonly tagName: string;
        public tags(tagName: any): any;
        public tagUrn: string;
        public target: string;
        public title: string;
        public toString(): string;
        public readonly uniqueID: string;
        public readonly uniqueNumber: number;
        public urns(urn: any): any;
        public xmsAcceleratorKey: string;
    }

    class RangeException {
        private 'MSHTML.RangeException_typekey': RangeException;
        private constructor();
        public code: number;
        public readonly message: string;
    }

    class RulesApplied {
        private 'MSHTML.RulesApplied_typekey': RulesApplied;
        private constructor();
        public readonly appliedRules: IHTMLStyleSheetRulesAppliedCollection;
        public readonly element: IHTMLElement;
        public hasInheritableProperty(): boolean;
        public readonly inlineStyles: IHTMLStyle;
        public propertyIsInheritable(name: string): boolean;
        public propertyIsInline(name: string): boolean;
    }

    class RulesAppliedCollection {
        private 'MSHTML.RulesAppliedCollection_typekey': RulesAppliedCollection;
        private constructor();
        public readonly element: IHTMLElement;
        public item(index: number): IRulesApplied;
        public readonly length: number;
        public property(index: number): string;
        public readonly propertyCount: number;
        public propertyInheritedFrom(name: string): IRulesApplied;
        public propertyInheritedTrace(name: string, index: number): IRulesApplied;
        public propertyInheritedTraceLength(name: string): number;
    }

    class Scriptlet {
        private 'MSHTML.Scriptlet_typekey': Scriptlet;
        private constructor();
        public AboutBox(): void;
        public embed: boolean;
        public readonly event: any;
        public readonly readyState: number;
        public Scrollbar: boolean;
        public url: string;
    }

    class StaticNodeList {
        private 'MSHTML.StaticNodeList_typekey': StaticNodeList;
        private constructor();
        public readonly 'constructor': any;
        public item(index: number): any;
        public readonly length: number;
    }

    class SVGAElement {
        private 'MSHTML.SVGAElement_typekey': SVGAElement;
        private constructor();
        public readonly className: SVGAnimatedString;
        public readonly externalResourcesRequired: SVGAnimatedBoolean;
        public readonly farthestViewportElement: ISVGElement;
        public focusable: SVGAnimatedEnumeration;
        public getBBox(): SVGRect;
        public getCTM(): SVGMatrix;
        public getScreenCTM(): SVGMatrix;
        public getTransformToElement(pElement: ISVGElement): SVGMatrix;
        public hasExtension(extension: string): boolean;
        public readonly href: SVGAnimatedString;
        public readonly nearestViewportElement: ISVGElement;
        public ownerSVGElement: ISVGSVGElement;
        public readonly requiredExtensions: SVGStringList;
        public readonly requiredFeatures: SVGStringList;
        public readonly systemLanguage: SVGStringList;
        public target: SVGAnimatedString;
        public readonly transform: SVGAnimatedTransformList;
        public viewportElement: ISVGElement;
        public xmlbase: string;
        public xmllang: string;
        public xmlspace: string;
    }

    class SVGAngle {
        private 'MSHTML.SVGAngle_typekey': SVGAngle;
        private constructor();
        public convertToSpecifiedUnits(unitType: number): void;
        public newValueSpecifiedUnits(unitType: number, valueInSpecifiedUnits: number): void;
        public unitType: number;
        public value: number;
        public valueAsString: string;
        public valueInSpecifiedUnits: number;
    }

    class SVGAnimatedAngle {
        private 'MSHTML.SVGAnimatedAngle_typekey': SVGAnimatedAngle;
        private constructor();
        public animVal: SVGAngle;
        public baseVal: SVGAngle;
    }

    class SVGAnimatedBoolean {
        private 'MSHTML.SVGAnimatedBoolean_typekey': SVGAnimatedBoolean;
        private constructor();
        public animVal: boolean;
        public baseVal: boolean;
    }

    class SVGAnimatedEnumeration {
        private 'MSHTML.SVGAnimatedEnumeration_typekey': SVGAnimatedEnumeration;
        private constructor();
        public animVal: number;
        public baseVal: number;
    }

    class SVGAnimatedInteger {
        private 'MSHTML.SVGAnimatedInteger_typekey': SVGAnimatedInteger;
        private constructor();
        public animVal: number;
        public baseVal: number;
    }

    class SVGAnimatedLength {
        private 'MSHTML.SVGAnimatedLength_typekey': SVGAnimatedLength;
        private constructor();
        public animVal: SVGLength;
        public baseVal: SVGLength;
    }

    class SVGAnimatedLengthList {
        private 'MSHTML.SVGAnimatedLengthList_typekey': SVGAnimatedLengthList;
        private constructor();
        public animVal: SVGLengthList;
        public baseVal: SVGLengthList;
    }

    class SVGAnimatedNumber {
        private 'MSHTML.SVGAnimatedNumber_typekey': SVGAnimatedNumber;
        private constructor();
        public animVal: number;
        public baseVal: number;
    }

    class SVGAnimatedNumberList {
        private 'MSHTML.SVGAnimatedNumberList_typekey': SVGAnimatedNumberList;
        private constructor();
        public animVal: SVGNumberList;
        public baseVal: SVGNumberList;
    }

    class SVGAnimatedPreserveAspectRatio {
        private 'MSHTML.SVGAnimatedPreserveAspectRatio_typekey': SVGAnimatedPreserveAspectRatio;
        private constructor();
        public animVal: SVGPreserveAspectRatio;
        public baseVal: SVGPreserveAspectRatio;
    }

    class SVGAnimatedRect {
        private 'MSHTML.SVGAnimatedRect_typekey': SVGAnimatedRect;
        private constructor();
        public animVal: SVGRect;
        public baseVal: SVGRect;
    }

    class SVGAnimatedString {
        private 'MSHTML.SVGAnimatedString_typekey': SVGAnimatedString;
        private constructor();
        public readonly animVal: string;
        public baseVal: string;
    }

    class SVGAnimatedTransformList {
        private 'MSHTML.SVGAnimatedTransformList_typekey': SVGAnimatedTransformList;
        private constructor();
        public animVal: SVGTransformList;
        public baseVal: SVGTransformList;
    }

    class SVGCircleElement {
        private 'MSHTML.SVGCircleElement_typekey': SVGCircleElement;
        private constructor();
        public cx: SVGAnimatedLength;
        public cy: SVGAnimatedLength;
        public readonly farthestViewportElement: ISVGElement;
        public focusable: SVGAnimatedEnumeration;
        public getBBox(): SVGRect;
        public getCTM(): SVGMatrix;
        public getScreenCTM(): SVGMatrix;
        public getTransformToElement(pElement: ISVGElement): SVGMatrix;
        public hasExtension(extension: string): boolean;
        public readonly nearestViewportElement: ISVGElement;
        public ownerSVGElement: ISVGSVGElement;
        public r: SVGAnimatedLength;
        public readonly requiredExtensions: SVGStringList;
        public readonly requiredFeatures: SVGStringList;
        public readonly systemLanguage: SVGStringList;
        public readonly transform: SVGAnimatedTransformList;
        public viewportElement: ISVGElement;
        public xmlbase: string;
    }

    class SVGClipPathElement {
        private 'MSHTML.SVGClipPathElement_typekey': SVGClipPathElement;
        private constructor();
        public readonly className: SVGAnimatedString;
        public clipPathUnits: SVGAnimatedEnumeration;
        public readonly externalResourcesRequired: SVGAnimatedBoolean;
        public readonly farthestViewportElement: ISVGElement;
        public focusable: SVGAnimatedEnumeration;
        public getBBox(): SVGRect;
        public getCTM(): SVGMatrix;
        public getScreenCTM(): SVGMatrix;
        public getTransformToElement(pElement: ISVGElement): SVGMatrix;
        public hasExtension(extension: string): boolean;
        public readonly nearestViewportElement: ISVGElement;
        public ownerSVGElement: ISVGSVGElement;
        public readonly requiredExtensions: SVGStringList;
        public readonly requiredFeatures: SVGStringList;
        public readonly systemLanguage: SVGStringList;
        public readonly transform: SVGAnimatedTransformList;
        public viewportElement: ISVGElement;
        public xmlbase: string;
        public xmllang: string;
        public xmlspace: string;
    }

    class SVGDefsElement {
        private 'MSHTML.SVGDefsElement_typekey': SVGDefsElement;
        private constructor();
        public readonly className: SVGAnimatedString;
        public readonly externalResourcesRequired: SVGAnimatedBoolean;
        public readonly farthestViewportElement: ISVGElement;
        public focusable: SVGAnimatedEnumeration;
        public getBBox(): SVGRect;
        public getCTM(): SVGMatrix;
        public getScreenCTM(): SVGMatrix;
        public getTransformToElement(pElement: ISVGElement): SVGMatrix;
        public hasExtension(extension: string): boolean;
        public readonly nearestViewportElement: ISVGElement;
        public ownerSVGElement: ISVGSVGElement;
        public readonly requiredExtensions: SVGStringList;
        public readonly requiredFeatures: SVGStringList;
        public readonly systemLanguage: SVGStringList;
        public readonly transform: SVGAnimatedTransformList;
        public viewportElement: ISVGElement;
        public xmlbase: string;
        public xmllang: string;
        public xmlspace: string;
    }

    class SVGDescElement {
        private 'MSHTML.SVGDescElement_typekey': SVGDescElement;
        private constructor();
        public readonly className: SVGAnimatedString;
        public focusable: SVGAnimatedEnumeration;
        public ownerSVGElement: ISVGSVGElement;
        public viewportElement: ISVGElement;
        public xmlbase: string;
        public xmllang: string;
        public xmlspace: string;
    }

    class SVGElement {
        private 'MSHTML.SVGElement_typekey': SVGElement;
        private constructor();
        public readonly all: any;
        public readonly children: any;
        public className: string;
        public click(): void;
        public contains(pChild: IHTMLElement): boolean;
        public readonly document: any;
        public readonly filters: IHTMLFiltersCollection;
        public focusable: SVGAnimatedEnumeration;

        /** @param number [lFlags=0] */
        public getAttribute(strAttributeName: string, lFlags?: number): any;
        public id: string;
        public innerHTML: string;
        public innerText: string;
        public insertAdjacentHTML(where: string, html: string): void;
        public insertAdjacentText(where: string, text: string): void;
        public readonly isTextEdit: boolean;
        public lang: string;
        public language: string;
        public readonly offsetHeight: number;
        public readonly offsetLeft: number;
        public readonly offsetParent: IHTMLElement;
        public readonly offsetTop: number;
        public readonly offsetWidth: number;
        public onafterupdate: any;
        public onbeforeupdate: any;
        public onclick: any;
        public ondataavailable: any;
        public ondatasetchanged: any;
        public ondatasetcomplete: any;
        public ondblclick: any;
        public ondragstart: any;
        public onerrorupdate: any;
        public onfilterchange: any;
        public onhelp: any;
        public onkeydown: any;
        public onkeypress: any;
        public onkeyup: any;
        public onmousedown: any;
        public onmousemove: any;
        public onmouseout: any;
        public onmouseover: any;
        public onmouseup: any;
        public onrowenter: any;
        public onrowexit: any;
        public onselectstart: any;
        public outerHTML: string;
        public outerText: string;
        public ownerSVGElement: ISVGSVGElement;
        public readonly parentElement: IHTMLElement;
        public readonly parentTextEdit: IHTMLElement;
        public readonly recordNumber: any;

        /** @param number [lFlags=1] */
        public removeAttribute(strAttributeName: string, lFlags?: number): boolean;
        public scrollIntoView(varargStart?: any): void;

        /** @param number [lFlags=1] */
        public setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
        public readonly sourceIndex: number;
        public readonly style: IHTMLStyle;
        public readonly tagName: string;
        public title: string;
        public toString(): string;
        public viewportElement: ISVGElement;
        public xmlbase: string;
    }

    class SVGElementInstance {
        private 'MSHTML.SVGElementInstance_typekey': SVGElementInstance;
        private constructor();
        public addEventListener(type: string, listener: any, useCapture: boolean): void;
        public readonly childNodes: ISVGElementInstanceList;
        public readonly correspondingElement: ISVGElement;
        public readonly correspondingUseElement: ISVGUseElement;
        public dispatchEvent(evt: IDOMEvent): boolean;
        public readonly firstChild: ISVGElementInstance;
        public readonly lastChild: ISVGElementInstance;
        public readonly nextSibling: ISVGElementInstance;
        public readonly parentNode: ISVGElementInstance;
        public readonly previousSibling: ISVGElementInstance;
        public removeEventListener(type: string, listener: any, useCapture: boolean): void;
    }

    class SVGElementInstanceList {
        private 'MSHTML.SVGElementInstanceList_typekey': SVGElementInstanceList;
        private constructor();
        public item(index: number): ISVGElementInstance;
        public readonly length: number;
    }

    class SVGEllipseElement {
        private 'MSHTML.SVGEllipseElement_typekey': SVGEllipseElement;
        private constructor();
        public cx: SVGAnimatedLength;
        public cy: SVGAnimatedLength;
        public readonly farthestViewportElement: ISVGElement;
        public focusable: SVGAnimatedEnumeration;
        public getBBox(): SVGRect;
        public getCTM(): SVGMatrix;
        public getScreenCTM(): SVGMatrix;
        public getTransformToElement(pElement: ISVGElement): SVGMatrix;
        public hasExtension(extension: string): boolean;
        public readonly nearestViewportElement: ISVGElement;
        public ownerSVGElement: ISVGSVGElement;
        public readonly requiredExtensions: SVGStringList;
        public readonly requiredFeatures: SVGStringList;
        public rx: SVGAnimatedLength;
        public ry: SVGAnimatedLength;
        public readonly systemLanguage: SVGStringList;
        public readonly transform: SVGAnimatedTransformList;
        public viewportElement: ISVGElement;
        public xmlbase: string;
    }

    class SVGException {
        private 'MSHTML.SVGException_typekey': SVGException;
        private constructor();
        public code: number;
        public readonly message: string;
    }

    class SVGGElement {
        private 'MSHTML.SVGGElement_typekey': SVGGElement;
        private constructor();
        public readonly className: SVGAnimatedString;
        public readonly externalResourcesRequired: SVGAnimatedBoolean;
        public readonly farthestViewportElement: ISVGElement;
        public focusable: SVGAnimatedEnumeration;
        public getBBox(): SVGRect;
        public getCTM(): SVGMatrix;
        public getScreenCTM(): SVGMatrix;
        public getTransformToElement(pElement: ISVGElement): SVGMatrix;
        public hasExtension(extension: string): boolean;
        public readonly nearestViewportElement: ISVGElement;
        public ownerSVGElement: ISVGSVGElement;
        public readonly requiredExtensions: SVGStringList;
        public readonly requiredFeatures: SVGStringList;
        public readonly systemLanguage: SVGStringList;
        public readonly transform: SVGAnimatedTransformList;
        public viewportElement: ISVGElement;
        public xmlbase: string;
        public xmllang: string;
        public xmlspace: string;
    }

    class SVGGradientElement {
        private 'MSHTML.SVGGradientElement_typekey': SVGGradientElement;
        private constructor();
        public readonly className: SVGAnimatedString;
        public readonly externalResourcesRequired: SVGAnimatedBoolean;
        public focusable: SVGAnimatedEnumeration;
        public gradientTransform: SVGAnimatedTransformList;
        public gradientUnits: SVGAnimatedEnumeration;
        public readonly href: SVGAnimatedString;
        public ownerSVGElement: ISVGSVGElement;
        public spreadMethod: SVGAnimatedEnumeration;
        public viewportElement: ISVGElement;
        public xmlbase: string;
    }

    class SVGImageElement {
        private 'MSHTML.SVGImageElement_typekey': SVGImageElement;
        private constructor();
        public readonly farthestViewportElement: ISVGElement;
        public focusable: SVGAnimatedEnumeration;
        public getBBox(): SVGRect;
        public getCTM(): SVGMatrix;
        public getScreenCTM(): SVGMatrix;
        public getTransformToElement(pElement: ISVGElement): SVGMatrix;
        public hasExtension(extension: string): boolean;
        public height: SVGAnimatedLength;
        public readonly href: SVGAnimatedString;
        public readonly nearestViewportElement: ISVGElement;
        public ownerSVGElement: ISVGSVGElement;
        public preserveAspectRatio: SVGAnimatedPreserveAspectRatio;
        public readonly requiredExtensions: SVGStringList;
        public readonly requiredFeatures: SVGStringList;
        public readonly systemLanguage: SVGStringList;
        public readonly transform: SVGAnimatedTransformList;
        public readonly viewBox: SVGAnimatedRect;
        public viewportElement: ISVGElement;
        public width: SVGAnimatedLength;
        public x: SVGAnimatedLength;
        public xmlbase: string;
        public y: SVGAnimatedLength;
    }

    class SVGLength {
        private 'MSHTML.SVGLength_typekey': SVGLength;
        private constructor();
        public convertToSpecifiedUnits(unitType: number): void;
        public newValueSpecifiedUnits(unitType: number, valueInSpecifiedUnits: number): void;
        public unitType: number;
        public value: number;
        public valueAsString: string;
        public valueInSpecifiedUnits: number;
    }

    class SVGLengthList {
        private 'MSHTML.SVGLengthList_typekey': SVGLengthList;
        private constructor();
        public appendItem(newItem: SVGLength): SVGLength;
        public clear(): void;
        public getItem(index: number): SVGLength;
        public initialize(newItem: SVGLength): SVGLength;
        public insertItemBefore(newItem: SVGLength, index: number): SVGLength;
        public numberOfItems: number;
        public removeItem(index: number): SVGLength;
        public replaceItem(newItem: SVGLength, index: number): SVGLength;
    }

    class SVGLinearGradientElement {
        private 'MSHTML.SVGLinearGradientElement_typekey': SVGLinearGradientElement;
        private constructor();
        public readonly className: SVGAnimatedString;
        public readonly externalResourcesRequired: SVGAnimatedBoolean;
        public focusable: SVGAnimatedEnumeration;
        public gradientTransform: SVGAnimatedTransformList;
        public gradientUnits: SVGAnimatedEnumeration;
        public readonly href: SVGAnimatedString;
        public ownerSVGElement: ISVGSVGElement;
        public spreadMethod: SVGAnimatedEnumeration;
        public viewportElement: ISVGElement;
        public x1: SVGAnimatedLength;
        public x2: SVGAnimatedLength;
        public xmlbase: string;
        public y1: SVGAnimatedLength;
        public y2: SVGAnimatedLength;
    }

    class SVGLineElement {
        private 'MSHTML.SVGLineElement_typekey': SVGLineElement;
        private constructor();
        public readonly className: SVGAnimatedString;
        public readonly externalResourcesRequired: SVGAnimatedBoolean;
        public readonly farthestViewportElement: ISVGElement;
        public focusable: SVGAnimatedEnumeration;
        public getBBox(): SVGRect;
        public getCTM(): SVGMatrix;
        public getScreenCTM(): SVGMatrix;
        public getTransformToElement(pElement: ISVGElement): SVGMatrix;
        public hasExtension(extension: string): boolean;
        public readonly nearestViewportElement: ISVGElement;
        public ownerSVGElement: ISVGSVGElement;
        public readonly requiredExtensions: SVGStringList;
        public readonly requiredFeatures: SVGStringList;
        public readonly systemLanguage: SVGStringList;
        public readonly transform: SVGAnimatedTransformList;
        public viewportElement: ISVGElement;
        public x1: SVGAnimatedLength;
        public x2: SVGAnimatedLength;
        public xmlbase: string;
        public xmllang: string;
        public xmlspace: string;
        public y1: SVGAnimatedLength;
        public y2: SVGAnimatedLength;
    }

    class SVGMarkerElement {
        private 'MSHTML.SVGMarkerElement_typekey': SVGMarkerElement;
        private constructor();
        public readonly className: SVGAnimatedString;
        public readonly externalResourcesRequired: SVGAnimatedBoolean;
        public focusable: SVGAnimatedEnumeration;
        public markerHeight: SVGAnimatedLength;
        public markerUnits: SVGAnimatedEnumeration;
        public markerWidth: SVGAnimatedLength;
        public orientAngle: SVGAnimatedAngle;
        public orientType: SVGAnimatedEnumeration;
        public ownerSVGElement: ISVGSVGElement;
        public preserveAspectRatio: SVGAnimatedPreserveAspectRatio;
        public refX: SVGAnimatedLength;
        public refY: SVGAnimatedLength;
        public setOrientToAngle(pSVGAngle: SVGAngle): void;
        public setOrientToAuto(): void;
        public readonly viewBox: SVGAnimatedRect;
        public viewportElement: ISVGElement;
        public xmlbase: string;
        public xmllang: string;
        public xmlspace: string;
    }

    class SVGMaskElement {
        private 'MSHTML.SVGMaskElement_typekey': SVGMaskElement;
        private constructor();
        public readonly className: SVGAnimatedString;
        public readonly externalResourcesRequired: SVGAnimatedBoolean;
        public focusable: SVGAnimatedEnumeration;
        public hasExtension(extension: string): boolean;
        public height: SVGAnimatedLength;
        public maskContentUnits: SVGAnimatedEnumeration;
        public maskUnits: SVGAnimatedEnumeration;
        public ownerSVGElement: ISVGSVGElement;
        public readonly requiredExtensions: SVGStringList;
        public readonly requiredFeatures: SVGStringList;
        public readonly systemLanguage: SVGStringList;
        public viewportElement: ISVGElement;
        public width: SVGAnimatedLength;
        public x: SVGAnimatedLength;
        public xmlbase: string;
        public xmllang: string;
        public xmlspace: string;
        public y: SVGAnimatedLength;
    }

    class SVGMatrix {
        private 'MSHTML.SVGMatrix_typekey': SVGMatrix;
        private constructor();
        public a: number;
        public b: number;
        public c: number;
        public d: number;
        public e: number;
        public f: number;
        public flipX(): SVGMatrix;
        public flipY(): SVGMatrix;
        public inverse(): SVGMatrix;
        public multiply(secondMatrix: SVGMatrix): SVGMatrix;
        public rotate(angle: number): SVGMatrix;
        public rotateFromVector(x: number, y: number): SVGMatrix;
        public scale(scaleFactor: number): SVGMatrix;
        public scaleNonUniform(scaleFactorX: number, scaleFactorY: number): SVGMatrix;
        public skewX(angle: number): SVGMatrix;
        public skewY(angle: number): SVGMatrix;
        public translate(x: number, y: number): SVGMatrix;
    }

    class SVGMetadataElement {
        private 'MSHTML.SVGMetadataElement_typekey': SVGMetadataElement;
        private constructor();
        public focusable: SVGAnimatedEnumeration;
        public ownerSVGElement: ISVGSVGElement;
        public viewportElement: ISVGElement;
        public xmlbase: string;
    }

    class SVGNumber {
        private 'MSHTML.SVGNumber_typekey': SVGNumber;
        private constructor();
        public value: number;
    }

    class SVGNumberList {
        private 'MSHTML.SVGNumberList_typekey': SVGNumberList;
        private constructor();
        public appendItem(newItem: SVGNumber): SVGNumber;
        public clear(): void;
        public getItem(index: number): SVGNumber;
        public initialize(newItem: SVGNumber): SVGNumber;
        public insertItemBefore(newItem: SVGNumber, index: number): SVGNumber;
        public numberOfItems: number;
        public removeItem(index: number): SVGNumber;
        public replaceItem(newItem: SVGNumber, index: number): SVGNumber;
    }

    class SVGPathElement {
        private 'MSHTML.SVGPathElement_typekey': SVGPathElement;
        private constructor();
        public animatedNormalizedPathSegList: SVGPathSegList;
        public animatedPathSegList: SVGPathSegList;
        public createSVGPathSegArcAbs(x: number, y: number, r1: number, r2: number, angle: number, largeArcFlag: boolean, sweepFlag: boolean): ISVGPathSegArcAbs;
        public createSVGPathSegArcRel(x: number, y: number, r1: number, r2: number, angle: number, largeArcFlag: boolean, sweepFlag: boolean): ISVGPathSegArcRel;
        public createSVGPathSegClosePath(): ISVGPathSegClosePath;
        public createSVGPathSegCurvetoCubicAbs(x: number, y: number, x1: number, y1: number, x2: number, y2: number): ISVGPathSegCurvetoCubicAbs;
        public createSVGPathSegCurvetoCubicRel(x: number, y: number, x1: number, y1: number, x2: number, y2: number): ISVGPathSegCurvetoCubicRel;
        public createSVGPathSegCurvetoCubicSmoothAbs(x: number, y: number, x2: number, y2: number): ISVGPathSegCurvetoCubicSmoothAbs;
        public createSVGPathSegCurvetoCubicSmoothRel(x: number, y: number, x2: number, y2: number): ISVGPathSegCurvetoCubicSmoothRel;
        public createSVGPathSegCurvetoQuadraticAbs(x: number, y: number, x1: number, y1: number): ISVGPathSegCurvetoQuadraticAbs;
        public createSVGPathSegCurvetoQuadraticRel(x: number, y: number, x1: number, y1: number): ISVGPathSegCurvetoQuadraticRel;
        public createSVGPathSegCurvetoQuadraticSmoothAbs(x: number, y: number): ISVGPathSegCurvetoQuadraticSmoothAbs;
        public createSVGPathSegCurvetoQuadraticSmoothRel(x: number, y: number): ISVGPathSegCurvetoQuadraticSmoothRel;
        public createSVGPathSegLinetoAbs(x: number, y: number): ISVGPathSegLinetoAbs;
        public createSVGPathSegLinetoHorizontalAbs(x: number): ISVGPathSegLinetoHorizontalAbs;
        public createSVGPathSegLinetoHorizontalRel(x: number): ISVGPathSegLinetoHorizontalRel;
        public createSVGPathSegLinetoRel(x: number, y: number): ISVGPathSegLinetoRel;
        public createSVGPathSegLinetoVerticalAbs(y: number): ISVGPathSegLinetoVerticalAbs;
        public createSVGPathSegLinetoVerticalRel(y: number): ISVGPathSegLinetoVerticalRel;
        public createSVGPathSegMovetoAbs(x: number, y: number): ISVGPathSegMovetoAbs;
        public createSVGPathSegMovetoRel(x: number, y: number): ISVGPathSegMovetoRel;
        public readonly farthestViewportElement: ISVGElement;
        public focusable: SVGAnimatedEnumeration;
        public getBBox(): SVGRect;
        public getCTM(): SVGMatrix;
        public getPathSegAtLength(fltdistance: number): number;
        public getPointAtLength(fltdistance: number): SVGPoint;
        public getScreenCTM(): SVGMatrix;
        public getTotalLength(): number;
        public getTransformToElement(pElement: ISVGElement): SVGMatrix;
        public hasExtension(extension: string): boolean;
        public readonly nearestViewportElement: ISVGElement;
        public normalizedPathSegList: SVGPathSegList;
        public ownerSVGElement: ISVGSVGElement;
        public pathLength: SVGAnimatedNumber;
        public pathSegList: SVGPathSegList;
        public readonly requiredExtensions: SVGStringList;
        public readonly requiredFeatures: SVGStringList;
        public readonly systemLanguage: SVGStringList;
        public readonly transform: SVGAnimatedTransformList;
        public viewportElement: ISVGElement;
        public xmlbase: string;
    }

    class SVGPathSeg {
        private 'MSHTML.SVGPathSeg_typekey': SVGPathSeg;
        private constructor();
        public pathSegType: number;
        public readonly pathSegTypeAsLetter: string;
    }

    class SVGPathSegArcAbs {
        private 'MSHTML.SVGPathSegArcAbs_typekey': SVGPathSegArcAbs;
        private constructor();
        public angle: number;
        public largeArcFlag: boolean;
        public pathSegType: number;
        public readonly pathSegTypeAsLetter: string;
        public r1: number;
        public r2: number;
        public sweepFlag: boolean;
        public x: number;
        public y: number;
    }

    class SVGPathSegArcRel {
        private 'MSHTML.SVGPathSegArcRel_typekey': SVGPathSegArcRel;
        private constructor();
        public angle: number;
        public largeArcFlag: boolean;
        public pathSegType: number;
        public readonly pathSegTypeAsLetter: string;
        public r1: number;
        public r2: number;
        public sweepFlag: boolean;
        public x: number;
        public y: number;
    }

    class SVGPathSegClosePath {
        private 'MSHTML.SVGPathSegClosePath_typekey': SVGPathSegClosePath;
        private constructor();
        public pathSegType: number;
        public readonly pathSegTypeAsLetter: string;
    }

    class SVGPathSegCurvetoCubicAbs {
        private 'MSHTML.SVGPathSegCurvetoCubicAbs_typekey': SVGPathSegCurvetoCubicAbs;
        private constructor();
        public pathSegType: number;
        public readonly pathSegTypeAsLetter: string;
        public x: number;
        public x1: number;
        public x2: number;
        public y: number;
        public y1: number;
        public y2: number;
    }

    class SVGPathSegCurvetoCubicRel {
        private 'MSHTML.SVGPathSegCurvetoCubicRel_typekey': SVGPathSegCurvetoCubicRel;
        private constructor();
        public pathSegType: number;
        public readonly pathSegTypeAsLetter: string;
        public x: number;
        public x1: number;
        public x2: number;
        public y: number;
        public y1: number;
        public y2: number;
    }

    class SVGPathSegCurvetoCubicSmoothAbs {
        private 'MSHTML.SVGPathSegCurvetoCubicSmoothAbs_typekey': SVGPathSegCurvetoCubicSmoothAbs;
        private constructor();
        public pathSegType: number;
        public readonly pathSegTypeAsLetter: string;
        public x: number;
        public x2: number;
        public y: number;
        public y2: number;
    }

    class SVGPathSegCurvetoCubicSmoothRel {
        private 'MSHTML.SVGPathSegCurvetoCubicSmoothRel_typekey': SVGPathSegCurvetoCubicSmoothRel;
        private constructor();
        public pathSegType: number;
        public readonly pathSegTypeAsLetter: string;
        public x: number;
        public x2: number;
        public y: number;
        public y2: number;
    }

    class SVGPathSegCurvetoQuadraticAbs {
        private 'MSHTML.SVGPathSegCurvetoQuadraticAbs_typekey': SVGPathSegCurvetoQuadraticAbs;
        private constructor();
        public pathSegType: number;
        public readonly pathSegTypeAsLetter: string;
        public x: number;
        public x1: number;
        public y: number;
        public y1: number;
    }

    class SVGPathSegCurvetoQuadraticRel {
        private 'MSHTML.SVGPathSegCurvetoQuadraticRel_typekey': SVGPathSegCurvetoQuadraticRel;
        private constructor();
        public pathSegType: number;
        public readonly pathSegTypeAsLetter: string;
        public x: number;
        public x1: number;
        public y: number;
        public y1: number;
    }

    class SVGPathSegCurvetoQuadraticSmoothAbs {
        private 'MSHTML.SVGPathSegCurvetoQuadraticSmoothAbs_typekey': SVGPathSegCurvetoQuadraticSmoothAbs;
        private constructor();
        public pathSegType: number;
        public readonly pathSegTypeAsLetter: string;
        public x: number;
        public y: number;
    }

    class SVGPathSegCurvetoQuadraticSmoothRel {
        private 'MSHTML.SVGPathSegCurvetoQuadraticSmoothRel_typekey': SVGPathSegCurvetoQuadraticSmoothRel;
        private constructor();
        public pathSegType: number;
        public readonly pathSegTypeAsLetter: string;
        public x: number;
        public y: number;
    }

    class SVGPathSegLinetoAbs {
        private 'MSHTML.SVGPathSegLinetoAbs_typekey': SVGPathSegLinetoAbs;
        private constructor();
        public pathSegType: number;
        public readonly pathSegTypeAsLetter: string;
        public x: number;
        public y: number;
    }

    class SVGPathSegLinetoHorizontalAbs {
        private 'MSHTML.SVGPathSegLinetoHorizontalAbs_typekey': SVGPathSegLinetoHorizontalAbs;
        private constructor();
        public pathSegType: number;
        public readonly pathSegTypeAsLetter: string;
        public x: number;
    }

    class SVGPathSegLinetoHorizontalRel {
        private 'MSHTML.SVGPathSegLinetoHorizontalRel_typekey': SVGPathSegLinetoHorizontalRel;
        private constructor();
        public pathSegType: number;
        public readonly pathSegTypeAsLetter: string;
        public x: number;
    }

    class SVGPathSegLinetoRel {
        private 'MSHTML.SVGPathSegLinetoRel_typekey': SVGPathSegLinetoRel;
        private constructor();
        public pathSegType: number;
        public readonly pathSegTypeAsLetter: string;
        public x: number;
        public y: number;
    }

    class SVGPathSegLinetoVerticalAbs {
        private 'MSHTML.SVGPathSegLinetoVerticalAbs_typekey': SVGPathSegLinetoVerticalAbs;
        private constructor();
        public pathSegType: number;
        public readonly pathSegTypeAsLetter: string;
        public y: number;
    }

    class SVGPathSegLinetoVerticalRel {
        private 'MSHTML.SVGPathSegLinetoVerticalRel_typekey': SVGPathSegLinetoVerticalRel;
        private constructor();
        public pathSegType: number;
        public readonly pathSegTypeAsLetter: string;
        public y: number;
    }

    class SVGPathSegList {
        private 'MSHTML.SVGPathSegList_typekey': SVGPathSegList;
        private constructor();
        public appendItem(newItem: SVGPathSeg): SVGPathSeg;
        public clear(): void;
        public getItem(index: number): SVGPathSeg;
        public initialize(newItem: SVGPathSeg): SVGPathSeg;
        public insertItemBefore(newItem: SVGPathSeg, index: number): SVGPathSeg;
        public numberOfItems: number;
        public removeItem(index: number): SVGPathSeg;
        public replaceItem(newItem: SVGPathSeg, index: number): SVGPathSeg;
    }

    class SVGPathSegMovetoAbs {
        private 'MSHTML.SVGPathSegMovetoAbs_typekey': SVGPathSegMovetoAbs;
        private constructor();
        public pathSegType: number;
        public readonly pathSegTypeAsLetter: string;
        public x: number;
        public y: number;
    }

    class SVGPathSegMovetoRel {
        private 'MSHTML.SVGPathSegMovetoRel_typekey': SVGPathSegMovetoRel;
        private constructor();
        public pathSegType: number;
        public readonly pathSegTypeAsLetter: string;
        public x: number;
        public y: number;
    }

    class SVGPatternElement {
        private 'MSHTML.SVGPatternElement_typekey': SVGPatternElement;
        private constructor();
        public readonly className: SVGAnimatedString;
        public readonly externalResourcesRequired: SVGAnimatedBoolean;
        public focusable: SVGAnimatedEnumeration;
        public hasExtension(extension: string): boolean;
        public height: SVGAnimatedLength;
        public readonly href: SVGAnimatedString;
        public ownerSVGElement: ISVGSVGElement;
        public patternContentUnits: SVGAnimatedEnumeration;
        public patternTransform: SVGAnimatedTransformList;
        public patternUnits: SVGAnimatedEnumeration;
        public preserveAspectRatio: SVGAnimatedPreserveAspectRatio;
        public readonly requiredExtensions: SVGStringList;
        public readonly requiredFeatures: SVGStringList;
        public readonly systemLanguage: SVGStringList;
        public readonly viewBox: SVGAnimatedRect;
        public viewportElement: ISVGElement;
        public width: SVGAnimatedLength;
        public x: SVGAnimatedLength;
        public xmlbase: string;
        public xmllang: string;
        public xmlspace: string;
        public y: SVGAnimatedLength;
    }

    class SVGPoint {
        private 'MSHTML.SVGPoint_typekey': SVGPoint;
        private constructor();
        public matrixTransform(pMatrix: SVGMatrix): SVGPoint;
        public x: number;
        public y: number;
    }

    class SVGPointList {
        private 'MSHTML.SVGPointList_typekey': SVGPointList;
        private constructor();
        public appendItem(pNewItem: SVGPoint): SVGPoint;
        public clear(): void;
        public getItem(index: number): SVGPoint;
        public initialize(pNewItem: SVGPoint): SVGPoint;
        public insertItemBefore(pNewItem: SVGPoint, index: number): SVGPoint;
        public numberOfItems: number;
        public removeItem(index: number): SVGPoint;
        public replaceItem(pNewItem: SVGPoint, index: number): SVGPoint;
    }

    class SVGPolygonElement {
        private 'MSHTML.SVGPolygonElement_typekey': SVGPolygonElement;
        private constructor();
        public animatedPoints: SVGPointList;
        public readonly farthestViewportElement: ISVGElement;
        public focusable: SVGAnimatedEnumeration;
        public getBBox(): SVGRect;
        public getCTM(): SVGMatrix;
        public getScreenCTM(): SVGMatrix;
        public getTransformToElement(pElement: ISVGElement): SVGMatrix;
        public hasExtension(extension: string): boolean;
        public readonly nearestViewportElement: ISVGElement;
        public ownerSVGElement: ISVGSVGElement;
        public points: SVGPointList;
        public readonly requiredExtensions: SVGStringList;
        public readonly requiredFeatures: SVGStringList;
        public readonly systemLanguage: SVGStringList;
        public readonly transform: SVGAnimatedTransformList;
        public viewportElement: ISVGElement;
        public xmlbase: string;
    }

    class SVGPolylineElement {
        private 'MSHTML.SVGPolylineElement_typekey': SVGPolylineElement;
        private constructor();
        public animatedPoints: SVGPointList;
        public readonly farthestViewportElement: ISVGElement;
        public focusable: SVGAnimatedEnumeration;
        public getBBox(): SVGRect;
        public getCTM(): SVGMatrix;
        public getScreenCTM(): SVGMatrix;
        public getTransformToElement(pElement: ISVGElement): SVGMatrix;
        public hasExtension(extension: string): boolean;
        public readonly nearestViewportElement: ISVGElement;
        public ownerSVGElement: ISVGSVGElement;
        public points: SVGPointList;
        public readonly requiredExtensions: SVGStringList;
        public readonly requiredFeatures: SVGStringList;
        public readonly systemLanguage: SVGStringList;
        public readonly transform: SVGAnimatedTransformList;
        public viewportElement: ISVGElement;
        public xmlbase: string;
    }

    class SVGPreserveAspectRatio {
        private 'MSHTML.SVGPreserveAspectRatio_typekey': SVGPreserveAspectRatio;
        private constructor();
        public align: number;
        public meetOrSlice: number;
    }

    class SVGRadialGradientElement {
        private 'MSHTML.SVGRadialGradientElement_typekey': SVGRadialGradientElement;
        private constructor();
        public readonly className: SVGAnimatedString;
        public cx: SVGAnimatedLength;
        public cy: SVGAnimatedLength;
        public readonly externalResourcesRequired: SVGAnimatedBoolean;
        public focusable: SVGAnimatedEnumeration;
        public fx: SVGAnimatedLength;
        public fy: SVGAnimatedLength;
        public gradientTransform: SVGAnimatedTransformList;
        public gradientUnits: SVGAnimatedEnumeration;
        public readonly href: SVGAnimatedString;
        public ownerSVGElement: ISVGSVGElement;
        public r: SVGAnimatedLength;
        public spreadMethod: SVGAnimatedEnumeration;
        public viewportElement: ISVGElement;
        public xmlbase: string;
    }

    class SVGRect {
        private 'MSHTML.SVGRect_typekey': SVGRect;
        private constructor();
        public height: number;
        public width: number;
        public x: number;
        public y: number;
    }

    class SVGRectElement {
        private 'MSHTML.SVGRectElement_typekey': SVGRectElement;
        private constructor();
        public readonly className: SVGAnimatedString;
        public readonly externalResourcesRequired: SVGAnimatedBoolean;
        public readonly farthestViewportElement: ISVGElement;
        public focusable: SVGAnimatedEnumeration;
        public getBBox(): SVGRect;
        public getCTM(): SVGMatrix;
        public getScreenCTM(): SVGMatrix;
        public getTransformToElement(pElement: ISVGElement): SVGMatrix;
        public hasExtension(extension: string): boolean;
        public height: SVGAnimatedLength;
        public readonly nearestViewportElement: ISVGElement;
        public ownerSVGElement: ISVGSVGElement;
        public readonly requiredExtensions: SVGStringList;
        public readonly requiredFeatures: SVGStringList;
        public rx: SVGAnimatedLength;
        public ry: SVGAnimatedLength;
        public readonly systemLanguage: SVGStringList;
        public readonly transform: SVGAnimatedTransformList;
        public viewportElement: ISVGElement;
        public width: SVGAnimatedLength;
        public x: SVGAnimatedLength;
        public xmlbase: string;
        public xmllang: string;
        public xmlspace: string;
        public y: SVGAnimatedLength;
    }

    class SVGScriptElement {
        private 'MSHTML.SVGScriptElement_typekey': SVGScriptElement;
        private constructor();
        public readonly externalResourcesRequired: SVGAnimatedBoolean;
        public focusable: SVGAnimatedEnumeration;
        public readonly href: SVGAnimatedString;
        public ownerSVGElement: ISVGSVGElement;
        public type: string;
        public viewportElement: ISVGElement;
        public xmlbase: string;
    }

    class SVGStopElement {
        private 'MSHTML.SVGStopElement_typekey': SVGStopElement;
        private constructor();
        public readonly className: SVGAnimatedString;
        public focusable: SVGAnimatedEnumeration;
        public offset: SVGAnimatedNumber;
        public ownerSVGElement: ISVGSVGElement;
        public viewportElement: ISVGElement;
        public xmlbase: string;
    }

    class SVGStringList {
        private 'MSHTML.SVGStringList_typekey': SVGStringList;
        private constructor();
        public appendItem(newItem: string): string;
        public clear(): void;
        public getItem(index: number): string;
        public initialize(newItem: string): string;
        public insertItemBefore(newItem: string, index: number): string;
        public numberOfItems: number;
        public removeItem(index: number): string;
        public replaceItem(newItem: string, index: number): string;
    }

    class SVGStyleElement {
        private 'MSHTML.SVGStyleElement_typekey': SVGStyleElement;
        private constructor();
        public focusable: SVGAnimatedEnumeration;
        public media: string;
        public ownerSVGElement: ISVGSVGElement;
        public type: string;
        public viewportElement: ISVGElement;
        public xmlbase: string;
        public xmllang: string;
        public xmlspace: string;
    }

    class SVGSVGElement {
        private 'MSHTML.SVGSVGElement_typekey': SVGSVGElement;
        private constructor();
        public animationsPaused(): boolean;
        public checkEnclosure(element: ISVGElement, rect: SVGRect): boolean;
        public checkIntersection(element: ISVGElement, rect: SVGRect): boolean;
        public readonly className: SVGAnimatedString;
        public contentScriptType: string;
        public contentStyleType: string;
        public createSVGAngle(): SVGAngle;
        public createSVGLength(): SVGLength;
        public createSVGMatrix(): SVGMatrix;
        public createSVGNumber(): SVGNumber;
        public createSVGPoint(): SVGPoint;
        public createSVGRect(): SVGRect;
        public createSVGTransform(): SVGTransform;
        public createSVGTransformFromMatrix(matrix: SVGMatrix): SVGTransform;
        public currentScale: number;
        public currentTranslate: SVGPoint;
        public currentView: ISVGViewSpec;
        public deselectAll(): void;
        public readonly externalResourcesRequired: SVGAnimatedBoolean;
        public readonly farthestViewportElement: ISVGElement;
        public focusable: SVGAnimatedEnumeration;
        public forceRedraw(): void;
        public getBBox(): SVGRect;
        public getCTM(): SVGMatrix;
        public getCurrentTime(): number;
        public getElementById(elementId: string): IHTMLElement;
        public getEnclosureList(rect: SVGRect, referenceElement: ISVGElement): any;
        public getIntersectionList(rect: SVGRect, referenceElement: ISVGElement): any;
        public getScreenCTM(): SVGMatrix;
        public getTransformToElement(pElement: ISVGElement): SVGMatrix;
        public hasExtension(extension: string): boolean;
        public height: SVGAnimatedLength;
        public readonly nearestViewportElement: ISVGElement;
        public ownerSVGElement: ISVGSVGElement;
        public pauseAnimations(): void;
        public pixelUnitToMillimeterX: number;
        public pixelUnitToMillimeterY: number;
        public preserveAspectRatio: SVGAnimatedPreserveAspectRatio;
        public readonly requiredExtensions: SVGStringList;
        public readonly requiredFeatures: SVGStringList;
        public screenPixelToMillimeterX: number;
        public screenPixelToMillimeterY: number;
        public setCurrentTime(seconds: number): void;
        public suspendRedraw(maxWaitMilliseconds: number): number;
        public readonly systemLanguage: SVGStringList;
        public unpauseAnimations(): void;
        public unsuspendRedraw(suspendHandeID: number): void;
        public unsuspendRedrawAll(): void;
        public useCurrentView: boolean;
        public readonly viewBox: SVGAnimatedRect;
        public viewport: SVGRect;
        public viewportElement: ISVGElement;
        public width: SVGAnimatedLength;
        public x: SVGAnimatedLength;
        public xmlbase: string;
        public xmllang: string;
        public xmlspace: string;
        public y: SVGAnimatedLength;
        public readonly zoomAndPan: number;
    }

    class SVGSwitchElement {
        private 'MSHTML.SVGSwitchElement_typekey': SVGSwitchElement;
        private constructor();
        public readonly className: SVGAnimatedString;
        public readonly externalResourcesRequired: SVGAnimatedBoolean;
        public readonly farthestViewportElement: ISVGElement;
        public focusable: SVGAnimatedEnumeration;
        public getBBox(): SVGRect;
        public getCTM(): SVGMatrix;
        public getScreenCTM(): SVGMatrix;
        public getTransformToElement(pElement: ISVGElement): SVGMatrix;
        public hasExtension(extension: string): boolean;
        public readonly nearestViewportElement: ISVGElement;
        public ownerSVGElement: ISVGSVGElement;
        public readonly requiredExtensions: SVGStringList;
        public readonly requiredFeatures: SVGStringList;
        public readonly systemLanguage: SVGStringList;
        public readonly transform: SVGAnimatedTransformList;
        public viewportElement: ISVGElement;
        public xmlbase: string;
        public xmllang: string;
        public xmlspace: string;
    }

    class SVGSymbolElement {
        private 'MSHTML.SVGSymbolElement_typekey': SVGSymbolElement;
        private constructor();
        public readonly className: SVGAnimatedString;
        public readonly externalResourcesRequired: SVGAnimatedBoolean;
        public focusable: SVGAnimatedEnumeration;
        public ownerSVGElement: ISVGSVGElement;
        public preserveAspectRatio: SVGAnimatedPreserveAspectRatio;
        public readonly viewBox: SVGAnimatedRect;
        public viewportElement: ISVGElement;
        public xmlbase: string;
        public xmllang: string;
        public xmlspace: string;
    }

    class SVGTextContentElement {
        private 'MSHTML.SVGTextContentElement_typekey': SVGTextContentElement;
        private constructor();
        public readonly className: SVGAnimatedString;
        public readonly externalResourcesRequired: SVGAnimatedBoolean;
        public focusable: SVGAnimatedEnumeration;
        public getCharNumAtPosition(point: SVGPoint): number;
        public getComputedTextLength(): number;
        public getEndPositionOfChar(charnum: number): SVGPoint;
        public getExtentOfChar(charnum: number): SVGRect;
        public getNumberOfChars(): number;
        public getRotationOfChar(charnum: number): number;
        public getStartPositionOfChar(charnum: number): SVGPoint;
        public getSubStringLength(charnum: number, nchars: number): number;
        public hasExtension(extension: string): boolean;
        public lengthAdjust: SVGAnimatedEnumeration;
        public ownerSVGElement: ISVGSVGElement;
        public readonly requiredExtensions: SVGStringList;
        public readonly requiredFeatures: SVGStringList;
        public selectSubString(charnum: number, nchars: number): void;
        public readonly systemLanguage: SVGStringList;
        public textLength: SVGAnimatedLength;
        public viewportElement: ISVGElement;
        public xmlbase: string;
        public xmllang: string;
        public xmlspace: string;
    }

    class SVGTextElement {
        private 'MSHTML.SVGTextElement_typekey': SVGTextElement;
        private constructor();
        public readonly className: SVGAnimatedString;
        public dx: SVGAnimatedLengthList;
        public dy: SVGAnimatedLengthList;
        public readonly externalResourcesRequired: SVGAnimatedBoolean;
        public readonly farthestViewportElement: ISVGElement;
        public focusable: SVGAnimatedEnumeration;
        public getBBox(): SVGRect;
        public getCharNumAtPosition(point: SVGPoint): number;
        public getComputedTextLength(): number;
        public getCTM(): SVGMatrix;
        public getEndPositionOfChar(charnum: number): SVGPoint;
        public getExtentOfChar(charnum: number): SVGRect;
        public getNumberOfChars(): number;
        public getRotationOfChar(charnum: number): number;
        public getScreenCTM(): SVGMatrix;
        public getStartPositionOfChar(charnum: number): SVGPoint;
        public getSubStringLength(charnum: number, nchars: number): number;
        public getTransformToElement(pElement: ISVGElement): SVGMatrix;
        public hasExtension(extension: string): boolean;
        public lengthAdjust: SVGAnimatedEnumeration;
        public readonly nearestViewportElement: ISVGElement;
        public ownerSVGElement: ISVGSVGElement;
        public readonly requiredExtensions: SVGStringList;
        public readonly requiredFeatures: SVGStringList;
        public rotate: SVGAnimatedNumberList;
        public selectSubString(charnum: number, nchars: number): void;
        public readonly systemLanguage: SVGStringList;
        public textLength: SVGAnimatedLength;
        public readonly transform: SVGAnimatedTransformList;
        public viewportElement: ISVGElement;
        public x: SVGAnimatedLengthList;
        public xmlbase: string;
        public xmllang: string;
        public xmlspace: string;
        public y: SVGAnimatedLengthList;
    }

    class SVGTextPathElement {
        private 'MSHTML.SVGTextPathElement_typekey': SVGTextPathElement;
        private constructor();
        public readonly className: SVGAnimatedString;
        public readonly externalResourcesRequired: SVGAnimatedBoolean;
        public focusable: SVGAnimatedEnumeration;
        public getCharNumAtPosition(point: SVGPoint): number;
        public getComputedTextLength(): number;
        public getEndPositionOfChar(charnum: number): SVGPoint;
        public getExtentOfChar(charnum: number): SVGRect;
        public getNumberOfChars(): number;
        public getRotationOfChar(charnum: number): number;
        public getStartPositionOfChar(charnum: number): SVGPoint;
        public getSubStringLength(charnum: number, nchars: number): number;
        public hasExtension(extension: string): boolean;
        public readonly href: SVGAnimatedString;
        public lengthAdjust: SVGAnimatedEnumeration;
        public method: SVGAnimatedEnumeration;
        public ownerSVGElement: ISVGSVGElement;
        public readonly requiredExtensions: SVGStringList;
        public readonly requiredFeatures: SVGStringList;
        public selectSubString(charnum: number, nchars: number): void;
        public spacing: SVGAnimatedEnumeration;
        public startOffset: SVGAnimatedLength;
        public readonly systemLanguage: SVGStringList;
        public textLength: SVGAnimatedLength;
        public viewportElement: ISVGElement;
        public xmlbase: string;
        public xmllang: string;
        public xmlspace: string;
    }

    class SVGTextPositioningElement {
        private 'MSHTML.SVGTextPositioningElement_typekey': SVGTextPositioningElement;
        private constructor();
        public readonly className: SVGAnimatedString;
        public dx: SVGAnimatedLengthList;
        public dy: SVGAnimatedLengthList;
        public readonly externalResourcesRequired: SVGAnimatedBoolean;
        public focusable: SVGAnimatedEnumeration;
        public getCharNumAtPosition(point: SVGPoint): number;
        public getComputedTextLength(): number;
        public getEndPositionOfChar(charnum: number): SVGPoint;
        public getExtentOfChar(charnum: number): SVGRect;
        public getNumberOfChars(): number;
        public getRotationOfChar(charnum: number): number;
        public getStartPositionOfChar(charnum: number): SVGPoint;
        public getSubStringLength(charnum: number, nchars: number): number;
        public hasExtension(extension: string): boolean;
        public lengthAdjust: SVGAnimatedEnumeration;
        public ownerSVGElement: ISVGSVGElement;
        public readonly requiredExtensions: SVGStringList;
        public readonly requiredFeatures: SVGStringList;
        public rotate: SVGAnimatedNumberList;
        public selectSubString(charnum: number, nchars: number): void;
        public readonly systemLanguage: SVGStringList;
        public textLength: SVGAnimatedLength;
        public viewportElement: ISVGElement;
        public x: SVGAnimatedLengthList;
        public xmlbase: string;
        public xmllang: string;
        public xmlspace: string;
        public y: SVGAnimatedLengthList;
    }

    class SVGTitleElement {
        private 'MSHTML.SVGTitleElement_typekey': SVGTitleElement;
        private constructor();
        public readonly className: SVGAnimatedString;
        public focusable: SVGAnimatedEnumeration;
        public ownerSVGElement: ISVGSVGElement;
        public viewportElement: ISVGElement;
        public xmlbase: string;
        public xmllang: string;
        public xmlspace: string;
    }

    class SVGTransform {
        private 'MSHTML.SVGTransform_typekey': SVGTransform;
        private constructor();
        public angle: number;
        public matrix: SVGMatrix;
        public setMatrix(matrix: SVGMatrix): void;
        public setRotate(angle: number, cx: number, cy: number): void;
        public setScale(sx: number, sy: number): void;
        public setSkewX(angle: number): void;
        public setSkewY(angle: number): void;
        public setTranslate(tx: number, ty: number): void;
        public type: number;
    }

    class SVGTransformList {
        private 'MSHTML.SVGTransformList_typekey': SVGTransformList;
        private constructor();
        public appendItem(newItem: SVGTransform): SVGTransform;
        public clear(): void;
        public consolidate(): SVGTransform;
        public createSVGTransformFromMatrix(newItem: SVGMatrix): SVGTransform;
        public getItem(index: number): SVGTransform;
        public initialize(newItem: SVGTransform): SVGTransform;
        public insertItemBefore(newItem: SVGTransform, index: number): SVGTransform;
        public numberOfItems: number;
        public removeItem(index: number): SVGTransform;
        public replaceItem(newItem: SVGTransform, index: number): SVGTransform;
    }

    class SVGTSpanElement {
        private 'MSHTML.SVGTSpanElement_typekey': SVGTSpanElement;
        private constructor();
        public readonly className: SVGAnimatedString;
        public dx: SVGAnimatedLengthList;
        public dy: SVGAnimatedLengthList;
        public readonly externalResourcesRequired: SVGAnimatedBoolean;
        public focusable: SVGAnimatedEnumeration;
        public getCharNumAtPosition(point: SVGPoint): number;
        public getComputedTextLength(): number;
        public getEndPositionOfChar(charnum: number): SVGPoint;
        public getExtentOfChar(charnum: number): SVGRect;
        public getNumberOfChars(): number;
        public getRotationOfChar(charnum: number): number;
        public getStartPositionOfChar(charnum: number): SVGPoint;
        public getSubStringLength(charnum: number, nchars: number): number;
        public hasExtension(extension: string): boolean;
        public lengthAdjust: SVGAnimatedEnumeration;
        public ownerSVGElement: ISVGSVGElement;
        public readonly requiredExtensions: SVGStringList;
        public readonly requiredFeatures: SVGStringList;
        public rotate: SVGAnimatedNumberList;
        public selectSubString(charnum: number, nchars: number): void;
        public readonly systemLanguage: SVGStringList;
        public textLength: SVGAnimatedLength;
        public viewportElement: ISVGElement;
        public x: SVGAnimatedLengthList;
        public xmlbase: string;
        public xmllang: string;
        public xmlspace: string;
        public y: SVGAnimatedLengthList;
    }

    class SVGUseElement {
        private 'MSHTML.SVGUseElement_typekey': SVGUseElement;
        private constructor();
        public animatedInstanceRoot: ISVGElementInstance;
        public readonly farthestViewportElement: ISVGElement;
        public focusable: SVGAnimatedEnumeration;
        public getBBox(): SVGRect;
        public getCTM(): SVGMatrix;
        public getScreenCTM(): SVGMatrix;
        public getTransformToElement(pElement: ISVGElement): SVGMatrix;
        public hasExtension(extension: string): boolean;
        public height: SVGAnimatedLength;
        public readonly href: SVGAnimatedString;
        public instanceRoot: ISVGElementInstance;
        public readonly nearestViewportElement: ISVGElement;
        public ownerSVGElement: ISVGSVGElement;
        public readonly requiredExtensions: SVGStringList;
        public readonly requiredFeatures: SVGStringList;
        public readonly systemLanguage: SVGStringList;
        public readonly transform: SVGAnimatedTransformList;
        public viewportElement: ISVGElement;
        public width: SVGAnimatedLength;
        public x: SVGAnimatedLength;
        public xmlbase: string;
        public y: SVGAnimatedLength;
    }

    class SVGViewElement {
        private 'MSHTML.SVGViewElement_typekey': SVGViewElement;
        private constructor();
        public readonly externalResourcesRequired: SVGAnimatedBoolean;
        public focusable: SVGAnimatedEnumeration;
        public ownerSVGElement: ISVGSVGElement;
        public preserveAspectRatio: SVGAnimatedPreserveAspectRatio;
        public readonly viewBox: SVGAnimatedRect;
        public viewportElement: ISVGElement;
        public viewTarget: SVGStringList;
        public xmlbase: string;
        public readonly zoomAndPan: number;
    }

    class SVGZoomEvent {
        private 'MSHTML.SVGZoomEvent_typekey': SVGZoomEvent;
        private constructor();
        public readonly bubbles: boolean;
        public readonly cancelable: boolean;
        public cancelBubble: boolean;
        public readonly currentTarget: IEventTarget;
        public readonly defaultPrevented: boolean;
        public readonly detail: number;
        public readonly eventPhase: number;
        public initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
        public initUIEvent(eventType: string, canBubble: boolean, cancelable: boolean, view: IHTMLWindow2, detail: number): void;
        public readonly isTrusted: boolean;
        public readonly newScale: number;
        public readonly newTranslate: SVGPoint;
        public preventDefault(): void;
        public readonly previousScale: number;
        public readonly previousTranslate: SVGPoint;
        public readonly srcElement: IHTMLElement;
        public stopImmediatePropagation(): void;
        public stopPropagation(): void;
        public readonly target: IEventTarget;
        public readonly timeStamp: number;
        public readonly type: string;
        public readonly view: IHTMLWindow2;
        public readonly zoomRectScreen: SVGRect;
    }

    class ThreadDialogProcParam {
        private 'MSHTML.ThreadDialogProcParam_typekey': ThreadDialogProcParam;
        private constructor();
        public readonly document: any;
        public readonly moniker: any;
        public readonly optionString: any;
        public readonly parameters: any;
    }

    class TreeWalker {
        private 'MSHTML.TreeWalker_typekey': TreeWalker;
        private constructor();
        public currentNode: any;
        public readonly expandEntityReferences: boolean;
        public readonly filter: any;
        public firstChild(): any;
        public lastChild(): any;
        public nextNode(): any;
        public nextSibling(): any;
        public parentNode(): any;
        public previousNode(): any;
        public previousSibling(): any;
        public readonly root: any;
        public readonly whatToShow: number;
    }

    class WebGeocoordinates {
        private 'MSHTML.WebGeocoordinates_typekey': WebGeocoordinates;
        private constructor();
        public readonly accuracy: number;
        public readonly altitude: any;
        public readonly altitudeAccuracy: any;
        public readonly heading: any;
        public readonly latitude: number;
        public readonly longitude: number;
        public readonly speed: any;
    }

    class WebGeolocation {
        private 'MSHTML.WebGeolocation_typekey': WebGeolocation;
        private constructor();
        public clearWatch(watchId: number): void;
        public getCurrentPosition(successCallback: any, errorCallback?: any, options?: any): void;
        public watchPosition(successCallback: any, errorCallback?: any, options?: any): number;
    }

    class WebGeoposition {
        private 'MSHTML.WebGeoposition_typekey': WebGeoposition;
        private constructor();
        public readonly coords: IWebGeocoordinates;
        public readonly timeStamp: number;
    }

    class WebGeopositionError {
        private 'MSHTML.WebGeopositionError_typekey': WebGeopositionError;
        private constructor();
        public readonly code: number;
        public readonly message: string;
    }

    class XDomainRequest {
        private 'MSHTML.XDomainRequest_typekey': XDomainRequest;
        private constructor();
        public readonly 'constructor': any;
    }

    class XDomainRequestFactory {
        private 'MSHTML.XDomainRequestFactory_typekey': XDomainRequestFactory;
        private constructor();
        public create(): IHTMLXDomainRequest;
    }

    class XMLHttpRequestEventTarget {
        private 'MSHTML.XMLHttpRequestEventTarget_typekey': XMLHttpRequestEventTarget;
        private constructor();
        public addEventListener(type: string, listener: any, useCapture: boolean): void;
        public dispatchEvent(evt: IDOMEvent): boolean;
        public removeEventListener(type: string, listener: any, useCapture: boolean): void;
    }

    class XMLSerializer {
        private 'MSHTML.XMLSerializer_typekey': XMLSerializer;
        private constructor();
        public serializeToString(pNode: IHTMLDOMNode): string;
    }
}

interface ActiveXObject {
    on(obj: MSHTML.HTMLNamespace, event: 'onreadystatechange', argNames: ['pEvtObj'], handler: (this: MSHTML.HTMLNamespace, parameter: {readonly pEvtObj: MSHTML.IHTMLEventObj}) => void): void;
    on(
        obj: MSHTML.HTMLWindow2, event: 'onerror', argNames: ['description', 'url', 'line'], handler: (
            this: MSHTML.HTMLWindow2, parameter: {readonly description: string, readonly url: string, readonly line: number}) => void): void;
    on(
        obj: MSHTML.HTMLWindowProxy, event: 'onerror', argNames: ['description', 'url', 'line'], handler: (
            this: MSHTML.HTMLWindowProxy, parameter: {readonly description: string, readonly url: string, readonly line: number}) => void): void;
    on(obj: MSHTML.Scriptlet, event: 'onscriptletevent', argNames: ['name', 'eventData'], handler: (this: MSHTML.Scriptlet, parameter: {readonly name: string, readonly eventData: any}) => void): void;
    on(
        obj: MSHTML.HTMLAnchorElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLAnchorElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLAreaElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLAreaElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLAudioElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLAudioElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLBaseElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLBaseElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLBaseFontElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLBaseFontElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLBGsound, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' | 'onbeforeeditfocus' |
        'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' | 'ondataavailable' |
        'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' | 'ondragover' | 'ondragstart' |
        'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' | 'onkeyup' | 'onlayoutcomplete' |
        'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' | 'onmousewheel' | 'onmove' |
        'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' | 'onresizestart' | 'onrowenter' |
        'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLBGsound, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLBlockElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLBlockElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLBody, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' | 'onbeforeeditfocus' |
        'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselect' | 'onselectstart',
        handler: (this: MSHTML.HTMLBody, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLBRElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLBRElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLButtonElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLButtonElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLCanvasElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLCanvasElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLCommentElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLCommentElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLDDElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLDDElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLDivElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLDivElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLDivPosition, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' |
        'oncut' | 'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselect' | 'onselectstart',
        handler: (this: MSHTML.HTMLDivPosition, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLDListElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLDListElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLDocument, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforedeactivate' | 'onbeforeeditfocus' | 'onbeforeupdate' |
        'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' |
        'ondragstart' | 'onerrorupdate' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' | 'onkeyup' | 'onmousedown' | 'onmousemove' | 'onmouseout' |
        'onmouseover' | 'onmouseup' | 'onmousewheel' | 'onpropertychange' | 'onreadystatechange' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' |
        'onselectionchange' | 'onselectstart' | 'onstop',
        handler: (this: MSHTML.HTMLDocument, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLDTElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLDTElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLEmbed, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' | 'onbeforeeditfocus' |
        'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' | 'ondataavailable' |
        'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' | 'ondragover' | 'ondragstart' |
        'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' | 'onkeyup' | 'onlayoutcomplete' |
        'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' | 'onmousewheel' | 'onmove' |
        'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' | 'onresizestart' | 'onrowenter' |
        'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLEmbed, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLFieldSetElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' |
        'oncut' | 'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselect' | 'onselectstart',
        handler: (this: MSHTML.HTMLFieldSetElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLFontElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLFontElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLFormElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onreset' | 'onresize' |
        'onresizeend' | 'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart' | 'onsubmit',
        handler: (this: MSHTML.HTMLFormElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLFrameBase, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLFrameBase, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLFrameElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLFrameElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLFrameSetSite, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLFrameSetSite, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLGenericElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLGenericElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLHeadElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLHeadElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLHeaderElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLHeaderElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLHRElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLHRElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLHtmlElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLHtmlElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLIFrame, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' | 'onbeforeeditfocus' |
        'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' | 'ondataavailable' |
        'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' | 'ondragover' | 'ondragstart' |
        'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' | 'onkeyup' | 'onlayoutcomplete' |
        'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' | 'onmousewheel' | 'onmove' |
        'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' | 'onresizestart' | 'onrowenter' |
        'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLIFrame, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLImg, event: 'onabort' | 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerror' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' |
        'onkeypress' | 'onkeyup' | 'onlayoutcomplete' | 'onload' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' |
        'onmouseover' | 'onmouseup' | 'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' |
        'onresize' | 'onresizeend' | 'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLImg, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLInputButtonElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLInputButtonElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLInputElement, event: 'onabort' | 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' |
        'oncut' | 'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerror' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' |
        'onkeypress' | 'onkeyup' | 'onlayoutcomplete' | 'onload' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' |
        'onmouseover' | 'onmouseup' | 'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' |
        'onresize' | 'onresizeend' | 'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselect' | 'onselectstart',
        handler: (this: MSHTML.HTMLInputElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLInputFileElement, event: 'onabort' | 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' |
        'oncut' | 'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerror' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' |
        'onkeypress' | 'onkeyup' | 'onlayoutcomplete' | 'onload' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' |
        'onmouseover' | 'onmouseup' | 'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' |
        'onresize' | 'onresizeend' | 'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselect' | 'onselectstart',
        handler: (this: MSHTML.HTMLInputFileElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.htmlInputImage, event: 'onabort' | 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerror' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' |
        'onkeypress' | 'onkeyup' | 'onlayoutcomplete' | 'onload' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' |
        'onmouseover' | 'onmouseup' | 'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' |
        'onresize' | 'onresizeend' | 'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.htmlInputImage, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLInputTextElement, event: 'onabort' | 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' |
        'oncut' | 'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerror' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' |
        'onkeypress' | 'onkeyup' | 'onlayoutcomplete' | 'onload' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' |
        'onmouseover' | 'onmouseup' | 'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' |
        'onresize' | 'onresizeend' | 'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselect' | 'onselectstart',
        handler: (this: MSHTML.HTMLInputTextElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLIsIndexElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLIsIndexElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLLabelElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLLabelElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLLegendElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' |
        'oncut' | 'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselect' | 'onselectstart',
        handler: (this: MSHTML.HTMLLegendElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLLIElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLLIElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLLinkElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerror' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' |
        'onkeypress' | 'onkeyup' | 'onlayoutcomplete' | 'onload' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' |
        'onmouseover' | 'onmouseup' | 'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' |
        'onresize' | 'onresizeend' | 'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLLinkElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLListElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLListElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLMapElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLMapElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLMarqueeElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'onbounce' | 'oncellchange' | 'onchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' |
        'oncopy' | 'oncut' | 'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' |
        'ondragleave' | 'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfinish' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' |
        'onkeydown' | 'onkeypress' | 'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' |
        'onmouseover' | 'onmouseup' | 'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' |
        'onresize' | 'onresizeend' | 'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselect' | 'onselectstart' |
        'onstart',
        handler: (this: MSHTML.HTMLMarqueeElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLMediaElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLMediaElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLMetaElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLMetaElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLNextIdElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLNextIdElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLNoShowElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLNoShowElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLObjectElement, event: 'onafterupdate' | 'onbeforeupdate' | 'oncellchange' | 'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' |
        'onerror' | 'onerrorupdate' | 'onreadystatechange' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted',
        handler: (this: MSHTML.HTMLObjectElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLOListElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLOListElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLOptionButtonElement, event: 'onabort' | 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' |
        'onbeforedeactivate' | 'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onchange' | 'onclick' | 'oncontextmenu' |
        'oncontrolselect' | 'oncopy' | 'oncut' | 'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' |
        'ondragenter' | 'ondragleave' | 'ondragover' | 'ondragstart' | 'ondrop' | 'onerror' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' |
        'onhelp' | 'onkeydown' | 'onkeypress' | 'onkeyup' | 'onlayoutcomplete' | 'onload' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' |
        'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' | 'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' |
        'onreadystatechange' | 'onresize' | 'onresizeend' | 'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselect' |
        'onselectstart',
        handler: (this: MSHTML.HTMLOptionButtonElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLOptionElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLOptionElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLParaElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLParaElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLParamElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLParamElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLPhraseElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLPhraseElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLProgressElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLProgressElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLRichtextElement, event: 'onabort' | 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' |
        'oncut' | 'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerror' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' |
        'onkeypress' | 'onkeyup' | 'onlayoutcomplete' | 'onload' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' |
        'onmouseover' | 'onmouseup' | 'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' |
        'onresize' | 'onresizeend' | 'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselect' | 'onselectstart',
        handler: (this: MSHTML.HTMLRichtextElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLScriptElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerror' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' |
        'onkeypress' | 'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' |
        'onmouseup' | 'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' |
        'onresizeend' | 'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLScriptElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLSelectElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' |
        'oncut' | 'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLSelectElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLSemanticElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLSemanticElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLSourceElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLSourceElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLSpanElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLSpanElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLSpanFlow, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' |
        'oncut' | 'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselect' | 'onselectstart', handler: (
            this: MSHTML.HTMLSpanFlow, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLStyleElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerror' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' |
        'onkeypress' | 'onkeyup' | 'onlayoutcomplete' | 'onload' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' |
        'onmouseover' | 'onmouseup' | 'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' |
        'onresize' | 'onresizeend' | 'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLStyleElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLTable, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' | 'onbeforeeditfocus' |
        'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' | 'ondataavailable' |
        'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' | 'ondragover' | 'ondragstart' |
        'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' | 'onkeyup' | 'onlayoutcomplete' |
        'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' | 'onmousewheel' | 'onmove' |
        'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' | 'onresizestart' | 'onrowenter' |
        'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLTable, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLTableCaption, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' |
        'oncut' | 'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselect' | 'onselectstart',
        handler: (this: MSHTML.HTMLTableCaption, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLTableCell, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' |
        'oncut' | 'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselect' | 'onselectstart', handler: (
            this: MSHTML.HTMLTableCell, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLTableCol, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLTableCol, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLTableRow, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLTableRow, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLTableSection, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLTableSection, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLTextAreaElement, event: 'onabort' | 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' |
        'oncut' | 'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerror' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' |
        'onkeypress' | 'onkeyup' | 'onlayoutcomplete' | 'onload' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' |
        'onmouseover' | 'onmouseup' | 'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' |
        'onresize' | 'onresizeend' | 'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselect' | 'onselectstart',
        handler: (this: MSHTML.HTMLTextAreaElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLTextElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLTextElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLTitleElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLTitleElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLUListElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLUListElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLUnknownElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLUnknownElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLVideoElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLVideoElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLWindow2, event: 'onafterprint' | 'onbeforeprint' | 'onbeforeunload' | 'onblur' | 'onfocus' | 'onhelp' | 'onload' | 'onresize' | 'onscroll' |
        'onunload',
        handler: (this: MSHTML.HTMLWindow2, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLWindowProxy, event: 'onafterprint' | 'onbeforeprint' | 'onbeforeunload' | 'onblur' | 'onfocus' | 'onhelp' | 'onload' | 'onresize' | 'onscroll' |
        'onunload',
        handler: (this: MSHTML.HTMLWindowProxy, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLWndOptionElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLWndOptionElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.HTMLWndSelectElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' |
        'oncut' | 'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.HTMLWndSelectElement, parameter: {}) => void): void;
    on(obj: MSHTML.HTMLXMLHttpRequest, event: 'onreadystatechange' | 'ontimeout', handler: (this: MSHTML.HTMLXMLHttpRequest, parameter: {}) => void): void;
    on(
        obj: MSHTML.OldHTMLDocument, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforedeactivate' | 'onbeforeeditfocus' | 'onbeforeupdate' |
        'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' |
        'ondragstart' | 'onerrorupdate' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' | 'onkeyup' | 'onmousedown' | 'onmousemove' | 'onmouseout' |
        'onmouseover' | 'onmouseup' | 'onmousewheel' | 'onpropertychange' | 'onreadystatechange' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' |
        'onselectionchange' | 'onselectstart' | 'onstop',
        handler: (this: MSHTML.OldHTMLDocument, parameter: {}) => void): void;
    on(
        obj: MSHTML.OldHTMLFormElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onreset' | 'onresize' |
        'onresizeend' | 'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart' | 'onsubmit',
        handler: (this: MSHTML.OldHTMLFormElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.Scriptlet, event: 'onclick' | 'ondblclick' | 'onkeydown' | 'onkeypress' | 'onkeyup' | 'onmousedown' | 'onmousemove' | 'onmouseup' |
        'onreadystatechange',
        handler: (this: MSHTML.Scriptlet, parameter: {}) => void): void;
    on(
        obj: MSHTML.SVGAElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' | 'onbeforeeditfocus' |
        'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' | 'ondataavailable' |
        'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' | 'ondragover' | 'ondragstart' |
        'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' | 'onkeyup' | 'onlayoutcomplete' |
        'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' | 'onmousewheel' | 'onmove' |
        'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' | 'onresizestart' | 'onrowenter' |
        'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.SVGAElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.SVGCircleElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.SVGCircleElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.SVGClipPathElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.SVGClipPathElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.SVGDefsElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.SVGDefsElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.SVGElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' | 'onbeforeeditfocus' |
        'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' | 'ondataavailable' |
        'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' | 'ondragover' | 'ondragstart' |
        'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' | 'onkeyup' | 'onlayoutcomplete' |
        'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' | 'onmousewheel' | 'onmove' |
        'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' | 'onresizestart' | 'onrowenter' |
        'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.SVGElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.SVGEllipseElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.SVGEllipseElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.SVGGElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' | 'onbeforeeditfocus' |
        'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' | 'ondataavailable' |
        'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' | 'ondragover' | 'ondragstart' |
        'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' | 'onkeyup' | 'onlayoutcomplete' |
        'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' | 'onmousewheel' | 'onmove' |
        'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' | 'onresizestart' | 'onrowenter' |
        'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.SVGGElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.SVGGradientElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.SVGGradientElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.SVGImageElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.SVGImageElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.SVGLineElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.SVGLineElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.SVGMarkerElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.SVGMarkerElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.SVGMaskElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.SVGMaskElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.SVGPathElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.SVGPathElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.SVGPatternElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.SVGPatternElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.SVGPolygonElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.SVGPolygonElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.SVGPolylineElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.SVGPolylineElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.SVGRectElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.SVGRectElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.SVGScriptElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.SVGScriptElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.SVGStopElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.SVGStopElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.SVGSVGElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.SVGSVGElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.SVGSymbolElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.SVGSymbolElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.SVGTextElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.SVGTextElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.SVGTextPathElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.SVGTextPathElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.SVGTSpanElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.SVGTSpanElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.SVGUseElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.SVGUseElement, parameter: {}) => void): void;
    on(
        obj: MSHTML.SVGViewElement, event: 'onactivate' | 'onafterupdate' | 'onbeforeactivate' | 'onbeforecopy' | 'onbeforecut' | 'onbeforedeactivate' |
        'onbeforeeditfocus' | 'onbeforepaste' | 'onbeforeupdate' | 'onblur' | 'oncellchange' | 'onclick' | 'oncontextmenu' | 'oncontrolselect' | 'oncopy' | 'oncut' |
        'ondataavailable' | 'ondatasetchanged' | 'ondatasetcomplete' | 'ondblclick' | 'ondeactivate' | 'ondrag' | 'ondragend' | 'ondragenter' | 'ondragleave' |
        'ondragover' | 'ondragstart' | 'ondrop' | 'onerrorupdate' | 'onfilterchange' | 'onfocus' | 'onfocusin' | 'onfocusout' | 'onhelp' | 'onkeydown' | 'onkeypress' |
        'onkeyup' | 'onlayoutcomplete' | 'onlosecapture' | 'onmousedown' | 'onmouseenter' | 'onmouseleave' | 'onmousemove' | 'onmouseout' | 'onmouseover' | 'onmouseup' |
        'onmousewheel' | 'onmove' | 'onmoveend' | 'onmovestart' | 'onpage' | 'onpaste' | 'onpropertychange' | 'onreadystatechange' | 'onresize' | 'onresizeend' |
        'onresizestart' | 'onrowenter' | 'onrowexit' | 'onrowsdelete' | 'onrowsinserted' | 'onscroll' | 'onselectstart',
        handler: (this: MSHTML.SVGViewElement, parameter: {}) => void): void;
    new<K extends keyof ActiveXObjectNameMap = any>(progid: K): ActiveXObjectNameMap[K];
}

interface ActiveXObjectNameMap {
    htmlfile: MSHTML.HTMLDocument;
    'ScriptBridge.ScriptBridge': MSHTML.Scriptlet;
    'TemplatePrinter.TemplatePrinter': MSHTML.CTemplatePrinter;
}

interface SafeArray<T = any> {
    _brand: SafeArray<T>;
}
