// Type definitions for closure-library 20190415.0
// Project: https://github.com/google/closure-library
// Definitions by: Ryan Brown <https://github.com/ribrdb>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// These are mostly auto-generated by Clutz, with a few manual tweaks.
// https://github.com/angular/clutz
// clang-format off

// Disable lint checks since this is autogenerated.
// tslint:disable:ban-types
// tslint:disable:no-unnecessary-qualifier
// tslint:disable:array-type
// tslint:disable:no-var-keyword
// tslint:disable:void-return
// tslint:disable:jsdoc-format
// tslint:disable:no-empty-interface
// tslint:disable:use-default-type-parameter
// tslint:disable:no-mergeable-namespace
// tslint:disable:interface-over-type-literal
// tslint:disable:max-line-length
// tslint:disable:comment-format
// tslint:disable:no-unnecessary-generics
// tslint:disable:whitespace
// tslint:disable:typedef-whitespace
// tslint:disable:no-unnecessary-undefined
// tslint:disable:no-redundant-undefined
// tslint:disable:interface-name
// tslint:disable:no-any-union
// tslint:disable:no-redundant-jsdoc-2

// Work around for https://github.com/Microsoft/TypeScript/issues/983
// All clutz namespaces are below ಠ_ಠ.clutz, thus
// this acts as global.
declare namespace ಠ_ಠ.clutz {
    type GlobalWindow = Window;
    var GloablWindow: Window;
    type GlobalElement = Element;
    var GlobalElement: Element;
    type GlobalError = Error;
    var GlobalError: ErrorConstructor;
    type GlobalEvent = Event;
    var GlobalEvent: typeof Event;
    type GlobalEventTarget = EventTarget;
    var GlobalEventTarget: typeof EventTarget;
    var GlobalObject: typeof Object;
    type GlobalObject = Object;
    type GlobalDate = Date;

    /** Represents the type returned when goog.require-ing an unknown symbol */
    type ClosureSymbolNotGoogProvided = void;
    /** Represents a Closure type that is private, represented by an empty
     * interface. */
    type PrivateType = void;
    /**
     * Represents a Closure class that is private. Only used for extending. When
     * in type position PrivateType is used.
     */
    class PrivateClass {}
    /**
     * Represents a Closure interface that is private. Only used for
     * extending/implementing. When in type position PrivateType is used.
     */
    interface PrivateInterface {}

    type IDBKeyType = number|string|Date|Array<any>|BufferSource;
    type Image = HTMLImageElement;

    // interface IDBDatabaseException { }
    interface HTMLIsIndexElement {}
    interface HTMLMenuItemElement {}
    interface WebWorker {}
    interface WorkerGlobalScope {}

    /**
     * A base class that can be used for extends/implement clauses when the used
     * value is missing.
     */
    class ClutzMissingBase {}
}

/**
 * Global variable indicating whether the JavaScript code has been compiled.
 * This variable is defined in Closure's base.js, but not on the `goog`
 * namespace, which means it has to be explcitly declared here.
 */
declare var COMPILED: boolean;

declare namespace goog {
    var DEBUG: boolean;
    var DEBUG_LOADER: string;
    /**
     * True if goog.dependencies_ is available.
     */
    var DEPENDENCIES_ENABLED: boolean;
    var DISALLOW_TEST_ONLY_CODE: boolean;
    /**
     * A debug loader is responsible for downloading and executing javascript
     * files in an unbundled, uncompiled environment.
     */
    class DebugLoader extends DebugLoader_Instance {}
    class DebugLoader_Instance {
        private noStructuralTyping_: any;
        addDependency(
            relPath: string, provides: string[], requires: string[],
            opt_loadFlags?: boolean|
            {[/* warning: coerced from ? */ key: string]: string}): void;
        /**
         * Performs any needed preprocessing of a goog.require call.
         */
        earlyProcessLoad(name: string): void;
        getTranspiler(): goog.Transpiler;
        inHtmlDocument(): boolean;
        isProvided(namespaceOrPath: string): boolean;
        /**
         * Loads the given symbol along with any dependencies.
         */
        load(name: string): void;
        loadFileSync(srcUrl: string): string|null;
        logToConsole(message: string): void;
        normalizePath(path: string): string;
    }
    var ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING: boolean;
    var ENABLE_DEBUG_LOADER: boolean;
    var LOAD_MODULE_USING_EVAL: boolean;
    var LOCALE: string;
    var NATIVE_ARRAY_PROTOTYPES: boolean;
    var SEAL_MODULE_EXPORTS: boolean;
    var STRICT_MODE_COMPATIBLE: boolean;
    var TRANSPILE: string;
    var TRANSPILER: string;
    var TRUSTED_SITE: boolean;
    class Transpiler extends Transpiler_Instance {}
    class Transpiler_Instance {
        private noStructuralTyping_: any;
        /**
         * Determines whether the given language needs to be transpiled.
         */
        needsTranspile(lang: string): boolean;
        /**
         * Lazily retrieves the transpiler and applies it to the source.
         * @param code JS code.
         * @param path Path to the code.
         */
        transpile(code: string, path: string): string;
    }
    /**
     * When defining a class Foo with an abstract method bar(), you can do:
     * Foo.prototype.bar = goog.abstractMethod
     *
     * Now if a subclass of Foo fails to override bar(), an error will be thrown
     * when bar() is invoked.
     */
    function abstractMethod(...a: any[]): any;
    /**
     * Adds a dependency from a file to the files it requires.
     * @param relPath The path to the js file.
     * @param provides An array of strings with the names of the objects this
     * file provides.
     * @param requires An array of strings with the names of the objects this
     * file requires.
     * @param opt_loadFlags Parameters indicating how the file must be loaded.
     * The boolean 'true' is equivalent to {'module': 'goog'} for
     * backwards-compatibility.  Valid properties and values include {'module':
     * 'goog'} and {'lang': 'es6'}.
     */
    function addDependency(
        relPath: string, provides: string[], requires: string[],
        opt_loadFlags?: boolean|
        {[/* warning: coerced from ? */ key: string]: string}): void;
    /**
     * Adds a {@code getInstance} static method that always returns the same
     * instance object.
     * @param ctor The constructor for the class to add the static method to.
     */
    function addSingletonGetter(ctor: (...a: any[]) => any): void;
    /**
     * Call up to the superclass.
     *
     * If this is called from a constructor, then this calls the superclass
     * constructor with arguments 1-N.
     *
     * If this is called from a prototype method, then you must pass the name of
     * the method as the second argument to this function. If you do not, you
     * will get a runtime error. This calls the superclass' method with
     * arguments 2-N.
     *
     * This function only works if you use goog.inherits to express inheritance
     * relationships between your classes.
     *
     * This function is a compiler primitive. At compile-time, the compiler will
     * do macro expansion to remove a lot of the extra overhead that this
     * function introduces. The compiler will also enforce a lot of the
     * assumptions that this function makes, and treat it as a compiler error if
     * you break them.
     * @param me Should always be "this".
     * @param opt_methodName The method name if calling a super method.
     * @param var_args The rest of the arguments.
     */
    function base(
        me: ಠ_ಠ.clutz.GlobalObject, opt_methodName?: any,
        ...var_args: any[]): any;
    /**
     * Path for included scripts.
     */
    var basePath: string;
    /**
     * Partially applies this function to a particular 'this object' and zero or
     * more arguments. The result is a new function with some arguments of the
     * first function pre-filled and the value of this 'pre-specified'.
     *
     * Remaining arguments specified at call-time are appended to the
     * pre-specified ones.
     *
     * Also see: {@link #partial}.
     *
     * Usage:
     * <pre>var barMethBound = goog.bind(myFunction, myObj, 'arg1', 'arg2');
     * barMethBound('arg3', 'arg4');</pre>
     * @param fn A function to partially apply.
     * @param selfObj Specifies the object which this should point to when the
     * function is run.
     * @param var_args Additional arguments that are partially applied to the
     * function.
     */
    function bind<T = any>(
        fn: ((...a: any[]) => any) | null, selfObj: T,
        ...var_args: any[]): (...a: any[]) => any;
    /**
     * Clones a value. The input may be an Object, Array, or basic type. Objects
     * and arrays will be cloned recursively.
     *
     * WARNINGS:
     * <code>goog.cloneObject</code> does not detect reference loops. Objects
     * that refer to themselves will cause infinite recursion.
     *
     * <code>goog.cloneObject</code> is unaware of unique identifiers, and
     * copies UIDs created by <code>getUid</code> into cloned results.
     * @param obj The value to clone.
     */
    function cloneObject(obj: any): any;
    /**
     * Defines a named value. In uncompiled mode, the value is retrieved from
     * CLOSURE_DEFINES or CLOSURE_UNCOMPILED_DEFINES if the object is defined
     * and has the property specified, and otherwise used the defined
     * defaultValue. When compiled the default can be overridden using the
     * compiler options or the value set in the CLOSURE_DEFINES object.
     * @param name The distinguished name to provide.
     */
    function define(name: string, defaultValue: string|number|boolean): void;
    /**
     * Creates a restricted form of a Closure "class":
     * - from the compiler's perspective, the instance returned from the
     * constructor is sealed (no new properties may be added).  This enables
     * better checks.
     * - the compiler will rewrite this definition to a form that is optimal
     * for type checking and optimization (initially this will be a more
     * traditional form).
     * @param superClass The superclass, Object or null.
     * @param def An object literal describing the class.  It may have the
     * following properties: "constructor": the constructor function "statics":
     * an object literal containing methods to add to the constructor as
     * "static" methods or a function that will receive the constructor function
     * as its only parameter to which static properties can be added. all other
     * properties are added to the prototype.
     */
    function defineClass(
        superClass: (...a: any[]) => any,
        def: ಠ_ಠ.clutz.goog.defineClass.ClassDescriptor): (...a: any[]) => any;
    /**
     * Exports a property unobfuscated into the object's namespace.
     * ex. goog.exportProperty(Foo, 'staticFunction', Foo.staticFunction);
     * ex. goog.exportProperty(Foo.prototype, 'myMethod',
     * Foo.prototype.myMethod);
     * @param object Object whose static property is being exported.
     * @param publicName Unobfuscated name to export.
     * @param symbol Object the name should point to.
     */
    function exportProperty(
        object: ಠ_ಠ.clutz.GlobalObject|null, publicName: string,
        symbol: any): void;
    /**
     * Exposes an unobfuscated global namespace path for the given object.
     * Note that fields of the exported object *will* be obfuscated, unless they
     * are exported in turn via this function or goog.exportProperty.
     *
     * Also handy for making public items that are defined in anonymous
     * closures.
     *
     * ex. goog.exportSymbol('public.path.Foo', Foo);
     *
     * ex. goog.exportSymbol('public.path.Foo.staticFunction',
     * Foo.staticFunction); public.path.Foo.staticFunction();
     *
     * ex. goog.exportSymbol('public.path.Foo.prototype.myMethod',
     * Foo.prototype.myMethod);
     * new public.path.Foo().myMethod();
     * @param publicPath Unobfuscated name to export.
     * @param object Object the name should point to.
     * @param opt_objectToExportTo The object to add the path to; default is
     * goog.global.
     */
    function exportSymbol(
        publicPath: string, object: any,
        opt_objectToExportTo?: ಠ_ಠ.clutz.GlobalObject|null): void;
    /**
     * Forward declares a symbol. This is an indication to the compiler that the
     * symbol may be used in the source yet is not required and may not be
     * provided in compilation.
     *
     * The most common usage of forward declaration is code that takes a type as
     * a function parameter but does not need to require it. By forward
     * declaring instead of requiring, no hard dependency is made, and (if not
     * required elsewhere) the namespace may never be required and thus, not be
     * pulled into the JavaScript binary. If it is required elsewhere, it will
     * be type checked as normal.
     *
     * Before using goog.forwardDeclare, please read the documentation at
     * https://github.com/google/closure-compiler/wiki/Bad-Type-Annotation to
     * understand the options and tradeoffs when working with forward
     * declarations.
     * @param name The namespace to forward declare in the form of
     * "goog.package.part".
     */
    function forwardDeclare(name: string): void;
    /**
     * Handles strings that are intended to be used as CSS class names.
     *
     * This function works in tandem with @see goog.setCssNameMapping.
     *
     * Without any mapping set, the arguments are simple joined with a hyphen
     * and passed through unaltered.
     *
     * When there is a mapping, there are two possible styles in which these
     * mappings are used. In the BY_PART style, each part (i.e. in between
     * hyphens) of the passed in css name is rewritten according to the map. In
     * the BY_WHOLE style, the full css name is looked up in the map directly.
     * If a rewrite is not specified by the map, the compiler will output a
     * warning.
     *
     * When the mapping is passed to the compiler, it will replace calls to
     * goog.getCssName with the strings from the mapping, e.g.
     * var x = goog.getCssName('foo');
     * var y = goog.getCssName(this.baseClass, 'active');
     * becomes:
     * var x = 'foo';
     * var y = this.baseClass + '-active';
     *
     * If one argument is passed it will be processed, if two are passed only
     * the modifier will be processed, as it is assumed the first argument was
     * generated as a result of calling goog.getCssName.
     * @param className The class name.
     * @param opt_modifier A modifier to be appended to the class name.
     */
    function getCssName(className: string, opt_modifier?: string): string;
    /**
     * Adds a hash code field to an object. The hash code is unique for the
     * given object.
     * @param obj The object to get the hash code for.
     */
    function getHashCode(a: ಠ_ಠ.clutz.GlobalObject|null): number;
    /**
     * Gets a localized message.
     *
     * This function is a compiler primitive. If you give the compiler a
     * localized message bundle, it will replace the string at compile-time with
     * a localized version, and expand goog.getMsg call to a concatenated
     * string.
     *
     * Messages must be initialized in the form:
     * <code>
     * var MSG_NAME = goog.getMsg('Hello {$placeholder}', {'placeholder':
     * 'world'});
     * </code>
     *
     * This function produces a string which should be treated as plain text.
     * Use
     * {@link goog.html.SafeHtmlFormatter} in conjunction with goog.getMsg to
     * produce SafeHtml.
     * @param str Translatable string, places holders in the form {$foo}.
     * @param opt_values Maps place holder name to value.
     */
    function getMsg(
        str: string, opt_values?: {[key: string]: string}|null): string;
    /**
     * Gets a localized message. If the message does not have a translation,
     * gives a fallback message.
     *
     * This is useful when introducing a new message that has not yet been
     * translated into all languages.
     *
     * This function is a compiler primitive. Must be used in the form:
     * <code>var x = goog.getMsgWithFallback(MSG_A, MSG_B);</code>
     * where MSG_A and MSG_B were initialized with goog.getMsg.
     * @param a The preferred message.
     * @param b The fallback message.
     */
    function getMsgWithFallback(a: string, b: string): string;
    /**
     * Returns an object based on its fully qualified external name.  The object
     * is not found if null or undefined.  If you are using a compilation pass
     * that renames property names beware that using this function will not find
     * renamed properties.
     * @param name The fully qualified name.
     * @param opt_obj The object within which to look; default is |goog.global|.
     */
    function getObjectByName(
        name: string, opt_obj?: ಠ_ಠ.clutz.GlobalObject|null): any;
    /**
     * Gets a unique ID for an object. This mutates the object so that further
     * calls with the same object as a parameter returns the same value. The
     * unique ID is guaranteed to be unique across the current session amongst
     * objects that are passed into {@code getUid}. There is no guarantee that
     * the ID is unique or consistent across sessions. It is unsafe to generate
     * unique ID for function prototypes.
     * @param obj The object to get the unique ID for.
     */
    function getUid(obj: ಠ_ಠ.clutz.GlobalObject|null): number;
    /**
     * Evals JavaScript in the global scope.  In IE this uses execScript, other
     * browsers use goog.global.eval. If goog.global.eval does not evaluate in
     * the global scope (for example, in Safari), appends a script tag instead.
     * Throws an exception if neither execScript or eval is defined.
     * @param script JavaScript string.
     */
    function globalEval(script: string): void;
    /**
     * Globalizes a whole namespace, such as goog or goog.lang.
     * @param obj The namespace to globalize.
     * @param opt_global The object to add the properties to.
     */
    function globalize(
        obj: ಠ_ಠ.clutz.GlobalObject,
        opt_global?: ಠ_ಠ.clutz.GlobalObject|null): void;
    var hasBadLetScoping: boolean|null;
    /**
     * Whether the given object is already assigned a unique ID.
     *
     * This does not modify the object.
     * @param obj The object to check.
     */
    function hasUid(obj: ಠ_ಠ.clutz.GlobalObject): boolean;
    /**
     * Inherit the prototype methods from one constructor into another.
     *
     * Usage:
     * <pre>
     * function ParentClass(a, b) { }
     * ParentClass.prototype.foo = function(a) { };
     *
     * function ChildClass(a, b, c) {
     * ChildClass.base(this, 'constructor', a, b);
     * }
     * goog.inherits(ChildClass, ParentClass);
     *
     * var child = new ChildClass('a', 'b', 'see');
     * child.foo(); // This works.
     * </pre>
     * @param childCtor Child class.
     * @param parentCtor Parent class.
     */
    function inherits(
        childCtor: (...a: any[]) => any,
        parentCtor: (...a: any[]) => any): void;
    /**
     * Returns true if the specified value is an array.
     * @param val Variable to test.
     */
    function isArray(val: any): val is Array<any>;
    /**
     * Returns true if the object looks like an array. To qualify as array like
     * the value needs to be either a NodeList or an object with a Number length
     * property. As a special case, a function value is not array like, because
     * its length property is fixed to correspond to the number of expected
     * arguments.
     * @param val Variable to test.
     */
    function isArrayLike(val?: any): boolean;
    /**
     * Returns true if the specified value is a boolean.
     * @param val Variable to test.
     */
    function isBoolean(val: any): val is boolean;
    /**
     * Returns true if the object looks like a Date. To qualify as Date-like the
     * value needs to be an object and have a getFullYear() function.
     * @param val Variable to test.
     */
    function isDateLike(val: any): val is ಠ_ಠ.clutz.goog.date.DateLike;
    /**
     * Returns true if the specified value is not undefined.
     * @param val Variable to test.
     */
    function isDef<T>(val: T | undefined): val is T;
    /**
     * Returns true if the specified value is defined and not null.
     * @param val Variable to test.
     */
    function isDefAndNotNull<T>(val: T | undefined | null): val is T;
    /**
     * Returns true if the specified value is a function.
     * @param val Variable to test.
     */
    function isFunction(val: any): val is Function;
    /**
     * Returns true if the specified value is null.
     * @param val Variable to test.
     */
    function isNull(val: any): val is null;
    /**
     * Returns true if the specified value is a number.
     * @param val Variable to test.
     */
    function isNumber(val: any): val is number;
    /**
     * Returns true if the specified value is an object.  This includes arrays
     * and functions.
     * @param val Variable to test.
     */
    function isObject(val: any): val is Object;
    /**
     * Returns true if the specified value is a string.
     * @param val Variable to test.
     */
    function isString(val: any): val is string;
    function loadModule(moduleDef: ((a?: any) => any)|string): void;
    /**
     * Copies all the members of a source object to a target object. This method
     * does not work on all browsers for all objects that contain keys such as
     * toString or hasOwnProperty. Use goog.object.extend for this purpose.
     * @param target Target.
     * @param source Source.
     */
    function mixin(
        target: ಠ_ಠ.clutz.GlobalObject|null,
        source: ಠ_ಠ.clutz.GlobalObject|null): void;
    function now(): number;
    /**
     * Null function used for default values of callbacks, etc.
     */
    function nullFunction(): void;
    /**
     * Like goog.bind(), except that a 'this object' is not required. Useful
     * when the target function is already bound.
     *
     * Usage:
     * var g = goog.partial(f, arg1, arg2);
     * g(arg3, arg4);
     * @param fn A function to partially apply.
     * @param var_args Additional arguments that are partially applied to fn.
     */
    function partial(
        fn: (...a: any[]) => any, ...var_args: any[]): (...a: any[]) => any;
    /**
     * Defines a namespace in Closure.
     *
     * A namespace may only be defined once in a codebase. It may be defined
     * using goog.provide() or goog.module().
     *
     * The presence of one or more goog.provide() calls in a file indicates
     * that the file defines the given objects/namespaces.
     * Provided symbols must not be null or undefined.
     *
     * In addition, goog.provide() creates the object stubs for a namespace
     * (for example, goog.provide("goog.foo.bar") will create the object
     * goog.foo.bar if it does not already exist).
     *
     * Build tools also scan for provide/require/module statements
     * to discern dependencies, build dependency files (see deps.js), etc.
     * @param name Namespace provided by this file in the form
     * "goog.package.part".
     */
    function provide(name: string): void;
    function registerDebugLoader(loader: goog.DebugLoader): void;
    /**
     * Removes the hash code field from an object.
     * @param obj The object to remove the field from.
     */
    function removeHashCode(a: ಠ_ಠ.clutz.GlobalObject|null): any;
    /**
     * Removes the unique ID from an object. This is useful if the object was
     * previously mutated using {@code goog.getUid} in which case the mutation
     * is undone.
     * @param obj The object to remove the unique ID field from.
     */
    function removeUid(obj: ಠ_ಠ.clutz.GlobalObject|null): void;
    function require(name: string): ಠ_ಠ.clutz.ClosureSymbolNotGoogProvided;
    /**
     * Allow for aliasing within scope functions.  This function exists for
     * uncompiled code - in compiled code the calls will be inlined and the
     * aliases applied.  In uncompiled code the function is simply run since the
     * aliases as written are valid JavaScript.
     * @param fn Function to call.  This function can contain aliases to
     * namespaces (e.g. "var dom = goog.dom") or classes (e.g. "var Timer =
     * goog.Timer").
     */
    function scope(fn: () => any): void;
    /**
     * Sets the map to check when returning a value from goog.getCssName().
     * Example: <pre> goog.setCssNameMapping({ "goog": "a", "disabled": "b",
     * });
     *
     * var x = goog.getCssName('goog');
     * // The following evaluates to: "a a-b".
     * goog.getCssName('goog') + ' ' + goog.getCssName(x, 'disabled')
     * </pre>
     * When declared as a map of string literals to string literals, the
     * JSCompiler will replace all calls to goog.getCssName() using the supplied
     * map if the
     * --process_closure_primitives flag is set.
     * @param mapping A map of strings to strings where keys are possible
     * arguments to goog.getCssName() and values are the corresponding values
     * that should be returned.
     * @param opt_style The style of css name mapping. There are two valid
     * options: 'BY_PART', and 'BY_WHOLE'.
     */
    function setCssNameMapping(
        mapping: ಠ_ಠ.clutz.GlobalObject, opt_style?: string): void;
    /**
     * Marks that the current file should only be used for testing, and never
     * for live code in production.
     *
     * In the case of unit tests, the message may optionally be an exact
     * namespace for the test (e.g. 'goog.stringTest'). The linter will then
     * ignore the extra provide (if not explicitly defined in the code).
     * @param opt_message Optional message to add to the error that's raised
     * when used in production code.
     */
    function setTestOnly(opt_message?: string): void;
    /**
     * Sealing classes breaks the older idiom of assigning properties on the
     * prototype rather than in the constructor. As such, goog.defineClass
     * must not seal subclasses of these old-style classes until they are fixed.
     * Until then, this marks a class as "broken", instructing defineClass
     * not to seal subclasses.
     * @param ctr The legacy constructor to tag as unsealable.
     */
    function tagUnsealableClass(ctr: (...a: any[]) => any): void;
    /**
     * This is a "fixed" version of the typeof operator.  It differs from the
     * typeof operator in such a way that null returns 'null' and arrays return
     * 'array'.
     * @param value The value to get the type of.
     */
    function typeOf(value?: any): string;
    function useSafari10Workaround(): boolean;
    function workaroundSafari10EvalBug(moduleDef: string): string;
    var /**
         * Reference to the global context.  In most cases this will be
         * 'window'.
         */
            global: any;
}
declare namespace ಠ_ಠ.clutz.goog {
    /**
     * A deprecated alias.
     */
    type Delay<THIS = any> = ಠ_ಠ.clutz.goog.async.Delay<THIS>;
    var Delay: typeof ಠ_ಠ.clutz.goog.async.Delay;
}
declare module 'goog:goog.Delay' {
    import alias = ಠ_ಠ.clutz.goog.Delay;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog {
    /**
     * Class that provides the basic implementation for disposable objects. If
     * your class holds one or more references to COM objects, DOM nodes, or
     * other disposable objects, it should extend this class or implement the
     * disposable interface (defined in goog.disposable.IDisposable).
     */
    class Disposable extends Disposable_Instance {
        static INCLUDE_STACK_ON_CREATION: boolean;
        static MONITORING_MODE: number;
        /**
         * Clears the registry of undisposed objects but doesn't dispose of
         * them.
         */
        static clearUndisposedObjects(): void;
        static getUndisposedObjects(): ಠ_ಠ.clutz.goog.Disposable[];
        /**
         * Returns True if we can verify the object is disposed.
         * Calls {@code isDisposed} on the argument if it supports it.  If obj
         * is not an object with an isDisposed() method, return false.
         * @param obj The object to investigate.
         */
        static isDisposed(obj: any): boolean;
    }
    class Disposable_Instance implements ಠ_ಠ.clutz.goog.disposable.IDisposable {
        private noStructuralTyping_: any;
        /**
         * If monitoring the goog.Disposable instances is enabled, stores the
         * creation stack trace of the Disposable instance.
         */
        creationStack?: string;
        /**
         * Invokes a callback function when this object is disposed. Callbacks
         * are invoked in the order in which they were added. If a callback is
         * added to an already disposed Disposable, it will be called
         * immediately.
         * @param callback The callback function.
         * @param opt_scope An optional scope to call the callback in.
         */
        addOnDisposeCallback<T = any>(callback: () => any, opt_scope?: T): void;
        /**
         * Disposes of the object. If the object hasn't already been disposed
         * of, calls
         * {@link #disposeInternal}. Classes that extend {@code goog.Disposable}
         * should override {@link #disposeInternal} in order to delete
         * references to COM objects, DOM nodes, and other disposable objects.
         * Reentrant.
         */
        dispose(): void;
        /**
         * Deletes or nulls out any references to COM objects, DOM nodes, or
         * other disposable objects. Classes that extend {@code goog.Disposable}
         * should override this method. Not reentrant. To avoid calling it
         * twice, it must only be called from the subclass' {@code
         * disposeInternal} method. Everywhere else the public
         * {@code dispose} method must be used.
         * For example:
         * <pre>
         * mypackage.MyClass = function() {
         * mypackage.MyClass.base(this, 'constructor');
         * // Constructor logic specific to MyClass.
         * ...
         * };
         * goog.inherits(mypackage.MyClass, goog.Disposable);
         *
         * mypackage.MyClass.prototype.disposeInternal = function() {
         * // Dispose logic specific to MyClass.
         * ...
         * // Call superclass's disposeInternal at the end of the subclass's,
         * like
         * // in C++, to avoid hard-to-catch issues.
         * mypackage.MyClass.base(this, 'disposeInternal');
         * };
         * </pre>
         */
        disposeInternal(): void;
        getDisposed(): boolean;
        isDisposed(): boolean;
        /**
         * Associates a disposable object with this object so that they will be
         * disposed together.
         * @param disposable that will be disposed when this object is disposed.
         */
        registerDisposable(disposable: ಠ_ಠ.clutz.goog.disposable.IDisposable|
                           null): void;
    }
}
declare namespace ಠ_ಠ.clutz.goog.Disposable {
    enum MonitoringMode {
        INTERACTIVE,
        OFF,
        PERMANENT,
    }
}
declare module 'goog:goog.Disposable' {
    import alias = ಠ_ಠ.clutz.goog.Disposable;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog {
    /**
     * A history management object. Can be instantiated in user-visible mode
     * (uses the address fragment to manage state) or in hidden mode. This
     * object should be created from a script in the document body before the
     * document has finished loading.
     *
     * To store the hidden states in browsers other than IE, a hidden iframe is
     * used. It must point to a valid html page on the same domain (which can
     * and probably should be blank.)
     *
     * Sample instantiation and usage:
     *
     * <pre>
     * // Instantiate history to use the address bar for state.
     * var h = new goog.History();
     * goog.events.listen(h, goog.history.EventType.NAVIGATE, navCallback);
     * h.setEnabled(true);
     *
     * // Any changes to the location hash will call the following function.
     * function navCallback(e) {
     * alert('Navigated to state "' + e.token + '"');
     * }
     *
     * // The history token can also be set from code directly.
     * h.setToken('foo');
     * </pre>
     */
    class History extends History_Instance {
        /**
         * Whether the browser always requires the hash to be present. Internet
         * Explorer before version 8 will reload the HTML page if the hash is
         * omitted.
         */
        static HASH_ALWAYS_REQUIRED: boolean;
        /**
         * Whether the current browser is Internet Explorer prior to version 8.
         * Many IE specific workarounds developed before version 8 are
         * unnecessary in more current versions.
         */
        static LEGACY_IE: boolean;
        /**
         * Whether the browser supports HTML5 history management's onhashchange
         * event.
         * {@link http://www.w3.org/TR/html5/history.html}. IE 9 in
         * compatibility mode indicates that onhashchange is in window, but
         * testing reveals the event isn't actually fired.
         */
        static isOnHashChangeSupported(): boolean;
    }
    class History_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        constructor(
            opt_invisible?: boolean,
            opt_blankPageUrl?: ಠ_ಠ.clutz.goog.html.TrustedResourceUrl,
            opt_input?: HTMLInputElement|null,
            opt_iframe?: HTMLIFrameElement|null);
        /**
         * IE-only variable for determining if the document has loaded.
         */
        documentLoaded: boolean;
        disposeInternal(): void;
        getToken(): string;
        /**
         * Callback for the window onload event in IE. This is necessary to read
         * the value of the hidden input after restoring a history session. The
         * value of input elements is not viewable until after window onload for
         * some reason (the iframe state is similarly unavailable during the
         * loading phase.)  If setEnabled is called before the iframe has
         * completed loading, the history object will actually be enabled at
         * this point.
         */
        onDocumentLoaded(): void;
        /**
         * Replaces the current history state without affecting the rest of the
         * history stack.
         * @param token The history state identifier.
         * @param opt_title Optional title used when setting the hidden iframe
         * title in IE.
         */
        replaceToken(token: string, opt_title?: string): void;
        /**
         * Starts or stops the History polling loop. When enabled, the History
         * object will immediately fire an event for the current location. The
         * caller can set up event listeners between the call to the constructor
         * and the call to setEnabled.
         *
         * On IE, actual startup may be delayed until the iframe and hidden
         * input element have been loaded and can be polled. This behavior is
         * transparent to the caller.
         * @param enable Whether to enable the history polling loop.
         */
        setEnabled(enable: boolean): void;
        /**
         * Sets the history state. When user visible states are used, the URL
         * fragment will be set to the provided token.  Sometimes it is
         * necessary to set the history token before the document title has
         * changed, in this case IE's history drop down can be out of sync with
         * the token.  To get around this problem, the app can pass in a title
         * to use with the hidden iframe.
         * @param token The history state identifier.
         * @param opt_title Optional title used when setting the hidden iframe
         * title in IE.
         */
        setToken(token: string, opt_title?: string): void;
    }
}
declare namespace ಠ_ಠ.clutz.goog.History {
    enum PollingType {
        LONG,
        NORMAL,
    }
}
declare module 'goog:goog.History' {
    import alias = ಠ_ಠ.clutz.goog.History;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.History {
    /**
     * Constant for the history change event type.
     */
    type Event = ಠ_ಠ.clutz.goog.history.Event;
    var Event: typeof ಠ_ಠ.clutz.goog.history.Event;
}
declare module 'goog:goog.History.Event' {
    import alias = ಠ_ಠ.clutz.goog.History.Event;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.History {
    /**
     * Constant for the history change event type.
     */
    //!! goog.History.EventType aliases enum goog.history.EventType
    type EventType = goog.history.EventType;
    const EventType: typeof goog.history.EventType;
}
declare module 'goog:goog.History.EventType' {
    import alias = ಠ_ಠ.clutz.goog.History.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog {
    /**
     * NOTE: This class was created in anticipation of the built-in Promise type
     * being standardized and implemented across browsers. Now that Promise is
     * available in modern browsers, and is automatically polyfilled by the
     * Closure Compiler, by default, most new code should use native {@code
     * Promise} instead of {@code goog.Promise}. However, {@code goog.Promise}
     * has the concept of cancellation which native Promises do not yet have. So
     * code needing cancellation may still want to use {@code goog.Promise}.
     *
     * Promises provide a result that may be resolved asynchronously. A Promise
     * may be resolved by being fulfilled with a fulfillment value, rejected
     * with a rejection reason, or blocked by another Promise. A Promise is said
     * to be settled if it is either fulfilled or rejected. Once settled, the
     * Promise result is immutable.
     *
     * Promises may represent results of any type, including undefined.
     * Rejection reasons are typically Errors, but may also be of any type.
     * Closure Promises allow for optional type annotations that enforce that
     * fulfillment values are of the appropriate types at compile time.
     *
     * The result of a Promise is accessible by calling {@code then} and
     * registering
     * {@code onFulfilled} and {@code onRejected} callbacks. Once the Promise
     * is settled, the relevant callbacks are invoked with the fulfillment value
     * or rejection reason as argument. Callbacks are always invoked in the
     * order they were registered, even when additional {@code then} calls are
     * made from inside another callback. A callback is always run
     * asynchronously sometime after the scope containing the registering {@code
     * then} invocation has returned.
     *
     * If a Promise is resolved with another Promise, the first Promise will
     * block until the second is settled, and then assumes the same result as
     * the second Promise. This allows Promises to depend on the results of
     * other Promises, linking together multiple asynchronous operations.
     *
     * This implementation is compatible with the Promises/A+ specification and
     * passes that specification's conformance test suite. A Closure Promise may
     * be resolved with a Promise instance (or sufficiently compatible
     * Promise-like object) created by other Promise implementations. From the
     * specification, Promise-like objects are known as "Thenables".
     */
    class Promise<TYPE = any, RESOLVER_CONTEXT = TYPE> extends
        Promise_Instance<TYPE, RESOLVER_CONTEXT> {
        static DEFAULT_MAX_UNUSED: number;
        static LONG_STACK_TRACES: boolean;
        static UNHANDLED_REJECTION_DELAY: number;
        static all<TYPE = any>(promises: ಠ_ಠ.clutz.goog.uri.utils.QueryArray):
            ಠ_ಠ.clutz.goog.Promise<TYPE[], any>;
        static allSettled<TYPE = any>(
            promises: ಠ_ಠ.clutz.goog.uri.utils.QueryArray): ಠ_ಠ.clutz.goog
            .Promise<{fulfilled: boolean, reason?: any, value?: TYPE}[], any>;
        static firstFulfilled<TYPE = any>(
            promises: ಠ_ಠ.clutz.goog.uri.utils.QueryArray):
            ಠ_ಠ.clutz.goog.Promise<TYPE, any>;
        static race<TYPE = any>(promises: ಠ_ಠ.clutz.goog.uri.utils.QueryArray):
            ಠ_ಠ.clutz.goog.Promise<TYPE, any>;
        static reject(opt_reason?: any): ಠ_ಠ.clutz.goog.Promise<any, any>;
        static resolve<T>(value: ಠ_ಠ.clutz.goog.Promise<T, any>|T): any;
        /**
         * Sets a handler that will be called with reasons from unhandled
         * rejected Promises. If the rejected Promise (or one of its
         * descendants) has an
         * {@code onRejected} callback registered, the rejection will be
         * considered handled, and the rejection handler will not be called.
         *
         * By default, unhandled rejections are rethrown so that the error may
         * be captured by the developer console or a {@code window.onerror}
         * handler.
         * @param handler A function that will be called with reasons from
         * rejected Promises. Defaults to {@code goog.async.throwException}.
         */
        static setUnhandledRejectionHandler(handler: (a: any) => any): void;
        static withResolver<TYPE = any>():
            ಠ_ಠ.clutz.goog.promise.Resolver<TYPE>;
    }
    class Promise_Instance<TYPE = any, RESOLVER_CONTEXT = any> implements
        ಠ_ಠ.clutz.goog.Thenable<TYPE> {
        private noStructuralTyping_: any;
        constructor(
            resolver:
                (a: (this: RESOLVER_CONTEXT,
                     a?: TYPE|PromiseLike<TYPE>|null|{then: any}) => any,
                 b: (a?: any) => any) => void,
            opt_context?: RESOLVER_CONTEXT);
        /**
         * Cancels the Promise if it is still pending by rejecting it with a
         * cancel Error. No action is performed if the Promise is already
         * resolved.
         *
         * All child Promises of the canceled Promise will be rejected with the
         * same cancel error, as with normal Promise rejection. If the Promise
         * to be canceled is the only child of a pending Promise, the parent
         * Promise will also be canceled. Cancellation may propagate upward
         * through multiple generations.
         * @param opt_message An optional debugging message for describing the
         * cancellation reason.
         */
        cancel(opt_message?: string): void;
        /**
         * Adds callbacks that will operate on the result of the Promise,
         * returning a new child Promise.
         *
         * If the Promise is fulfilled, the {@code onFulfilled} callback will be
         * invoked with the fulfillment value as argument, and the child Promise
         * will be fulfilled with the return value of the callback. If the
         * callback throws an exception, the child Promise will be rejected with
         * the thrown value instead.
         *
         * If the Promise is rejected, the {@code onRejected} callback will be
         * invoked with the rejection reason as argument, and the child Promise
         * will be resolved with the return value or rejected with the thrown
         * value of the callback.
         */
        then<RESULT>(
            opt_onFulfilled?: ((a: TYPE) => any | RESULT)|null,
            opt_onRejected?: ((a: any) => any)|null): any;
        /**
         * Adds a callback that will be invoked when the Promise is settled
         * (fulfilled or rejected). The callback receives no argument, and no
         * new child Promise is created. This is useful for ensuring that
         * cleanup takes place after certain asynchronous operations. Callbacks
         * added with {@code thenAlways} will be executed in the same order with
         * other calls to {@code then},
         * {@code thenAlways}, or {@code thenCatch}.
         *
         * Since it does not produce a new child Promise, cancellation
         * propagation is not prevented by adding callbacks with {@code
         * thenAlways}. A Promise that has a cleanup handler added with {@code
         * thenAlways} will be canceled if all of its children created by {@code
         * then} (or {@code thenCatch}) are canceled. Additionally, since any
         * rejections are not passed to the callback, it does not stop the
         * unhandled rejection handler from running.
         * @param onSettled A function that will be invoked when the Promise is
         * settled (fulfilled or rejected).
         * @param opt_context An optional context object that will be the
         * execution context for the callbacks. By default, functions are
         * executed in the global scope.
         */
        thenAlways<THIS = any>(onSettled: () => void, opt_context?: THIS):
            ಠ_ಠ.clutz.goog.Promise<TYPE, any>;
        /**
         * Adds a callback that will be invoked only if the Promise is rejected.
         * This is equivalent to {@code then(null, onRejected)}.
         * @param onRejected A function that will be invoked with the rejection
         * reason if the Promise is rejected.
         * @param opt_context An optional context object that will be the
         * execution context for the callbacks. By default, functions are
         * executed in the global scope.
         */
        thenCatch<THIS = any>(onRejected: (a: any) => any, opt_context?: THIS):
            ಠ_ಠ.clutz.goog.Promise<any, any>;
        /**
         * Adds callbacks that will operate on the result of the Promise without
         * returning a child Promise (unlike "then").
         *
         * If the Promise is fulfilled, the {@code onFulfilled} callback will be
         * invoked with the fulfillment value as argument.
         *
         * If the Promise is rejected, the {@code onRejected} callback will be
         * invoked with the rejection reason as argument.
         * @param opt_onFulfilled A function that will be invoked with the
         * fulfillment value if the Promise is fulfilled.
         * @param opt_onRejected A function that will be invoked with the
         * rejection reason if the Promise is rejected.
         * @param opt_context An optional context object that will be the
         * execution context for the callbacks. By default, functions are
         * executed with the default this.
         */
        thenVoid<THIS = any>(
            opt_onFulfilled?: ((a: TYPE) => any)|null,
            opt_onRejected?: ((a: any) => any)|null, opt_context?: THIS): void;
    }
}
declare namespace ಠ_ಠ.clutz.goog.Promise {
    class CallbackEntry_ extends CallbackEntry__Instance {}
    class CallbackEntry__Instance {
        private noStructuralTyping_: any;
        /**
         * A boolean value to indicate this is a "thenAlways" callback entry.
         * Unlike a normal "then/thenVoid" a "thenAlways doesn't participate
         * in "cancel" considerations but is simply an observer and requires
         * special handling.
         */
        always: boolean;
        child: ಠ_ಠ.clutz.goog.Promise<any, any>|null;
        context: any;
        next: ಠ_ಠ.clutz.goog.Promise.CallbackEntry_|null;
        onFulfilled(...a: any[]): any;
        onRejected(...a: any[]): any;
        /**
         * clear the object prior to reuse
         */
        reset(): void;
    }
    class CancellationError extends CancellationError_Instance {}
    class CancellationError_Instance extends
        ಠ_ಠ.clutz.goog.debug.Error_Instance {
        /**
         * Error used as a rejection reason for canceled Promises.
         */
        constructor(opt_message?: string);
        name: string;
    }
    class Resolver_<TYPE = any> extends Resolver__Instance<TYPE> {}
    class Resolver__Instance<TYPE = any> implements
        ಠ_ಠ.clutz.goog.promise.Resolver<TYPE> {
        private noStructuralTyping_: any;
        promise: ಠ_ಠ.clutz.goog.Promise<TYPE, any>;
        reject(a?: any): void;
        resolve(a?: TYPE|ಠ_ಠ.clutz.goog.Promise<TYPE, any>|null|
                {then: any}): any;
    }
}
declare module 'goog:goog.Promise' {
    import alias = ಠ_ಠ.clutz.goog.Promise;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog {
    /**
     * Provides a more strict interface for Thenables in terms of
     * http://promisesaplus.com for interop with {@see goog.Promise}.
     */
    interface Thenable<TYPE = any> extends PromiseLike<TYPE> {
        /**
         * Adds callbacks that will operate on the result of the Thenable,
         * returning a new child Promise.
         *
         * If the Thenable is fulfilled, the {@code onFulfilled} callback will
         * be invoked with the fulfillment value as argument, and the child
         * Promise will be fulfilled with the return value of the callback. If
         * the callback throws an exception, the child Promise will be rejected
         * with the thrown value instead.
         *
         * If the Thenable is rejected, the {@code onRejected} callback will be
         * invoked with the rejection reason as argument, and the child Promise
         * will be rejected with the return value of the callback or thrown
         * value.
         * @param opt_onFulfilled A function that will be invoked with the
         * fulfillment value if the Promise is fulfilled.
         * @param opt_onRejected A function that will be invoked with the
         * rejection reason if the Promise is rejected.
         * @param opt_context An optional context object that will be the
         * execution context for the callbacks. By default, functions are
         * executed with the default this.
         */
        then<TResult1 = TYPE, TResult2 = any>(
            onfulfilled?: ((value: TYPE) => TResult1 | PromiseLike<TResult1>)|
            undefined|null,
            onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>)|
            undefined|null): PromiseLike<TResult1|TResult2>;
        then<THIS, TResult1 = TYPE, TResult2 = any>(
            onfulfilled:
                ((this: THIS, value: TYPE) => TResult1 | PromiseLike<TResult1>)|
            undefined|null,
            onrejected:
                ((this: THIS, reason: any) => TResult2 | PromiseLike<TResult2>)|
            undefined|null,
            context: THIS): PromiseLike<TResult1|TResult2>;
    }
}
declare namespace ಠ_ಠ.clutz.goog.Thenable {
    var IMPLEMENTED_BY_PROP: string;
    function addImplementation(
        ctor: {new (...a: any[]): ಠ_ಠ.clutz.goog.Thenable<any>}): void;
    function isImplementedBy(object?: any): boolean;
}
declare module 'goog:goog.Thenable' {
    import alias = ಠ_ಠ.clutz.goog.Thenable;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog {
    /**
     * A deprecated alias.
     */
    type Throttle<T = any> = ಠ_ಠ.clutz.goog.async.Throttle<T>;
    var Throttle: typeof ಠ_ಠ.clutz.goog.async.Throttle;
}
declare module 'goog:goog.Throttle' {
    import alias = ಠ_ಠ.clutz.goog.Throttle;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog {
    /**
     * Class for handling timing events.
     */
    class Timer extends Timer_Instance {
        /**
         * Constant for the timer's event type.
         */
        static TICK: string;
        /**
         * Calls the given function once, after the optional pause.
         * <p>
         * The function is always called asynchronously, even if the delay is 0.
         * This is a common trick to schedule a function to run after a batch of
         * browser event processing.
         * @param listener Function or object that has a handleEvent method.
         * @param opt_delay Milliseconds to wait; default is 0.
         * @param opt_handler Object in whose scope to call the listener.
         */
        static callOnce<SCOPE = any>(
            listener: (() => any)|{handleEvent: () => any}|null,
            opt_delay?: number, opt_handler?: SCOPE): number;
        /**
         * Clears a timeout initiated by {@link #callOnce}.
         * @param timerId A timer ID.
         */
        static clear(timerId: number|null): void;
        /**
         * An object that implements {@code setTimeout}, {@code setInterval},
         * {@code clearTimeout} and {@code clearInterval}. We default to the
         * global object. Changing {@code goog.Timer.defaultTimerObject} changes
         * the object for all timer instances which can be useful if your
         * environment has some other implementation of timers you'd like to
         * use.
         */
        static defaultTimerObject: {clearTimeout: any, setTimeout: any};
        /**
         * Variable that controls the timer error correction. If the timer is
         * called before the requested interval times {@code intervalScale},
         * which often happens on Mozilla, the timer is rescheduled.
         */
        static intervalScale: number;
        static promise<RESULT = any>(
            delay: number,
            opt_result?: RESULT|ಠ_ಠ.clutz.goog.Thenable<any>|null|
            {then: any}): ಠ_ಠ.clutz.goog.Promise<RESULT, any>;
    }
    class Timer_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        constructor(opt_interval?: number, opt_timerObject?: GlobalObject|null);
        /**
         * Dispatches the TICK event. This is its own method so subclasses can
         * override.
         */
        dispatchTick(): void;
        disposeInternal(): void;
        /**
         * Whether this timer is enabled
         */
        enabled: boolean;
        /**
         * Gets the interval of the timer.
         */
        getInterval(): number;
        /**
         * Sets the interval of the timer.
         * @param interval Number of ms between ticks.
         */
        setInterval(interval: number): void;
        /**
         * Starts the timer.
         */
        start(): void;
        /**
         * Stops the timer.
         */
        stop(): void;
    }
}
declare module 'goog:goog.Timer' {
    import alias = ಠ_ಠ.clutz.goog.Timer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog {
    /**
     * This class contains setters and getters for the parts of the URI.
     * The <code>getXyz</code>/<code>setXyz</code> methods return the decoded
     * part
     * -- so<code>goog.Uri.parse('/foo%20bar').getPath()</code> will return the
     * decoded path, <code>/foo bar</code>.
     *
     * Reserved characters (see RFC 3986 section 2.2) can be present in
     * their percent-encoded form in scheme, domain, and path URI components and
     * will not be auto-decoded. For example:
     * <code>goog.Uri.parse('rel%61tive/path%2fto/resource').getPath()</code>
     * will return <code>relative/path%2fto/resource</code>.
     *
     * The constructor accepts an optional unparsed, raw URI string.  The parser
     * is relaxed, so special characters that aren't escaped but don't cause
     * ambiguities will not cause parse failures.
     *
     * All setters return <code>this</code> and so may be chained, a la
     * <code>goog.Uri.parse('/foo').setFragment('part').toString()</code>.
     */
    class Uri extends Uri_Instance {
        /**
         * Parameter name added to stop caching.
         */
        static RANDOM_PARAM: string;
        /**
         * Creates a new goog.Uri object from unencoded parts.
         * @param opt_scheme Scheme/protocol or full URI to parse.
         * @param opt_userInfo username:password.
         * @param opt_domain www.google.com.
         * @param opt_port 9830.
         * @param opt_path /some/path/to/a/file.html.
         * @param opt_query a=1&b=2.
         * @param opt_fragment The fragment without the #.
         * @param opt_ignoreCase Whether to ignore parameter name case in
         * #getParameterValue.
         */
        static create(
            opt_scheme?: string|null, opt_userInfo?: string|null,
            opt_domain?: string|null, opt_port?: number|null,
            opt_path?: string|null,
            opt_query?: string|ಠ_ಠ.clutz.goog.Uri.QueryData|null,
            opt_fragment?: string|null,
            opt_ignoreCase?: boolean): ಠ_ಠ.clutz.goog.Uri;
        /**
         * Checks whether two URIs have the same domain.
         * @param uri1String First URI string.
         * @param uri2String Second URI string.
         */
        static haveSameDomain(uri1String: string, uri2String: string): boolean;
        /**
         * Creates a uri from the string form.  Basically an alias of new
         * goog.Uri(). If a Uri object is passed to parse then it will return a
         * clone of the object.
         * @param uri Raw URI string or instance of Uri object.
         * @param opt_ignoreCase Whether to ignore the case of parameter names
         * in #getParameterValue.
         */
        static parse(uri: any, opt_ignoreCase?: boolean): ಠ_ಠ.clutz.goog.Uri;
        /**
         * If true, we preserve the type of query parameters set
         * programmatically.
         *
         * This means that if you set a parameter to a boolean, and then call
         * getParameterValue, you will get a boolean back.
         *
         * If false, we will coerce parameters to strings, just as they would
         * appear in real URIs.
         *
         * TODO(nicksantos): Remove this once people have time to fix all tests.
         */
        static preserveParameterTypesCompatibilityFlag: boolean;
        /**
         * Removes dot segments in given path component, as described in
         * RFC 3986, section 5.2.4.
         * @param path A non-empty path component.
         */
        static removeDotSegments(path: string): string;
        /**
         * Resolves a relative Uri against a base Uri, accepting both strings
         * and Uri objects.
         * @param base Base Uri.
         * @param rel Relative Uri.
         */
        static resolve(base: any, rel: any): ಠ_ಠ.clutz.goog.Uri;
    }
    class Uri_Instance {
        private noStructuralTyping_: any;
        constructor(opt_uri?: any, opt_ignoreCase?: boolean);
        /**
         * Clones the URI instance.
         */
        clone(): ಠ_ಠ.clutz.goog.Uri;
        /**
         * Checks if this Uri has been marked as read only, and if so, throws an
         * error. This should be called whenever any modifying function is
         * called.
         */
        enforceReadOnly(): void;
        getDecodedQuery(): string;
        getDomain(): string;
        getEncodedQuery(): string;
        getFragment(): string;
        getIgnoreCase(): boolean;
        /**
         * Returns the first value for a given cgi parameter or undefined if the
         * given parameter name does not appear in the query string.
         * @param paramName Unescaped parameter name.
         */
        getParameterValue(paramName: string): string|undefined;
        /**
         * Returns the value<b>s</b> for a given cgi parameter as a list of
         * decoded query parameter values.
         * @param name The parameter to get values for.
         */
        getParameterValues(name: string): any[];
        getPath(): string;
        getPort(): number|null;
        getQuery(): string;
        /**
         * Returns the query data.
         */
        getQueryData(): ಠ_ಠ.clutz.goog.Uri.QueryData;
        getScheme(): string;
        getUserInfo(): string;
        hasDomain(): boolean;
        hasFragment(): boolean;
        hasPath(): boolean;
        hasPort(): boolean;
        hasQuery(): boolean;
        /**
         * Returns true if this has the same domain as that of uri2.
         * @param uri2 The URI object to compare to.
         */
        hasSameDomainAs(uri2: ಠ_ಠ.clutz.goog.Uri): boolean;
        hasScheme(): boolean;
        hasUserInfo(): boolean;
        isReadOnly(): boolean;
        /**
         * Adds a random parameter to the Uri.
         */
        makeUnique(): ಠ_ಠ.clutz.goog.Uri;
        /**
         * Removes the named query parameter.
         * @param key The parameter to remove.
         */
        removeParameter(key: string): ಠ_ಠ.clutz.goog.Uri;
        /**
         * Resolves the given relative URI (a goog.Uri object), using the URI
         * represented by this instance as the base URI.
         *
         * There are several kinds of relative URIs:<br>
         * 1. foo - replaces the last part of the path, the whole query and
         * fragment<br>
         * 2. /foo - replaces the the path, the query and fragment<br>
         * 3. //foo - replaces everything from the domain on.  foo is a domain
         * name<br>
         * 4. ?foo - replace the query and fragment<br>
         * 5. #foo - replace the fragment only
         *
         * Additionally, if relative URI has a non-empty path, all ".." and "."
         * segments will be resolved, as described in RFC 3986.
         * @param relativeUri The relative URI to resolve.
         */
        resolve(relativeUri: ಠ_ಠ.clutz.goog.Uri): ಠ_ಠ.clutz.goog.Uri;
        /**
         * Sets the domain.
         * @param newDomain New domain value.
         * @param opt_decode Optional param for whether to decode new value.
         */
        setDomain(newDomain: string, opt_decode?: boolean): ಠ_ಠ.clutz.goog.Uri;
        /**
         * Sets the URI fragment.
         * @param newFragment New fragment value.
         * @param opt_decode Optional param for whether to decode new value.
         */
        setFragment(newFragment: string, opt_decode?: boolean):
            ಠ_ಠ.clutz.goog.Uri;
        /**
         * Sets whether to ignore case.
         * NOTE: If there are already key/value pairs in the QueryData, and
         * ignoreCase_ is set to false, the keys will all be lower-cased.
         * @param ignoreCase whether this goog.Uri should ignore case.
         */
        setIgnoreCase(ignoreCase: boolean): ಠ_ಠ.clutz.goog.Uri;
        /**
         * Sets the value of the named query parameters, clearing previous
         * values for that key.
         * @param key The parameter to set.
         * @param value The new value.
         */
        setParameterValue(key: string, value: any): ಠ_ಠ.clutz.goog.Uri;
        /**
         * Sets the values of the named query parameters, clearing previous
         * values for that key.  Not new values will currently be moved to the
         * end of the query string.
         *
         * So, <code>goog.Uri.parse('foo?a=b&c=d&e=f').setParameterValues('c',
         * ['new'])
         * </code> yields <tt>foo?a=b&e=f&c=new</tt>.</p>
         * @param key The parameter to set.
         * @param values The new values. If values is a single string then it
         * will be treated as the sole value.
         */
        setParameterValues(key: string, values: any): ಠ_ಠ.clutz.goog.Uri;
        /**
         * Sets the path.
         * @param newPath New path value.
         * @param opt_decode Optional param for whether to decode new value.
         */
        setPath(newPath: string, opt_decode?: boolean): ಠ_ಠ.clutz.goog.Uri;
        /**
         * Sets the port number.
         * @param newPort Port number. Will be explicitly casted to a number.
         */
        setPort(newPort: any): ಠ_ಠ.clutz.goog.Uri;
        /**
         * Sets the URI query.
         * @param newQuery New query value.
         * @param opt_decode Optional param for whether to decode new value.
         */
        setQuery(newQuery: string, opt_decode?: boolean): ಠ_ಠ.clutz.goog.Uri;
        /**
         * Sets the query data.
         * @param queryData QueryData object.
         * @param opt_decode Optional param for whether to decode new value.
         * Applies only if queryData is a string.
         */
        setQueryData(
            queryData: ಠ_ಠ.clutz.goog.Uri.QueryData|null|string|undefined,
            opt_decode?: boolean): ಠ_ಠ.clutz.goog.Uri;
        /**
         * Sets whether Uri is read only. If this goog.Uri is read-only,
         * enforceReadOnly_ will be called at the start of any function that may
         * modify this Uri.
         * @param isReadOnly whether this goog.Uri should be read only.
         */
        setReadOnly(isReadOnly: boolean): ಠ_ಠ.clutz.goog.Uri;
        /**
         * Sets the scheme/protocol.
         * @param newScheme New scheme value.
         * @param opt_decode Optional param for whether to decode new value.
         */
        setScheme(newScheme: string, opt_decode?: boolean): ಠ_ಠ.clutz.goog.Uri;
        /**
         * Sets the userInfo.
         * @param newUserInfo New userInfo value.
         * @param opt_decode Optional param for whether to decode new value.
         */
        setUserInfo(newUserInfo: string, opt_decode?: boolean):
            ಠ_ಠ.clutz.goog.Uri;
        toString(): string;
    }
}
declare module 'goog:goog.Uri' {
    import alias = ಠ_ಠ.clutz.goog.Uri;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.Uri {
    /**
     * Class used to represent URI query parameters.  It is essentially a hash
     * of name-value pairs, though a name can be present more than once.
     *
     * Has the same interface as the collections in goog.structs.
     */
    class QueryData extends QueryData_Instance {
        /**
         * Creates a new query data instance from parallel arrays of parameter
         * names and values. Allows for duplicate parameter names. Throws an
         * error if the lengths of the arrays differ.
         * @param keys Parameter names.
         * @param values Parameter values.
         * @param opt_uri URI object that should have its cache invalidated when
         * this object updates.
         * @param opt_ignoreCase If true, ignore the case of the parameter name
         * in #get.
         */
        static createFromKeysValues(
            keys: string[], values: any[], opt_uri?: ಠ_ಠ.clutz.goog.Uri|null,
            opt_ignoreCase?: boolean): ಠ_ಠ.clutz.goog.Uri.QueryData;
        /**
         * Creates a new query data instance from a map of names and values.
         * @param map Map of string parameter names to parameter value. If
         * parameter value is an array, it is treated as if the key maps to each
         * individual value in the array.
         * @param opt_uri URI object that should have its cache invalidated when
         * this object updates.
         * @param opt_ignoreCase If true, ignore the case of the parameter name
         * in #get.
         */
        static createFromMap(
            map: GlobalObject, opt_uri?: ಠ_ಠ.clutz.goog.Uri|null,
            opt_ignoreCase?: boolean): ಠ_ಠ.clutz.goog.Uri.QueryData;
    }
    class QueryData_Instance {
        private noStructuralTyping_: any;
        /**
         * Class used to represent URI query parameters.  It is essentially a
         * hash of name-value pairs, though a name can be present more than
         * once.
         *
         * Has the same interface as the collections in goog.structs.
         * @param opt_query Optional encoded query string to parse into the
         * object.
         * @param opt_uri Optional uri object that should have its cache
         * invalidated when this object updates. Deprecated -- this is no longer
         * required.
         * @param opt_ignoreCase If true, ignore the case of the parameter name
         * in #get.
         */
        constructor(
            opt_query?: string|null, opt_uri?: ಠ_ಠ.clutz.goog.Uri|null,
            opt_ignoreCase?: boolean);
        /**
         * Adds a key value pair.
         * @param key Name.
         * @param value Value.
         */
        add(key: string, value: any): ಠ_ಠ.clutz.goog.Uri.QueryData;
        /**
         * Clears the parameters.
         */
        clear(): void;
        /**
         * Clone the query data instance.
         */
        clone(): ಠ_ಠ.clutz.goog.Uri.QueryData;
        /**
         * Whether there is a parameter with the given name
         * @param key The parameter name to check for.
         */
        containsKey(key: string): boolean;
        /**
         * Whether there is a parameter with the given value.
         * @param value The value to check for.
         */
        containsValue(value: any): boolean;
        /**
         * Extends a query data object with another query data or map like
         * object. This operates 'in-place', it does not create a new QueryData
         * object.
         * @param var_args The object from which key value pairs will be copied.
         */
        extend(...var_args: (null|GlobalObject|undefined)[]): void;
        /**
         * Removes all keys that are not in the provided list. (Modifies this
         * object.)
         * @param keys The desired keys.
         */
        filterKeys(keys: string[]|null): ಠ_ಠ.clutz.goog.Uri.QueryData;
        /**
         * Runs a callback on every key-value pair in the map, including
         * duplicate keys. This won't maintain original order when duplicate
         * keys are interspersed (like getKeys() / getValues()).
         * @param opt_scope The value of "this" inside f.
         */
        forEach<SCOPE = any>(
            f: (a: any, b: string, c: ಠ_ಠ.clutz.goog.Uri.QueryData) => any,
            opt_scope?: SCOPE): void;
        /**
         * Returns the first value associated with the key. If the query data
         * has no such key this will return undefined or the optional default.
         * @param key The name of the parameter to get the value for.
         * @param opt_default The default value to return if the query data has
         * no such key.
         */
        get(key: string, opt_default?: any): any;
        getCount(): number|null;
        /**
         * Returns all the keys of the parameters. If a key is used multiple
         * times it will be included multiple times in the returned array
         */
        getKeys(): string[];
        /**
         * Returns all the values of the parameters with the given name. If the
         * query data has no such key this will return an empty array. If no key
         * is given all values wil be returned.
         * @param opt_key The name of the parameter to get the values for.
         */
        getValues(opt_key?: string): any[];
        isEmpty(): boolean;
        /**
         * Removes all the params with the given key.
         * @param key Name.
         */
        remove(key: string): boolean;
        /**
         * Sets a key value pair and removes all other keys with the same value.
         * @param key Name.
         * @param value Value.
         */
        set(key: string, value: any): ಠ_ಠ.clutz.goog.Uri.QueryData;
        /**
         * Ignore case in parameter names.
         * NOTE: If there are already key/value pairs in the QueryData, and
         * ignoreCase_ is set to false, the keys will all be lower-cased.
         * @param ignoreCase whether this goog.Uri should ignore case.
         */
        setIgnoreCase(ignoreCase: boolean): void;
        /**
         * Sets the values for a key. If the key already exists, this will
         * override all of the existing values that correspond to the key.
         * @param key The key to set values for.
         * @param values The values to set.
         */
        setValues(key: string, values: any[]): void;
        toDecodedString(): string;
        toString(): string;
    }
}
declare module 'goog:goog.Uri.QueryData' {
    import alias = ಠ_ಠ.clutz.goog.Uri.QueryData;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.a11y.aria {
    /**
     * A map that contains mapping between an ARIA state and the default value
     * for it. Note that not all ARIA states have default values.
     */
    var DefaultStateValueMap_: {[key: string]: string | boolean | number}|null;
    /**
     * Asserts that the element has a role set if it's not an HTML element whose
     * semantics is well supported by most screen readers.
     * Only to be used internally by the ARIA library in goog.a11y.aria.*.
     * @param element The element to assert an ARIA role set.
     * @param allowedRoles The child roles of the roles.
     */
    function assertRoleIsSetInternalUtil(
        element: GlobalElement, allowedRoles: ArrayLike<string>): void;
    /**
     * Returns the activedescendant element for the input element by
     * using the activedescendant ARIA property of the given element.
     * @param element DOM node to get activedescendant element for.
     */
    function getActiveDescendant(element: GlobalElement): GlobalElement|null;
    /**
     * Gets the label of the given element.
     * @param element DOM node to get label from.
     */
    function getLabel(element: GlobalElement): string;
    /**
     * Gets role of an element.
     * @param element DOM element to get role of.
     */
    function getRole(element: GlobalElement): ಠ_ಠ.clutz.goog.a11y.aria.Role|
        null;
    /**
     * Gets value of specified state or property.
     * @param element DOM node to get state from.
     * @param stateName State name.
     */
    function getState(element: GlobalElement, stateName: string): string;
    /**
     * Gets the boolean value of an ARIA state/property.
     * @param element The element to get the ARIA state for.
     * @param stateName the ARIA state name.
     */
    function getStateBoolean(
        element: GlobalElement, stateName: string): boolean|null;
    /**
     * Gets the number value of an ARIA state/property.
     * @param element The element to get the ARIA state for.
     * @param stateName the ARIA state name.
     */
    function getStateNumber(element: GlobalElement, stateName: string): number|
        null;
    /**
     * Gets the string value of an ARIA state/property.
     * @param element The element to get the ARIA state for.
     * @param stateName the ARIA state name.
     */
    function getStateString(element: GlobalElement, stateName: string): string|
        null;
    /**
     * Gets array of strings value of the specified state or
     * property for the element.
     * Only to be used internally by the ARIA library in goog.a11y.aria.*.
     * @param element DOM node to get state from.
     * @param stateName State name.
     */
    function getStringArrayStateInternalUtil(
        element: GlobalElement,
        stateName: ಠ_ಠ.clutz.goog.a11y.aria.State): ArrayLike<string>;
    /**
     * Returns true if element has an ARIA state/property, false otherwise.
     * @param element The element to get the ARIA state for.
     * @param stateName the ARIA state name.
     */
    function hasState(element: GlobalElement, stateName: string): boolean;
    /**
     * Returns whether the element has a container ARIA role.
     * Container roles are ARIA roles that use the aria-activedescendant
     * property to manage their active descendants or children. See
     * {@link http://www.w3.org/TR/wai-aria/states_and_properties
     * #aria-activedescendant} for more information.
     */
    function isContainerRole(element: GlobalElement): boolean;
    /**
     * Removes role of an element.
     * @param element DOM element to remove the role from.
     */
    function removeRole(element: GlobalElement): void;
    /**
     * Remove the state or property for the element.
     * @param element DOM node where we set state.
     * @param stateName State name.
     */
    function removeState(
        element: GlobalElement,
        stateName: ಠ_ಠ.clutz.goog.a11y.aria.State): void;
    /**
     * Sets the activedescendant ARIA property value for an element.
     * If the activeElement is not null, it should have an id set.
     * @param element DOM node to set activedescendant ARIA property to.
     * @param activeElement DOM node being set as activedescendant.
     */
    function setActiveDescendant(
        element: GlobalElement, activeElement: GlobalElement|null): void;
    /**
     * Sets the label of the given element.
     * @param element DOM node to set label to.
     * @param label The label to set.
     */
    function setLabel(element: GlobalElement, label: string): void;
    /**
     * Sets the role of an element. If the roleName is
     * empty string or null, the role for the element is removed.
     * We encourage clients to call the goog.a11y.aria.removeRole
     * method instead of setting null and empty string values.
     * Special handling for this case is added to ensure
     * backword compatibility with existing code.
     * @param element DOM node to set role of.
     * @param roleName role name(s).
     */
    function setRole(element: GlobalElement, roleName: string): void;
    /**
     * Sets the state or property of an element.
     * @param element DOM node where we set state.
     * @param stateName State attribute being set. Automatically adds prefix
     * 'aria-' to the state name if the attribute is not an extra attribute.
     * @param value Value for the state attribute.
     */
    function setState(
        element: GlobalElement, stateName: string,
        value: string|boolean|number|string[]): void;
    /**
     * Toggles the ARIA attribute of an element.
     * Meant for attributes with a true/false value, but works with any
     * attribute. If the attribute does not have a true/false value, the
     * following rules apply: A not empty attribute will be removed. An empty
     * attribute will be set to true.
     * @param el DOM node for which to set attribute.
     * @param attr ARIA attribute being set. Automatically adds prefix 'aria-'
     * to the attribute name if the attribute is not an extra attribute.
     */
    function toggleState(el: GlobalElement, attr: string): void;
}
declare module 'goog:goog.a11y.aria' {
    import alias = ಠ_ಠ.clutz.goog.a11y.aria;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.a11y.aria {
    /**
     * Class that allows messages to be spoken by assistive technologies that
     * the user may have active.
     */
    class Announcer extends Announcer_Instance {}
    class Announcer_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance {
        /**
         * Class that allows messages to be spoken by assistive technologies
         * that the user may have active.
         * @param opt_domHelper DOM helper.
         */
        constructor(opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        disposeInternal(): void;
        /**
         * Announce a message to be read by any assistive technologies the user
         * may have active.
         * @param message The message to announce to screen readers.
         * @param opt_priority The priority of the message. Defaults to POLITE.
         */
        say(message: string,
            opt_priority?: ಠ_ಠ.clutz.goog.a11y.aria.LivePriority): void;
    }
}
declare module 'goog:goog.a11y.aria.Announcer' {
    import alias = ಠ_ಠ.clutz.goog.a11y.aria.Announcer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.a11y.aria {
    /**
     * ARIA state values for AutoCompleteValues.
     */
    type AutoCompleteValues = string&{clutzEnumBrand: never};
    var AutoCompleteValues: {
        BOTH: AutoCompleteValues,
        INLINE: AutoCompleteValues,
        LIST: AutoCompleteValues,
        NONE: AutoCompleteValues,
    };
}
declare module 'goog:goog.a11y.aria.AutoCompleteValues' {
    import alias = ಠ_ಠ.clutz.goog.a11y.aria.AutoCompleteValues;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.a11y.aria {
    /**
     * ARIA state values for CheckedValues.
     */
    type CheckedValues = string&{clutzEnumBrand: never};
    var CheckedValues: {
        FALSE: CheckedValues,
        MIXED: CheckedValues,
        TRUE: CheckedValues,
        UNDEFINED: CheckedValues,
    };
}
declare module 'goog:goog.a11y.aria.CheckedValues' {
    import alias = ಠ_ಠ.clutz.goog.a11y.aria.CheckedValues;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.a11y.aria {
    /**
     * ARIA state values for DropEffectValues.
     */
    type DropEffectValues = string&{clutzEnumBrand: never};
    var DropEffectValues: {
        COPY: DropEffectValues,
        EXECUTE: DropEffectValues,
        LINK: DropEffectValues,
        MOVE: DropEffectValues,
        NONE: DropEffectValues,
        POPUP: DropEffectValues,
    };
}
declare module 'goog:goog.a11y.aria.DropEffectValues' {
    import alias = ಠ_ಠ.clutz.goog.a11y.aria.DropEffectValues;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.a11y.aria {
    /**
     * ARIA state values for ExpandedValues.
     */
    type ExpandedValues = string&{clutzEnumBrand: never};
    var ExpandedValues: {
        FALSE: ExpandedValues,
        TRUE: ExpandedValues,
        UNDEFINED: ExpandedValues,
    };
}
declare module 'goog:goog.a11y.aria.ExpandedValues' {
    import alias = ಠ_ಠ.clutz.goog.a11y.aria.ExpandedValues;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.a11y.aria {
    /**
     * ARIA state values for GrabbedValues.
     */
    type GrabbedValues = string&{clutzEnumBrand: never};
    var GrabbedValues: {
        FALSE: GrabbedValues,
        TRUE: GrabbedValues,
        UNDEFINED: GrabbedValues,
    };
}
declare module 'goog:goog.a11y.aria.GrabbedValues' {
    import alias = ಠ_ಠ.clutz.goog.a11y.aria.GrabbedValues;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.a11y.aria {
    /**
     * ARIA state values for InvalidValues.
     */
    type InvalidValues = string&{clutzEnumBrand: never};
    var InvalidValues: {
        FALSE: InvalidValues,
        GRAMMAR: InvalidValues,
        SPELLING: InvalidValues,
        TRUE: InvalidValues,
    };
}
declare module 'goog:goog.a11y.aria.InvalidValues' {
    import alias = ಠ_ಠ.clutz.goog.a11y.aria.InvalidValues;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.a11y.aria {
    /**
     * ARIA state values for LivePriority.
     */
    type LivePriority = string&{clutzEnumBrand: never};
    var LivePriority: {
        ASSERTIVE: LivePriority,
        OFF: LivePriority,
        POLITE: LivePriority,
    };
}
declare module 'goog:goog.a11y.aria.LivePriority' {
    import alias = ಠ_ಠ.clutz.goog.a11y.aria.LivePriority;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.a11y.aria {
    /**
     * ARIA state values for OrientationValues.
     */
    type OrientationValues = string&{clutzEnumBrand: never};
    var OrientationValues: {
        HORIZONTAL: OrientationValues,
        VERTICAL: OrientationValues,
    };
}
declare module 'goog:goog.a11y.aria.OrientationValues' {
    import alias = ಠ_ಠ.clutz.goog.a11y.aria.OrientationValues;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.a11y.aria {
    /**
     * ARIA state values for PressedValues.
     */
    type PressedValues = string&{clutzEnumBrand: never};
    var PressedValues: {
        FALSE: PressedValues,
        MIXED: PressedValues,
        TRUE: PressedValues,
        UNDEFINED: PressedValues,
    };
}
declare module 'goog:goog.a11y.aria.PressedValues' {
    import alias = ಠ_ಠ.clutz.goog.a11y.aria.PressedValues;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.a11y.aria {
    /**
     * ARIA state values for RelevantValues.
     */
    type RelevantValues = string&{clutzEnumBrand: never};
    var RelevantValues: {
        ADDITIONS: RelevantValues,
        ALL: RelevantValues,
        REMOVALS: RelevantValues,
        TEXT: RelevantValues,
    };
}
declare module 'goog:goog.a11y.aria.RelevantValues' {
    import alias = ಠ_ಠ.clutz.goog.a11y.aria.RelevantValues;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.a11y.aria {
    /**
     * ARIA role values.
     */
    type Role = string&{clutzEnumBrand: never};
    var Role: {
        ALERT: Role,
        ALERTDIALOG: Role,
        APPLICATION: Role,
        ARTICLE: Role,
        BANNER: Role,
        BUTTON: Role,
        CHECKBOX: Role,
        COLUMNHEADER: Role,
        COMBOBOX: Role,
        COMPLEMENTARY: Role,
        CONTENTINFO: Role,
        DEFINITION: Role,
        DIALOG: Role,
        DIRECTORY: Role,
        DOCUMENT: Role,
        FORM: Role,
        GRID: Role,
        GRIDCELL: Role,
        GROUP: Role,
        HEADING: Role,
        IMG: Role,
        LINK: Role,
        LIST: Role,
        LISTBOX: Role,
        LISTITEM: Role,
        LOG: Role,
        MAIN: Role,
        MARQUEE: Role,
        MATH: Role,
        MENU: Role,
        MENUBAR: Role,
        MENU_ITEM: Role,
        MENU_ITEM_CHECKBOX: Role,
        MENU_ITEM_RADIO: Role,
        NAVIGATION: Role,
        NOTE: Role,
        OPTION: Role,
        PRESENTATION: Role,
        PROGRESSBAR: Role,
        RADIO: Role,
        RADIOGROUP: Role,
        REGION: Role,
        ROW: Role,
        ROWGROUP: Role,
        ROWHEADER: Role,
        SCROLLBAR: Role,
        SEARCH: Role,
        SEPARATOR: Role,
        SLIDER: Role,
        SPINBUTTON: Role,
        STATUS: Role,
        TAB: Role,
        TAB_LIST: Role,
        TAB_PANEL: Role,
        TEXTBOX: Role,
        TEXTINFO: Role,
        TIMER: Role,
        TOOLBAR: Role,
        TOOLTIP: Role,
        TREE: Role,
        TREEGRID: Role,
        TREEITEM: Role,
    };
}
declare module 'goog:goog.a11y.aria.Role' {
    import alias = ಠ_ಠ.clutz.goog.a11y.aria.Role;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.a11y.aria {
    /**
     * ARIA state values for SelectedValues.
     */
    type SelectedValues = string&{clutzEnumBrand: never};
    var SelectedValues: {
        FALSE: SelectedValues,
        TRUE: SelectedValues,
        UNDEFINED: SelectedValues,
    };
}
declare module 'goog:goog.a11y.aria.SelectedValues' {
    import alias = ಠ_ಠ.clutz.goog.a11y.aria.SelectedValues;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.a11y.aria {
    /**
     * ARIA state values for SortValues.
     */
    type SortValues = string&{clutzEnumBrand: never};
    var SortValues: {
        ASCENDING: SortValues,
        DESCENDING: SortValues,
        NONE: SortValues,
        OTHER: SortValues,
    };
}
declare module 'goog:goog.a11y.aria.SortValues' {
    import alias = ಠ_ಠ.clutz.goog.a11y.aria.SortValues;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.a11y.aria {
    /**
     * ARIA states and properties.
     */
    type State = string&{clutzEnumBrand: never};
    var State: {
        ACTIVEDESCENDANT: State,
        ATOMIC: State,
        AUTOCOMPLETE: State,
        BUSY: State,
        CHECKED: State,
        COLINDEX: State,
        CONTROLS: State,
        DESCRIBEDBY: State,
        DISABLED: State,
        DROPEFFECT: State,
        EXPANDED: State,
        FLOWTO: State,
        GRABBED: State,
        HASPOPUP: State,
        HIDDEN: State,
        INVALID: State,
        LABEL: State,
        LABELLEDBY: State,
        LEVEL: State,
        LIVE: State,
        MULTILINE: State,
        MULTISELECTABLE: State,
        ORIENTATION: State,
        OWNS: State,
        POSINSET: State,
        PRESSED: State,
        READONLY: State,
        RELEVANT: State,
        REQUIRED: State,
        ROWINDEX: State,
        SELECTED: State,
        SETSIZE: State,
        SORT: State,
        VALUEMAX: State,
        VALUEMIN: State,
        VALUENOW: State,
        VALUETEXT: State,
    };
}
declare module 'goog:goog.a11y.aria.State' {
    import alias = ಠ_ಠ.clutz.goog.a11y.aria.State;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.a11y.aria.datatables {
    /**
     * A method that creates a map that contains mapping between an ARIA state
     * and the default value for it. Note that not all ARIA states have default
     * values.
     */
    function getDefaultValuesMap(): {[key: string]: string | boolean | number};
}
declare module 'goog:goog.a11y.aria.datatables' {
    import alias = ಠ_ಠ.clutz.goog.a11y.aria.datatables;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.array {
    var ASSUME_NATIVE_FUNCTIONS: boolean;
    /**
     * Inserts a value into a sorted array. The array is not modified if the
     * value is already present.
     * @param array The array to modify.
     * @param value The object to insert.
     * @param opt_compareFn Optional comparison function by which the array is
     * ordered. Should take 2 arguments to compare, and return a negative
     * number, zero, or a positive number depending on whether the first
     * argument is less than, equal to, or greater than the second.
     */
    function binaryInsert<VALUE = any>(
        array: ArrayLike<VALUE>| null, value: VALUE,
        opt_compareFn?: (a: VALUE, b: VALUE) => number): boolean;
    /**
     * Removes a value from a sorted array.
     * @param array The array to modify.
     * @param value The object to remove.
     * @param opt_compareFn Optional comparison function by which the array is
     * ordered. Should take 2 arguments to compare, and return a negative
     * number, zero, or a positive number depending on whether the first
     * argument is less than, equal to, or greater than the second.
     */
    function binaryRemove<VALUE = any>(
        array: ArrayLike<VALUE>, value: VALUE,
        opt_compareFn?: (a: VALUE, b: VALUE) => number): boolean;
    /**
     * Searches the specified array for the specified target using the binary
     * search algorithm.  If no opt_compareFn is specified, elements are
     * compared using <code>goog.array.defaultCompare</code>, which compares the
     * elements using the built in < and > operators.  This will produce the
     * expected behavior for homogeneous arrays of String(s) and Number(s). The
     * array specified <b>must</b> be sorted in ascending order (as defined by
     * the comparison function).  If the array is not sorted, results are
     * undefined. If the array contains multiple instances of the specified
     * target value, any of these instances may be found.
     *
     * Runtime: O(log n)
     * @param arr The array to be searched.
     * @param target The sought value.
     * @param opt_compareFn Optional comparison function by which the array is
     * ordered. Should take 2 arguments to compare, and return a negative
     * number, zero, or a positive number depending on whether the first
     * argument is less than, equal to, or greater than the second.
     */
    function binarySearch<TARGET = any, VALUE = any>(
        arr: ArrayLike<VALUE>| null, target: TARGET,
        opt_compareFn?: (a: TARGET, b: VALUE) => number): number;
    /**
     * Selects an index in the specified array using the binary search
     * algorithm. The evaluator receives an element and determines whether the
     * desired index is before, at, or after it.  The evaluator must be
     * consistent (formally, goog.array.map(goog.array.map(arr, evaluator,
     * opt_obj), goog.math.sign) must be monotonically non-increasing).
     *
     * Runtime: O(log n)
     * @param arr The array to be searched.
     * @param evaluator Evaluator function that receives 3 arguments (the
     * element, the index and the array). Should return a negative number, zero,
     * or a positive number depending on whether the desired index is before,
     * at, or after the element passed to it.
     * @param opt_obj The object to be used as the value of 'this' within
     * evaluator.
     */
    function binarySelect<THIS = any, VALUE = any>(
        arr: ArrayLike<VALUE>| null,
        evaluator: (this: THIS, a: VALUE, b: number, c: any) => number,
        opt_obj: THIS): number;
    function binarySelect<VALUE = any>(
        arr: ArrayLike<VALUE>| null,
        evaluator: (a: VALUE, b: number, c: any) => number): number;
    /**
     * Splits an array into disjoint buckets according to a splitting function.
     * @param array The array.
     * @param sorter Function to call for every element.  This takes 3 arguments
     * (the element, the index and the array) and must return a valid object key
     * (a string, number, etc), or undefined, if that object should not be
     * placed in a bucket.
     * @param opt_obj The object to be used as the value of 'this' within
     * sorter.
     */
    function bucket<T = any, S = any>(
        array: ArrayLike<T>| null,
        sorter: (this: S, a: T, b: number, c: ArrayLike<T>) => string,
        opt_obj: S): {[key: string]: T[]};
    function bucket<T = any>(
        array: ArrayLike<T>| null,
        sorter: (a: T, b: number, c: ArrayLike<T>) =>
            string): {[key: string]: T[]};
    function bucket<T = any, S = any>(
        array: ArrayLike<T>| null,
        sorter: (this: S, a: T, b: number, c: ArrayLike<T>) => number,
        opt_obj: S): {[key: number]: T[]};
    function bucket<T = any>(
        array: ArrayLike<T>| null,
        sorter: (a: T, b: number, c: ArrayLike<T>) =>
            number): {[key: number]: T[]};
    /**
     * Clears the array.
     * @param arr Array or array like object to clear.
     */
    function clear(arr: ArrayLike<any>|null): void;
    /**
     * Does a shallow copy of an array.
     * @param arr Array or array-like object to clone.
     */
    function clone<T = any>(a: ArrayLike<T>| null | string): T[];
    /**
     * 3-way array compare function.
     * @param arr1 The first array to compare.
     * @param arr2 The second array to compare.
     * @param opt_compareFn Optional comparison function by which the array is
     * to be ordered. Should take 2 arguments to compare, and return a negative
     * number, zero, or a positive number depending on whether the first
     * argument is less than, equal to, or greater than the second.
     */
    function compare3<VALUE = any>(
        arr1: ArrayLike<VALUE>, arr2: ArrayLike<VALUE>,
        opt_compareFn?: (a: VALUE, b: VALUE) => number): number;
    /**
     * Returns a new array that is the result of joining the arguments.  If
     * arrays are passed then their items are added, however, if non-arrays are
     * passed they will be added to the return array as is.
     *
     * Note that ArrayLike objects will be added as is, rather than having their
     * items added.
     *
     * goog.array.concat([1, 2], [3, 4]) -> [1, 2, 3, 4]
     * goog.array.concat(0, [1, 2]) -> [0, 1, 2]
     * goog.array.concat([1, 2], null) -> [1, 2, null]
     *
     * There is bug in all current versions of IE (6, 7 and 8) where arrays
     * created in an iframe become corrupted soon (not immediately) after the
     * iframe is destroyed. This is common if loading data via
     * goog.net.IframeIo, for example. This corruption only affects the concat
     * method which will start throwing Catastrophic Errors (#-2147418113).
     *
     * See http://endoflow.com/scratch/corrupted-arrays.html for a test case.
     *
     * Internally goog.array should use this, so that all methods will continue
     * to work on these broken array objects.
     * @param var_args Items to concatenate.  Arrays will have each item added,
     * while primitives and objects will be added as is.
     */
    function concat(...var_args: any[]): any[];
    /**
     * Maps each element of the input array into zero or more elements of the
     * output array.
     * @param arr Array or array like object over which to iterate.
     * @param f The function to call for every element. This function takes 3
     * arguments (the element, the index and the array) and should return an
     * array. The result will be used to extend a new array.
     * @param opt_obj The object to be used as the value of 'this' within f.
     */
    function concatMap<THIS = any, VALUE = any, RESULT = any>(
        arr: ArrayLike<VALUE>| string,
        f: (this: THIS, a: VALUE, b: number, c: any) => RESULT[],
        opt_obj: THIS): RESULT[];
    function concatMap<VALUE = any, RESULT = any>(
        arr: ArrayLike<VALUE>| string,
        f: (a: VALUE, b: number, c: any) => RESULT[]): RESULT[];
    /**
     * Whether the array contains the given object.
     * @param arr The array to test for the presence of the element.
     * @param obj The object for which to test.
     */
    function contains(arr: ArrayLike<any>|null|string, obj: any): boolean;
    /**
     * Returns a new array of elements from arr, based on the indexes of
     * elements provided by index_arr. For example, the result of index copying
     * ['a', 'b', 'c'] with index_arr [1,0,0,2] is ['b', 'a', 'a', 'c'].
     * @param arr The array to get a indexed copy from.
     * @param index_arr An array of indexes to get from arr.
     */
    function copyByIndex<T = any>(
        arr: ArrayLike<T>, index_arr: ArrayLike<number>): T[];
    /**
     * Counts the array elements that fulfill the predicate, i.e. for which the
     * callback function returns true. Skips holes in the array.
     * @param arr Array or array like object over which to iterate.
     * @param f The function to call for every element. Takes 3 arguments (the
     * element, the index and the array).
     * @param opt_obj The object to be used as the value of 'this' within f.
     */
    function count<T = any, S = any>(
        arr: ArrayLike<T>| string,
        f: (this: S, a: T, b: number, c: any) => boolean): number;
    function count<T = any>(
        arr: ArrayLike<T>| string,
        f: (a: T, b: number, c: any) => boolean): number;
    /**
     * Compares its two arguments for order, using the built in < and >
     * operators.
     * @param a The first object to be compared.
     * @param b The second object to be compared.
     */
    function defaultCompare<VALUE = any>(a: VALUE, b: VALUE): number;
    /**
     * Compares its two arguments for equality, using the built in === operator.
     * @param a The first object to compare.
     * @param b The second object to compare.
     */
    function defaultCompareEquality(a: any, b: any): boolean;
    /**
     * Compares two arrays for equality. Two arrays are considered equal if they
     * have the same length and their corresponding elements are equal according
     * to the comparison function.
     * @param arr1 The first array to compare.
     * @param arr2 The second array to compare.
     * @param opt_equalsFn Optional comparison function. Should take 2 arguments
     * to compare, and return true if the arguments are equal. Defaults to
     * {@link goog.array.defaultCompareEquality} which compares the elements
     * using the built-in '===' operator.
     */
    function equals(
        arr1: ArrayLike<any>|null, arr2: ArrayLike<any>|null,
        opt_equalsFn?: (...a: any[]) => any): boolean;
    /**
     * Call f for each element of an array. If all calls return true, every()
     * returns true. If any call returns false, every() returns false and
     * does not continue to check the remaining elements.
     *
     * See {@link http://tinyurl.com/developer-mozilla-org-array-every}
     * @param arr Array or array like object over which to iterate.
     * @param f The function to call for for every element. This function takes
     * 3 arguments (the element, the index and the array) and should return a
     * boolean.
     * @param opt_obj The object to be used as the value of 'this' within f.
     */
    function every<T = any, S = any>(
        arr: ArrayLike<T>| null | string,
        f: ((this: S, a: T, b: number, c: any) => boolean) | null,
        opt_obj: S): boolean;
    function every<T = any>(
        arr: ArrayLike<T>| null | string,
        f: ((a: T, b: number, c: any) => boolean) | null): boolean;
    /**
     * Extends an array with another array, element, or "array like" object.
     * This function operates 'in-place', it does not create a new Array.
     *
     * Example:
     * var a = [];
     * goog.array.extend(a, [0, 1]);
     * a; // [0, 1]
     * goog.array.extend(a, 2);
     * a; // [0, 1, 2]
     * @param arr1 The array to modify.
     * @param var_args The elements or arrays of elements to add to arr1.
     */
    function extend<VALUE = any>(
        arr1: VALUE[] | null,
        ...var_args: (ArrayLike<VALUE>|null|VALUE|undefined)[]): void;
    /**
     * Calls a function for each element in an array, and if the function
     * returns true adds the element to a new array.
     *
     * See {@link http://tinyurl.com/developer-mozilla-org-array-filter}
     * @param arr Array or array like object over which to iterate.
     * @param f The function to call for every element. This function takes 3
     * arguments (the element, the index and the array) and must return a
     * Boolean. If the return value is true the element is added to the result
     * array. If it is false the element is not included.
     * @param obj The object to be used as the value of 'this' within f.
     */
    function filter<T = any, S = any>(
        arr: ArrayLike<T>| null | string,
        f: ((a: T, b: number, c: any) => boolean) | null, obj: S): T[];
    /**
     * Calls a function for each element in an array, and if the function
     * returns true adds the element to a new array.
     *
     * See {@link http://tinyurl.com/developer-mozilla-org-array-filter}
     * @param arr Array or array like object over which to iterate.
     * @param f The function to call for every element. This function takes 3
     * arguments (the element, the index and the array) and must return a
     * Boolean. If the return value is true the element is added to the result
     * array. If it is false the element is not included.
     */
    function filter<T = any>(
        arr: ArrayLike<T>| null | string,
        f: ((a: T, b: number, c: any) => boolean) | null): T[];
    /**
     * Search an array for the first element that satisfies a given condition
     * and return that element.
     * @param arr Array or array like object over which to iterate.
     * @param f The function to call for every element. This function takes 3
     * arguments (the element, the index and the array) and should return a
     * boolean.
     * @param opt_obj An optional "this" context for the function.
     */
    function find<T = any, S = any>(
        arr: ArrayLike<T>| null | string,
        f: ((this: S, a: T, b: number, c: any) => boolean) | null,
        opt_obj: S): T|null;
    function find<T = any>(
        arr: ArrayLike<T>| null | string,
        f: ((a: T, b: number, c: any) => boolean) | null): T|null;
    /**
     * Search an array for the first element that satisfies a given condition
     * and return its index.
     * @param arr Array or array like object over which to iterate.
     * @param f The function to call for every element. This function takes 3
     * arguments (the element, the index and the array) and should return a
     * boolean.
     * @param opt_obj An optional "this" context for the function.
     */
    function findIndex<T = any, S = any>(
        arr: ArrayLike<T>| null | string,
        f: ((this: S, a: T, b: number, c: any) => boolean) | null,
        opt_obj: S): number;
    function findIndex<T = any>(
        arr: ArrayLike<T>| null | string,
        f: ((a: T, b: number, c: any) => boolean) | null): number;
    /**
     * Search an array (in reverse order) for the last element that satisfies a
     * given condition and return its index.
     * @param arr Array or array like object over which to iterate.
     * @param f The function to call for every element. This function takes 3
     * arguments (the element, the index and the array) and should return a
     * boolean.
     * @param opt_obj An optional "this" context for the function.
     */
    function findIndexRight<T = any, S = any>(
        arr: ArrayLike<T>| null | string,
        f: ((this: S, a: T, b: number, c: any) => boolean) | null,
        opt_obj: S): number;
    function findIndexRight<T = any>(
        arr: ArrayLike<T>| null | string,
        f: ((a: T, b: number, c: any) => boolean) | null): number;
    /**
     * Search an array (in reverse order) for the last element that satisfies a
     * given condition and return that element.
     * @param arr Array or array like object over which to iterate.
     * @param f The function to call for every element. This function takes 3
     * arguments (the element, the index and the array) and should return a
     * boolean.
     * @param opt_obj An optional "this" context for the function.
     */
    function findRight<T = any, S = any>(
        arr: ArrayLike<T>| null | string,
        f: ((this: S, a: T, b: number, c: any) => boolean) | null,
        opt_obj: S): T|null;
    function findRight<T = any>(
        arr: ArrayLike<T>| null | string,
        f: ((a: T, b: number, c: any) => boolean) | null): T|null;
    /**
     * Returns an array consisting of every argument with all arrays
     * expanded in-place recursively.
     * @param var_args The values to flatten.
     */
    function flatten(...var_args: any[]): any[];
    /**
     * Calls a function for each element in an array. Skips holes in the array.
     * See {@link http://tinyurl.com/developer-mozilla-org-array-foreach}
     * @param arr Array or array like object over which to iterate.
     * @param f The function to call for every element. This function takes 3
     * arguments (the element, the index and the array). The return value is
     * ignored.
     * @param obj The object to be used as the value of 'this' within f.
     */
    function forEach<T = any, S = any>(
        this: S, a: ArrayLike<T>| null | string,
        b: ((a: T, b: number, c: any) => any) | null, c: S): any;
    /**
     * Calls a function for each element in an array. Skips holes in the array.
     * See {@link http://tinyurl.com/developer-mozilla-org-array-foreach}
     * @param arr Array or array like object over which to iterate.
     * @param f The function to call for every element. This function takes 3
     * arguments (the element, the index and the array). The return value is
     * ignored.
     */
    function forEach<T = any>(
        a: ArrayLike<T>| null | string,
        b: ((a: T, b: number, c: any) => any) | null): any;
    /**
     * Calls a function for each element in an array, starting from the last
     * element rather than the first.
     * @param arr Array or array like object over which to iterate.
     * @param f The function to call for every element. This function takes 3
     * arguments (the element, the index and the array). The return value is
     * ignored.
     * @param obj The object to be used as the value of 'this' within f.
     */
    function forEachRight<T = any, S = any>(
        arr: ArrayLike<T>| null | string,
        f: ((this: S, a: T, b: number, c: any) => any) | null, obj: S): void;
    /**
     * Calls a function for each element in an array, starting from the last
     * element rather than the first.
     * @param arr Array or array like object over which to iterate.
     * @param f The function to call for every element. This function takes 3
     * arguments (the element, the index and the array). The return value is
     * ignored.
     */
    function forEachRight<T = any>(
        arr: ArrayLike<T>| null | string,
        f: ((a: T, b: number, c: any) => any) | null): void;
    /**
     * Returns the index of the first element of an array with a specified
     * value, or -1 if the element is not present in the array.
     *
     * See {@link http://tinyurl.com/developer-mozilla-org-array-indexof}
     * @param arr The array to be searched.
     * @param obj The object for which we are searching.
     * @param opt_fromIndex The index at which to start the search. If omitted
     * the search starts at index 0.
     */
    function indexOf<T = any>(
        a: ArrayLike<T>| null | string, b: T, c?: number): number;
    /**
     * Pushes an item into an array, if it's not already in the array.
     * @param arr Array into which to insert the item.
     * @param obj Value to add.
     */
    function insert<T = any>(arr: T[] | null, obj: T): void;
    /**
     * Inserts at the given index of the array, all elements of another array.
     * @param arr The array to modify.
     * @param elementsToAdd The array of elements to add.
     * @param opt_i The index at which to insert the object. If omitted, treated
     * as 0. A negative index is counted from the end of the array.
     */
    function insertArrayAt(
        arr: ArrayLike<any>|null, elementsToAdd: ArrayLike<any>|null,
        opt_i?: number): void;
    /**
     * Inserts an object at the given index of the array.
     * @param arr The array to modify.
     * @param obj The object to insert.
     * @param opt_i The index at which to insert the object. If omitted, treated
     * as 0. A negative index is counted from the end of the array.
     */
    function insertAt<T=any>(arr: ArrayLike<T>, obj: T, opt_i?: number): void;
    /**
     * Inserts an object into an array before a specified object.
     * @param arr The array to modify.
     * @param obj The object to insert.
     * @param opt_obj2 The object before which obj should be inserted. If obj2
     * is omitted or not found, obj is inserted at the end of the array.
     */
    function insertBefore<T = any>(arr: T[] | null, obj: T, opt_obj2?: T): void;
    /**
     * Compares its two arguments for inverse order, using the built in < and >
     * operators.
     * @param a The first object to be compared.
     * @param b The second object to be compared.
     */
    function inverseDefaultCompare<VALUE = any>(a: VALUE, b: VALUE): number;
    /**
     * Whether the array is empty.
     * @param arr The array to test.
     */
    function isEmpty(arr: ArrayLike<any>|null|string): boolean;
    /**
     * Tells if the array is sorted.
     * @param arr The array.
     * @param opt_compareFn Function to compare the array elements. Should take
     * 2 arguments to compare, and return a negative number, zero, or a positive
     * number depending on whether the first argument is less than, equal to, or
     * greater than the second.
     * @param opt_strict If true no equal elements are allowed.
     */
    function isSorted<T = any>(
        arr: ArrayLike<T>, opt_compareFn?: ((a: T, b: T) => number) | null,
        opt_strict?: boolean): boolean;
    /**
     * Returns a new array that contains the contents of all the arrays passed.
     */
    function join<T = any>(...var_args: (T[]|undefined)[]): T[];
    /**
     * Returns the last element in an array without removing it.
     * Same as goog.array.peek.
     * @param array The array.
     */
    function last<T = any>(a: ArrayLike<T>| null | string): T;
    /**
     * Returns the index of the last element of an array with a specified value,
     * or -1 if the element is not present in the array.
     *
     * See {@link http://tinyurl.com/developer-mozilla-org-array-lastindexof}
     * @param arr The array to be searched.
     * @param obj The object for which we are searching.
     * @param opt_fromIndex The index at which to start the search. If omitted
     * the search starts at the end of the array.
     */
    function lastIndexOf<T = any>(
        a: ArrayLike<T>| string, b: T, c?: number | null): number;
    /**
     * Calls a function for each element in an array and inserts the result into
     * a new array.
     *
     * See {@link http://tinyurl.com/developer-mozilla-org-array-map}
     * @param arr Array or array like object over which to iterate.
     * @param f The function to call for every element. This function takes 3
     * arguments (the element, the index and the array) and should return
     * something. The result will be inserted into a new array.
     * @param opt_obj The object to be used as the value of 'this' within f.
     */
    function map<THIS = any, VALUE = any, RESULT = any>(
        arr: ArrayLike<VALUE>| null | string,
        f: (this: THIS, a: VALUE, b: number, c: any) => RESULT,
        opt_obj?: THIS): RESULT[];
    function map<THIS = any, VALUE = any, RESULT = any>(
        arr: ArrayLike<VALUE>| null | string,
        f: (a: VALUE, b: number, c: any) => RESULT): RESULT[];
    /**
     * Moves one item of an array to a new position keeping the order of the
     * rest of the items. Example use case: keeping a list of JavaScript objects
     * synchronized with the corresponding list of DOM elements after one of the
     * elements has been dragged to a new position.
     * @param arr The array to modify.
     * @param fromIndex Index of the item to move between 0 and {@code
     * arr.length - 1}.
     * @param toIndex Target index between 0 and {@code arr.length - 1}.
     */
    function moveItem(
        arr: ArrayLike<any>, fromIndex: number, toIndex: number): void;
    /**
     * Returns the last element in an array without removing it.
     * Same as goog.array.last.
     * @param array The array.
     */
    function peek<T = any>(array: ArrayLike<T>| null | string): T;
    /**
     * Creates a range of numbers in an arithmetic progression.
     *
     * Range takes 1, 2, or 3 arguments:
     * <pre>
     * range(5) is the same as range(0, 5, 1) and produces [0, 1, 2, 3, 4]
     * range(2, 5) is the same as range(2, 5, 1) and produces [2, 3, 4]
     * range(-2, -5, -1) produces [-2, -3, -4]
     * range(-2, -5, 1) produces [], since stepping by 1 wouldn't ever reach -5.
     * </pre>
     * @param startOrEnd The starting value of the range if an end argument is
     * provided. Otherwise, the start value is 0, and this is the end value.
     * @param opt_end The optional end value of the range.
     * @param opt_step The step size between range values. Defaults to 1 if
     * opt_step is undefined or 0.
     */
    function range(startOrEnd: number, opt_end?: number, opt_step?: number):
        ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Passes every element of an array into a function and accumulates the
     * result.
     *
     * See {@link http://tinyurl.com/developer-mozilla-org-array-reduce}
     *
     * For example:
     * var a = [1, 2, 3, 4];
     * goog.array.reduce(a, function(r, v, i, arr) {return r + v;}, 0);
     * returns 10
     * @param arr Array or array like object over which to iterate.
     * @param f The function to call for every element. This function takes 4
     * arguments (the function's previous result or the initial value, the value
     * of the current array element, the current array index, and the array
     * itself) function(previousValue, currentValue, index, array).
     * @param val The initial value to pass into the function on the first call.
     * @param opt_obj The object to be used as the value of 'this' within f.
     */
    function reduce<T = any, S = any, R = any>(
        arr: ArrayLike<T>| null | string,
        f: (this: S, a: R, b: T, c: number, d: any) => R, val: R,
        opt_obj: S): R;
    function reduce<T = any, R = any>(
        arr: ArrayLike<T>| null | string,
        f: (a: R, b: T, c: number, d: any) => R, val: R): R;
    /**
     * Passes every element of an array into a function and accumulates the
     * result, starting from the last element and working towards the first.
     *
     * See {@link http://tinyurl.com/developer-mozilla-org-array-reduceright}
     *
     * For example:
     * var a = ['a', 'b', 'c'];
     * goog.array.reduceRight(a, function(r, v, i, arr) {return r + v;}, '');
     * returns 'cba'
     * @param arr Array or array like object over which to iterate.
     * @param f The function to call for every element. This function takes 4
     * arguments (the function's previous result or the initial value, the value
     * of the current array element, the current array index, and the array
     * itself) function(previousValue, currentValue, index, array).
     * @param val The initial value to pass into the function on the first call.
     * @param opt_obj The object to be used as the value of 'this' within f.
     */
    function reduceRight<T = any, S = any, R = any>(
        arr: ArrayLike<T>| null | string,
        f: ((this: S, a: R, b: T, c: number, d: any) => R) | null, val: R,
        opt_obj: S): R;
    function reduceRight<T = any, S = any, R = any>(
        arr: ArrayLike<T>| null | string,
        f: ((a: R, b: T, c: number, d: any) => R) | null, val: R): R;
    /**
     * Removes the first occurrence of a particular value from an array.
     * @param arr Array from which to remove value.
     * @param obj Object to remove.
     */
    function remove<T = any>(arr: ArrayLike<T>| null, obj: T): boolean;
    /**
     * Removes all values that satisfy the given condition.
     * @param arr Array or array like object over which to iterate.
     * @param f The function to call for every element. This function takes 3
     * arguments (the element, the index and the array) and should return a
     * boolean.
     * @param opt_obj An optional "this" context for the function.
     */
    function removeAllIf<T = any, S = any>(
        arr: ArrayLike<T>| null,
        f: ((this: S, a: T, b: number, c: any) => boolean) | null,
        opt_obj: S): number;
    function removeAllIf<T = any>(
        arr: ArrayLike<T>| null,
        f: ((a: T, b: number, c: any) => boolean) | null): number;
    /**
     * Removes from an array the element at index i
     * @param arr Array or array like object from which to remove value.
     * @param i The index to remove.
     */
    function removeAt(arr: ArrayLike<any>|null, i: number): boolean;
    /**
     * Removes all duplicates from an array (retaining only the first
     * occurrence of each array element).  This function modifies the
     * array in place and doesn't change the order of the non-duplicate items.
     *
     * For objects, duplicates are identified as having the same unique ID as
     * defined by {@link goog.getUid}.
     *
     * Alternatively you can specify a custom hash function that returns a
     * unique value for each item in the array it should consider unique.
     *
     * Runtime: N,
     * Worstcase space: 2N (no dupes)
     * @param arr The array from which to remove duplicates.
     * @param opt_rv An optional array in which to return the results, instead
     * of performing the removal inplace.  If specified, the original array will
     * remain unchanged.
     * @param opt_hashFn An optional function to use to apply to every item in
     * the array. This function should return a unique value for each item in
     * the array it should consider unique.
     */
    function removeDuplicates<T = any>(
        arr: ArrayLike<T>| null, opt_rv?: any[] | null,
        opt_hashFn?: (a: T) => string): void;
    /**
     * Removes the first value that satisfies the given condition.
     * @param arr Array or array like object over which to iterate.
     * @param f The function to call for every element. This function takes 3
     * arguments (the element, the index and the array) and should return a
     * boolean.
     * @param opt_obj An optional "this" context for the function.
     */
    function removeIf<T = any, S = any>(
        arr: ArrayLike<T>| null,
        f: ((this: S, a: T, b: number, c: any) => boolean) | null,
        opt_obj: S): boolean;
    function removeIf<T = any>(
        arr: ArrayLike<T>| null,
        f: ((a: T, b: number, c: any) => boolean) | null): boolean;
    /**
     * Removes the last occurrence of a particular value from an array.
     * @param arr Array from which to remove value.
     * @param obj Object to remove.
     */
    function removeLast<T = any>(arr: ArrayLike<T>, obj: T): boolean;
    /**
     * Returns an array consisting of the given value repeated N times.
     * @param value The value to repeat.
     * @param n The repeat count.
     */
    function repeat<VALUE = any>(value: VALUE, n: number): VALUE[];
    /**
     * Rotates an array in-place. After calling this method, the element at
     * index i will be the element previously at index (i - n) %
     * array.length, for all values of i between 0 and array.length - 1,
     * inclusive.
     *
     * For example, suppose list comprises [t, a, n, k, s]. After invoking
     * rotate(array, 1) (or rotate(array, -4)), array will comprise [s, t, a, n,
     * k].
     * @param array The array to rotate.
     * @param n The amount to rotate.
     */
    function rotate<T = any>(array: T[], n: number): T[];
    /**
     * Shuffles the values in the specified array using the Fisher-Yates
     * in-place shuffle (also known as the Knuth Shuffle). By default, calls
     * Math.random() and so resets the state of that random number generator.
     * Similarly, may reset the state of the any other specified random number
     * generator.
     *
     * Runtime: O(n)
     * @param arr The array to be shuffled.
     * @param opt_randFn Optional random function to use for shuffling. Takes no
     * arguments, and returns a random number on the interval [0, 1). Defaults
     * to Math.random() using JavaScript's built-in Math library.
     */
    function shuffle(arr: any[], opt_randFn?: () => number): void;
    /**
     * Returns a new array from a segment of an array. This is a generic version
     * of Array slice. This means that it might work on other objects similar to
     * arrays, such as the arguments object.
     * @param arr The array from which to copy a segment.
     * @param start The index of the first element to copy.
     * @param opt_end The index after the last element to copy.
     */
    function slice<T = any>(
        arr: ArrayLike<T>| null | string, start: number, opt_end?: number): T[];
    /**
     * Calls f for each element of an array. If any call returns true, some()
     * returns true (without checking the remaining elements). If all calls
     * return false, some() returns false.
     *
     * See {@link http://tinyurl.com/developer-mozilla-org-array-some}
     * @param arr Array or array like object over which to iterate.
     * @param f The function to call for for every element. This function takes
     * 3 arguments (the element, the index and the array) and should return a
     * boolean.
     * @param opt_obj The object to be used as the value of 'this' within f.
     */
    function some<T = any, S = any>(
        arr: ArrayLike<T>| null | string,
        f: ((a: T, b: number, c: any) => boolean) | null, opt_obj: S): boolean;
    function some<T = any>(
        arr: ArrayLike<T>| null | string,
        f: ((a: T, b: number, c: any) => boolean) | null): boolean;
    /**
     * Sorts the specified array into ascending order.  If no opt_compareFn is
     * specified, elements are compared using
     * <code>goog.array.defaultCompare</code>, which compares the elements using
     * the built in < and > operators.  This will produce the expected behavior
     * for homogeneous arrays of String(s) and Number(s), unlike the native
     * sort, but will give unpredictable results for heterogeneous lists of
     * strings and numbers with different numbers of digits.
     *
     * This sort is not guaranteed to be stable.
     *
     * Runtime: Same as <code>Array.prototype.sort</code>
     * @param arr The array to be sorted.
     * @param opt_compareFn Optional comparison function by which the array is
     * to be ordered. Should take 2 arguments to compare, and return a negative
     * number, zero, or a positive number depending on whether the first
     * argument is less than, equal to, or greater than the second.
     */
    function sort<T = any>(
        arr: T[] | null, opt_compareFn?: ((a: T, b: T) => number) | null): void;
    /**
     * Sort the specified array into ascending order based on item keys
     * returned by the specified key function.
     * If no opt_compareFn is specified, the keys are compared in ascending
     * order using <code>goog.array.defaultCompare</code>.
     *
     * Runtime: O(S(f(n)), where S is runtime of <code>goog.array.sort</code>
     * and f(n) is runtime of the key function.
     * @param arr The array to be sorted.
     * @param keyFn Function taking array element and returning a key used for
     * sorting this element.
     * @param opt_compareFn Optional comparison function by which the keys are
     * to be ordered. Should take 2 arguments to compare, and return a negative
     * number, zero, or a positive number depending on whether the first
     * argument is less than, equal to, or greater than the second.
     */
    function sortByKey<T = any, K = any>(
        arr: T[] | null, keyFn: (a: T) => K,
        opt_compareFn?: ((a: K, b: K) => number) | null): void;
    /**
     * Sorts an array of objects by the specified object key and compare
     * function. If no compare function is provided, the key values are
     * compared in ascending order using <code>goog.array.defaultCompare</code>.
     * This won't work for keys that get renamed by the compiler. So use
     * {'foo': 1, 'bar': 2} rather than {foo: 1, bar: 2}.
     * @param arr An array of objects to sort.
     * @param key The object key to sort by.
     * @param opt_compareFn The function to use to compare key values.
     */
    function sortObjectsByKey(
        arr: (GlobalObject|null)[]|null, key: string,
        opt_compareFn?: (...a: any[]) => any): void;
    /**
     * Adds or removes elements from an array. This is a generic version of
     * Array splice. This means that it might work on other objects similar to
     * arrays, such as the arguments object.
     * @param arr The array to modify.
     * @param index The index at which to start changing the array. If not
     * defined, treated as 0.
     * @param howMany How many elements to remove (0 means no removal. A value
     * below 0 is treated as zero and so is any other non number. Numbers are
     * floored).
     * @param var_args Optional, additional elements to insert into the array.
     */
    function splice<T = any>(
        arr: ArrayLike<T>| null, index: number | undefined, howMany: number,
        ...var_args: (T|undefined)[]): T[];
    /**
     * Sorts the specified array into ascending order in a stable way.  If no
     * opt_compareFn is specified, elements are compared using
     * <code>goog.array.defaultCompare</code>, which compares the elements using
     * the built in < and > operators.  This will produce the expected behavior
     * for homogeneous arrays of String(s) and Number(s).
     *
     * Runtime: Same as <code>Array.prototype.sort</code>, plus an additional
     * O(n) overhead of copying the array twice.
     * @param arr The array to be sorted.
     * @param opt_compareFn Optional comparison function by which the array is
     * to be ordered. Should take 2 arguments to compare, and return a negative
     * number, zero, or a positive number depending on whether the first
     * argument is less than, equal to, or greater than the second.
     */
    function stableSort<T = any>(
        arr: T[] | null, opt_compareFn?: ((a: T, b: T) => number) | null): void;
    /**
     * Converts an object to an array.
     * @param object The object to convert to an array.
     */
    function toArray<T = any>(object: ArrayLike<T>| null | string): T[];
    /**
     * Creates a new object built from the provided array and the key-generation
     * function.
     * @param arr Array or array like object over which to iterate whose
     * elements will be the values in the new object.
     * @param keyFunc The function to call for every element. This function
     * takes 3 arguments (the element, the index and the array) and should
     * return a string that will be used as the key for the element in the new
     * object. If the function returns the same key for more than one element,
     * the value for that key is implementation-defined.
     * @param opt_obj The object to be used as the value of 'this' within
     * keyFunc.
     */
    function toObject<T = any, S = any>(
        arr: ArrayLike<T>| null,
        keyFunc: ((this: S, a: T, b: number, c: any) => string) | null,
        opt_obj: S): {[key: string]: T};
    function toObject<T = any>(
        arr: ArrayLike<T>| null,
        keyFunc: ((a: T, b: number, c: any) => string) |
            null): {[key: string]: T};
    /**
     * Creates a new array for which the element at position i is an array of
     * the ith element of the provided arrays.  The returned array will only be
     * as long as the shortest array provided; additional values are ignored.
     * For example, the result of zipping [1, 2] and [3, 4, 5] is [[1,3], [2,
     * 4]].
     *
     * This is similar to the zip() function in Python.  See {@link
     * http://docs.python.org/library/functions.html#zip}
     * @param var_args Arrays to be combined.
     */
    function zip(...var_args: (ArrayLike<any>|undefined)[]): any[][];
}
declare module 'goog:goog.array' {
    import alias = ಠ_ಠ.clutz.goog.array;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.asserts {
    /**
     * The default error handler.
     * @param e The exception to be handled.
     */
    function DEFAULT_ERROR_HANDLER(e: ಠ_ಠ.clutz.goog.asserts.AssertionError):
        any;
    var ENABLE_ASSERTS: boolean;
    /**
     * Checks if the condition evaluates to true if goog.asserts.ENABLE_ASSERTS
     * is true.
     * @param condition The condition to check.
     * @param opt_message Error message in case of failure.
     * @param var_args The items to substitute into the failure message.
     */
    function assert<T = any>(
        condition: T, opt_message?: string, ...var_args: any[]): T;
    /**
     * Checks if the value is an Array if goog.asserts.ENABLE_ASSERTS is true.
     * @param value The value to check.
     * @param opt_message Error message in case of failure.
     * @param var_args The items to substitute into the failure message.
     */
    function assertArray(
        value: any, opt_message?: string, ...var_args: any[]): any[];
    /**
     * Checks if the value is a boolean if goog.asserts.ENABLE_ASSERTS is true.
     * @param value The value to check.
     * @param opt_message Error message in case of failure.
     * @param var_args The items to substitute into the failure message.
     */
    function assertBoolean(
        value: any, opt_message?: string, ...var_args: any[]): boolean;
    /**
     * Checks if the value is a DOM Element if goog.asserts.ENABLE_ASSERTS is
     * true.
     * @param value The value to check.
     * @param opt_message Error message in case of failure.
     * @param var_args The items to substitute into the failure message.
     */
    function assertElement(
        value: any, opt_message?: string, ...var_args: any[]): GlobalElement;
    /**
     * Checks whether the value is a finite number, if
     * goog.asserts.ENABLE_ASSERTS is true.
     * @param value The value to check.
     * @param opt_message Error message in case of failure.
     * @param var_args The items to substitute into the failure message.
     */
    function assertFinite(
        value: any, opt_message?: string, ...var_args: any[]): number;
    /**
     * Checks if the value is a function if goog.asserts.ENABLE_ASSERTS is true.
     * @param value The value to check.
     * @param opt_message Error message in case of failure.
     * @param var_args The items to substitute into the failure message.
     */
    function assertFunction(
        value: any, opt_message?: string, ...var_args: any[]): (...a: any[]) =>
        any;
    /**
     * Checks if the value is an instance of the user-defined type if
     * goog.asserts.ENABLE_ASSERTS is true.
     *
     * The compiler may tighten the type returned by this function.
     * @param value The value to check.
     * @param type A user-defined constructor.
     * @param opt_message Error message in case of failure.
     * @param var_args The items to substitute into the failure message.
     */
    function assertInstanceof<T = any>(
        value: any, type: {new (...a: any[]): T}, opt_message?: string,
        ...var_args: any[]): T;
    /**
     * Checks if the value is a number if goog.asserts.ENABLE_ASSERTS is true.
     * @param value The value to check.
     * @param opt_message Error message in case of failure.
     * @param var_args The items to substitute into the failure message.
     */
    function assertNumber(
        value: any, opt_message?: string, ...var_args: any[]): number;
    /**
     * Checks if the value is an Object if goog.asserts.ENABLE_ASSERTS is true.
     * @param value The value to check.
     * @param opt_message Error message in case of failure.
     * @param var_args The items to substitute into the failure message.
     */
    function assertObject(
        value: any, opt_message?: string, ...var_args: any[]): GlobalObject;
    /**
     * Checks that no enumerable keys are present in Object.prototype. Such keys
     * would break most code that use {@code for (var ... in ...)} loops.
     */
    function assertObjectPrototypeIsIntact(): void;
    /**
     * Checks if the value is a string if goog.asserts.ENABLE_ASSERTS is true.
     * @param value The value to check.
     * @param opt_message Error message in case of failure.
     * @param var_args The items to substitute into the failure message.
     */
    function assertString(
        value: any, opt_message?: string, ...var_args: any[]): string;
    /**
     * Fails if goog.asserts.ENABLE_ASSERTS is true. This function is useful in
     * case when we want to add a check in the unreachable area like switch-case
     * statement:
     *
     * <pre>
     * switch(type) {
     * case FOO: doSomething(); break;
     * case BAR: doSomethingElse(); break;
     * default: goog.asserts.fail('Unrecognized type: ' + type);
     * // We have only 2 types - "default:" section is unreachable code.
     * }
     * </pre>
     * @param opt_message Error message in case of failure.
     * @param var_args The items to substitute into the failure message.
     */
    function fail(opt_message?: string, ...var_args: any[]): void;
    /**
     * Sets a custom error handler that can be used to customize the behavior of
     * assertion failures, for example by turning all assertion failures into
     * log messages.
     */
    function setErrorHandler(
        errorHandler: (a: ಠ_ಠ.clutz.goog.asserts.AssertionError) => any): void;
}
declare module 'goog:goog.asserts' {
    import alias = ಠ_ಠ.clutz.goog.asserts;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.asserts {
    /**
     * Error object for failed assertions.
     */
    class AssertionError extends AssertionError_Instance {}
    class AssertionError_Instance extends ಠ_ಠ.clutz.goog.debug.Error_Instance {
        /**
         * Error object for failed assertions.
         * @param messagePattern The pattern that was used to form message.
         * @param messageArgs The items to substitute into the pattern.
         */
        constructor(
            messagePattern: string,
            messageArgs: ಠ_ಠ.clutz.goog.uri.utils.QueryArray);
        /**
         * The message pattern used to format the error message. Error handlers
         * can use this to uniquely identify the assertion.
         */
        messagePattern: string;
        name: string;
    }
}
declare module 'goog:goog.asserts.AssertionError' {
    import alias = ಠ_ಠ.clutz.goog.asserts.AssertionError;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.async {
    /**
     * A delayed callback that pegs to the next animation frame
     * instead of a user configurable timeout. By design, this should have
     * the same interface as goog.async.Delay.
     *
     * Uses requestAnimationFrame and friends when available, but falls
     * back to a timeout of goog.async.AnimationDelay.TIMEOUT.
     *
     * For more on requestAnimationFrame and how you can use it to create
     * smoother animations, see:
     */
    class AnimationDelay<THIS = any> extends AnimationDelay_Instance<THIS> {
        /**
         * Default wait timeout for animations (in milliseconds).  Only used for
         * timed animation, which uses a timer (setTimeout) to schedule
         * animation.
         */
        static TIMEOUT: number;
    }
    class AnimationDelay_Instance<THIS = any> extends
        ಠ_ಠ.clutz.goog.Disposable_Instance {
        /**
         * A delayed callback that pegs to the next animation frame
         * instead of a user configurable timeout. By design, this should have
         * the same interface as goog.async.Delay.
         *
         * Uses requestAnimationFrame and friends when available, but falls
         * back to a timeout of goog.async.AnimationDelay.TIMEOUT.
         *
         * For more on requestAnimationFrame and how you can use it to create
         * smoother animations, see:
         * @param listener Function to call when the delay completes. Will be
         * passed the timestamp when it's called, in unix ms.
         * @param opt_window The window object to execute the delay in. Defaults
         * to the global object.
         * @param opt_handler The object scope to invoke the function in.
         */
        constructor(
            listener: PrivateType, opt_window?: Window|null,
            opt_handler?: THIS);
        disposeInternal(): void;
        /**
         * Fires delay's action even if timer has already gone off or has not
         * been started yet; guarantees action firing. Stops the delay timer.
         */
        fire(): void;
        /**
         * Fires delay's action only if timer is currently active. Stops the
         * delay timer.
         */
        fireIfActive(): void;
        isActive(): boolean;
        /**
         * Starts the delay timer. The provided listener function will be called
         * before the next animation frame.
         */
        start(): void;
        /**
         * Starts the delay timer if it's not already active.
         */
        startIfNotActive(): void;
        /**
         * Stops the delay timer if it is active. No action is taken if the
         * timer is not in use.
         */
        stop(): void;
    }
}
declare module 'goog:goog.async.AnimationDelay' {
    import alias = ಠ_ಠ.clutz.goog.async.AnimationDelay;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.async {
    /**
     * A ConditionalDelay object invokes the associated function after a
     * specified interval delay and checks its return value. If the function
     * returns
     * {@code true} the conditional delay is cancelled and {@see #onSuccess}
     * is called. Otherwise this object keeps to invoke the deferred function
     * until either it returns {@code true} or the timeout is exceeded. In the
     * latter case
     * the {@see #onFailure} method will be called.
     *
     * The interval duration and timeout can be specified each time the delay is
     * started. Calling start on an active delay will reset the timer.
     */
    class ConditionalDelay extends ConditionalDelay_Instance {}
    class ConditionalDelay_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance {
        /**
         * A ConditionalDelay object invokes the associated function after a
         * specified interval delay and checks its return value. If the function
         * returns
         * {@code true} the conditional delay is cancelled and {@see #onSuccess}
         * is called. Otherwise this object keeps to invoke the deferred
         * function until either it returns {@code true} or the timeout is
         * exceeded. In the latter case
         * the {@see #onFailure} method will be called.
         *
         * The interval duration and timeout can be specified each time the
         * delay is started. Calling start on an active delay will reset the
         * timer.
         * @param listener Function to call when the delay completes. Should
         * return a value that type-converts to {@code true} if the call
         * succeeded and this delay should be stopped.
         * @param opt_handler The object scope to invoke the function in.
         */
        constructor(listener: () => boolean, opt_handler?: GlobalObject|null);
        disposeInternal(): void;
        isActive(): boolean;
        isDone(): boolean;
        /**
         * Called when this delayed call is cancelled because the timeout has
         * been exceeded, and the listener has never returned {@code true}.
         * Designed for inheritance, should be overridden by subclasses or on
         * the instances if they care.
         */
        onFailure(): void;
        /**
         * Called when the listener has been successfully executed and returned
         * {@code true}. The {@see #isDone} method should return {@code true} by now.
         * Designed for inheritance, should be overridden by subclasses or on
         * the instances if they care.
         */
        onSuccess(): void;
        /**
         * Starts the delay timer. The provided listener function will be called
         * repeatedly after the specified interval until the function returns
         * {@code true} or the timeout is exceeded. Calling start on an active
         * timer will stop the timer first.
         * @param opt_interval The time interval between the function
         * invocations (in milliseconds). Default is 0.
         * @param opt_timeout The timeout interval (in milliseconds). Takes
         * precedence over the {@code opt_interval}, i.e. if the timeout is less
         * than the invocation interval, the function will be called when the
         * timeout is exceeded. A negative value means no timeout. Default is 0.
         */
        start(opt_interval?: number, opt_timeout?: number): void;
        /**
         * Stops the delay timer if it is active. No action is taken if the
         * timer is not in use.
         */
        stop(): void;
    }
}
declare module 'goog:goog.async.ConditionalDelay' {
    import alias = ಠ_ಠ.clutz.goog.async.ConditionalDelay;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.async {
    /**
     * Debouncer will perform a specified action exactly once for any sequence
     * of signals fired repeatedly so long as they are fired less than a
     * specified interval apart (in milliseconds). Whether it receives one
     * signal or multiple, it will always wait until a full interval has elapsed
     * since the last signal before performing the action.
     */
    class Debouncer<T = any> extends Debouncer_Instance<T> {}
    class Debouncer_Instance<T = any> extends
        ಠ_ಠ.clutz.goog.Disposable_Instance {
        /**
         * Debouncer will perform a specified action exactly once for any
         * sequence of signals fired repeatedly so long as they are fired less
         * than a specified interval apart (in milliseconds). Whether it
         * receives one signal or multiple, it will always wait until a full
         * interval has elapsed since the last signal before performing the
         * action.
         * @param listener Function to callback when the action is triggered.
         * @param interval Interval over which to debounce. The listener will
         * only be called after the full interval has elapsed since the last
         * signal.
         * @param opt_handler Object in whose scope to call the listener.
         */
        constructor(
            listener: (...a: any[]) => any, interval: number, opt_handler?: T);
        disposeInternal(): void;
        /**
         * Notifies the debouncer that the action has happened. It will debounce
         * the call so that the callback is only called after the last action in
         * a sequence of actions separated by periods less the interval
         * parameter passed to the constructor, passing the arguments from the
         * last call of this function into the debounced function.
         * @param var_args Arguments to pass on to the debounced function.
         */
        fire(...var_args: any[]): void;
        /**
         * Pauses the debouncer. All pending and future action callbacks will be
         * delayed until the debouncer is resumed. Pauses can be nested.
         */
        pause(): void;
        /**
         * Resumes the debouncer. If doing so drops the pausing count to zero,
         * pending action callbacks will be executed as soon as possible, but
         * still no sooner than an interval's delay after the previous call.
         * Future action callbacks will be executed as normal.
         */
        resume(): void;
        /**
         * Cancels any pending action callback. The debouncer can be restarted
         * by calling {@link #fire}.
         */
        stop(): void;
    }
}
declare module 'goog:goog.async.Debouncer' {
    import alias = ಠ_ಠ.clutz.goog.async.Debouncer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.async {
    /**
     * A Deferred represents the result of an asynchronous operation. A Deferred
     * instance has no result when it is created, and is "fired" (given an
     * initial result) by calling {@code callback} or {@code errback}.
     *
     * Once fired, the result is passed through a sequence of callback functions
     * registered with {@code addCallback} or {@code addErrback}. The functions
     * may mutate the result before it is passed to the next function in the
     * sequence.
     *
     * Callbacks and errbacks may be added at any time, including after the
     * Deferred has been "fired". If there are no pending actions in the
     * execution sequence of a fired Deferred, any new callback functions will
     * be called with the last computed result. Adding a callback function is
     * the only way to access the result of the Deferred.
     *
     * If a Deferred operation is canceled, an optional user-provided
     * cancellation function is invoked which may perform any special cleanup,
     * followed by firing the Deferred's errback sequence with a {@code
     * CanceledError}. If the Deferred has already fired, cancellation is
     * ignored.
     *
     * Deferreds may be templated to a specific type they produce using generics
     * with syntax such as:
     *
     * /** @type {goog.async.Deferred<string>} *\
     * var d = new goog.async.Deferred();
     * // Compiler can infer that foo is a string.
     * d.addCallback(function(foo) {...});
     * d.callback('string');  // Checked to be passed a string
     *
     * Since deferreds are often used to produce different values across a
     * chain, the type information is not propagated across chains, but rather
     * only associated with specifically cast objects.
     */
    class Deferred<VALUE = any> extends Deferred_Instance<VALUE> {
        static LONG_STACK_TRACES: boolean;
        static STRICT_ERRORS: boolean;
        /**
         * Asserts that there are no pending deferred errors. If there are any
         * scheduled errors, one will be thrown immediately to make this
         * function fail.
         */
        static assertNoErrors(): void;
        /**
         * Creates a Deferred that has already been canceled.
         */
        static canceled(): ಠ_ಠ.clutz.goog.async.Deferred<any>;
        /**
         * Creates a Deferred that has an initial error result.
         * @param res The error result.
         */
        static fail(res: any): ಠ_ಠ.clutz.goog.async.Deferred<any>;
        /**
         * Creates a Deferred that fires when the given promise resolves.
         * Use only during migration to Promises.
         */
        static fromPromise<T = any>(promise: ಠ_ಠ.clutz.goog.Promise<T, any>):
            ಠ_ಠ.clutz.goog.async.Deferred<T>;
        /**
         * Creates a Deferred that has an initial result.
         * @param opt_result The result.
         */
        static succeed(opt_result?: any): ಠ_ಠ.clutz.goog.async.Deferred<any>;
        /**
         * Normalizes values that may or may not be Deferreds.
         *
         * If the input value is a Deferred, the Deferred is branched (so the
         * original execution sequence is not modified) and the input callback
         * added to the new branch. The branch is returned to the caller.
         *
         * If the input value is not a Deferred, the callback will be executed
         * immediately and an already firing Deferred will be returned to the
         * caller.
         *
         * In the following (contrived) example, if <code>isImmediate</code> is
         * true then 3 is alerted immediately, otherwise 6 is alerted after a
         * 2-second delay.
         *
         * <pre>
         * var value;
         * if (isImmediate) {
         * value = 3;
         * } else {
         * value = new goog.async.Deferred();
         * setTimeout(function() { value.callback(6); }, 2000);
         * }
         *
         * var d = goog.async.Deferred.when(value, alert);
         * </pre>
         * @param value Deferred or normal value to pass to the callback.
         * @param callback The callback to execute.
         * @param opt_scope An optional scope to call the callback in.
         */
        static when<T = any>(
            value: any, callback: (a?: any) => any,
            opt_scope?: T): ಠ_ಠ.clutz.goog.async.Deferred<any>;
    }
    class Deferred_Instance<VALUE = any> implements
        ಠ_ಠ.clutz.goog.Thenable<VALUE> {
        private noStructuralTyping_: any;
        /**
         * A Deferred represents the result of an asynchronous operation. A
         * Deferred instance has no result when it is created, and is "fired"
         * (given an initial result) by calling {@code callback} or {@code
         * errback}.
         *
         * Once fired, the result is passed through a sequence of callback
         * functions registered with {@code addCallback} or {@code addErrback}.
         * The functions may mutate the result before it is passed to the next
         * function in the sequence.
         *
         * Callbacks and errbacks may be added at any time, including after the
         * Deferred has been "fired". If there are no pending actions in the
         * execution sequence of a fired Deferred, any new callback functions
         * will be called with the last computed result. Adding a callback
         * function is the only way to access the result of the Deferred.
         *
         * If a Deferred operation is canceled, an optional user-provided
         * cancellation function is invoked which may perform any special
         * cleanup, followed by firing the Deferred's errback sequence with a
         * {@code CanceledError}. If the Deferred has already fired,
         * cancellation is ignored.
         *
         * Deferreds may be templated to a specific type they produce using
         * generics with syntax such as:
         *
         * /** @type {goog.async.Deferred<string>} *\
         * var d = new goog.async.Deferred();
         * // Compiler can infer that foo is a string.
         * d.addCallback(function(foo) {...});
         * d.callback('string');  // Checked to be passed a string
         *
         * Since deferreds are often used to produce different values across a
         * chain, the type information is not propagated across chains, but
         * rather only associated with specifically cast objects.
         * @param opt_onCancelFunction A function that will be called if the
         * Deferred is canceled. If provided, this function runs before the
         * Deferred is fired with a {@code CanceledError}.
         * @param opt_defaultScope The default object context to call callbacks
         * and errbacks in.
         */
        constructor(
            opt_onCancelFunction?: PrivateType|null,
            opt_defaultScope?: GlobalObject|null);
        /**
         * Registers one function as both a callback and errback.
         * @param f The function to be called on any result.
         * @param opt_scope An optional scope to call the function in.
         */
        addBoth<T = any>(f: (a?: any) => any, opt_scope?: T):
            ಠ_ಠ.clutz.goog.async.Deferred<any>;
        /**
         * Register a callback function to be called with a successful result.
         * If no value is returned by the callback function, the result value is
         * unchanged. If a new value is returned, it becomes the Deferred result
         * and will be passed to the next callback in the execution sequence.
         *
         * If the function throws an error, the error becomes the new result and
         * will be passed to the next errback in the execution chain.
         *
         * If the function returns a Deferred, the execution sequence will be
         * blocked until that Deferred fires. Its result will be passed to the
         * next callback (or errback if it is an error result) in this
         * Deferred's execution sequence.
         * @param cb The function to be called with a successful result.
         * @param opt_scope An optional scope to call the callback in.
         */
        addCallback<T = any>(cb: (a: VALUE) => any, opt_scope?: T):
            ಠ_ಠ.clutz.goog.async.Deferred<any>;
        /**
         * Registers a callback function and an errback function at the same
         * position in the execution sequence. Only one of these functions will
         * execute, depending on the error state during the execution sequence.
         *
         * NOTE: This is not equivalent to {@code
         * def.addCallback().addErrback()}! If the callback is invoked, the
         * errback will be skipped, and vice versa.
         * @param cb The function to be called on a successful result.
         * @param eb The function to be called on an unsuccessful result.
         * @param opt_scope An optional scope to call the functions in.
         */
        addCallbacks<T = any>(
            cb: ((a: VALUE) => any)|null, eb: ((a?: any) => any)|null,
            opt_scope?: T): ಠ_ಠ.clutz.goog.async.Deferred<any>;
        /**
         * Register a callback function to be called with an error result. If no
         * value is returned by the function, the error result is unchanged. If
         * a new error value is returned or thrown, that error becomes the
         * Deferred result and will be passed to the next errback in the
         * execution sequence.
         *
         * If the errback function handles the error by returning a non-error
         * value, that result will be passed to the next normal callback in the
         * sequence.
         *
         * If the function returns a Deferred, the execution sequence will be
         * blocked until that Deferred fires. Its result will be passed to the
         * next callback (or errback if it is an error result) in this
         * Deferred's execution sequence.
         * @param eb The function to be called on an unsuccessful result.
         * @param opt_scope An optional scope to call the errback in.
         */
        addErrback<T = any>(eb: (a?: any) => any, opt_scope?: T):
            ಠ_ಠ.clutz.goog.async.Deferred<VALUE>;
        /**
         * Like addBoth, but propagates uncaught exceptions in the errback.
         * @param f The function to be called on any result.
         * @param opt_scope An optional scope to call the function in.
         */
        addFinally<T = any>(f: (a?: any) => any, opt_scope?: T):
            ಠ_ಠ.clutz.goog.async.Deferred<VALUE>;
        /**
         * Makes this Deferred wait for another Deferred's execution sequence to
         * complete before continuing.
         *
         * This is equivalent to adding a callback that returns {@code
         * otherDeferred}, but doesn't prevent additional callbacks from being
         * added to
         * {@code otherDeferred}.
         * @param otherDeferred The Deferred to wait for.
         */
        awaitDeferred(otherDeferred: ಠ_ಠ.clutz.goog.async.Deferred<any>|
                      ಠ_ಠ.clutz.goog.Thenable<any>):
            ಠ_ಠ.clutz.goog.async.Deferred<any>;
        /**
         * Creates a branch off this Deferred's execution sequence, and returns
         * it as a new Deferred. The branched Deferred's starting result will be
         * shared with the parent at the point of the branch, even if further
         * callbacks are added to the parent.
         *
         * All branches at the same stage in the execution sequence will receive
         * the same starting value.
         * @param opt_propagateCancel If cancel() is called on every child
         * branch created with opt_propagateCancel, the parent will be canceled
         * as well.
         */
        branch(opt_propagateCancel?: boolean):
            ಠ_ಠ.clutz.goog.async.Deferred<VALUE>;
        /**
         * Fire the execution sequence for this Deferred by passing the starting
         * result to the first registered callback.
         * @param opt_result The starting result.
         */
        callback(opt_result?: VALUE): void;
        /**
         * Cancels a Deferred that has not yet been fired, or is blocked on
         * another deferred operation. If this Deferred is waiting for a
         * blocking Deferred to fire, the blocking Deferred will also be
         * canceled.
         *
         * If this Deferred was created by calling branch() on a parent Deferred
         * with opt_propagateCancel set to true, the parent may also be
         * canceled. If opt_deepCancel is set, cancel() will be called on the
         * parent (as well as any other ancestors if the parent is also a
         * branch). If one or more branches were created with
         * opt_propagateCancel set to true, the parent will be canceled if
         * cancel() is called on all of those branches.
         * @param opt_deepCancel If true, cancels this Deferred's parent even if
         * cancel() hasn't been called on some of the parent's branches. Has no
         * effect on a branch without opt_propagateCancel set to true.
         */
        cancel(opt_deepCancel?: boolean): void;
        /**
         * Links another Deferred to the end of this Deferred's execution
         * sequence. The result of this execution sequence will be passed as the
         * starting result for the chained Deferred, invoking either its first
         * callback or errback.
         * @param otherDeferred The Deferred to chain.
         */
        chainDeferred(otherDeferred: ಠ_ಠ.clutz.goog.async.Deferred<any>):
            ಠ_ಠ.clutz.goog.async.Deferred<any>;
        /**
         * Fire the execution sequence for this Deferred by passing the starting
         * error result to the first registered errback.
         * @param opt_result The starting error.
         */
        errback(opt_result?: any): void;
        hasFired(): boolean;
        isError(res: any): boolean;
        /**
         * Implements {@see goog.Thenable} for seamless integration with
         * {@see goog.Promise}.
         * Deferred results are mutable and may represent multiple values over
         * their lifetime. Calling {@code then} on a Deferred returns a Promise
         * with the result of the Deferred at that point in its callback chain.
         * Note that if the Deferred result is never mutated, and only
         * {@code then} calls are made, the Deferred will behave like a Promise.
         */
        then<TResult1 = VALUE, TResult2 = any>(
            onfulfilled?: ((value: VALUE) => TResult1 | PromiseLike<TResult1>)|
            undefined|null,
            onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>)|
            undefined|null): PromiseLike<TResult1|TResult2>;
        then<THIS, TResult1 = VALUE, TResult2 = any>(
            onfulfilled:
                ((this: THIS, value: VALUE) => TResult1 |
                     PromiseLike<TResult1>)|undefined|null,
            onrejected:
                ((this: THIS, reason: any) => TResult2 | PromiseLike<TResult2>)|
            undefined|null,
            context: THIS): PromiseLike<TResult1|TResult2>;
    }
}
declare namespace ಠ_ಠ.clutz.goog.async.Deferred {
    class Error_ extends Error__Instance {}
    class Error__Instance {
        private noStructuralTyping_: any;
        /**
         * Resets the error throw timer.
         */
        resetTimer(): void;
        /**
         * Actually throws the error and removes it from the list of pending
         * deferred errors.
         */
        throwError(): void;
    }
}
declare module 'goog:goog.async.Deferred' {
    import alias = ಠ_ಠ.clutz.goog.async.Deferred;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.async.Deferred {
    /**
     * An error sub class that is used when a Deferred has already been called.
     */
    class AlreadyCalledError extends AlreadyCalledError_Instance {}
    class AlreadyCalledError_Instance extends
        ಠ_ಠ.clutz.goog.debug.Error_Instance {
        /**
         * An error sub class that is used when a Deferred has already been
         * called.
         * @param deferred The Deferred.
         */
        constructor(deferred: ಠ_ಠ.clutz.goog.async.Deferred<any>);
        /**
         * The Deferred that raised this error.
         */
        deferred: ಠ_ಠ.clutz.goog.async.Deferred<any>|null;
        message: string;
        name: string;
    }
}
declare module 'goog:goog.async.Deferred.AlreadyCalledError' {
    import alias = ಠ_ಠ.clutz.goog.async.Deferred.AlreadyCalledError;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.async.Deferred {
    /**
     * An error sub class that is used when a Deferred is canceled.
     */
    class CanceledError extends CanceledError_Instance {}
    class CanceledError_Instance extends ಠ_ಠ.clutz.goog.debug.Error_Instance {
        /**
         * An error sub class that is used when a Deferred is canceled.
         * @param deferred The Deferred object.
         */
        constructor(deferred: ಠ_ಠ.clutz.goog.async.Deferred<any>);
        /**
         * The Deferred that raised this error.
         */
        deferred: ಠ_ಠ.clutz.goog.async.Deferred<any>|null;
        message: string;
        name: string;
    }
}
declare module 'goog:goog.async.Deferred.CanceledError' {
    import alias = ಠ_ಠ.clutz.goog.async.Deferred.CanceledError;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.async {
    /**
     * Constructs an object that waits on the results of multiple asynchronous
     * operations and marshals the results. It is itself a
     * <code>Deferred</code>, and may have an execution sequence of callback
     * functions added to it. Each <code>DeferredList</code> instance is single
     * use and may be fired only once.
     *
     * The default behavior of a <code>DeferredList</code> is to wait for a
     * success or error result from every <code>Deferred</code> in its input
     * list. Once every result is available, the <code>DeferredList</code>'s
     * execution sequence is fired with a list of <code>[success, result]</code>
     * array pairs, where <code>success</code> is a boolean indicating whether
     * <code>result</code> was the product of a callback or errback. The list's
     * completion criteria and result list may be modified by setting one or
     * more of the boolean options documented below.
     *
     * <code>Deferred</code> instances passed into a <code>DeferredList</code>
     * are independent, and may have additional callbacks and errbacks added to
     * their execution sequences after they are passed as inputs to the list.
     */
    class DeferredList extends DeferredList_Instance {
        /**
         * Creates a <code>DeferredList</code> that gathers results from
         * multiple <code>Deferred</code> inputs. If all inputs succeed, the
         * callback is fired with the list of results as a flat array. If any
         * input fails, the list's errback is fired immediately with the
         * offending error, and all other pending inputs are canceled.
         * @param list The list of <code>Deferred</code> inputs to wait for.
         */
        static gatherResults(list: ಠ_ಠ.clutz.goog.async.Deferred<any>[]):
            ಠ_ಠ.clutz.goog.async.Deferred<any>;
    }
    class DeferredList_Instance extends ಠ_ಠ.clutz.goog.async.Deferred<any> {
        /**
         * Constructs an object that waits on the results of multiple
         * asynchronous operations and marshals the results. It is itself a
         * <code>Deferred</code>, and may have an execution sequence of callback
         * functions added to it. Each <code>DeferredList</code> instance is
         * single use and may be fired only once.
         *
         * The default behavior of a <code>DeferredList</code> is to wait for a
         * success or error result from every <code>Deferred</code> in its input
         * list. Once every result is available, the <code>DeferredList</code>'s
         * execution sequence is fired with a list of <code>[success,
         * result]</code> array pairs, where <code>success</code> is a boolean
         * indicating whether <code>result</code> was the product of a callback
         * or errback. The list's completion criteria and result list may be
         * modified by setting one or more of the boolean options documented
         * below.
         *
         * <code>Deferred</code> instances passed into a
         * <code>DeferredList</code> are independent, and may have additional
         * callbacks and errbacks added to their execution sequences after they
         * are passed as inputs to the list.
         * @param list An array of deferred results to wait for.
         * @param opt_fireOnOneCallback Whether to stop waiting as soon as one
         * input completes successfully. In this case, the
         * <code>DeferredList</code>'s callback chain will be called with a two
         * element array, <code>[index, result]</code>, where <code>index</code>
         * identifies which input <code>Deferred</code> produced the successful
         * <code>result</code>.
         * @param opt_fireOnOneErrback Whether to stop waiting as soon as one
         * input reports an error. The failing result is passed to the
         * <code>DeferredList</code>'s errback sequence.
         * @param opt_consumeErrors When true, any errors fired by a
         * <code>Deferred</code> in the input list will be captured and replaced
         * with a succeeding null result. Any callbacks added to the
         * <code>Deferred</code> after its use in the <code>DeferredList</code>
         * will receive null instead of the error.
         * @param opt_canceler A function that will be called if the <code>DeferredList</code> is canceled. @see goog.async.Deferred#cancel
         * @param opt_defaultScope The default scope to invoke callbacks or
         * errbacks in.
         */
        constructor(
            list: ಠ_ಠ.clutz.goog.async.Deferred<any>[],
            opt_fireOnOneCallback?: boolean, opt_fireOnOneErrback?: boolean,
            opt_consumeErrors?: boolean, opt_canceler?: PrivateType|null,
            opt_defaultScope?: GlobalObject|null);
        errback(res?: any): void;
    }
}
declare module 'goog:goog.async.DeferredList' {
    import alias = ಠ_ಠ.clutz.goog.async.DeferredList;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.async {
    /**
     * A Delay object invokes the associated function after a specified delay.
     * The interval duration can be specified once in the constructor, or can be
     * defined each time the delay is started. Calling start on an active delay
     * will reset the timer.
     */
    class Delay<THIS = any> extends Delay_Instance<THIS> {}
    class Delay_Instance<THIS = any> extends
        ಠ_ಠ.clutz.goog.Disposable_Instance {
        /**
         * A Delay object invokes the associated function after a specified
         * delay. The interval duration can be specified once in the
         * constructor, or can be defined each time the delay is started.
         * Calling start on an active delay will reset the timer.
         * @param listener Function to call when the delay completes.
         * @param opt_interval The default length of the invocation delay (in
         * milliseconds).
         * @param opt_handler The object scope to invoke the function in.
         */
        constructor(
            listener: () => any, opt_interval?: number, opt_handler?: THIS);
        /**
         * Disposes of the object, cancelling the timeout if it is still
         * outstanding and removing all object references.
         */
        disposeInternal(): void;
        /**
         * Fires delay's action even if timer has already gone off or has not
         * been started yet; guarantees action firing. Stops the delay timer.
         */
        fire(): void;
        /**
         * Fires delay's action only if timer is currently active. Stops the
         * delay timer.
         */
        fireIfActive(): void;
        isActive(): boolean;
        /**
         * Starts the delay timer. The provided listener function will be called
         * after the specified interval. Calling start on an active timer will
         * reset the delay interval.
         * @param opt_interval If specified, overrides the object's default
         * interval with this one (in milliseconds).
         */
        start(opt_interval?: number): void;
        /**
         * Starts the delay timer if it's not already active.
         * @param opt_interval If specified and the timer is not already active,
         * overrides the object's default interval with this one (in
         * milliseconds).
         */
        startIfNotActive(opt_interval?: number): void;
        /**
         * Stops the delay timer if it is active. No action is taken if the
         * timer is not in use.
         */
        stop(): void;
    }
}
declare module 'goog:goog.async.Delay' {
    import alias = ಠ_ಠ.clutz.goog.async.Delay;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.async {
    class FreeList<ITEM = any> extends FreeList_Instance<ITEM> {}
    class FreeList_Instance<ITEM = any> {
        private noStructuralTyping_: any;
        constructor(
            create: () => ITEM, reset: (a: ITEM) => void, limit: number);
        get(): ITEM;
        /**
         * Visible for testing.
         */
        occupants(): number;
        put(item: ITEM): void;
    }
}
declare module 'goog:goog.async.FreeList' {
    import alias = ಠ_ಠ.clutz.goog.async.FreeList;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.async {
    /**
     * Throttle will perform an action that is passed in no more than once
     * per interval (specified in milliseconds). If it gets multiple signals
     * to perform the action while it is waiting, it will only perform the
     * action once at the end of the interval.
     */
    class Throttle<T = any> extends Throttle_Instance<T> {}
    class Throttle_Instance<T = any> extends
        ಠ_ಠ.clutz.goog.Disposable_Instance {
        /**
         * Throttle will perform an action that is passed in no more than once
         * per interval (specified in milliseconds). If it gets multiple signals
         * to perform the action while it is waiting, it will only perform the
         * action once at the end of the interval.
         * @param listener Function to callback when the action is triggered.
         * @param interval Interval over which to throttle. The listener can
         * only be called once per interval.
         * @param opt_handler Object in whose scope to call the listener.
         */
        constructor(
            listener: (...a: any[]) => any, interval: number, opt_handler?: T);
        disposeInternal(): void;
        /**
         * Notifies the throttle that the action has happened. It will throttle
         * the call so that the callback is not called too often according to
         * the interval parameter passed to the constructor, passing the
         * arguments from the last call of this function into the throttled
         * function.
         * @param var_args Arguments to pass on to the throttled function.
         */
        fire(...var_args: any[]): void;
        /**
         * Pauses the throttle.  All pending and future action callbacks will be
         * delayed until the throttle is resumed.  Pauses can be nested.
         */
        pause(): void;
        /**
         * Resumes the throttle.  If doing so drops the pausing count to zero,
         * pending action callbacks will be executed as soon as possible, but
         * still no sooner than an interval's delay after the previous call.
         * Future action callbacks will be executed as normal.
         */
        resume(): void;
        /**
         * Cancels any pending action callback. The throttle can be restarted by
         * calling {@link #fire}.
         */
        stop(): void;
    }
}
declare module 'goog:goog.async.Throttle' {
    import alias = ಠ_ಠ.clutz.goog.async.Throttle;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.async {
    class WorkItem extends WorkItem_Instance {}
    class WorkItem_Instance {
        private noStructuralTyping_: any;
        fn: (() => any)|null;
        next: ಠ_ಠ.clutz.goog.async.WorkItem|null;
        scope?: GlobalObject|null;
        /**
         * Reset the work item so they don't prevent GC before reuse
         */
        reset(): void;
        set(fn: () => any, scope: GlobalObject|null|undefined): void;
    }
}
declare module 'goog:goog.async.WorkItem' {
    import alias = ಠ_ಠ.clutz.goog.async.WorkItem;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.async {
    /**
     * A low GC workqueue. The key elements of this design:
     * - avoids the need for goog.bind or equivalent by carrying scope
     * - avoids the need for array reallocation by using a linked list
     * - minimizes work entry objects allocation by recycling objects
     */
    class WorkQueue extends WorkQueue_Instance {
        static DEFAULT_MAX_UNUSED: number;
    }
    class WorkQueue_Instance {
        private noStructuralTyping_: any;
        workHead_: null|ಠ_ಠ.clutz.goog.async.WorkItem;
        workTail_: null|ಠ_ಠ.clutz.goog.async.WorkItem;
        add(fn: () => any, scope: GlobalObject|null|undefined): void;
        remove(): ಠ_ಠ.clutz.goog.async.WorkItem|null;
        returnUnused(item: ಠ_ಠ.clutz.goog.async.WorkItem|null): void;
    }
}
declare module 'goog:goog.async.WorkQueue' {
    import alias = ಠ_ಠ.clutz.goog.async.WorkQueue;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.async {
    /**
     * Fires the provided callbacks as soon as possible after the current JS
     * execution context. setTimeout(…, 0) takes at least 4ms when called from
     * within another setTimeout(…, 0) for legacy reasons.
     *
     * This will not schedule the callback as a microtask (i.e. a task that can
     * preempt user input or networking callbacks). It is meant to emulate what
     * setTimeout(_, 0) would do if it were not throttled. If you desire
     * microtask
     * behavior, use {@see goog.Promise} instead.
     * @param callback Callback function to fire as soon as possible.
     * @param opt_context Object in whose scope to call the listener.
     * @param opt_useSetImmediate Avoid the IE workaround that ensures
     * correctness at the cost of speed. See comments for details.
     */
    function nextTick<SCOPE = any>(
        callback: () => any, opt_context?: SCOPE,
        opt_useSetImmediate?: boolean): void;
}
declare module 'goog:goog.async.nextTick' {
    import alias = ಠ_ಠ.clutz.goog.async.nextTick;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.async {
    /**
     * Fires the provided callback just before the current callstack unwinds, or
     * as soon as possible after the current JS execution context.
     * @param opt_context Object to use as the "this value" when calling the
     * provided function.
     */
    function run<THIS = any>(callback: () => any, opt_context?: THIS): void;
}
declare module 'goog:goog.async.run' {
    import alias = ಠ_ಠ.clutz.goog.async.run;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.async {
    /**
     * Throw an item without interrupting the current execution context.  For
     * example, if processing a group of items in a loop, sometimes it is useful
     * to report an error while still allowing the rest of the batch to be
     * processed.
     */
    function throwException(exception: any): void;
}
declare module 'goog:goog.async.throwException' {
    import alias = ಠ_ಠ.clutz.goog.async.throwException;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.color {
    /**
     * Blend two colors together, using the specified factor to indicate the
     * weight given to the first color
     * @param rgb1 First color represented in rgb.
     * @param rgb2 Second color represented in rgb.
     * @param factor The weight to be given to rgb1 over rgb2. Values should be
     * in the range [0, 1]. If less than 0, factor will be set to 0. If greater
     * than 1, factor will be set to 1.
     */
    function blend(
        rgb1: ಠ_ಠ.clutz.goog.vec.Number|null,
        rgb2: ಠ_ಠ.clutz.goog.vec.Number|null,
        factor: number): ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Adds black to the specified color, darkening it
     * @param rgb rgb representation of the color.
     * @param factor Number in the range [0, 1]. 0 will do nothing, while 1 will
     * return black. If less than 0, factor will be set to 0. If greater than 1,
     * factor will be set to 1.
     */
    function darken(rgb: ಠ_ಠ.clutz.goog.vec.Number|null, factor: number):
        ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Converts a hex representation of a color to HSL.
     * @param hex Color to convert.
     */
    function hexToHsl(hex: string): ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Converts a hex representation of a color to HSV
     * @param hex Color to convert.
     */
    function hexToHsv(hex: string): ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Converts a hex representation of a color to RGB.
     * @param hexColor Color to convert.
     */
    function hexToRgb(hexColor: string): ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Converts a hex representation of a color to RGB.
     * @param hexColor Color to convert.
     */
    function hexToRgbStyle(hexColor: string): string;
    /**
     * Find the "best" (highest-contrast) of the suggested colors for the prime
     * color. Uses W3C formula for judging readability and visual accessibility:
     * http://www.w3.org/TR/AERT#color-contrast
     * @param prime Color represented as a rgb array.
     * @param suggestions Array of colors, each representing a rgb array.
     */
    function highContrast(
        prime: ಠ_ಠ.clutz.goog.vec.Number|null,
        suggestions: (ಠ_ಠ.clutz.goog.vec.Number|null)[]|
        null): ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Converts from an hsl array to a hex string
     * @param hsl hsl representation of the color.
     */
    function hslArrayToHex(hsl: ಠ_ಠ.clutz.goog.vec.Number|null): string;
    /**
     * Converts a color from HSL color space to RGB color space.
     * @param hsl hsl representation of the color.
     */
    function hslArrayToRgb(hsl: ಠ_ಠ.clutz.goog.vec.Number|
                           null): ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Calculates the Euclidean distance between two color vectors on an HSL
     * sphere. A demo of the sphere can be found at:
     * http://en.wikipedia.org/wiki/HSL_color_space
     * In short, a vector for color (H, S, L) in this system can be expressed as
     * (S*L'*cos(2*PI*H), S*L'*sin(2*PI*H), L), where L' = abs(L - 0.5), and we
     * simply calculate the 1-2 distance using these coordinates
     * @param hsl1 First color in hsl representation.
     * @param hsl2 Second color in hsl representation.
     */
    function hslDistance(
        hsl1: ಠ_ಠ.clutz.goog.vec.Number|null,
        hsl2: ಠ_ಠ.clutz.goog.vec.Number|null): number;
    /**
     * Converts from h,s,l values to a hex string
     * @param h Hue, in [0, 360].
     * @param s Saturation, in [0, 1].
     * @param l Luminosity, in [0, 1].
     */
    function hslToHex(h: number, s: number, l: number): string;
    /**
     * Converts a color from HSL color space to RGB color space.
     * Modified from {@link http://www.easyrgb.com/math.html}
     * @param h Hue, in [0, 360].
     * @param s Saturation, in [0, 1].
     * @param l Luminosity, in [0, 1].
     */
    function hslToRgb(
        h: number, s: number, l: number): ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Converts from an HSV array to a hex string
     * @param hsv hsv representation of the color.
     */
    function hsvArrayToHex(hsv: ಠ_ಠ.clutz.goog.vec.Number|null): string;
    /**
     * Converts an HSV triplet to an RGB array.
     * @param hsv hsv representation of the color.
     */
    function hsvArrayToRgb(hsv: ಠ_ಠ.clutz.goog.vec.Number|
                           null): ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Converts from h,s,v values to a hex string
     * @param h Hue, in [0, 360].
     * @param s Saturation, in [0, 1].
     * @param v Value, in [0, 255].
     */
    function hsvToHex(h: number, s: number, v: number): string;
    /**
     * Converts an HSV triplet to an RGB array.  V is brightness because b is
     * reserved for blue in RGB.
     * @param h Hue value in [0, 360].
     * @param s Saturation value in [0, 1].
     * @param brightness brightness in [0, 255].
     */
    function hsvToRgb(
        h: number, s: number, brightness: number): ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Determines if the given string can be parsed as a color.
     * {@see goog.color.parse}.
     * @param str Potential color string.
     */
    function isValidColor(str: string): boolean;
    /**
     * Adds white to the specified color, lightening it
     * @param rgb rgb representation of the color.
     * @param factor Number in the range [0, 1].  0 will do nothing, while 1
     * will return white. If less than 0, factor will be set to 0. If greater
     * than 1, factor will be set to 1.
     */
    function lighten(rgb: ಠ_ಠ.clutz.goog.vec.Number|null, factor: number):
        ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Normalize an hex representation of a color
     * @param hexColor an hex color string.
     */
    function normalizeHex(hexColor: string): string;
    /**
     * Parses a color out of a string.
     * @param str Color in some format.
     */
    function parse(str: string): {hex: string, type: string};
    /**
     * Parses red, green, blue components out of a valid rgb color string.
     * Throws Error if the color string is invalid.
     * @param str RGB representation of a color. {@see goog.color.isValidRgbColor_}.
     */
    function parseRgb(str: string): ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Takes a string a prepends a '#' sign if one doesn't exist.
     * Small helper method for use by goog.color and friends.
     * @param str String to check.
     */
    function prependHashIfNecessaryHelper(str: string): string;
    /**
     * Takes a hex value and prepends a zero if it's a single digit.
     * Small helper method for use by goog.color and friends.
     * @param hex Hex value to prepend if single digit.
     */
    function prependZeroIfNecessaryHelper(hex: string): string;
    /**
     * Converts a color from RGB to hex representation.
     * @param rgb rgb representation of the color.
     */
    function rgbArrayToHex(rgb: ಠ_ಠ.clutz.goog.vec.Number|null): string;
    /**
     * Converts a color from RGB color space to HSL color space.
     * @param rgb rgb representation of the color.
     */
    function rgbArrayToHsl(rgb: ಠ_ಠ.clutz.goog.vec.Number|
                           null): ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Converts from an array of RGB values to an array of HSV values.
     * @param rgb rgb representation of the color.
     */
    function rgbArrayToHsv(rgb: ಠ_ಠ.clutz.goog.vec.Number|
                           null): ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Converts a color from RGB to hex representation.
     * @param r Amount of red, int between 0 and 255.
     * @param g Amount of green, int between 0 and 255.
     * @param b Amount of blue, int between 0 and 255.
     */
    function rgbToHex(r: number, g: number, b: number): string;
    /**
     * Converts a color from RGB color space to HSL color space.
     * Modified from {@link http://en.wikipedia.org/wiki/HLS_color_space}.
     * @param r Value of red, in [0, 255].
     * @param g Value of green, in [0, 255].
     * @param b Value of blue, in [0, 255].
     */
    function rgbToHsl(
        r: number, g: number, b: number): ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Converts from RGB values to an array of HSV values.
     * @param red Red value in [0, 255].
     * @param green Green value in [0, 255].
     * @param blue Blue value in [0, 255].
     */
    function rgbToHsv(
        red: number, green: number, blue: number): ಠ_ಠ.clutz.goog.vec.Number;
}
declare module 'goog:goog.color' {
    import alias = ಠ_ಠ.clutz.goog.color;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.color {
    /**
     * HSL color representation. An array containing three elements [h, s, l]:
     * h (hue) must be an integer in [0, 360], cyclic.
     * s (saturation) must be a number in [0, 1].
     * l (lightness) must be a number in [0, 1].
     */
    type Hsl = ಠ_ಠ.clutz.goog.vec.Number|null;
}
declare module 'goog:goog.color.Hsl' {
    import alias = ಠ_ಠ.clutz.goog.color.Hsl;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.color {
    /**
     * HSV color representation. An array containing three elements [h, s, v]:
     * h (hue) must be an integer in [0, 360], cyclic.
     * s (saturation) must be a number in [0, 1].
     * v (value/brightness) must be an integer in [0, 255].
     */
    type Hsv = ಠ_ಠ.clutz.goog.vec.Number|null;
}
declare module 'goog:goog.color.Hsv' {
    import alias = ಠ_ಠ.clutz.goog.color.Hsv;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.color {
    /**
     * RGB color representation. An array containing three elements [r, g, b],
     * each an integer in [0, 255], representing the red, green, and blue
     * components of the color respectively.
     */
    type Rgb = ಠ_ಠ.clutz.goog.vec.Number|null;
}
declare module 'goog:goog.color.Rgb' {
    import alias = ಠ_ಠ.clutz.goog.color.Rgb;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.color.alpha {
    /**
     * Gets the alpha color part of an alpha hex color. For example, both
     * '#123A' and '#123456aa' return 'aa'. The result is always two characters
     * long.
     * @param colorWithAlpha The alpha hex color to get the hex color from.
     */
    function extractAlpha(colorWithAlpha: string): string;
    /**
     * Gets the hex color part of an alpha hex color. For example, both '#abcd'
     * and
     * '#AABBCC12' return '#aabbcc'.
     * @param colorWithAlpha The alpha hex color to get the hex color from.
     */
    function extractHexColor(colorWithAlpha: string): string;
    /**
     * Converts an 8-hex representation of a color to RGBA.
     * @param hexColor Color to convert.
     */
    function hexToRgba(hexColor: string): ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Converts a hex representation of a color to RGBA.
     * @param hexColor Color to convert.
     */
    function hexToRgbaStyle(hexColor: string): string;
    /**
     * Converts a color from HSLA to hex representation.
     * @param hsla Array of [h, s, l, a], where h is an integer in [0, 360], s
     * and l are integers in [0, 100], and a is in [0, 1].
     */
    function hslaArrayToHex(hsla: ಠ_ಠ.clutz.goog.vec.Number|null): string;
    /**
     * Converts a color from HSLA to an RGBA style string.
     * @param hsla Array of [h, s, l, a], where h is and integer in [0, 360], s
     * and l are integers in [0, 100], and a is in [0, 1].
     */
    function hslaArrayToRgbaStyle(hsla: ಠ_ಠ.clutz.goog.vec.Number|null): string;
    /**
     * Converts a color from HSLA to hex representation.
     * @param h Amount of hue, int between 0 and 360.
     * @param s Amount of saturation, int between 0 and 100.
     * @param l Amount of lightness, int between 0 and 100.
     * @param a Amount of alpha, float between 0 and 1.
     */
    function hslaToHex(h: number, s: number, l: number, a: number): string;
    /**
     * Converts a color from HSLA color space to RGBA color space.
     * @param h Amount of hue, int between 0 and 360.
     * @param s Amount of saturation, int between 0 and 100.
     * @param l Amount of lightness, int between 0 and 100.
     * @param a Amount of alpha, float between 0 and 1.
     */
    function hslaToRgba(
        h: number, s: number, l: number, a: number): ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Converts a color from HSLA to an RGBA style string.
     * @param h Amount of hue, int between 0 and 360.
     * @param s Amount of saturation, int between 0 and 100.
     * @param l Amount of lightness, int between 0 and 100.
     * @param a Amount of alpha, float between 0 and 1.
     */
    function hslaToRgbaStyle(
        h: number, s: number, l: number, a: number): string;
    /**
     * Converts from an HSVA array to a hex string
     * @param hsva Array of [h, s, v, a] in [[0, 1], [0, 1], [0, 255], [0, 1]].
     */
    function hsvaArrayToHex(hsva: ಠ_ಠ.clutz.goog.vec.Number|null): string;
    /**
     * Converts from h,s,v,a values to a hex string
     * @param h Hue, in [0, 1].
     * @param s Saturation, in [0, 1].
     * @param v Value, in [0, 255].
     * @param a Alpha, in [0, 1].
     */
    function hsvaToHex(h: number, s: number, v: number, a: number): string;
    /**
     * Parses an alpha color out of a string.
     * @param str Color in some format.
     */
    function parse(str: string): {hex: string, type: string};
    /**
     * Converts a color from RGBA to hex representation.
     * @param rgba Array of [r, g, b, a], with r, g, b in [0, 255] and a in [0,
     * 1].
     */
    function rgbaArrayToHex(rgba: ಠ_ಠ.clutz.goog.vec.Number|null): string;
    /**
     * Converts a color from RGBA color space to HSLA color space.
     * @param rgba [r, g, b, a] values for the color, each in [0, 255].
     */
    function rgbaArrayToHsla(rgba: ಠ_ಠ.clutz.goog.vec.Number|
                             null): ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Converts a color from RGBA to an RGBA style string.
     * @param rgba Array of [r, g, b, a], with r, g, b in [0, 255] and a in [0,
     * 1].
     */
    function rgbaArrayToRgbaStyle(rgba: ಠ_ಠ.clutz.goog.vec.Number|null|
                                  Float32Array): string;
    /**
     * Converts a color from RGBA to hex representation.
     * @param r Amount of red, int between 0 and 255.
     * @param g Amount of green, int between 0 and 255.
     * @param b Amount of blue, int between 0 and 255.
     * @param a Amount of alpha, float between 0 and 1.
     */
    function rgbaToHex(r: number, g: number, b: number, a: number): string;
    /**
     * Converts a color from RGBA color space to HSLA color space.
     * Modified from {@link http://en.wikipedia.org/wiki/HLS_color_space}.
     * @param r Value of red, in [0, 255].
     * @param g Value of green, in [0, 255].
     * @param b Value of blue, in [0, 255].
     * @param a Value of alpha, in [0, 255].
     */
    function rgbaToHsla(
        r: number, g: number, b: number, a: number): ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Converts a color from RGBA to an RGBA style string.
     * @param r Value of red, in [0, 255].
     * @param g Value of green, in [0, 255].
     * @param b Value of blue, in [0, 255].
     * @param a Value of alpha, in [0, 1].
     */
    function rgbaToRgbaStyle(
        r: number, g: number, b: number, a: number): string;
}
declare module 'goog:goog.color.alpha' {
    import alias = ಠ_ಠ.clutz.goog.color.alpha;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.color {
    /**
     * A map that contains a lot of colors that are recognised by various
     * browsers. This list is way larger than the minimal one dictated by W3C.
     * The keys of this map are the lowercase "readable" names of the colors,
     * while the values are the "hex" values.
     */
    var names: {[key: string]: string};
}
declare module 'goog:goog.color.names' {
    import alias = ಠ_ಠ.clutz.goog.color.names;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt {
    /**
     * Turns an array of numbers into the hex string given by the concatenation
     * of the hex values to which the numbers correspond.
     * @param array Array of numbers representing characters.
     */
    function byteArrayToHex(array: Uint8Array|null|
                            ಠ_ಠ.clutz.goog.vec.Number): string;
    /**
     * Turns an array of numbers into the string given by the concatenation of
     * the characters to which the numbers correspond.
     * @param bytes Array of numbers representing characters.
     */
    function byteArrayToString(bytes: Uint8Array|
                               ಠ_ಠ.clutz.goog.vec.Number): string;
    /**
     * Converts a hex string into an integer array.
     * @param hexString Hex string of 16-bit integers (two characters per
     * integer).
     */
    function hexToByteArray(hexString: string): ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Turns a string into an array of bytes; a "byte" being a JS number in the
     * range 0-255. Multi-byte characters are written as little-endian.
     * @param str String value to arrify.
     */
    function stringToByteArray(str: string): ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Converts a JS string to a UTF-8 "byte" array.
     * @param str 16-bit unicode string.
     */
    function stringToUtf8ByteArray(str: string): ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Converts a UTF-8 byte array to JavaScript's 16-bit Unicode.
     * @param bytes UTF-8 byte array.
     */
    function utf8ByteArrayToString(bytes: Uint8Array|null|
                                   ಠ_ಠ.clutz.goog.vec.Number): string;
    /**
     * XOR two byte arrays.
     * @param bytes1 Byte array 1.
     * @param bytes2 Byte array 2.
     */
    function xorByteArray(
        bytes1: Uint8Array|Int8Array|ಠ_ಠ.clutz.goog.vec.Number,
        bytes2: Uint8Array|Int8Array|
        ಠ_ಠ.clutz.goog.vec.Number): ಠ_ಠ.clutz.goog.vec.Number;
}
declare module 'goog:goog.crypt' {
    import alias = ಠ_ಠ.clutz.goog.crypt;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt {
    /**
     * Implementation of AES in JavaScript.
     * See http://en.wikipedia.org/wiki/Advanced_Encryption_Standard
     *
     * WARNING: This is ECB mode only. If you are encrypting something
     * longer than 16 bytes, or encrypting more than one value with the same key
     * (so basically, always) you need to use this with a block cipher mode of
     * operation.  See goog.crypt.Cbc.
     *
     * See http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation for more
     * information.
     */
    class Aes extends Aes_Instance {
        static ENABLE_TEST_MODE: boolean;
    }
    class Aes_Instance implements ಠ_ಠ.clutz.goog.crypt.BlockCipher {
        private noStructuralTyping_: any;
        /**
         * Implementation of AES in JavaScript.
         * See http://en.wikipedia.org/wiki/Advanced_Encryption_Standard
         *
         * WARNING: This is ECB mode only. If you are encrypting something
         * longer than 16 bytes, or encrypting more than one value with the same
         * key (so basically, always) you need to use this with a block cipher
         * mode of operation.  See goog.crypt.Cbc.
         *
         * See http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation for
         * more information.
         * @param key The key as an array of integers in {0, 255}. The key must
         * have lengths of 16, 24, or 32 integers for 128-, 192-, or 256-bit
         * encryption, respectively.
         */
        constructor(key: ಠ_ಠ.clutz.goog.vec.Number);
        /**
         * Block size, in bytes.  Fixed at 16 per AES spec.
         */
        BLOCK_SIZE: number;
        decrypt(input: ಠ_ಠ.clutz.goog.vec.Number|
                Uint8Array): ಠ_ಠ.clutz.goog.vec.Number;
        encrypt(input: ಠ_ಠ.clutz.goog.vec.Number|
                Uint8Array): ಠ_ಠ.clutz.goog.vec.Number;
    }
}
declare module 'goog:goog.crypt.Aes' {
    import alias = ಠ_ಠ.clutz.goog.crypt.Aes;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt {
    /**
     * ARC4 streamcipher implementation.
     */
    class Arc4 extends Arc4_Instance {}
    class Arc4_Instance {
        private noStructuralTyping_: any;
        /**
         * En- or decrypt (same operation for streamciphers like ARC4)
         * @param data The data to be xor-ed in place.
         * @param opt_length The number of bytes to crypt.
         */
        crypt(
            data: ಠ_ಠ.clutz.goog.vec.Number|null|Uint8Array,
            opt_length?: number): void;
        /**
         * Discards n bytes of the keystream.
         * These days 1536 is considered a decent amount to drop to get the key
         * state warmed-up enough for secure usage. This is not done in the
         * constructor to preserve efficiency for use cases that do not need
         * this. NOTE: Discard is identical to crypt without actually xoring any
         * data. It's unfortunate to have this code duplicated, but this was
         * done for performance reasons. Alternatives which were attempted:
         * 1. Create a temp array of the correct length and pass it to crypt.
         * This works but needlessly allocates an array. But more importantly
         * this requires choosing an array type (Array or Uint8Array) in
         * discard, and choosing a different type than will be passed to crypt
         * by the client code hurts the javascript engines ability to optimize
         * crypt (7x hit in v8).
         * 2. Make data option in crypt so discard can pass null, this has a
         * huge perf hit for crypt.
         * @param length Number of bytes to disregard from the stream.
         */
        discard(length: number): void;
        /**
         * Initialize the cipher for use with new key.
         * @param key A byte array containing the key.
         * @param opt_length Indicates # of bytes to take from the key.
         */
        setKey(key: ಠ_ಠ.clutz.goog.vec.Number|null, opt_length?: number): void;
    }
}
declare module 'goog:goog.crypt.Arc4' {
    import alias = ಠ_ಠ.clutz.goog.crypt.Arc4;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt {
    /**
     * Construct the hash computer.
     */
    class BlobHasher extends BlobHasher_Instance {}
    class BlobHasher_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * Construct the hash computer.
         * @param hashFn The hash function to use.
         * @param opt_blockSize Processing block size.
         */
        constructor(hashFn: ಠ_ಠ.clutz.goog.crypt.Hash, opt_blockSize?: number);
        /**
         * Abort hash computation.
         */
        abort(): void;
        getBytesProcessed(): number;
        getHash(): ಠ_ಠ.clutz.goog.vec.Number|null;
        /**
         * Start the hash computation.
         * @param blob The blob of data to compute the hash for.
         */
        hash(blob: Blob): void;
        /**
         * Sets the maximum number of bytes to hash or Infinity for no limit.
         * Can be called before hash() to throttle the hash computation. The
         * hash computation can then be continued by repeatedly calling
         * setHashingLimit() with greater byte offsets. This is useful if you
         * don't need the hash until some time in the future, for example when
         * uploading a file and you don't need the hash until the transfer is
         * complete.
         * @param byteOffset The byte offset to compute the hash up to. Should
         * be a non-negative integer or Infinity for no limit. Negative values
         * are not allowed.
         */
        setHashingLimit(byteOffset: number): void;
    }
}
declare module 'goog:goog.crypt.BlobHasher' {
    import alias = ಠ_ಠ.clutz.goog.crypt.BlobHasher;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt.BlobHasher {
    /**
     * Event names for hash computation events
     */
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        ABORT: EventType,
        COMPLETE: EventType,
        ERROR: EventType,
        PROGRESS: EventType,
        STARTED: EventType,
        THROTTLED: EventType,
    };
}
declare module 'goog:goog.crypt.BlobHasher.EventType' {
    import alias = ಠ_ಠ.clutz.goog.crypt.BlobHasher.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt {
    /**
     * Interface definition for a block cipher.
     */
    interface BlockCipher {
        /**
         * Block size, in bytes.
         */
        BLOCK_SIZE: number;
        /**
         * Decrypt a plaintext block.  The implementation may expect (and
         * assert) a particular block length.
         * @param input Ciphertext. Array of input bytes.
         */
        decrypt(a: ಠ_ಠ.clutz.goog.vec.Number|
                Uint8Array): ಠ_ಠ.clutz.goog.vec.Number;
        /**
         * Encrypt a plaintext block.  The implementation may expect (and
         * assert) a particular block length.
         * @param input Plaintext array of input bytes.
         */
        encrypt(a: ಠ_ಠ.clutz.goog.vec.Number|
                Uint8Array): ಠ_ಠ.clutz.goog.vec.Number;
    }
}
declare module 'goog:goog.crypt.BlockCipher' {
    import alias = ಠ_ಠ.clutz.goog.crypt.BlockCipher;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt {
    /**
     * Implements the CBC mode for block ciphers. See
     * http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation
     * #Cipher-block_chaining_.28CBC.29
     */
    class Cbc extends Cbc_Instance {}
    class Cbc_Instance {
        private noStructuralTyping_: any;
        /**
         * Implements the CBC mode for block ciphers. See
         * http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation
         * #Cipher-block_chaining_.28CBC.29
         * @param cipher The block cipher to use.
         */
        constructor(cipher: ಠ_ಠ.clutz.goog.crypt.BlockCipher);
        /**
         * Decrypt a message.
         * @param cipherText Message to decrypt. An array of bytes. The length
         * should be a multiple of the block size.
         * @param initialVector Initial vector for the CBC mode. An array of
         * bytes with the same length as the block size.
         */
        decrypt(
            cipherText: ಠ_ಠ.clutz.goog.vec.Number|Uint8Array,
            initialVector: ಠ_ಠ.clutz.goog.vec.Number|
            Uint8Array): ಠ_ಠ.clutz.goog.vec.Number;
        /**
         * Encrypt a message.
         * @param plainText Message to encrypt. An array of bytes. The length
         * should be a multiple of the block size.
         * @param initialVector Initial vector for the CBC mode. An array of
         * bytes with the same length as the block size.
         */
        encrypt(
            plainText: ಠ_ಠ.clutz.goog.vec.Number|Uint8Array,
            initialVector: ಠ_ಠ.clutz.goog.vec.Number|
            Uint8Array): ಠ_ಠ.clutz.goog.vec.Number;
    }
}
declare module 'goog:goog.crypt.Cbc' {
    import alias = ಠ_ಠ.clutz.goog.crypt.Cbc;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt {
    /**
     * Implementation of Ctr mode for block ciphers.  See
     * http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation
     * #Cipher-block_chaining_.28Ctr.29. for an overview, and
     * http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf
     * for the spec.
     */
    class Ctr extends Ctr_Instance {}
    class Ctr_Instance {
        private noStructuralTyping_: any;
        /**
         * Implementation of Ctr mode for block ciphers.  See
         * http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation
         * #Cipher-block_chaining_.28Ctr.29. for an overview, and
         * http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf
         * for the spec.
         * @param cipher The block cipher to use.
         */
        constructor(cipher: ಠ_ಠ.clutz.goog.crypt.BlockCipher);
        /**
         * Decrypts a message. In CTR, this is the same as encrypting.
         * @param cipherText Message to decrypt. The length does not have to be
         * a multiple of the blocksize.
         * @param initialVector Initial vector for the Ctr mode. An array of
         * bytes with the same length as the block size.
         */
        decrypt(
            a: ಠ_ಠ.clutz.goog.vec.Number|Uint8Array,
            b: ಠ_ಠ.clutz.goog.vec.Number|Uint8Array): ಠ_ಠ.clutz.goog.vec.Number;
        /**
         * Encrypts a message.
         * @param plainText Message to encrypt. An array of bytes. The length
         * does not have to be a multiple of the blocksize.
         * @param initialVector Initial vector for the Ctr mode. An array of
         * bytes with the same length as the block size, that should be not
         * reused when using the same key.
         */
        encrypt(
            plainText: ಠ_ಠ.clutz.goog.vec.Number|Uint8Array,
            initialVector: ಠ_ಠ.clutz.goog.vec.Number|
            Uint8Array): ಠ_ಠ.clutz.goog.vec.Number;
    }
}
declare module 'goog:goog.crypt.Ctr' {
    import alias = ಠ_ಠ.clutz.goog.crypt.Ctr;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt {
    /**
     * Create a cryptographic hash instance.
     */
    class Hash extends Hash_Instance {}
    class Hash_Instance {
        private noStructuralTyping_: any;
        /**
         * The block size for the hasher.
         */
        blockSize: number;
        digest(): ಠ_ಠ.clutz.goog.vec.Number;
        /**
         * Resets the internal accumulator.
         */
        reset():void;
        /**
         * Adds a byte array (array with values in [0-255] range) or a string
         * (must only contain 8-bit, i.e., Latin1 characters) to the internal
         * accumulator.
         *
         * Many hash functions operate on blocks of data and implement
         * optimizations when a full chunk of data is readily available. Hence
         * it is often preferable to provide large chunks of data (a kilobyte or
         * more) than to repeatedly call the update method with few tens of
         * bytes. If this is not possible, or not feasible, it might be good to
         * provide data in multiplies of hash block size (often 64 bytes).
         * Please see the implementation and performance tests of your favourite
         * hash.
         * @param bytes Data used for the update.
         * @param opt_length Number of bytes to use.
         */
        update(a: ಠ_ಠ.clutz.goog.vec.Number|null|Uint8Array|string, b?: number):
            any;
    }
}
declare module 'goog:goog.crypt.Hash' {
    import alias = ಠ_ಠ.clutz.goog.crypt.Hash;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt {
    class Hmac extends Hmac_Instance {}
    class Hmac_Instance extends ಠ_ಠ.clutz.goog.crypt.Hash_Instance {
        constructor(
            hasher: ಠ_ಠ.clutz.goog.crypt.Hash,
            key: ಠ_ಠ.clutz.goog.vec.Number|null, opt_blockSize?: number);
        blockSize: number;
        digest(): ಠ_ಠ.clutz.goog.vec.Number;
        /**
         * Calculates an HMAC for a given message.
         * @param message Data to Hmac.
         */
        getHmac(message: ಠ_ಠ.clutz.goog.vec.Number|null|Uint8Array|
                string): ಠ_ಠ.clutz.goog.vec.Number;
        reset(): void;
        update(
            bytes: ಠ_ಠ.clutz.goog.vec.Number|null|Uint8Array|string,
            opt_length?: number): any;
    }
}
declare module 'goog:goog.crypt.Hmac' {
    import alias = ಠ_ಠ.clutz.goog.crypt.Hmac;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt {
    /**
     * MD5 cryptographic hash constructor.
     */
    class Md5 extends Md5_Instance {}
    class Md5_Instance extends ಠ_ಠ.clutz.goog.crypt.Hash_Instance {
        blockSize: number;
        digest(): ಠ_ಠ.clutz.goog.vec.Number;
        reset(): void;
        update(
            bytes: ಠ_ಠ.clutz.goog.vec.Number|null|Uint8Array|string,
            opt_length?: number): any;
    }
}
declare module 'goog:goog.crypt.Md5' {
    import alias = ಠ_ಠ.clutz.goog.crypt.Md5;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt {
    /**
     * SHA-1 cryptographic hash constructor.
     *
     * The properties declared here are discussed in the above algorithm
     * document.
     */
    class Sha1 extends Sha1_Instance {}
    class Sha1_Instance extends ಠ_ಠ.clutz.goog.crypt.Hash_Instance {
        blockSize: number;
        digest(): ಠ_ಠ.clutz.goog.vec.Number;
        reset(): void;
        update(
            bytes: ಠ_ಠ.clutz.goog.vec.Number|null|Uint8Array|string,
            opt_length?: number): any;
    }
}
declare module 'goog:goog.crypt.Sha1' {
    import alias = ಠ_ಠ.clutz.goog.crypt.Sha1;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt {
    /**
     * SHA-2 cryptographic hash constructor.
     * This constructor should not be used directly to create the object.
     * Rather, one should use the constructor of the sub-classes.
     */
    class Sha2 extends Sha2_Instance {}
    class Sha2_Instance extends ಠ_ಠ.clutz.goog.crypt.Hash_Instance {
        /**
         * SHA-2 cryptographic hash constructor.
         * This constructor should not be used directly to create the object.
         * Rather, one should use the constructor of the sub-classes.
         * @param numHashBlocks The size of output in 16-byte blocks.
         * @param initHashBlocks The hash-specific initialization
         */
        constructor(
            numHashBlocks: number, initHashBlocks: ಠ_ಠ.clutz.goog.vec.Number);
        blockSize: number;
        digest(): ಠ_ಠ.clutz.goog.vec.Number;
        reset(): void;
        update(
            message: ಠ_ಠ.clutz.goog.vec.Number|null|Uint8Array|string,
            opt_length?: number): any;
    }
}
declare module 'goog:goog.crypt.Sha2' {
    import alias = ಠ_ಠ.clutz.goog.crypt.Sha2;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt {
    /**
     * SHA-224 cryptographic hash constructor.
     */
    class Sha224 extends Sha224_Instance {}
    class Sha224_Instance extends ಠ_ಠ.clutz.goog.crypt.Sha2_Instance {
        /**
         * SHA-224 cryptographic hash constructor.
         */
        constructor();
    }
}
declare module 'goog:goog.crypt.Sha224' {
    import alias = ಠ_ಠ.clutz.goog.crypt.Sha224;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt {
    /**
     * SHA-256 cryptographic hash constructor.
     */
    class Sha256 extends Sha256_Instance {}
    class Sha256_Instance extends ಠ_ಠ.clutz.goog.crypt.Sha2_Instance {
        /**
         * SHA-256 cryptographic hash constructor.
         */
        constructor();
    }
}
declare module 'goog:goog.crypt.Sha256' {
    import alias = ಠ_ಠ.clutz.goog.crypt.Sha256;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt {
    /**
     * Constructs a SHA-2 64-bit cryptographic hash.
     * This class should not be used. Rather, one should use one of its
     * subclasses.
     */
    class Sha2_64bit extends Sha2_64bit_Instance {}
    class Sha2_64bit_Instance extends ಠ_ಠ.clutz.goog.crypt.Hash_Instance {
        /**
         * Constructs a SHA-2 64-bit cryptographic hash.
         * This class should not be used. Rather, one should use one of its
         * subclasses.
         * @param numHashBlocks The size of the output in 16-byte blocks
         * @param initHashBlocks The hash-specific initialization vector, as a
         * sequence of sixteen 32-bit numbers.
         */
        constructor(
            numHashBlocks: number, initHashBlocks: ಠ_ಠ.clutz.goog.vec.Number);
        /**
         * The number of bytes that are digested in each pass of this hasher.
         */
        blockSize: number;
        digest(): ಠ_ಠ.clutz.goog.vec.Number;
        /**
         * Resets this hash function.
         */
        reset(): void;
        update(
            message: ಠ_ಠ.clutz.goog.vec.Number|null|Uint8Array|string,
            opt_length?: number): any;
    }
}
declare module 'goog:goog.crypt.Sha2_64bit' {
    import alias = ಠ_ಠ.clutz.goog.crypt.Sha2_64bit;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt {
    /**
     * Constructs a SHA-384 cryptographic hash.
     */
    class Sha384 extends Sha384_Instance {}
    class Sha384_Instance extends ಠ_ಠ.clutz.goog.crypt.Sha2_64bit_Instance {
        /**
         * Constructs a SHA-384 cryptographic hash.
         */
        constructor();
    }
}
declare module 'goog:goog.crypt.Sha384' {
    import alias = ಠ_ಠ.clutz.goog.crypt.Sha384;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt {
    /**
     * Constructs a SHA-512 cryptographic hash.
     */
    class Sha512 extends Sha512_Instance {}
    class Sha512_Instance extends ಠ_ಠ.clutz.goog.crypt.Sha2_64bit_Instance {
        /**
         * Constructs a SHA-512 cryptographic hash.
         */
        constructor();
    }
}
declare module 'goog:goog.crypt.Sha512' {
    import alias = ಠ_ಠ.clutz.goog.crypt.Sha512;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt {
    /**
     * Constructs a SHA-512/256 cryptographic hash.
     */
    class Sha512_256 extends Sha512_256_Instance {}
    class Sha512_256_Instance extends ಠ_ಠ.clutz.goog.crypt.Sha2_64bit_Instance {
        /**
         * Constructs a SHA-512/256 cryptographic hash.
         */
        constructor();
    }
}
declare module 'goog:goog.crypt.Sha512_256' {
    import alias = ಠ_ಠ.clutz.goog.crypt.Sha512_256;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt.base64 {
    /**
     * Our default alphabet. Value 64 (=) is special; it means "nothing."
     */
    var ENCODED_VALS: string;
    /**
     * Our default alphabet, shared between
     * ENCODED_VALS and ENCODED_VALS_WEBSAFE
     */
    var ENCODED_VALS_BASE: string;
    /**
     * Our websafe alphabet.
     */
    var ENCODED_VALS_WEBSAFE: string;
    /**
     * Base64-decode a string.
     * @param input Input to decode. Any whitespace is ignored, and the input
     * maybe encoded with either supported alphabet (or a mix thereof).
     * @param opt_webSafe True indicates we should use the alternative alphabet,
     * which does not require escaping for use in URLs. Note that passing false
     * may also still allow webSafe input decoding, when the fallback decoder is
     * used on browsers without native support.
     */
    function decodeString(input: string, opt_webSafe?: boolean): string;
    /**
     * Base64-decode a string to an Array of numbers.
     *
     * In base-64 decoding, groups of four characters are converted into three
     * bytes.  If the encoder did not apply padding, the input length may not
     * be a multiple of 4.
     *
     * In this case, the last group will have fewer than 4 characters, and
     * padding will be inferred.  If the group has one or two characters, it
     * decodes to one byte.  If the group has three characters, it decodes to
     * two bytes.
     * @param input Input to decode. Any whitespace is ignored, and the input
     * maybe encoded with either supported alphabet (or a mix thereof).
     * @param opt_ignored Unused parameter, retained for compatibility.
     */
    function decodeStringToByteArray(
        input: string, opt_ignored?: boolean): ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Base64-decode a string to a Uint8Array.
     *
     * Note that Uint8Array is not supported on older browsers, e.g. IE < 10.
     * @param input Input to decode. Any whitespace is ignored, and the input
     * maybe encoded with either supported alphabet (or a mix thereof).
     */
    function decodeStringToUint8Array(input: string): Uint8Array;
    /**
     * Base64-encode an array of bytes.
     * @param input An array of bytes (numbers with value in [0, 255]) to
     * encode.
     * @param opt_webSafe True indicates we should use the alternative alphabet,
     * which does not require escaping for use in URLs.
     */
    function encodeByteArray(
        input: ಠ_ಠ.clutz.goog.vec.Number|null|Uint8Array,
        opt_webSafe?: boolean): string;
    /**
     * Base64-encode a string.
     * @param input A string to encode.
     * @param opt_webSafe True indicates we should use the alternative alphabet,
     * which does not require escaping for use in URLs.
     */
    function encodeString(input: string, opt_webSafe?: boolean): string;
}
declare module 'goog:goog.crypt.base64' {
    import alias = ಠ_ಠ.clutz.goog.crypt.base64;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt.baseN {
    /**
     * The more-known version of the BASE-64 encoding.  Uses + and / characters.
     */
    var BASE_64: string;
    /**
     * URL-safe version of the BASE-64 encoding.
     */
    var BASE_64_URL_SAFE: string;
    /**
     * Base-2, i.e. '01'.
     */
    var BASE_BINARY: string;
    /**
     * Base-10, i.e. '0123456789'.
     */
    var BASE_DECIMAL: string;
    /**
     * Base-16 using lower case, i.e. '0123456789abcdef'.
     */
    var BASE_LOWERCASE_HEXADECIMAL: string;
    /**
     * Base-8, i.e. '01234567'.
     */
    var BASE_OCTAL: string;
    /**
     * Base-16 using upper case, i.e. '0123456789ABCDEF'.
     */
    var BASE_UPPERCASE_HEXADECIMAL: string;
    /**
     * Converts a number from one numeric base to another.
     *
     * The bases are represented as strings, which list allowed digits.  Each
     * digit should be unique.  The bases can either be user defined, or any of
     * goog.crypt.baseN.BASE_xxx.
     *
     * The number is in human-readable format, most significant digit first, and
     * is a non-negative integer.  Base designators such as $, 0x, d, b or h (at
     * end) will be interpreted as digits, so avoid them.  Leading zeros will be
     * trimmed.
     *
     * Note: for huge bases the result may be inaccurate because of overflowing
     * 64-bit doubles used by JavaScript for integer calculus.  This may happen
     * if the product of the number of digits in the input and output bases
     * comes close to 10^16, which is VERY unlikely (100M digits in each base),
     * but may be possible in the future unicode world.  (Unicode 3.2 has less
     * than 100K characters.  However, it reserves some more, close to 1M.)
     * @param number The number to convert.
     * @param inputBase The numeric base the number is in (all digits).
     * @param outputBase Requested numeric base.
     */
    function recodeString(
        number: string, inputBase: string, outputBase: string): string;
}
declare module 'goog:goog.crypt.baseN' {
    import alias = ಠ_ಠ.clutz.goog.crypt.baseN;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt.hash32 {
    /**
     * Arbitrary constant used during hashing.
     * See CONSTANT32 in http://go/base.hash.java
     */
    var CONSTANT32: number;
    /**
     * Default seed used during hashing, digits of pie.
     * See SEED32 in http://go/base.hash.java
     */
    var SEED32: number;
    /**
     * Hashes a "byte" array to a 32-bit value using the supplied seed.
     * @param bytes Array of bytes.
     * @param opt_offset The starting position to use for hash computation.
     * @param opt_length Number of bytes that are used for hashing.
     * @param opt_seed The seed.
     */
    function encodeByteArray(
        bytes: ಠ_ಠ.clutz.goog.vec.Number|null, opt_offset?: number,
        opt_length?: number, opt_seed?: number): number;
    /**
     * Hashes an integer to a 32-bit value.
     * @param value Number to hash.
     */
    function encodeInteger(value: number): number;
    /**
     * Hashes a string to a 32-bit value.
     * @param str String to hash.
     */
    function encodeString(str: string): number;
    /**
     * Hashes a string to a 32-bit value, converting the string to UTF-8 before
     * doing the encoding.
     * @param str String to hash.
     */
    function encodeStringUtf8(str: string): number;
}
declare module 'goog:goog.crypt.hash32' {
    import alias = ಠ_ಠ.clutz.goog.crypt.hash32;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.crypt.pbkdf2 {
    /**
     * Derives key from password using PBKDF2-SHA1
     * @param password Byte array representation of the password from which the
     * key is derived.
     * @param initialSalt Byte array representation of the salt.
     * @param iterations Number of interations when computing the key.
     * @param keyLength Length of the output key in bits. Must be multiple of 8.
     */
    function deriveKeySha1(
        password: ಠ_ಠ.clutz.goog.vec.Number,
        initialSalt: ಠ_ಠ.clutz.goog.vec.Number, iterations: number,
        keyLength: number): ಠ_ಠ.clutz.goog.vec.Number;
}
declare module 'goog:goog.crypt.pbkdf2' {
    import alias = ಠ_ಠ.clutz.goog.crypt.pbkdf2;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.cssom {
    /**
     * Cross browser function to add a CSSRule into a StyleSheet, optionally
     * at a given index.
     * @param cssStyleSheet The CSSRule's parentStyleSheet.
     * @param cssText The text for the new CSSRule.
     * @param opt_index The index of the cssRule in its parentStylesheet.
     */
    function addCssRule(
        cssStyleSheet: StyleSheet|null, cssText: string,
        opt_index?: number): void;
    /**
     * Appends a DOM node to HEAD containing the css text that's passed in.
     * @param cssText CSS to add to the end of the document.
     * @param opt_domHelper Optional DOM helper user for document interactions.
     */
    function addCssText(
        cssText: string,
        opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null): GlobalElement;
    /**
     * Recursively gets all CSSStyleRules, optionally starting from a given
     * StyleSheet.
     * Note that this excludes any CSSImportRules, CSSMediaRules, etc..
     */
    function getAllCssStyleRules(opt_styleSheet?: StyleSheet|null|
                                 StyleSheetList): (CSSStyleRule|null)[];
    /**
     * Gets all StyleSheet objects starting from some StyleSheet. Note that we
     * want to return the sheets in the order of the cascade, therefore if we
     * encounter an import, we will splice that StyleSheet object in front of
     * the StyleSheet that contains it in the returned array of StyleSheets.
     * @param opt_styleSheet A StyleSheet.
     * @param opt_includeDisabled If true, includes disabled stylesheets,
     * defaults to false.
     */
    function getAllCssStyleSheets(
        opt_styleSheet?: StyleSheet|null|StyleSheetList,
        opt_includeDisabled?: boolean): (StyleSheet|null)[];
    /**
     * Recursively gets all CSS as text, optionally starting from a given
     * StyleSheet.
     */
    function getAllCssText(opt_styleSheet?: StyleSheet|null|
                           StyleSheetList): string;
    /**
     * Get the index of the CSSRule in it's StyleSheet.
     * @param cssRule A CSSRule.
     * @param opt_parentStyleSheet A reference to the stylesheet object this
     * cssRule belongs to.
     */
    function getCssRuleIndexInParentStyleSheet(
        cssRule: CSSRule|null, opt_parentStyleSheet?: StyleSheet|null): number;
    /**
     * Returns the CSSRules from a styleSheet.
     * Worth noting here is that IE and FF differ in terms of what they will
     * return. Firefox will return styleSheet.cssRules, which includes
     * ImportRules and anything which implements the CSSRules interface. IE
     * returns simply a list of CSSRules.
     */
    function getCssRulesFromStyleSheet(styleSheet: StyleSheet|
                                       null): CSSRuleList|null;
    /**
     * Gets the cssText from a CSSRule object cross-browserly.
     * @param cssRule A CSSRule.
     */
    function getCssTextFromCssRule(cssRule: CSSRule|null): string;
    /**
     * Cross browser method to get the filename from the StyleSheet's href.
     * Explorer only returns the filename in the href, while other agents return
     * the full path.
     * @param styleSheet Any valid StyleSheet object with an href.
     */
    function getFileNameFromStyleSheet(styleSheet: StyleSheet): string|null;
    /**
     * We do some trickery in getAllCssStyleRules that hacks this in for IE.
     * If the cssRule object isn't coming from a result of that function call,
     * this method will return undefined in IE.
     * @param cssRule The CSSRule.
     */
    function getParentStyleSheet(cssRule: CSSRule|null): StyleSheet|null;
    /**
     * Cross browser function to remove a CSSRule in a StyleSheet at an index.
     * @param cssStyleSheet The CSSRule's parentStyleSheet.
     * @param index The CSSRule's index in the parentStyleSheet.
     */
    function removeCssRule(cssStyleSheet: StyleSheet|null, index: number): void;
    /**
     * Replace a cssRule with some cssText for a new rule.
     * If the cssRule object is not one of objects returned by
     * getAllCssStyleRules, then you'll need to provide both the styleSheet and
     * possibly the index, since we can't infer them from the standard cssRule
     * object in IE. We do some trickery in getAllCssStyleRules to hack this in.
     * @param cssRule A CSSRule.
     * @param cssText The text for the new CSSRule.
     * @param opt_parentStyleSheet A reference to the stylesheet object this
     * cssRule belongs to.
     * @param opt_index The index of the cssRule in its parentStylesheet.
     */
    function replaceCssRule(
        cssRule: CSSRule|null, cssText: string,
        opt_parentStyleSheet?: StyleSheet|null, opt_index?: number): void;
}
declare module 'goog:goog.cssom' {
    import alias = ಠ_ಠ.clutz.goog.cssom;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.cssom {
    /**
     * Enumeration of {@code CSSRule} types.
     */
    enum CssRuleType {
        FONT_FACE,
        IMPORT,
        MEDIA,
        NAMESPACE,
        PAGE,
        STYLE,
    }
}
declare module 'goog:goog.cssom.CssRuleType' {
    import alias = ಠ_ಠ.clutz.goog.cssom.CssRuleType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.cssom.iframe.style {
    /**
     * Class representing a CSS rule set. A rule set is something like this:
     * h1, h2 { font-family: Arial; color: red; }
     */
    class CssRuleSet_ extends CssRuleSet__Instance {}
    class CssRuleSet__Instance {
        private noStructuralTyping_: any;
        /**
         * Text of the declarations inside the rule set.
         * For example: 'font-family: Arial; color: red;'
         */
        declarationText: string;
        /**
         * Array of CssSelector objects, one for each selector.
         * Example: [h1, h2]
         */
        selectors: (ಠ_ಠ.clutz.goog.cssom.iframe.style.CssSelector_|null)[]|null;
        /**
         * Make a copy of this ruleset.
         */
        clone(): ಠ_ಠ.clutz.goog.cssom.iframe.style.CssRuleSet_;
        /**
         * Initializes the rule set from a {@code CSSRule}.
         * @param cssRule The {@code CSSRule} to initialize from.
         */
        initializeFromCssRule(cssRule: CSSRule|null): boolean;
        /**
         * Set the declaration text with properties from a given object.
         * @param sourceObject Object whose properties and values should be used
         * to generate the declaration text.
         * @param opt_important Whether !important should be added to each
         * declaration.
         */
        setDeclarationTextFromObject(
            sourceObject: GlobalObject|null, opt_important?: boolean): void;
        /**
         * Parses a selectors string (which may contain multiple comma-delimited
         * selectors) and loads the results into this.selectors.
         * @param selectorsString String containing selectors.
         */
        setSelectorsFromString(selectorsString: string): void;
        /**
         * Serializes this CssRuleSet_ into an array as a series of strings.
         * The array can then be join()-ed to get a string representation
         * of this ruleset.
         * @param array The array to which to append strings.
         */
        writeToArray(array: string[]|null): void;
    }
    /**
     * Represents one part of a CSS Selector. For example in the selector
     * 'body #foo .bar', body, #foo, and .bar would be considered selector
     * parts. In the official CSS spec these are called "simple selectors".
     */
    class CssSelectorPart_ extends CssSelectorPart__Instance {}
    class CssSelectorPart__Instance {
        private noStructuralTyping_: any;
        inputString_: string;
        matchProperties_: GlobalObject;
        testedElements_: GlobalObject;
        /**
         * Test whether an element matches this selector part, considered in
         * isolation.
         * @param elementInfo Element properties to test.
         */
        testElement(elementInfo: GlobalObject|null): boolean;
    }
    /**
     * Represents a single CSS selector, as described in
     * http://www.w3.org/TR/REC-CSS2/selector.html
     * Currently UNSUPPORTED are the following selector features:
     * <ul>
     * <li>pseudo-classes (:hover)
     * <li>child selectors (div > h1)
     * <li>adjacent sibling selectors (div + h1)
     * <li>attribute selectors (input[type=submit])
     * </ul>
     */
    class CssSelector_ extends CssSelector__Instance {}
    class CssSelector__Instance {
        private noStructuralTyping_: any;
        /**
         * Tests to see what part of a DOM element hierarchy would be matched by
         * this selector, and returns the indexes of the matching element and
         * matching selector part. <p> For example, given this hierarchy:
         * document > html > body > div.content > div.sidebar > p
         * and this CSS selector:
         * body div.sidebar h1
         * This would return {elementIndex: 4, selectorPartIndex: 1},
         * indicating that the element at index 4 matched
         * the css selector at index 1.
         * </p>
         * @param elementAncestry Object representing an element and its
         * ancestors.
         */
        matchElementAncestry(elementAncestry: ಠ_ಠ.clutz.goog.cssom.iframe.style
                                 .NodeAncestry_|null): GlobalObject|null;
    }
    /**
     * Represents an element and all its parent/ancestor nodes.
     * This class exists as an optimization so we run tests on an element
     * hierarchy multiple times without walking the dom each time.
     */
    class NodeAncestry_ extends NodeAncestry__Instance {}
    class NodeAncestry__Instance {
        private noStructuralTyping_: any;
        /**
         * Array of nodes in order of hierarchy from the top of the document
         * to the node passed to the constructor
         */
        nodes: (Node|null)[]|null;
        uid: number;
    }
    /**
     * Generates a set of CSS properties that can be used to make another
     * element's background look like the background of a given element.
     * This is useful when you want to copy the CSS context of an element,
     * but the element's background is transparent. In the original context
     * you would see the ancestor's backround color/image showing through,
     * but in the new context there might be a something different underneath.
     * Note that this assumes the element you're copying context from has a
     * fairly standard positioning/layout - it assumes that when the element
     * has a transparent background what you're going to see through it is its
     * ancestors.
     * @param element The element from which to copy background styles.
     */
    function getBackgroundContext(element: GlobalElement|null): GlobalObject;
    /**
     * Reads the current css rules from element's document, and returns them
     * rewriting selectors so that any rules that formerly applied to element
     * will be applied to doc.body. This makes it possible to replace a block in
     * a page with an iframe and preserve the css styling of the contents.
     * @param element The element for which context should be calculated.
     * @param opt_forceRuleSetCacheUpdate Flag to force the internal cache of
     * rulesets to refresh itself before we read the same.
     * @param opt_copyBackgroundContext Flag indicating that if the {@code
     * element} has a transparent background, background rules from the nearest
     * ancestor element(s) that have background-color and/or background-image
     * set should be copied.
     */
    function getElementContext(
        element: GlobalElement|null, opt_forceRuleSetCacheUpdate?: boolean,
        opt_copyBackgroundContext?: boolean): string;
    /**
     * Throw away all cached dom information. Call this if you've modified
     * the structure or class/id attributes of your document and you want
     * to recalculate the currently applied CSS rules.
     */
    function resetDomCache(): void;
}
declare module 'goog:goog.cssom.iframe.style' {
    import alias = ಠ_ಠ.clutz.goog.cssom.iframe.style;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.date {
    /**
     * Number of milliseconds in a day.
     */
    var MS_PER_DAY: number;
    /**
     * Formats a month/year string.
     * Example: "January 2008"
     * @param monthName The month name to use in the result.
     * @param yearNum The numeric year to use in the result.
     */
    function formatMonthAndYear(monthName: string, yearNum: number): string;
    /**
     * Creates a DateTime from a datetime string expressed in ISO 8601 format.
     * @param formatted A date or datetime expressed in ISO 8601 format.
     */
    function fromIsoString(formatted: string): ಠ_ಠ.clutz.goog.date.DateTime|
        null;
    /**
     * Returns the number of days for a given month.
     * @param year Year part of date.
     * @param month Month part of date.
     */
    function getNumberOfDaysInMonth(year: number, month: number): number;
    /**
     * Static function for week number calculation. ISO 8601 implementation.
     * @param year Year part of date.
     * @param month Month part of date (0-11).
     * @param date Day part of date (1-31).
     * @param opt_weekDay Cut off weekday, defaults to Thursday.
     * @param opt_firstDayOfWeek First day of the week, defaults to Monday.
     * Monday=0, Sunday=6.
     */
    function getWeekNumber(
        year: number, month: number, date: number, opt_weekDay?: number,
        opt_firstDayOfWeek?: number): number;
    /**
     * Returns whether the given year is a leap year.
     * @param year Year part of date.
     */
    function isLeapYear(year: number): boolean;
    /**
     * Returns whether the given year is a long ISO year.
     * See {@link http://www.phys.uu.nl/~vgent/calendar/isocalendar_text3.htm}.
     * @param year Full year part of date.
     */
    function isLongIsoYear(year: number): boolean;
    /**
     * Returns true if the 2 dates are in the same day.
     * @param date The time to check.
     * @param opt_now The current time.
     */
    function isSameDay(
        date: GlobalDate|null|ಠ_ಠ.clutz.goog.date.Date,
        opt_now?: GlobalDate|null|ಠ_ಠ.clutz.goog.date.Date): boolean;
    /**
     * Returns true if the 2 dates are in the same month.
     * @param date The time to check.
     * @param opt_now The current time.
     */
    function isSameMonth(
        date: GlobalDate|null|ಠ_ಠ.clutz.goog.date.Date,
        opt_now?: GlobalDate|null|ಠ_ಠ.clutz.goog.date.Date): boolean;
    /**
     * Returns true if the 2 dates are in the same year.
     * @param date The time to check.
     * @param opt_now The current time.
     */
    function isSameYear(
        date: GlobalDate|null|ಠ_ಠ.clutz.goog.date.Date,
        opt_now?: GlobalDate|null|ಠ_ಠ.clutz.goog.date.Date): boolean;
    function max<T = any, S = any>(date1: T, date2: S): T|S;
    function min<T = any, S = any>(date1: T, date2: S): T|S;
    /**
     * Parses a datetime string expressed in ISO 8601 format. Overwrites the
     * date and optionally the time part of the given object with the parsed
     * values.
     * @param dateTime Object whose fields will be set.
     * @param formatted A date or datetime expressed in ISO 8601 format.
     */
    function setIso8601DateTime(
        dateTime: ಠ_ಠ.clutz.goog.date.DateTime, formatted: string): boolean;
}
declare module 'goog:goog.date' {
    import alias = ಠ_ಠ.clutz.goog.date;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.date {
    /**
     * Class representing a date. Defaults to current date if none is specified.
     *
     * Implements most methods of the native js Date object (except the time
     * related
     * ones, {@see goog.date.DateTime}) and can be used interchangeably with it just
     * as if goog.date.Date was a synonym of Date. To make this more
     * transparent, Closure APIs should accept goog.date.DateLike instead of the
     * real Date object.
     */
    class Date extends Date_Instance {
        /**
         * Compares two dates.  May be used as a sorting function.
         * @param date1 Date to compare.
         * @param date2 Date to compare.
         */
        static compare(
            date1: GlobalDate|ಠ_ಠ.clutz.goog.date.Date,
            date2: GlobalDate|ಠ_ಠ.clutz.goog.date.Date): number;
        /**
         * Parses an ISO 8601 string as a {@code goog.date.Date}.
         * @param formatted ISO 8601 string to parse.
         */
        static fromIsoString(formatted: string): ಠ_ಠ.clutz.goog.date.Date|null;
    }
    class Date_Instance {
        private noStructuralTyping_: any;
        /**
         * Class representing a date. Defaults to current date if none is
         * specified.
         *
         * Implements most methods of the native js Date object (except the time
         * related
         * ones, {@see goog.date.DateTime}) and can be used interchangeably with it just
         * as if goog.date.Date was a synonym of Date. To make this more
         * transparent, Closure APIs should accept goog.date.DateLike instead of
         * the real Date object.
         * @param opt_year Four digit year or a date-like object. If not set,
         * the created object will contain the date determined by goog.now().
         * @param opt_month Month, 0 = Jan, 11 = Dec.
         * @param opt_date Date of month, 1 - 31.
         */
        constructor(
            opt_year?: number|GlobalDate|null|ಠ_ಠ.clutz.goog.date.Date,
            opt_month?: number, opt_date?: number);
        date: GlobalDate;
        /**
         * Performs date calculation by adding the supplied interval to the
         * date.
         * @param interval Date interval to add.
         */
        add(interval: ಠ_ಠ.clutz.goog.date.Interval|null): void;
        clone(): ಠ_ಠ.clutz.goog.date.Date;
        /**
         * Tests whether given date is equal to this Date.
         * Note: This ignores units more precise than days (hours and below)
         * and also ignores timezone considerations.
         * @param other The date to compare.
         */
        equals(other: ಠ_ಠ.clutz.goog.date.Date|null): boolean;
        getDate(): number;
        getDay(): number;
        getDayOfYear(): number;
        getFirstDayOfWeek(): number;
        getFirstWeekCutOffDay(): number;
        getFullYear(): number;
        getIsoWeekday(): ಠ_ಠ.clutz.goog.date.weekDay;
        getMonth(): ಠ_ಠ.clutz.goog.date.month;
        getNumberOfDaysInMonth(): number;
        /**
         * Returns the number of milliseconds since 1 January 1970 00:00:00.
         */
        getTime(): number;
        /**
         * Returns timezone offset. The timezone offset is the delta in minutes
         * between UTC and your local time. E.g., UTC+10 returns -600. Daylight
         * savings time prevents this value from being constant.
         */
        getTimezoneOffset(): number;
        /**
         * Returns timezone offset as a string. Returns offset in [+-]HH:mm
         * format or Z for UTC.
         */
        getTimezoneOffsetString(): string;
        getUTCDate(): number;
        getUTCDay(): number;
        getUTCFullYear(): number;
        getUTCHours(): number;
        getUTCIsoWeekday(): ಠ_ಠ.clutz.goog.date.weekDay;
        getUTCMinutes(): number;
        getUTCMonth(): ಠ_ಠ.clutz.goog.date.month;
        getUTCWeekday(): number;
        getWeekNumber(): number;
        getWeekday(): number;
        /**
         * Alias for getFullYear.
         */
        getYear(): number;
        /**
         * Sets the date.
         * @param date Date object to set date from.
         */
        set(date: ಠ_ಠ.clutz.goog.date.Date|null): void;
        /**
         * Sets the day part of the date.
         * @param date The day part.
         */
        setDate(date: number): void;
        /**
         * Sets the first day of week.
         * @param day 0 = Mon, 6 = Sun.
         */
        setFirstDayOfWeek(day: number): void;
        /**
         * Sets cut off weekday used for week number calculations. 0 = Mon, 6 =
         * Sun.
         * @param day The cut off weekday.
         */
        setFirstWeekCutOffDay(day: number): void;
        /**
         * Sets the year part of the date.
         * @param year Four digit year.
         */
        setFullYear(year: number): void;
        /**
         * Sets the month part of the date.
         *
         * TODO(nnaze): Update type to goog.date.month.
         * @param month The month, where 0 = Jan, 11 = Dec.
         */
        setMonth(month: number): void;
        /**
         * Sets the value of the date object as expressed in the number of
         * milliseconds since 1 January 1970 00:00:00.
         * @param ms Number of milliseconds since 1 Jan 1970.
         */
        setTime(ms: number): void;
        /**
         * Sets the day part of the date according to universal time.
         * @param date The UTC date.
         */
        setUTCDate(date: number): void;
        /**
         * Sets the year part of the date according to universal time.
         * @param year Four digit year.
         */
        setUTCFullYear(year: number): void;
        /**
         * Sets the month part of the date according to universal time.
         * @param month The month, where 0 = Jan, 11 = Dec.
         */
        setUTCMonth(month: number): void;
        /**
         * Alias for setFullYear.
         * @param year Four digit year.
         */
        setYear(year: number): void;
        /**
         * Returns ISO 8601 string representation of date.
         * @param opt_verbose Whether the verbose format should be used instead
         * of the default compact one.
         * @param opt_tz Whether the timezone offset should be included in the
         * string.
         */
        toIsoString(opt_verbose?: boolean, opt_tz?: boolean): string;
        /**
         * Overloaded toString method for object.
         */
        toString(): string;
        /**
         * Returns ISO 8601 string representation of date according to universal
         * time.
         * @param opt_verbose Whether the verbose format should be used instead
         * of the default compact one.
         * @param opt_tz Whether the timezone offset should be included in the
         * string.
         */
        toUTCIsoString(opt_verbose?: boolean, opt_tz?: boolean): string;
        valueOf(): number;
    }
}
declare module 'goog:goog.date.Date' {
    import alias = ಠ_ಠ.clutz.goog.date.Date;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.date {
    type DateLike = GlobalDate|null|ಠ_ಠ.clutz.goog.date.Date;
}
declare module 'goog:goog.date.DateLike' {
    import alias = ಠ_ಠ.clutz.goog.date.DateLike;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.date {
    /**
     * Constructs a date range.
     */
    class DateRange extends DateRange_Instance {
        /**
         * The last possible day, as far as this class is concerned.
         */
        static MAXIMUM_DATE: ಠ_ಠ.clutz.goog.date.Date|null;
        /**
         * The first possible day, as far as this class is concerned.
         */
        static MINIMUM_DATE: ಠ_ಠ.clutz.goog.date.Date|null;
        /**
         * Returns the range that includes all days between January 1, 1900 and
         * December 31, 9999.
         * @param opt_today The date to consider today. Defaults to today.
         */
        static allTime(opt_today?: ಠ_ಠ.clutz.goog.date.Date|
                       null): ಠ_ಠ.clutz.goog.date.DateRange;
        /**
         * Tests two {@link goog.date.DateRange} objects for equality.
         * @param a A date range.
         * @param b A date range.
         */
        static equals(
            a: ಠ_ಠ.clutz.goog.date.DateRange|null,
            b: ಠ_ಠ.clutz.goog.date.DateRange|null): boolean;
        /**
         * Returns the range that includes the seven days that end yesterday.
         * @param opt_today The date to consider today. Defaults to today.
         */
        static last7Days(opt_today?: ಠ_ಠ.clutz.goog.date.Date|
                         null): ಠ_ಠ.clutz.goog.date.DateRange;
        /**
         * Returns the range that starts seven days before the Monday on or
         * before today and ends the Friday before today.
         * @param opt_today The date to consider today. Defaults to today.
         */
        static lastBusinessWeek(opt_today?: ಠ_ಠ.clutz.goog.date.Date|
                                null): ಠ_ಠ.clutz.goog.date.DateRange;
        /**
         * Returns the range that starts the first of last month and ends the
         * last day of last month.
         * @param opt_today The date to consider today. Defaults to today.
         */
        static lastMonth(opt_today?: ಠ_ಠ.clutz.goog.date.Date|
                         null): ಠ_ಠ.clutz.goog.date.DateRange;
        /**
         * Returns the seven-day range that ends the day before the first day of
         * the week (see {@link goog.i18n.DateTimeSymbols.FIRSTDAYOFWEEK}) that
         * contains today.
         * @param opt_today The date to consider today. Defaults to today.
         */
        static lastWeek(opt_today?: ಠ_ಠ.clutz.goog.date.Date|
                        null): ಠ_ಠ.clutz.goog.date.DateRange;
        static standardDateRange(
            dateRangeKey: string, opt_today?: ಠ_ಠ.clutz.goog.date.Date|null):
            ಠ_ಠ.clutz.goog.date.DateRange;
        /**
         * Returns the range that starts the first of this month and ends the
         * last day of this month.
         * @param opt_today The date to consider today. Defaults to today.
         */
        static thisMonth(opt_today?: ಠ_ಠ.clutz.goog.date.Date|
                         null): ಠ_ಠ.clutz.goog.date.DateRange;
        /**
         * Returns the seven-day range that starts on the first day of the week
         * (see {@link goog.i18n.DateTimeSymbols.FIRSTDAYOFWEEK}) on or before
         * today.
         * @param opt_today The date to consider today. Defaults to today.
         */
        static thisWeek(opt_today?: ಠ_ಠ.clutz.goog.date.Date|
                        null): ಠ_ಠ.clutz.goog.date.DateRange;
        /**
         * Returns the range from today to today.
         * @param opt_today The date to consider today. Defaults to today.
         */
        static today(opt_today?: ಠ_ಠ.clutz.goog.date.Date|
                     null): ಠ_ಠ.clutz.goog.date.DateRange;
        /**
         * Returns the range from yesterday to yesterday.
         * @param opt_today The date to consider today. Defaults to today.
         */
        static yesterday(opt_today?: ಠ_ಠ.clutz.goog.date.Date|
                         null): ಠ_ಠ.clutz.goog.date.DateRange;
    }
    class DateRange_Instance {
        private noStructuralTyping_: any;
        /**
         * Constructs a date range.
         * @param startDate The first date in the range.
         * @param endDate The last date in the range.
         */
        constructor(
            startDate: ಠ_ಠ.clutz.goog.date.Date|null,
            endDate: ಠ_ಠ.clutz.goog.date.Date|null);
        /**
         * Tests if a date falls within this range.
         * @param date The date to test.
         */
        contains(date: ಠ_ಠ.clutz.goog.date.Date|null): boolean;
        getEndDate(): ಠ_ಠ.clutz.goog.date.Date|null;
        getStartDate(): ಠ_ಠ.clutz.goog.date.Date|null;
        iterator(): ಠ_ಠ.clutz.goog.date.DateRange.Iterator;
    }
}
declare module 'goog:goog.date.DateRange' {
    import alias = ಠ_ಠ.clutz.goog.date.DateRange;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.date.DateRange {
    /**
     * Creates an iterator over the dates in a {@link goog.date.DateRange}.
     */
    class Iterator extends Iterator_Instance {}
    class Iterator_Instance extends
        ಠ_ಠ.clutz.goog.iter.Iterator_Instance<ಠ_ಠ.clutz.goog.date.Date|null> {
        /**
         * Creates an iterator over the dates in a {@link goog.date.DateRange}.
         * @param dateRange The date range to iterate.
         */
        constructor(dateRange: ಠ_ಠ.clutz.goog.date.DateRange|null);
        next(): ಠ_ಠ.clutz.goog.date.Date|null;
    }
}
declare module 'goog:goog.date.DateRange.Iterator' {
    import alias = ಠ_ಠ.clutz.goog.date.DateRange.Iterator;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.date.DateRange {
    /**
     * Standard date range keys. Equivalent to the enum IDs in
     * DateRange.java http://go/datarange.java
     */
    type StandardDateRangeKeys = string&{clutzEnumBrand: never};
    var StandardDateRangeKeys: {
        ALL_TIME: StandardDateRangeKeys,
        LAST_7_DAYS: StandardDateRangeKeys,
        LAST_BUSINESS_WEEK: StandardDateRangeKeys,
        LAST_MONTH: StandardDateRangeKeys,
        LAST_WEEK: StandardDateRangeKeys,
        THIS_MONTH: StandardDateRangeKeys,
        THIS_WEEK: StandardDateRangeKeys,
        TODAY: StandardDateRangeKeys,
        YESTERDAY: StandardDateRangeKeys,
    };
}
declare module 'goog:goog.date.DateRange.StandardDateRangeKeys' {
    import alias = ಠ_ಠ.clutz.goog.date.DateRange.StandardDateRangeKeys;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.date {
    /**
     * Class representing a date and time. Defaults to current date and time if
     * none is specified.
     *
     * Implements most methods of the native js Date object and can be used
     * interchangeably with it just as if goog.date.DateTime was a subclass of
     * Date.
     */
    class DateTime extends DateTime_Instance {
        /**
         * Parses an ISO 8601 string as a {@code goog.date.DateTime}.
         * @param formatted ISO 8601 string to parse.
         */
        static fromIsoString(formatted: string): ಠ_ಠ.clutz.goog.date.DateTime
            |null;
        /**
         * Creates a DateTime from a datetime string expressed in RFC 822
         * format.
         * @param formatted A date or datetime expressed in RFC 822 format.
         */
        static fromRfc822String(formatted: string): ಠ_ಠ.clutz.goog.date.DateTime
            |null;
        static fromTimestamp(timestamp: number): ಠ_ಠ.clutz.goog.date.DateTime;
    }
    class DateTime_Instance extends ಠ_ಠ.clutz.goog.date.Date_Instance {
        /**
         * Class representing a date and time. Defaults to current date and time
         * if none is specified.
         *
         * Implements most methods of the native js Date object and can be used
         * interchangeably with it just as if goog.date.DateTime was a subclass
         * of Date.
         * @param opt_year Four digit year or a date-like object. If not set,
         * the created object will contain the date determined by goog.now().
         * @param opt_month Month, 0 = Jan, 11 = Dec.
         * @param opt_date Date of month, 1 - 31.
         * @param opt_hours Hours, 0 - 23.
         * @param opt_minutes Minutes, 0 - 59.
         * @param opt_seconds Seconds, 0 - 61.
         * @param opt_milliseconds Milliseconds, 0 - 999.
         */
        constructor(
            opt_year?: number|GlobalObject|null, opt_month?: number,
            opt_date?: number, opt_hours?: number, opt_minutes?: number,
            opt_seconds?: number, opt_milliseconds?: number);
        date: GlobalDate;
        /**
         * Performs date calculation by adding the supplied interval to the
         * date.
         * @param interval Date interval to add.
         */
        add(interval: ಠ_ಠ.clutz.goog.date.Interval|null): void;
        clone(): ಠ_ಠ.clutz.goog.date.DateTime;
        /**
         * Tests whether given datetime is exactly equal to this DateTime.
         * @param other The datetime to compare.
         */
        equals(other: ಠ_ಠ.clutz.goog.date.Date|null): boolean;
        /**
         * Returns the hours part of the datetime.
         */
        getHours(): number;
        /**
         * Returns the milliseconds part of the datetime.
         */
        getMilliseconds(): number;
        /**
         * Returns the minutes part of the datetime.
         */
        getMinutes(): number;
        /**
         * Returns the seconds part of the datetime.
         */
        getSeconds(): number;
        /**
         * Returns the day of week according to universal time, US style.
         */
        getUTCDay(): ಠ_ಠ.clutz.goog.date.weekDay;
        /**
         * Returns the hours part of the datetime according to universal time.
         */
        getUTCHours(): number;
        /**
         * Returns the milliseconds part of the datetime according to universal
         * time.
         */
        getUTCMilliseconds(): number;
        /**
         * Returns the minutes part of the datetime according to universal time.
         */
        getUTCMinutes(): number;
        /**
         * Returns the seconds part of the datetime according to universal time.
         */
        getUTCSeconds(): number;
        isMidnight(): boolean;
        /**
         * Sets the hours part of the datetime.
         * @param hours An integer between 0 and 23, representing the hour.
         */
        setHours(hours: number): void;
        /**
         * Sets the milliseconds part of the datetime.
         * @param ms Integer between 0 and 999, representing the milliseconds.
         */
        setMilliseconds(ms: number): void;
        /**
         * Sets the minutes part of the datetime.
         * @param minutes Integer between 0 and 59, representing the minutes.
         */
        setMinutes(minutes: number): void;
        /**
         * Sets the seconds part of the datetime.
         * @param seconds Integer between 0 and 59, representing the seconds.
         */
        setSeconds(seconds: number): void;
        /**
         * Sets the hours part of the datetime according to universal time.
         * @param hours An integer between 0 and 23, representing the hour.
         */
        setUTCHours(hours: number): void;
        /**
         * Sets the seconds part of the datetime according to universal time.
         * @param ms Integer between 0 and 999, representing the milliseconds.
         */
        setUTCMilliseconds(ms: number): void;
        /**
         * Sets the minutes part of the datetime according to universal time.
         * @param minutes Integer between 0 and 59, representing the minutes.
         */
        setUTCMinutes(minutes: number): void;
        /**
         * Sets the seconds part of the datetime according to universal time.
         * @param seconds Integer between 0 and 59, representing the seconds.
         */
        setUTCSeconds(seconds: number): void;
        /**
         * Returns ISO 8601 string representation of date/time.
         * @param opt_verbose Whether the verbose format should be used instead
         * of the default compact one.
         * @param opt_tz Whether the timezone offset should be included in the
         * string.
         */
        toIsoString(opt_verbose?: boolean, opt_tz?: boolean): string;
        /**
         * Generates time label for the datetime in standard ISO 24-hour time
         * format. E.g., '06:00:00' or '23:30:15'.
         * @param opt_showSeconds Whether to shows seconds. Defaults to TRUE.
         */
        toIsoTimeString(opt_showSeconds?: boolean): string;
        /**
         * Overloaded toString method for object.
         */
        toString(): string;
        /**
         * Returns ISO 8601 string representation of date/time according to
         * universal time.
         * @param opt_verbose Whether the opt_verbose format should be returned
         * instead of the default compact one.
         * @param opt_tz Whether the the timezone offset should be included in
         * the string.
         */
        toUTCIsoString(opt_verbose?: boolean, opt_tz?: boolean): string;
        /**
         * Returns RFC 3339 string representation of datetime in UTC.
         */
        toUTCRfc3339String(): string;
        /**
         * Generates time label for the datetime, e.g., '5:30 AM'.
         * By default this does not pad hours (e.g., to '05:30') and it does add
         * an am/pm suffix.
         * TODO(user): i18n -- hardcoding time format like this is bad.  E.g.,
         * in CJK locales, need Chinese characters for hour and minute units.
         * @param opt_padHours Whether to pad hours, e.g., '05:30' vs '5:30'.
         * @param opt_showAmPm Whether to show the 'am' and 'pm' suffix.
         * @param opt_omitZeroMinutes E.g., '5:00pm' becomes '5pm', but '5:01pm'
         * remains '5:01pm'.
         */
        toUsTimeString(
            opt_padHours?: boolean, opt_showAmPm?: boolean,
            opt_omitZeroMinutes?: boolean): string;
        /**
         * Returns XML Schema 2 string representation of date/time.
         * The return value is also ISO 8601 compliant.
         * @param opt_timezone Should the timezone offset be included in the
         * string?.
         */
        toXmlDateTime(opt_timezone?: boolean): string;
    }
}
declare module 'goog:goog.date.DateTime' {
    import alias = ಠ_ಠ.clutz.goog.date.DateTime;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.date {
    /**
     * Class representing a date/time interval. Used for date calculations.
     * <pre>
     * new goog.date.Interval(0, 1) // One month
     * new goog.date.Interval(0, 0, 3, 1) // Three days and one hour
     * new goog.date.Interval(goog.date.Interval.DAYS, 1) // One day
     * </pre>
     */
    class Interval extends Interval_Instance {
        /**
         * Days constant for the date parts.
         */
        static DAYS: string;
        /**
         * Hours constant for the date parts.
         */
        static HOURS: string;
        /**
         * Minutes constant for the date parts.
         */
        static MINUTES: string;
        /**
         * Months constant for the date parts.
         */
        static MONTHS: string;
        /**
         * Seconds constant for the date parts.
         */
        static SECONDS: string;
        /**
         * Years constant for the date parts.
         */
        static YEARS: string;
        /**
         * Parses an XML Schema duration (ISO 8601 extended).
         * @param duration An XML schema duration in textual format. Recurring
         * durations and weeks are not supported.
         */
        static fromIsoString(duration: string): ಠ_ಠ.clutz.goog.date.Interval
            |null;
    }
    class Interval_Instance {
        private noStructuralTyping_: any;
        /**
         * Class representing a date/time interval. Used for date calculations.
         * <pre>
         * new goog.date.Interval(0, 1) // One month
         * new goog.date.Interval(0, 0, 3, 1) // Three days and one hour
         * new goog.date.Interval(goog.date.Interval.DAYS, 1) // One day
         * </pre>
         * @param opt_years Years or string representing date part.
         * @param opt_months Months or number of whatever date part specified by
         * first parameter.
         * @param opt_days Days.
         * @param opt_hours Hours.
         * @param opt_minutes Minutes.
         * @param opt_seconds Seconds.
         */
        constructor(
            opt_years?: number|string, opt_months?: number, opt_days?: number,
            opt_hours?: number, opt_minutes?: number, opt_seconds?: number);
        days: number;
        hours: number;
        minutes: number;
        months: number;
        seconds: number;
        years: number;
        /**
         * Adds the Interval in the argument to this Interval field by field.
         * @param interval The Interval to add.
         */
        add(interval: ಠ_ಠ.clutz.goog.date.Interval|null): void;
        clone(): ಠ_ಠ.clutz.goog.date.Interval;
        /**
         * Tests whether the given interval is equal to this interval.
         * Note, this is a simple field-by-field comparison, it doesn't
         * account for comparisons like "12 months == 1 year".
         * @param other The interval to test.
         */
        equals(other: ಠ_ಠ.clutz.goog.date.Interval|null): boolean;
        getInverse(): ಠ_ಠ.clutz.goog.date.Interval;
        /**
         * Gets the total number of seconds in the time interval. Assumes that
         * months and years are empty.
         */
        getTotalSeconds(): number;
        isZero(): boolean;
        /**
         * Calculates n * (this interval) by memberwise multiplication.
         * @param n An integer.
         */
        times(n: number): ಠ_ಠ.clutz.goog.date.Interval;
        /**
         * Serializes goog.date.Interval into XML Schema duration (ISO 8601
         * extended).
         * @param opt_verbose Include zero fields in the duration string.
         */
        toIsoString(opt_verbose?: boolean): string|null;
    }
}
declare module 'goog:goog.date.Interval' {
    import alias = ಠ_ಠ.clutz.goog.date.Interval;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.date {
    /**
     * Class representing a date/time in GMT+0 time zone, without daylight
     * saving. Defaults to current date and time if none is specified. The
     * get... and the getUTC... methods are equivalent.
     */
    class UtcDateTime extends UtcDateTime_Instance {
        /**
         * Creates a DateTime from a UTC datetime string expressed in ISO 8601
         * format.
         * @param formatted A date or datetime expressed in ISO 8601 format.
         */
        static fromIsoString(formatted: string): ಠ_ಠ.clutz.goog.date.UtcDateTime
            |null;
        static fromTimestamp(timestamp: number):
            ಠ_ಠ.clutz.goog.date.UtcDateTime;
    }
    class UtcDateTime_Instance extends ಠ_ಠ.clutz.goog.date.DateTime_Instance {
        /**
         * Class representing a date/time in GMT+0 time zone, without daylight
         * saving. Defaults to current date and time if none is specified. The
         * get... and the getUTC... methods are equivalent.
         * @param opt_year Four digit UTC year or a date-like object.  If not
         * set, the created object will contain the date determined by
         * goog.now().
         * @param opt_month UTC month, 0 = Jan, 11 = Dec.
         * @param opt_date UTC date of month, 1 - 31.
         * @param opt_hours UTC hours, 0 - 23.
         * @param opt_minutes UTC minutes, 0 - 59.
         * @param opt_seconds UTC seconds, 0 - 59.
         * @param opt_milliseconds UTC milliseconds, 0 - 999.
         */
        constructor(
            opt_year?: number|GlobalDate|null|ಠ_ಠ.clutz.goog.date.Date,
            opt_month?: number, opt_date?: number, opt_hours?: number,
            opt_minutes?: number, opt_seconds?: number,
            opt_milliseconds?: number);
        date: GlobalDate;
        add(interval: ಠ_ಠ.clutz.goog.date.Interval|null): void;
        /**
         * Clones the UtcDateTime object.
         */
        clone(): ಠ_ಠ.clutz.goog.date.UtcDateTime;
        getTimezoneOffset(): number;
    }
}
declare module 'goog:goog.date.UtcDateTime' {
    import alias = ಠ_ಠ.clutz.goog.date.UtcDateTime;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.date.duration {
    /**
     * Accepts a duration in milliseconds and outputs an absolute duration time
     * in form of "1 day", "2 hours", "20 minutes", "2 days 1 hour 15 minutes"
     * etc.
     * @param durationMs Duration in milliseconds.
     */
    function format(durationMs: number): string;
}
declare module 'goog:goog.date.duration' {
    import alias = ಠ_ಠ.clutz.goog.date.duration;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.date {
    /**
     * Constants for months.
     */
    enum month {
        APR,
        AUG,
        DEC,
        FEB,
        JAN,
        JUL,
        JUN,
        MAR,
        MAY,
        NOV,
        OCT,
        SEP,
    }
}
declare module 'goog:goog.date.month' {
    import alias = ಠ_ಠ.clutz.goog.date.month;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.date.relative {
    /**
     * Accepts a timestamp in milliseconds and outputs a relative time in the
     * form of "1 hour ago", "1 day ago", "in 1 hour", "in 2 days" etc.  If the
     * date delta is over 2 weeks, then the output string will be empty.
     * @param dateMs Date in milliseconds.
     */
    function format(dateMs: number): string;
    /**
     * Accepts a timestamp in milliseconds and outputs a relative day. i.e.
     * "Today", "Yesterday", "Tomorrow", or "Sept 15".
     * @param dateMs Date in milliseconds.
     * @param opt_formatter Formatter for the date. Defaults to form 'MMM dd'.
     */
    function formatDay(
        dateMs: number, opt_formatter?: (a: GlobalDate) => string): string;
    /**
     * Accepts a timestamp in milliseconds and outputs a relative time in the
     * form of "1 hour ago", "1 day ago".  All future times will be returned as
     * 0 minutes ago.
     *
     * This is provided for compatibility with users of the previous incarnation
     * of
     * the above {@see #format} method who relied on it protecting against
     * future dates.
     * @param dateMs Date in milliseconds.
     */
    function formatPast(dateMs: number): string;
    /**
     * Formats a date, adding the relative date in parenthesis.  If the date is
     * less than 24 hours then the time will be printed, otherwise the full-date
     * will be used.  Examples: 2:20 PM (1 minute ago) Monday, February 27, 2009
     * (4 days ago) Tuesday, March 20, 2005    // Too long ago for a relative
     * date.
     * @param date A date object.
     * @param opt_shortTimeMsg An optional short time message can be provided if
     * available, so that it's not recalculated in this function.
     * @param opt_fullDateMsg An optional date message can be provided if
     * available, so that it's not recalculated in this function.
     */
    function getDateString(
        date: GlobalDate|null|ಠ_ಠ.clutz.goog.date.DateTime,
        opt_shortTimeMsg?: string, opt_fullDateMsg?: string): string;
    /**
     * Formats a date, adding the relative date in parenthesis.   Functions the
     * same as #getDateString but ensures that the date is always seen to be in
     * the past. If the date is in the future, it will be shown as 0 minutes
     * ago.
     *
     * This is provided for compatibility with users of the previous incarnation
     * of
     * the above {@see #getDateString} method who relied on it protecting against
     * future dates.
     * @param date A date object.
     * @param opt_shortTimeMsg An optional short time message can be provided if
     * available, so that it's not recalculated in this function.
     * @param opt_fullDateMsg An optional date message can be provided if
     * available, so that it's not recalculated in this function.
     */
    function getPastDateString(
        date: GlobalDate|null|ಠ_ಠ.clutz.goog.date.DateTime,
        opt_shortTimeMsg?: string, opt_fullDateMsg?: string): string;
    /**
     * Sets a different formatting function for time deltas ("3 days ago").
     * While its visibility is public, this function is Closure-internal and
     * should not be used in application code.
     * @param formatter The function to use for formatting time deltas (i.e.
     * relative times).
     */
    function setTimeDeltaFormatter(
        formatter: ಠ_ಠ.clutz.goog.date.relative.TimeDeltaFormatter): void;
}
declare module 'goog:goog.date.relative' {
    import alias = ಠ_ಠ.clutz.goog.date.relative;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.date.relative {
    type TimeDeltaFormatter =
        (a: number, b: boolean, c: ಠ_ಠ.clutz.goog.date.relative.Unit) => string;
}
declare module 'goog:goog.date.relative.TimeDeltaFormatter' {
    import alias = ಠ_ಠ.clutz.goog.date.relative.TimeDeltaFormatter;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.date.relative {
    /**
     * Enumeration used to identify time units internally.
     */
    enum Unit {
        DAYS,
        HOURS,
        MINUTES,
    }
}
declare module 'goog:goog.date.relative.Unit' {
    import alias = ಠ_ಠ.clutz.goog.date.relative.Unit;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.date.relativeWithPlurals {}
declare module 'goog:goog.date.relativeWithPlurals' {
    import alias = ಠ_ಠ.clutz.goog.date.relativeWithPlurals;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.date {
    /**
     * Constants for weekdays.
     */
    enum weekDay {
        FRI,
        MON,
        SAT,
        SUN,
        THU,
        TUE,
        WED,
    }
}
declare module 'goog:goog.date.weekDay' {
    import alias = ಠ_ಠ.clutz.goog.date.weekDay;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.db {
    interface DOMErrorLike {
        name?: string;
    }
    /**
     * Deletes a database once all open connections have been closed.
     * @param name The name of the database to delete.
     * @param opt_onBlocked Called if there are active connections to the
     * database.
     */
    function deleteDatabase(
        name: string, opt_onBlocked?: ಠ_ಠ.clutz.goog.db.BlockedCallback):
        ಠ_ಠ.clutz.goog.async.Deferred<any>;
    /**
     * Opens a database connection and wraps it.
     * @param name The name of the database to open.
     * @param opt_version The expected version of the database. If this is
     * larger than the actual version, opt_onUpgradeNeeded will be called
     * (possibly after opt_onBlocked; see {@link goog.db.BlockedCallback}). If
     * this is passed, opt_onUpgradeNeeded must be passed as well.
     * @param opt_onUpgradeNeeded Called if opt_version is greater than the old
     * version of the database. If opt_version is passed, this must be passed as
     * well.
     * @param opt_onBlocked Called if there are active connections to the
     * database.
     */
    function openDatabase(
        name: string, opt_version?: number,
        opt_onUpgradeNeeded?: ಠ_ಠ.clutz.goog.db.UpgradeNeededCallback,
        opt_onBlocked?: ಠ_ಠ.clutz.goog.db.BlockedCallback):
        ಠ_ಠ.clutz.goog.async.Deferred<any>;
}
declare module 'goog:goog.db' {
    import alias = ಠ_ಠ.clutz.goog.db;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.db {
    /**
     * A callback that's called if a blocked event is received. When a database
     * is supposed to be deleted or upgraded (i.e. versionchange), and there are
     * open connections to this database, a block event will be fired to prevent
     * the operations from going through until all such open connections are
     * closed. This callback can be used to notify users that they should close
     * other tabs that have open connections, or to close the connections
     * manually. Databases can also listen for the {@link
     * goog.db.IndexedDb.EventType.VERSION_CHANGE} event to automatically close
     * themselves when they're blocking such operations.
     *
     * This is passed a VersionChangeEvent that has the version of the database
     * before it was deleted, and "null" as the new version.
     */
    type BlockedCallback =
        (a: ಠ_ಠ.clutz.goog.db.IndexedDb.VersionChangeEvent) => any;
}
declare module 'goog:goog.db.BlockedCallback' {
    import alias = ಠ_ಠ.clutz.goog.db.BlockedCallback;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.db {
    /**
     * Creates a new IDBCursor wrapper object. Should not be created directly,
     * access cursor through object store.
     */
    class Cursor extends Cursor_Instance {
        /**
         * Opens a value cursor from IDBObjectStore or IDBIndex over the
         * specified key range. Returns a cursor object which is able to iterate
         * over the given range.
         * @param source Data source to open cursor.
         * @param opt_range The key range. If undefined iterates over the whole
         * data source.
         * @param opt_direction The direction. If undefined moves in a forward
         * direction with duplicates.
         */
        static openCursor(
            source: IDBObjectStore|IDBIndex,
            opt_range?: ಠ_ಠ.clutz.goog.db.KeyRange,
            opt_direction?: ಠ_ಠ.clutz.goog.db.Cursor.Direction):
            ಠ_ಠ.clutz.goog.db.Cursor;
    }
    class Cursor_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        getKey(): ಠ_ಠ.clutz.IDBKeyType|null;
        getValue(): any;
        /**
         * Advances the cursor to the next position along its direction. When
         * new data is available, the NEW_DATA event will be fired. If the
         * cursor has reached the end of the range it will fire the COMPLETE
         * event. If opt_key is specified it will advance to the key it matches
         * in its direction.
         *
         * This wraps the native #continue method on the underlying object.
         * @param opt_key The optional key to advance to.
         */
        next(opt_key?: ಠ_ಠ.clutz.IDBKeyType|null): void;
        /**
         * Deletes the value at the cursor's position, without changing the
         * cursor's position. Once the value is deleted, the cursor's value is
         * set to null.
         */
        remove(): ಠ_ಠ.clutz.goog.async.Deferred<any>;
        /**
         * Updates the value at the current position of the cursor in the object
         * store. If the cursor points to a value that has just been deleted, a
         * new value is created.
         * @param value The value to be stored.
         */
        update(value: any): ಠ_ಠ.clutz.goog.async.Deferred<any>;
    }
}
declare namespace ಠ_ಠ.clutz.goog.db.Cursor {
    type Direction = string&{clutzEnumBrand: never};
    var Direction: {
        NEXT: Direction,
        NEXT_NO_DUPLICATE: Direction,
        PREV: Direction,
        PREV_NO_DUPLICATE: Direction,
    };
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        COMPLETE: EventType,
        ERROR: EventType,
        NEW_DATA: EventType,
    };
}
declare module 'goog:goog.db.Cursor' {
    import alias = ಠ_ಠ.clutz.goog.db.Cursor;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.db {
    var DomErrorLike: GlobalObject;
}
declare module 'goog:goog.db.DomErrorLike' {
    import alias = ಠ_ಠ.clutz.goog.db.DomErrorLike;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.db {
    /**
     * A database error. Since the stack trace can be unhelpful in an
     * asynchronous context, the error provides a message about where it was
     * produced.
     */
    class Error extends Error_Instance {
        /**
         * Constructs an goog.db.Error instance from an DOMException. This
         * abstraction is necessary to provide backwards compatibility with
         * Chrome21.
         * @param ex The exception that was thrown.
         * @param message The error message to add to err if it's wrapped.
         */
        static fromException(ex: DOMError|DOMException, message: string):
            ಠ_ಠ.clutz.goog.db.Error;
        /**
         * Constructs an goog.db.Error instance from an IDBRequest. This
         * abstraction is necessary to provide backwards compatibility with
         * Chrome21.
         * @param request The request that failed.
         * @param message The error message to add to err if it's wrapped.
         */
        static fromRequest(request: IDBRequest, message: string):
            ಠ_ಠ.clutz.goog.db.Error;
        /**
         * Translates an error name to an error code. This is purely kept for
         * backwards compatibility with Chrome21.
         * @param name The name of the erorr.
         */
        static getCode(name: string|undefined): number;
        /**
         * Translates an error code into a more useful message.
         * @param code Error code.
         */
        static getMessage(code: number): string;
        /**
         * Converts an error code used by the old spec, to an error name used by
         * the latest spec.
         * @param code The error code to convert.
         */
        static getName(code: number): ಠ_ಠ.clutz.goog.db.Error.ErrorName;
    }
    class Error_Instance extends ಠ_ಠ.clutz.goog.debug.Error_Instance {
        /**
         * A database error. Since the stack trace can be unhelpful in an
         * asynchronous context, the error provides a message about where it was
         * produced.
         * @param error The DOMError instance returned by the browser for
         * Chrome22+, or an error code for previous versions.
         * @param context A description of where the error occurred.
         * @param opt_message Additional message.
         */
        constructor(
            error: number|DOMError|ಠ_ಠ.clutz.goog.db.DOMErrorLike,
            context: string, opt_message?: string);
        /**
         * The code for this error.
         */
        code: number;
        getName(): string;
    }
}
declare module 'goog:goog.db.Error' {
    import alias = ಠ_ಠ.clutz.goog.db.Error;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.db.Error {
    /**
     * Error codes for database errors.
     */
    enum ErrorCode {
        ABORT_ERR,
        CONSTRAINT_ERR,
        DATA_ERR,
        INVALID_ACCESS_ERR,
        INVALID_STATE_ERR,
        NON_TRANSIENT_ERR,
        NOT_ALLOWED_ERR,
        NOT_FOUND_ERR,
        QUOTA_ERR,
        READ_ONLY_ERR,
        TIMEOUT_ERR,
        TRANSACTION_INACTIVE_ERR,
        UNKNOWN_ERR,
    }
}
declare module 'goog:goog.db.Error.ErrorCode' {
    import alias = ಠ_ಠ.clutz.goog.db.Error.ErrorCode;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.db.Error {
    /**
     * Names of all possible errors as returned from the browser.
     */
    type ErrorName = string&{clutzEnumBrand: never};
    var ErrorName: {
        ABORT_ERR: ErrorName,
        CONSTRAINT_ERR: ErrorName,
        DATA_CLONE_ERR: ErrorName,
        DATA_ERR: ErrorName,
        INVALID_ACCESS_ERR: ErrorName,
        INVALID_STATE_ERR: ErrorName,
        NOT_FOUND_ERR: ErrorName,
        QUOTA_EXCEEDED_ERR: ErrorName,
        READ_ONLY_ERR: ErrorName,
        SYNTAX_ERROR: ErrorName,
        TIMEOUT_ERR: ErrorName,
        TRANSACTION_INACTIVE_ERR: ErrorName,
        UNKNOWN_ERR: ErrorName,
        VERSION_ERR: ErrorName,
    };
}
declare module 'goog:goog.db.Error.ErrorName' {
    import alias = ಠ_ಠ.clutz.goog.db.Error.ErrorName;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.db.Error {
    /**
     * A specific kind of database error. If a Version Change is unable to
     * proceed due to other open database connections, it will block and this
     * error will be thrown.
     */
    class VersionChangeBlockedError extends VersionChangeBlockedError_Instance {
    }
    class VersionChangeBlockedError_Instance extends
        ಠ_ಠ.clutz.goog.debug.Error_Instance {
        /**
         * A specific kind of database error. If a Version Change is unable to
         * proceed due to other open database connections, it will block and
         * this error will be thrown.
         */
        constructor();
    }
}
declare module 'goog:goog.db.Error.VersionChangeBlockedError' {
    import alias = ಠ_ಠ.clutz.goog.db.Error.VersionChangeBlockedError;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.db {
    /**
     * Creates an IDBIndex wrapper object. Indexes are associated with object
     * stores and provide methods for looking up objects based on their non-key
     * properties. Should not be created directly, access through the object
     * store it belongs to.
     */
    class Index extends Index_Instance {}
    class Index_Instance {
        private noStructuralTyping_: any;
        /**
         * Creates an IDBIndex wrapper object. Indexes are associated with
         * object stores and provide methods for looking up objects based on
         * their non-key properties. Should not be created directly, access
         * through the object store it belongs to.
         * @param index Underlying IDBIndex object.
         */
        constructor(index: IDBIndex);
        /**
         * Fetches a single object from the object store. Even if there are
         * multiple objects that match the given key, this method will get only
         * one of them.
         * @param key Key to look up in the index.
         */
        get(key: ಠ_ಠ.clutz.IDBKeyType|null): ಠ_ಠ.clutz.goog.async.Deferred<any>;
        /**
         * Gets all indexed objects. If the key is provided, gets all indexed
         * objects that match the key instead.
         * @param opt_key Key to look up in the index.
         */
        getAll(opt_key?: ಠ_ಠ.clutz.IDBKeyType|
               null): ಠ_ಠ.clutz.goog.async.Deferred<any>;
        /**
         * Gets the keys to look up all the indexed objects. If the key is
         * provided, gets all records for objects that match the key instead.
         * @param opt_key Key to look up in the index.
         */
        getAllKeys(opt_key?: ಠ_ಠ.clutz.IDBKeyType|
                   null): ಠ_ಠ.clutz.goog.async.Deferred<any>;
        /**
         * Looks up a single object from the object store and gives back the key
         * that it's listed under in the object store. Even if there are
         * multiple records that match the given key, this method returns the
         * first.
         * @param key Key to look up in the index.
         */
        getKey(key: ಠ_ಠ.clutz.IDBKeyType|
               null): ಠ_ಠ.clutz.goog.async.Deferred<any>;
        getKeyPath(): any;
        getName(): string;
        isUnique(): boolean;
        /**
         * Opens a cursor over the specified key range. Returns a cursor object
         * which is able to iterate over the given range.
         *
         * Example usage:
         *
         * <code>
         * var cursor = index.openCursor(goog.db.KeyRange.bound('a', 'c'));
         *
         * var key = goog.events.listen(
         * cursor, goog.db.Cursor.EventType.NEW_DATA,
         * function() {
         * // Do something with data.
         * cursor.next();
         * });
         *
         * goog.events.listenOnce(
         * cursor, goog.db.Cursor.EventType.COMPLETE,
         * function() {
         * // Clean up listener, and perform a finishing operation on the data.
         * goog.events.unlistenByKey(key);
         * });
         * </code>
         * @param opt_range The key range. If undefined iterates over the whole
         * object store.
         * @param opt_direction The direction. If undefined moves in a forward
         * direction with duplicates.
         */
        openCursor(
            opt_range?: ಠ_ಠ.clutz.goog.db.KeyRange,
            opt_direction?: ಠ_ಠ.clutz.goog.db.Cursor.Direction):
            ಠ_ಠ.clutz.goog.db.Cursor;
    }
}
declare module 'goog:goog.db.Index' {
    import alias = ಠ_ಠ.clutz.goog.db.Index;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.db {
    /**
     * Creates an IDBDatabase wrapper object. The database object has methods
     * for setting the version to change the structure of the database and for
     * creating transactions to get or modify the stored records. Should not be
     * created directly, call {@link goog.db.openDatabase} to set up the
     * connection.
     */
    class IndexedDb extends IndexedDb_Instance {}
    class IndexedDb_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * Creates an IDBDatabase wrapper object. The database object has
         * methods for setting the version to change the structure of the
         * database and for creating transactions to get or modify the stored
         * records. Should not be created directly, call {@link
         * goog.db.openDatabase} to set up the connection.
         * @param db Underlying IndexedDB database object.
         */
        constructor(db: IDBDatabase);
        /**
         * Closes the database connection. Metadata queries can still be made
         * after this method is called, but otherwise this wrapper should not be
         * used further.
         */
        close(): void;
        /**
         * Creates an object store in this database. Can only be called inside a
         * {@link goog.db.UpgradeNeededCallback}.
         * @param name Name for the new object store.
         * @param opt_params Options object. The available options are: keyPath,
         * which is a string and determines what object attribute to use as the
         * key when storing objects in this object store; and autoIncrement,
         * which is a boolean, which defaults to false and determines whether
         * the object store should automatically generate keys for stored
         * objects. If keyPath is not provided and autoIncrement is false, then
         * all insert operations must provide a key as a parameter.
         */
        createObjectStore(name: string, opt_params?: IDBObjectStoreParameters):
            ಠ_ಠ.clutz.goog.db.ObjectStore;
        /**
         * Creates a new transaction.
         * @param storeNames A list of strings that contains the transaction's
         * scope, the object stores that this transaction can operate on.
         * @param opt_mode The mode of the transaction. If not present, the
         * default is READ_ONLY.
         */
        createTransaction(
            storeNames: string[],
            opt_mode?: ಠ_ಠ.clutz.goog.db.Transaction.TransactionMode):
            ಠ_ಠ.clutz.goog.db.Transaction;
        /**
         * Deletes an object store. Can only be called inside a
         * {@link goog.db.UpgradeNeededCallback}.
         * @param name Name of the object store to delete.
         */
        deleteObjectStore(name: string): void;
        disposeInternal(): void;
        getName(): string;
        getObjectStoreNames(): DOMStringList|null;
        getVersion(): number;
        isOpen(): boolean;
    }
}
declare namespace ಠ_ಠ.clutz.goog.db.IndexedDb {
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        ABORT: EventType,
        CLOSE: EventType,
        ERROR: EventType,
        VERSION_CHANGE: EventType,
    };
    class VersionChangeEvent extends VersionChangeEvent_Instance {}
    class VersionChangeEvent_Instance extends
        ಠ_ಠ.clutz.goog.events.Event_Instance {
        /**
         * Event representing a (possibly attempted) change in the database
         * structure.
         *
         * At time of writing, no Chrome versions support oldVersion or
         * newVersion. See http://crbug.com/153122.
         * @param oldVersion The previous version of the database.
         * @param newVersion The version the database is being or has been
         * updated to.
         */
        constructor(oldVersion: number, newVersion: number);
        /**
         * The version the database is being or has been updated to.
         */
        newVersion: number;
        /**
         * The previous version of the database.
         */
        oldVersion: number;
    }
}
declare module 'goog:goog.db.IndexedDb' {
    import alias = ಠ_ಠ.clutz.goog.db.IndexedDb;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.db {
    /**
     * Creates a new IDBKeyRange wrapper object. Should not be created directly,
     * instead use one of the static factory methods. For example:
     */
    class KeyRange extends KeyRange_Instance {
        /**
         * Creates a key range with upper and lower bounds.
         * @param lower The value of the lower bound.
         * @param upper The value of the upper bound.
         * @param opt_lowerOpen If true, the range excludes the lower bound
         * value.
         * @param opt_upperOpen If true, the range excludes the upper bound
         * value.
         */
        static bound(
            lower: ಠ_ಠ.clutz.IDBKeyType|null, upper: ಠ_ಠ.clutz.IDBKeyType|null,
            opt_lowerOpen?: boolean,
            opt_upperOpen?: boolean): ಠ_ಠ.clutz.goog.db.KeyRange;
        /**
         * Creates a key range with a lower bound only, finishes at the last
         * record.
         * @param lower The value of the lower bound.
         * @param opt_lowerOpen If true, the range excludes the lower bound
         * value.
         */
        static lowerBound(
            lower: ಠ_ಠ.clutz.IDBKeyType|null,
            opt_lowerOpen?: boolean): ಠ_ಠ.clutz.goog.db.KeyRange;
        /**
         * Creates a new key range for a single value.
         * @param key The single value in the range.
         */
        static only(key: ಠ_ಠ.clutz.IDBKeyType|null): ಠ_ಠ.clutz.goog.db.KeyRange;
        /**
         * Creates a key range with a upper bound only, starts at the first
         * record.
         * @param upper The value of the upper bound.
         * @param opt_upperOpen If true, the range excludes the upper bound
         * value.
         */
        static upperBound(
            upper: ಠ_ಠ.clutz.IDBKeyType|null,
            opt_upperOpen?: boolean): ಠ_ಠ.clutz.goog.db.KeyRange;
    }
    class KeyRange_Instance {
        private noStructuralTyping_: any;
        /**
         * Creates a new IDBKeyRange wrapper object. Should not be created
         * directly, instead use one of the static factory methods. For example:
         * @param range Underlying IDBKeyRange object.
         */
        constructor(range: IDBKeyRange);
        /**
         * Returns underlying key range object. This is used in ObjectStore's
         * openCursor and count methods.
         */
        range(): IDBKeyRange;
    }
}
declare module 'goog:goog.db.KeyRange' {
    import alias = ಠ_ಠ.clutz.goog.db.KeyRange;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.db {
    /**
     * Creates an IDBObjectStore wrapper object. Object stores have methods for
     * storing and retrieving records, and are accessed through a transaction
     * object. They also have methods for creating indexes associated with the
     * object store. They can only be created when setting the version of the
     * database. Should not be created directly, access object stores through
     * transactions.
     */
    class ObjectStore extends ObjectStore_Instance {}
    class ObjectStore_Instance {
        private noStructuralTyping_: any;
        /**
         * Creates an IDBObjectStore wrapper object. Object stores have methods
         * for storing and retrieving records, and are accessed through a
         * transaction object. They also have methods for creating indexes
         * associated with the object store. They can only be created when
         * setting the version of the database. Should not be created directly,
         * access object stores through transactions.
         * @param store The backing IndexedDb object.
         */
        constructor(store: IDBObjectStore);
        /**
         * Adds an object to the object store. Requires that there is no object
         * with the same key already present.
         * @param value The value to add.
         * @param opt_key The key to use. Cannot be used if the keyPath was
         * specified for the object store. If the keyPath was not specified but
         * autoIncrement was not enabled, it must be used.
         */
        add(value: any, opt_key?: ಠ_ಠ.clutz.IDBKeyType|null):
            ಠ_ಠ.clutz.goog.async.Deferred<any>;
        /**
         * Deletes all objects from the store.
         */
        clear(): ಠ_ಠ.clutz.goog.async.Deferred<any>;
        /**
         * Gets number of records within a key range.
         * @param opt_range The key range. If undefined, this will count all
         * records in the object store.
         */
        count(opt_range?: ಠ_ಠ.clutz.goog.db.KeyRange):
            ಠ_ಠ.clutz.goog.async.Deferred<any>;
        /**
         * Creates an index in this object store. Can only be called inside a
         * {@link goog.db.UpgradeNeededCallback}.
         * @param name Name of the index to create.
         * @param keyPath Attribute or array of attributes to index on.
         * @param opt_parameters Optional parameters object. The only available
         * option is unique, which defaults to false. If unique is true, the
         * index will enforce that there is only ever one object in the object
         * store for each unique value it indexes on.
         */
        createIndex(
            name: string, keyPath: string|string[],
            opt_parameters?: GlobalObject): ಠ_ಠ.clutz.goog.db.Index;
        /**
         * Deletes an index from the object store. Can only be called inside a
         * {@link goog.db.UpgradeNeededCallback}.
         * @param name Name of the index to delete.
         */
        deleteIndex(name: string): void;
        /**
         * Gets an object from the store. If no object is present with that key
         * the result is {@code undefined}.
         * @param key The key to look up.
         */
        get(key: ಠ_ಠ.clutz.IDBKeyType|null): ಠ_ಠ.clutz.goog.async.Deferred<any>;
        /**
         * Gets all objects from the store and returns them as an array.
         * @param opt_range The key range. If undefined iterates over the whole
         * object store.
         * @param opt_direction The direction. If undefined moves in a forward
         * direction with duplicates.
         */
        getAll(
            opt_range?: ಠ_ಠ.clutz.goog.db.KeyRange,
            opt_direction?: ಠ_ಠ.clutz.goog.db.Cursor.Direction):
            ಠ_ಠ.clutz.goog.async.Deferred<any>;
        /**
         * Gets an object from the store. If no object is present with that key
         * the result is {@code undefined}.
         */
        getAllKeys(): ಠ_ಠ.clutz.goog.async.Deferred<any>;
        /**
         * Gets an index.
         * @param name Name of the index to fetch.
         */
        getIndex(name: string): ಠ_ಠ.clutz.goog.db.Index;
        getName(): string;
        /**
         * Opens a cursor over the specified key range. Returns a cursor object
         * which is able to iterate over the given range.
         *
         * Example usage:
         *
         * <code>
         * var cursor = objectStore.openCursor(goog.db.Range.bound('a', 'c'));
         *
         * var key = goog.events.listen(
         * cursor, goog.db.Cursor.EventType.NEW_DATA, function() {
         * // Do something with data.
         * cursor.next();
         * });
         *
         * goog.events.listenOnce(
         * cursor, goog.db.Cursor.EventType.COMPLETE, function() {
         * // Clean up listener, and perform a finishing operation on the data.
         * goog.events.unlistenByKey(key);
         * });
         * </code>
         * @param opt_range The key range. If undefined iterates over the whole
         * object store.
         * @param opt_direction The direction. If undefined moves in a forward
         * direction with duplicates.
         */
        openCursor(
            opt_range?: ಠ_ಠ.clutz.goog.db.KeyRange,
            opt_direction?: ಠ_ಠ.clutz.goog.db.Cursor.Direction):
            ಠ_ಠ.clutz.goog.db.Cursor;
        /**
         * Adds an object to the object store. Replaces existing objects with
         * the same key.
         * @param value The value to put.
         * @param opt_key The key to use. Cannot be used if the keyPath was
         * specified for the object store. If the keyPath was not specified but
         * autoIncrement was not enabled, it must be used.
         */
        put(value: any, opt_key?: ಠ_ಠ.clutz.IDBKeyType|null):
            ಠ_ಠ.clutz.goog.async.Deferred<any>;
        /**
         * Removes an object from the store. No-op if there is no object present
         * with the given key.
         * @param keyOrRange The key or range to remove objects under.
         */
        remove(keyOrRange: ಠ_ಠ.clutz.IDBKeyType|null|
               ಠ_ಠ.clutz.goog.db.KeyRange): ಠ_ಠ.clutz.goog.async.Deferred<any>;
    }
}
declare module 'goog:goog.db.ObjectStore' {
    import alias = ಠ_ಠ.clutz.goog.db.ObjectStore;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.db {
    /**
     * Creates a new transaction. Transactions contain methods for accessing
     * object stores and are created from the database object. Should not be
     * created directly, open a database and call createTransaction on it.
     */
    class Transaction extends Transaction_Instance {}
    class Transaction_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * Creates a new transaction. Transactions contain methods for accessing
         * object stores and are created from the database object. Should not be
         * created directly, open a database and call createTransaction on it.
         * @param tx IndexedDB transaction to back this wrapper.
         * @param db The database that this transaction modifies.
         */
        constructor(tx: IDBTransaction, db: ಠ_ಠ.clutz.goog.db.IndexedDb);
        /**
         * Aborts this transaction. No pending operations will be applied to the
         * database. Dispatches an ABORT event.
         */
        abort(): void;
        disposeInternal(): void;
        getDatabase(): ಠ_ಠ.clutz.goog.db.IndexedDb;
        getMode(): ಠ_ಠ.clutz.goog.db.Transaction.TransactionMode;
        /**
         * Opens an object store to do operations on in this transaction. The
         * requested object store must be one that is in this transaction's
         * scope.
         * @param name The name of the requested object store.
         */
        objectStore(name: string): ಠ_ಠ.clutz.goog.db.ObjectStore;
        wait(): ಠ_ಠ.clutz.goog.async.Deferred<any>;
    }
}
declare namespace ಠ_ಠ.clutz.goog.db.Transaction {
    type EventTypes = string&{clutzEnumBrand: never};
    var EventTypes: {
        ABORT: EventTypes,
        COMPLETE: EventTypes,
        ERROR: EventTypes,
    };
}
declare module 'goog:goog.db.Transaction' {
    import alias = ಠ_ಠ.clutz.goog.db.Transaction;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.db.Transaction {
    /**
     * The three possible transaction modes.
     */
    type TransactionMode = string&{clutzEnumBrand: never};
    var TransactionMode: {
        READ_ONLY: TransactionMode,
        READ_WRITE: TransactionMode,
        VERSION_CHANGE: TransactionMode,
    };
}
declare module 'goog:goog.db.Transaction.TransactionMode' {
    import alias = ಠ_ಠ.clutz.goog.db.Transaction.TransactionMode;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.db {
    /**
     * A callback that's called when opening a database whose internal version
     * is lower than the version passed to {@link goog.db.openDatabase}.
     *
     * This callback is passed three arguments: a VersionChangeEvent with both
     * the old version and the new version of the database; the database that's
     * being opened, for which you can create and delete object stores; and the
     * version change transaction, with which you can abort the version change.
     *
     * Note that the transaction is not active, which means that it can't be
     * used to make changes to the database. However, since there is a
     * transaction running, you can't create another one via {@link
     * goog.db.IndexedDb.createTransaction}. This means that it's not possible
     * to manipulate the database other than creating or removing object stores
     * in this callback.
     */
    type UpgradeNeededCallback =
        (a: ಠ_ಠ.clutz.goog.db.IndexedDb.VersionChangeEvent,
         b: ಠ_ಠ.clutz.goog.db.IndexedDb, c: ಠ_ಠ.clutz.goog.db.Transaction) =>
            any;
}
declare module 'goog:goog.db.UpgradeNeededCallback' {
    import alias = ಠ_ಠ.clutz.goog.db.UpgradeNeededCallback;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
    var FORCE_SLOPPY_STACKS: boolean;
    var LOGGING_ENABLED: boolean;
    /**
     * Max length of stack to try and output
     */
    var MAX_STACK_DEPTH: number;
    /**
     * Class used for singleton goog.debug.Trace.  Used for timing slow points
     * in the code. Based on the java Tracer class but optimized for javascript.
     * See com.google.common.tracing.Tracer.
     * It is also possible to bridge from this class to other tracer classes via
     * adding listeners.
     */
    class Trace_ extends Trace__Instance {
        /**
         * Returns the current time. Done through a wrapper function so it can
         * be overridden by application code. Gmail has an ActiveX extension
         * that provides higher precision timing info.
         */
        static now(): number;
    }
    class Trace__Instance {
        private noStructuralTyping_: any;
        /**
         * Maximum size of the trace before we discard events
         */
        MAX_TRACE_SIZE: number;
        /**
         * Adds a comment to the trace. Makes it possible to see when a specific
         * event happened in relation to the traces.
         * @param comment A comment that is inserted into the trace.
         * @param opt_type Type used to identify the tracer. If a comment is
         * given a type and multiple comments are done on that type then a
         * "TOTAL line will be produced showing the total number of comments of
         * that type.
         * @param opt_timeStamp The timestamp to insert the comment. If not
         * specified, the current time wil be used.
         */
        addComment(
            comment: string, opt_type?: string|null,
            opt_timeStamp?: number|null): void;
        /**
         * Adds up to three callback functions which are called on {@code
         * startTracer},
         * {@code stopTracer} and {@code addComment} in order to bridge from the
         * Closure tracer singleton object to any tracer class.
         * @param callbacks An object literal containing the callback functions.
         */
        addTraceCallbacks(
            callbacks: ಠ_ಠ.clutz.goog.debug.Trace_.TracerCallbacks): void;
        /**
         * Clears the current trace
         */
        clearCurrentTrace(): void;
        /**
         * Returns a formatted string for the current trace
         */
        getFormattedTrace(): string;
        /**
         * Returns the total number of allocations since the GC stats were
         * reset. Only works in IE.
         */
        getTotalVarAlloc(): number;
        /**
         * Initializes and resets the current trace
         * @param defaultThreshold The default threshold below which the tracer
         * output will be suppressed. Can be overridden on a per-Tracer basis.
         */
        initCurrentTrace(defaultThreshold: number): void;
        /**
         * Removes all registered callback functions. Mainly used for testing.
         */
        removeAllListeners(): void;
        /**
         * Resets the trace.
         * @param defaultThreshold The default threshold below which the tracer
         * output will be suppressed. Can be overridden on a per-Tracer basis.
         */
        reset(defaultThreshold: number): void;
        /**
         * Sets the ActiveX object that can be used to get GC tracing in IE6.
         * @param gcTracer GCTracer ActiveX object.
         */
        setGcTracer(gcTracer: GlobalObject|null): void;
        /**
         * Add the ability to explicitly set the start time. This is useful for
         * example for measuring initial load time where you can set a variable
         * as soon as the main page of the app is loaded and then later call
         * this function when the Tracer code has been loaded.
         * @param startTime The start time to set.
         */
        setStartTime(startTime: number): void;
        /**
         * Starts a tracer
         * @param comment A comment used to identify the tracer. Does not need
         * to be unique.
         * @param opt_type Type used to identify the tracer. If a Trace is given
         * a type (the first argument to the constructor) and multiple Traces
         * are done on that type then a "TOTAL line will be produced showing the
         * total number of traces and the sum of the time ("TOTAL Database 2 (37
         * ms)" in our example). These traces should be mutually exclusive or
         * else the sum won't make sense (the time will be double counted if the
         * second starts before the first ends).
         */
        startTracer(comment: string, opt_type?: string): number;
        /**
         * Stops a tracer
         * @param id The id of the tracer that is ending.
         * @param opt_silenceThreshold Threshold below which the tracer is
         * silenced.
         */
        stopTracer(id: number|undefined|null, opt_silenceThreshold?: number):
            number|null;
        /**
         * Returns a formatted string that describes the thread trace.
         */
        toString(): string;
    }
    /**
     * Catches onerror events fired by windows and similar objects.
     * @param logFunc The function to call with the error information.
     * @param opt_cancel Whether to stop the error from reaching the browser.
     * @param opt_target Object that fires onerror events.
     */
    function catchErrors(
        logFunc: (a: GlobalObject|null) => any, opt_cancel?: boolean,
        opt_target?: GlobalObject | null): void;
    /**
     * Creates a string representing a given primitive or object, and for an
     * object, all its properties and nested objects. NOTE: The output will
     * include Uids on all objects that were exposed. Any added Uids will be
     * removed before returning.
     * @param obj Object to expose.
     * @param opt_showFn Also show properties that are functions (by default,
     * functions are omitted).
     */
    function deepExpose(obj: any, opt_showFn?: boolean): string;
    /**
     * Converts an object to an Error using the object's toString if it's not
     * already an Error, adds a stacktrace if there isn't one, and optionally
     * adds an extra message.
     * @param err The original thrown error, object, or string.
     * @param opt_message optional additional message to add to the error.
     */
    function enhanceError(err: any, opt_message?: string): GlobalError;
    /**
     * Converts an object to an Error using the object's toString if it's not
     * already an Error, adds a stacktrace if there isn't one, and optionally
     * adds context to the Error, which is reported by the closure error
     * reporter.
     * @param err The original thrown error, object, or string.
     * @param opt_context Key-value context to add to the Error.
     */
    function enhanceErrorWithContext(
        err: any, opt_context?: {[key: string]: string}): GlobalError;
    /**
     * Creates a string representing an object and all its properties.
     * @param obj Object to expose.
     * @param opt_showFn Show the functions as well as the properties, default
     * is false.
     */
    function expose(
        obj: GlobalObject|null|undefined, opt_showFn?: boolean): string;
    /**
     * Recursively outputs a nested array as a string.
     * @param arr The array.
     */
    function exposeArray(arr: any[]|null): string;
    /**
     * Freezes the given object, but only in debug mode (and in browsers that
     * support it).  Note that this is a shallow freeze, so for deeply nested
     * objects it must be called at every level to ensure deep immutability.
     */
    function freeze<T = any>(arg: T): T;
    /**
     * Gets a function name
     * @param fn Function to get name of.
     */
    function getFunctionName(fn: (...a: any[]) => any): string;
    /**
     * Gets the current stack trace, either starting from the caller or starting
     * from a specified function that's currently on the call stack.
     * @param fn If provided, when collecting the stack trace all frames above
     * the topmost call to this function, including that call, will be left out
     * of the stack trace.
     */
    function getStacktrace(fn?: ((...a: any[]) => any)|null): string;
    /**
     * Gets the current stack trace. Simple and iterative - doesn't worry about
     * catching circular references or getting the args.
     * @param opt_depth Optional maximum depth to trace back to.
     */
    function getStacktraceSimple(opt_depth?: number): string;
    /**
     * Makes whitespace visible by replacing it with printable characters.
     * This is useful in finding diffrences between the expected and the actual
     * output strings of a testcase.
     * @param string whose whitespace needs to be made visible.
     */
    function makeWhitespaceVisible(string: string): string;
    /**
     * Normalizes the error/exception object between browsers.
     * @param err Raw error object.
     */
    function normalizeErrorObject(err: any): {
        fileName?: any,
        lineNumber?: any,
        message?: any,
        name?: any,
        stack?: any
    };
    /**
     * Returns the type of a value. If a constructor is passed, and a suitable
     * string cannot be found, 'unknown type name' will be returned.
     *
     * <p>Forked rather than moved from {@link goog.asserts.getType_}
     * to avoid adding a dependency to goog.asserts.
     * @param value A constructor, object, or primitive.
     */
    function runtimeType(value: any): string;
    /**
     * Set a custom function name resolver.
     * @param resolver Resolves functions to their names.
     */
    function setFunctionResolver(resolver: (a: (...a: any[]) => any) => string):
        void;
}
declare module 'goog:goog.debug' {
    import alias = ಠ_ಠ.clutz.goog.debug;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
    /**
     * Create and install a log handler that logs to window.console if available
     */
    class Console extends Console_Instance {
        /**
         * Install the console and start capturing if "Debug=true" is in the
         * page URL
         */
        static autoInstall(): void;
        /**
         * Global console logger instance
         */
        static instance: ಠ_ಠ.clutz.goog.debug.Console|null;
        /**
         * Sets the console to which to log.
         * @param console The console to which to log.
         */
        static setConsole(console: GlobalObject): void;
        /**
         * Show an alert with all of the captured debug information.
         * Information is only captured if console is not available
         */
        static show(): void;
    }
    class Console_Instance {
        private noStructuralTyping_: any;
        isCapturing_: boolean;
        logBuffer_: string;
        publishHandler_(a: ಠ_ಠ.clutz.goog.debug.LogRecord|null): void;
        /**
         * Adds a logger name to be filtered.
         * @param loggerName the logger name to add.
         */
        addFilter(loggerName: string): void;
        /**
         * Adds a log record.
         * @param logRecord The log entry.
         */
        addLogRecord(logRecord: ಠ_ಠ.clutz.goog.debug.LogRecord|null): void;
        /**
         * Returns the text formatter used by this console
         */
        getFormatter(): ಠ_ಠ.clutz.goog.debug.TextFormatter;
        /**
         * Removes a logger name to be filtered.
         * @param loggerName the logger name to remove.
         */
        removeFilter(loggerName: string): void;
        /**
         * Sets whether we are currently capturing logger output.
         * @param capturing Whether to capture logger output.
         */
        setCapturing(capturing: boolean): void;
    }
}
declare module 'goog:goog.debug.Console' {
    import alias = ಠ_ಠ.clutz.goog.debug.Console;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
    /**
     * Provides a debug DebugWindow that is bound to the goog.debug.Logger.
     * It handles log messages and writes them to the DebugWindow. This doesn't
     * provide a lot of functionality that the old Gmail logging infrastructure
     * provided like saving debug logs for exporting to the server. Now that we
     * have an event-based logging infrastructure, we can encapsulate that
     * functionality in a separate class.
     */
    class DebugWindow extends DebugWindow_Instance {
        /**
         * How long to keep the cookies for in milliseconds
         */
        static COOKIE_TIME: number;
        /**
         * Max number of messages to be saved
         */
        static MAX_SAVED: number;
        static isEnabled(identifier: string): boolean;
    }
    class DebugWindow_Instance {
        private noStructuralTyping_: any;
        /**
         * Provides a debug DebugWindow that is bound to the goog.debug.Logger.
         * It handles log messages and writes them to the DebugWindow. This
         * doesn't provide a lot of functionality that the old Gmail logging
         * infrastructure provided like saving debug logs for exporting to the
         * server. Now that we have an event-based logging infrastructure, we
         * can encapsulate that functionality in a separate class.
         * @param opt_identifier Identifier for this logging class.
         * @param opt_prefix Prefix prepended to messages.
         */
        constructor(opt_identifier?: string, opt_prefix?: string);
        /**
         * Identifier for this logging class
         */
        identifier: string;
        /**
         * Array used to buffer log output
         */
        outputBuffer: ಠ_ಠ.clutz.goog.html.SafeHtml[];
        /**
         * Adds a logger name to be filtered.
         * @param loggerName the logger name to add.
         */
        addFilter(loggerName: string): void;
        /**
         * Adds a log record.
         * @param logRecord the LogRecord.
         */
        addLogRecord(logRecord: ಠ_ಠ.clutz.goog.debug.LogRecord|null): void;
        /**
         * Adds a separator to the debug window.
         */
        addSeparator(): void;
        /**
         * Clears the contents of the debug window
         */
        clear(): void;
        /**
         * Gets the formatter for outputting to the debug window. The default
         * formatter is an instance of goog.debug.HtmlFormatter
         */
        getFormatter(): ಠ_ಠ.clutz.goog.debug.Formatter|null;
        getStyleRules(): ಠ_ಠ.clutz.goog.html.SafeStyleSheet;
        hasActiveWindow(): boolean;
        /**
         * Initializes the debug window.
         */
        init(): void;
        /**
         * Whether we are currently capturing logger output.
         */
        isCapturing(): boolean;
        /**
         * Whether the DebugWindow is enabled. When the DebugWindow is enabled,
         * it tries to keep its window open and logs all messages to the window.
         * When the DebugWindow is disabled, it stops logging messages to its
         * window.
         */
        isEnabled(): boolean;
        /**
         * Timestamp for the last time the log was written to.
         */
        lastCall: number;
        /**
         * Removes a logger name to be filtered.
         * @param loggerName the logger name to remove.
         */
        removeFilter(loggerName: string): void;
        /**
         * Modify the size of the circular buffer. Allows the log to retain more
         * information while the window is closed.
         * @param size New size of the circular buffer.
         */
        resetBufferWithNewSize(size: number): void;
        /**
         * Sets whether we are currently capturing logger output.
         * @param capturing Whether to capture logger output.
         */
        setCapturing(capturing: boolean): void;
        /**
         * Sets whether the DebugWindow is enabled. When the DebugWindow is
         * enabled, it tries to keep its window open and log all messages to the
         * window. When the DebugWindow is disabled, it stops logging messages
         * to its window. The DebugWindow also saves this state to a cookie so
         * that it's persisted across application refreshes.
         * @param enable Whether the DebugWindow is enabled.
         */
        setEnabled(enable: boolean): void;
        /**
         * Sets whether the debug window should be force enabled when a severe
         * log is encountered.
         * @param enableOnSevere Whether to enable on severe logs..
         */
        setForceEnableOnSevere(enableOnSevere: boolean): void;
        /**
         * Sets the formatter for outputting to the debug window.
         * @param formatter The formatter to use.
         */
        setFormatter(formatter: ಠ_ಠ.clutz.goog.debug.Formatter|null): void;
        /**
         * Sets the welcome message shown when the window is first opened or
         * reset.
         * @param msg An HTML string.
         */
        setWelcomeMessage(msg: string): void;
        /**
         * HTML string printed when the debug window opens
         */
        welcomeMessage: string;
        /**
         * Reference to debug window
         */
        win: Window|null;
        /**
         * Write to the log and maybe scroll into view.
         */
        writeBufferToLog(): void;
        /**
         * Writes the initial HTML of the debug window.
         */
        writeInitialDocument(): void;
        /**
         * Writes all saved messages to the DebugWindow.
         */
        writeSavedMessages(): void;
    }
}
declare module 'goog:goog.debug.DebugWindow' {
    import alias = ಠ_ಠ.clutz.goog.debug.DebugWindow;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
    /**
     * A class for solving development CSS issues/emulating the CSS Compiler.
     */
    class DevCss extends DevCss_Instance {}
    class DevCss_Instance {
        private noStructuralTyping_: any;
        /**
         * A class for solving development CSS issues/emulating the CSS
         * Compiler.
         * @param opt_userAgent The user agent, if not passed in, will be
         * determined using goog.userAgent.
         * @param opt_userAgentVersion The user agent's version. If not passed
         * in, will be determined using goog.userAgent.
         */
        constructor(
            opt_userAgent?: ಠ_ಠ.clutz.goog.debug.DevCss.UserAgent,
            opt_userAgentVersion?: number|string);
        /**
         * Rewrites the CSSOM as needed to activate any useragent-specific
         * selectors.
         * @param opt_enableIe6ReadyHandler If true(the default), and the
         * userAgent is ie6, we set a document "ready" event handler to walk the
         * DOM and make combined selector className changes. Having this
         * parameter also aids unit testing.
         */
        activateBrowserSpecificCssRules(opt_enableIe6ReadyHandler?: boolean):
            void;
    }
}
declare module 'goog:goog.debug.DevCss' {
    import alias = ಠ_ಠ.clutz.goog.debug.DevCss;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug.DevCss {
    /**
     * A list of possible user agent strings.
     */
    type UserAgent = string&{clutzEnumBrand: never};
    var UserAgent: {
        EDGE: UserAgent,
        FIREFOX: UserAgent,
        GECKO: UserAgent,
        IE: UserAgent,
        MOBILE: UserAgent,
        OPERA: UserAgent,
        SAFARI: UserAgent,
        WEBKIT: UserAgent,
    };
}
declare module 'goog:goog.debug.DevCss.UserAgent' {
    import alias = ಠ_ಠ.clutz.goog.debug.DevCss.UserAgent;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
    /**
     * A class for visualising logger calls in a div element.
     */
    class DivConsole extends DivConsole_Instance {}
    class DivConsole_Instance {
        private noStructuralTyping_: any;
        /**
         * A class for visualising logger calls in a div element.
         * @param element The element to append to.
         */
        constructor(element: GlobalElement|null);
        domHelper_: ಠ_ಠ.clutz.goog.dom.DomHelper;
        elementOwnerDocument_: any;
        element_: GlobalElement|null;
        formatter_: ಠ_ಠ.clutz.goog.debug.HtmlFormatter|null;
        isCapturing_: boolean;
        publishHandler_(a: ಠ_ಠ.clutz.goog.debug.LogRecord|null): void;
        /**
         * Adds a log record.
         * @param logRecord The log entry.
         */
        addLogRecord(logRecord: ಠ_ಠ.clutz.goog.debug.LogRecord|null): void;
        /**
         * Adds a separator to the debug window.
         */
        addSeparator(): void;
        /**
         * Clears the console.
         */
        clear(): void;
        /**
         * Gets the formatter for outputting to the console. The default
         * formatter is an instance of goog.debug.HtmlFormatter
         */
        getFormatter(): ಠ_ಠ.clutz.goog.debug.Formatter;
        /**
         * Installs styles for the log messages and its div
         */
        installStyles(): void;
        /**
         * Sets whether we are currently capturing logger output.
         * @param capturing Whether to capture logger output.
         */
        setCapturing(capturing: boolean): void;
        /**
         * Sets the formatter for outputting to the console.
         * @param formatter The formatter to use.
         */
        setFormatter(formatter: ಠ_ಠ.clutz.goog.debug.HtmlFormatter|null): void;
    }
}
declare module 'goog:goog.debug.DivConsole' {
    import alias = ಠ_ಠ.clutz.goog.debug.DivConsole;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
    interface EntryPointMonitor {
        /**
         * Try to remove an instrumentation wrapper created by this monitor.
         * If the function passed to unwrap is not a wrapper created by this
         * monitor, then we will do nothing.
         *
         * Notice that some wrappers may not be unwrappable. For example, if
         * other monitors have applied their own wrappers, then it will be
         * impossible to unwrap them because their wrappers will have captured
         * our wrapper.
         *
         * So it is important that entry points are unwrapped in the reverse
         * order that they were wrapped.
         * @param fn A function to unwrap.
         */
        unwrap(a: (...a: any[]) => any): (...a: any[]) => any;
        /**
         * Instruments a function.
         * @param fn A function to instrument.
         */
        wrap(a: (...a: any[]) => any): (...a: any[]) => any;
    }
}
declare module 'goog:goog.debug.EntryPointMonitor' {
    import alias = ಠ_ಠ.clutz.goog.debug.EntryPointMonitor;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
    /**
     * Base class for custom error objects.
     */
    class Error extends Error_Instance {}
    class Error_Instance extends GlobalError {
        /**
         * Base class for custom error objects.
         * @param opt_msg The message associated with the error.
         */
        constructor(opt_msg?: any);
        message: string;
        /**
         * Whether to report this error to the server. Setting this to false
         * will cause the error reporter to not report the error back to the
         * server, which can be useful if the client knows that the error has
         * already been logged on the server.
         */
        reportErrorToServer: boolean;
        stack: any;
        name: string;
    }
}
declare module 'goog:goog.debug.Error' {
    import alias = ಠ_ಠ.clutz.goog.debug.Error;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
    /**
     * The ErrorHandler can be used to to wrap functions with a try/catch
     * statement. If an exception is thrown, the given error handler function
     * will be called.
     *
     * When this object is disposed, it will stop handling exceptions and
     * tracing. It will also try to restore window.setTimeout and
     * window.setInterval if it wrapped them. Notice that in the general case,
     * it is not technically possible to remove the wrapper, because functions
     * have no knowledge of what they have been assigned to. So the app is
     * responsible for other forms of unwrapping.
     */
    class ErrorHandler extends ErrorHandler_Instance {}
    class ErrorHandler_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance
        implements ಠ_ಠ.clutz.goog.debug.EntryPointMonitor {
        /**
         * The ErrorHandler can be used to to wrap functions with a try/catch
         * statement. If an exception is thrown, the given error handler
         * function will be called.
         *
         * When this object is disposed, it will stop handling exceptions and
         * tracing. It will also try to restore window.setTimeout and
         * window.setInterval if it wrapped them. Notice that in the general
         * case, it is not technically possible to remove the wrapper, because
         * functions have no knowledge of what they have been assigned to. So
         * the app is responsible for other forms of unwrapping.
         * @param handler Handler for exceptions.
         */
        constructor(handler: (...a: any[]) => any);
        disposeInternal(): void;
        /**
         * Helps {@link #protectEntryPoint} by actually creating the protected
         * wrapper function, after {@link #protectEntryPoint} determines that
         * one does not already exist for the given function.  Can be overriden
         * by subclasses that may want to implement different error handling, or
         * add additional entry point hooks.
         * @param fn An entry point function to be protected.
         */
        getProtectedFunction(fn: (...a: any[]) => any): (...a: any[]) => any;
        /**
         * Installs exception protection for an entry point function. When an
         * exception is thrown from a protected function, a handler will be
         * invoked to handle it.
         * @param fn An entry point function to be protected.
         */
        protectEntryPoint(fn: (...a: any[]) => any): (...a: any[]) => any;
        /**
         * Install exception protection for window.requestAnimationFrame to
         * handle exceptions.
         */
        protectWindowRequestAnimationFrame(): void;
        /**
         * Install exception protection for window.setInterval to handle
         * exceptions.
         */
        protectWindowSetInterval(): void;
        /**
         * Installs exception protection for window.setTimeout to handle
         * exceptions.
         */
        protectWindowSetTimeout(): void;
        /**
         * Enable tracers when instrumenting entry points.
         * @param newVal See above.
         */
        setAddTracersToProtectedFunctions(newVal: boolean): void;
        /**
         * Set whether to add a prefix to all error messages that occur in
         * protected functions.
         * @param prefixErrorMessages Whether to add a prefix to error messages.
         */
        setPrefixErrorMessages(prefixErrorMessages: boolean): void;
        /**
         * Set whether to wrap errors that occur in protected functions in a
         * goog.debug.ErrorHandler.ProtectedFunctionError.
         * @param wrapErrors Whether to wrap errors.
         */
        setWrapErrors(wrapErrors: boolean): void;
        unwrap(fn: (...a: any[]) => any): (...a: any[]) => any;
        wrap(fn: (...a: any[]) => any): (...a: any[]) => any;
    }
}
declare module 'goog:goog.debug.ErrorHandler' {
    import alias = ಠ_ಠ.clutz.goog.debug.ErrorHandler;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug.ErrorHandler {
    /**
     * Error thrown to the caller of a protected entry point if the entry point
     * throws an error.
     */
    class ProtectedFunctionError extends ProtectedFunctionError_Instance {
        /**
         * Text to prefix the message with.
         */
        static MESSAGE_PREFIX: string;
    }
    class ProtectedFunctionError_Instance extends
        ಠ_ಠ.clutz.goog.debug.Error_Instance {
        /**
         * Error thrown to the caller of a protected entry point if the entry
         * point throws an error.
         * @param cause The error thrown by the entry point.
         */
        constructor(cause: any);
        /**
         * The error thrown by the entry point.
         */
        cause: any;
        stack: any;
    }
}
declare module 'goog:goog.debug.ErrorHandler.ProtectedFunctionError' {
    import alias = ಠ_ಠ.clutz.goog.debug.ErrorHandler.ProtectedFunctionError;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
    /**
     * Constructs an error reporter. Internal Use Only. To install an error
     * reporter see the {@see #install} method below.
     */
    class ErrorReporter extends ErrorReporter_Instance {
        static ALLOW_AUTO_PROTECT: boolean;
        /**
         * Default implementation of XHR sender interface.
         * @param uri URI to make request to.
         * @param method Send method.
         * @param content Post data.
         * @param opt_headers Map of headers to add to the request.
         */
        static defaultXhrSender(
            uri: string, method: string, content: string,
            opt_headers?: GlobalObject|null): void;
        /**
         * Installs an error reporter to catch all JavaScript errors raised.
         * @param loggingUrl The URL to which the errors caught will be
         * reported.
         * @param opt_contextProvider When a report is to be sent to the server,
         * this method will be called, and given an opportunity to modify the
         * context object before submission to the server.
         * @param opt_noAutoProtect Whether to automatically add handlers for
         * onerror and to protect entry points.  If apps have other error
         * reporting facilities, it may make sense for them to set these up
         * themselves and use the ErrorReporter just for transmission of
         * reports.
         */
        static install(
            loggingUrl: string,
            opt_contextProvider?:
                (a: GlobalError, b: {[key: string]: string}) => any,
            opt_noAutoProtect?: boolean): ಠ_ಠ.clutz.goog.debug.ErrorReporter;
    }
    class ErrorReporter_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * Constructs an error reporter. Internal Use Only. To install an error
         * reporter see the {@see #install} method below.
         * @param handlerUrl The URL to which all errors will be reported.
         * @param opt_contextProvider When a report is to be sent to the server,
         * this method will be called, and given an opportunity to modify the
         * context object before submission to the server.
         * @param opt_noAutoProtect Whether to automatically add handlers for
         * onerror and to protect entry points.  If apps have other error
         * reporting facilities, it may make sense for them to set these up
         * themselves and use the ErrorReporter just for transmission of
         * reports.
         */
        constructor(
            handlerUrl: string,
            opt_contextProvider?:
                (a: GlobalError, b: {[key: string]: string}) => any,
            opt_noAutoProtect?: boolean);
        disposeInternal(): void;
        /**
         * Handler for caught exceptions. Sends report to the LoggingServlet and
         * notifies any listeners.
         * @param e The exception.
         * @param opt_context Context values to optionally include in the error
         * report.
         */
        handleException(
            e: GlobalObject|null, opt_context?: {[key: string]: string}): void;
        /**
         * Installs exception protection for an entry point function in addition
         * to those that are protected by default.
         * Has no effect in IE because window.onerror is used for reporting
         * exceptions in that case.
         * @param fn An entry point function to be protected.
         */
        protectAdditionalEntryPoint(a: (...a: any[]) => any):
            (...a: any[]) => any;
        /**
         * Sends an error report to the logging URL.  This will not consult the
         * context provider, the report will be sent exactly as specified.
         * @param message Error description.
         * @param fileName URL of the JavaScript file with the error.
         * @param line Line number of the error.
         * @param opt_trace Call stack trace of the error.
         * @param opt_context Context information to include in the request.
         */
        sendErrorReport(
            message: string, fileName: string, line: number, opt_trace?: string,
            opt_context?: {[key: string]: string}): void;
        setAdditionalArguments(urlArgs: {[key: string]: string}): void;
        setContextPrefix(prefix: string): void;
        /**
         * Add headers to the logging url.
         * @param loggingHeaders Extra headers to send to the logging URL.
         */
        setLoggingHeaders(loggingHeaders: GlobalObject|null): void;
        setTruncationLimit(limit: number|null): void;
        /**
         * Set the function used to send error reports to the server.
         * @param xhrSender If provided, this will be used to send a report to
         * the server instead of the default method. The function will be given
         * the URI, HTTP method request content, and (optionally) request
         * headers to be added.
         */
        setXhrSender(
            xhrSender:
                (a: string, b: string, c: string,
                 d?: GlobalObject|null) => any): void;
    }
}
declare module 'goog:goog.debug.ErrorReporter' {
    import alias = ಠ_ಠ.clutz.goog.debug.ErrorReporter;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug.ErrorReporter {
    /**
     * Event broadcast when an exception is logged.
     */
    class ExceptionEvent extends ExceptionEvent_Instance {
        /**
         * Event type for notifying of a logged exception.
         */
        static TYPE: string;
    }
    class ExceptionEvent_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
        /**
         * Event broadcast when an exception is logged.
         * @param error The exception that was was reported.
         * @param context The context values sent to the server alongside this
         * error.
         */
        constructor(error: GlobalError|null, context: {[key: string]: string});
        /**
         * Context values sent to the server alongside this report.
         */
        context: {[key: string]: string};
        /**
         * The error that was reported.
         */
        error: GlobalError|null;
    }
}
declare module 'goog:goog.debug.ErrorReporter.ExceptionEvent' {
    import alias = ಠ_ಠ.clutz.goog.debug.ErrorReporter.ExceptionEvent;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
    /**
     * Provides a Fancy extension to the DebugWindow class.  Allows filtering
     * based on loggers and levels.
     */
    class FancyWindow extends FancyWindow_Instance {
        /**
         * Constant indicating if we are able to use localStorage to persist
         * filters
         */
        static HAS_LOCAL_STORE: boolean;
        /**
         * Constant defining the prefix to use when storing log levels
         */
        static LOCAL_STORE_PREFIX: string;
    }
    class FancyWindow_Instance extends
        ಠ_ಠ.clutz.goog.debug.DebugWindow_Instance {
        /**
         * Provides a Fancy extension to the DebugWindow class.  Allows
         * filtering based on loggers and levels.
         * @param opt_identifier Idenitifier for this logging class.
         * @param opt_prefix Prefix pre-pended to messages.
         */
        constructor(opt_identifier?: string, opt_prefix?: string);
        lastCall: number;
        getStyleRules(): ಠ_ಠ.clutz.goog.html.SafeStyleSheet;
        writeBufferToLog(): void;
        writeInitialDocument(): void;
    }
}
declare module 'goog:goog.debug.FancyWindow' {
    import alias = ಠ_ಠ.clutz.goog.debug.FancyWindow;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
    /**
     * Base class for Formatters. A Formatter is used to format a LogRecord into
     * something that can be displayed to the user.
     */
    class Formatter extends Formatter_Instance {}
    class Formatter_Instance {
        private noStructuralTyping_: any;
        /**
         * Base class for Formatters. A Formatter is used to format a LogRecord
         * into something that can be displayed to the user.
         * @param opt_prefix The prefix to place before text records.
         */
        constructor(opt_prefix?: string);
        prefix_: string;
        /**
         * Whether to append newlines to the end of formatted log records.
         */
        appendNewline: boolean;
        /**
         * Formats a record.
         * @param logRecord the logRecord to format.
         */
        formatRecord(a: ಠ_ಠ.clutz.goog.debug.LogRecord|null): string;
        /**
         * Formats a record as SafeHtml.
         * @param logRecord the logRecord to format.
         */
        formatRecordAsHtml(a: ಠ_ಠ.clutz.goog.debug.LogRecord|
                           null): ಠ_ಠ.clutz.goog.html.SafeHtml;
        /**
         * Returns the start time provider. By default, this is the default
         * instance but can be changed.
         */
        getStartTimeProvider(): ಠ_ಠ.clutz.goog.debug.RelativeTimeProvider|null;
        /**
         * Resets the start relative time.
         */
        resetRelativeTimeStart(): void;
        /**
         * Sets the start time provider. By default, this is the default
         * instance but can be changed.
         * @param provider The provider to use.
         */
        setStartTimeProvider(provider:
                                 ಠ_ಠ.clutz.goog.debug.RelativeTimeProvider|
                             null): void;
        /**
         * Whether to show absolute time in the DebugWindow.
         */
        showAbsoluteTime: boolean;
        /**
         * Whether to show the logger exception text.
         */
        showExceptionText: boolean;
        /**
         * Whether to show the logger name in the DebugWindow.
         */
        showLoggerName: boolean;
        /**
         * Whether to show relative time in the DebugWindow.
         */
        showRelativeTime: boolean;
        /**
         * Whether to show the severity level.
         */
        showSeverityLevel: boolean;
    }
}
declare module 'goog:goog.debug.Formatter' {
    import alias = ಠ_ಠ.clutz.goog.debug.Formatter;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
    /**
     * Displays frames per seconds that the window this component is
     * rendered in is animating at.
     */
    class FpsDisplay extends FpsDisplay_Instance {
        /**
         * CSS class for the FPS display.
         */
        static CSS: string;
        /**
         * The number of samples per FPS report.
         */
        static SAMPLES: number;
    }
    class FpsDisplay_Instance extends ಠ_ಠ.clutz.goog.ui.Component_Instance {
        /**
         * Displays frames per seconds that the window this component is
         * rendered in is animating at.
         * @param opt_domHelper An optional dom helper.
         */
        constructor(opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        createDom(): void;
        enterDocument(): void;
        exitDocument(): void;
        getFps(): number;
    }
}
declare namespace ಠ_ಠ.clutz.goog.debug.FpsDisplay {
    class FpsAnimation_ extends FpsAnimation__Instance {}
    class FpsAnimation__Instance {
        private noStructuralTyping_: any;
        onAnimationFrame(now: number): void;
    }
}
declare module 'goog:goog.debug.FpsDisplay' {
    import alias = ಠ_ಠ.clutz.goog.debug.FpsDisplay;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
    /**
     * Formatter that returns formatted html. See formatRecord for the classes
     * it uses for various types of formatted output.
     */
    class HtmlFormatter extends HtmlFormatter_Instance {
        /**
         * Exposes an exception that has been caught by a try...catch and
         * outputs the error as HTML with a stack trace.
         * @param err Error object or string.
         * @param fn If provided, when collecting the stack trace all frames
         * above the topmost call to this function, including that call, will be
         * left out of the stack trace.
         */
        static exposeException(err: any, fn?: ((...a: any[]) => any)|null):
            string;
        /**
         * Exposes an exception that has been caught by a try...catch and
         * outputs the error with a stack trace.
         * @param err Error object or string.
         * @param fn If provided, when collecting the stack trace all frames
         * above the topmost call to this function, including that call, will be
         * left out of the stack trace.
         */
        static exposeExceptionAsHtml(
            err: any,
            fn?: ((...a: any[]) => any)|null): ಠ_ಠ.clutz.goog.html.SafeHtml;
    }
    class HtmlFormatter_Instance extends
        ಠ_ಠ.clutz.goog.debug.Formatter_Instance {
        /**
         * Formatter that returns formatted html. See formatRecord for the
         * classes it uses for various types of formatted output.
         * @param opt_prefix The prefix to place before text records.
         */
        constructor(opt_prefix?: string);
        showAbsoluteTime: boolean;
        /**
         * Formats a record
         * @param logRecord the logRecord to format.
         */
        formatRecord(logRecord: ಠ_ಠ.clutz.goog.debug.LogRecord|null): string;
        /**
         * Formats a record.
         * @param logRecord the logRecord to format.
         */
        formatRecordAsHtml(logRecord: ಠ_ಠ.clutz.goog.debug.LogRecord|
                           null): ಠ_ಠ.clutz.goog.html.SafeHtml;
        /**
         * Whether to show the logger exception text
         */
        showExceptionText: boolean;
    }
}
declare module 'goog:goog.debug.HtmlFormatter' {
    import alias = ಠ_ಠ.clutz.goog.debug.HtmlFormatter;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
    /**
     * Creates the log buffer.
     */
    class LogBuffer extends LogBuffer_Instance {
        static CAPACITY: number;
        /**
         * A static method that always returns the same instance of LogBuffer.
         */
        static getInstance(): ಠ_ಠ.clutz.goog.debug.LogBuffer;
        static instance_: ಠ_ಠ.clutz.goog.debug.LogBuffer;
        static isBufferingEnabled(): boolean;
    }
    class LogBuffer_Instance {
        private noStructuralTyping_: any;
        /**
         * Adds a log record to the buffer, possibly overwriting the oldest
         * record.
         * @param level One of the level identifiers.
         * @param msg The string message.
         * @param loggerName The name of the source logger.
         */
        addRecord(
            level: ಠ_ಠ.clutz.goog.debug.Logger.Level|null, msg: string,
            loggerName: string): ಠ_ಠ.clutz.goog.debug.LogRecord;
        /**
         * Removes all buffered log records.
         */
        clear(): void;
        /**
         * Calls the given function for each buffered log record, starting with
         * the oldest one.
         * @param func The function to call.
         */
        forEachRecord(func: (a: ಠ_ಠ.clutz.goog.debug.LogRecord) => any): void;
    }
}
declare module 'goog:goog.debug.LogBuffer' {
    import alias = ಠ_ಠ.clutz.goog.debug.LogBuffer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug.LogManager {
    /**
     * Creates a function that can be passed to goog.debug.catchErrors. The
     * function will log all reported errors using the given logger.
     * @param opt_logger The logger to log the errors to. Defaults to the root
     * logger.
     */
    function createFunctionForCatchErrors(
        opt_logger?: ಠ_ಠ.clutz.goog.debug.Logger|null): (a: GlobalObject|
                                                         null) => any;
    /**
     * Finds a named logger.
     * @param name A name for the logger. This should be a dot-separated name
     * and should normally be based on the package name or class name of the
     * subsystem, such as goog.net.BrowserChannel.
     */
    function getLogger(name: string): ಠ_ಠ.clutz.goog.debug.Logger;
    /**
     * Returns all the loggers.
     */
    function getLoggers(): {[key: string]: ಠ_ಠ.clutz.goog.debug.Logger};
    /**
     * Returns the root of the logger tree namespace, the logger with the empty
     * string as its name.
     */
    function getRoot(): ಠ_ಠ.clutz.goog.debug.Logger;
    /**
     * Initializes the LogManager if not already initialized.
     */
    function initialize(): void;
}
declare module 'goog:goog.debug.LogManager' {
    import alias = ಠ_ಠ.clutz.goog.debug.LogManager;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
    /**
     * LogRecord objects are used to pass logging requests between
     * the logging framework and individual log Handlers.
     */
    class LogRecord extends LogRecord_Instance {
        static ENABLE_SEQUENCE_NUMBERS: boolean;
    }
    class LogRecord_Instance {
        private noStructuralTyping_: any;
        /**
         * LogRecord objects are used to pass logging requests between
         * the logging framework and individual log Handlers.
         * @param level One of the level identifiers.
         * @param msg The string message.
         * @param loggerName The name of the source logger.
         * @param opt_time Time this log record was created if other than now.
         * If 0, we use #goog.now.
         * @param opt_sequenceNumber Sequence number of this log record. This
         * should only be passed in when restoring a log record from
         * persistence.
         */
        constructor(
            level: ಠ_ಠ.clutz.goog.debug.Logger.Level|null, msg: string,
            loggerName: string, opt_time?: number, opt_sequenceNumber?: number);
        /**
         * Get the exception that is part of the log record.
         */
        getException(): GlobalObject|null;
        /**
         * Get the logging message level, for example Level.SEVERE.
         */
        getLevel(): ಠ_ಠ.clutz.goog.debug.Logger.Level|null;
        /**
         * Get the source Logger's name.
         */
        getLoggerName(): string;
        /**
         * Get the "raw" log message, before localization or formatting.
         */
        getMessage(): string;
        /**
         * Get event time in milliseconds since 1970.
         */
        getMillis(): number;
        /**
         * Get the sequence number.
         * <p>
         * Sequence numbers are normally assigned in the LogRecord
         * constructor, which assigns unique sequence numbers to
         * each new LogRecord in increasing order.
         */
        getSequenceNumber(): number;
        /**
         * Sets all fields of the log record.
         * @param level One of the level identifiers.
         * @param msg The string message.
         * @param loggerName The name of the source logger.
         * @param opt_time Time this log record was created if other than now.
         * If 0, we use #goog.now.
         * @param opt_sequenceNumber Sequence number of this log record. This
         * should only be passed in when restoring a log record from
         * persistence.
         */
        reset(
            level: ಠ_ಠ.clutz.goog.debug.Logger.Level|null, msg: string,
            loggerName: string, opt_time?: number,
            opt_sequenceNumber?: number): void;
        /**
         * Set the exception that is part of the log record.
         * @param exception the exception.
         */
        setException(exception: GlobalObject|null): void;
        /**
         * Set the logging message level, for example Level.SEVERE.
         * @param level the logging message level.
         */
        setLevel(level: ಠ_ಠ.clutz.goog.debug.Logger.Level|null): void;
        /**
         * Get the source Logger's name.
         * @param loggerName source logger name (may be null).
         */
        setLoggerName(loggerName: string): void;
        /**
         * Set the "raw" log message, before localization or formatting.
         * @param msg the raw message string.
         */
        setMessage(msg: string): void;
        /**
         * Set event time in milliseconds since 1970.
         * @param time event time in millis since 1970.
         */
        setMillis(time: number): void;
    }
}
declare module 'goog:goog.debug.LogRecord' {
    import alias = ಠ_ಠ.clutz.goog.debug.LogRecord;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
    /**
     * A message value that can be handled by a Logger.
     *
     * Functions are treated like callbacks, but are only called when the
     * event's log level is enabled. This is useful for logging messages that
     * are expensive to construct.
     */
    type Loggable = string|(() => string);
}
declare module 'goog:goog.debug.Loggable' {
    import alias = ಠ_ಠ.clutz.goog.debug.Loggable;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
    /**
     * The Logger is an object used for logging debug messages. Loggers are
     * normally named, using a hierarchical dot-separated namespace. Logger
     * names can be arbitrary strings, but they should normally be based on the
     * package name or class name of the logged component, such as
     * goog.net.BrowserChannel.
     *
     * The Logger object is loosely based on the java class
     * java.util.logging.Logger. It supports different levels of filtering for
     * different loggers.
     *
     * The logger object should never be instantiated by application code. It
     * should always use the goog.debug.Logger.getLogger function.
     */
    class Logger extends Logger_Instance {
        static ENABLE_HIERARCHY: boolean;
        static ENABLE_PROFILER_LOGGING: boolean;
        static ROOT_LOGGER_NAME: string;
        /**
         * Finds or creates a logger for a named subsystem. If a logger has
         * already been created with the given name it is returned. Otherwise a
         * new logger is created. If a new logger is created its log level will
         * be configured based on the LogManager configuration and it will
         * configured to also send logging output to its parent's handlers. It
         * will be registered in the LogManager global namespace.
         * @param name A name for the logger. This should be a dot-separated
         * name and should normally be based on the package name or class name
         * of the subsystem, such as goog.net.BrowserChannel.
         */
        static getLogger(name: string): ಠ_ಠ.clutz.goog.debug.Logger;
        /**
         * Logs a message to profiling tools, if available.
         * {@see https://developers.google.com/web-toolkit/speedtracer/logging-api}
         * {@see http://msdn.microsoft.com/en-us/library/dd433074(VS.85).aspx}
         * @param msg The message to log.
         */
        static logToProfilers(msg: string): void;
    }
    class Logger_Instance {
        private noStructuralTyping_: any;
        /**
         * The Logger is an object used for logging debug messages. Loggers are
         * normally named, using a hierarchical dot-separated namespace. Logger
         * names can be arbitrary strings, but they should normally be based on
         * the package name or class name of the logged component, such as
         * goog.net.BrowserChannel.
         *
         * The Logger object is loosely based on the java class
         * java.util.logging.Logger. It supports different levels of filtering
         * for different loggers.
         *
         * The logger object should never be instantiated by application code.
         * It should always use the goog.debug.Logger.getLogger function.
         * @param name The name of the Logger.
         */
        constructor(name: string);
        /**
         * Adds a handler to the logger. This doesn't use the event system
         * because we want to be able to add logging to the event system.
         * @param handler Handler function to add.
         */
        addHandler(handler: (...a: any[]) => any): void;
        /**
         * Logs a message at the Logger.Level.CONFIG level.
         * If the logger is currently enabled for the given message level then
         * the given message is forwarded to all the registered output Handler
         * objects.
         * @param msg The message to log.
         * @param opt_exception An exception associated with the message.
         */
        config(msg: string|(() => string), opt_exception?: GlobalError|null):
            void;
        /**
         * Logs a message at the Logger.Level.FINE level.
         * If the logger is currently enabled for the given message level then
         * the given message is forwarded to all the registered output Handler
         * objects.
         * @param msg The message to log.
         * @param opt_exception An exception associated with the message.
         */
        fine(msg: string|(() => string), opt_exception?: GlobalError|null):
            void;
        /**
         * Logs a message at the Logger.Level.FINER level.
         * If the logger is currently enabled for the given message level then
         * the given message is forwarded to all the registered output Handler
         * objects.
         * @param msg The message to log.
         * @param opt_exception An exception associated with the message.
         */
        finer(msg: string|(() => string), opt_exception?: GlobalError|null):
            void;
        /**
         * Logs a message at the Logger.Level.FINEST level.
         * If the logger is currently enabled for the given message level then
         * the given message is forwarded to all the registered output Handler
         * objects.
         * @param msg The message to log.
         * @param opt_exception An exception associated with the message.
         */
        finest(msg: string|(() => string), opt_exception?: GlobalError|null):
            void;
        /**
         * Returns the children of this logger as a map of the child name to the
         * logger.
         */
        getChildren(): GlobalObject;
        /**
         * Returns the effective level of the logger based on its ancestors'
         * levels.
         */
        getEffectiveLevel(): ಠ_ಠ.clutz.goog.debug.Logger.Level|null;
        /**
         * Gets the log level specifying which message levels will be logged by
         * this logger. Message levels lower than this value will be discarded.
         * The level value Level.OFF can be used to turn off logging. If the
         * level is null, it means that this node should inherit its level from
         * its nearest ancestor with a specific (non-null) level value.
         */
        getLevel(): ಠ_ಠ.clutz.goog.debug.Logger.Level|null;
        /**
         * Creates a new log record and adds the exception (if present) to it.
         * @param level One of the level identifiers.
         * @param msg The string message.
         * @param opt_exception An exception associated with the message.
         */
        getLogRecord(
            level: ಠ_ಠ.clutz.goog.debug.Logger.Level|null, msg: string,
            opt_exception?: null|GlobalObject): ಠ_ಠ.clutz.goog.debug.LogRecord;
        /**
         * Gets the name of this logger.
         */
        getName(): string;
        /**
         * Returns the parent of this logger.
         */
        getParent(): ಠ_ಠ.clutz.goog.debug.Logger|null;
        /**
         * Logs a message at the Logger.Level.INFO level.
         * If the logger is currently enabled for the given message level then
         * the given message is forwarded to all the registered output Handler
         * objects.
         * @param msg The message to log.
         * @param opt_exception An exception associated with the message.
         */
        info(msg: string|(() => string), opt_exception?: GlobalError|null):
            void;
        /**
         * Checks if a message of the given level would actually be logged by
         * this logger. This check is based on the Loggers effective level,
         * which may be inherited from its parent.
         * @param level The level to check.
         */
        isLoggable(level: ಠ_ಠ.clutz.goog.debug.Logger.Level|null): boolean;
        /**
         * Logs a message. If the logger is currently enabled for the
         * given message level then the given message is forwarded to all the
         * registered output Handler objects.
         * @param level One of the level identifiers.
         * @param msg The message to log.
         * @param opt_exception An exception associated with the message.
         */
        log(level: ಠ_ಠ.clutz.goog.debug.Logger.Level|null,
            msg: string|(() => string),
            opt_exception?: null|GlobalObject): void;
        /**
         * Logs a LogRecord. If the logger is currently enabled for the
         * given message level then the given message is forwarded to all the
         * registered output Handler objects.
         * @param logRecord A log record to log.
         */
        logRecord(logRecord: ಠ_ಠ.clutz.goog.debug.LogRecord|null): void;
        /**
         * Removes a handler from the logger. This doesn't use the event system
         * because we want to be able to add logging to the event system.
         * @param handler Handler function to remove.
         */
        removeHandler(handler: (...a: any[]) => any): boolean;
        /**
         * Set the log level specifying which message levels will be logged by
         * this logger. Message levels lower than this value will be discarded.
         * The level value Level.OFF can be used to turn off logging. If the new
         * level is null, it means that this node should inherit its level from
         * its nearest ancestor with a specific (non-null) level value.
         * @param level The new level.
         */
        setLevel(level: ಠ_ಠ.clutz.goog.debug.Logger.Level|null): void;
        /**
         * Logs a message at the Logger.Level.SEVERE level.
         * If the logger is currently enabled for the given message level then
         * the given message is forwarded to all the registered output Handler
         * objects.
         * @param msg The message to log.
         * @param opt_exception An exception associated with the message.
         */
        severe(msg: string|(() => string), opt_exception?: GlobalError|null):
            void;
        /**
         * Logs a message at the Logger.Level.SHOUT level.
         * If the logger is currently enabled for the given message level then
         * the given message is forwarded to all the registered output Handler
         * objects.
         * @param msg The message to log.
         * @param opt_exception An exception associated with the message.
         */
        shout(msg: string|(() => string), opt_exception?: GlobalError|null):
            void;
        /**
         * Logs a message at the Logger.Level.WARNING level.
         * If the logger is currently enabled for the given message level then
         * the given message is forwarded to all the registered output Handler
         * objects.
         * @param msg The message to log.
         * @param opt_exception An exception associated with the message.
         */
        warning(msg: string|(() => string), opt_exception?: GlobalError|null):
            void;
    }
}
declare module 'goog:goog.debug.Logger' {
    import alias = ಠ_ಠ.clutz.goog.debug.Logger;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug.Logger {
    /**
     * The Level class defines a set of standard logging levels that
     * can be used to control logging output.  The logging Level objects
     * are ordered and are specified by ordered integers.  Enabling logging
     * at a given level also enables logging at all higher levels.
     * <p>
     * Clients should normally use the predefined Level constants such
     * as Level.SEVERE.
     * <p>
     * The levels in descending order are:
     * <ul>
     * <li>SEVERE (highest value)
     * <li>WARNING
     * <li>INFO
     * <li>CONFIG
     * <li>FINE
     * <li>FINER
     * <li>FINEST  (lowest value)
     * </ul>
     * In addition there is a level OFF that can be used to turn
     * off logging, and a level ALL that can be used to enable
     * logging of all messages.
     */
    class Level extends Level_Instance {
        /**
         * ALL indicates that all messages should be logged.
         * This level is initialized to <CODE>0</CODE>.
         */
        static ALL: ಠ_ಠ.clutz.goog.debug.Logger.Level;
        /**
         * CONFIG is a message level for static configuration messages.
         * This level is initialized to <CODE>700</CODE>.
         */
        static CONFIG: ಠ_ಠ.clutz.goog.debug.Logger.Level;
        /**
         * FINE is a message level providing tracing information.
         * This level is initialized to <CODE>500</CODE>.
         */
        static FINE: ಠ_ಠ.clutz.goog.debug.Logger.Level;
        /**
         * FINER indicates a fairly detailed tracing message.
         * This level is initialized to <CODE>400</CODE>.
         */
        static FINER: ಠ_ಠ.clutz.goog.debug.Logger.Level;
        /**
         * FINEST indicates a highly detailed tracing message.
         * This level is initialized to <CODE>300</CODE>.
         */
        static FINEST: ಠ_ಠ.clutz.goog.debug.Logger.Level;
        /**
         * INFO is a message level for informational messages.
         * This level is initialized to <CODE>800</CODE>.
         */
        static INFO: ಠ_ಠ.clutz.goog.debug.Logger.Level;
        /**
         * OFF is a special level that can be used to turn off logging.
         * This level is initialized to <CODE>Infinity</CODE>.
         */
        static OFF: ಠ_ಠ.clutz.goog.debug.Logger.Level;
        /**
         * The predefined levels.
         */
        static PREDEFINED_LEVELS: ಠ_ಠ.clutz.goog.debug.Logger.Level[];
        /**
         * SEVERE is a message level indicating a serious failure.
         * This level is initialized to <CODE>1000</CODE>.
         */
        static SEVERE: ಠ_ಠ.clutz.goog.debug.Logger.Level;
        /**
         * SHOUT is a message level for extra debugging loudness.
         * This level is initialized to <CODE>1200</CODE>.
         */
        static SHOUT: ಠ_ಠ.clutz.goog.debug.Logger.Level;
        /**
         * WARNING is a message level indicating a potential problem.
         * This level is initialized to <CODE>900</CODE>.
         */
        static WARNING: ಠ_ಠ.clutz.goog.debug.Logger.Level;
        /**
         * Gets the predefined level with the given name.
         * @param name The name of the level.
         */
        static getPredefinedLevel(name: string):
            ಠ_ಠ.clutz.goog.debug.Logger.Level|null;
        /**
         * Gets the highest predefined level <= #value.
         * @param value Level value.
         */
        static getPredefinedLevelByValue(value: number):
            ಠ_ಠ.clutz.goog.debug.Logger.Level|null;
    }
    class Level_Instance {
        private noStructuralTyping_: any;
        /**
         * The Level class defines a set of standard logging levels that
         * can be used to control logging output.  The logging Level objects
         * are ordered and are specified by ordered integers.  Enabling logging
         * at a given level also enables logging at all higher levels.
         * <p>
         * Clients should normally use the predefined Level constants such
         * as Level.SEVERE.
         * <p>
         * The levels in descending order are:
         * <ul>
         * <li>SEVERE (highest value)
         * <li>WARNING
         * <li>INFO
         * <li>CONFIG
         * <li>FINE
         * <li>FINER
         * <li>FINEST  (lowest value)
         * </ul>
         * In addition there is a level OFF that can be used to turn
         * off logging, and a level ALL that can be used to enable
         * logging of all messages.
         * @param name The name of the level.
         * @param value The numeric value of the level.
         */
        constructor(name: string, value: number);
        /**
         * The name of the level
         */
        name: string;
        /**
         * The numeric value of the level
         */
        value: number;
        toString(): string;
    }
}
declare module 'goog:goog.debug.Logger.Level' {
    import alias = ಠ_ಠ.clutz.goog.debug.Logger.Level;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
    /**
     * A simple object to keep track of a timestamp considered the start of
     * something. The main use is for the logger system to maintain a start time
     * that is occasionally reset. For example, in Gmail, we reset this relative
     * time at the start of a user action so that timings are offset from the
     * beginning of the action. This class also provides a singleton as the
     * default behavior for most use cases is to share the same start time.
     */
    class RelativeTimeProvider extends RelativeTimeProvider_Instance {
        static getDefaultInstance(): ಠ_ಠ.clutz.goog.debug.RelativeTimeProvider
            |null;
    }
    class RelativeTimeProvider_Instance {
        private noStructuralTyping_: any;
        get(): number;
        /**
         * Resets the start time to now.
         */
        reset(): void;
        /**
         * Sets the start time to the specified time.
         * @param timeStamp The start time.
         */
        set(timeStamp: number): void;
    }
}
declare module 'goog:goog.debug.RelativeTimeProvider' {
    import alias = ಠ_ಠ.clutz.goog.debug.RelativeTimeProvider;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
    /**
     * Formatter that returns formatted plain text
     */
    class TextFormatter extends TextFormatter_Instance {}
    class TextFormatter_Instance extends
        ಠ_ಠ.clutz.goog.debug.Formatter_Instance {
        /**
         * Formatter that returns formatted plain text
         * @param opt_prefix The prefix to place before text records.
         */
        constructor(opt_prefix?: string);
        appendNewline: boolean;
        showAbsoluteTime: boolean;
        showExceptionText: boolean;
        /**
         * Formats a record as text
         * @param logRecord the logRecord to format.
         */
        formatRecord(logRecord: ಠ_ಠ.clutz.goog.debug.LogRecord|null): string;
        /**
         * Formats a record as text
         * @param logRecord the logRecord to format.
         */
        formatRecordAsHtml(logRecord: ಠ_ಠ.clutz.goog.debug.LogRecord|
                           null): ಠ_ಠ.clutz.goog.html.SafeHtml;
    }
}
declare module 'goog:goog.debug.TextFormatter' {
    import alias = ಠ_ಠ.clutz.goog.debug.TextFormatter;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
    /**
     * Singleton trace object
     */
    var Trace: ಠ_ಠ.clutz.goog.debug.Trace_|null;
}
declare module 'goog:goog.debug.Trace' {
    import alias = ಠ_ಠ.clutz.goog.debug.Trace;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
    var devCssRunner: GlobalObject;
}
declare module 'goog:goog.debug.devCssRunner' {
    import alias = ಠ_ಠ.clutz.goog.debug.devCssRunner;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug.entryPointRegistry {
    /**
     * Configures a monitor to wrap all entry points.
     *
     * Entry points that have already been registered are immediately wrapped by
     * the monitor. When an entry point is registered in the future, it will
     * also be wrapped by the monitor when it is registered.
     * @param monitor An entry point monitor.
     */
    function monitorAll(monitor: ಠ_ಠ.clutz.goog.debug.EntryPointMonitor): void;
    /**
     * Register an entry point with this module.
     *
     * The entry point will be instrumented when a monitor is passed to
     * goog.debug.entryPointRegistry.monitorAll. If this has already occurred,
     * the entry point is instrumented immediately.
     * @param callback A callback function which is called with a transforming
     * function to instrument the entry point. The callback is responsible for
     * wrapping the relevant entry point with the transforming function.
     */
    function register(callback: (a: (...a: any[]) => any) => any): void;
    /**
     * Try to unmonitor all the entry points that have already been registered.
     * If an entry point is registered in the future, it will not be wrapped by
     * the monitor when it is registered. Note that this may fail if the entry
     * points have additional wrapping.
     * @param monitor The last monitor to wrap the entry points.
     */
    function unmonitorAllIfPossible(
        monitor: ಠ_ಠ.clutz.goog.debug.EntryPointMonitor): void;
}
declare module 'goog:goog.debug.entryPointRegistry' {
    import alias = ಠ_ಠ.clutz.goog.debug.entryPointRegistry;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug {
    /**
     * Dummy object to work around undefined properties compiler warning.
     */
    var errorHandlerWeakDep: {[key: string]: (...a: any[]) => any};
}
declare module 'goog:goog.debug.errorHandlerWeakDep' {
    import alias = ಠ_ಠ.clutz.goog.debug.errorHandlerWeakDep;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug.errorcontext {
    /**
     * Adds key-value context to the error.
     * @param err The error to add context to.
     * @param contextKey Key for the context to be added.
     * @param contextValue Value for the context to be added.
     */
    function addErrorContext(
        err: GlobalError, contextKey: string, contextValue: string): void;
    function getErrorContext(err: GlobalError): {[key: string]: string};
}
declare module 'goog:goog.debug.errorcontext' {
    import alias = ಠ_ಠ.clutz.goog.debug.errorcontext;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.debug.logRecordSerializer {
    /**
     * Deserializes a JSON-serialized LogRecord.
     * @param s The JSON serialized record.
     */
    function parse(s: string): ಠ_ಠ.clutz.goog.debug.LogRecord;
    /**
     * Serializes a LogRecord to a JSON string.  Note that any associated
     * exception is likely to be lost.
     * @param record The record to serialize.
     */
    function serialize(record: ಠ_ಠ.clutz.goog.debug.LogRecord|null): string;
}
declare module 'goog:goog.debug.logRecordSerializer' {
    import alias = ಠ_ಠ.clutz.goog.debug.logRecordSerializer;
    export = alias;
}
declare namespace ಠ_ಠ.clutz {
    /**
     * Delegates provide a system for hygienic modification of a delegating
     * class's behavior.  The basic idea is that, rather than monkey-patching
     * prototype methods, a class can instead provide extension points by
     * calling out to delegates.  Later code can then register delegates, and
     * when the delegating class is instantiated, any registered delegates will
     * be instantiated and returned.
     *
     * The usage has four parts:
     * - A *delegate interface* is defined to provide specific overridable
     * hooks. This can be a simple function `@typedef`, or an entire
     * `@interface` or
     * `@record`.
     * - A *delegate registry* for this interface is instantiated, often as a
     * static field on the interface.
     * - One or more *delegates* are defined that implement this interface.
     * Delegates are registered with the registry.  Different registry classes
     * support different policies for registering more than one delegate.
     * - After delegates are registered, the delegating class asks the registry
     * for the *list of delegates*, which are then instantiated if necessary.
     *
     * In some circumstances (particularly if a delegate method will be called
     * from multiple places) it may make sense to provide an additional wrapper
     * between the delegate list and the delegating (sometimes called "modded")
     * class, to ensure that the delegates are used correctly.
     *
     * ## Example usage
     *
     * For example, consider a class `Foo` that wants to provide a few extension
     * points for the behaviors `zorch` and `snarf`.  We can set up the
     * delegation as follows
     *
     * <code class="highlight highlight-source-js"><pre>
     * const DelegateRegistry = goog.require('goog.delegate.DelegateRegistry');
     * const delegates = goog.require('goog.delegate.delegates');
     * class Foo {
     * constructor() {
     * /** @private @const {!Array<!Foo.Delegate>} &ast;/
     * this.delegates_ = Foo.Delegate.REGISTRY.delegates();
     * }
     * frobnicate(x, y, z) {
     * const w = delegates.callFirst(this.delegates_, d => d.zorch(x, y));
     * return this.delegates_.map(d => d.snarf(z, w));
     * }
     * }
     * /** @interface &ast;/
     * Foo.Delegate = class {
     * zorch(a, b) {}
     * snarf(a, b) {}
     * }
     * /** @const {!DelegateRegistry<!Foo.Delegate>} &ast;/
     * Foo.registry = new DelegateRegstry();
     * </pre></code>
     *
     * A file inserted later in the bundle can define a delegate and register
     * itself with the registry:
     *
     * <code class="highlight highlight-source-js"><pre>
     * /** @implements {Foo.Delegate} &ast;/
     * class WibblyFooDelegate {
     * zorch(a, b) { return a + b; }
     * snarf(a, b) { return a - b; }
     * }
     * Foo.registry.registerClass(WibbyFooDelegate);
     * </pre></code>
     *
     * In many cases, the delegates need to be initialized with an instance of
     * the modded class.  To support this, a function may be passed to the
     * `delegates()` method to override how the constructor is called.
     *
     *
     * ## Multiple Delegates
     *
     * Several different registry classes are defined, each with a different
     * policy for how to handle multiple delegates.  The most simple,
     * `DelegateRegistry`, allows multiple delegates to be registered and
     * returns them in the order they are registered.  If only one delegate is
     * expected, `DelegateRegistry.prototype.expectAtMostOneDelegate()` performs
     * assertions (in debug mode) that at most one delegate is added, though in
     * production mode it will still register them all - The use of `delegate()`
     * or `goog.delegate.delegates.callFirst()` is recommended in this case to
     * ensure reasonable behavior.
     *
     * Finally, `DelegateRegistry.Prioritized` requires passing a
     * unique priority to each delegate registration (collisions are asserted in
     * debug mode, but will fall back on registration order in production).
     *
     *
     * ## Wrapped Delegator
     *
     * In some cases it makes sense to wrap the delegate list in a dedicated
     * delegator object, rather than having the modded class use it directly:
     *
     * <code class="highlight highlight-source-js"><pre>
     * /** @record &ast;/
     * class MyDelegateInterface {
     * /** @param {number} arg &ast;/
     * foo(arg) {}
     * /** @return {number|undefined} &ast;/
     * bar() {}
     * /** @return {string} &ast;/
     * baz() {}
     * /
     * class MyDelegator {
     * /** @param {!Array<!MyDelegateInterface>} delegates &ast;/
     * constructor(delegates) { this.delegates_ = delegates; }
     * /** @param {number} &ast;/
     * foo(arg) { this.delegates_.forEach(d => d.foo(arg)); }
     * /** @return {number} &ast;/
     * bar() {
     * const result =
     * delegates.callUntilNotNullOrUndefined(this.delegates_, d => d.bar());
     * return result != null ? result : 42;
     * }
     * /** @return {!Array<string>} &ast;/
     * baz() { return this.delegates_.map(d => d.baz()); }
     * }
     * </pre></code>
     *
     * In this example, the modded class will call into the delegates via the
     * wrapper class, ensuring that the correct calling convention is always
     * used.
     */
    class module$exports$goog$delegate$DelegateRegistry<T = any> extends
        module$exports$goog$delegate$DelegateRegistry_Instance<T> {}
    class module$exports$goog$delegate$DelegateRegistry_Instance<
        T = any> extends
        module$contents$goog$delegate$DelegateRegistry_DelegateRegistryBase_Instance<
            T> {
        /**
         * Configures this registry to accept at most one delegate.
         * This only affects debug mode.
         */
        expectAtMostOneDelegate():
            module$exports$goog$delegate$DelegateRegistry<T>;
        registerClass(ctor: {new(): T}): void;
        registerInstance(instance: T): void;
    }
}
declare namespace ಠ_ಠ.clutz.module$exports$goog$delegate$DelegateRegistry {
    class Prioritized<T = any> extends Prioritized_Instance<T> {}
    class Prioritized_Instance<T = any> extends
        module$contents$goog$delegate$DelegateRegistry_DelegateRegistryBase_Instance<
            T> {
        /**
         * A delegate registry that allows multiple delegates, which must each
         * have a numeric priority specified when they are registered.
         * Iteration will start with the highest number and proceed to the
         * lowest number.  If two delegates are added with the same priority, an
         * error will be given in debug mode.
         */
        constructor(...var_args: any[]);
        registerClass(ctor: {new(): T}, priority: number): void;
        registerInstance(instance: T, priority: number): void;
    }
}
declare module 'goog:goog.delegate.DelegateRegistry' {
    import alias = ಠ_ಠ.clutz.module$exports$goog$delegate$DelegateRegistry;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.module$exports$goog$delegate$delegates {
    /**
     * Calls the first delegate, or returns undefined if none are given.
     */
    function callFirst<T = any, R = any>(
        delegates: T[], mapper: (a: T) => R): R|undefined;
    /**
     * Calls delegates until one returns a defined, non-null result.  Returns
     * undefined if no such element is found.
     */
    function callUntilDefinedAndNotNull<T = any, R = any>(
        delegates: T[], mapper: ((a: T) => R) | undefined): R|undefined;
    /**
     * Calls delegates until one returns a truthy result.  Returns false if no
     * such element is found.
     */
    function callUntilTruthy<T = any, R = any>(
        delegates: T[], mapper: (a: T) => R): boolean|R;
}
declare module 'goog:goog.delegate.delegates' {
    import alias = ಠ_ಠ.clutz.module$exports$goog$delegate$delegates;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.disposable {
    /**
     * Interface for a disposable object.  If a instance requires cleanup
     * (references COM objects, DOM nodes, or other disposable objects), it
     * should implement this interface (it may subclass goog.Disposable).
     */
    interface IDisposable {
        /**
         * Disposes of the object and its resources.
         */
        dispose(): void;
        isDisposed(): boolean;
    }
}
declare module 'goog:goog.disposable.IDisposable' {
    import alias = ಠ_ಠ.clutz.goog.disposable.IDisposable;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog {
    /**
     * Calls {@code dispose} on the argument if it supports it. If obj is not an
     * object with a dispose() method, this is a no-op.
     * @param obj The object to dispose of.
     */
    function dispose(obj: any): void;
}
declare module 'goog:goog.dispose' {
    import alias = ಠ_ಠ.clutz.goog.dispose;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog {
    /**
     * Calls {@code dispose} on each member of the list that supports it. (If
     * the member is an ArrayLike, then {@code goog.disposeAll()} will be called
     * recursively on each of its members.) If the member is not an object with
     * a
     * {@code dispose()} method, then it is ignored.
     * @param var_args The list.
     */
    function disposeAll(...var_args: any[]): void;
}
declare module 'goog:goog.disposeAll' {
    import alias = ಠ_ಠ.clutz.goog.disposeAll;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
    /**
     * Alias for getElement.
     * @param element Element ID or a DOM node.
     */
    function $(a: string|GlobalElement|null): GlobalElement|null;
    /**
     * Alias for {@code getElementsByTagNameAndClass}.
     * @param opt_tag Element tag name.
     * @param opt_class Optional class name.
     * @param opt_el Optional element to look in.
     */
    function $$<T = any, R = any>(
        a?: string | ಠ_ಠ.clutz.goog.dom.TagName<T>| null, b?: string | null,
        c?: GlobalElement | null): ArrayLike<R>;
    /**
     * Alias for {@code createDom}.
     * @param tagName Tag to create.
     * @param opt_attributes If object, then a map of name-value pairs for
     * attributes. If a string, then this is the className of the new element.
     * If an array, the elements will be joined together as the className of the
     * new element.
     * @param var_args Further DOM nodes or strings for text nodes. If one of
     * the var_args is an array, its children will be added as childNodes
     * instead.
     */
    function $dom<T = any, R = any>(
        a: string | ಠ_ಠ.clutz.goog.dom.TagName<T>,
        b?: GlobalObject | null | string,
        ...c: (GlobalObject|null|string|NodeList|undefined)[]): R;
    var ASSUME_QUIRKS_MODE: boolean;
    var ASSUME_STANDARDS_MODE: boolean;
    /**
     * A SavedRange implementation using DOM endpoints.
     */
    class DomSavedControlRange_ extends DomSavedControlRange__Instance {}
    class DomSavedControlRange__Instance extends
        ಠ_ಠ.clutz.goog.dom.SavedRange_Instance {
        disposeInternal(): void;
        restoreInternal(): ಠ_ಠ.clutz.goog.dom.AbstractRange|null;
    }
    /**
     * A SavedRange implementation using DOM endpoints.
     */
    class DomSavedMultiRange_ extends DomSavedMultiRange__Instance {}
    class DomSavedMultiRange__Instance extends
        ಠ_ಠ.clutz.goog.dom.SavedRange_Instance {
        disposeInternal(): void;
        restoreInternal(): ಠ_ಠ.clutz.goog.dom.MultiRange;
    }
    /**
     * A SavedRange implementation using DOM endpoints.
     */
    class DomSavedTextRange_ extends DomSavedTextRange__Instance {}
    class DomSavedTextRange__Instance extends
        ಠ_ಠ.clutz.goog.dom.SavedRange_Instance {
        disposeInternal(): void;
        restoreInternal(): ಠ_ಠ.clutz.goog.dom.AbstractRange;
    }
    /**
     * Appends a node with text or other nodes.
     * @param parent The node to append nodes to.
     * @param var_args The things to append to the node. If this is a Node it is
     * appended as is. If this is a string then a text node is appended. If this
     * is an array like object then fields 0 to length - 1 are appended.
     */
    function append(
        parent: Node,
        ...var_args: (GlobalObject|null|string|NodeList|undefined)[]): void;
    /**
     * Appends a child to a node.
     * @param parent Parent.
     * @param child Child.
     */
    function appendChild(parent: Node|null, child: Node|null): void;
    /**
     * Determines if the given node can contain children, intended to be used
     * for HTML generation.
     *
     * IE natively supports node.canHaveChildren but has inconsistent behavior.
     * Prior to IE8 the base tag allows children and in IE9 all nodes return
     * true for canHaveChildren.
     *
     * In practice all non-IE browsers allow you to add children to any node,
     * but the behavior is inconsistent:
     *
     * <pre>
     * var a = goog.dom.createElement(goog.dom.TagName.BR);
     * a.appendChild(document.createTextNode('foo'));
     * a.appendChild(document.createTextNode('bar'));
     * console.log(a.childNodes.length);  // 2
     * console.log(a.innerHTML);  // Chrome: "", IE9: "foobar", FF3.5: "foobar"
     * </pre>
     *
     * For more information, see:
     * http://dev.w3.org/html5/markup/syntax.html#syntax-elements
     *
     * TODO(user): Rename shouldAllowChildren() ?
     * @param node The node to check.
     */
    function canHaveChildren(node: Node|null): boolean;
    /**
     * Compares the document order of two nodes, returning 0 if they are the
     * same node, a negative number if node1 is before node2, and a positive
     * number if node2 is before node1.  Note that we compare the order the tags
     * appear in the document so in the tree <b><i>text</i></b> the B node is
     * considered to be before the I node.
     * @param node1 The first node to compare.
     * @param node2 The second node to compare.
     */
    function compareNodeOrder(node1: Node|null, node2: Node|null): number;
    /**
     * Creates a new Node from constant strings of HTML markup.
     * @param var_args The HTML strings to concatenate then convert into a node.
     */
    function constHtmlToNode(
        ...var_args: (ಠ_ಠ.clutz.goog.string.Const|undefined)[]): Node;
    /**
     * Whether a node contains another node.
     * @param parent The node that should contain the other node.
     * @param descendant The node to test presence of.
     */
    function contains(
        parent: Node|null|undefined, descendant: Node|null|undefined): boolean;
    /**
     * Returns a dom node with a set of attributes.  This function accepts
     * varargs for subsequent nodes to be added.  Subsequent nodes will be added
     * to the first node as childNodes.
     *
     * So:
     * <code>createDom(goog.dom.TagName.DIV, null,
     * createDom(goog.dom.TagName.P), createDom(goog.dom.TagName.P));</code>
     * would return a div with two child paragraphs
     *
     * For passing properties, please see {@link goog.dom.setProperties} for
     * more information.
     * @param tagName Tag to create.
     * @param opt_attributes If object, then a map of name-value pairs for
     * attributes. If a string, then this is the className of the new element.
     * If an array, the elements will be joined together as the className of the
     * new element.
     * @param var_args Further DOM nodes or strings for text nodes. If one of
     * the var_args is an array or NodeList, its elements will be added as
     * childNodes instead.
     */
    function createDom<T = any, R = any>(
        tagName: string | ಠ_ಠ.clutz.goog.dom.TagName<T>,
        opt_attributes?: GlobalObject | null | string,
        ...var_args: (GlobalObject|null|string|NodeList|undefined)[]): R;
    /**
     * Creates a new element.
     * @param name Tag to create.
     */
    function createElement<T = any, R = any>(
        name: string | ಠ_ಠ.clutz.goog.dom.TagName<T>): R;
    /**
     * Create a table.
     * @param rows The number of rows in the table.  Must be >= 1.
     * @param columns The number of columns in the table.  Must be >= 1.
     * @param opt_fillWithNbsp If true, fills table entries with {@code
     * goog.string.Unicode.NBSP} characters.
     */
    function createTable(
        rows: number, columns: number,
        opt_fillWithNbsp?: boolean): GlobalElement;
    /**
     * Creates a new text node.
     * @param content Content.
     */
    function createTextNode(content: number|string): Text;
    /**
     * Find the deepest common ancestor of the given nodes.
     * @param var_args The nodes to find a common ancestor of.
     */
    function findCommonAncestor(...var_args: (Node|null|undefined)[]): Node|
        null;
    /**
     * Finds the first descendant node that matches the filter function, using
     * a depth first search. This function offers the most general purpose way
     * of finding a matching element. You may also wish to consider
     * {@code goog.dom.query} which can express many matching criteria using
     * CSS selector expressions. These expressions often result in a more
     * compact representation of the desired result.
     * @param root The root of the tree to search.
     * @param p The filter function.
     */
    function findNode(root: Node|null, p: (a: Node|null) => boolean): Node|null|
        undefined;
    /**
     * Finds all the descendant nodes that match the filter function, using a
     * a depth first search. This function offers the most general-purpose way
     * of finding a set of matching elements. You may also wish to consider
     * {@code goog.dom.query} which can express many matching criteria using
     * CSS selector expressions. These expressions often result in a more
     * compact representation of the desired result.
     * @param root The root of the tree to search.
     * @param p The filter function.
     */
    function findNodes(root: Node|null, p: (a: Node|null) => boolean): Node[];
    /**
     * Flattens an element. That is, removes it and replace it with its
     * children. Does nothing if the element is not in the document.
     * @param element The element to flatten.
     */
    function flattenElement(element: GlobalElement|null): GlobalElement|null|
        undefined;
    /**
     * Determines the active element in the given document.
     * @param doc The document to look in.
     */
    function getActiveElement(doc: Document|null): GlobalElement|null;
    /**
     * Walks up the DOM hierarchy returning the first ancestor that passes the
     * matcher function.
     * @param element The DOM node to start with.
     * @param matcher A function that returns true if the passed node matches
     * the desired criteria.
     * @param opt_includeNode If true, the node itself is included in the search
     * (the first call to the matcher will pass startElement as the node to
     * test).
     * @param opt_maxSearchSteps Maximum number of levels to search up the dom.
     */
    function getAncestor(
        element: Node|null, matcher: (a: Node|null) => boolean,
        opt_includeNode?: boolean, opt_maxSearchSteps?: number): Node|null;
    /**
     * Walks up the DOM hierarchy returning the first ancestor that has the
     * passed class name. If the passed element matches the specified criteria,
     * the element itself is returned.
     * @param element The DOM node to start with.
     * @param className The class name to match.
     * @param opt_maxSearchSteps Maximum number of levels to search up the dom.
     */
    function getAncestorByClass(
        element: Node|null, className: string,
        opt_maxSearchSteps?: number): GlobalElement|null;
    /**
     * Walks up the DOM hierarchy returning the first ancestor that has the
     * passed tag name and/or class name. If the passed element matches the
     * specified criteria, the element itself is returned.
     * @param element The DOM node to start with.
     * @param opt_tag The tag name to match (or null/undefined to match only
     * based on class name).
     * @param opt_class The class name to match (or null/undefined to match only
     * based on tag name).
     * @param opt_maxSearchSteps Maximum number of levels to search up the dom.
     */
    function getAncestorByTagNameAndClass<T = any, R = any>(
        element: Node | null,
        opt_tag?: ಠ_ಠ.clutz.goog.dom.TagName<T>| null | string,
        opt_class?: string | null, opt_maxSearchSteps?: number): R|null;
    /**
     * Gets '2d' context of a canvas. Shortcut for canvas.getContext('2d') with
     * a type information.
     */
    function getCanvasContext2D(canvas: HTMLCanvasElement):
        CanvasRenderingContext2D;
    /**
     * Returns an array containing just the element children of the given
     * element.
     * @param element The element whose element children we want.
     */
    function getChildren(element: GlobalElement|null): GlobalElement[]|
        NodeListOf<GlobalElement>;
    /**
     * Gets the document object being used by the dom library.
     */
    function getDocument(): Document;
    /**
     * Calculates the height of the document.
     */
    function getDocumentHeight(): number;
    /**
     * Calculates the height of the document of the given window.
     * @param win The window whose document height to retrieve.
     */
    function getDocumentHeightForWindow(win: Window): number;
    /**
     * Gets the document scroll distance as a coordinate object.
     */
    function getDocumentScroll(): ಠ_ಠ.clutz.goog.math.Coordinate;
    /**
     * Gets the document scroll element.
     */
    function getDocumentScrollElement(): GlobalElement;
    /**
     * Gets the DomHelper object for the document where the element resides.
     * @param opt_element If present, gets the DomHelper for this element.
     */
    function getDomHelper(opt_element?: Node|null|
                          Window): ಠ_ಠ.clutz.goog.dom.DomHelper;
    /**
     * Gets an element from the current document by element id.
     *
     * If an Element is passed in, it is returned.
     * @param element Element ID or a DOM node.
     */
    function getElement(element: string|GlobalElement|null): GlobalElement|null;
    /**
     * Returns the first element with the provided className.
     * @param className the name of the class to look for.
     * @param opt_el Optional element to look in.
     */
    function getElementByClass(
        className: string, opt_el?: GlobalElement|null|Document): GlobalElement|
        null;
    /**
     * Gets the first element matching the tag and the class.
     * @param opt_tag Element tag name.
     * @param opt_class Optional class name.
     * @param opt_el Optional element to look in.
     */
    function getElementByTagNameAndClass<T = any, R = any>(
        opt_tag?: string | ಠ_ಠ.clutz.goog.dom.TagName<T>| null,
        opt_class?: string | null, opt_el?: Document | null | GlobalElement): R|
        null;
    /**
     * Returns a static, array-like list of the elements with the provided
     * className.
     * @param className the name of the class to look for.
     * @param opt_el Optional element to look in.
     */
    function getElementsByClass(
        className: string,
        opt_el?: Document|null|GlobalElement): ArrayLike<GlobalElement>;
    /**
     * Gets elements by tag name.
     * @param opt_parent Parent element or document where to look for elements.
     * Defaults to document.
     */
    function getElementsByTagName<T extends Element = Element>(
        tagName: ಠ_ಠ.clutz.goog.dom.TagName<T>,
        opt_parent?: Document | GlobalElement): NodeListOf<T>;
    /**
     * Looks up elements by both tag and class name, using browser native
     * functions
     * ({@code querySelectorAll}, {@code getElementsByTagName} or
     * {@code getElementsByClassName}) where possible. This function
     * is a useful, if limited, way of collecting a list of DOM elements
     * with certain characteristics.  {@code goog.dom.query} offers a
     * more powerful and general solution which allows matching on CSS3
     * selector expressions, but at increased cost in code size. If all you
     * need is particular tags belonging to a single class, this function
     * is fast and sleek.
     *
     * Note that tag names are case sensitive in the SVG namespace, and this
     * function converts opt_tag to uppercase for comparisons. For queries in
     * the SVG namespace you should use querySelector or querySelectorAll
     * instead. https://bugzilla.mozilla.org/show_bug.cgi?id=963870
     * https://bugs.webkit.org/show_bug.cgi?id=83438
     * @param opt_tag Element tag name.
     * @param opt_class Optional class name.
     * @param opt_el Optional element to look in.
     */
    function getElementsByTagNameAndClass<T = any, R = any>(
        opt_tag?: string | ಠ_ಠ.clutz.goog.dom.TagName<T>| null,
        opt_class?: string | null,
        opt_el?: Document | null | GlobalElement): ArrayLike<R>;
    /**
     * Returns the first child node that is an element.
     * @param node The node to get the first child element of.
     */
    function getFirstElementChild(node: Node|null): GlobalElement|null;
    /**
     * Cross-browser function for getting the document element of a frame or
     * iframe.
     * @param frame Frame element.
     */
    function getFrameContentDocument(frame: GlobalElement|null): Document;
    /**
     * Cross-browser function for getting the window of a frame or iframe.
     * @param frame Frame element.
     */
    function getFrameContentWindow(frame: GlobalElement|null): Window|null;
    /**
     * Returns the last child node that is an element.
     * @param node The node to get the last child element of.
     */
    function getLastElementChild(node: Node|null): GlobalElement|null;
    /**
     * Returns the first next sibling that is an element.
     * @param node The node to get the next sibling element of.
     */
    function getNextElementSibling(node: Node|null): GlobalElement|null;
    /**
     * Returns the next node in source order from the given node.
     * @param node The node.
     */
    function getNextNode(node: Node|null): Node|null;
    /**
     * Returns the node at a given offset in a parent node.  If an object is
     * provided for the optional third parameter, the node and the remainder of
     * the offset will stored as properties of this object.
     * @param parent The parent node.
     * @param offset The offset into the parent node.
     * @param opt_result Object to be used to store the return value. The return
     * value will be stored in the form {node: Node, remainder: number} if this
     * object is provided.
     */
    function getNodeAtOffset(
        parent: Node|null, offset: number,
        opt_result?: GlobalObject|null): Node|null;
    /**
     * Returns the text length of the text contained in a node, without markup.
     * This is equivalent to the selection length if the node was selected, or
     * the number of cursor movements to traverse the node. Images & BRs take
     * one space.  New lines are ignored.
     * @param node The node whose text content length is being calculated.
     */
    function getNodeTextLength(node: Node|null): number;
    /**
     * Returns the text offset of a node relative to one of its ancestors. The
     * text length is the same as the length calculated by
     * goog.dom.getNodeTextLength.
     * @param node The node whose offset is being calculated.
     * @param opt_offsetParent The node relative to which the offset will be
     * calculated. Defaults to the node's owner document's body.
     */
    function getNodeTextOffset(
        node: Node|null, opt_offsetParent?: Node|null): number;
    /**
     * Gets the outerHTML of a node, which islike innerHTML, except that it
     * actually contains the HTML of the node itself.
     * @param element The element to get the HTML of.
     */
    function getOuterHtml(element: GlobalElement|null): string;
    /**
     * Returns the owner document for a node.
     * @param node The node to get the document for.
     */
    function getOwnerDocument(node: Node|null|Window): Document;
    /**
     * Gets the page scroll distance as a coordinate object.
     * @param opt_window Optional window element to test.
     */
    function getPageScroll(opt_window?: Window|
                           null): ಠ_ಠ.clutz.goog.math.Coordinate;
    /**
     * Returns an element's parent, if it's an Element.
     * @param element The DOM element.
     */
    function getParentElement(element: GlobalElement|null): GlobalElement|null;
    /**
     * Gives the current devicePixelRatio.
     *
     * By default, this is the value of window.devicePixelRatio (which should be
     * preferred if present).
     *
     * If window.devicePixelRatio is not present, the ratio is calculated with
     * window.matchMedia, if present. Otherwise, gives 1.0.
     *
     * Some browsers (including Chrome) consider the browser zoom level in the
     * pixel ratio, so the value may change across multiple calls.
     */
    function getPixelRatio(): number;
    /**
     * Returns the first previous sibling that is an element.
     * @param node The node to get the previous sibling element of.
     */
    function getPreviousElementSibling(node: Node|null): GlobalElement|null;
    /**
     * Returns the previous node in source order from the given node.
     * @param node The node.
     */
    function getPreviousNode(node: Node|null): Node|null;
    /**
     * Returns the text content of the current node, without markup.
     *
     * Unlike {@code getTextContent} this method does not collapse whitespaces
     * or normalize lines breaks.
     * @param node The node from which we are getting content.
     */
    function getRawTextContent(node: Node|null): string;
    /**
     * Gets an element by id, asserting that the element is found.
     *
     * This is used when an element is expected to exist, and should fail with
     * an assertion error if it does not (if assertions are enabled).
     * @param id Element ID.
     */
    function getRequiredElement(id: string): GlobalElement;
    /**
     * Ensures an element with the given className exists, and then returns the
     * first element with the provided className.
     * @param className the name of the class to look for.
     * @param opt_root Optional element or document to look in.
     */
    function getRequiredElementByClass(
        className: string, opt_root?: GlobalElement|Document): GlobalElement;
    /**
     * Returns the text content of the current node, without markup and
     * invisible symbols. New lines are stripped and whitespace is collapsed,
     * such that each character would be visible.
     *
     * In browsers that support it, innerText is used.  Other browsers attempt
     * to simulate it via node traversal.  Line breaks are canonicalized in IE.
     * @param node The node from which we are getting content.
     */
    function getTextContent(node: Node|null): string;
    /**
     * Gets the dimensions of the viewport.
     *
     * Gecko Standards mode:
     * docEl.clientWidth  Width of viewport excluding scrollbar.
     * win.innerWidth     Width of viewport including scrollbar.
     * body.clientWidth   Width of body element.
     *
     * docEl.clientHeight Height of viewport excluding scrollbar.
     * win.innerHeight    Height of viewport including scrollbar.
     * body.clientHeight  Height of document.
     *
     * Gecko Backwards compatible mode:
     * docEl.clientWidth  Width of viewport excluding scrollbar.
     * win.innerWidth     Width of viewport including scrollbar.
     * body.clientWidth   Width of viewport excluding scrollbar.
     *
     * docEl.clientHeight Height of document.
     * win.innerHeight    Height of viewport including scrollbar.
     * body.clientHeight  Height of viewport excluding scrollbar.
     *
     * IE6/7 Standards mode:
     * docEl.clientWidth  Width of viewport excluding scrollbar.
     * win.innerWidth     Undefined.
     * body.clientWidth   Width of body element.
     *
     * docEl.clientHeight Height of viewport excluding scrollbar.
     * win.innerHeight    Undefined.
     * body.clientHeight  Height of document element.
     *
     * IE5 + IE6/7 Backwards compatible mode:
     * docEl.clientWidth  0.
     * win.innerWidth     Undefined.
     * body.clientWidth   Width of viewport excluding scrollbar.
     *
     * docEl.clientHeight 0.
     * win.innerHeight    Undefined.
     * body.clientHeight  Height of viewport excluding scrollbar.
     *
     * Opera 9 Standards and backwards compatible mode:
     * docEl.clientWidth  Width of viewport excluding scrollbar.
     * win.innerWidth     Width of viewport including scrollbar.
     * body.clientWidth   Width of viewport excluding scrollbar.
     *
     * docEl.clientHeight Height of document.
     * win.innerHeight    Height of viewport including scrollbar.
     * body.clientHeight  Height of viewport excluding scrollbar.
     *
     * WebKit:
     * Safari 2
     * docEl.clientHeight Same as scrollHeight.
     * docEl.clientWidth  Same as innerWidth.
     * win.innerWidth     Width of viewport excluding scrollbar.
     * win.innerHeight    Height of the viewport including scrollbar.
     * frame.innerHeight  Height of the viewport exluding scrollbar.
     *
     * Safari 3 (tested in 522)
     *
     * docEl.clientWidth  Width of viewport excluding scrollbar.
     * docEl.clientHeight Height of viewport excluding scrollbar in strict mode.
     * body.clientHeight  Height of viewport excluding scrollbar in quirks mode.
     * @param opt_window Optional window element to test.
     */
    function getViewportSize(opt_window?: Window|
                             null): ಠ_ಠ.clutz.goog.math.Size;
    /**
     * Gets the window object associated with the given document.
     * @param opt_doc Document object to get window for.
     */
    function getWindow(opt_doc?: Document|null): Window;
    /**
     * Insert a child at a given index. If index is larger than the number of
     * child nodes that the parent currently has, the node is inserted as the
     * last child node.
     * @param parent The element into which to insert the child.
     * @param child The element to insert.
     * @param index The index at which to insert the new child node. Must not be
     * negative.
     */
    function insertChildAt(
        parent: GlobalElement|null, child: Node|null, index: number): void;
    /**
     * Inserts a new node after an existing reference node (i.e. as the next
     * sibling). If the reference node has no parent, then does nothing.
     * @param newNode Node to insert.
     * @param refNode Reference node to insert after.
     */
    function insertSiblingAfter(newNode: Node|null, refNode: Node|null): void;
    /**
     * Inserts a new node before an existing reference node (i.e. as the
     * previous sibling). If the reference node has no parent, then does
     * nothing.
     * @param newNode Node to insert.
     * @param refNode Reference node to insert before.
     */
    function insertSiblingBefore(newNode: Node|null, refNode: Node|null): void;
    /**
     * Returns true if the browser is in "CSS1-compatible" (standards-compliant)
     * mode, false otherwise.
     */
    function isCss1CompatMode(): boolean;
    /**
     * Whether the object looks like an Element.
     * @param obj The object being tested for Element likeness.
     */
    function isElement(obj?: any): obj is Element;
    /**
     * Returns true if the element can be focused, i.e. it has a tab index that
     * allows it to receive keyboard focus (tabIndex >= 0), or it is an element
     * that natively supports keyboard focus.
     * @param element Element to check.
     */
    function isFocusable(element: GlobalElement): boolean;
    /**
     * Returns true if the element has a tab index that allows it to receive
     * keyboard focus (tabIndex >= 0), false otherwise.  Note that some elements
     * natively support keyboard focus, even if they have no tab index.
     * @param element Element to check.
     */
    function isFocusableTabIndex(element: GlobalElement): boolean;
    /**
     * Whether the object looks like a DOM node.
     * @param obj The object being tested for node likeness.
     */
    function isNodeLike(obj?: any): obj is Node;
    /**
     * Returns true if the object is a {@code NodeList}.  To qualify as a
     * NodeList, the object must have a numeric length property and an item
     * function (which has type 'string' on IE for some reason).
     * @param val Object to test.
     */
    function isNodeList(val: GlobalObject|null): boolean;
    /**
     * Returns true if the specified value is a Window object. This includes the
     * global window for HTML pages, and iframe windows.
     * @param obj Variable to test.
     */
    function isWindow(obj?: any): obj is Window;
    /**
     * Removes all the child nodes on a DOM node.
     * @param node Node to remove children from.
     */
    function removeChildren(node: Node|null): void;
    /**
     * Removes a node from its parent.
     * @param node The node to remove.
     */
    function removeNode(node: Node|null): Node|null;
    /**
     * Replaces a node in the DOM tree. Will do nothing if {@code oldNode} has
     * no parent.
     * @param newNode Node to insert.
     * @param oldNode Node to replace.
     */
    function replaceNode(newNode: Node|null, oldNode: Node|null): void;
    /**
     * Converts HTML markup into a node. This is a safe version of
     * {@code goog.dom.htmlToDocumentFragment} which is now deleted.
     * @param html The HTML markup to convert.
     */
    function safeHtmlToNode(html: ಠ_ಠ.clutz.goog.html.SafeHtml): Node;
    /**
     * Enables or disables keyboard focus support on the element via its tab
     * index. Only elements for which {@link goog.dom.isFocusableTabIndex}
     * returns true (or elements that natively support keyboard focus, like form
     * elements) can receive keyboard focus.  See http://go/tabindex for more
     * info.
     * @param element Element whose tab index is to be changed.
     * @param enable Whether to set or remove a tab index on the element that
     * supports keyboard focus.
     */
    function setFocusableTabIndex(
        element: GlobalElement|null, enable: boolean): void;
    /**
     * Sets multiple properties, and sometimes attributes, on an element. Note
     * that properties are simply object properties on the element instance,
     * while attributes are visible in the DOM. Many properties map to
     * attributes with the same names, some with different names, and there are
     * also unmappable cases.
     *
     * This method sets properties by default (which means that custom
     * attributes are not supported). These are the exeptions (some of which is
     * legacy):
     * - "style": Even though this is an attribute name, it is translated to a
     * property, "style.cssText". Note that this property sanitizes and formats
     * its value, unlike the attribute.
     * - "class": This is an attribute name, it is translated to the "className"
     * property.
     * - "for": This is an attribute name, it is translated to the "htmlFor"
     * property.
     * - Entries in {@see goog.dom.DIRECT_ATTRIBUTE_MAP_} are set as attributes,
     * this is probably due to browser quirks.
     * - "aria-*", "data-*": Always set as attributes, they have no property
     * counterparts.
     * @param element DOM node to set properties on.
     * @param properties Hash of property:value pairs. Property values can be
     * strings or goog.string.TypedString values (such as goog.html.SafeUrl).
     */
    function setProperties(
        element: GlobalElement|null, properties: GlobalObject|null): void;
    /**
     * Sets the text content of a node, with cross-browser support.
     * @param node The node to change the text content of.
     * @param text The value that should replace the node's content.
     */
    function setTextContent(node: Node|null, text: string|number): void;
}
declare module 'goog:goog.dom' {
    import alias = ಠ_ಠ.clutz.goog.dom;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
    /**
     * Creates a new multi range with no properties.  Do not use this
     * constructor: use one of the goog.dom.Range.createFrom* methods instead.
     */
    class AbstractMultiRange extends AbstractMultiRange_Instance {}
    class AbstractMultiRange_Instance extends
        ಠ_ಠ.clutz.goog.dom.AbstractRange_Instance {
        containsNode(node: Node|null, opt_allowPartial?: boolean): boolean;
        containsRange(
            otherRange: ಠ_ಠ.clutz.goog.dom.AbstractRange|null,
            opt_allowPartial?: boolean): boolean;
        insertNode(node: Node|null, before: boolean): Node|null;
        surroundWithNodes(
            startNode: GlobalElement|null, endNode: GlobalElement|null): any;
    }
}
declare module 'goog:goog.dom.AbstractMultiRange' {
    import alias = ಠ_ಠ.clutz.goog.dom.AbstractMultiRange;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
    /**
     * Creates a new selection with no properties.  Do not use this constructor
     * - use one of the goog.dom.Range.from* methods instead.
     */
    class AbstractRange extends AbstractRange_Instance {
        /**
         * Gets the browser native selection object from the given window.
         * @param win The window to get the selection object from.
         */
        static getBrowserSelectionForWindow(win: Window|null): GlobalObject
            |null;
        /**
         * Tests if the given Object is a controlRange.
         * @param range The range object to test.
         */
        static isNativeControlRange(range: GlobalObject|null): boolean;
    }
    class AbstractRange_Instance {
        private noStructuralTyping_: any;
        /**
         * Returns a RangeIterator over the contents of the range.  Regardless
         * of the direction of the range, the iterator will move in document
         * order.
         * @param opt_keys Unused for this iterator.
         */
        __iterator__(a?: boolean): ಠ_ಠ.clutz.goog.dom.RangeIterator;
        clone(): ಠ_ಠ.clutz.goog.dom.AbstractRange;
        /**
         * Collapses the range to one of its boundary points.
         * @param toAnchor Whether to collapse to the anchor of the range.
         */
        collapse(a: boolean): any;
        /**
         * Tests if this range contains the given node.
         * @param node The node to test for.
         * @param opt_allowPartial If not set or false, the node must be
         * entirely contained in the selection for this function to return true.
         */
        containsNode(a: Node|null, b?: boolean): boolean;
        /**
         * Tests if this range contains the given range.
         * @param range The range to test.
         * @param opt_allowPartial If true, the range can be partially contained
         * in the selection, otherwise the range must be entirely contained.
         */
        containsRange(a: ಠ_ಠ.clutz.goog.dom.AbstractRange|null, b?: boolean):
            boolean;
        getAnchorNode(): Node|null;
        getAnchorOffset(): number;
        getBrowserRangeObject(): Range|null|TextRange;
        getContainer(): Node|null;
        /**
         * Returns the deepest element in the tree that contains the entire
         * range.
         */
        getContainerElement(): GlobalElement|null;
        getDocument(): Document;
        getEndNode(): Node|null;
        getEndOffset(): number;
        getEndPosition(): ಠ_ಠ.clutz.goog.math.Coordinate|null;
        getFocusNode(): Node|null;
        getFocusOffset(): number;
        /**
         * Returns the HTML fragment this range selects.  This is slow on all
         * browsers. The HTML fragment may not be valid HTML, for instance if
         * the user selects from a to b inclusively in the following html:
         *
         * &lt;div&gt;a&lt;/div&gt;b
         *
         * This method will return
         *
         * a&lt;/div&gt;b
         *
         * If you need valid HTML, use {@link #getValidHtml} instead.
         */
        getHtmlFragment(): string;
        /**
         * Returns pastable HTML for this range.  This guarantees that any child
         * items that must have specific ancestors will have them, for instance
         * all TDs will be contained in a TR in a TBODY in a TABLE and all LIs
         * will be contained in a UL or OL as appropriate.  This is semi-fast on
         * all browsers.
         */
        getPastableHtml(): string;
        getStartNode(): Node|null;
        getStartOffset(): number;
        getStartPosition(): ಠ_ಠ.clutz.goog.math.Coordinate|null;
        getText(): string;
        /**
         * Get the i-th text range in this range.  The behavior is undefined if
         * i >= getTextRangeCount or i < 0.
         * @param i The range number to retrieve.
         */
        getTextRange(a: number): ಠ_ಠ.clutz.goog.dom.TextRange|null;
        getTextRangeCount(): number;
        /**
         * Gets an array of all text ranges this range is comprised of.  For
         * non-multi ranges, returns a single element array containing this.
         */
        getTextRanges(): (ಠ_ಠ.clutz.goog.dom.TextRange|null)[];
        getType(): ಠ_ಠ.clutz.goog.dom.RangeType;
        /**
         * Returns valid HTML for this range.  This is fast on IE, and semi-fast
         * on other browsers.
         */
        getValidHtml(): string;
        getWindow(): Window;
        /**
         * Inserts a node before (or after) the range.  The range may be
         * disrupted beyond recovery because of the way this splits nodes.
         * @param node The node to insert.
         * @param before True to insert before, false to insert after.
         */
        insertNode(a: Node|null, b: boolean): Node|null;
        isCollapsed(): boolean;
        /**
         * Tests whether this range is valid (i.e. whether its endpoints are
         * still in the document).  A range becomes invalid when, after this
         * object was created, either one or both of its endpoints are removed
         * from the document.  Use of an invalid range can lead to runtime
         * errors, particularly in IE.
         */
        isRangeInDocument(): boolean;
        isReversed(): boolean;
        /**
         * Removes the contents of the range from the document.
         */
        removeContents(...a: any[]): any;
        /**
         * Replaces the range contents with (possibly a copy of) the given node.
         * The range may be disrupted beyond recovery because of the way this
         * splits nodes.
         * @param node The node to insert.
         */
        replaceContentsWithNode(node: Node|null): Node|null;
        /**
         * Saves the range using HTML carets. As long as the carets remained in
         * the HTML, the range can be restored...even when the HTML is copied
         * across documents.
         */
        saveUsingCarets(): ಠ_ಠ.clutz.goog.dom.SavedCaretRange|null;
        /**
         * Saves the range so that if the start and end nodes are left alone, it
         * can be restored.
         */
        saveUsingDom(): ಠ_ಠ.clutz.goog.dom.SavedRange;
        /**
         * Sets this range as the selection in its window.
         */
        select(...a: any[]): any;
        /**
         * Sets the native browser range object, overwriting any state this
         * range was storing.
         * @param nativeRange The native browser range object.
         */
        setBrowserRangeObject(nativeRange: Range|null|TextRange): boolean;
        /**
         * Surrounds this range with the two given nodes.  The range may be
         * disrupted beyond recovery because of the way this splits nodes.
         * @param startNode The node to insert at the start.
         * @param endNode The node to insert at the end.
         */
        surroundWithNodes(a: GlobalElement|null, b: GlobalElement|null): any;
    }
}
declare module 'goog:goog.dom.AbstractRange' {
    import alias = ಠ_ಠ.clutz.goog.dom.AbstractRange;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
    /**
     * Typedef for use with goog.dom.createDom and goog.dom.append.
     */
    type Appendable = GlobalObject|null|string|NodeList;
}
declare module 'goog:goog.dom.Appendable' {
    import alias = ಠ_ಠ.clutz.goog.dom.Appendable;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
    /**
     * Enum of all html attribute names specified by the HTML specitifcations.
     */
    type Attr = string&{clutzEnumBrand: never};
    var Attr: {
        ACCEPT: Attr,
        ACCEPT_CHARSET: Attr,
        ACCESSKEY: Attr,
        ACTION: Attr,
        ALIGN: Attr,
        ALT: Attr,
        ASYNC: Attr,
        AUTOCOMPLETE: Attr,
        AUTOFOCUS: Attr,
        AUTOPLAY: Attr,
        AUTOSAVE: Attr,
        BGCOLOR: Attr,
        BORDER: Attr,
        BUFFERED: Attr,
        CHALLENGE: Attr,
        CHARSET: Attr,
        CHECKED: Attr,
        CITE: Attr,
        CLASS: Attr,
        CODE: Attr,
        CODEBASE: Attr,
        COLOR: Attr,
        COLS: Attr,
        COLSPAN: Attr,
        CONTENT: Attr,
        CONTENTEDITABLE: Attr,
        CONTEXTMENU: Attr,
        CONTROLS: Attr,
        COORDS: Attr,
        DATA: Attr,
        DATETIME: Attr,
        DEFAULT: Attr,
        DEFER: Attr,
        DIR: Attr,
        DIRNAME: Attr,
        DISABLED: Attr,
        DOWNLOAD: Attr,
        DRAGGABLE: Attr,
        DROPZONE: Attr,
        ENCTYPE: Attr,
        FOR: Attr,
        FORM: Attr,
        FORMACTION: Attr,
        HEADERS: Attr,
        HEIGHT: Attr,
        HIDDEN: Attr,
        HIGH: Attr,
        HREF: Attr,
        HREFLANG: Attr,
        HTTP_EQUIV: Attr,
        ICON: Attr,
        ID: Attr,
        ISMAP: Attr,
        ITEMPROP: Attr,
        KEYTYPE: Attr,
        KIND: Attr,
        LABEL: Attr,
        LANG: Attr,
        LANGUAGE: Attr,
        LIST: Attr,
        LOOP: Attr,
        LOW: Attr,
        MANIFEST: Attr,
        MAX: Attr,
        MAXLENGTH: Attr,
        MEDIA: Attr,
        METHOD: Attr,
        MIN: Attr,
        MULTIPLE: Attr,
        MUTED: Attr,
        NAME: Attr,
        NOVALIDATE: Attr,
        OPEN: Attr,
        OPTIMUM: Attr,
        PATTERN: Attr,
        PING: Attr,
        PLACEHOLDER: Attr,
        POSTER: Attr,
        PRELOAD: Attr,
        RADIOGROUP: Attr,
        READONLY: Attr,
        REL: Attr,
        REQUIRED: Attr,
        REVERSED: Attr,
        ROWS: Attr,
        ROWSPAN: Attr,
        SANDBOX: Attr,
        SCOPE: Attr,
        SCOPED: Attr,
        SEAMLESS: Attr,
        SELECTED: Attr,
        SHAPE: Attr,
        SIZE: Attr,
        SIZES: Attr,
        SPAN: Attr,
        SPELLCHECK: Attr,
        SRC: Attr,
        SRCDOC: Attr,
        SRCLANG: Attr,
        SRCSET: Attr,
        START: Attr,
        STEP: Attr,
        STYLE: Attr,
        SUMMARY: Attr,
        TABINDEX: Attr,
        TARGET: Attr,
        TITLE: Attr,
        TYPE: Attr,
        USEMAP: Attr,
        VALUE: Attr,
        WIDTH: Attr,
        WRAP: Attr,
    };
}
declare module 'goog:goog.dom.Attr' {
    import alias = ಠ_ಠ.clutz.goog.dom.Attr;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
    /**
     * Enum of browser capabilities.
     */
    type BrowserFeature = boolean&{clutzEnumBrand: never};
    var BrowserFeature: {
        CAN_ADD_NAME_OR_TYPE_ATTRIBUTES: BrowserFeature,
        CAN_USE_CHILDREN_ATTRIBUTE: BrowserFeature,
        CAN_USE_INNER_TEXT: BrowserFeature,
        CAN_USE_PARENT_ELEMENT_PROPERTY: BrowserFeature,
        INNER_HTML_NEEDS_SCOPED_ELEMENT: BrowserFeature,
        LEGACY_IE_RANGES: BrowserFeature,
    };
}
declare module 'goog:goog.dom.BrowserFeature' {
    import alias = ಠ_ಠ.clutz.goog.dom.BrowserFeature;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
    /**
     * Creates a new BufferedViewportSizeMonitor.
     */
    class BufferedViewportSizeMonitor extends
        BufferedViewportSizeMonitor_Instance {}
    class BufferedViewportSizeMonitor_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * Creates a new BufferedViewportSizeMonitor.
         * @param viewportSizeMonitor The underlying viewport size monitor.
         * @param opt_bufferMs The buffer time, in ms. If not specified, this
         * value defaults to {@link #RESIZE_EVENT_DELAY_MS_}.
         */
        constructor(
            viewportSizeMonitor: ಠ_ಠ.clutz.goog.dom.ViewportSizeMonitor,
            opt_bufferMs?: number);
        disposeInternal(): void;
        /**
         * Returns the current size of the viewport.
         */
        getSize(): ಠ_ಠ.clutz.goog.math.Size|null;
    }
}
declare namespace ಠ_ಠ.clutz.goog.dom.BufferedViewportSizeMonitor {
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        RESIZE_HEIGHT: EventType,
        RESIZE_WIDTH: EventType,
    };
}
declare module 'goog:goog.dom.BufferedViewportSizeMonitor' {
    import alias = ಠ_ಠ.clutz.goog.dom.BufferedViewportSizeMonitor;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
    /**
     * Create a new control selection with no properties.  Do not use this
     * constructor: use one of the goog.dom.Range.createFrom* methods instead.
     */
    class ControlRange extends ControlRange_Instance {
        /**
         * Create a new range wrapper from the given browser range object.  Do
         * not use this method directly - please use goog.dom.Range.createFrom*
         * instead.
         * @param controlRange The browser range object.
         */
        static createFromBrowserRange(controlRange: GlobalObject|
                                      null): ಠ_ಠ.clutz.goog.dom.ControlRange;
        /**
         * Create a new range wrapper that selects the given element.  Do not
         * use this method directly - please use goog.dom.Range.createFrom*
         * instead.
         * @param var_args The element(s) to select.
         */
        static createFromElements(...var_args: (GlobalElement|null|
                                                undefined)[]):
            ಠ_ಠ.clutz.goog.dom.ControlRange;
    }
    class ControlRange_Instance extends
        ಠ_ಠ.clutz.goog.dom.AbstractMultiRange_Instance {
        __iterator__(opt_keys?: boolean): ಠ_ಠ.clutz.goog.dom.RangeIterator;
        clone(): ಠ_ಠ.clutz.goog.dom.AbstractRange;
        collapse(toAnchor: boolean): any;
        getBrowserRangeObject(): Range|null|TextRange;
        getContainer(): Node|null;
        getElements(): (GlobalElement|null)[];
        getEndNode(): Node|null;
        getEndOffset(): number;
        getHtmlFragment(): string;
        getSortedElements(): (GlobalElement|null)[];
        getStartNode(): Node|null;
        getStartOffset(): number;
        getText(): string;
        getTextRange(i: number): ಠ_ಠ.clutz.goog.dom.TextRange|null;
        getTextRangeCount(): number;
        getType(): ಠ_ಠ.clutz.goog.dom.RangeType;
        getValidHtml(): string;
        isCollapsed(): boolean;
        isRangeInDocument(): boolean;
        removeContents(): void;
        replaceContentsWithNode(node: Node|null): Node|null;
        saveUsingDom(): ಠ_ಠ.clutz.goog.dom.SavedRange;
        select(): void;
        setBrowserRangeObject(nativeRange: Range|null|TextRange): boolean;
    }
}
declare module 'goog:goog.dom.ControlRange' {
    import alias = ಠ_ಠ.clutz.goog.dom.ControlRange;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
    /**
     * Subclass of goog.dom.TagIterator that iterates over a DOM range.  It
     * adds functions to determine the portion of each text node that is
     * selected.
     */
    class ControlRangeIterator extends ControlRangeIterator_Instance {}
    class ControlRangeIterator_Instance extends
        ಠ_ಠ.clutz.goog.dom.RangeIterator {
        /**
         * Subclass of goog.dom.TagIterator that iterates over a DOM range.  It
         * adds functions to determine the portion of each text node that is
         * selected.
         * @param range The range to traverse.
         */
        constructor(range: ಠ_ಠ.clutz.goog.dom.ControlRange|null);
        clone(): ಠ_ಠ.clutz.goog.dom.ControlRangeIterator;
        copyFrom(other: ಠ_ಠ.clutz.goog.dom.TagIterator|null): void;
        getEndNode(): Node|null;
        getEndTextOffset(): number;
        getStartNode(): Node|null;
        getStartTextOffset(): number;
        isLast(): boolean;
        /**
         * Move to the next position in the selection.
         * Throws {@code goog.iter.StopIteration} when it passes the end of the
         * range.
         */
        next(): Node|null;
    }
}
declare module 'goog:goog.dom.ControlRangeIterator' {
    import alias = ಠ_ಠ.clutz.goog.dom.ControlRangeIterator;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
    /**
     * Create an instance of a DOM helper with a new document object.
     */
    class DomHelper extends DomHelper_Instance {}
    class DomHelper_Instance {
        private noStructuralTyping_: any;
        /**
         * Create an instance of a DOM helper with a new document object.
         * @param opt_document Document object to associate with this DOM
         * helper.
         */
        constructor(opt_document?: Document|null);
        /**
         * Alias for {@code getElement}.
         * @param element Element ID or a DOM node.
         */
        $(a: string|GlobalElement|null): GlobalElement|null;
        /**
         * Alias for {@code getElementsByTagNameAndClass}.
         * @param opt_tag Element tag name.
         * @param opt_class Optional class name.
         * @param opt_el Optional element to look in.
         */
        $$(a?: string, b?: string|null,
           c?: GlobalElement|null): ArrayLike<Element>;
        $$<T = any>(
            a?: ಠ_ಠ.clutz.goog.dom.TagName<T>|null, b?: string|null,
            c?: GlobalElement|null): ArrayLike<T>;
        /**
         * Alias for {@code createDom}.
         * @param tagName Tag to create.
         * @param opt_attributes If object, then a map of name-value pairs for
         * attributes. If a string, then this is the className of the new
         * element. If an array, the elements will be joined together as the
         * className of the new element.
         * @param var_args Further DOM nodes or strings for text nodes.  If one
         * of the var_args is an array, its children will be added as childNodes
         * instead.
         */
        $dom(
            a: string, b?: GlobalObject|null|string,
            ...c: (GlobalObject|null|string|NodeList|undefined)[]): Element;
        $dom<T = any>(
            a: string|ಠ_ಠ.clutz.goog.dom.TagName<T>,
            b?: GlobalObject|null|string,
            ...c: (GlobalObject|null|string|NodeList|undefined)[]): T;
        /**
         * Appends a node with text or other nodes.
         * @param parent The node to append nodes to.
         * @param var_args The things to append to the node. If this is a Node
         * it is appended as is. If this is a string then a text node is
         * appended. If this is an array like object then fields 0 to length - 1
         * are appended.
         */
        append(a: Node, ...b: (GlobalObject|null|string|NodeList|undefined)[]):
            any;
        /**
         * Appends a child to a node.
         * @param parent Parent.
         * @param child Child.
         */
        appendChild(a: Node|null, b: Node|null): any;
        /**
         * Determines if the given node can contain children, intended to be
         * used for HTML generation.
         * @param node The node to check.
         */
        canHaveChildren(a: Node|null): boolean;
        /**
         * Compares the document order of two nodes, returning 0 if they are the
         * same node, a negative number if node1 is before node2, and a positive
         * number if node2 is before node1.  Note that we compare the order the
         * tags appear in the document so in the tree <b><i>text</i></b> the B
         * node is considered to be before the I node.
         * @param node1 The first node to compare.
         * @param node2 The second node to compare.
         */
        compareNodeOrder(a: Node|null, b: Node|null): number;
        /**
         * Whether a node contains another node.
         * @param parent The node that should contain the other node.
         * @param descendant The node to test presence of.
         */
        contains(a: Node|null, b: Node|null): boolean;
        /**
         * Returns a dom node with a set of attributes.  This function accepts
         * varargs for subsequent nodes to be added.  Subsequent nodes will be
         * added to the first node as childNodes.
         *
         * So:
         * <code>createDom(goog.dom.TagName.DIV, null,
         * createDom(goog.dom.TagName.P), createDom(goog.dom.TagName.P));</code>
         * would return a div with two child paragraphs
         *
         * An easy way to move all child nodes of an existing element to a new
         * parent element is: <code>createDom(goog.dom.TagName.DIV, null,
         * oldElement.childNodes);</code> which will remove all child nodes from
         * the old element and add them as child nodes of the new DIV.
         * @param tagName Tag to create.
         * @param opt_attributes If object, then a map of name-value pairs for
         * attributes. If a string, then this is the className of the new
         * element. If an array, the elements will be joined together as the
         * className of the new element.
         * @param var_args Further DOM nodes or strings for text nodes. If one
         * of the var_args is an array or NodeList, its elements will be added
         * as childNodes instead.
         */
        createDom<K extends keyof HTMLElementTagNameMap>(
            tagName: K, opt_attributes?: GlobalObject|null|string,
            ...var_args: (GlobalObject|null|string|NodeList|undefined)[]):
            HTMLElementTagNameMap[K];
        createDom(
            tagName: string, opt_attributes?: GlobalObject|null|string,
            ...var_args: (GlobalObject|null|string|NodeList|undefined)[]):
            Element;
        createDom<T = any>(
            tagName: ಠ_ಠ.clutz.goog.dom.TagName<T>,
            opt_attributes?: GlobalObject|null|string,
            ...var_args: (GlobalObject|null|string|NodeList|undefined)[]): T;
        /**
         * Creates a new element.
         * @param name Tag to create.
         */
        createElement<K extends keyof HTMLElementTagNameMap>(name: K):
            HTMLElementTagNameMap[K];
        createElement(name: string): Element;
        createElement<T = any>(name: ಠ_ಠ.clutz.goog.dom.TagName<T>): T;
        /**
         * Create a table.
         * @param rows The number of rows in the table.  Must be >= 1.
         * @param columns The number of columns in the table.  Must be >= 1.
         * @param opt_fillWithNbsp If true, fills table entries with {@code
         * goog.string.Unicode.NBSP} characters.
         */
        createTable(rows: number, columns: number, opt_fillWithNbsp?: boolean):
            HTMLElement;
        /**
         * Creates a new text node.
         * @param content Content.
         */
        createTextNode(content: number|string): Text;
        /**
         * Find the deepest common ancestor of the given nodes.
         * @param var_args The nodes to find a common ancestor of.
         */
        findCommonAncestor(...a: (Node|null|undefined)[]): Node|null;
        /**
         * Finds the first descendant node that matches the filter function.
         * This does a depth first search.
         * @param root The root of the tree to search.
         * @param p The filter function.
         */
        findNode(a: Node|null, b: (a: Node|null) => boolean): Node|null
            |undefined;
        /**
         * Finds all the descendant nodes that matches the filter function. This
         * does a depth first search.
         * @param root The root of the tree to search.
         * @param p The filter function.
         */
        findNodes(a: Node|null, b: (a: Node|null) => boolean): (Node|
                                                                null)[]|null;
        /**
         * Flattens an element. That is, removes it and replace it with its
         * children.
         * @param element The element to flatten.
         */
        flattenElement(a: GlobalElement|null): GlobalElement|null|undefined;
        /**
         * Determines the active element in the given document.
         * @param opt_doc The document to look in.
         */
        getActiveElement(opt_doc?: Document|null): GlobalElement|null;
        /**
         * Walks up the DOM hierarchy returning the first ancestor that passes
         * the matcher function.
         * @param element The DOM node to start with.
         * @param matcher A function that returns true if the passed node
         * matches the desired criteria.
         * @param opt_includeNode If true, the node itself is included in the
         * search (the first call to the matcher will pass startElement as the
         * node to test).
         * @param opt_maxSearchSteps Maximum number of levels to search up the
         * dom.
         */
        getAncestor(
            a: Node|null, b: (a: Node|null) => boolean, c?: boolean,
            d?: number): Node|null;
        /**
         * Walks up the DOM hierarchy returning the first ancestor that has the
         * passed class name. If the passed element matches the specified
         * criteria, the element itself is returned.
         * @param element The DOM node to start with.
         * @param class The class name to match.
         * @param opt_maxSearchSteps Maximum number of levels to search up the
         * dom.
         */
        getAncestorByClass(a: Node|null, b: string, c?: number): GlobalElement
            |null;
        /**
         * Walks up the DOM hierarchy returning the first ancestor that has the
         * passed tag name and/or class name. If the passed element matches the
         * specified criteria, the element itself is returned.
         * @param element The DOM node to start with.
         * @param opt_tag The tag name to match (or null/undefined to match only
         * based on class name).
         * @param opt_class The class name to match (or null/undefined to match
         * only based on tag name).
         * @param opt_maxSearchSteps Maximum number of levels to search up the
         * dom.
         */
        getAncestorByTagNameAndClass<T extends keyof HTMLElementTagNameMap>(
            a: Node|null, b: T, c?: string|null,
            d?: number): HTMLElementTagNameMap[T]|null;
        getAncestorByTagNameAndClass<T = any>(
            a: Node|null, b: ಠ_ಠ.clutz.goog.dom.TagName<T>, c?: string|null,
            d?: number): T|null;
        getAncestorByTagNameAndClass(
            a: Node|null, b?: string, c?: string|null, d?: number): Element
            |null;
        /**
         * Gets '2d' context of a canvas. Shortcut for canvas.getContext('2d')
         * with a type information.
         */
        getCanvasContext2D(a: HTMLCanvasElement): CanvasRenderingContext2D;
        /**
         * Returns an array containing just the element children of the given
         * element.
         * @param element The element whose element children we want.
         */
        getChildren(a: GlobalElement|
                    null): GlobalElement[]|NodeListOf<GlobalElement>;
        /**
         * Gets the document object being used by the dom library.
         */
        getDocument(): Document;
        /**
         * Calculates the height of the document.
         */
        getDocumentHeight(): number;
        /**
         * Gets the document scroll distance as a coordinate object.
         */
        getDocumentScroll(): ಠ_ಠ.clutz.goog.math.Coordinate;
        /**
         * Gets the document scroll element.
         */
        getDocumentScrollElement(): GlobalElement;
        /**
         * Gets the dom helper object for the document where the element
         * resides.
         * @param opt_node If present, gets the DomHelper for this node.
         */
        getDomHelper(a?: Node|null): ಠ_ಠ.clutz.goog.dom.DomHelper;
        /**
         * Alias for {@code getElementById}. If a DOM node is passed in then we
         * just return that.
         * @param element Element ID or a DOM node.
         */
        getElement(element: string|GlobalElement|null): GlobalElement|null;
        /**
         * Returns the first element we find matching the provided class name.
         * @param className the name of the class to look for.
         * @param opt_el Optional element to look in.
         */
        getElementByClass(
            className: string,
            opt_el?: GlobalElement|null|Document): GlobalElement|null;
        /**
         * Gets the first element matching the tag and the class.
         * @param opt_tag Element tag name.
         * @param opt_class Optional class name.
         * @param opt_el Optional element to look in.
         */
        getElementByTagNameAndClass<T extends keyof HTMLElementTagNameMap>(
            tag: T, opt_class?: string|null,
            opt_el?: Document|null|
            GlobalElement): HTMLElementTagNameMap[T]|null;
        getElementByTagNameAndClass<T = any>(
            tag: ಠ_ಠ.clutz.goog.dom.TagName<T>, opt_class?: string|null,
            opt_el?: Document|null|GlobalElement): T|null;
        getElementByTagNameAndClass(
            opt_tag?: string, opt_class?: string|null,
            opt_el?: Document|null|GlobalElement): Element|null;

        /**
         * Returns an array of all the elements with the provided className.
         * @param className the name of the class to look for.
         * @param opt_el Optional element to look in.
         */
        getElementsByClass(
            className: string,
            opt_el?: GlobalElement|null|Document): ArrayLike<GlobalElement>;
        /**
         * Gets elements by tag name.
         * @param opt_parent Parent element or document where to look for
         * elements. Defaults to document of this DomHelper.
         */
        getElementsByTagName<T extends keyof HTMLElementTagNameMap>(
            tagName: ಠ_ಠ.clutz.goog.dom.TagName<T>,
            opt_parent?: Document|
            GlobalElement): NodeListOf<HTMLElementTagNameMap[T]>;
        getElementsByTagName<T extends Element>(
            tagName: ಠ_ಠ.clutz.goog.dom.TagName<T>,
            opt_parent?: Document|GlobalElement): NodeListOf<T>;
        getElementsByTagName(
            tagName: ಠ_ಠ.clutz.goog.dom.TagName<any>,
            opt_parent?: Document|GlobalElement): NodeListOf<Element>;
        /**
         * Looks up elements by both tag and class name, using browser native
         * functions
         * ({@code querySelectorAll}, {@code getElementsByTagName} or
         * {@code getElementsByClassName}) where possible. The returned array is
         * a live NodeList or a static list depending on the code path taken.
         * @param opt_tag Element tag name or * for all tags.
         * @param opt_class Optional class name.
         * @param opt_el Optional element to look in.
         */
        getElementsByTagNameAndClass<T extends keyof HTMLElementTagNameMap>(
            opt_tag?: string|ಠ_ಠ.clutz.goog.dom.TagName<T>|null,
            opt_class?: string|null, opt_el?: Document|null|GlobalElement):
            ArrayLike<HTMLElementTagNameMap[T]>;
        getElementsByTagNameAndClass<T>(
            opt_tag: ಠ_ಠ.clutz.goog.dom.TagName<T>, opt_class?: string|null,
            opt_el?: Document|null|GlobalElement): ArrayLike<T>;
        getElementsByTagNameAndClass(
            opt_tag?: string, opt_class?: string|null,
            opt_el?: Document|null|GlobalElement): ArrayLike<Element>;
        /**
         * Returns the first child node that is an element.
         * @param node The node to get the first child element of.
         */
        getFirstElementChild(a: Node|null): GlobalElement|null;
        /**
         * Cross browser function for getting the document element of an iframe.
         * @param iframe Iframe element.
         */
        getFrameContentDocument(a: GlobalElement|null): Document;
        /**
         * Cross browser function for getting the window of a frame or iframe.
         * @param frame Frame element.
         */
        getFrameContentWindow(a: GlobalElement|null): Window|null;
        /**
         * Returns the last child node that is an element.
         * @param node The node to get the last child element of.
         */
        getLastElementChild(a: Node|null): GlobalElement|null;
        /**
         * Returns the first next sibling that is an element.
         * @param node The node to get the next sibling element of.
         */
        getNextElementSibling(a: Node|null): GlobalElement|null;
        /**
         * Returns the next node in source order from the given node.
         * @param node The node.
         */
        getNextNode(a: Node|null): Node|null;
        /**
         * Returns the node at a given offset in a parent node.  If an object is
         * provided for the optional third parameter, the node and the remainder
         * of the offset will stored as properties of this object.
         * @param parent The parent node.
         * @param offset The offset into the parent node.
         * @param opt_result Object to be used to store the return value. The
         * return value will be stored in the form {node: Node, remainder:
         * number} if this object is provided.
         */
        getNodeAtOffset(a: Node|null, b: number, c?: GlobalObject|null): Node
            |null;
        /**
         * Returns the text length of the text contained in a node, without
         * markup. This is equivalent to the selection length if the node was
         * selected, or the number of cursor movements to traverse the node.
         * Images & BRs take one space.  New lines are ignored.
         * @param node The node whose text content length is being calculated.
         */
        getNodeTextLength(a: Node|null): number;
        /**
         * Returns the text offset of a node relative to one of its ancestors.
         * The text length is the same as the length calculated by
         * {@code goog.dom.getNodeTextLength}.
         * @param node The node whose offset is being calculated.
         * @param opt_offsetParent Defaults to the node's owner document's body.
         */
        getNodeTextOffset(a: Node|null, b?: Node|null): number;
        /**
         * Gets the outerHTML of a node, which islike innerHTML, except that it
         * actually contains the HTML of the node itself.
         * @param element The element to get the HTML of.
         */
        getOuterHtml(a: GlobalElement|null): string;
        /**
         * Returns the owner document for a node.
         * @param node The node to get the document for.
         */
        getOwnerDocument(a: Node|null): Document;
        /**
         * Returns an element's parent, if it's an Element.
         * @param element The DOM element.
         */
        getParentElement(a: GlobalElement|null): GlobalElement|null;
        /**
         * Returns the first previous sibling that is an element.
         * @param node The node to get the previous sibling element of.
         */
        getPreviousElementSibling(a: Node|null): GlobalElement|null;
        /**
         * Returns the previous node in source order from the given node.
         * @param node The node.
         */
        getPreviousNode(a: Node|null): Node|null;
        /**
         * Gets an element by id, asserting that the element is found.
         *
         * This is used when an element is expected to exist, and should fail
         * with an assertion error if it does not (if assertions are enabled).
         * @param id Element ID.
         */
        getRequiredElement(id: string): GlobalElement;
        /**
         * Ensures an element with the given className exists, and then returns
         * the first element with the provided className.
         * @param className the name of the class to look for.
         * @param opt_root Optional element or document to look in.
         */
        getRequiredElementByClass(
            className: string,
            opt_root?: GlobalElement|Document): GlobalElement;
        /**
         * Returns the text contents of the current node, without markup. New
         * lines are stripped and whitespace is collapsed, such that each
         * character would be visible.
         *
         * In browsers that support it, innerText is used.  Other browsers
         * attempt to simulate it via node traversal.  Line breaks are
         * canonicalized in IE.
         * @param node The node from which we are getting content.
         */
        getTextContent(a: Node|null): string;
        /**
         * Gets the dimensions of the viewport.
         * @param opt_window Optional window element to test. Defaults to the
         * window of the Dom Helper.
         */
        getViewportSize(opt_window?: Window|null): ಠ_ಠ.clutz.goog.math.Size;
        /**
         * Gets the window object associated with the document.
         */
        getWindow(): Window;
        /**
         * Insert a child at a given index. If index is larger than the number
         * of child nodes that the parent currently has, the node is inserted as
         * the last child node.
         * @param parent The element into which to insert the child.
         * @param child The element to insert.
         * @param index The index at which to insert the new child node. Must
         * not be negative.
         */
        insertChildAt(a: GlobalElement|null, b: Node|null, c: number): any;
        /**
         * Inserts a new node after an existing reference node (i.e., as the
         * next sibling). If the reference node has no parent, then does
         * nothing.
         * @param newNode Node to insert.
         * @param refNode Reference node to insert after.
         */
        insertSiblingAfter(a: Node|null, b: Node|null): any;
        /**
         * Inserts a new node before an existing reference node (i.e., as the
         * previous sibling). If the reference node has no parent, then does
         * nothing.
         * @param newNode Node to insert.
         * @param refNode Reference node to insert before.
         */
        insertSiblingBefore(a: Node|null, b: Node|null): any;
        /**
         * Returns true if the browser is in "CSS1-compatible"
         * (standards-compliant) mode, false otherwise.
         */
        isCss1CompatMode(): boolean;
        /**
         * Whether the object looks like an Element.
         * @param obj The object being tested for Element likeness.
         */
        isElement(a?: any): a is Element;
        /**
         * Returns true if the element can be focused, i.e. it has a tab index
         * that allows it to receive keyboard focus (tabIndex >= 0), or it is an
         * element that natively supports keyboard focus.
         * @param element Element to check.
         */
        isFocusable(a: GlobalElement): boolean;
        /**
         * Returns true if the element has a tab index that allows it to receive
         * keyboard focus (tabIndex >= 0), false otherwise.  Note that some
         * elements natively support keyboard focus, even if they have no tab
         * index.
         * @param element Element to check.
         */
        isFocusableTabIndex(a: GlobalElement): boolean;
        /**
         * Whether the object looks like a DOM node.
         * @param obj The object being tested for node likeness.
         */
        isNodeLike(a?: any): a is Node;
        /**
         * Returns true if the object is a {@code NodeList}.  To qualify as a
         * NodeList, the object must have a numeric length property and an item
         * function (which has type 'string' on IE for some reason).
         * @param val Object to test.
         */
        isNodeList(a: GlobalObject|null): boolean;
        /**
         * Returns true if the specified value is a Window object. This includes
         * the global window for HTML pages, and iframe windows.
         * @param obj Variable to test.
         */
        isWindow(a?: any): a is Window;
        /**
         * Removes all the child nodes on a DOM node.
         * @param node Node to remove children from.
         */
        removeChildren(a: Node|null): any;
        /**
         * Removes a node from its parent.
         * @param node The node to remove.
         */
        removeNode(a: Node|null): Node|null;
        /**
         * Replaces a node in the DOM tree. Will do nothing if {@code oldNode}
         * has no parent.
         * @param newNode Node to insert.
         * @param oldNode Node to replace.
         */
        replaceNode(a: Node|null, b: Node|null): any;
        /**
         * Converts an HTML into a node or a document fragment. A single Node is
         * used if
         * {@code html} only generates a single node. If {@code html} generates
         * multiple nodes then these are put inside a {@code DocumentFragment}.
         * This is a safe version of {@code
         * goog.dom.DomHelper#htmlToDocumentFragment} which is now deleted.
         * @param html The HTML markup to convert.
         */
        safeHtmlToNode(html: ಠ_ಠ.clutz.goog.html.SafeHtml): Node;
        /**
         * Sets the document object.
         * @param document Document object.
         */
        setDocument(document: Document): void;
        /**
         * Enables or disables keyboard focus support on the element via its tab
         * index. Only elements for which {@link goog.dom.isFocusableTabIndex}
         * returns true (or elements that natively support keyboard focus, like
         * form elements) can receive keyboard focus.  See http://go/tabindex
         * for more info.
         * @param element Element whose tab index is to be changed.
         * @param enable Whether to set or remove a tab index on the element
         * that supports keyboard focus.
         */
        setFocusableTabIndex(a: GlobalElement|null, b: boolean): any;
        /**
         * Sets a number of properties on a node.
         * @param element DOM node to set properties on.
         * @param properties Hash of property:value pairs.
         */
        setProperties(a: GlobalElement|null, b: GlobalObject|null): any;
        /**
         * Sets the text content of a node, with cross-browser support.
         * @param node The node to change the text content of.
         * @param text The value that should replace the node's content.
         */
        setTextContent(a: Node|null, b: string|number): any;
    }
}
declare module 'goog:goog.dom.DomHelper' {
    import alias = ಠ_ಠ.clutz.goog.dom.DomHelper;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
    /**
     * This class can be used to monitor changes in font size.  Instances will
     * dispatch a {@code goog.dom.FontSizeMonitor.EventType.CHANGE} event.
     * Example usage:
     * <pre>
     * var fms = new goog.dom.FontSizeMonitor();
     * goog.events.listen(fms, goog.dom.FontSizeMonitor.EventType.CHANGE,
     * function(e) {
     * alert('Font size was changed');
     * });
     * </pre>
     */
    class FontSizeMonitor extends FontSizeMonitor_Instance {
        /**
         * Constant for the change event.
         */
        static CHANGE_EVENT: string;
    }
    class FontSizeMonitor_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * This class can be used to monitor changes in font size.  Instances
         * will dispatch a {@code goog.dom.FontSizeMonitor.EventType.CHANGE}
         * event. Example usage: <pre> var fms = new goog.dom.FontSizeMonitor();
         * goog.events.listen(fms, goog.dom.FontSizeMonitor.EventType.CHANGE,
         * function(e) {
         * alert('Font size was changed');
         * });
         * </pre>
         * @param opt_domHelper DOM helper object that is used to determine
         * where to insert the DOM nodes used to determine when the font size
         * changes.
         */
        constructor(opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        resizeTarget_: any|null;
        disposeInternal(): void;
    }
}
declare module 'goog:goog.dom.FontSizeMonitor' {
    import alias = ಠ_ಠ.clutz.goog.dom.FontSizeMonitor;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.FontSizeMonitor {
    /**
     * The event types that the FontSizeMonitor fires.
     */
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        CHANGE: EventType,
    };
}
declare module 'goog:goog.dom.FontSizeMonitor.EventType' {
    import alias = ಠ_ಠ.clutz.goog.dom.FontSizeMonitor.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
    /**
     * This subclass of HTMLElement is used when only a HTMLElement is possible
     * and not any of its subclasses. Normally, a type can refer to an instance
     * of itself or an instance of any subtype. More concretely, if HTMLElement
     * is used then the compiler must assume that it might still be e.g.
     * HTMLScriptElement. With this, the type check knows that it couldn't be
     * any special element.
     */
    class HtmlElement extends HtmlElement_Instance {}
    class HtmlElement_Instance extends HTMLElement {
        /**
         * This subclass of HTMLElement is used when only a HTMLElement is
         * possible and not any of its subclasses. Normally, a type can refer to
         * an instance of itself or an instance of any subtype. More concretely,
         * if HTMLElement is used then the compiler must assume that it might
         * still be e.g. HTMLScriptElement. With this, the type check knows that
         * it couldn't be any special element.
         */
        constructor();
    }
}
declare module 'goog:goog.dom.HtmlElement' {
    import alias = ಠ_ಠ.clutz.goog.dom.HtmlElement;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
    /**
     * Enum of all input types (for INPUT, BUTTON, SELECT and TEXTAREA elements)
     * specified by the W3C HTML4.01 and HTML5 specifications.
     */
    type InputType = string&{clutzEnumBrand: never};
    var InputType: {
        BUTTON: InputType,
        CHECKBOX: InputType,
        COLOR: InputType,
        DATE: InputType,
        DATETIME: InputType,
        DATETIME_LOCAL: InputType,
        EMAIL: InputType,
        FILE: InputType,
        HIDDEN: InputType,
        IMAGE: InputType,
        MENU: InputType,
        MONTH: InputType,
        NUMBER: InputType,
        PASSWORD: InputType,
        RADIO: InputType,
        RANGE: InputType,
        RESET: InputType,
        SEARCH: InputType,
        SELECT_MULTIPLE: InputType,
        SELECT_ONE: InputType,
        SUBMIT: InputType,
        TEL: InputType,
        TEXT: InputType,
        TEXTAREA: InputType,
        TIME: InputType,
        URL: InputType,
        WEEK: InputType,
    };
}
declare module 'goog:goog.dom.InputType' {
    import alias = ಠ_ಠ.clutz.goog.dom.InputType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
    /**
     * Creates a new multi part range with no properties.  Do not use this
     * constructor: use one of the goog.dom.Range.createFrom* methods instead.
     */
    class MultiRange extends MultiRange_Instance {
        /**
         * Creates a new range wrapper from the given browser ranges.  Do not
         * use this method directly - please use goog.dom.Range.createFrom*
         * instead.
         * @param browserRanges The browser ranges.
         */
        static createFromBrowserRanges(browserRanges: (Range|null)[]|
                                       null): ಠ_ಠ.clutz.goog.dom.MultiRange;
        /**
         * Creates a new range wrapper from the given browser selection object.
         * Do not use this method directly - please use
         * goog.dom.Range.createFrom* instead.
         * @param selection The browser selection object.
         */
        static createFromBrowserSelection(selection: Selection|
                                          null): ಠ_ಠ.clutz.goog.dom.MultiRange;
        /**
         * Creates a new range wrapper from the given goog.dom.TextRange
         * objects.  Do not use this method directly - please use
         * goog.dom.Range.createFrom* instead.
         * @param textRanges The text range objects.
         */
        static createFromTextRanges(textRanges:
                                        (ಠ_ಠ.clutz.goog.dom.TextRange|null)[]|
                                    null): ಠ_ಠ.clutz.goog.dom.MultiRange;
    }
    class MultiRange_Instance extends
        ಠ_ಠ.clutz.goog.dom.AbstractMultiRange_Instance {
        __iterator__(opt_keys?: boolean): ಠ_ಠ.clutz.goog.dom.RangeIterator;
        clone(): ಠ_ಠ.clutz.goog.dom.MultiRange;
        /**
         * Collapses this range to a single point, either the first or last
         * point depending on the parameter.  This will result in the number of
         * ranges in this multi range becoming 1.
         * @param toAnchor Whether to collapse to the anchor.
         */
        collapse(toAnchor: boolean): any;
        getBrowserRangeObject(): Range|null|TextRange;
        getContainer(): Node|null;
        getEndNode(): Node|null;
        getEndOffset(): number;
        getHtmlFragment(): string;
        getPastableHtml(): string;
        getSortedRanges(): (ಠ_ಠ.clutz.goog.dom.TextRange|null)[];
        getStartNode(): Node|null;
        getStartOffset(): number;
        getText(): string;
        getTextRange(i: number): ಠ_ಠ.clutz.goog.dom.TextRange|null;
        getTextRangeCount(): number;
        getType(): ಠ_ಠ.clutz.goog.dom.RangeType;
        getValidHtml(): string;
        isCollapsed(): boolean;
        isRangeInDocument(): boolean;
        removeContents(): void;
        saveUsingDom(): ಠ_ಠ.clutz.goog.dom.SavedRange;
        select(): void;
        setBrowserRangeObject(nativeRange: Range|null|TextRange): boolean;
    }
}
declare module 'goog:goog.dom.MultiRange' {
    import alias = ಠ_ಠ.clutz.goog.dom.MultiRange;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
    /**
     * Subclass of goog.dom.TagIterator that iterates over a DOM range.  It
     * adds functions to determine the portion of each text node that is
     * selected.
     */
    class MultiRangeIterator extends MultiRangeIterator_Instance {}
    class MultiRangeIterator_Instance extends ಠ_ಠ.clutz.goog.dom.RangeIterator {
        /**
         * Subclass of goog.dom.TagIterator that iterates over a DOM range.  It
         * adds functions to determine the portion of each text node that is
         * selected.
         * @param range The range to traverse.
         */
        constructor(range: ಠ_ಠ.clutz.goog.dom.MultiRange|null);
        clone(): ಠ_ಠ.clutz.goog.dom.MultiRangeIterator;
        copyFrom(other: ಠ_ಠ.clutz.goog.dom.TagIterator|null): void;
        getEndNode(): Node|null;
        getEndTextOffset(): number;
        getStartNode(): Node|null;
        getStartTextOffset(): number;
        isLast(): boolean;
        next(): Node|null;
    }
}
declare module 'goog:goog.dom.MultiRangeIterator' {
    import alias = ಠ_ಠ.clutz.goog.dom.MultiRangeIterator;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
    /**
     * A DOM tree traversal iterator.
     *
     * Starting with the given node, the iterator walks the DOM in order,
     * reporting events for each node.  The iterator acts as a prefix iterator:
     *
     * <pre>
     * &lt;div&gt;1&lt;span&gt;2&lt;/span&gt;3&lt;/div&gt;
     * </pre>
     *
     * Will return the following nodes:
     *
     * <code>[div, 1, span, 2, 3]</code>
     *
     * With the following depths
     *
     * <code>[1, 1, 2, 2, 1]</code>
     *
     * Imagining <code>|</code> represents iterator position, the traversal
     * stops at each of the following locations:
     *
     * <pre>&lt;div&gt;|1|&lt;span&gt;|2|&lt;/span&gt;3|&lt;/div&gt;</pre>
     *
     * The iterator can also be used in reverse mode, which will return the
     * nodes and states in the opposite order.  The depths will be slightly
     * different since, like in normal mode, the depth is computed *after* the
     * last move.
     *
     * Lastly, it is possible to create an iterator that is unconstrained,
     * meaning that it will continue iterating until the end of the document
     * instead of until exiting the start node.
     */
    class NodeIterator extends NodeIterator_Instance {}
    class NodeIterator_Instance extends ಠ_ಠ.clutz.goog.dom.TagIterator {
        /**
         * A DOM tree traversal iterator.
         *
         * Starting with the given node, the iterator walks the DOM in order,
         * reporting events for each node.  The iterator acts as a prefix
         * iterator:
         *
         * <pre>
         * &lt;div&gt;1&lt;span&gt;2&lt;/span&gt;3&lt;/div&gt;
         * </pre>
         *
         * Will return the following nodes:
         *
         * <code>[div, 1, span, 2, 3]</code>
         *
         * With the following depths
         *
         * <code>[1, 1, 2, 2, 1]</code>
         *
         * Imagining <code>|</code> represents iterator position, the traversal
         * stops at each of the following locations:
         *
         * <pre>&lt;div&gt;|1|&lt;span&gt;|2|&lt;/span&gt;3|&lt;/div&gt;</pre>
         *
         * The iterator can also be used in reverse mode, which will return the
         * nodes and states in the opposite order.  The depths will be slightly
         * different since, like in normal mode, the depth is computed *after*
         * the last move.
         *
         * Lastly, it is possible to create an iterator that is unconstrained,
         * meaning that it will continue iterating until the end of the document
         * instead of until exiting the start node.
         * @param opt_node The start node.  Defaults to an empty iterator.
         * @param opt_reversed Whether to traverse the tree in reverse.
         * @param opt_unconstrained Whether the iterator is not constrained to
         * the starting node and its children.
         * @param opt_depth The starting tree depth.
         */
        constructor(
            opt_node?: Node|null, opt_reversed?: boolean,
            opt_unconstrained?: boolean, opt_depth?: number);
        /**
         * Moves to the next position in the DOM tree.
         */
        next(): Node|null;
    }
}
declare module 'goog:goog.dom.NodeIterator' {
    import alias = ಠ_ಠ.clutz.goog.dom.NodeIterator;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
    /**
     * Object to store the offset from one node to another in a way that works
     * on any similar DOM structure regardless of whether it is the same actual
     * nodes.
     */
    class NodeOffset extends NodeOffset_Instance {}
    class NodeOffset_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance {
        /**
         * Object to store the offset from one node to another in a way that
         * works on any similar DOM structure regardless of whether it is the
         * same actual nodes.
         * @param node The node to get the offset for.
         * @param baseNode The node to calculate the offset from.
         */
        constructor(node: Node|null, baseNode: Node|null);
        disposeInternal(): void;
        /**
         * Walk the dom and find the node relative to baseNode.  Returns null on
         * failure.
         * @param baseNode The node to start walking from.  Should be equivalent
         * to the node passed in to the constructor, in that it should have the
         * same contents.
         */
        findTargetNode(baseNode: Node|null): Node|null;
        toString(): string;
    }
}
declare module 'goog:goog.dom.NodeOffset' {
    import alias = ಠ_ಠ.clutz.goog.dom.NodeOffset;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
    /**
     * Constants for the nodeType attribute in the Node interface.
     *
     * These constants match those specified in the Node interface. These are
     * usually present on the Node object in recent browsers, but not in older
     * browsers (specifically, early IEs) and thus are given here.
     *
     * In some browsers (early IEs), these are not defined on the Node object,
     * so they are provided here.
     *
     * See http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-1950641247
     */
    enum NodeType {
        ATTRIBUTE,
        CDATA_SECTION,
        COMMENT,
        DOCUMENT,
        DOCUMENT_FRAGMENT,
        DOCUMENT_TYPE,
        ELEMENT,
        ENTITY,
        ENTITY_REFERENCE,
        NOTATION,
        PROCESSING_INSTRUCTION,
        TEXT,
    }
}
declare module 'goog:goog.dom.NodeType' {
    import alias = ಠ_ಠ.clutz.goog.dom.NodeType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.Range {
    /**
     * Clears the window's selection.
     * @param opt_win The window to get the selection of.  Defaults to the
     * window this class was defined in.
     */
    function clearSelection(opt_win?: Window|null): void;
    /**
     * Create a new range wrapper that represents a caret at the given node,
     * accounting for the given offset.  This always creates a TextRange,
     * regardless of whether node is an image node or other control range type
     * node.
     * @param node The node to place a caret at.
     * @param offset The offset within the node to place the caret at.
     */
    function createCaret(
        node: Node|null, offset: number): ಠ_ಠ.clutz.goog.dom.AbstractRange;
    /**
     * Create a new range wrapper from the given browser range object.
     * @param range The browser range object.
     * @param opt_isReversed Whether the focus node is before the anchor node.
     */
    function createFromBrowserRange(
        range: Range|null|TextRange,
        opt_isReversed?: boolean): ಠ_ಠ.clutz.goog.dom.AbstractRange;
    /**
     * Create a new range wrapper from the given browser selection object.  Note
     * that this object does not auto-update if the user changes their selection
     * and should be used as a snapshot.
     * @param selection The browser selection object.
     */
    function createFromBrowserSelection(selection: GlobalObject):
        ಠ_ಠ.clutz.goog.dom.AbstractRange|null;
    /**
     * Create a new range wrapper that selects the given node's text.
     * @param node The node to select.
     * @param opt_isReversed Whether the focus node is before the anchor node.
     */
    function createFromNodeContents(node: Node|null, opt_isReversed?: boolean):
        ಠ_ಠ.clutz.goog.dom.AbstractRange;
    /**
     * Create a new range wrapper that selects the area between the given nodes,
     * accounting for the given offsets.
     * @param anchorNode The node to anchor on.
     * @param anchorOffset The offset within the node to anchor on.
     * @param focusNode The node to focus on.
     * @param focusOffset The offset within the node to focus on.
     */
    function createFromNodes(
        anchorNode: Node|null, anchorOffset: number, focusNode: Node|null,
        focusOffset: number): ಠ_ಠ.clutz.goog.dom.AbstractRange;
    /**
     * Create a new selection from the given browser window's current selection.
     * Note that this object does not auto-update if the user changes their
     * selection and should be used as a snapshot.
     * @param opt_win The window to get the selection of.  Defaults to the
     * window this class was defined in.
     */
    function createFromWindow(opt_win?: Window|
                              null): ಠ_ಠ.clutz.goog.dom.AbstractRange|null;
    /**
     * Tests if the window has a selection.
     * @param opt_win The window to check the selection of.  Defaults to the
     * window this class was defined in.
     */
    function hasSelection(opt_win?: Window|null): boolean;
    /**
     * Returns whether the focus position occurs before the anchor position.
     * @param anchorNode The node to anchor on.
     * @param anchorOffset The offset within the node to anchor on.
     * @param focusNode The node to focus on.
     * @param focusOffset The offset within the node to focus on.
     */
    function isReversed(
        anchorNode: Node|null, anchorOffset: number, focusNode: Node|null,
        focusOffset: number): boolean;
}
declare module 'goog:goog.dom.Range' {
    import alias = ಠ_ಠ.clutz.goog.dom.Range;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
    /**
     * Constants for selection endpoints.
     */
    enum RangeEndpoint {
        END,
        START,
    }
}
declare module 'goog:goog.dom.RangeEndpoint' {
    import alias = ಠ_ಠ.clutz.goog.dom.RangeEndpoint;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
    /**
     * Subclass of goog.dom.TagIterator that iterates over a DOM range.  It
     * adds functions to determine the portion of each text node that is
     * selected.
     */
    class RangeIterator extends RangeIterator_Instance {}
    class RangeIterator_Instance extends ಠ_ಠ.clutz.goog.dom.TagIterator {
        /**
         * Subclass of goog.dom.TagIterator that iterates over a DOM range.  It
         * adds functions to determine the portion of each text node that is
         * selected.
         * @param node The node to start traversal at.  When null, creates an
         * empty iterator.
         * @param opt_reverse Whether to traverse nodes in reverse.
         */
        constructor(node: Node|null, opt_reverse?: boolean);
        getEndNode(): Node|null;
        getEndTextOffset(): number;
        getStartNode(): Node|null;
        getStartTextOffset(): number;
        isLast(): boolean;
    }
}
declare module 'goog:goog.dom.RangeIterator' {
    import alias = ಠ_ಠ.clutz.goog.dom.RangeIterator;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
    /**
     * Types of ranges.
     */
    type RangeType = string&{clutzEnumBrand: never};
    var RangeType: {
        CONTROL: RangeType,
        MULTI: RangeType,
        TEXT: RangeType,
    };
}
declare module 'goog:goog.dom.RangeType' {
    import alias = ಠ_ಠ.clutz.goog.dom.RangeType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
    /**
     * A struct for holding context about saved selections.
     * This can be used to preserve the selection and restore while the DOM is
     * manipulated, or through an asynchronous call. Use goog.dom.Range factory
     * methods to obtain an {@see goog.dom.AbstractRange} instance, and use
     * {@see goog.dom.AbstractRange#saveUsingCarets} to obtain a SavedCaretRange.
     * For editor ranges under content-editable elements or design-mode iframes,
     * prefer using {@see goog.editor.range.saveUsingNormalizedCarets}.
     */
    class SavedCaretRange extends SavedCaretRange_Instance {
        /**
         * A regex that will match all saved range carets in a string.
         */
        static CARET_REGEX: RegExp|null;
        /**
         * Returns whether two strings of html are equal, ignoring any saved
         * carets. Thus two strings of html whose only difference is the id of
         * their saved carets will be considered equal, since they represent
         * html with the same selection.
         * @param str1 The first string.
         * @param str2 The second string.
         */
        static htmlEqual(str1: string, str2: string): boolean;
    }
    class SavedCaretRange_Instance extends
        ಠ_ಠ.clutz.goog.dom.SavedRange_Instance {
        /**
         * A struct for holding context about saved selections.
         * This can be used to preserve the selection and restore while the DOM
         * is manipulated, or through an asynchronous call. Use goog.dom.Range
         * factory
         * methods to obtain an {@see goog.dom.AbstractRange} instance, and use
         * {@see goog.dom.AbstractRange#saveUsingCarets} to obtain a SavedCaretRange.
         * For editor ranges under content-editable elements or design-mode
         * iframes,
         * prefer using {@see goog.editor.range.saveUsingNormalizedCarets}.
         * @param range The range being saved.
         */
        constructor(range: ಠ_ಠ.clutz.goog.dom.AbstractRange|null);
        /**
         * Dispose the saved range and remove the carets from the DOM.
         */
        disposeInternal(): void;
        /**
         * Gets carets.
         * @param start If true, returns the start caret. Otherwise, get the end
         * caret.
         */
        getCaret(start: boolean): GlobalElement|null;
        /**
         * Removes the carets from the current restoration document.
         * @param opt_range A range whose offsets have already been adjusted for
         * caret removal; it will be adjusted if it is also affected by
         * post-removal operations, such as text node normalization.
         */
        removeCarets(opt_range?: ಠ_ಠ.clutz.goog.dom.AbstractRange|
                     null): ಠ_ಠ.clutz.goog.dom.AbstractRange|null|undefined;
        /**
         * Reconstruct the selection from the given saved range. Removes carets
         * after restoring the selection. If restore does not dispose this saved
         * range, it may only be restored a second time if innerHTML or some
         * other mechanism is used to restore the carets to the dom.
         */
        restoreInternal(): ಠ_ಠ.clutz.goog.dom.AbstractRange|null;
        /**
         * Sets the document where the range will be restored.
         * @param doc An HTML document.
         */
        setRestorationDocument(doc: Document): void;
        /**
         * Gets the range that this SavedCaretRage represents, without selecting
         * it or removing the carets from the DOM.
         */
        toAbstractRange(): ಠ_ಠ.clutz.goog.dom.AbstractRange|null;
    }
}
declare module 'goog:goog.dom.SavedCaretRange' {
    import alias = ಠ_ಠ.clutz.goog.dom.SavedCaretRange;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
    /**
     * Abstract interface for a saved range.
     */
    class SavedRange extends SavedRange_Instance {}
    class SavedRange_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance {
        /**
         * Restores the range and by default disposes of the saved copy.  Take
         * note: this means the by default SavedRange objects are single use
         * objects.
         * @param opt_stayAlive Whether this SavedRange should stay alive (not
         * be disposed) after restoring the range. Defaults to false (dispose).
         */
        restore(opt_stayAlive?: boolean): ಠ_ಠ.clutz.goog.dom.AbstractRange|null;
        /**
         * Internal method to restore the saved range.
         */
        restoreInternal(): ಠ_ಠ.clutz.goog.dom.AbstractRange|null;
    }
}
declare module 'goog:goog.dom.SavedRange' {
    import alias = ಠ_ಠ.clutz.goog.dom.SavedRange;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
    /**
     * A DOM tree traversal iterator.
     *
     * Starting with the given node, the iterator walks the DOM in order,
     * reporting events for the start and end of Elements, and the presence of
     * text nodes. For example:
     *
     * <pre>
     * &lt;div&gt;1&lt;span&gt;2&lt;/span&gt;3&lt;/div&gt;
     * </pre>
     *
     * Will return the following nodes:
     *
     * <code>[div, 1, span, 2, span, 3, div]</code>
     *
     * With the following states:
     *
     * <code>[START, OTHER, START, OTHER, END, OTHER, END]</code>
     *
     * And the following depths
     *
     * <code>[1, 1, 2, 2, 1, 1, 0]</code>
     *
     * Imagining <code>|</code> represents iterator position, the traversal
     * stops at each of the following locations:
     *
     * <pre>
     * &lt;div&gt;|1|&lt;span&gt;|2|&lt;/span&gt;|3|&lt;/div&gt;|
     * </pre>
     *
     * The iterator can also be used in reverse mode, which will return the
     * nodes and states in the opposite order.  The depths will be slightly
     * different since, like in normal mode, the depth is computed *after* the
     * given node.
     *
     * Lastly, it is possible to create an iterator that is unconstrained,
     * meaning that it will continue iterating until the end of the document
     * instead of until exiting the start node.
     */
    class TagIterator extends TagIterator_Instance {}
    class TagIterator_Instance extends
        ಠ_ಠ.clutz.goog.iter.Iterator_Instance<Node|null> {
        /**
         * A DOM tree traversal iterator.
         *
         * Starting with the given node, the iterator walks the DOM in order,
         * reporting events for the start and end of Elements, and the presence
         * of text nodes. For example:
         *
         * <pre>
         * &lt;div&gt;1&lt;span&gt;2&lt;/span&gt;3&lt;/div&gt;
         * </pre>
         *
         * Will return the following nodes:
         *
         * <code>[div, 1, span, 2, span, 3, div]</code>
         *
         * With the following states:
         *
         * <code>[START, OTHER, START, OTHER, END, OTHER, END]</code>
         *
         * And the following depths
         *
         * <code>[1, 1, 2, 2, 1, 1, 0]</code>
         *
         * Imagining <code>|</code> represents iterator position, the traversal
         * stops at each of the following locations:
         *
         * <pre>
         * &lt;div&gt;|1|&lt;span&gt;|2|&lt;/span&gt;|3|&lt;/div&gt;|
         * </pre>
         *
         * The iterator can also be used in reverse mode, which will return the
         * nodes and states in the opposite order.  The depths will be slightly
         * different since, like in normal mode, the depth is computed *after*
         * the given node.
         *
         * Lastly, it is possible to create an iterator that is unconstrained,
         * meaning that it will continue iterating until the end of the document
         * instead of until exiting the start node.
         * @param opt_node The start node.  If unspecified or null, defaults to
         * an empty iterator.
         * @param opt_reversed Whether to traverse the tree in reverse.
         * @param opt_unconstrained Whether the iterator is not constrained to
         * the starting node and its children.
         * @param opt_tagType The type of the position. Defaults to the start of
         * the given node for forward iterators, and the end of the node for
         * reverse iterators.
         * @param opt_depth The starting tree depth.
         */
        constructor(
            opt_node?: Node|null, opt_reversed?: boolean,
            opt_unconstrained?: boolean,
            opt_tagType?: ಠ_ಠ.clutz.goog.dom.TagWalkType|null,
            opt_depth?: number);
        /**
         * Whether the iterator is constrained to the starting node and its
         * children.
         */
        constrained: boolean;
        /**
         * The tree depth of this position relative to where the iterator
         * started. The depth is considered to be the tree depth just past the
         * current node, so if an iterator is at position <pre> <div>|</div>
         * </pre>
         * (i.e. the node is the div and the type is START_TAG) its depth will
         * be 1.
         */
        depth: number;
        /**
         * The node this position is located on.
         */
        node: Node|null;
        /**
         * Whether the node iterator is moving in reverse.
         */
        reversed: boolean;
        /**
         * The type of this position.
         */
        tagType: ಠ_ಠ.clutz.goog.dom.TagWalkType;
        clone(): ಠ_ಠ.clutz.goog.dom.TagIterator;
        /**
         * Replace this iterator's values with values from another. The two
         * iterators must be of the same type.
         * @param other The iterator to copy.
         */
        copyFrom(other: ಠ_ಠ.clutz.goog.dom.TagIterator|null): void;
        /**
         * Test if two iterators are at the same position - i.e. if the node and
         * tagType is the same.  This will still return true if the two
         * iterators are moving in opposite directions or have different
         * constraints.
         * @param other The iterator to compare to.
         */
        equals(other: ಠ_ಠ.clutz.goog.dom.TagIterator|null): boolean;
        isEndTag(): boolean;
        isNonElement(): boolean;
        isStartTag(): boolean;
        isStarted(): boolean;
        /**
         * Move to the next position in the DOM tree.
         */
        next(): Node|null;
        /**
         * Restart the current tag.
         */
        restartTag(): void;
        /**
         * Set the position of the iterator.  Overwrite the tree node and the
         * position type which can be one of the {@link goog.dom.TagWalkType}
         * token types. Only overwrites the tree depth when the parameter is
         * specified.
         * @param node The node to set the position to.
         * @param opt_tagType The type of the position Defaults to the start of
         * the given node.
         * @param opt_depth The tree depth.
         */
        setPosition(
            node: Node|null, opt_tagType?: ಠ_ಠ.clutz.goog.dom.TagWalkType|null,
            opt_depth?: number): void;
        /**
         * Skip the current tag.
         */
        skipTag(): void;
        /**
         * Replace the current node with the list of nodes. Reset the iterator
         * so that it visits the first of the nodes next.
         * @param var_args A list of nodes to replace the current node with. If
         * the first argument is array-like, it will be used, otherwise all the
         * arguments are assumed to be nodes.
         */
        splice(...var_args: (GlobalObject|null|undefined)[]): void;
    }
}
declare module 'goog:goog.dom.TagIterator' {
    import alias = ಠ_ಠ.clutz.goog.dom.TagIterator;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
    /**
     * A tag name with the type of the element stored in the generic.
     */
    class TagName<T = any> extends TagName_Instance<T> {
        static A: ಠ_ಠ.clutz.goog.dom.TagName<HTMLAnchorElement>;
        static ABBR: ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static ACRONYM:
            ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static ADDRESS:
            ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static APPLET: ಠ_ಠ.clutz.goog.dom.TagName<HTMLAppletElement>;
        static AREA: ಠ_ಠ.clutz.goog.dom.TagName<HTMLAreaElement>;
        static ARTICLE:
            ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static ASIDE:
            ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static AUDIO: ಠ_ಠ.clutz.goog.dom.TagName<HTMLAudioElement>;
        static B: ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static BASE: ಠ_ಠ.clutz.goog.dom.TagName<HTMLBaseElement>;
        static BASEFONT: ಠ_ಠ.clutz.goog.dom.TagName<HTMLBaseFontElement>;
        static BDI: ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static BDO: ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static BIG: ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static BLOCKQUOTE: ಠ_ಠ.clutz.goog.dom.TagName<HTMLQuoteElement>;
        static BODY: ಠ_ಠ.clutz.goog.dom.TagName<HTMLBodyElement>;
        static BR: ಠ_ಠ.clutz.goog.dom.TagName<HTMLBRElement>;
        static BUTTON: ಠ_ಠ.clutz.goog.dom.TagName<HTMLButtonElement>;
        static CANVAS: ಠ_ಠ.clutz.goog.dom.TagName<HTMLCanvasElement>;
        static CAPTION: ಠ_ಠ.clutz.goog.dom.TagName<HTMLTableCaptionElement>;
        static CENTER:
            ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static CITE: ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static CODE: ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static COL: ಠ_ಠ.clutz.goog.dom.TagName<HTMLTableColElement>;
        static COLGROUP: ಠ_ಠ.clutz.goog.dom.TagName<HTMLTableColElement>;
        static COMMAND:
            ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static DATA: ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static DATALIST: ಠ_ಠ.clutz.goog.dom.TagName<HTMLDataListElement>;
        static DD: ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static DEL: ಠ_ಠ.clutz.goog.dom.TagName<HTMLModElement>;
        static DETAILS: ಠ_ಠ.clutz.goog.dom.TagName<HTMLDetailsElement>;
        static DFN: ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static DIALOG: ಠ_ಠ.clutz.goog.dom.TagName<HTMLDialogElement>;
        static DIR: ಠ_ಠ.clutz.goog.dom.TagName<HTMLDirectoryElement>;
        static DIV: ಠ_ಠ.clutz.goog.dom.TagName<HTMLDivElement>;
        static DL: ಠ_ಠ.clutz.goog.dom.TagName<HTMLDListElement>;
        static DT: ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static EM: ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static EMBED: ಠ_ಠ.clutz.goog.dom.TagName<HTMLEmbedElement>;
        static FIELDSET: ಠ_ಠ.clutz.goog.dom.TagName<HTMLFieldSetElement>;
        static FIGCAPTION:
            ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static FIGURE:
            ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static FONT: ಠ_ಠ.clutz.goog.dom.TagName<HTMLFontElement>;
        static FOOTER:
            ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static FORM: ಠ_ಠ.clutz.goog.dom.TagName<HTMLFormElement>;
        static FRAME: ಠ_ಠ.clutz.goog.dom.TagName<HTMLFrameElement>;
        static FRAMESET: ಠ_ಠ.clutz.goog.dom.TagName<HTMLFrameSetElement>;
        static H1: ಠ_ಠ.clutz.goog.dom.TagName<HTMLHeadingElement>;
        static H2: ಠ_ಠ.clutz.goog.dom.TagName<HTMLHeadingElement>;
        static H3: ಠ_ಠ.clutz.goog.dom.TagName<HTMLHeadingElement>;
        static H4: ಠ_ಠ.clutz.goog.dom.TagName<HTMLHeadingElement>;
        static H5: ಠ_ಠ.clutz.goog.dom.TagName<HTMLHeadingElement>;
        static H6: ಠ_ಠ.clutz.goog.dom.TagName<HTMLHeadingElement>;
        static HEAD: ಠ_ಠ.clutz.goog.dom.TagName<HTMLHeadElement>;
        static HEADER:
            ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static HGROUP:
            ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static HR: ಠ_ಠ.clutz.goog.dom.TagName<HTMLHRElement>;
        static HTML: ಠ_ಠ.clutz.goog.dom.TagName<HTMLHtmlElement>;
        static I: ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static IFRAME: ಠ_ಠ.clutz.goog.dom.TagName<HTMLIFrameElement>;
        static IMG: ಠ_ಠ.clutz.goog.dom.TagName<HTMLImageElement>;
        static INPUT: ಠ_ಠ.clutz.goog.dom.TagName<HTMLInputElement>;
        static INS: ಠ_ಠ.clutz.goog.dom.TagName<HTMLModElement>;
        static ISINDEX:
            ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.HTMLIsIndexElement>;
        static KBD: ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static KEYGEN:
            ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static LABEL: ಠ_ಠ.clutz.goog.dom.TagName<HTMLLabelElement>;
        static LEGEND: ಠ_ಠ.clutz.goog.dom.TagName<HTMLLegendElement>;
        static LI: ಠ_ಠ.clutz.goog.dom.TagName<HTMLLIElement>;
        static LINK: ಠ_ಠ.clutz.goog.dom.TagName<HTMLLinkElement>;
        static MAIN: ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static MAP: ಠ_ಠ.clutz.goog.dom.TagName<HTMLMapElement>;
        static MARK: ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static MATH: ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static MENU: ಠ_ಠ.clutz.goog.dom.TagName<HTMLMenuElement>;
        static MENUITEM:
            ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.HTMLMenuItemElement>;
        static META: ಠ_ಠ.clutz.goog.dom.TagName<HTMLMetaElement>;
        static METER: ಠ_ಠ.clutz.goog.dom.TagName<HTMLMeterElement>;
        static NAV: ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static NOFRAMES:
            ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static NOSCRIPT:
            ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static OBJECT: ಠ_ಠ.clutz.goog.dom.TagName<HTMLObjectElement>;
        static OL: ಠ_ಠ.clutz.goog.dom.TagName<HTMLOListElement>;
        static OPTGROUP: ಠ_ಠ.clutz.goog.dom.TagName<HTMLOptGroupElement>;
        static OPTION: ಠ_ಠ.clutz.goog.dom.TagName<HTMLOptionElement>;
        static OUTPUT: ಠ_ಠ.clutz.goog.dom.TagName<HTMLOutputElement>;
        static P: ಠ_ಠ.clutz.goog.dom.TagName<HTMLParagraphElement>;
        static PARAM: ಠ_ಠ.clutz.goog.dom.TagName<HTMLParamElement>;
        static PICTURE: ಠ_ಠ.clutz.goog.dom.TagName<HTMLPictureElement>;
        static PRE: ಠ_ಠ.clutz.goog.dom.TagName<HTMLPreElement>;
        static PROGRESS: ಠ_ಠ.clutz.goog.dom.TagName<HTMLProgressElement>;
        static Q: ಠ_ಠ.clutz.goog.dom.TagName<HTMLQuoteElement>;
        static RP: ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static RT: ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static RTC: ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static RUBY: ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static S: ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static SAMP: ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static SCRIPT: ಠ_ಠ.clutz.goog.dom.TagName<HTMLScriptElement>;
        static SECTION:
            ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static SELECT: ಠ_ಠ.clutz.goog.dom.TagName<HTMLSelectElement>;
        static SMALL:
            ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static SOURCE: ಠ_ಠ.clutz.goog.dom.TagName<HTMLSourceElement>;
        static SPAN: ಠ_ಠ.clutz.goog.dom.TagName<HTMLSpanElement>;
        static STRIKE:
            ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static STRONG:
            ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static STYLE: ಠ_ಠ.clutz.goog.dom.TagName<HTMLStyleElement>;
        static SUB: ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static SUMMARY:
            ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static SUP: ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static SVG: ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static TABLE: ಠ_ಠ.clutz.goog.dom.TagName<HTMLTableElement>;
        static TBODY: ಠ_ಠ.clutz.goog.dom.TagName<HTMLTableSectionElement>;
        static TD: ಠ_ಠ.clutz.goog.dom.TagName<HTMLTableCellElement>;
        static TEMPLATE: ಠ_ಠ.clutz.goog.dom.TagName<HTMLTemplateElement>;
        static TEXTAREA: ಠ_ಠ.clutz.goog.dom.TagName<HTMLTextAreaElement>;
        static TFOOT: ಠ_ಠ.clutz.goog.dom.TagName<HTMLTableSectionElement>;
        static TH: ಠ_ಠ.clutz.goog.dom.TagName<HTMLTableCellElement>;
        static THEAD: ಠ_ಠ.clutz.goog.dom.TagName<HTMLTableSectionElement>;
        static TIME: ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static TITLE: ಠ_ಠ.clutz.goog.dom.TagName<HTMLTitleElement>;
        static TR: ಠ_ಠ.clutz.goog.dom.TagName<HTMLTableRowElement>;
        static TRACK: ಠ_ಠ.clutz.goog.dom.TagName<HTMLTrackElement>;
        static TT: ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static U: ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static UL: ಠ_ಠ.clutz.goog.dom.TagName<HTMLUListElement>;
        static VAR: ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
        static VIDEO: ಠ_ಠ.clutz.goog.dom.TagName<HTMLVideoElement>;
        static WBR: ಠ_ಠ.clutz.goog.dom.TagName<ಠ_ಠ.clutz.goog.dom.HtmlElement>;
    }
    class TagName_Instance<T = any> {
        private noStructuralTyping_: any;
        /**
         * A tag name with the type of the element stored in the generic.
         */
        constructor(tagName: string);
        /**
         * Returns the tag name.
         */
        toString(): string;
    }
}
declare module 'goog:goog.dom.TagName' {
    import alias = ಠ_ಠ.clutz.goog.dom.TagName;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
    /**
     * There are three types of token:
     * <ol>
     * <li>{@code START_TAG} - The beginning of a tag.
     * <li>{@code OTHER} - Any non-element node position.
     * <li>{@code END_TAG} - The end of a tag.
     * </ol>
     * Users of this enumeration can rely on {@code START_TAG + END_TAG = 0} and
     * that {@code OTHER = 0}.
     */
    enum TagWalkType {
        END_TAG,
        OTHER,
        START_TAG,
    }
}
declare module 'goog:goog.dom.TagWalkType' {
    import alias = ಠ_ಠ.clutz.goog.dom.TagWalkType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
    /**
     * Create a new text selection with no properties.  Do not use this
     * constructor: use one of the goog.dom.Range.createFrom* methods instead.
     */
    class TextRange extends TextRange_Instance {
        /**
         * Create a new range wrapper from the given browser range object.  Do
         * not use this method directly - please use goog.dom.Range.createFrom*
         * instead.
         * @param range The browser range object.
         * @param opt_isReversed Whether the focus node is before the anchor
         * node.
         */
        static createFromBrowserRange(
            range: Range|null|TextRange,
            opt_isReversed?: boolean): ಠ_ಠ.clutz.goog.dom.TextRange;
        /**
         * Create a new range wrapper that selects the given node's text.  Do
         * not use this method directly - please use goog.dom.Range.createFrom*
         * instead.
         * @param node The node to select.
         * @param opt_isReversed Whether the focus node is before the anchor
         * node.
         */
        static createFromNodeContents(
            node: Node|null,
            opt_isReversed?: boolean): ಠ_ಠ.clutz.goog.dom.TextRange;
        /**
         * Create a new range wrapper that selects the area between the given
         * nodes, accounting for the given offsets.  Do not use this method
         * directly - please use goog.dom.Range.createFrom* instead.
         * @param anchorNode The node to start with.
         * @param anchorOffset The offset within the node to start.
         * @param focusNode The node to end with.
         * @param focusOffset The offset within the node to end.
         */
        static createFromNodes(
            anchorNode: Node|null, anchorOffset: number, focusNode: Node|null,
            focusOffset: number): ಠ_ಠ.clutz.goog.dom.TextRange;
        /**
         * Tests if the given node is in a document.
         * @param node The node to check.
         */
        static isAttachedNode(node: Node|null): boolean;
    }
    class TextRange_Instance extends ಠ_ಠ.clutz.goog.dom.AbstractRange_Instance {
        /**
         * Returns a TextRangeIterator over the contents of the range.
         * Regardless of the direction of the range, the iterator will move in
         * document order.
         * @param opt_keys Unused for this iterator.
         */
        __iterator__(opt_keys?: boolean): ಠ_ಠ.clutz.goog.dom.TextRangeIterator;
        clone(): ಠ_ಠ.clutz.goog.dom.TextRange;
        collapse(toAnchor: boolean): any;
        containsNode(node: Node|null, opt_allowPartial?: boolean): boolean;
        containsRange(
            otherRange: ಠ_ಠ.clutz.goog.dom.AbstractRange|null,
            opt_allowPartial?: boolean): boolean;
        getBrowserRangeObject(): Range|null|TextRange;
        getContainer(): Node|null;
        getEndNode(): Node|null;
        getEndOffset(): number;
        getEndPosition(): ಠ_ಠ.clutz.goog.math.Coordinate|null;
        getHtmlFragment(): string;
        getPastableHtml(): string;
        getStartNode(): Node|null;
        getStartOffset(): number;
        getStartPosition(): ಠ_ಠ.clutz.goog.math.Coordinate|null;
        getText(): string;
        getTextRange(i: number): ಠ_ಠ.clutz.goog.dom.TextRange|null;
        getTextRangeCount(): number;
        getType(): ಠ_ಠ.clutz.goog.dom.RangeType;
        getValidHtml(): string;
        insertNode(node: Node|null, before: boolean): Node|null;
        isCollapsed(): boolean;
        isRangeInDocument(): boolean;
        isReversed(): boolean;
        /**
         * Moves a TextRange to the provided nodes and offsets.
         * @param startNode The node to start with.
         * @param startOffset The offset within the node to start.
         * @param endNode The node to end with.
         * @param endOffset The offset within the node to end.
         * @param isReversed Whether the range is reversed.
         */
        moveToNodes(
            startNode: Node|null, startOffset: number, endNode: Node|null,
            endOffset: number, isReversed: boolean): void;
        removeContents(): void;
        saveUsingDom(): ಠ_ಠ.clutz.goog.dom.SavedRange;
        select(): void;
        setBrowserRangeObject(nativeRange: Range|null|TextRange): boolean;
        /**
         * Surrounds the text range with the specified element (on Mozilla) or
         * with a clone of the specified element (on IE).  Returns a reference
         * to the surrounding element if the operation was successful; returns
         * null if the operation failed.
         * @param element The element with which the selection is to be
         * surrounded.
         */
        surroundContents(element: GlobalElement|null): GlobalElement|null;
        surroundWithNodes(
            startNode: GlobalElement|null, endNode: GlobalElement|null): any;
    }
}
declare module 'goog:goog.dom.TextRange' {
    import alias = ಠ_ಠ.clutz.goog.dom.TextRange;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
    /**
     * Subclass of goog.dom.TagIterator that iterates over a DOM range.  It
     * adds functions to determine the portion of each text node that is
     * selected.
     */
    class TextRangeIterator extends TextRangeIterator_Instance {}
    class TextRangeIterator_Instance extends ಠ_ಠ.clutz.goog.dom.RangeIterator {
        /**
         * Subclass of goog.dom.TagIterator that iterates over a DOM range.  It
         * adds functions to determine the portion of each text node that is
         * selected.
         * @param startNode The starting node position.
         * @param startOffset The offset in to startNode.  If startNode is an
         * element, indicates an offset in to childNodes.  If startNode is a
         * text node, indicates an offset in to nodeValue.
         * @param endNode The ending node position.
         * @param endOffset The offset in to endNode.  If endNode is an element,
         * indicates an offset in to childNodes.  If endNode is a text node,
         * indicates an offset in to nodeValue.
         * @param opt_reverse Whether to traverse nodes in reverse.
         */
        constructor(
            startNode: Node|null, startOffset: number, endNode: Node|null,
            endOffset: number, opt_reverse?: boolean);
        clone(): ಠ_ಠ.clutz.goog.dom.TextRangeIterator;
        copyFrom(other: ಠ_ಠ.clutz.goog.dom.TagIterator|null): void;
        getEndNode(): Node|null;
        getEndTextOffset(): number;
        getStartNode(): Node|null;
        getStartTextOffset(): number;
        isLast(): boolean;
        /**
         * Move to the next position in the selection.
         * Throws {@code goog.iter.StopIteration} when it passes the end of the
         * range.
         */
        next(): Node|null;
        /**
         * Change the end node of the iterator.
         * @param node The new end node.
         */
        setEndNode(node: Node|null): void;
        /**
         * Change the start node of the iterator.
         * @param node The new start node.
         */
        setStartNode(node: Node|null): void;
        skipTag(): void;
    }
}
declare module 'goog:goog.dom.TextRangeIterator' {
    import alias = ಠ_ಠ.clutz.goog.dom.TextRangeIterator;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom {
    /**
     * This class can be used to monitor changes in the viewport size. Instances
     * dispatch a {@link goog.events.EventType.RESIZE} event when the viewport
     * size changes.  Handlers can call {@link
     * goog.dom.ViewportSizeMonitor#getSize} to get the new viewport size.
     *
     * Use this class if you want to execute resize/reflow logic each time the
     * user resizes the browser window.  This class is guaranteed to only
     * dispatch
     * {@code RESIZE} events when the pixel dimensions of the viewport change.
     * (Internet Explorer fires resize events if any element on the page is
     * resized, even if the viewport dimensions are unchanged, which can lead to
     * infinite resize loops.)
     *
     * Example usage:
     * <pre>
     * var vsm = new goog.dom.ViewportSizeMonitor();
     * goog.events.listen(vsm, goog.events.EventType.RESIZE, function(e) {
     * alert('Viewport size changed to ' + vsm.getSize());
     * });
     * </pre>
     *
     * Manually verified on IE6, IE7, FF2, Opera 11, Safari 4 and Chrome.
     */
    class ViewportSizeMonitor extends ViewportSizeMonitor_Instance {
        /**
         * Returns a viewport size monitor for the given window.  A new one is
         * created if it doesn't exist already.  This prevents the unnecessary
         * creation of multiple spooling monitors for a window.
         * @param opt_window The window to monitor; defaults to the window in
         * which this code is executing.
         */
        static getInstanceForWindow(opt_window?: Window|null):
            ಠ_ಠ.clutz.goog.dom.ViewportSizeMonitor;
        /**
         * Removes and disposes a viewport size monitor for the given window if
         * one exists.
         * @param opt_window The window whose monitor should be removed;
         * defaults to the window in which this code is executing.
         */
        static removeInstanceForWindow(opt_window?: Window|null): void;
    }
    class ViewportSizeMonitor_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * This class can be used to monitor changes in the viewport size.
         * Instances dispatch a {@link goog.events.EventType.RESIZE} event when
         * the viewport size changes.  Handlers can call {@link
         * goog.dom.ViewportSizeMonitor#getSize} to get the new viewport size.
         *
         * Use this class if you want to execute resize/reflow logic each time
         * the user resizes the browser window.  This class is guaranteed to
         * only dispatch
         * {@code RESIZE} events when the pixel dimensions of the viewport
         * change. (Internet Explorer fires resize events if any element on the
         * page is resized, even if the viewport dimensions are unchanged, which
         * can lead to infinite resize loops.)
         *
         * Example usage:
         * <pre>
         * var vsm = new goog.dom.ViewportSizeMonitor();
         * goog.events.listen(vsm, goog.events.EventType.RESIZE, function(e) {
         * alert('Viewport size changed to ' + vsm.getSize());
         * });
         * </pre>
         *
         * Manually verified on IE6, IE7, FF2, Opera 11, Safari 4 and Chrome.
         * @param opt_window The window to monitor; defaults to the window in
         * which this code is executing.
         */
        constructor(opt_window?: Window|null);
        disposeInternal(): void;
        /**
         * Returns the most recently recorded size of the viewport, in pixels.
         * May return null if no window resize event has been handled yet.
         */
        getSize(): ಠ_ಠ.clutz.goog.math.Size|null;
    }
}
declare module 'goog:goog.dom.ViewportSizeMonitor' {
    import alias = ಠ_ಠ.clutz.goog.dom.ViewportSizeMonitor;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.animationFrame {
    /**
     * Returns a function that schedules the two passed-in functions to be run
     * upon the next animation frame. Calling the function again during the same
     * animation frame does nothing.
     *
     * The function under the "measure" key will run first and together with all
     * other functions scheduled under this key and the function under "mutate"
     * will run after that.
     * @param opt_context Context in which to run the function.
     */
    function createTask<THIS = any>(
        spec: {
            measure?: (a: ಠ_ಠ.clutz.goog.dom.animationFrame.State) => any,
            mutate?: (a: ಠ_ಠ.clutz.goog.dom.animationFrame.State) => any
        },
        opt_context?: THIS): (...a: any[]) => any;
    function isRunning(): boolean;
}
declare module 'goog:goog.dom.animationFrame' {
    import alias = ಠ_ಠ.clutz.goog.dom.animationFrame;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.animationFrame {
    type Spec = {measure?: (...a: any[]) => any, mutate?: (...a: any[]) => any};
}
declare module 'goog:goog.dom.animationFrame.Spec' {
    import alias = ಠ_ಠ.clutz.goog.dom.animationFrame.Spec;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.animationFrame {
    /**
     * A type to represent state. Users may add properties as desired.
     */
    class State extends State_Instance {}
    class State_Instance {
        private noStructuralTyping_: any;
    }
}
declare module 'goog:goog.dom.animationFrame.State' {
    import alias = ಠ_ಠ.clutz.goog.dom.animationFrame.State;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.animationFrame.polyfill {
    var ENABLED: boolean;
    /**
     * Installs the requestAnimationFrame (and cancelAnimationFrame) polyfill.
     */
    function install(): void;
}
declare module 'goog:goog.dom.animationFrame.polyfill' {
    import alias = ಠ_ಠ.clutz.goog.dom.animationFrame.polyfill;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.annotate {
    /**
     * Calls {@code annotateFn} for each occurrence of a search term in text
     * nodes under {@code node}. Returns the number of hits.
     * @param node A DOM node.
     * @param terms An array of [searchTerm, matchWholeWordOnly] tuples. The
     * matchWholeWordOnly value is a per-term attribute because some terms may
     * be CJK, while others are not. (For correctness, matchWholeWordOnly should
     * always be false for CJK terms.).
     * @param opt_ignoreCase Whether to ignore the case of the query terms when
     * looking for matches.
     * @param opt_classesToSkip Nodes with one of these CSS class names (and its
     * descendants) will be skipped.
     * @param opt_maxMs Number of milliseconds after which this function, if
     * still annotating, should stop and return.
     */
    function annotateTerms(
        node: Node|null, terms: (string|boolean)[][]|null,
        annotateFn: ಠ_ಠ.clutz.goog.dom.annotate.AnnotateFn,
        opt_ignoreCase?: any, opt_classesToSkip?: string[]|null,
        opt_maxMs?: number): boolean;
    /**
     * Annotates occurrences of query terms in plain text. This process consists
     * of identifying all occurrences of all query terms, calling a provided
     * function to get the appropriate replacement HTML for each occurrence, and
     * HTML-escaping all the text.
     * @param text The plain text to be searched.
     * @param terms An array of [{string} searchTerm, {boolean}
     * matchWholeWordOnly] tuples. The matchWholeWordOnly value is a per-term
     * attribute because some terms may be CJK, while others are not. (For
     * correctness, matchWholeWordOnly should always be false for CJK terms.).
     * @param opt_ignoreCase Whether to ignore the case of the query terms when
     * looking for matches.
     */
    function annotateText(
        text: string, terms: (any[]|null)[]|null,
        annotateFn: ಠ_ಠ.clutz.goog.dom.annotate.AnnotateFn,
        opt_ignoreCase?: any): ಠ_ಠ.clutz.goog.html.SafeHtml|null;
}
declare module 'goog:goog.dom.annotate' {
    import alias = ಠ_ಠ.clutz.goog.dom.annotate;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.annotate {
    /**
     * A function that takes:
     * (1) the number of the term that is "hit",
     * (2) the HTML (search term) to be annotated,
     * and returns the annotated term as an HTML.
     */
    type AnnotateFn = (a: number, b: ಠ_ಠ.clutz.goog.html.SafeHtml) =>
        ಠ_ಠ.clutz.goog.html.SafeHtml;
}
declare module 'goog:goog.dom.annotate.AnnotateFn' {
    import alias = ಠ_ಠ.clutz.goog.dom.annotate.AnnotateFn;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.asserts {
    /**
     * Asserts that a given object is a HTMLAnchorElement.
     *
     * To permit this assertion to pass in the context of tests where elements
     * might be mocked, also accepts objects that are not of type Location nor a
     * subtype of Element.
     * @param o The object whose type to assert.
     */
    function assertIsHTMLAnchorElement(o: GlobalObject|null): HTMLAnchorElement;
    /**
     * Asserts that a given object is a HTMLButtonElement.
     *
     * To permit this assertion to pass in the context of tests where elements
     * might be mocked, also accepts objects that are not a subtype of Element.
     * @param o The object whose type to assert.
     */
    function assertIsHTMLButtonElement(o: GlobalObject|null): HTMLButtonElement;
    /**
     * Asserts that a given object is a HTMLEmbedElement.
     *
     * To permit this assertion to pass in the context of tests where elements
     * might be mocked, also accepts objects that are not a subtype of Element.
     * @param o The object whose type to assert.
     */
    function assertIsHTMLEmbedElement(o: GlobalObject|null): HTMLEmbedElement;
    /**
     * Asserts that a given object is a HTMLFormElement.
     *
     * To permit this assertion to pass in the context of tests where elements
     * might be mocked, also accepts objects that are not a subtype of Element.
     * @param o The object whose type to assert.
     */
    function assertIsHTMLFormElement(o: GlobalObject|null): HTMLFormElement;
    /**
     * Asserts that a given object is a HTMLFrameElement.
     *
     * To permit this assertion to pass in the context of tests where elements
     * might be mocked, also accepts objects that are not a subtype of Element.
     * @param o The object whose type to assert.
     */
    function assertIsHTMLFrameElement(o: GlobalObject|null): HTMLFrameElement;
    /**
     * Asserts that a given object is a HTMLIFrameElement.
     *
     * To permit this assertion to pass in the context of tests where elements
     * might be mocked, also accepts objects that are not a subtype of Element.
     * @param o The object whose type to assert.
     */
    function assertIsHTMLIFrameElement(o: GlobalObject|null): HTMLIFrameElement;
    /**
     * Asserts that a given object is a HTMLImageElement.
     *
     * To permit this assertion to pass in the context of tests where elements
     * might be mocked, also accepts objects that are not a subtype of Element.
     * @param o The object whose type to assert.
     */
    function assertIsHTMLImageElement(o: GlobalObject|null): HTMLImageElement;
    /**
     * Asserts that a given object is a HTMLInputElement.
     *
     * To permit this assertion to pass in the context of tests where elements
     * might be mocked, also accepts objects that are not a subtype of Element.
     * @param o The object whose type to assert.
     */
    function assertIsHTMLInputElement(o: GlobalObject|null): HTMLInputElement;
    /**
     * Asserts that a given object is a HTMLLinkElement.
     *
     * To permit this assertion to pass in the context of tests where elements
     * might be mocked, also accepts objects that are not a subtype of Element.
     * @param o The object whose type to assert.
     */
    function assertIsHTMLLinkElement(o: GlobalObject|null): HTMLLinkElement;
    /**
     * Asserts that a given object is a HTMLObjectElement.
     *
     * To permit this assertion to pass in the context of tests where elements
     * might be mocked, also accepts objects that are not a subtype of Element.
     * @param o The object whose type to assert.
     */
    function assertIsHTMLObjectElement(o: GlobalObject|null): HTMLObjectElement;
    /**
     * Asserts that a given object is a HTMLScriptElement.
     *
     * To permit this assertion to pass in the context of tests where elements
     * might be mocked, also accepts objects that are not a subtype of Element.
     * @param o The object whose type to assert.
     */
    function assertIsHTMLScriptElement(o: GlobalObject|null): HTMLScriptElement;
    /**
     * Asserts that a given object is a HTMLVideoElement.
     *
     * To permit this assertion to pass in the context of tests where elements
     * might be mocked, also accepts objects that are not a subtype of Element.
     * @param o The object whose type to assert.
     */
    function assertIsHTMLVideoElement(o: GlobalObject|null): HTMLVideoElement;
    /**
     * Asserts that a given object is a Location.
     *
     * To permit this assertion to pass in the context of tests where DOM APIs
     * might be mocked, also accepts any other type except for subtypes of
     * {!Element}. This is to ensure that, for instance, HTMLLinkElement is not
     * being used in place of a Location, since this could result in security
     * bugs due to stronger contracts required for assignments to the href
     * property of the latter.
     * @param o The object whose type to assert.
     */
    function assertIsLocation(o: GlobalObject|null): Location;
}
declare module 'goog:goog.dom.asserts' {
    import alias = ಠ_ಠ.clutz.goog.dom.asserts;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.browserrange {
    /**
     * Tests whether the given node can contain a range end point.
     * @param node The node to check.
     */
    function canContainRangeEndpoint(node: Node|null): boolean;
    /**
     * Static method that returns the proper type of browser range.
     * @param range A browser range object.
     */
    function createRange(range: Range|null|TextRange):
        ಠ_ಠ.clutz.goog.dom.browserrange.AbstractRange;
    /**
     * Static method that returns the proper type of browser range.
     * @param node The node to select.
     */
    function createRangeFromNodeContents(node: Node|null):
        ಠ_ಠ.clutz.goog.dom.browserrange.AbstractRange;
    /**
     * Static method that returns the proper type of browser range.
     * @param startNode The node to start with.
     * @param startOffset The offset within the node to start.  This is either
     * the index into the childNodes array for element startNodes or the index
     * into the character array for text startNodes.
     * @param endNode The node to end with.
     * @param endOffset The offset within the node to end.  This is either the
     * index into the childNodes array for element endNodes or the index into
     * the character array for text endNodes.
     */
    function createRangeFromNodes(
        startNode: Node|null, startOffset: number, endNode: Node|null,
        endOffset: number): ಠ_ಠ.clutz.goog.dom.browserrange.AbstractRange;
}
declare module 'goog:goog.dom.browserrange' {
    import alias = ಠ_ಠ.clutz.goog.dom.browserrange;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.browserrange {
    /**
     * The constructor for abstract ranges.  Don't call this from subclasses.
     */
    class AbstractRange extends AbstractRange_Instance {}
    class AbstractRange_Instance {
        private noStructuralTyping_: any;
        /**
         * Returns a RangeIterator over the contents of the range.  Regardless
         * of the direction of the range, the iterator will move in document
         * order.
         * @param opt_keys Unused for this iterator.
         */
        __iterator__(opt_keys?: boolean): ಠ_ಠ.clutz.goog.dom.RangeIterator;
        clone(): ಠ_ಠ.clutz.goog.dom.browserrange.AbstractRange|null;
        /**
         * Collapses the range to one of its boundary points.
         * @param toStart Whether to collapse to the start of the range.
         */
        collapse(a: boolean): any;
        /**
         * Compares one endpoint of this range with the endpoint of another
         * browser native range object.
         * @param range The browser native range to compare against.
         * @param thisEndpoint The endpoint of this range to compare with.
         * @param otherEndpoint The endpoint of the other range to compare with.
         */
        compareBrowserRangeEndpoints(
            a: Range|null|TextRange, b: ಠ_ಠ.clutz.goog.dom.RangeEndpoint,
            c: ಠ_ಠ.clutz.goog.dom.RangeEndpoint): number;
        /**
         * Tests if this range contains the given node.
         * @param node The node to test.
         * @param opt_allowPartial If not set or false, the node must be
         * entirely contained in the selection for this function to return true.
         */
        containsNode(node: Node|null, opt_allowPartial?: boolean): boolean;
        /**
         * Tests if this range contains the given range.
         * @param abstractRange The range to test.
         * @param opt_allowPartial If not set or false, the range must be
         * entirely contained in the selection for this function to return true.
         */
        containsRange(
            abstractRange: ಠ_ಠ.clutz.goog.dom.browserrange.AbstractRange|null,
            opt_allowPartial?: boolean): boolean;
        /**
         * Returns the browser native implementation of the range.  Please
         * refrain from using this function - if you find you need the range
         * please add wrappers for the functionality you need rather than just
         * using the native range.
         */
        getBrowserRange(): Range|null|TextRange;
        /**
         * Returns the deepest node in the tree that contains the entire range.
         */
        getContainer(): Node|null;
        /**
         * Returns the node the range ends in.
         */
        getEndNode(): Node|null;
        /**
         * Returns the offset into the node the range ends in.
         */
        getEndOffset(): number;
        getEndPosition(): ಠ_ಠ.clutz.goog.math.Coordinate|null;
        /**
         * Returns the HTML fragment this range selects.  This is slow on all
         * browsers.
         */
        getHtmlFragment(): string;
        /**
         * Returns the node the range starts in.
         */
        getStartNode(): Node|null;
        /**
         * Returns the offset into the node the range starts in.
         */
        getStartOffset(): number;
        getStartPosition(): ಠ_ಠ.clutz.goog.math.Coordinate|null;
        getText(): string;
        /**
         * Returns valid HTML for this range.  This is fast on IE, and semi-fast
         * on other browsers.
         */
        getValidHtml(): string;
        /**
         * Inserts a node before (or after) the range.  The range may be
         * disrupted beyond recovery because of the way this splits nodes.
         * @param node The node to insert.
         * @param before True to insert before, false to insert after.
         */
        insertNode(a: Node|null, b: boolean): Node|null;
        /**
         * Tests if the selection is collapsed - i.e. is just a caret.
         */
        isCollapsed(): boolean;
        /**
         * Removes the contents of the range from the document.  As a side
         * effect, the selection will be collapsed.  The behavior of content
         * removal is normalized across browsers.  For instance, IE sometimes
         * creates extra text nodes that a W3C browser does not.  That behavior
         * is corrected for.
         */
        removeContents(): void;
        /**
         * Set this range as the selection in its window.
         * @param opt_reverse Whether to select the range in reverse, if
         * possible.
         */
        select(a?: boolean): any;
        /**
         * Surrounds the text range with the specified element (on Mozilla) or
         * with a clone of the specified element (on IE).  Returns a reference
         * to the surrounding element if the operation was successful; returns
         * null if the operation failed.
         * @param element The element with which the selection is to be
         * surrounded.
         */
        surroundContents(a: GlobalElement|null): GlobalElement|null;
        /**
         * Surrounds this range with the two given nodes.  The range may be
         * disrupted beyond recovery because of the way this splits nodes.
         * @param startNode The node to insert at the start.
         * @param endNode The node to insert at the end.
         */
        surroundWithNodes(a: GlobalElement|null, b: GlobalElement|null): any;
    }
}
declare module 'goog:goog.dom.browserrange.AbstractRange' {
    import alias = ಠ_ಠ.clutz.goog.dom.browserrange.AbstractRange;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.browserrange {
    /**
     * Common error constants.
     */
    type Error = string&{clutzEnumBrand: never};
    var Error: {
        NOT_IMPLEMENTED: Error,
    };
}
declare module 'goog:goog.dom.browserrange.Error' {
    import alias = ಠ_ಠ.clutz.goog.dom.browserrange.Error;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.browserrange {
    /**
     * The constructor for Gecko specific browser ranges.
     */
    class GeckoRange extends GeckoRange_Instance {
        /**
         * Creates a range object that selects the given node's text.
         * @param node The node to select.
         */
        static createFromNodeContents(node: Node|null):
            ಠ_ಠ.clutz.goog.dom.browserrange.GeckoRange;
        /**
         * Creates a range object that selects between the given nodes.
         * @param startNode The node to start with.
         * @param startOffset The offset within the node to start.
         * @param endNode The node to end with.
         * @param endOffset The offset within the node to end.
         */
        static createFromNodes(
            startNode: Node|null, startOffset: number, endNode: Node|null,
            endOffset: number): ಠ_ಠ.clutz.goog.dom.browserrange.GeckoRange;
    }
    class GeckoRange_Instance extends
        ಠ_ಠ.clutz.goog.dom.browserrange.W3cRange_Instance {
        /**
         * The constructor for Gecko specific browser ranges.
         * @param range The range object.
         */
        constructor(range: Range|null);
        selectInternal(selection: Selection|null, reversed: any): void;
    }
}
declare module 'goog:goog.dom.browserrange.GeckoRange' {
    import alias = ಠ_ಠ.clutz.goog.dom.browserrange.GeckoRange;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.browserrange {
    /**
     * The constructor for IE specific browser ranges.
     */
    class IeRange extends IeRange_Instance {
        /**
         * Create a range object that selects the given node's text.
         * @param node The node to select.
         */
        static createFromNodeContents(node: Node|null):
            ಠ_ಠ.clutz.goog.dom.browserrange.IeRange;
        /**
         * Static method that returns the proper type of browser range.
         * @param startNode The node to start with.
         * @param startOffset The offset within the start node.
         * @param endNode The node to end with.
         * @param endOffset The offset within the end node.
         */
        static createFromNodes(
            startNode: Node|null, startOffset: number, endNode: Node|null,
            endOffset: number): ಠ_ಠ.clutz.goog.dom.browserrange.AbstractRange;
    }
    class IeRange_Instance extends
        ಠ_ಠ.clutz.goog.dom.browserrange.AbstractRange_Instance {
        /**
         * The constructor for IE specific browser ranges.
         * @param range The range object.
         * @param doc The document the range exists in.
         */
        constructor(range: TextRange|null, doc: Document|null);
        clone(): ಠ_ಠ.clutz.goog.dom.browserrange.IeRange;
        collapse(toStart: boolean): any;
        compareBrowserRangeEndpoints(
            range: Range|null|TextRange,
            thisEndpoint: ಠ_ಠ.clutz.goog.dom.RangeEndpoint,
            otherEndpoint: ಠ_ಠ.clutz.goog.dom.RangeEndpoint): number;
        getBrowserRange(): Range|null|TextRange;
        getContainer(): Node|null;
        getEndNode(): Node|null;
        getEndOffset(): number;
        getStartNode(): Node|null;
        getStartOffset(): number;
        getText(): string;
        getValidHtml(): string;
        insertNode(node: Node|null, before: boolean): Node|null;
        isCollapsed(): boolean;
        /**
         * Tests whether this range is valid (i.e. whether its endpoints are
         * still in the document).  A range becomes invalid when, after this
         * object was created, either one or both of its endpoints are removed
         * from the document.  Use of an invalid range can lead to runtime
         * errors, particularly in IE.
         */
        isRangeInDocument(): boolean;
        removeContents(): void;
        select(opt_reverse?: boolean): any;
        surroundContents(element: GlobalElement|null): GlobalElement|null;
        surroundWithNodes(
            startNode: GlobalElement|null, endNode: GlobalElement|null): any;
    }
}
declare module 'goog:goog.dom.browserrange.IeRange' {
    import alias = ಠ_ಠ.clutz.goog.dom.browserrange.IeRange;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.browserrange {
    /**
     * The constructor for Opera specific browser ranges.
     */
    class OperaRange extends OperaRange_Instance {
        /**
         * Creates a range object that selects the given node's text.
         * @param node The node to select.
         */
        static createFromNodeContents(node: Node|null):
            ಠ_ಠ.clutz.goog.dom.browserrange.OperaRange;
        /**
         * Creates a range object that selects between the given nodes.
         * @param startNode The node to start with.
         * @param startOffset The offset within the node to start.
         * @param endNode The node to end with.
         * @param endOffset The offset within the node to end.
         */
        static createFromNodes(
            startNode: Node|null, startOffset: number, endNode: Node|null,
            endOffset: number): ಠ_ಠ.clutz.goog.dom.browserrange.OperaRange;
    }
    class OperaRange_Instance extends
        ಠ_ಠ.clutz.goog.dom.browserrange.W3cRange_Instance {
        /**
         * The constructor for Opera specific browser ranges.
         * @param range The range object.
         */
        constructor(range: Range|null);
        selectInternal(selection: Selection|null, reversed: any): void;
    }
}
declare module 'goog:goog.dom.browserrange.OperaRange' {
    import alias = ಠ_ಠ.clutz.goog.dom.browserrange.OperaRange;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.browserrange {
    /**
     * The constructor for W3C specific browser ranges.
     */
    class W3cRange extends W3cRange_Instance {
        /**
         * Creates a range object that selects the given node's text.
         * @param node The node to select.
         */
        static createFromNodeContents(node: Node|null):
            ಠ_ಠ.clutz.goog.dom.browserrange.W3cRange;
        /**
         * Creates a range object that selects between the given nodes.
         * @param startNode The node to start with.
         * @param startOffset The offset within the start node.
         * @param endNode The node to end with.
         * @param endOffset The offset within the end node.
         */
        static createFromNodes(
            startNode: Node|null, startOffset: number, endNode: Node|null,
            endOffset: number): ಠ_ಠ.clutz.goog.dom.browserrange.W3cRange;
        /**
         * Returns a browser range spanning the given node's contents.
         * @param node The node to select.
         */
        static getBrowserRangeForNode(node: Node|null): Range;
        /**
         * Returns a browser range spanning the given nodes.
         * @param startNode The node to start with - should not be a BR.
         * @param startOffset The offset within the start node.
         * @param endNode The node to end with - should not be a BR.
         * @param endOffset The offset within the end node.
         */
        static getBrowserRangeForNodes(
            startNode: Node|null, startOffset: number, endNode: Node|null,
            endOffset: number): Range;
    }
    class W3cRange_Instance extends
        ಠ_ಠ.clutz.goog.dom.browserrange.AbstractRange_Instance {
        /**
         * The constructor for W3C specific browser ranges.
         * @param range The range object.
         */
        constructor(range: Range|null);
        range_: Range|null;
        clone(): ಠ_ಠ.clutz.goog.dom.browserrange.W3cRange;
        collapse(toStart: boolean): any;
        compareBrowserRangeEndpoints(
            range: Range|null|TextRange,
            thisEndpoint: ಠ_ಠ.clutz.goog.dom.RangeEndpoint,
            otherEndpoint: ಠ_ಠ.clutz.goog.dom.RangeEndpoint): number;
        getBrowserRange(): Range|null|TextRange;
        getContainer(): Node|null;
        getEndNode(): Node|null;
        getEndOffset(): number;
        getStartNode(): Node|null;
        getStartOffset(): number;
        getText(): string;
        getValidHtml(): string;
        insertNode(node: Node|null, before: boolean): Node|null;
        isCollapsed(): boolean;
        removeContents(): void;
        select(reverse?: boolean): any;
        /**
         * Select this range.
         * @param selection Browser selection object.
         * @param reverse Whether to select this range in reverse.
         */
        selectInternal(selection: Selection|null, reverse: any): void;
        surroundContents(element: GlobalElement|null): GlobalElement|null;
        surroundWithNodes(
            startNode: GlobalElement|null, endNode: GlobalElement|null): any;
    }
}
declare module 'goog:goog.dom.browserrange.W3cRange' {
    import alias = ಠ_ಠ.clutz.goog.dom.browserrange.W3cRange;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.browserrange {
    /**
     * The constructor for WebKit specific browser ranges.
     */
    class WebKitRange extends WebKitRange_Instance {
        /**
         * Creates a range object that selects the given node's text.
         * @param node The node to select.
         */
        static createFromNodeContents(node: Node|null):
            ಠ_ಠ.clutz.goog.dom.browserrange.WebKitRange;
        /**
         * Creates a range object that selects between the given nodes.
         * @param startNode The node to start with.
         * @param startOffset The offset within the start node.
         * @param endNode The node to end with.
         * @param endOffset The offset within the end node.
         */
        static createFromNodes(
            startNode: Node|null, startOffset: number, endNode: Node|null,
            endOffset: number): ಠ_ಠ.clutz.goog.dom.browserrange.WebKitRange;
    }
    class WebKitRange_Instance extends
        ಠ_ಠ.clutz.goog.dom.browserrange.W3cRange_Instance {
        /**
         * The constructor for WebKit specific browser ranges.
         * @param range The range object.
         */
        constructor(range: Range|null);
        compareBrowserRangeEndpoints(
            range: Range|null|TextRange,
            thisEndpoint: ಠ_ಠ.clutz.goog.dom.RangeEndpoint,
            otherEndpoint: ಠ_ಠ.clutz.goog.dom.RangeEndpoint): number;
        selectInternal(selection: Selection|null, reversed: any): void;
    }
}
declare module 'goog:goog.dom.browserrange.WebKitRange' {
    import alias = ಠ_ಠ.clutz.goog.dom.browserrange.WebKitRange;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.classes {
    /**
     * Adds a class or classes to an element. Does not add multiples of class
     * names.
     * @param element DOM node to add class to.
     * @param var_args Class names to add.
     */
    function add(
        element: Node|null, ...var_args: (string|undefined)[]): boolean;
    /**
     * Adds zero or more classes to an element and removes zero or more as a
     * single operation. Unlike calling {@link goog.dom.classes.add} and
     * {@link goog.dom.classes.remove} separately, this is more efficient as it
     * only parses the class property once.
     *
     * If a class is in both the remove and add lists, it will be added. Thus,
     * you can use this instead of {@link goog.dom.classes.swap} when you have
     * more than two class names that you want to swap.
     * @param element DOM node to swap classes on.
     * @param classesToRemove Class or classes to remove, if null no classes are
     * removed.
     * @param classesToAdd Class or classes to add, if null no classes are
     * added.
     */
    function addRemove(
        element: Node|null, classesToRemove: string|string[]|null,
        classesToAdd: string|string[]|null): void;
    /**
     * Adds or removes a class depending on the enabled argument.
     * @param element DOM node to add or remove the class on.
     * @param className Class name to add or remove.
     * @param enabled Whether to add or remove the class (true adds, false
     * removes).
     */
    function enable(
        element: Node|null, className: string, enabled: boolean): void;
    /**
     * Gets an array of class names on an element
     * @param element DOM node to get class of.
     */
    function get(element: Node|null): any[];
    /**
     * Returns true if an element has a class.
     * @param element DOM node to test.
     * @param className Class name to test for.
     */
    function has(element: Node|null, className: string): boolean;
    /**
     * Removes a class or classes from an element.
     * @param element DOM node to remove class from.
     * @param var_args Class name(s) to remove.
     */
    function remove(
        element: Node|null, ...var_args: (string|undefined)[]): boolean;
    /**
     * Sets the entire class name of an element.
     * @param element DOM node to set class of.
     * @param className Class name(s) to apply to element.
     */
    function set(element: Node|null, className: string): void;
    /**
     * Switches a class on an element from one to another without disturbing
     * other classes. If the fromClass isn't removed, the toClass won't be
     * added.
     * @param element DOM node to swap classes on.
     * @param fromClass Class to remove.
     * @param toClass Class to add.
     */
    function swap(
        element: Node|null, fromClass: string, toClass: string): boolean;
    /**
     * Removes a class if an element has it, and adds it the element doesn't
     * have it.  Won't affect other classes on the node.
     * @param element DOM node to toggle class on.
     * @param className Class to toggle.
     */
    function toggle(element: Node|null, className: string): boolean;
}
declare module 'goog:goog.dom.classes' {
    import alias = ಠ_ಠ.clutz.goog.dom.classes;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.classlist {
    /**
     * Override this define at build-time if you know your target supports it.
     */
    var ALWAYS_USE_DOM_TOKEN_LIST: boolean;
    /**
     * Adds a class to an element.  Does not add multiples of class names.  This
     * method may throw a DOM exception for an invalid or empty class name if
     * DOMTokenList is used.
     * @param element DOM node to add class to.
     * @param className Class name to add.
     */
    function add(element: GlobalElement|null, className: string): void;
    /**
     * Convenience method to add a number of class names at once.
     * @param element The element to which to add classes.
     * @param classesToAdd An array-like object containing a collection of class
     * names to add to the element. This method may throw a DOM exception if
     * classesToAdd contains invalid or empty class names.
     */
    function addAll(
        element: GlobalElement|null,
        classesToAdd: ArrayLike<string>|null): void;
    /**
     * Adds and removes a class of an element.  Unlike
     * {@link goog.dom.classlist.swap}, this method adds the classToAdd
     * regardless of whether the classToRemove was present and had been removed.
     * This method may throw a DOM exception if the class names are empty or
     * invalid.
     * @param element DOM node to swap classes on.
     * @param classToRemove Class to remove.
     * @param classToAdd Class to add.
     */
    function addRemove(
        element: GlobalElement|null, classToRemove: string,
        classToAdd: string): void;
    /**
     * Returns true if an element has a class.  This method may throw a DOM
     * exception for an invalid or empty class name if DOMTokenList is used.
     * @param element DOM node to test.
     * @param className Class name to test for.
     */
    function contains(element: GlobalElement|null, className: string): boolean;
    /**
     * Adds or removes a class depending on the enabled argument.  This method
     * may throw a DOM exception for an invalid or empty class name if
     * DOMTokenList is used.
     * @param element DOM node to add or remove the class on.
     * @param className Class name to add or remove.
     * @param enabled Whether to add or remove the class (true adds, false
     * removes).
     */
    function enable(
        element: GlobalElement|null, className: string, enabled: boolean): void;
    /**
     * Adds or removes a set of classes depending on the enabled argument.  This
     * method may throw a DOM exception for an invalid or empty class name if
     * DOMTokenList is used.
     * @param element DOM node to add or remove the class on.
     * @param classesToEnable An array-like object containing a collection of
     * class names to add or remove from the element.
     * @param enabled Whether to add or remove the classes (true adds, false
     * removes).
     */
    function enableAll(
        element: GlobalElement, classesToEnable: ArrayLike<string>|null,
        enabled: boolean): void;
    /**
     * Gets an array-like object of class names on an element.
     * @param element DOM node to get the classes of.
     */
    function get(element: GlobalElement|null): ArrayLike<any>;
    /**
     * Removes a class from an element.  This method may throw a DOM exception
     * for an invalid or empty class name if DOMTokenList is used.
     * @param element DOM node to remove class from.
     * @param className Class name to remove.
     */
    function remove(element: GlobalElement|null, className: string): void;
    /**
     * Removes a set of classes from an element.  Prefer this call to
     * repeatedly calling {@code goog.dom.classlist.remove} if you want to
     * remove a large set of class names at once.
     * @param element The element from which to remove classes.
     * @param classesToRemove An array-like object containing a collection of
     * class names to remove from the element. This method may throw a DOM
     * exception if classesToRemove contains invalid or empty class names.
     */
    function removeAll(
        element: GlobalElement|null,
        classesToRemove: ArrayLike<string>|null): void;
    /**
     * Sets the entire class name of an element.
     * @param element DOM node to set class of.
     * @param className Class name(s) to apply to element.
     */
    function set(element: GlobalElement|null, className: string): void;
    /**
     * Switches a class on an element from one to another without disturbing
     * other classes. If the fromClass isn't removed, the toClass won't be
     * added.  This method may throw a DOM exception if the class names are
     * empty or invalid.
     * @param element DOM node to swap classes on.
     * @param fromClass Class to remove.
     * @param toClass Class to add.
     */
    function swap(
        element: GlobalElement|null, fromClass: string,
        toClass: string): boolean;
    /**
     * Removes a class if an element has it, and adds it the element doesn't
     * have it.  Won't affect other classes on the node.  This method may throw
     * a DOM exception if the class name is empty or invalid.
     * @param element DOM node to toggle class on.
     * @param className Class to toggle.
     */
    function toggle(element: GlobalElement|null, className: string): boolean;
}
declare module 'goog:goog.dom.classlist' {
    import alias = ಠ_ಠ.clutz.goog.dom.classlist;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.dataset {
    /**
     * Gets a custom data attribute from an element. The key should be
     * in camelCase format (e.g "keyName" for the "data-key-name" attribute).
     * @param element DOM node to get the custom data attribute from.
     * @param key Key for the custom data attribute.
     */
    function get(element: GlobalElement|null, key: string): string|null;
    /**
     * Gets all custom data attributes as a string map.  The attribute names
     * will be camel cased (e.g., data-foo-bar -> dataset['fooBar']).  This
     * operation is not safe for attributes having camel-cased names clashing
     * with already existing properties (e.g., data-to-string ->
     * dataset['toString']).
     * @param element DOM node to get the data attributes from.
     */
    function getAll(element: GlobalElement): GlobalObject;
    /**
     * Checks whether custom data attribute exists on an element. The key should
     * be in camelCase format (e.g "keyName" for the "data-key-name" attribute).
     * @param element DOM node to get the custom data attribute from.
     * @param key Key for the custom data attribute.
     */
    function has(element: GlobalElement|null, key: string): boolean;
    /**
     * Removes a custom data attribute from an element. The key should be
     * in camelCase format (e.g "keyName" for the "data-key-name" attribute).
     * @param element DOM node to get the custom data attribute from.
     * @param key Key for the custom data attribute.
     */
    function remove(element: GlobalElement|null, key: string): void;
    /**
     * Sets a custom data attribute on an element. The key should be
     * in camelCase format (e.g "keyName" for the "data-key-name" attribute).
     * @param element DOM node to set the custom data attribute on.
     * @param key Key for the custom data attribute.
     * @param value Value for the custom data attribute.
     */
    function set(element: GlobalElement|null, key: string, value: string): void;
}
declare module 'goog:goog.dom.dataset' {
    import alias = ಠ_ಠ.clutz.goog.dom.dataset;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.forms {
    /**
     * Focuses, and optionally selects the content of, a form element.
     * @param el The form element.
     */
    function focusAndSelect(el: GlobalElement|null): void;
    /**
     * Returns form data as a map of name to value arrays. This doesn't
     * support file inputs.
     * @param form The form.
     */
    function getFormDataMap(form: HTMLFormElement|
                            null): ಠ_ಠ.clutz.goog.structs.Map<string, string[]>;
    /**
     * Returns the form data as an application/x-www-url-encoded string. This
     * doesn't support file inputs.
     * @param form The form.
     */
    function getFormDataString(form: HTMLFormElement|null): string;
    /**
     * Gets the current value of any element with a type.
     * @param el The element.
     */
    function getValue(el: GlobalElement|null): string|string[]|null;
    /**
     * Returns the value of the named form field. In the case of radio buttons,
     * returns the value of the checked button with the given name.
     * @param form The form element.
     * @param name Name of an input to the form.
     */
    function getValueByName(form: HTMLFormElement|null, name: string): string[]|
        null|string;
    /**
     * Whether the form has a file input.
     * @param form The form.
     */
    function hasFileInput(form: HTMLFormElement|null): boolean;
    /**
     * Whether a form element has a value.
     * @param el The element.
     */
    function hasValue(el: GlobalElement|null): boolean;
    /**
     * Whether a named form field has a value.
     * @param form The form element.
     * @param name Name of an input to the form.
     */
    function hasValueByName(form: HTMLFormElement|null, name: string): boolean;
    /**
     * Enables or disables either all elements in a form or a single form
     * element.
     * @param el The element, either a form or an element within a form.
     * @param disabled Whether the element should be disabled.
     */
    function setDisabled(el: GlobalElement|null, disabled: boolean): void;
    /**
     * Sets the current value of any element with a type.
     * @param el The element.
     * @param opt_value The value to give to the element, which will be coerced
     * by the browser in the default case using toString. This value should be
     * an array for setting the value of select multiple elements.
     */
    function setValue(el: GlobalElement|null, opt_value?: any): void;
    /**
     * Submits form data via a new window. This hides references to the parent
     * window and should be used when submitting forms to untrusted 3rd party
     * urls.
     * @param actionUri uri to submit form content to.
     * @param method HTTP method used to submit the form.
     * @param formData A map of the form data as field name to arrays of values.
     */
    function submitFormDataInNewWindow(
        actionUri: string, method: string,
        formData: ಠ_ಠ.clutz.goog.structs.Map<string, string[]>): boolean;
    /**
     * Submits form data via a new window. This hides references to the parent
     * window and should be used when submitting forms to untrusted 3rd party
     * urls. By default, this uses the action and method of the specified form
     * element. It is possible to override the default action and method if an
     * optional submit element with formaction and/or formmethod attributes is
     * provided.
     * @param form The form.
     * @param opt_submitElement The `<button>` or `<input>` element used to
     * submit the form. The element should have a submit type.
     */
    function submitFormInNewWindow(
        form: HTMLFormElement, opt_submitElement?: HTMLElement): boolean;
}
declare module 'goog:goog.dom.forms' {
    import alias = ಠ_ಠ.clutz.goog.dom.forms;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.fullscreen {
    /**
     * Exits full screen.
     * @param opt_domHelper The DomHelper for the DOM being queried. If not
     * provided, use the current DOM.
     */
    function exitFullScreen(opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper): void;
    /**
     * Get the root element in full screen mode.
     * @param opt_domHelper The DomHelper for the DOM being queried. If not
     * provided, use the current DOM.
     */
    function getFullScreenElement(opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper):
        GlobalElement|null;
    /**
     * Determines if the document is full screen.
     * @param opt_domHelper The DomHelper for the DOM being queried. If not
     * provided, use the current DOM.
     */
    function isFullScreen(opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper):
        boolean;
    /**
     * Determines if full screen is supported.
     * @param opt_domHelper The DomHelper for the DOM being queried. If not
     * provided, use the current DOM.
     */
    function isSupported(opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper): boolean;
    /**
     * Requests putting the element in full screen.
     * @param element The element to put full screen.
     */
    function requestFullScreen(element: GlobalElement): void;
    /**
     * Requests putting the element in full screen with full keyboard access.
     * @param element The element to put full screen.
     */
    function requestFullScreenWithKeys(element: GlobalElement): void;
}
declare module 'goog:goog.dom.fullscreen' {
    import alias = ಠ_ಠ.clutz.goog.dom.fullscreen;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.fullscreen {
    /**
     * Event types for full screen.
     */
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        CHANGE: EventType,
    };
}
declare module 'goog:goog.dom.fullscreen.EventType' {
    import alias = ಠ_ಠ.clutz.goog.dom.fullscreen.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.iframe {
    /**
     * Legacy version of goog.dom.iframe.BLANK_SOURCE_URL.
     */
    var BLANK_SOURCE: string;
    /**
     * Legacy version of goog.dom.iframe.BLANK_SOURCE_NEW_FRAME_URL.
     */
    var BLANK_SOURCE_NEW_FRAME: string;
    /**
     * Safe source for a new blank iframe that may not cause a new load of the
     * iframe. This is different from {@code goog.dom.iframe.BLANK_SOURCE} in
     * that it will allow an iframe to be loaded synchronously in more browsers,
     * notably Gecko, following the javascript protocol spec.
     *
     * NOTE: This should not be used to replace the source of an existing
     * iframe. The new src value will be ignored, per the spec.
     *
     * Due to cross-browser differences, the load is not guaranteed  to be
     * synchronous. If code depends on the load of the iframe,
     * then {@code goog.net.IframeLoadMonitor} or a similar technique should be
     * used.
     *
     * According to
     * http://www.whatwg.org/specs/web-apps/current-work/multipage/webappapis.html#javascript-protocol
     * the 'javascript:""' URL should trigger a new load of the iframe, which
     * may be asynchronous. A void src, such as 'javascript:undefined', does not
     * change the browsing context document's, and thus should not trigger
     * another load.
     *
     * Intentionally not about:blank, which also triggers a load.
     *
     * NOTE: 'javascript:' URL handling spec compliance varies per browser. IE
     * throws an error with 'javascript:undefined'. Webkit browsers will reload
     * the iframe when setting this source on an existing iframe.
     */
    var BLANK_SOURCE_NEW_FRAME_URL: ಠ_ಠ.clutz.goog.html.TrustedResourceUrl;
    /**
     * Safe source for a blank iframe.
     *
     * Intentionally not about:blank for IE, which gives mixed content warnings
     * in IE6 over HTTPS. Using 'about:blank' for all other browsers to support
     * Content Security Policy (CSP). According to http://www.w3.org/TR/CSP/ CSP
     * does not allow inline javascript by default.
     */
    var BLANK_SOURCE_URL: ಠ_ಠ.clutz.goog.html.TrustedResourceUrl;
    /**
     * Creates a completely blank iframe element.
     *
     * The iframe will not caused mixed-content warnings for IE6 under HTTPS.
     * The iframe will also have no borders or padding, so that the styled width
     * and height will be the actual width and height of the iframe.
     *
     * This function currently only attempts to create a blank iframe.  There
     * are no guarantees to the contents of the iframe or whether it is rendered
     * in quirks mode.
     * @param domHelper The dom helper to use.
     * @param opt_styles CSS styles for the iframe.
     */
    function createBlank(
        domHelper: ಠ_ಠ.clutz.goog.dom.DomHelper|null,
        opt_styles?: ಠ_ಠ.clutz.goog.html.SafeStyle): HTMLIFrameElement;
    /**
     * Creates a same-domain iframe containing preloaded content.
     *
     * This is primarily useful for DOM sandboxing.  One use case is to embed
     * a trusted Javascript app with potentially conflicting CSS styles.  The
     * second case is to reduce the cost of layout passes by the browser -- for
     * example, you can perform sandbox sizing of characters in an iframe while
     * manipulating a heavy DOM in the main window.  The iframe and parent frame
     * can access each others' properties and functions without restriction.
     * @param parentElement The parent element in which to append the iframe.
     * @param opt_headContents Contents to go into the iframe's head.
     * @param opt_bodyContents Contents to go into the iframe's body.
     * @param opt_styles CSS styles for the iframe itself, before adding to the
     * parent element.
     * @param opt_quirks Whether to use quirks mode (false by default).
     */
    function createWithContent(
        parentElement: GlobalElement,
        opt_headContents?: ಠ_ಠ.clutz.goog.html.SafeHtml,
        opt_bodyContents?: ಠ_ಠ.clutz.goog.html.SafeHtml,
        opt_styles?: ಠ_ಠ.clutz.goog.html.SafeStyle,
        opt_quirks?: boolean): HTMLIFrameElement;
    /**
     * Writes the contents of a blank iframe that has already been inserted
     * into the document.
     * @param iframe An iframe with no contents, such as one created by {@link
     * #createBlank}, but already appended to a parent document.
     * @param content Content to write to the iframe, from doctype to the HTML
     * close tag.
     */
    function writeSafeContent(
        iframe: HTMLIFrameElement, content: ಠ_ಠ.clutz.goog.html.SafeHtml): void;
}
declare module 'goog:goog.dom.iframe' {
    import alias = ಠ_ಠ.clutz.goog.dom.iframe;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.iter {
    /**
     * Iterator over a Node's ancestors, stopping after the document body.
     */
    class AncestorIterator extends AncestorIterator_Instance {}
    class AncestorIterator_Instance extends ಠ_ಠ.clutz.goog.iter.Iterator<any> {
        /**
         * Iterator over a Node's ancestors, stopping after the document body.
         * @param node The node to start with.
         * @param opt_includeNode Whether to return the given node as the first
         * return value from next.
         */
        constructor(node: Node|null, opt_includeNode?: boolean);
        next(): any;
    }
}
declare module 'goog:goog.dom.iter.AncestorIterator' {
    import alias = ಠ_ಠ.clutz.goog.dom.iter.AncestorIterator;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.iter {
    /**
     * Iterator over an Element's children.
     */
    class ChildIterator extends ChildIterator_Instance {}
    class ChildIterator_Instance extends
        ಠ_ಠ.clutz.goog.dom.iter.SiblingIterator {
        /**
         * Iterator over an Element's children.
         * @param element The element to iterate over.
         * @param opt_reverse Optionally traverse children from last to first.
         * @param opt_startIndex Optional starting index.
         */
        constructor(
            element: GlobalElement|null, opt_reverse?: boolean,
            opt_startIndex?: number);
    }
}
declare module 'goog:goog.dom.iter.ChildIterator' {
    import alias = ಠ_ಠ.clutz.goog.dom.iter.ChildIterator;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.iter {
    /**
     * Iterator over a Node's siblings.
     */
    class SiblingIterator extends SiblingIterator_Instance {}
    class SiblingIterator_Instance extends ಠ_ಠ.clutz.goog.iter.Iterator<any> {
        /**
         * Iterator over a Node's siblings.
         * @param node The node to start with.
         * @param opt_includeNode Whether to return the given node as the first
         * return value from next.
         * @param opt_reverse Whether to traverse siblings in reverse document
         * order.
         */
        constructor(
            node: Node|null, opt_includeNode?: boolean, opt_reverse?: boolean);
        next(): any;
    }
}
declare module 'goog:goog.dom.iter.SiblingIterator' {
    import alias = ಠ_ಠ.clutz.goog.dom.iter.SiblingIterator;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.pattern {
    /**
     * Utility function to match a string against either a string or a regular
     * expression.
     * @param obj Either a string or a regular expression.
     * @param str The string to match.
     */
    function matchStringOrRegex(obj: string|RegExp|null, str: string): boolean;
    /**
     * Utility function to match a DOM attribute against either a string or a
     * regular expression.  Conforms to the interface spec for
     * {@link goog.object#every}.
     * @param elem Either a string or a regular expression.
     * @param index The attribute name to match.
     * @param orig The original map of matches to test.
     */
    function matchStringOrRegexMap(
        elem: string|RegExp|null, index: string,
        orig: GlobalObject|null): boolean;
}
declare module 'goog:goog.dom.pattern' {
    import alias = ಠ_ಠ.clutz.goog.dom.pattern;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.pattern {
    /**
     * Base pattern class for DOM matching.
     */
    class AbstractPattern extends AbstractPattern_Instance {}
    class AbstractPattern_Instance {
        private noStructuralTyping_: any;
        /**
         * The first node matched by this pattern.
         */
        matchedNode: Node|null;
        /**
         * Test whether this pattern matches the given token.
         * @param token Token to match against.
         * @param type The type of token.
         */
        matchToken(token: Node|null, type: ಠ_ಠ.clutz.goog.dom.TagWalkType):
            ಠ_ಠ.clutz.goog.dom.pattern.MatchType;
        /**
         * Reset any internal state this pattern keeps.
         */
        reset(): void;
    }
}
declare module 'goog:goog.dom.pattern.AbstractPattern' {
    import alias = ಠ_ಠ.clutz.goog.dom.pattern.AbstractPattern;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.pattern {
    /**
     * Pattern object that matches any nodes at or below the current tree depth.
     */
    class AllChildren extends AllChildren_Instance {}
    class AllChildren_Instance extends
        ಠ_ಠ.clutz.goog.dom.pattern.AbstractPattern_Instance {
        /**
         * Test whether the given token is on the same level.
         * @param token Token to match against.
         * @param type The type of token.
         */
        matchToken(token: Node|null, type: ಠ_ಠ.clutz.goog.dom.TagWalkType):
            ಠ_ಠ.clutz.goog.dom.pattern.MatchType;
        /**
         * Reset any internal state this pattern keeps.
         */
        reset(): void;
    }
}
declare module 'goog:goog.dom.pattern.AllChildren' {
    import alias = ಠ_ಠ.clutz.goog.dom.pattern.AllChildren;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.pattern {
    /**
     * Pattern object that matches any nodes at or below the current tree depth.
     */
    class ChildMatches extends ChildMatches_Instance {}
    class ChildMatches_Instance extends
        ಠ_ಠ.clutz.goog.dom.pattern.AllChildren_Instance {
        /**
         * Pattern object that matches any nodes at or below the current tree
         * depth.
         * @param childPattern Pattern to collect child matches of.
         * @param opt_minimumMatches Enforce a minimum nuber of matches.
         * Defaults to 0.
         */
        constructor(
            childPattern: ಠ_ಠ.clutz.goog.dom.pattern.AbstractPattern|null,
            opt_minimumMatches?: number);
        /**
         * Array of matched child nodes.
         */
        matches: (Node|null)[]|null;
        /**
         * Test whether the given token is on the same level.
         * @param token Token to match against.
         * @param type The type of token.
         */
        matchToken(token: Node|null, type: ಠ_ಠ.clutz.goog.dom.TagWalkType):
            ಠ_ಠ.clutz.goog.dom.pattern.MatchType;
        /**
         * Reset any internal state this pattern keeps.
         */
        reset(): void;
    }
}
declare module 'goog:goog.dom.pattern.ChildMatches' {
    import alias = ಠ_ಠ.clutz.goog.dom.pattern.ChildMatches;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.pattern {
    /**
     * Pattern object that matches a closing tag.
     */
    class EndTag extends EndTag_Instance {}
    class EndTag_Instance extends ಠ_ಠ.clutz.goog.dom.pattern.Tag_Instance {
        /**
         * Pattern object that matches a closing tag.
         * @param tag Name of the tag.  Also will accept a regular expression to
         * match against the tag name.
         * @param opt_attrs Optional map of attribute names to desired values.
         * This pattern will only match when all attributes are present and
         * match the string or regular expression value provided here.
         * @param opt_styles Optional map of CSS style names to desired values.
         * This pattern will only match when all styles are present and match
         * the string or regular expression value provided here.
         * @param opt_test Optional function that takes the element as a
         * parameter and returns true if this pattern should match it.
         */
        constructor(
            tag: string|RegExp|null, opt_attrs?: GlobalObject|null,
            opt_styles?: GlobalObject|null, opt_test?: (...a: any[]) => any);
    }
}
declare module 'goog:goog.dom.pattern.EndTag' {
    import alias = ಠ_ಠ.clutz.goog.dom.pattern.EndTag;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.pattern {
    /**
     * Pattern object that matches a full tag including all its children.
     */
    class FullTag extends FullTag_Instance {}
    class FullTag_Instance extends
        ಠ_ಠ.clutz.goog.dom.pattern.StartTag_Instance {
        /**
         * Pattern object that matches a full tag including all its children.
         * @param tag Name of the tag.  Also will accept a regular expression to
         * match against the tag name.
         * @param opt_attrs Optional map of attribute names to desired values.
         * This pattern will only match when all attributes are present and
         * match the string or regular expression value provided here.
         * @param opt_styles Optional map of CSS style names to desired values.
         * This pattern will only match when all styles are present and match
         * the string or regular expression value provided here.
         * @param opt_test Optional function that takes the element as a
         * parameter and returns true if this pattern should match it.
         */
        constructor(
            tag: string|RegExp|null, opt_attrs?: GlobalObject|null,
            opt_styles?: GlobalObject|null, opt_test?: (...a: any[]) => any);
        /**
         * Test whether the given token is a start tag token which matches the
         * tag name, style, and attributes provided in the constructor.
         * @param token Token to match against.
         * @param type The type of token.
         */
        matchToken(token: Node|null, type: ಠ_ಠ.clutz.goog.dom.TagWalkType):
            ಠ_ಠ.clutz.goog.dom.pattern.MatchType;
    }
}
declare module 'goog:goog.dom.pattern.FullTag' {
    import alias = ಠ_ಠ.clutz.goog.dom.pattern.FullTag;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.pattern {
    /**
     * When matched to a token, a pattern may return any of the following
     * statuses: <ol> <li><code>NO_MATCH</code> - The pattern does not match.
     * This is the only value that evaluates to <code>false</code> in a boolean
     * context. <li><code>MATCHING</code> - The token is part of an incomplete
     * match. <li><code>MATCH</code> - The token completes a match.
     * <li><code>BACKTRACK_MATCH</code> - The token does not match, but
     * indicates the end of a repetitive match.  For instance, in regular
     * expressions, the pattern <code>/a+/</code> would match
     * <code>'aaaaaaaab'</code>. Every <code>'a'</code> token would give a
     * status of <code>MATCHING</code> while the <code>'b'</code> token would
     * give a status of <code>BACKTRACK_MATCH</code>.
     * </ol>
     */
    enum MatchType {
        BACKTRACK_MATCH,
        MATCH,
        MATCHING,
        NO_MATCH,
    }
}
declare module 'goog:goog.dom.pattern.MatchType' {
    import alias = ಠ_ಠ.clutz.goog.dom.pattern.MatchType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.pattern {
    /**
     * Given a set of patterns and a root node, this class tests the patterns in
     * parallel.
     *
     * It is not (yet) a smart matcher - it doesn't do any advanced
     * backtracking. Given the pattern <code>DIV, SPAN</code> the matcher will
     * not match <code>DIV, DIV, SPAN</code> because it starts matching at the
     * first <code>DIV</code>, fails to match <code>SPAN</code> at the second,
     * and never backtracks to try again.
     *
     * It is also possible to have a set of complex patterns that when matched
     * in parallel will miss some possible matches.  Running multiple times will
     * catch all matches eventually.
     */
    class Matcher extends Matcher_Instance {}
    class Matcher_Instance {
        private noStructuralTyping_: any;
        /**
         * Adds a pattern to be matched.  The callback can return an object
         * whose keys are processing instructions.
         * @param pattern The pattern to add.
         * @param callback Function to call when a match is found.  Uses the
         * above semantics.
         */
        addPattern(
            pattern: ಠ_ಠ.clutz.goog.dom.pattern.AbstractPattern|null,
            callback: (...a: any[]) => any): void;
        /**
         * Match the set of patterns against a match tree.
         * @param node The root node of the tree to match.
         */
        match(node: Node|null): void;
    }
}
declare module 'goog:goog.dom.pattern.Matcher' {
    import alias = ಠ_ಠ.clutz.goog.dom.pattern.Matcher;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.pattern {
    /**
     * Pattern object that matches any node of the given type.
     */
    class NodeType extends NodeType_Instance {}
    class NodeType_Instance extends
        ಠ_ಠ.clutz.goog.dom.pattern.AbstractPattern_Instance {
        /**
         * Pattern object that matches any node of the given type.
         * @param nodeType The node type to match.
         */
        constructor(nodeType: ಠ_ಠ.clutz.goog.dom.NodeType);
        /**
         * Test whether the given token is a text token which matches the string
         * or regular expression provided in the constructor.
         * @param token Token to match against.
         * @param type The type of token.
         */
        matchToken(token: Node|null, type: ಠ_ಠ.clutz.goog.dom.TagWalkType):
            ಠ_ಠ.clutz.goog.dom.pattern.MatchType;
    }
}
declare module 'goog:goog.dom.pattern.NodeType' {
    import alias = ಠ_ಠ.clutz.goog.dom.pattern.NodeType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.pattern {
    /**
     * Pattern object that matches a repetition of another pattern.
     */
    class Repeat extends Repeat_Instance {}
    class Repeat_Instance extends
        ಠ_ಠ.clutz.goog.dom.pattern.AbstractPattern_Instance {
        /**
         * Pattern object that matches a repetition of another pattern.
         * @param pattern The pattern to repetitively match.
         * @param opt_minimum The minimum number of times to match.  Defaults to
         * 0.
         * @param opt_maximum The maximum number of times to match.  Defaults to
         * unlimited.
         */
        constructor(
            pattern: ಠ_ಠ.clutz.goog.dom.pattern.AbstractPattern|null,
            opt_minimum?: number, opt_maximum?: number);
        /**
         * Number of times the pattern has matched.
         */
        count: number;
        matchedNode: Node|null;
        /**
         * The matched nodes.
         */
        matches: (Node|null)[]|null;
        /**
         * Test whether the given token continues a repeated series of matches
         * of the pattern given in the constructor.
         * @param token Token to match against.
         * @param type The type of token.
         */
        matchToken(token: Node|null, type: ಠ_ಠ.clutz.goog.dom.TagWalkType):
            ಠ_ಠ.clutz.goog.dom.pattern.MatchType;
        /**
         * Reset any internal state this pattern keeps.
         */
        reset(): void;
    }
}
declare module 'goog:goog.dom.pattern.Repeat' {
    import alias = ಠ_ಠ.clutz.goog.dom.pattern.Repeat;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.pattern {
    /**
     * Pattern object that matches a sequence of other patterns.
     */
    class Sequence extends Sequence_Instance {}
    class Sequence_Instance extends
        ಠ_ಠ.clutz.goog.dom.pattern.AbstractPattern_Instance {
        /**
         * Pattern object that matches a sequence of other patterns.
         * @param patterns Ordered array of patterns to match.
         * @param opt_ignoreWhitespace Optional flag to ignore text nodes
         * consisting entirely of whitespace.  The default is to not ignore
         * them.
         */
        constructor(
            patterns: (ಠ_ಠ.clutz.goog.dom.pattern.AbstractPattern|null)[]|null,
            opt_ignoreWhitespace?: boolean);
        matchedNode: Node|null;
        /**
         * Ordered array of patterns to match.
         */
        patterns: (ಠ_ಠ.clutz.goog.dom.pattern.AbstractPattern|null)[]|null;
        /**
         * Test whether the given token starts, continues, or finishes the
         * sequence of patterns given in the constructor.
         * @param token Token to match against.
         * @param type The type of token.
         */
        matchToken(token: Node|null, type: ಠ_ಠ.clutz.goog.dom.TagWalkType):
            ಠ_ಠ.clutz.goog.dom.pattern.MatchType;
        /**
         * Reset any internal state this pattern keeps.
         */
        reset(): void;
    }
}
declare module 'goog:goog.dom.pattern.Sequence' {
    import alias = ಠ_ಠ.clutz.goog.dom.pattern.Sequence;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.pattern {
    /**
     * Pattern object that matches an opening tag.
     */
    class StartTag extends StartTag_Instance {}
    class StartTag_Instance extends ಠ_ಠ.clutz.goog.dom.pattern.Tag_Instance {
        /**
         * Pattern object that matches an opening tag.
         * @param tag Name of the tag.  Also will accept a regular expression to
         * match against the tag name.
         * @param opt_attrs Optional map of attribute names to desired values.
         * This pattern will only match when all attributes are present and
         * match the string or regular expression value provided here.
         * @param opt_styles Optional map of CSS style names to desired values.
         * This pattern will only match when all styles are present and match
         * the string or regular expression value provided here.
         * @param opt_test Optional function that takes the element as a
         * parameter and returns true if this pattern should match it.
         */
        constructor(
            tag: string|RegExp|null, opt_attrs?: GlobalObject|null,
            opt_styles?: GlobalObject|null, opt_test?: (...a: any[]) => any);
    }
}
declare module 'goog:goog.dom.pattern.StartTag' {
    import alias = ಠ_ಠ.clutz.goog.dom.pattern.StartTag;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.pattern {
    /**
     * Pattern object that matches an tag.
     */
    class Tag extends Tag_Instance {}
    class Tag_Instance extends
        ಠ_ಠ.clutz.goog.dom.pattern.AbstractPattern_Instance {
        /**
         * Pattern object that matches an tag.
         * @param tag Name of the tag.  Also will accept a regular expression to
         * match against the tag name.
         * @param type Type of token to match.
         * @param opt_attrs Optional map of attribute names to desired values.
         * This pattern will only match when all attributes are present and
         * match the string or regular expression value provided here.
         * @param opt_styles Optional map of CSS style names to desired values.
         * This pattern will only match when all styles are present and match
         * the string or regular expression value provided here.
         * @param opt_test Optional function that takes the element as a
         * parameter and returns true if this pattern should match it.
         */
        constructor(
            tag: string|RegExp|null, type: ಠ_ಠ.clutz.goog.dom.TagWalkType,
            opt_attrs?: GlobalObject|null, opt_styles?: GlobalObject|null,
            opt_test?: (...a: any[]) => any);
        matchedNode: Node|null;
        /**
         * Test whether the given token is a tag token which matches the tag
         * name, style, and attributes provided in the constructor.
         * @param token Token to match against.
         * @param type The type of token.
         */
        matchToken(token: Node|null, type: ಠ_ಠ.clutz.goog.dom.TagWalkType):
            ಠ_ಠ.clutz.goog.dom.pattern.MatchType;
    }
}
declare module 'goog:goog.dom.pattern.Tag' {
    import alias = ಠ_ಠ.clutz.goog.dom.pattern.Tag;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.pattern {
    /**
     * Pattern object that matches text by exact matching or regular
     * expressions.
     */
    class Text extends Text_Instance {}
    class Text_Instance extends
        ಠ_ಠ.clutz.goog.dom.pattern.AbstractPattern_Instance {
        /**
         * Pattern object that matches text by exact matching or regular
         * expressions.
         * @param match String or regular expression to match against.
         */
        constructor(match: string|RegExp|null);
        matchedNode: Node|null;
        /**
         * Test whether the given token is a text token which matches the string
         * or regular expression provided in the constructor.
         * @param token Token to match against.
         * @param type The type of token.
         */
        matchToken(token: Node|null, type: ಠ_ಠ.clutz.goog.dom.TagWalkType):
            ಠ_ಠ.clutz.goog.dom.pattern.MatchType;
    }
}
declare module 'goog:goog.dom.pattern.Text' {
    import alias = ಠ_ಠ.clutz.goog.dom.pattern.Text;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.pattern.callback {
    /**
     * Callback function for use in {@link goog.dom.pattern.Matcher.addPattern}
     * that removes the matched node from the tree and replaces it with its
     * children.  Should be used in conjunction with a
     * {@link goog.dom.pattern.StartTag} pattern.
     * @param node The node matched by the pattern.
     * @param position The position where the match finished.
     */
    function flattenElement(
        node: GlobalElement|null,
        position: ಠ_ಠ.clutz.goog.dom.TagIterator|null): boolean;
    /**
     * Callback function for use in {@link goog.dom.pattern.Matcher.addPattern}
     * that removes the matched node from the tree.  Should be used in
     * conjunciton with a {@link goog.dom.pattern.StartTag} pattern.
     * @param node The node matched by the pattern.
     * @param position The position where the match finished.
     */
    function removeNode(
        node: Node|null,
        position: ಠ_ಠ.clutz.goog.dom.TagIterator|null): boolean;
}
declare module 'goog:goog.dom.pattern.callback' {
    import alias = ಠ_ಠ.clutz.goog.dom.pattern.callback;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.pattern.callback {
    /**
     * Callback class for counting matches.
     */
    class Counter extends Counter_Instance {}
    class Counter_Instance {
        private noStructuralTyping_: any;
        /**
         * The count of objects matched so far.
         */
        count: number;
        /**
         * Get a bound callback function that is suitable as a callback for
         * {@link goog.dom.pattern.Matcher}.
         */
        getCallback(): (...a: any[]) => any;
        /**
         * Reset the counter.
         */
        reset(): void;
    }
}
declare module 'goog:goog.dom.pattern.callback.Counter' {
    import alias = ಠ_ಠ.clutz.goog.dom.pattern.callback.Counter;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.pattern.callback {
    /**
     * Callback class for testing for at least one match.
     */
    class Test extends Test_Instance {}
    class Test_Instance {
        private noStructuralTyping_: any;
        /**
         * Whether or not the pattern matched.
         */
        matched: boolean;
        /**
         * Get a bound callback function that is suitable as a callback for
         * {@link goog.dom.pattern.Matcher}.
         */
        getCallback(): (...a: any[]) => any;
        /**
         * Reset the counter.
         */
        reset(): void;
    }
}
declare module 'goog:goog.dom.pattern.callback.Test' {
    import alias = ಠ_ಠ.clutz.goog.dom.pattern.callback.Test;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.safe {
    /**
     * Writes known-safe HTML to a document.
     * @param doc The document to be written to.
     * @param html The known-safe HTML to assign.
     */
    function documentWrite(
        doc: Document, html: ಠ_ಠ.clutz.goog.html.SafeHtml): void;
    /**
     * Inserts known-safe HTML into a Node, at the specified position.
     * @param node The node on which to call insertAdjacentHTML.
     * @param position Position where to insert the HTML.
     * @param html The known-safe HTML to insert.
     */
    function insertAdjacentHtml(
        node: Node,
        position: ಠ_ಠ.clutz.goog.dom.safe.InsertAdjacentHtmlPosition,
        html: ಠ_ಠ.clutz.goog.html.SafeHtml): void;
    /**
     * Safely opens a URL in a new window (via window.open).
     *
     * If url is of type goog.html.SafeUrl, its value is unwrapped and passed in
     * to window.open.  If url is of type string however, it is first sanitized
     * using goog.html.SafeUrl.sanitize.
     *
     * Note that this function does not prevent leakages via the referer that is
     * sent by window.open. It is advised to only use this to open 1st party
     * URLs.
     *
     * Example usage:
     * goog.dom.safe.openInWindow(url);
     * which is a safe alternative to
     * window.open(url);
     * The latter can result in XSS vulnerabilities if redirectUrl is a
     * user-/attacker-controlled value.
     * @param url The URL to open.
     * @param opt_openerWin Window of which to call the .open() method. Defaults
     * to the global window.
     * @param opt_name Name of the window to open in. Can be _top, etc as
     * allowed by window.open().
     * @param opt_specs Comma-separated list of specifications, same as in
     * window.open().
     * @param opt_replace Whether to replace the current entry in browser
     * history, same as in window.open().
     */
    function openInWindow(
        url: string|ಠ_ಠ.clutz.goog.html.SafeUrl, opt_openerWin?: Window|null,
        opt_name?: ಠ_ಠ.clutz.goog.string.Const, opt_specs?: string,
        opt_replace?: boolean): Window|null;
    /**
     * Safely replaces the URL of a Location object.
     *
     * If url is of type goog.html.SafeUrl, its value is unwrapped and
     * passed to Location#replace. If url is of type string however, it is
     * first sanitized using goog.html.SafeUrl.sanitize.
     *
     * Example usage:
     * goog.dom.safe.replaceHref(document.location, newUrl);
     * which is a safe alternative to
     * document.location.replace(newUrl);
     * The latter can result in XSS vulnerabilities if newUrl is a
     * user-/attacker-controlled value.
     * @param loc The Location object which is to be replaced.
     * @param url The URL to assign.
     */
    function replaceLocation(
        loc: Location, url: string|ಠ_ಠ.clutz.goog.html.SafeUrl): void;
    /**
     * Safely assigns a URL to an anchor element's href property.
     *
     * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned
     * to anchor's href property.  If url is of type string however, it is first
     * sanitized using goog.html.SafeUrl.sanitize.
     *
     * Example usage:
     * goog.dom.safe.setAnchorHref(anchorEl, url);
     * which is a safe alternative to
     * anchorEl.href = url;
     * The latter can result in XSS vulnerabilities if url is a
     * user-/attacker-controlled value.
     * @param anchor The anchor element whose href property is to be assigned
     * to.
     * @param url The URL to assign.
     */
    function setAnchorHref(
        anchor: HTMLAnchorElement,
        url: string|ಠ_ಠ.clutz.goog.html.SafeUrl): void;
    /**
     * Safely assigns a URL to a button element's formaction property.
     *
     * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned
     * to anchor's href property.  If url is of type string however, it is first
     * sanitized using goog.html.SafeUrl.sanitize.
     *
     * Example usage:
     * goog.dom.safe.setButtonFormAction(buttonEl, url);
     * which is a safe alternative to
     * buttonEl.action = url;
     * The latter can result in XSS vulnerabilities if url is a
     * user-/attacker-controlled value.
     * @param button The button element whose action property is to be assigned
     * to.
     * @param url The URL to assign.
     */
    function setButtonFormAction(
        button: GlobalElement, url: string|ಠ_ಠ.clutz.goog.html.SafeUrl): void;
    /**
     * Safely assigns a URL to an embed element's src property.
     *
     * Example usage:
     * goog.dom.safe.setEmbedSrc(embedEl, url);
     * which is a safe alternative to
     * embedEl.src = url;
     * The latter can result in loading untrusted code unless it is ensured that
     * the URL refers to a trustworthy resource.
     * @param embed The embed element whose src property is to be assigned to.
     * @param url The URL to assign.
     */
    function setEmbedSrc(
        embed: HTMLEmbedElement,
        url: ಠ_ಠ.clutz.goog.html.TrustedResourceUrl): void;
    /**
     * Safely assigns a URL a form element's action property.
     *
     * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned
     * to anchor's href property.  If url is of type string however, it is first
     * sanitized using goog.html.SafeUrl.sanitize.
     *
     * Example usage:
     * goog.dom.safe.setFormElementAction(formEl, url);
     * which is a safe alternative to
     * formEl.action = url;
     * The latter can result in XSS vulnerabilities if url is a
     * user-/attacker-controlled value.
     * @param form The form element whose action property is to be assigned to.
     * @param url The URL to assign.
     */
    function setFormElementAction(
        form: GlobalElement, url: string|ಠ_ಠ.clutz.goog.html.SafeUrl): void;
    /**
     * Safely assigns a URL to a frame element's src property.
     *
     * Example usage:
     * goog.dom.safe.setFrameSrc(frameEl, url);
     * which is a safe alternative to
     * frameEl.src = url;
     * The latter can result in loading untrusted code unless it is ensured that
     * the URL refers to a trustworthy resource.
     * @param frame The frame element whose src property is to be assigned to.
     * @param url The URL to assign.
     */
    function setFrameSrc(
        frame: HTMLFrameElement,
        url: ಠ_ಠ.clutz.goog.html.TrustedResourceUrl): void;
    /**
     * Safely assigns a URL to an iframe element's src property.
     *
     * Example usage:
     * goog.dom.safe.setIframeSrc(iframeEl, url);
     * which is a safe alternative to
     * iframeEl.src = url;
     * The latter can result in loading untrusted code unless it is ensured that
     * the URL refers to a trustworthy resource.
     * @param iframe The iframe element whose src property is to be assigned to.
     * @param url The URL to assign.
     */
    function setIframeSrc(
        iframe: HTMLIFrameElement,
        url: ಠ_ಠ.clutz.goog.html.TrustedResourceUrl): void;
    /**
     * Safely assigns HTML to an iframe element's srcdoc property.
     *
     * Example usage:
     * goog.dom.safe.setIframeSrcdoc(iframeEl, safeHtml);
     * which is a safe alternative to
     * iframeEl.srcdoc = html;
     * The latter can result in loading untrusted code.
     * @param iframe The iframe element whose srcdoc property is to be assigned
     * to.
     * @param html The HTML to assign.
     */
    function setIframeSrcdoc(
        iframe: HTMLIFrameElement, html: ಠ_ಠ.clutz.goog.html.SafeHtml): void;
    /**
     * Safely assigns a URL to an image element's src property.
     *
     * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned
     * to image's src property.  If url is of type string however, it is first
     * sanitized using goog.html.SafeUrl.sanitize.
     * @param imageElement The image element whose src property is to be
     * assigned to.
     * @param url The URL to assign.
     */
    function setImageSrc(
        imageElement: HTMLImageElement,
        url: string|ಠ_ಠ.clutz.goog.html.SafeUrl): void;
    /**
     * Assigns known-safe HTML to an element's innerHTML property.
     * @param elem The element whose innerHTML is to be assigned to.
     * @param html The known-safe HTML to assign.
     */
    function setInnerHtml(
        elem: GlobalElement, html: ಠ_ಠ.clutz.goog.html.SafeHtml): void;
    /**
     * Safely assigns a URL to an input element's formaction property.
     *
     * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned
     * to anchor's href property.  If url is of type string however, it is first
     * sanitized using goog.html.SafeUrl.sanitize.
     *
     * Example usage:
     * goog.dom.safe.setInputFormAction(inputEl, url);
     * which is a safe alternative to
     * inputEl.action = url;
     * The latter can result in XSS vulnerabilities if url is a
     * user-/attacker-controlled value.
     * @param input The input element whose action property is to be assigned
     * to.
     * @param url The URL to assign.
     */
    function setInputFormAction(
        input: GlobalElement, url: string|ಠ_ಠ.clutz.goog.html.SafeUrl): void;
    /**
     * Safely sets a link element's href and rel properties. Whether or not
     * the URL assigned to href has to be a goog.html.TrustedResourceUrl
     * depends on the value of the rel property. If rel contains "stylesheet"
     * then a TrustedResourceUrl is required.
     *
     * Example usage:
     * goog.dom.safe.setLinkHrefAndRel(linkEl, url, 'stylesheet');
     * which is a safe alternative to
     * linkEl.rel = 'stylesheet';
     * linkEl.href = url;
     * The latter can result in loading untrusted code unless it is ensured that
     * the URL refers to a trustworthy resource.
     * @param link The link element whose href property is to be assigned to.
     * @param url The URL to assign to the href property. Must be a
     * TrustedResourceUrl if the value assigned to rel contains "stylesheet". A
     * string value is sanitized with goog.html.SafeUrl.sanitize.
     * @param rel The value to assign to the rel property.
     */
    function setLinkHrefAndRel(
        link: HTMLLinkElement,
        url: string|ಠ_ಠ.clutz.goog.html.SafeUrl|
        ಠ_ಠ.clutz.goog.html.TrustedResourceUrl,
        rel: string): void;
    /**
     * Safely assigns a URL to a Location object's href property.
     *
     * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned
     * to loc's href property.  If url is of type string however, it is first
     * sanitized using goog.html.SafeUrl.sanitize.
     *
     * Example usage:
     * goog.dom.safe.setLocationHref(document.location, redirectUrl);
     * which is a safe alternative to
     * document.location.href = redirectUrl;
     * The latter can result in XSS vulnerabilities if redirectUrl is a
     * user-/attacker-controlled value.
     * @param loc The Location object whose href property is to be assigned to.
     * @param url The URL to assign.
     */
    function setLocationHref(
        loc: Location, url: string|ಠ_ಠ.clutz.goog.html.SafeUrl): void;
    /**
     * Safely assigns a URL to an object element's data property.
     *
     * Example usage:
     * goog.dom.safe.setObjectData(objectEl, url);
     * which is a safe alternative to
     * objectEl.data = url;
     * The latter can result in loading untrusted code unless setit is ensured
     * that the URL refers to a trustworthy resource.
     * @param object The object element whose data property is to be assigned
     * to.
     * @param url The URL to assign.
     */
    function setObjectData(
        object: HTMLObjectElement,
        url: ಠ_ಠ.clutz.goog.html.TrustedResourceUrl): void;
    /**
     * Assigns known-safe HTML to an element's outerHTML property.
     * @param elem The element whose outerHTML is to be assigned to.
     * @param html The known-safe HTML to assign.
     */
    function setOuterHtml(
        elem: GlobalElement, html: ಠ_ಠ.clutz.goog.html.SafeHtml): void;
    /**
     * Safely assigns a value to a script element's content.
     *
     * Example usage:
     * goog.dom.safe.setScriptContent(scriptEl, content);
     * which is a safe alternative to
     * scriptEl.text = content;
     * The latter can result in executing untrusted code unless it is ensured
     * that the code is loaded from a trustworthy resource.
     * @param script The script element whose content is being set.
     * @param content The content to assign.
     */
    function setScriptContent(
        script: HTMLScriptElement,
        content: ಠ_ಠ.clutz.goog.html.SafeScript): void;
    /**
     * Safely assigns a URL to a script element's src property.
     *
     * Example usage:
     * goog.dom.safe.setScriptSrc(scriptEl, url);
     * which is a safe alternative to
     * scriptEl.src = url;
     * The latter can result in loading untrusted code unless it is ensured that
     * the URL refers to a trustworthy resource.
     * @param script The script element whose src property is to be assigned to.
     * @param url The URL to assign.
     */
    function setScriptSrc(
        script: HTMLScriptElement,
        url: ಠ_ಠ.clutz.goog.html.TrustedResourceUrl): void;
    /**
     * Sets the given element's style property to the contents of the provided
     * SafeStyle object.
     */
    function setStyle(
        elem: GlobalElement, style: ಠ_ಠ.clutz.goog.html.SafeStyle): void;
    /**
     * Safely assigns a URL to a video element's src property.
     *
     * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned
     * to video's src property.  If url is of type string however, it is first
     * sanitized using goog.html.SafeUrl.sanitize.
     * @param videoElement The video element whose src property is to be
     * assigned to.
     * @param url The URL to assign.
     */
    function setVideoSrc(
        videoElement: HTMLVideoElement,
        url: string|ಠ_ಠ.clutz.goog.html.SafeUrl): void;
}
declare module 'goog:goog.dom.safe' {
    import alias = ಠ_ಠ.clutz.goog.dom.safe;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.safe {
    type InsertAdjacentHtmlPosition = string&{clutzEnumBrand: never};
    var InsertAdjacentHtmlPosition: {
        AFTERBEGIN: InsertAdjacentHtmlPosition,
        AFTEREND: InsertAdjacentHtmlPosition,
        BEFOREBEGIN: InsertAdjacentHtmlPosition,
        BEFOREEND: InsertAdjacentHtmlPosition,
    };
}
declare module 'goog:goog.dom.safe.InsertAdjacentHtmlPosition' {
    import alias = ಠ_ಠ.clutz.goog.dom.safe.InsertAdjacentHtmlPosition;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.selection {
    /**
     * Returns the place where the selection ends inside a textarea or a text
     * input
     * @param textfield A textarea or text input.
     */
    function getEnd(textfield: GlobalElement|null): number;
    /**
     * Returns the start and end points of the selection inside a textarea or a
     * text input.
     * @param textfield A textarea or text input.
     */
    function getEndPoints(textfield: GlobalElement|
                          null): ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Return the place where the selection starts inside a textarea or a text
     * input
     * @param textfield A textarea or text input.
     */
    function getStart(textfield: GlobalElement|null): number;
    /**
     * Returns the selected text inside a textarea or a text input
     * @param textfield A textarea or text input.
     */
    function getText(textfield: GlobalElement|null): string;
    /**
     * Sets the cursor position within a textfield.
     * @param textfield A textarea or text input.
     * @param pos The position within the text field.
     */
    function setCursorPosition(
        textfield: GlobalElement|null, pos: number): void;
    /**
     * Sets the place where the selection should end inside a text area or a
     * text input
     * @param textfield A textarea or text input.
     * @param pos The position to end the selection at.
     */
    function setEnd(textfield: GlobalElement|null, pos: number): void;
    /**
     * Sets the place where the selection should start inside a textarea or a
     * text input
     * @param textfield A textarea or text input.
     * @param pos The position to set the start of the selection at.
     */
    function setStart(textfield: GlobalElement|null, pos: number): void;
    /**
     * Sets the selected text inside a textarea or a text input
     * @param textfield A textarea or text input.
     * @param text The text to change the selection to.
     */
    function setText(textfield: GlobalElement|null, text: string): void;
}
declare module 'goog:goog.dom.selection' {
    import alias = ಠ_ಠ.clutz.goog.dom.selection;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.tags {
    /**
     * Checks whether the tag is void (with no contents allowed and no legal end
     * tag), for example 'br'.
     * @param tagName The tag name in lower case.
     */
    function isVoidTag(tagName: string): boolean;
}
declare module 'goog:goog.dom.tags' {
    import alias = ಠ_ಠ.clutz.goog.dom.tags;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.module$exports$goog$dom$uri {
    /**
     * Normalizes a URL by assigning it to an anchor element and reading back
     * href.
     *
     * This converts relative URLs to absolute, and cleans up whitespace.
     * @param uri A string containing a URI.
     */
    function normalizeUri(uri: string): string;
}
declare module 'goog:goog.dom.uri' {
    import alias = ಠ_ಠ.clutz.module$exports$goog$dom$uri;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.vendor {
    function getPrefixedEventType(eventType: string): string;
    function getPrefixedPropertyName(
        propertyName: string, opt_object?: GlobalObject): string|null;
    /**
     * Returns the JS vendor prefix used in CSS properties. Different vendors
     * use different methods of changing the case of the property names.
     */
    function getVendorJsPrefix(): string|null;
    /**
     * Returns the vendor prefix used in CSS properties.
     */
    function getVendorPrefix(): string|null;
}
declare module 'goog:goog.dom.vendor' {
    import alias = ಠ_ಠ.clutz.goog.dom.vendor;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.dom.xml {
    /**
     * True if browser has ActiveXObject support.
     * Possible override if this test become wrong in coming IE versions.
     */
    var ACTIVEX_SUPPORT: boolean;
    /**
     * Max XML size for MSXML2.  Used to prevent potential DoS attacks.
     */
    var MAX_ELEMENT_DEPTH: number;
    /**
     * Max XML size for MSXML2.  Used to prevent potential DoS attacks.
     */
    var MAX_XML_SIZE_KB: number;
    /**
     * Creates an XML document appropriate for the current JS runtime
     * @param opt_rootTagName The root tag name.
     * @param opt_namespaceUri Namespace URI of the document element.
     * @param opt_preferActiveX Whether to default to ActiveXObject to create
     * Document in IE. Use this if you need xpath support in IE (e.g.,
     * selectSingleNode or selectNodes), but be aware that the ActiveXObject
     * does not support various DOM-specific Document methods and attributes.
     */
    function createDocument(
        opt_rootTagName?: string, opt_namespaceUri?: string,
        opt_preferActiveX?: boolean): Document|null;
    /**
     * Creates an XML document from a string
     * @param xml The text.
     * @param opt_preferActiveX Whether to default to ActiveXObject to create
     * Document in IE. Use this if you need xpath support in IE (e.g.,
     * selectSingleNode or selectNodes), but be aware that the ActiveXObject
     * does not support various DOM-specific Document methods and attributes.
     */
    function loadXml(xml: string, opt_preferActiveX?: boolean): Document|null;
    /**
     * Selects multiple nodes using an Xpath expression and a root node
     * @param node The root node.
     * @param path Xpath selector.
     */
    function selectNodes(node: Node|null, path: string): NodeListOf<Node>|
        Node[];
    /**
     * Selects a single node using an Xpath expression and a root node
     * @param node The root node.
     * @param path Xpath selector.
     */
    function selectSingleNode(node: Node|null, path: string): Node|null;
    /**
     * Serializes an XML document or subtree to string.
     * @param xml The document or the root node of the subtree.
     */
    function serialize(xml: Document|null|GlobalElement): string;
    /**
     * Sets multiple attributes on an element. Differs from
     * goog.dom.setProperties in that it exclusively uses the element's
     * setAttributes method. Use this when you need to ensure that the exact
     * property is available as an attribute and can be read later by the native
     * getAttribute method.
     * @param element XML or DOM element to set attributes on.
     * @param attributes Map of property:value pairs.
     */
    function setAttributes(
        element: GlobalElement, attributes: {[key: string]: string}): void;
}
declare module 'goog:goog.dom.xml' {
    import alias = ಠ_ಠ.clutz.goog.dom.xml;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds {
    /**
     * Creates a new abstract data node.
     */
    class AbstractFastDataNode extends AbstractFastDataNode_Instance {}
    class AbstractFastDataNode_Instance extends
        ಠ_ಠ.clutz.goog.ds.DataNodeList_Instance {
        /**
         * Creates a new abstract data node.
         * @param dataName Name of the datanode.
         * @param opt_parent Parent of this data node.
         */
        constructor(
            dataName: string, opt_parent?: ಠ_ಠ.clutz.goog.ds.DataNode|null);
        /**
         * Return the name of this data node.
         */
        getDataName(): string;
        /**
         * Get the path leading to this data node.
         */
        getDataPath(): string;
        /**
         * Set the name of this data node.
         * @param value Name.
         */
        setDataName(value: string): any;
    }
}
declare module 'goog:goog.ds.AbstractFastDataNode' {
    import alias = ಠ_ಠ.clutz.goog.ds.AbstractFastDataNode;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds {
    /**
     * Base class for data node functionality, has default implementations for
     * many of the functions.
     *
     * implements {goog.ds.DataNode}
     */
    class BaseDataNode extends BaseDataNode_Instance {}
    class BaseDataNode_Instance {
        private noStructuralTyping_: any;
        /**
         * Gets a named child node of the current node
         * @param name The node name.
         * @param opt_canCreate Whether you can create the child node if it
         * doesn't exist already.
         */
        getChildNode(name: string, opt_canCreate?: boolean):
            ಠ_ಠ.clutz.goog.ds.DataNode|null;
        /**
         * Gets the value of a child node
         * @param name The node name.
         */
        getChildNodeValue(name: string): GlobalObject|null;
        /**
         * Gets all of the child nodes of the current node.
         * Should return an empty DataNode list if no child nodes.
         * @param opt_selector String selector to choose child nodes.
         */
        getChildNodes(opt_selector?: string): ಠ_ಠ.clutz.goog.ds.DataNodeList;
        /**
         * Get the name of the node relative to the parent node
         */
        getDataName(): string;
        /**
         * Gets the a qualified data path to this node
         */
        getDataPath(): string;
        /**
         * Gets the state of the backing data for this node
         */
        getLoadState(): ಠ_ಠ.clutz.goog.ds.LoadState;
        /**
         * Gets the parent node. Subclasses implement this function
         */
        getParent(): ಠ_ಠ.clutz.goog.ds.DataNode|null;
        /**
         * Load or reload the backing data for this node
         */
        load(): void;
        /**
         * Set the value of the node
         * @param value The new value of the node.
         */
        set(a: GlobalObject|null): any;
    }
}
declare module 'goog:goog.ds.BaseDataNode' {
    import alias = ಠ_ಠ.clutz.goog.ds.BaseDataNode;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds {
    /**
     * Simple node list implementation with underlying array and map
     * implements goog.ds.DataNodeList.
     *
     * Names that are reserved for system use and shouldn't be used for data
     * node names: eval, toSource, toString, unwatch, valueOf, watch. Behavior
     * is undefined if these names are used.
     */
    class BasicNodeList extends BasicNodeList_Instance {}
    class BasicNodeList_Instance extends
        ಠ_ಠ.clutz.goog.ds.DataNodeList_Instance {
        /**
         * Simple node list implementation with underlying array and map
         * implements goog.ds.DataNodeList.
         *
         * Names that are reserved for system use and shouldn't be used for data
         * node names: eval, toSource, toString, unwatch, valueOf, watch.
         * Behavior is undefined if these names are used.
         * @param opt_nodes optional nodes to add to list.
         */
        constructor(opt_nodes?: (ಠ_ಠ.clutz.goog.ds.DataNode|null)[]|null);
        indexMap_: GlobalObject;
        list_: any[];
        map_: GlobalObject;
        /**
         * Add a node to the node list.
         * If the node has a dataName, uses this for the key in the map.
         * TODO(user) Remove function as well
         * @param node The node to add.
         */
        add(node: ಠ_ಠ.clutz.goog.ds.DataNode|null): any;
        /**
         * Get a node by string key.
         * Returns null if node doesn't exist.
         * @param key String lookup key.
         */
        get(key: string): ಠ_ಠ.clutz.goog.ds.DataNode|null;
        /**
         * Get a node by index
         * Returns null if the index is out of range
         * @param index The index of the node.
         */
        getByIndex(index: number): ಠ_ಠ.clutz.goog.ds.DataNode|null;
        /**
         * Gets the size of the node list
         */
        getCount(): number;
        /**
         * Get the index of a named node
         * @param name The name of the node to get the index of.
         */
        indexOf(name: string): number|undefined;
        /**
         * Removes a node in the list of a given name
         * @param name Name of the node.
         */
        removeNode(name: string): boolean;
        /**
         * Sets a node in the list of a given name
         * @param name Name of the node.
         * @param node The node.
         */
        setNode(name: string, node: ಠ_ಠ.clutz.goog.ds.DataNode|null): any;
    }
}
declare module 'goog:goog.ds.BasicNodeList' {
    import alias = ಠ_ಠ.clutz.goog.ds.BasicNodeList;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds {
    /**
     * Create a DataManger
     */
    class DataManager extends DataManager_Instance {
        /**
         * Clears the global instance (for unit tests to reset state).
         */
        static clearInstance(): void;
        /**
         * Get the global instance
         */
        static getInstance(): ಠ_ಠ.clutz.goog.ds.DataManager;
    }
    class DataManager_Instance extends ಠ_ಠ.clutz.goog.ds.DataNode_Instance {
        aliases_: GlobalObject;
        autoloads_: ಠ_ಠ.clutz.goog.structs.Map<any, any>;
        dataSources_: ಠ_ಠ.clutz.goog.ds.BasicNodeList;
        eventCount_: number;
        indexedListenersByFunction_: GlobalObject;
        listenerMap_: GlobalObject;
        listenersByFunction_: GlobalObject;
        /**
         * Add a data source
         * @param ds The data source.
         * @param opt_autoload Whether to automatically load the data, defaults
         * to false.
         * @param opt_name Optional name, can also get name from the datasource.
         */
        addDataSource(
            ds: ಠ_ಠ.clutz.goog.ds.DataNode|null, opt_autoload?: boolean,
            opt_name?: string): void;
        /**
         * Adds an indexed listener.
         *
         * Indexed listeners allow for '*' in data paths. If a * exists, will
         * match all values and return the matched values in an array to the
         * callback.
         *
         * Currently uses a promiscuous match algorithm: Matches everything
         * before the first '*', and then does a regex match for all of the
         * returned events. Although this isn't optimized, it is still an
         * improvement as you can collapse 100's of listeners into a single
         * regex match
         * @param fn Callback function, signature (dataPath, id, indexes).
         * @param dataPath Fully qualified data path.
         * @param opt_id A value passed back to the listener when the dataPath
         * is matched.
         */
        addIndexedListener(
            fn: (...a: any[]) => any, dataPath: string, opt_id?: string): void;
        /**
         * Adds a listener
         * Listeners should fire when any data with path that has dataPath as
         * substring is changed.
         * TODO(user) Look into better listener handling
         * @param fn Callback function, signature function(dataPath, id).
         * @param dataPath Fully qualified data path.
         * @param opt_id A value passed back to the listener when the dataPath
         * is matched.
         */
        addListener(
            fn: (...a: any[]) => any, dataPath: string, opt_id?: string): void;
        /**
         * Create an alias for a data path, very similar to assigning a
         * variable. For example, you can set $CurrentContact ->
         * $Request/Contacts[5], and all references to $CurrentContact will be
         * procesed on $Request/Contacts[5].
         *
         * Aliases will hide datasources of the same name.
         * @param name Alias name, must be a top level path ($Foo).
         * @param dataPath Data path being aliased.
         */
        aliasDataSource(name: string, dataPath: string): void;
        /**
         * Fire a data change event to all listeners
         *
         * If the path matches the path of a listener, the listener will fire
         *
         * If your path is the parent of a listener, the listener will fire.
         * I.e. if $Contacts/bob@bob.com changes, then we will fire listener for
         * $Contacts/bob@bob.com/Name as well, as the assumption is that when
         * a parent changes, all children are invalidated.
         *
         * If your path is the child of a listener, the listener may fire,
         * depending on the ancestor depth.
         *
         * A listener for $Contacts might only be interested if the contact name
         * changes (i.e. $Contacts doesn't fire on $Contacts/bob@bob.com/Name),
         * while a listener for a specific contact might
         * (i.e. $Contacts/bob@bob.com would fire on
         * $Contacts/bob@bob.com/Name). Adding "/..." to a lisetener path
         * listens to all children, and adding "/*" to a listener path listens
         * only to direct children
         * @param dataPath Fully qualified data path.
         */
        fireDataChange(dataPath: string): void;
        /**
         * Get the value of the node
         */
        get(...a: any[]): GlobalObject;
        /**
         * Gets a named child node of the current node
         * @param name The node name.
         */
        getChildNode(name: string, a?: boolean): ಠ_ಠ.clutz.goog.ds.DataNode
            |null;
        getChildNodeValue(name: string): any;
        getChildNodes(opt_selector?: string): ಠ_ಠ.clutz.goog.ds.DataNodeList;
        /**
         * Get the name of the node relative to the parent node
         */
        getDataName(): string;
        /**
         * Gets the a qualified data path to this node
         */
        getDataPath(): string;
        /**
         * Gets a named child node of the current node.
         * @param name The node name.
         */
        getDataSource(name: string): ಠ_ಠ.clutz.goog.ds.DataNode|null;
        /**
         * Get the total count of events fired (mostly for debugging)
         */
        getEventCount(): number;
        /**
         * Get the total number of listeners (per expression listened to, so may
         * be more than number of times addListener() has been called
         */
        getListenerCount(): number;
        /**
         * Gets the state of the backing data for this node
         */
        getLoadState(): ಠ_ಠ.clutz.goog.ds.LoadState;
        /**
         * Whether the value of this node is a homogeneous list of data
         */
        isList(): boolean;
        /**
         * Load or reload the backing data for this node
         * only loads datasources flagged with autoload
         */
        load(): void;
        /**
         * Removes indexed listeners with a given callback function, and
         * optional matching datapath and matching id.
         * @param fn Callback function, signature function(dataPath, id).
         * @param opt_dataPath Fully qualified data path.
         * @param opt_id A value passed back to the listener when the dataPath
         * is matched.
         */
        removeIndexedListeners(
            fn: (...a: any[]) => any, opt_dataPath?: string,
            opt_id?: string): void;
        /**
         * Removes listeners with a given callback function, and optional
         * matching dataPath and matching id
         * @param fn Callback function, signature function(dataPath, id).
         * @param opt_dataPath Fully qualified data path.
         * @param opt_id A value passed back to the listener when the dataPath
         * is matched.
         */
        removeListeners(
            fn: (...a: any[]) => any, opt_dataPath?: string,
            opt_id?: string): void;
        /**
         * Disables the sending of all data events during the execution of the
         * given callback. This provides a way to avoid useless notifications of
         * small changes when you will eventually send a data event manually
         * that encompasses them all.
         *
         * Note that this function can not be called reentrantly.
         * @param callback Zero-arg function to execute.
         */
        runWithoutFiringDataChanges(callback: (...a: any[]) => any): void;
        set(value: any): any;
    }
}
declare module 'goog:goog.ds.DataManager' {
    import alias = ಠ_ಠ.clutz.goog.ds.DataManager;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds {
    /**
     * Interface for node in rich data tree.
     *
     * Names that are reserved for system use and shouldn't be used for data
     * node names: eval, toSource, toString, unwatch, valueOf, watch. Behavior
     * is undefined if these names are used.
     */
    class DataNode extends DataNode_Instance {}
    class DataNode_Instance {
        private noStructuralTyping_: any;
        /**
         * Get the value of the node
         * @param var_args Do not check arity of arguments, because some
         * subclasses require args.
         */
        get(...a: any[]): any;
        /**
         * Gets a named child node of the current node
         * @param name The node name.
         * @param opt_canCreate Whether to create a child node if it does not
         * exist.
         */
        getChildNode(a: string, b?: boolean): ಠ_ಠ.clutz.goog.ds.DataNode|null;
        /**
         * Gets the value of a child node
         * @param name The node name.
         */
        getChildNodeValue(a: string): any;
        /**
         * Gets all of the child nodes of the current node.
         * Should return an empty DataNode list if no child nodes.
         * @param opt_selector String selector to choose child nodes.
         */
        getChildNodes(a?: string): ಠ_ಠ.clutz.goog.ds.DataNodeList;
        /**
         * Get the name of the node relative to the parent node
         */
        getDataName(): string;
        /**
         * Gets the a qualified data path to this node
         */
        getDataPath(): string;
        /**
         * Gets the state of the backing data for this node
         */
        getLoadState(): ಠ_ಠ.clutz.goog.ds.LoadState;
        /**
         * Whether the value of this node is a homogeneous list of data
         */
        isList(): boolean;
        /**
         * Load or reload the backing data for this node
         */
        load(): void;
        /**
         * Set the value of the node
         * @param value The new value of the node.
         */
        set(a: any): any;
        /**
         * Sets a named child node of the current node.
         * @param name The node name.
         * @param value The value to set, can be DataNode, object, property, or
         * null. If value is null, removes the child node.
         */
        setChildNode(a: string, b: GlobalObject|null): GlobalObject|null;
        /**
         * Set the name of the node relative to the parent node
         * @param name The name of the node.
         */
        setDataName(a: string): any;
    }
}
declare module 'goog:goog.ds.DataNode' {
    import alias = ಠ_ಠ.clutz.goog.ds.DataNode;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds {
    /**
     * Interface for node list in rich data tree.
     *
     * Has both map and list-style accessors
     */
    class DataNodeList extends DataNodeList_Instance {}
    class DataNodeList_Instance extends ಠ_ಠ.clutz.goog.ds.DataNode_Instance {
        /**
         * Add a node to the node list.
         * If the node has a dataName, uses this for the key in the map.
         * @param node The node to add.
         */
        add(a: ಠ_ಠ.clutz.goog.ds.DataNode|null): any;
        /**
         * Get a node by string key.
         * Returns null if node doesn't exist.
         * @param key String lookup key.
         */
        get(a: string): any;
        /**
         * Get a node by index
         * Returns null if the index is out of range
         * @param index The index of the node.
         */
        getByIndex(a: number): ಠ_ಠ.clutz.goog.ds.DataNode|null;
        /**
         * Gets the size of the node list
         */
        getCount(): number;
        /**
         * Removes a node in the list of a given name
         * @param name Name of the node.
         */
        removeNode(a: string): boolean;
        /**
         * Sets a node in the list of a given name
         * @param name Name of the node.
         * @param node The node.
         */
        setNode(a: string, b: ಠ_ಠ.clutz.goog.ds.DataNode|null): any;
    }
}
declare module 'goog:goog.ds.DataNodeList' {
    import alias = ಠ_ಠ.clutz.goog.ds.DataNodeList;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds {
    /**
     * Immulatable empty node list
     */
    class EmptyNodeList extends EmptyNodeList_Instance {}
    class EmptyNodeList_Instance extends
        ಠ_ಠ.clutz.goog.ds.BasicNodeList_Instance {
        /**
         * Immulatable empty node list
         */
        constructor();
        /**
         * Add a node to the node list.
         * If the node has a dataName, uses this for the key in the map.
         * @param node The node to add.
         */
        add(node: ಠ_ಠ.clutz.goog.ds.DataNode|null): any;
    }
}
declare module 'goog:goog.ds.EmptyNodeList' {
    import alias = ಠ_ಠ.clutz.goog.ds.EmptyNodeList;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds {
    /**
     * Create a new expression. An expression uses a string expression language,
     * and from this string and a passed in DataNode can evaluate to a value,
     * DataNode, or a DataNodeList.
     */
    class Expr extends Expr_Instance {
        /**
         * For DOM interop - all DOM attribute nodes
         * Attribute nodes have dataName starting with "@"
         */
        static ALL_ATTRIBUTES: ಠ_ಠ.clutz.goog.ds.Expr|null;
        /**
         * For DOM interop - all DOM child nodes (text + element).
         * Text nodes have dataName #text
         */
        static ALL_CHILD_NODES: ಠ_ಠ.clutz.goog.ds.Expr|null;
        /**
         * For DOM interop - all DOM element child nodes
         */
        static ALL_ELEMENTS: ಠ_ಠ.clutz.goog.ds.Expr|null;
        /**
         * Get the count of nodes matching an expression
         */
        static COUNT: ಠ_ಠ.clutz.goog.ds.Expr|null;
        /**
         * The current node
         */
        static CURRENT: ಠ_ಠ.clutz.goog.ds.Expr|null;
        /**
         * Get the dataName of a node
         */
        static NAME: ಠ_ಠ.clutz.goog.ds.Expr|null;
        /**
         * Get the position of the "current" node in the current node list
         * This will only apply for datasources that support the concept of a
         * current node (none exist yet). This is similar to XPath position()
         * and concept of current node
         */
        static POSITION: ಠ_ಠ.clutz.goog.ds.Expr|null;
        /**
         * Create an expression from a string, can use cached values
         * @param expr The expression string.
         */
        static create(expr: string): ಠ_ಠ.clutz.goog.ds.Expr|null;
    }
    class Expr_Instance {
        private noStructuralTyping_: any;
        /**
         * Create a new expression. An expression uses a string expression
         * language, and from this string and a passed in DataNode can evaluate
         * to a value, DataNode, or a DataNodeList.
         * @param opt_expr The string expression.
         */
        constructor(opt_expr?: string);
        /**
         * Gets the last part of the expression.
         */
        getLast(): string|null;
        /**
         * Gets the parent expression of this expression, or null if this is top
         * level
         */
        getNext(): ಠ_ಠ.clutz.goog.ds.Expr|null;
        /**
         * Evaluate an expression on a data node, and return the first matching
         * node Recursively walks through child nodes to evaluate
         * @param opt_ds Optional datasource to evaluate against. If not
         * provided, evaluates against DataManager global root.
         * @param opt_canCreate If true, will try to create new nodes.
         */
        getNode(
            opt_ds?: ಠ_ಠ.clutz.goog.ds.DataNode|null,
            opt_canCreate?: boolean): ಠ_ಠ.clutz.goog.ds.DataNode|null;
        /**
         * Evaluate an expression on a data node, and return matching nodes
         * Recursively walks through child nodes to evaluate
         * @param opt_ds Optional datasource to evaluate against. If not
         * provided, evaluates against data root.
         * @param opt_canCreate If true, will try to create new nodes.
         */
        getNodes(
            opt_ds?: ಠ_ಠ.clutz.goog.ds.DataNode|null,
            opt_canCreate?: boolean): ಠ_ಠ.clutz.goog.ds.DataNodeList|null;
        /**
         * Gets the parent expression of this expression, or null if this is top
         * level
         */
        getParent(): ಠ_ಠ.clutz.goog.ds.Expr|null;
        /**
         * Get the source data path for the expression
         */
        getSource(): string;
        /**
         * Evaluate an expression on a data node, and return a value
         * Recursively walks through child nodes to evaluate
         * TODO(user) Support other expression functions
         * @param opt_ds Optional datasource to evaluate against. If not
         * provided, evaluates against DataManager global root.
         */
        getValue(opt_ds?: ಠ_ಠ.clutz.goog.ds.DataNode|null): any;
    }
}
declare module 'goog:goog.ds.Expr' {
    import alias = ಠ_ಠ.clutz.goog.ds.Expr;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds {
    /**
     * Creates a new fast data node, using the properties of root.
     */
    class FastDataNode extends FastDataNode_Instance {
        /**
         * Creates a new FastDataNode structure initialized from object. This
         * will return an instance of the most suitable sub-class of
         * FastDataNode.
         *
         * You should not modify object after creating a fast data node from it
         * or assume that changing object changes the data node. Doing so
         * results in undefined behaviour.
         * @param object Object to initialize data node from.
         * @param dataName Name of data node.
         * @param opt_parent Parent of data node.
         */
        static fromJs(
            object: GlobalObject|null|number|boolean|string, dataName: string,
            opt_parent?: ಠ_ಠ.clutz.goog.ds.DataNode|
            null): ಠ_ಠ.clutz.goog.ds.AbstractFastDataNode;
    }
    class FastDataNode_Instance extends
        ಠ_ಠ.clutz.goog.ds.AbstractFastDataNode_Instance {
        /**
         * Creates a new fast data node, using the properties of root.
         * @param root JSON-like object to initialize data node from.
         * @param dataName Name of this data node.
         * @param opt_parent Parent of this data node.
         */
        constructor(
            root: GlobalObject|null, dataName: string,
            opt_parent?: ಠ_ಠ.clutz.goog.ds.DataNode|null);
        /**
         * Adds a child to this data node.
         * @param value Child node to add.
         */
        add(value: ಠ_ಠ.clutz.goog.ds.DataNode|null): any;
        /**
         * Creates a deep copy of this data node.
         */
        clone(): ಠ_ಠ.clutz.goog.ds.FastDataNode|null;
        /**
         * Add all attributes of object to this data node.
         * @param object Object to add attributes from.
         */
        extendWith(object: GlobalObject|null): void;
        /**
         * Gets the value of this data node (if called without opt_key) or
         * gets a child node (if called with opt_key).
         * @param opt_key Name of child node.
         */
        get(opt_key?: string): any;
        /**
         * Gets a child node by index. This method has a complexity of O(n)
         * where n is the number of children. If you need a faster
         * implementation of this method, you should use goog.ds.FastListNode.
         * @param index Index of child node (starting from 0).
         */
        getByIndex(index: number): ಠ_ಠ.clutz.goog.ds.DataNode|null;
        /**
         * Get a child node by name.
         * @param name Name of child node.
         * @param opt_create Whether to create the child if it does not exist.
         */
        getChildNode(name: string, opt_create?: boolean):
            ಠ_ಠ.clutz.goog.ds.DataNode|null;
        /**
         * Returns the value of a child node. By using this method you can avoid
         * the need to create PrimitiveFastData nodes.
         * @param name Name of child node.
         */
        getChildNodeValue(name: string): GlobalObject|null;
        getChildNodes(opt_selector?: string): ಠ_ಠ.clutz.goog.ds.DataNodeList;
        /**
         * Gets the number of child nodes. This method has a complexity of O(n)
         * where n is the number of children. If you need a faster
         * implementation of this method, you should use goog.ds.FastListNode.
         */
        getCount(): number;
        /**
         * Returns a javascript object representation of this data node. You
         * should not modify the object returned by this function.
         */
        getJsObject(): GlobalObject;
        /**
         * Returns whether this data node is a list. Always returns false for
         * instances of FastDataNode but may return true for subclasses.
         */
        isList(): boolean;
        /**
         * Removes a child node.
         */
        removeNode(name: string): boolean;
        /**
         * Not supported for normal FastDataNodes.
         * @param value Value to set data node to.
         */
        set(value: any): any;
        /**
         * Sets a child node. Creates the child if it does not exist.
         *
         * Calling  this function makes any child nodes previously obtained for
         * name invalid. You should not use these child nodes but instead obtain
         * a new instance by calling getChildNode.
         */
        setChildNode(name: string, value: GlobalObject|null): GlobalObject|null;
        /**
         * Sets a child node.
         * @param name Name of child node.
         * @param value Value of child node.
         */
        setNode(name: string, value: GlobalObject|null): any;
    }
}
declare module 'goog:goog.ds.FastDataNode' {
    import alias = ಠ_ಠ.clutz.goog.ds.FastDataNode;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds {
    /**
     * Creates a new list node from an array.
     */
    class FastListNode extends FastListNode_Instance {}
    class FastListNode_Instance extends
        ಠ_ಠ.clutz.goog.ds.AbstractFastDataNode_Instance {
        /**
         * Creates a new list node from an array.
         * @param values values hold by this list node.
         * @param dataName name of this node.
         * @param opt_parent parent of this node.
         */
        constructor(
            values: any[]|null, dataName: string,
            opt_parent?: ಠ_ಠ.clutz.goog.ds.DataNode|null);
        map_: GlobalObject|GlobalObject;
        values_: any[];
        /**
         * Adds a child to this data node
         * @param value Child node to add.
         */
        add(value: ಠ_ಠ.clutz.goog.ds.DataNode|null): any;
        /**
         * Gets the value of this data node (if called without opt_key) or
         * gets a child node (if called with opt_key).
         * @param opt_key Name of child node.
         */
        get(opt_key?: string): any[]|null|ಠ_ಠ.clutz.goog.ds.DataNode;
        /**
         * Gets a child node by (numeric) index.
         * @param index Index of child node (starting from 0).
         */
        getByIndex(index: number): ಠ_ಠ.clutz.goog.ds.DataNode|null;
        /**
         * Get a child node by name.
         * @param key Name of child node.
         * @param opt_create Whether to create the child if it does not exist.
         */
        getChildNode(key: string, opt_create?: boolean):
            ಠ_ಠ.clutz.goog.ds.DataNode|null;
        /**
         * Returns the value of a child node.
         * @param key Name of child node.
         */
        getChildNodeValue(key: string): any;
        /**
         * Returns child nodes of this data node. Currently, only supports
         * returning all children.
         */
        getChildNodes(a?: string): ಠ_ಠ.clutz.goog.ds.DataNodeList;
        /**
         * Gets the number of child nodes.
         */
        getCount(): number;
        /**
         * Returns a javascript object representation of this data node. You
         * should not modify the object returned by this function.
         */
        getJsObject(): GlobalObject;
        /**
         * Returns the index of a named child nodes. This method only works if
         * this list uses mixed name/indexed lookup, i.e. if its child node have
         * an 'id' attribute.
         * @param name Name of child node to determine index of.
         */
        indexOf(name: string): number;
        /**
         * Returns whether this data node is a list. Always returns true.
         */
        isList(): boolean;
        /**
         * Removes a child node.
         */
        removeNode(name: string): boolean;
        /**
         * Not supported for FastListNodes.
         * @param value Value to set data node to.
         */
        set(value: any): any;
        /**
         * Sets a child node. Creates the child if it does not exist. To set
         * children at a certain index, use a key of the form '[index]'. Note,
         * that you can only set values at existing numeric indices. To add a
         * new node to this list, you have to use the add method.
         *
         * Calling  this function makes any child nodes previously obtained for
         * name invalid. You should not use these child nodes but instead obtain
         * a new instance by calling getChildNode.
         */
        setChildNode(key: string, value: GlobalObject|null): GlobalObject|null;
        /**
         * Sets a child node.
         * @param name Name of child node.
         * @param value Value of child node.
         */
        setNode(name: string, value: GlobalObject|null): any;
    }
}
declare module 'goog:goog.ds.FastListNode' {
    import alias = ಠ_ಠ.clutz.goog.ds.FastListNode;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds {
    /**
     * Data source whose backing is JavaScript data
     *
     * Names that are reserved for system use and shouldn't be used for data
     * node names: eval, toSource, toString, unwatch, valueOf, watch. Behavior
     * is undefined if these names are used.
     */
    class JsDataSource extends JsDataSource_Instance {}
    class JsDataSource_Instance extends ಠ_ಠ.clutz.goog.ds.DataNode_Instance {
        /**
         * Data source whose backing is JavaScript data
         *
         * Names that are reserved for system use and shouldn't be used for data
         * node names: eval, toSource, toString, unwatch, valueOf, watch.
         * Behavior is undefined if these names are used.
         * @param root The root JS node.
         * @param dataName The name of this node relative to the parent node.
         * @param opt_parent Optional parent of this JsDataSource. implements
         * goog.ds.DataNode.
         */
        constructor(
            root: GlobalObject|null, dataName: string,
            opt_parent?: GlobalObject|null);
        dataName_: string;
        parent_?: GlobalObject|null;
        get(...a: any[]): any;
        /**
         * Gets a named child node of the current node
         * @param name The node name.
         * @param opt_canCreate If true, can create child node.
         */
        getChildNode(name: string, opt_canCreate?: boolean):
            ಠ_ಠ.clutz.goog.ds.DataNode|null;
        /**
         * Gets the value of a child node
         * @param name The node name.
         */
        getChildNodeValue(name: string): GlobalObject|null;
        /**
         * TODO(user) revisit lazy creation.
         */
        getChildNodes(opt_selector?: string): ಠ_ಠ.clutz.goog.ds.DataNodeList;
        /**
         * Get the name of the node relative to the parent node
         */
        getDataName(): string;
        /**
         * Gets the a qualified data path to this node
         */
        getDataPath(): string;
        /**
         * Gets the state of the backing data for this node
         * TODO(user) Discuss null value handling
         */
        getLoadState(): ಠ_ಠ.clutz.goog.ds.LoadState;
        /**
         * Whether the value of this node is a homogeneous list of data
         */
        isList(): boolean;
        /**
         * Load or reload the backing data for this node
         */
        load(): void;
        /**
         * The root JS object. Can be null.
         */
        root_: any;
        /**
         * Set the value of the node
         * @param value The new value of the node.
         */
        set(value: any): any;
        /**
         * Sets a named child node of the current node.
         * If value is null, removes the child node.
         * @param name The node name.
         * @param value The value to set, can be DataNode, object, property, or
         * null.
         */
        setChildNode(name: string, value: GlobalObject|null): GlobalObject|null;
        /**
         * Setthe name of the node relative to the parent node
         * @param dataName The name of the node.
         */
        setDataName(dataName: string): any;
        /**
         * Sets the root JS object
         * @param root The root JS object. Can be null.
         */
        setRoot(root: GlobalObject|null): void;
    }
}
declare module 'goog:goog.ds.JsDataSource' {
    import alias = ಠ_ಠ.clutz.goog.ds.JsDataSource;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds {
    /**
     * Data source for JavaScript properties that arent objects. Contains
     * reference to parent object so that you can set the vaule
     */
    class JsPropertyDataSource extends JsPropertyDataSource_Instance {}
    class JsPropertyDataSource_Instance extends
        ಠ_ಠ.clutz.goog.ds.BaseDataNode_Instance {
        /**
         * Data source for JavaScript properties that arent objects. Contains
         * reference to parent object so that you can set the vaule
         * @param parent Parent object.
         * @param dataName Name of this property.
         * @param opt_parentDataNode The parent data node. If omitted, assumes
         * that the parent object is the parent data node.
         */
        constructor(
            parent: ಠ_ಠ.clutz.goog.ds.DataNode|null, dataName: string,
            opt_parentDataNode?: ಠ_ಠ.clutz.goog.ds.DataNode|null);
        dataName_: string;
        parentDataNode_: ಠ_ಠ.clutz.goog.ds.DataNode|null;
        parent_: ಠ_ಠ.clutz.goog.ds.DataNode|null;
        /**
         * Get the value of the node
         */
        get(): GlobalObject|null;
        /**
         * Get the name of the node relative to the parent node
         */
        getDataName(): string;
        getParent(): ಠ_ಠ.clutz.goog.ds.DataNode|null;
        /**
         * Set the value of the node
         * @param value The new value of the node.
         */
        set(value: GlobalObject|null): any;
    }
}
declare module 'goog:goog.ds.JsPropertyDataSource' {
    import alias = ಠ_ಠ.clutz.goog.ds.JsPropertyDataSource;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds {
    /**
     * Similar to JsonDataSource, with using XMLHttpRequest for transport
     * Currently requires the result be a valid JSON.
     */
    class JsXmlHttpDataSource extends JsXmlHttpDataSource_Instance {}
    class JsXmlHttpDataSource_Instance extends
        ಠ_ಠ.clutz.goog.ds.FastDataNode_Instance {
        /**
         * Similar to JsonDataSource, with using XMLHttpRequest for transport
         * Currently requires the result be a valid JSON.
         * @param uri URI for the request.
         * @param name Name of the datasource.
         * @param opt_startText Text to expect/strip before JS response.
         * @param opt_endText Text to expect/strip after JS response.
         * @param opt_usePost If true, use POST. Defaults to false (GET).
         */
        constructor(
            uri: string|ಠ_ಠ.clutz.goog.Uri|null, name: string,
            opt_startText?: string, opt_endText?: string,
            opt_usePost?: boolean);
        uri_: ಠ_ಠ.clutz.goog.Uri|null;
        usePost_: boolean;
        xhr_: ಠ_ಠ.clutz.goog.net.XhrIo;
        /**
         * Gets the state of the backing data for this node
         */
        getLoadState(): ಠ_ಠ.clutz.goog.ds.LoadState;
        /**
         * Load or reload the backing data for this node.
         * Fires the JsonDataSource
         */
        load(): void;
        /**
         * Sets the request data. This can be used if it is required to
         * send a specific body rather than build the body from the query
         * parameters. Only used in POST requests.
         * @param data The data to send in the request body.
         */
        setQueryData(data: string): void;
    }
}
declare module 'goog:goog.ds.JsXmlHttpDataSource' {
    import alias = ಠ_ಠ.clutz.goog.ds.JsXmlHttpDataSource;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds {
    /**
     * Data source whose backing is a JSON-like service, in which
     * retreiving the resource specified by URL with the additional parameter
     * callback. The resource retreived is executable JavaScript that
     * makes a call to the named function with a JavaScript object literal
     * as the only parameter.
     *
     * Example URI could be:
     * http://www.google.com/data/search?q=monkey&callback=mycb
     * which might return the JS:
     * mycb({searchresults:
     * [{uri: 'http://www.monkey.com', title: 'Site About Monkeys'}]});
     *
     * TODO(user): Evaluate using goog.net.Jsonp here.
     *
     * A URI of an empty string will mean that no request is made
     * and the data source will be a data source with no child nodes
     */
    class JsonDataSource extends JsonDataSource_Instance {}
    class JsonDataSource_Instance extends
        ಠ_ಠ.clutz.goog.ds.JsDataSource_Instance {
        /**
         * Data source whose backing is a JSON-like service, in which
         * retreiving the resource specified by URL with the additional
         * parameter callback. The resource retreived is executable JavaScript
         * that makes a call to the named function with a JavaScript object
         * literal as the only parameter.
         *
         * Example URI could be:
         * http://www.google.com/data/search?q=monkey&callback=mycb
         * which might return the JS:
         * mycb({searchresults:
         * [{uri: 'http://www.monkey.com', title: 'Site About Monkeys'}]});
         *
         * TODO(user): Evaluate using goog.net.Jsonp here.
         *
         * A URI of an empty string will mean that no request is made
         * and the data source will be a data source with no child nodes
         * @param uri URI for the request.
         * @param name Name of the datasource.
         * @param opt_callbackParamName The parameter name that is used to
         * specify the callback. Defaults to 'callback'.
         */
        constructor(
            uri: string|ಠ_ಠ.clutz.goog.Uri|null, name: string,
            opt_callbackParamName?: string);
        loadState_: ಠ_ಠ.clutz.goog.ds.LoadState;
        root_: any;
        uri_: ಠ_ಠ.clutz.goog.Uri|null;
        /**
         * Gets the state of the backing data for this node
         */
        getLoadState(): ಠ_ಠ.clutz.goog.ds.LoadState;
        /**
         * Load or reload the backing data for this node.
         * Fires the JsonDataSource
         */
        load(): void;
        /**
         * Receives data from a Json request
         * @param obj The JSON data.
         */
        receiveData(obj: GlobalObject|null): void;
    }
}
declare module 'goog:goog.ds.JsonDataSource' {
    import alias = ಠ_ಠ.clutz.goog.ds.JsonDataSource;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds {
    /**
     * Enum for load state of a DataNode.
     */
    type LoadState = string&{clutzEnumBrand: never};
    var LoadState: {
        FAILED: LoadState,
        LOADED: LoadState,
        LOADING: LoadState,
        NOT_LOADED: LoadState,
    };
}
declare module 'goog:goog.ds.LoadState' {
    import alias = ಠ_ಠ.clutz.goog.ds.LoadState;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds {
    /**
     * Creates a new data node wrapping a primitive value.
     */
    class PrimitiveFastDataNode extends PrimitiveFastDataNode_Instance {}
    class PrimitiveFastDataNode_Instance extends
        ಠ_ಠ.clutz.goog.ds.AbstractFastDataNode_Instance {
        /**
         * Creates a new data node wrapping a primitive value.
         * @param value Value the value to wrap.
         * @param dataName name Name of this data node.
         * @param opt_parent Parent of this data node.
         */
        constructor(
            value: number|boolean|string, dataName: string,
            opt_parent?: ಠ_ಠ.clutz.goog.ds.DataNode|null);
        value_?: number|boolean|string|null;
        /**
         * Returns the value of this data node.
         */
        get(a?: string): boolean|number|string;
        /**
         * Get a child node by name. Always returns null.
         * @param name Name of child node.
         */
        getChildNode(name: string, a?: boolean): ಠ_ಠ.clutz.goog.ds.DataNode
            |null;
        /**
         * Returns the value of a child node. Always returns null.
         * @param name Name of child node.
         */
        getChildNodeValue(name: string): GlobalObject|null;
        /**
         * Returns child nodes of this data node. Always returns an
         * unmodifiable, empty list.
         */
        getChildNodes(a?: string): ಠ_ಠ.clutz.goog.ds.DataNodeList;
        /**
         * Returns a javascript object representation of this data node. You
         * should not modify the object returned by this function.
         */
        getJsObject(): any;
        /**
         * Returns whether this data node is a list. Always returns false for
         * instances of PrimitiveFastDataNode.
         */
        isList(): boolean;
        /**
         * Sets this data node to a new value.
         * @param value Value to set data node to.
         */
        set(value: any): any;
        /**
         * Not supported by primitive data nodes.
         * @param name Name of child node.
         * @param value Value of child node.
         */
        setChildNode(name: string, value: GlobalObject|null): GlobalObject|null;
    }
}
declare module 'goog:goog.ds.PrimitiveFastDataNode' {
    import alias = ಠ_ಠ.clutz.goog.ds.PrimitiveFastDataNode;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds {
    /**
     * Node list implementation which maintains sort order during insertion and
     * modification operations based on a comparison function.
     *
     * The SortedNodeList does not guarantee sort order will be maintained if
     * the underlying data nodes are modified externally.
     *
     * Names that are reserved for system use and shouldn't be used for data
     * node names: eval, toSource, toString, unwatch, valueOf, watch. Behavior
     * is undefined if these names are used.
     */
    class SortedNodeList extends SortedNodeList_Instance {}
    class SortedNodeList_Instance extends
        ಠ_ಠ.clutz.goog.ds.BasicNodeList_Instance {
        /**
         * Node list implementation which maintains sort order during insertion
         * and modification operations based on a comparison function.
         *
         * The SortedNodeList does not guarantee sort order will be maintained
         * if the underlying data nodes are modified externally.
         *
         * Names that are reserved for system use and shouldn't be used for data
         * node names: eval, toSource, toString, unwatch, valueOf, watch.
         * Behavior is undefined if these names are used.
         * @param compareFn Comparison function by which the node list is
         * sorted. Should take 2 arguments to compare, and return a negative
         * integer, zero, or a positive integer depending on whether the first
         * argument is less than, equal to, or greater than the second.
         * @param opt_nodes optional nodes to add to list; these are assumed to
         * be in sorted order.
         */
        constructor(
            compareFn: (...a: any[]) => any,
            opt_nodes?: (ಠ_ಠ.clutz.goog.ds.DataNode|null)[]|null);
        compareFn_(...a: any[]): any;
        /**
         * Add a node to the node list, maintaining sort order.
         * If the node has a dataName, uses this for the key in the map.
         * @param node The node to add.
         */
        add(node: ಠ_ಠ.clutz.goog.ds.DataNode|null): any;
        /**
         * Adds the given node to the end of the SortedNodeList. This should
         * only be used when the caller can guarantee that the sort order will
         * be maintained according to this SortedNodeList's compareFn (e.g.
         * when initializing a new SortedNodeList from a list of nodes that has
         * already been sorted).
         * @param node The node to append.
         */
        append(node: ಠ_ಠ.clutz.goog.ds.DataNode|null): void;
        /**
         * Sets a node in the list of a given name, maintaining sort order.
         * @param name Name of the node.
         * @param node The node.
         */
        setNode(name: string, node: ಠ_ಠ.clutz.goog.ds.DataNode|null): any;
    }
}
declare module 'goog:goog.ds.SortedNodeList' {
    import alias = ಠ_ಠ.clutz.goog.ds.SortedNodeList;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds.Util {
    /**
     * Create a data node that references another data node,
     * useful for pointer-like functionality.
     * All functions will return same values as the original node except for
     * getDataName()
     * @param node The original node.
     * @param name The new name.
     */
    function makeReferenceNode(node: ಠ_ಠ.clutz.goog.ds.DataNode, name: string):
        ಠ_ಠ.clutz.goog.ds.DataNode;
}
declare module 'goog:goog.ds.Util' {
    import alias = ಠ_ಠ.clutz.goog.ds.Util;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds {
    /**
     * Data source whose backing is an xml node
     */
    class XmlDataSource extends XmlDataSource_Instance {}
    class XmlDataSource_Instance extends ಠ_ಠ.clutz.goog.ds.DataNode_Instance {
        /**
         * Data source whose backing is an xml node
         * @param node The XML node. Can be null.
         * @param parent Parent of XML element. Can be null.
         * @param opt_name The name of this node relative to the parent node.
         */
        constructor(
            node: Node|null, parent: ಠ_ಠ.clutz.goog.ds.XmlDataSource|null,
            opt_name?: string);
        dataName_: any;
        parent_: ಠ_ಠ.clutz.goog.ds.XmlDataSource|null;
        /**
         * Get the value of the node
         */
        get(...a: any[]): GlobalObject|null;
        /**
         * Gets a named child node of the current node
         * @param name The node name.
         */
        getChildNode(name: string, a?: boolean): ಠ_ಠ.clutz.goog.ds.DataNode
            |null;
        /**
         * Gets the value of a child node
         * @param name The node name.
         */
        getChildNodeValue(name: string): any;
        getChildNodes(opt_selector?: string): ಠ_ಠ.clutz.goog.ds.DataNodeList;
        /**
         * Get the name of the node relative to the parent node
         */
        getDataName(): string;
        /**
         * Gets the a qualified data path to this node
         */
        getDataPath(): string;
        /**
         * Gets the state of the backing data for this node
         */
        getLoadState(): ಠ_ಠ.clutz.goog.ds.LoadState;
        /**
         * Load or reload the backing data for this node
         */
        load(): void;
        /**
         * Set the value of the node
         * @param value The new value of the node.
         */
        set(value: any): any;
        /**
         * Setthe name of the node relative to the parent node
         * @param name The name of the node.
         */
        setDataName(name: string): any;
    }
}
declare module 'goog:goog.ds.XmlDataSource' {
    import alias = ಠ_ಠ.clutz.goog.ds.XmlDataSource;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds {
    /**
     * Data source whose backing is an XMLHttpRequest,
     *
     * A URI of an empty string will mean that no request is made
     * and the data source will be a single, empty node.
     */
    class XmlHttpDataSource extends XmlHttpDataSource_Instance {}
    class XmlHttpDataSource_Instance extends
        ಠ_ಠ.clutz.goog.ds.XmlDataSource_Instance {
        /**
         * Data source whose backing is an XMLHttpRequest,
         *
         * A URI of an empty string will mean that no request is made
         * and the data source will be a single, empty node.
         * @param uri URL of the XMLHttpRequest.
         * @param name Name of the datasource. implements
         * goog.ds.XmlHttpDataSource.
         */
        constructor(uri: string|ಠ_ಠ.clutz.goog.Uri|null, name: string);
        loadState_: ಠ_ಠ.clutz.goog.ds.LoadState;
        uri_: ಠ_ಠ.clutz.goog.Uri|null;
        /**
         * Gets the state of the backing data for this node
         */
        getLoadState(): ಠ_ಠ.clutz.goog.ds.LoadState;
        /**
         * Load or reload the backing data for this node.
         * Fires the XMLHttpRequest
         */
        load(): void;
    }
}
declare module 'goog:goog.ds.XmlHttpDataSource' {
    import alias = ಠ_ಠ.clutz.goog.ds.XmlHttpDataSource;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ds {
    /**
     * Shared logger instance for data package
     */
    var logger: ಠ_ಠ.clutz.goog.debug.Logger|null;
}
declare module 'goog:goog.ds.logger' {
    import alias = ಠ_ಠ.clutz.goog.ds.logger;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.BrowserFeature {
    var ADDS_NBSPS_IN_REMOVE_FORMAT: boolean;
    var CAN_LISTIFY_BR: boolean;
    var CAN_SELECT_EMPTY_ELEMENT: boolean;
    var CARET_INSIDE_SELECTION: boolean;
    var CLEARS_SELECTION_WHEN_FOCUS_LEAVES: boolean;
    var COLLAPSES_EMPTY_NODES: boolean;
    var COLLAPSES_SELECTION_ONMOUSEDOWN: boolean;
    var CONVERT_TO_B_AND_I_TAGS: boolean;
    var CREATES_MULTIPLE_BLOCKQUOTES: boolean;
    var DOESNT_OVERRIDE_FONT_SIZE_IN_STYLE_ATTR: boolean;
    var EATS_EMPTY_BACKGROUND_COLOR: boolean;
    var FOCUSES_EDITABLE_BODY_ON_HTML_CLICK: boolean;
    var FOLLOWS_EDITABLE_LINKS: boolean;
    var FORGETS_FORMATTING_WHEN_LISTIFYING: boolean;
    var FORMAT_BLOCK_WORKS_FOR_BLOCKQUOTES: boolean;
    var GETS_STUCK_IN_LINKS: boolean;
    var HAS_ACTIVE_ELEMENT: boolean;
    var HAS_CONTENT_EDITABLE: boolean;
    var HAS_DOCUMENT_INDEPENDENT_NODES: boolean;
    var HAS_DOM_SUBTREE_MODIFIED_EVENT: boolean;
    var HAS_IE_RANGES: boolean;
    var HAS_SET_CAPTURE: boolean;
    var HAS_STYLE_WITH_CSS: boolean;
    var HAS_UNSELECTABLE_STYLE: boolean;
    var HAS_W3C_RANGES: boolean;
    var LEAVES_P_WHEN_REMOVING_LISTS: boolean;
    var MOVES_STYLE_TO_HEAD: boolean;
    var NEEDS_99_WIDTH_IN_STANDARDS_MODE: boolean;
    var NESTS_SUBSCRIPT_SUPERSCRIPT: boolean;
    var NORMALIZE_CORRUPTS_ALL_TEXT_NODES: boolean;
    var NORMALIZE_CORRUPTS_EMPTY_TEXT_NODES: boolean;
    var PREFERS_READY_STATE_CHANGE_EVENT: boolean;
    var PUTS_CURSOR_BEFORE_FIRST_BLOCK_ELEMENT_ON_FOCUS: boolean;
    var SELECTS_IMAGES_ON_CLICK: boolean;
    var SHOWS_CUSTOM_ATTRS_IN_INNER_HTML: boolean;
    var SUPPORTS_FILE_PASTING: boolean;
    var SUPPORTS_FOCUSIN: boolean;
    var SUPPORTS_HTML5_FILE_DRAGGING: boolean;
    var SUPPORTS_OPERA_DEFAULTBLOCK_COMMAND: boolean;
    var TABS_THROUGH_IMAGES: boolean;
    var TAB_FIRES_KEYPRESS: boolean;
    var UNESCAPES_URLS_WITHOUT_ASKING: boolean;
    var USES_KEYDOWN: boolean;
    var USE_DOCUMENT_FOR_KEY_EVENTS: boolean;
    var USE_MUTATION_EVENTS: boolean;
    var WRAPS_BLOCKQUOTE_IN_DIVS: boolean;
}
declare module 'goog:goog.editor.BrowserFeature' {
    import alias = ಠ_ಠ.clutz.goog.editor.BrowserFeature;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor {
    /**
     * Initialize the wrapper, and begin listening to mouse events immediately.
     */
    class ClickToEditWrapper extends ClickToEditWrapper_Instance {}
    class ClickToEditWrapper_Instance extends
        ಠ_ಠ.clutz.goog.Disposable_Instance {
        /**
         * Initialize the wrapper, and begin listening to mouse events
         * immediately.
         * @param fieldObj The editable field being wrapped.
         */
        constructor(fieldObj: ಠ_ಠ.clutz.goog.editor.Field|null);
        disposeInternal(): void;
        /**
         * Initialize listeners when the uneditable field is added to the
         * document. Also sets up lorem ipsum text.
         */
        enterDocument(): void;
        /**
         * Destroy listeners when the field is removed from the document.
         */
        exitDocument(): void;
        /**
         * Focus on the field object.
         * @param field The field to focus.
         */
        focusOnFieldObj(field: ಠ_ಠ.clutz.goog.editor.Field|null): void;
        /**
         * Returns the uneditable field element if the field is not yet editable
         * (equivalent to EditableField.getOriginalElement()), and the editable
         * DOM element if the field is currently editable (equivalent to
         * EditableField.getElement()).
         */
        getElement(): GlobalElement|null;
        getFieldObject(): ಠ_ಠ.clutz.goog.editor.Field|null;
        getOriginalDomHelper(): ಠ_ಠ.clutz.goog.dom.DomHelper|null;
        /**
         * Make the field object editable.
         * @param field The field to make editable.
         */
        makeFieldEditable(field: ಠ_ಠ.clutz.goog.editor.Field|null): void;
    }
}
declare module 'goog:goog.editor.ClickToEditWrapper' {
    import alias = ಠ_ಠ.clutz.goog.editor.ClickToEditWrapper;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor {
    /**
     * Commands that the editor can excute via execCommand or queryCommandValue.
     */
    type Command = string&{clutzEnumBrand: never};
    var Command: {
        BACKGROUND_COLOR: Command,
        BLOCKQUOTE: Command,
        BOLD: Command,
        CLEAR_LOREM: Command,
        DEFAULT_TAG: Command,
        DIR_LTR: Command,
        DIR_RTL: Command,
        EDIT_HTML: Command,
        EMOTICON: Command,
        EQUATION: Command,
        FONT_COLOR: Command,
        FONT_FACE: Command,
        FONT_SIZE: Command,
        FORMAT_BLOCK: Command,
        HORIZONTAL_RULE: Command,
        IMAGE: Command,
        INDENT: Command,
        ITALIC: Command,
        JUSTIFY_CENTER: Command,
        JUSTIFY_FULL: Command,
        JUSTIFY_LEFT: Command,
        JUSTIFY_RIGHT: Command,
        LINK: Command,
        MODAL_LINK_EDITOR: Command,
        ORDERED_LIST: Command,
        OUTDENT: Command,
        REDO: Command,
        REMOVE_FORMAT: Command,
        STRIKE_THROUGH: Command,
        SUBSCRIPT: Command,
        SUPERSCRIPT: Command,
        TABLE: Command,
        UNDERLINE: Command,
        UNDO: Command,
        UNORDERED_LIST: Command,
        UPDATE_LINK_BUBBLE: Command,
        UPDATE_LOREM: Command,
        USING_LOREM: Command,
    };
}
declare module 'goog:goog.editor.Command' {
    import alias = ಠ_ಠ.clutz.goog.editor.Command;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor {
    /**
     * This class encapsulates an editable field that is just a contentEditable
     * div.
     *
     * To see events fired by this object, please see the base class.
     */
    class ContentEditableField extends ContentEditableField_Instance {}
    class ContentEditableField_Instance extends
        ಠ_ಠ.clutz.goog.editor.Field_Instance {
        /**
         * This class encapsulates an editable field that is just a
         * contentEditable div.
         *
         * To see events fired by this object, please see the base class.
         * @param id An identifer for the field. This is used to find the field
         * and the element associated with this field.
         * @param opt_doc The document that the element with the given id can be
         * found in.
         */
        constructor(id: string, opt_doc?: Document|null);
        installStyles(): void;
        makeEditableInternal(opt_iframeSrc?:
                                 ಠ_ಠ.clutz.goog.html.TrustedResourceUrl): void;
        usesIframe(): boolean;
    }
}
declare module 'goog:goog.editor.ContentEditableField' {
    import alias = ಠ_ಠ.clutz.goog.editor.ContentEditableField;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor {
    /**
     * This class encapsulates an editable field.
     *
     * event: load Fires when the field is loaded
     * event: unload Fires when the field is unloaded (made not editable)
     *
     * event: beforechange Fires before the content of the field might change
     *
     * event: delayedchange Fires a short time after field has changed. If
     * multiple change events happen really close to each other only the last
     * one will trigger the delayedchange event.
     *
     * event: beforefocus Fires before the field becomes active
     * event: focus Fires when the field becomes active. Fires after the blur
     * event event: blur Fires when the field becomes inactive
     *
     * TODO: figure out if blur or beforefocus fires first in IE and make FF
     * match
     */
    class Field extends Field_Instance {
        /**
         * Number of milliseconds after a change when the change event should be
         * fired.
         */
        static CHANGE_FREQUENCY: number;
        /**
         * Number of milliseconds between delayed change events.
         */
        static DELAYED_CHANGE_FREQUENCY: number;
        /**
         * List of mutation events in Gecko browsers.
         */
        static MUTATION_EVENTS_GECKO: string[]|null;
        /**
         * Keycodes that result in a selectionchange event (e.g. the cursor
         * moving).
         */
        static SELECTION_CHANGE_KEYCODES: {[key: number]: number};
        static getActiveFieldId(): string|null;
        /**
         * Sets the active field id.
         * @param fieldId The active field id.
         */
        static setActiveFieldId(fieldId: string|null): void;
    }
    class Field_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * This class encapsulates an editable field.
         *
         * event: load Fires when the field is loaded
         * event: unload Fires when the field is unloaded (made not editable)
         *
         * event: beforechange Fires before the content of the field might
         * change
         *
         * event: delayedchange Fires a short time after field has changed. If
         * multiple change events happen really close to each other only the
         * last one will trigger the delayedchange event.
         *
         * event: beforefocus Fires before the field becomes active
         * event: focus Fires when the field becomes active. Fires after the
         * blur event event: blur Fires when the field becomes inactive
         *
         * TODO: figure out if blur or beforefocus fires first in IE and make FF
         * match
         * @param id An identifer for the field. This is used to find the field
         * and the element associated with this field.
         * @param opt_doc The document that the element with the given id can be
         * found in.  If not provided, the default document is used.
         */
        constructor(id: string, opt_doc?: Document|null);
        /**
         * Additional styles to install for the editable field.
         */
        cssStyles: ಠ_ಠ.clutz.goog.html.SafeStyleSheet;
        /**
         * Dom helper for the editable node.
         */
        editableDomHelper: ಠ_ಠ.clutz.goog.dom.DomHelper|null;
        eventRegister:
            ಠ_ಠ.clutz.goog.events.EventHandler<ಠ_ಠ.clutz.goog.editor.Field>|
            null;
        /**
         * The id for this editable field, which must match the id of the
         * element associated with this field.
         */
        id: string;
        /**
         * The dom helper for the node to be made editable.
         */
        originalDomHelper: ಠ_ಠ.clutz.goog.dom.DomHelper|null;
        /**
         * The original node that is being made editable, or null if it has
         * not yet been found.
         */
        originalElement: GlobalElement|null;
        /**
         * Registers a keyboard event listener on the field.  This is necessary
         * for Gecko since the fields are contained in an iFrame and there is no
         * way to auto-propagate key events up to the main window.
         * @param type Event type to listen for or array of event types, for
         * example goog.events.EventType.KEYDOWN.
         * @param listener Function to be used as the listener.
         * @param opt_capture Whether to use capture phase (optional, defaults
         * to false).
         * @param opt_handler Object in whose scope to call the listener.
         */
        addListener(
            type: string|string[]|null, listener: (...a: any[]) => any,
            opt_capture?: boolean, opt_handler?: GlobalObject|null): void;
        /**
         * Given the original field element, and the iframe that is destined to
         * become the editable field, styles them appropriately and add the
         * iframe to the dom.
         * @param iframe The iframe element.
         */
        attachIframe(iframe: HTMLIFrameElement|null): void;
        /**
         * Attach an wrapper to this field, to be thrown out when the field
         * is disposed.
         * @param wrapper The wrapper to attach.
         */
        attachWrapper(wrapper: ಠ_ಠ.clutz.goog.Disposable|null): void;
        /**
         * Don't wait for the timer and just fire the delayed change event if
         * it's pending.
         */
        clearDelayedChange(): void;
        /**
         * Stops all listeners and timers.
         */
        clearListeners(): void;
        /**
         * Block an event for a short amount of time. Intended
         * for the situation where an event pair fires in quick succession
         * (e.g., mousedown/mouseup, keydown/keyup, focus/blur),
         * and we want the second event in the pair to get "debounced."
         *
         * WARNING: This should never be used to solve race conditions or for
         * mission-critical actions. It should only be used for UI improvements,
         * where it's okay if the behavior is non-deterministic.
         * @param eventType type of event to debounce.
         */
        debounceEvent(eventType: ಠ_ಠ.clutz.goog.editor.Field.EventType): void;
        /**
         * This dispatches the beforechange event on the editable field
         */
        dispatchBeforeChange(): void;
        /**
         * Dispatches a blur event.
         */
        dispatchBlur(): void;
        /**
         * Dispatches the appropriate set of change events. This only fires
         * synchronous change events in blended-mode, iframe-using mozilla. It
         * just starts the appropriate timer for
         * goog.editor.Field.EventType.DELAYEDCHANGE. This also starts up change
         * events again if they were stopped.
         * @param opt_noDelay True if goog.editor.Field.EventType.DELAYEDCHANGE
         * should be fired syncronously.
         */
        dispatchChange(opt_noDelay?: boolean): void;
        /**
         * Dispatches a command value change event.
         * @param opt_commands Commands whose state has changed.
         */
        dispatchCommandValueChange(opt_commands?: string[]|null): void;
        /**
         * Dispatch a selection change event, optionally caused by the given
         * browser event or selecting the given target.
         * @param opt_e Optional browser event causing this event.
         * @param opt_target The node the selection changed to.
         */
        dispatchSelectionChangeEvent(
            opt_e?: ಠ_ಠ.clutz.goog.events.BrowserEvent|null,
            opt_target?: Node|null): void;
        disposeInternal(): void;
        /**
         * Executes an editing command as per the registered plugins.
         * @param command The command to execute.
         * @param var_args Any additional parameters needed to execute the
         * command.
         */
        execCommand(command: string, ...var_args: any[]): any;
        /**
         * The editable dom node.
         */
        field: GlobalElement|null;
        /**
         * Gives the field focus.
         */
        focus(): void;
        /**
         * Gives the field focus and places the cursor at the start of the
         * field.
         */
        focusAndPlaceCursorAtStart(): void;
        /**
         * Returns the "application" window, where dialogs and bubbles
         * should be rendered.
         */
        getAppWindow(): Window;
        /**
         * Returns the zindex of the base level of the field.
         */
        getBaseZindex(): number;
        /**
         * Retrieve the HTML contents of a field.
         *
         * Do NOT just get the innerHTML of a field directly--there's a lot of
         * processing that needs to happen.
         */
        getCleanContents(): string;
        getEditableDomHelper(): ಠ_ಠ.clutz.goog.dom.DomHelper|null;
        getEditableIframe(): HTMLIFrameElement|null;
        /**
         * Returns the editable DOM element or null if this field
         * is not editable.
         * <p>On IE or Safari this is the element with contentEditable=true
         * (in whitebox mode, the iFrame body).
         * <p>On Gecko this is the iFrame body
         * TODO(user): How do we word this for subclass version?
         */
        getElement(): GlobalElement|null;
        /**
         * Get the copy of the editable field element, which has the innerHTML
         * set correctly.
         */
        getFieldCopy(): GlobalElement;
        getFieldFormatInfo(extraStyles: GlobalObject|null):
            ಠ_ಠ.clutz.goog.editor.icontent.FieldFormatInfo;
        /**
         * Returns a string usable as a hash code for this field. For field's
         * that were created with an id, the hash code is guaranteed to be the
         * id.
         * TODO(user): I think we can get rid of this.  Seems only used from
         * editor.
         */
        getHashCode(): string;
        getIframeAttributes(): GlobalObject;
        /**
         * Returns prepared contents that can be injected into the editable
         * field.
         * @param contents The contents to prepare.
         * @param styles A map that will be populated with styles that should be
         * applied to the field element together with the contents.
         */
        getInjectableContents(contents: string|null, styles: GlobalObject|null):
            string;
        /**
         * Returns original DOM element that is being made editable by Trogedit
         * or null if that element has not yet been found in the appropriate
         * document.
         */
        getOriginalElement(): GlobalElement|null;
        /**
         * Returns the registered plugin with the given classId.
         * @param classId classId of the plugin.
         */
        getPluginByClassId(classId: string): ಠ_ಠ.clutz.goog.editor.Plugin|null;
        getRange(): ಠ_ಠ.clutz.goog.dom.AbstractRange|null;
        /**
         * Handle a change in the Editable Field.  Marks the field has modified,
         * dispatches the change event on the editable field (moz only), starts
         * the timer for the delayed change event.  Note that these actions only
         * occur if the proper events are not stopped.
         */
        handleChange(): void;
        /**
         * Fires a change event only if the attribute change effects the
         * editiable field. We ignore events that are internal browser events
         * (ie scrollbar state change)
         * @param handler The function to call if this is not an internal
         * browser event.
         * @param browserEvent The browser event.
         */
        handleDomAttrChange(
            handler: (...a: any[]) => any,
            browserEvent: ಠ_ಠ.clutz.goog.events.BrowserEvent|null): void;
        /**
         * Handle the loading of the field (e.g. once the field is ready to
         * setup).
         * TODO(user): this should probably just be moved into
         * dispatchLoadEvent_.
         */
        handleFieldLoad(): void;
        /**
         * The function to call when the editable iframe loads.
         * @param iframe Iframe that just loaded.
         * @param innerHtml Html to put inside the body of the iframe.
         * @param styles Property-value map of CSS styles to install on editable
         * field.
         */
        iframeFieldLoadHandler(
            iframe: HTMLIFrameElement|null, innerHtml: string,
            styles: GlobalObject|null): void;
        inModalMode(): boolean;
        /**
         * Prepare the given contents, then inject them into the editable field.
         * @param contents The contents to prepare.
         * @param field The field element.
         */
        injectContents(contents: string|null, field: GlobalElement|null): void;
        /**
         * Installs styles if needed. Only writes styles when they can't be
         * written inline directly into the field.
         */
        installStyles(): void;
        /**
         * Checks if the event of the given type has stopped being dispatched
         * @param eventType type of event to check.
         */
        isEventStopped(eventType: ಠ_ಠ.clutz.goog.editor.Field.EventType):
            boolean;
        isFixedHeight(): boolean;
        isLoaded(): boolean;
        isLoading(): boolean;
        /**
         * Checks the modified state of the field.
         * Note: Changes that take place while the
         * goog.editor.Field.EventType.CHANGE event is stopped do not effect the
         * modified state.
         * @param opt_useIsEverModified Set to true to check if the field has
         * ever been modified since it was created, otherwise checks if the
         * field has been modified since the last
         * goog.editor.Field.EventType.DELAYEDCHANGE event was dispatched.
         */
        isModified(opt_useIsEverModified?: boolean): boolean;
        isSelectionEditable(): boolean;
        isUneditable(): boolean;
        /**
         * Logging object.
         */
        logger: ಠ_ಠ.clutz.goog.debug.Logger|null;
        /**
         * Makes a field editable.
         * @param opt_iframeSrc URL to set the iframe src to if necessary.
         */
        makeEditable(opt_iframeSrc?: ಠ_ಠ.clutz.goog.html.TrustedResourceUrl):
            void;
        /**
         * Handles actually making something editable - creating necessary
         * nodes, injecting content, etc.
         * @param opt_iframeSrc URL to set the iframe src to if necessary.
         */
        makeEditableInternal(opt_iframeSrc?:
                                 ಠ_ಠ.clutz.goog.html.TrustedResourceUrl): void;
        /**
         * Closes the field and cancels all pending change timers.  Note that
         * this means that if a change event has not fired yet, it will not
         * fire.  Clients should check fieldOj.isModified() if they depend on
         * the final change event. Throws an error if the field is already
         * uneditable.
         * @param opt_skipRestore True to prevent copying of editable field
         * contents back into the original node.
         */
        makeUneditable(opt_skipRestore?: boolean): void;
        /**
         * Calls a function to manipulate the dom of this field. This method
         * should be used whenever Trogedit clients need to modify the dom of
         * the field, so that delayed change events are handled appropriately.
         * Extra delayed change events will cause undesired states to be added
         * to the undo-redo stack. This method will always fire at most one
         * delayed change event, depending on the value of
         * {@code opt_preventDelayedChange}.
         * @param func The function to call that will manipulate the dom.
         * @param opt_preventDelayedChange Whether delayed change should be
         * prevented after calling {@code func}. Defaults to always firing
         * delayed change.
         * @param opt_handler Object in whose scope to call the listener.
         */
        manipulateDom(
            func: () => any, opt_preventDelayedChange?: boolean,
            opt_handler?: GlobalObject|null): void;
        /**
         * Place the cursor at the start of this field. It's recommended that
         * you only use this method (and manipulate the selection in general)
         * when there is not an existing selection in the field.
         */
        placeCursorAtEnd(): void;
        /**
         * Place the cursor at the start of this field. It's recommended that
         * you only use this method (and manipulate the selection in general)
         * when there is not an existing selection in the field.
         */
        placeCursorAtStart(): void;
        /**
         * Gets the value of command(s).
         * @param commands String name(s) of the command.
         */
        queryCommandValue(commands: string|string[]|null): any;
        /**
         * Registers the plugin with the editable field.
         * @param plugin The plugin to register.
         */
        registerPlugin(plugin: ಠ_ಠ.clutz.goog.editor.Plugin|null): void;
        /**
         * Removes all wrappers and destroys them.
         */
        removeAllWrappers(): void;
        /**
         * Reset the properties on the original field element to how it was
         * before it was made editable.
         */
        resetOriginalElemProperties(): void;
        /**
         * Restores the dom to how it was before being made editable.
         */
        restoreDom(): void;
        /**
         * Restore a saved range, and set the focus on the field.
         * If no range is specified, we simply set the focus.
         * @param opt_range A previously saved selected range.
         */
        restoreSavedRange(opt_range?: ಠ_ಠ.clutz.goog.dom.SavedRange|null): void;
        /**
         * Sets the application window.
         * @param appWindow The window where dialogs and bubbles should be
         * rendered.
         */
        setAppWindow(appWindow: Window): void;
        /**
         * Sets the zIndex that the field should be based off of.
         * TODO(user): Get rid of this completely.  Here for Sites.
         * Should this be set directly on UI plugins?
         * @param zindex The base zIndex of the editor.
         */
        setBaseZindex(zindex: number): void;
        /**
         * Sets whether activating a hyperlink in this editable field will open
         * a new window or not.
         */
        setFollowLinkInNewWindow(followLinkInNewWindow: boolean): void;
        /**
         * Sets the value that will replace the style attribute of this field's
         * element when the field is made non-editable. This method is called
         * with the current value of the style attribute when the field is made
         * editable.
         * @param cssText The value of the style attribute.
         */
        setInitialStyle(cssText: string): void;
        setModalMode(inModalMode: boolean): void;
        /**
         * Sets the contents of the field.
         * @param addParas Boolean to specify whether to add paragraphs to long
         * fields.
         * @param html html to insert.  If html=null, then this defaults to a
         * nsbp for mozilla and an empty string for IE.
         * @param opt_dontFireDelayedChange True to make this content change not
         * fire a delayed change event.
         * @param opt_applyLorem Whether to apply lorem ipsum styles.
         */
        setSafeHtml(
            addParas: boolean, html: ಠ_ಠ.clutz.goog.html.SafeHtml|null,
            opt_dontFireDelayedChange?: boolean,
            opt_applyLorem?: boolean): void;
        /**
         * Sets flag to control whether to use window mouse up after seeing
         * a mouse down operation on the field.
         * @param flag True to track window mouse up.
         */
        setUseWindowMouseUp(flag: boolean): void;
        /**
         * Sets up the field object and window util of this field, and enables
         * this editable field with all registered plugins. This is essential to
         * the initialization of the field. It must be called when the field
         * becomes fully loaded and editable.
         * @param field The field property.
         */
        setupFieldObject(field: GlobalElement|null): void;
        /**
         * Mutation events tell us when something has changed for mozilla.
         */
        setupMutationEventHandlersGecko(): void;
        /**
         * Returns true if the field needs to be loaded asynchrnously.
         */
        shouldLoadAsynchronously(): boolean;
        shouldRefocusOnInputMobileSafari(): boolean;
        /**
         * Start change events again and fire once if desired.
         * @param opt_fireChange Whether to fire the change event immediately.
         * @param opt_fireDelayedChange Whether to fire the delayed change event
         * immediately.
         */
        startChangeEvents(
            opt_fireChange?: boolean, opt_fireDelayedChange?: boolean): void;
        /**
         * Re-starts the event of the given type being dispatched, if it had
         * previously been stopped with stopEvent().
         * @param eventType type of event to start.
         */
        startEvent(eventType: ಠ_ಠ.clutz.goog.editor.Field.EventType): void;
        /**
         * Temporarily ignore change events. If the time has already been set,
         * it will fire immediately now.  Further setting of the timer is
         * stopped and dispatching of events is stopped until startChangeEvents
         * is called.
         * @param opt_stopChange Whether to ignore base change events.
         * @param opt_stopDelayedChange Whether to ignore delayed change events.
         */
        stopChangeEvents(
            opt_stopChange?: boolean, opt_stopDelayedChange?: boolean): void;
        /**
         * Stops the event of the given type from being dispatched.
         * @param eventType type of event to stop.
         */
        stopEvent(eventType: ಠ_ಠ.clutz.goog.editor.Field.EventType): void;
        /**
         * Attemps to turn on designMode for a document.  This function can fail
         * under certain circumstances related to the load event, and will throw
         * an exception.
         */
        turnOnDesignModeGecko(): void;
        /**
         * Unregisters the plugin with this field.
         * @param plugin The plugin to unregister.
         */
        unregisterPlugin(plugin: ಠ_ಠ.clutz.goog.editor.Plugin|null): void;
        usesIframe(): boolean;
        /**
         * Writes the html content into the iframe.  Handles writing any
         * aditional styling as well.
         * @param iframe Iframe to write contents into.
         * @param innerHtml The html content to write into the iframe.
         * @param extraStyles A map of extra style attributes.
         */
        writeIframeContent(
            iframe: HTMLIFrameElement|null, innerHtml: string,
            extraStyles: GlobalObject|null): void;
    }
}
declare module 'goog:goog.editor.Field' {
    import alias = ಠ_ಠ.clutz.goog.editor.Field;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.Field {
    /**
     * Event types that can be stopped/started.
     */
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        BEFORECHANGE: EventType,
        BEFOREFOCUS: EventType,
        BEFORESELECTIONCHANGE: EventType,
        BEFORETAB: EventType,
        BLUR: EventType,
        CHANGE: EventType,
        COMMAND_VALUE_CHANGE: EventType,
        DELAYEDCHANGE: EventType,
        FOCUS: EventType,
        IFRAME_RESIZED: EventType,
        LOAD: EventType,
        SELECTIONCHANGE: EventType,
        UNLOAD: EventType,
    };
}
declare module 'goog:goog.editor.Field.EventType' {
    import alias = ಠ_ಠ.clutz.goog.editor.Field.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor {
    /**
     * Wrap an editable link.
     */
    class Link extends Link_Instance {
        /**
         * Initialize a new link.
         * @param anchor The anchor element.
         * @param url The initial URL.
         * @param opt_target The target.
         * @param opt_extraAnchors Extra anchors created by the browser when
         * parsing a selection.
         */
        static createNewLink(
            anchor: HTMLAnchorElement|null, url: string, opt_target?: string,
            opt_extraAnchors?: (HTMLAnchorElement|null)[]|
            null): ಠ_ಠ.clutz.goog.editor.Link;
        /**
         * Initialize a new link using text in anchor, or empty string if there
         * is no likely url in the anchor.
         * @param anchor The anchor element with likely url content.
         * @param opt_target The target.
         */
        static createNewLinkFromText(
            anchor: HTMLAnchorElement|null,
            opt_target?: string): ಠ_ಠ.clutz.goog.editor.Link;
        /**
         * Returns true if str could be an email address, false otherwise
         *
         * Ex: goog.editor.Link.isLikelyEmailAddress_("some word") == false
         * goog.editor.Link.isLikelyEmailAddress_("foo@foo.com") == true
         * @param str String to test for being email address.
         */
        static isLikelyEmailAddress(str: string): boolean;
        /**
         * Returns true if str could be a URL, false otherwise
         *
         * Ex: TR_Util.isLikelyUrl_("http://www.google.com") == true
         * TR_Util.isLikelyUrl_("www.google.com") == true
         * @param str String to check if it looks like a URL.
         */
        static isLikelyUrl(str: string): boolean;
        /**
         * Determines whether or not a url is an email link.
         * @param url A url.
         */
        static isMailto(url: string): boolean;
    }
    class Link_Instance {
        private noStructuralTyping_: any;
        /**
         * Wrap an editable link.
         * @param anchor The anchor element.
         * @param isNew Whether this is a new link.
         */
        constructor(anchor: HTMLAnchorElement|null, isNew: boolean);
        /**
         * After link creation, finish creating the link depending on the type
         * of link being created.
         * @param field The field where this link is being created.
         */
        finishLinkCreation(field: ಠ_ಠ.clutz.goog.editor.Field|null): void;
        getAnchor(): HTMLAnchorElement|null;
        getCurrentText(): string;
        getExtraAnchors(): (HTMLAnchorElement|null)[];
        getValidLinkFromText(): string|null;
        /**
         * Set the url without affecting the isNew() status of the link.
         * @param url A URL.
         */
        initializeUrl(url: string): void;
        isNew(): boolean;
        /**
         * Places the cursor to the right of the anchor.
         * Note that this is different from goog.editor.range's
         * placeCursorNextTo in that it specifically handles the placement of a
         * cursor in browsers that trap you in links, by adding a space when
         * necessary and placing the cursor after that space.
         */
        placeCursorRightOf(): void;
        /**
         * Removes the link, leaving its contents in the document.  Note that
         * this object will no longer be usable/useful after this call.
         */
        removeLink(): void;
        /**
         * Change the link.
         * @param newText New text for the link. If the link contains all its
         * text in one descendent, newText will only replace the text in that
         * one node. Otherwise, we'll change the innerHTML of the whole link to
         * newText.
         * @param newUrl A new URL.
         */
        setTextAndUrl(newText: string, newUrl: string): void;
    }
}
declare module 'goog:goog.editor.Link' {
    import alias = ಠ_ಠ.clutz.goog.editor.Link;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor {
    /**
     * Abstract API for trogedit plugins.
     */
    class Plugin extends Plugin_Instance {
        /**
         * A set of op codes that run even on disabled plugins.
         */
        static IRREPRESSIBLE_OPS: GlobalObject;
        /**
         * A map from plugin operations to the names of the methods that
         * invoke those operations.
         */
        static OPCODE: GlobalObject;
    }
    class Plugin_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * The field object this plugin is attached to.
         */
        fieldObject: ಠ_ಠ.clutz.goog.editor.Field|null;
        /**
         * The logger for this plugin.
         */
        logger: ಠ_ಠ.clutz.goog.debug.Logger|null;
        activeOnUneditableFields(): boolean;
        /**
         * Cleans the contents of the node passed to it. The node contents are
         * modified directly, and the modifications will subsequently be used,
         * for operations such as saving the innerHTML of the editor etc. Since
         * the plugins act on the DOM directly, this method can be very
         * expensive.
         *
         * This op is invoked even on disabled plugins.
         * @param fieldCopy The copy of the editable field which needs to be
         * cleaned up.
         */
        cleanContentsDom(a: GlobalElement): any;
        /**
         * Cleans the html contents of Trogedit. Both cleanContentsDom and
         * and cleanContentsHtml will be called on contents extracted from
         * Trogedit. The inverse of prepareContentsHtml.
         *
         * This op is invoked even on disabled plugins.
         * @param originalHtml The trogedit HTML.
         */
        cleanContentsHtml(a: string): string;
        /**
         * Disables this plugin for the specified, registered field object.
         * @param fieldObject The field object.
         */
        disable(fieldObject: ಠ_ಠ.clutz.goog.editor.Field|null): void;
        disposeInternal(): void;
        /**
         * Enables this plugin for the specified, registered field object. A
         * field object should only be enabled when it is loaded.
         * @param fieldObject The field object.
         */
        enable(fieldObject: ಠ_ಠ.clutz.goog.editor.Field|null): void;
        /**
         * Handles execCommand. This default implementation handles dispatching
         * BEFORECHANGE, CHANGE, and SELECTIONCHANGE events, and calls
         * execCommandInternal to perform the actual command. Plugins that want
         * to do their own event dispatching should override execCommand,
         * otherwise it is preferred to only override execCommandInternal.
         *
         * This version of execCommand will only work for single field plugins.
         * Multi-field plugins must override execCommand.
         * @param command The command to execute.
         * @param var_args Any additional parameters needed to execute the
         * command.
         */
        execCommand(command: string, ...var_args: any[]): any;
        /**
         * Handles execCommand. This default implementation does nothing, and is
         * called by execCommand, which handles event dispatching. This method
         * should be overriden by plugins that don't need to do their own event
         * dispatching. If custom event dispatching is needed, execCommand shoul
         * be overriden instead.
         * @param command The command to execute.
         * @param var_args Any additional parameters needed to execute the
         * command.
         */
        execCommandInternal(a: string, ...b: any[]): any;
        getFieldDomHelper(): ಠ_ಠ.clutz.goog.dom.DomHelper|null;
        /**
         * Sets the field object for use with this plugin.
         */
        getFieldObject(): ಠ_ಠ.clutz.goog.editor.Field|null;
        getTrogClassId(): string;
        /**
         * Handles keydown. It is run before handleKeyboardShortcut and if it
         * returns true handleKeyboardShortcut will not be called.
         * @param e The browser event.
         */
        handleKeyDown(a: ಠ_ಠ.clutz.goog.events.BrowserEvent): boolean;
        /**
         * Handles keypress. It is run before handleKeyboardShortcut and if it
         * returns true handleKeyboardShortcut will not be called.
         * @param e The browser event.
         */
        handleKeyPress(a: ಠ_ಠ.clutz.goog.events.BrowserEvent): boolean;
        /**
         * Handles keyup.
         * @param e The browser event.
         */
        handleKeyUp(a: ಠ_ಠ.clutz.goog.events.BrowserEvent): boolean;
        /**
         * Handles keyboard shortcuts.  Preferred to using handleKey* as it will
         * use the proper event based on browser and will be more performant. If
         * handleKeyPress/handleKeyDown returns true, this will not be called.
         * If the plugin handles the shortcut, it is responsible for dispatching
         * appropriate events (change, selection change at the time of this
         * comment). If the plugin calls execCommand on the editable field, then
         * execCommand already takes care of dispatching events. NOTE: For
         * performance reasons this is only called when any key is pressed in
         * conjunction with ctrl/meta keys OR when a small subset of keys
         * (defined in goog.editor.Field.POTENTIAL_SHORTCUT_KEYCODES_) are
         * pressed without ctrl/meta keys. We specifically don't invoke it when
         * altKey is pressed since alt key is used in many i8n UIs to enter
         * certain characters.
         * @param e The browser event.
         * @param key The key pressed.
         * @param isModifierPressed Whether the ctrl/meta key was pressed or
         * not.
         */
        handleKeyboardShortcut(
            a: ಠ_ಠ.clutz.goog.events.BrowserEvent, b: string,
            c: boolean): boolean;
        /**
         * Handles selection change.
         * @param opt_e The browser event.
         * @param opt_target The node the selection changed to.
         */
        handleSelectionChange(a?: ಠ_ಠ.clutz.goog.events.BrowserEvent, b?: Node):
            boolean;
        isAutoDispose(): boolean;
        /**
         * Returns whether this plugin is enabled for the field object.
         * @param fieldObject The field object.
         */
        isEnabled(fieldObject: ಠ_ಠ.clutz.goog.editor.Field|null): boolean;
        isSilentCommand(a: string): boolean;
        /**
         * Whether the string corresponds to a command this plugin handles.
         * @param command Command string to check.
         */
        isSupportedCommand(command: string): boolean;
        /**
         * Prepares the given HTML for editing. Strips out content that should
         * not appear in an editor, and normalizes content as appropriate. The
         * inverse of cleanContentsHtml.
         *
         * This op is invoked even on disabled plugins.
         * @param originalHtml The original HTML.
         * @param styles A map of strings. If the plugin wants to add any styles
         * to the field element, it should add them as key-value pairs to this
         * object.
         */
        prepareContentsHtml(a: string, b: GlobalObject|null): string;
        /**
         * Gets the state of this command if this plugin serves that command.
         * @param command The command to check.
         */
        queryCommandValue(a: string): any;
        /**
         * Registers the field object for use with this plugin.
         * @param fieldObject The editable field object.
         */
        registerFieldObject(fieldObject: ಠ_ಠ.clutz.goog.editor.Field|
                            null): void;
        /**
         * Saves the field's scroll position.  See b/7279077 for context.
         * Currently only does anything in Edge, since all other browsers
         * already seem to work correctly.
         */
        saveScrollPosition(): () => any;
        /**
         * Set if this plugin should automatically be disposed when the
         * registered field is disposed.
         * @param autoDispose Whether to autoDispose.
         */
        setAutoDispose(autoDispose: boolean): void;
        /**
         * Sets the field object for use with this plugin.
         * @param fieldObject The editable field object.
         */
        setFieldObject(fieldObject: ಠ_ಠ.clutz.goog.editor.Field|null): void;
        /**
         * Unregisters and disables this plugin for the current field object.
         * @param fieldObj The field object. For single-field plugins, this
         * parameter is ignored.
         */
        unregisterFieldObject(fieldObj: ಠ_ಠ.clutz.goog.editor.Field|null): void;
    }
}
declare namespace ಠ_ಠ.clutz.goog.editor.Plugin {
    enum Op {
        CLEAN_CONTENTS_DOM,
        CLEAN_CONTENTS_HTML,
        EXEC_COMMAND,
        KEYDOWN,
        KEYPRESS,
        KEYUP,
        PREPARE_CONTENTS_HTML,
        QUERY_COMMAND,
        SELECTION,
        SHORTCUT,
    }
}
declare module 'goog:goog.editor.Plugin' {
    import alias = ಠ_ಠ.clutz.goog.editor.Plugin;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor {
    /**
     * This class encapsulates an editable field that blends in with the
     * surrounding page.
     * To see events fired by this object, please see the base class.
     */
    class SeamlessField extends SeamlessField_Instance {
        static scrollbarWidth_: number;
    }
    class SeamlessField_Instance extends ಠ_ಠ.clutz.goog.editor.Field_Instance {
        /**
         * This class encapsulates an editable field that blends in with the
         * surrounding page.
         * To see events fired by this object, please see the base class.
         * @param id An identifer for the field. This is used to find the field
         * and the element associated with this field.
         * @param opt_doc The document that the element with the given id can be
         * found it.
         */
        constructor(id: string, opt_doc?: Document|null);
        attachIframe(iframe: HTMLIFrameElement|null): void;
        clearListeners(): void;
        dispatchBlur(): void;
        /**
         * Perform all the sizing immediately.
         */
        doFieldSizingGecko(): void;
        getFieldFormatInfo(extraStyles: GlobalObject|null):
            ಠ_ಠ.clutz.goog.editor.icontent.FieldFormatInfo;
        getIframeAttributes(): GlobalObject;
        /**
         * Gets the css rules that should be used to style an iframe's body as
         * if it were the original element that we made editable.
         * @param opt_forceRegeneration Set to true to not read the cached copy
         * and instead completely regenerate the css rules.
         */
        getIframeableCss(opt_forceRegeneration?: boolean): string;
        handleChange(): void;
        handleFieldLoad(): void;
        installStyles(): void;
        isFixedHeight(): boolean;
        makeEditableInternal(opt_iframeSrc?:
                                 ಠ_ಠ.clutz.goog.html.TrustedResourceUrl): void;
        overrideFixedHeight(newVal: boolean): void;
        restoreDom(): void;
        /**
         * Sets the css rules that should be used inside the editable iframe.
         * Note: to clear the css cache between makeNotEditable/makeEditable,
         * call this with "" as iframeableCss.
         * TODO(user): Unify all these css setting methods + Nick's open
         * CL.  This is getting ridiculous.
         * @param iframeableCss String containing the css rules to use.
         */
        setIframeableCss(iframeableCss: string): void;
        /**
         * Sets the min height of this editable field's iframe. Only used in
         * growing mode when an iframe is used. This will cause an immediate
         * field sizing to update the field if necessary based on the new min
         * height.
         * @param height The min height specified as a number of pixels,
         * e.g., 75.
         */
        setMinHeight(height: number): void;
        setupMutationEventHandlersGecko(): void;
        turnOnDesignModeGecko(): void;
        usesIframe(): boolean;
        writeIframeContent(
            iframe: HTMLIFrameElement|null, innerHtml: string,
            extraStyles: GlobalObject|null): void;
    }
}
declare module 'goog:goog.editor.SeamlessField' {
    import alias = ಠ_ಠ.clutz.goog.editor.SeamlessField;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor {
    /**
     * Class providing high level table editing functions.
     */
    class Table extends Table_Instance {
        /**
         * Default color for table borders.
         */
        static DEFAULT_BORDER_COLOR: string;
        /**
         * Optimum size of empty cells (in pixels), if possible.
         */
        static OPTIMUM_EMPTY_CELL_WIDTH: number;
        /**
         * Maximum width for new tables.
         */
        static OPTIMUM_MAX_NEW_TABLE_WIDTH: number;
        /**
         * Creates a new table element, populated with cells and formatted.
         * @param doc Document in which to create the table element.
         * @param columns Number of columns in the table.
         * @param rows Number of rows in the table.
         * @param opt_tableStyle Object containing borderWidth and borderColor
         * properties, used to set the initial style of the table.
         */
        static createDomTable(
            doc: Document|null, columns: number, rows: number,
            opt_tableStyle?: GlobalObject|null): GlobalElement;
        /**
         * Returns all child elements of a TR element that are of type TD or TH.
         * @param tr TR element in which to find children.
         */
        static getChildCellElements(tr: GlobalElement|null): (GlobalElement|
                                                              null)[];
    }
    class Table_Instance {
        private noStructuralTyping_: any;
        /**
         * Class providing high level table editing functions.
         * @param node Element that is a table or descendant of a table.
         */
        constructor(node: GlobalElement|null);
        dom_: ಠ_ಠ.clutz.goog.dom.DomHelper;
        element: any;
        /**
         * Creates an empty TD element and fill it with some empty content so it
         * will show up with borders even in IE pre-7 or if empty-cells is set
         * to 'hide'
         */
        createEmptyTd(): GlobalElement;
        /**
         * Inserts a cell element at the given position. The colIndex is the
         * logical column index, not the position in the dom. This takes into
         * consideration that cells in a given logical  row may actually be
         * children of a previous DOM row that have used rowSpan to extend into
         * the row.
         * @param td The new cell element to insert.
         * @param rowIndex Row in which to insert the element.
         * @param colIndex Column in which to insert the element.
         */
        insertCellElement(
            td: GlobalElement|null, rowIndex: number, colIndex: number): void;
        /**
         * Inserts a new column in the table. The column will be created by
         * inserting new TD elements in each row, or extending the colspan
         * of existing TD elements.
         * @param opt_colIndex Index at which to insert the column. If this is
         * omitted the column will be appended to the right side of the table.
         */
        insertColumn(opt_colIndex?: number): (GlobalElement|null)[];
        /**
         * Inserts a new row in the table. The row will be populated with new
         * cells, and existing rowspanned cells that overlap the new row will
         * be extended.
         * @param opt_rowIndex Index at which to insert the row. If this is
         * omitted the row will be appended to the end of the table.
         */
        insertRow(opt_rowIndex?: number): GlobalElement;
        /**
         * Merges multiple cells into a single cell, and sets the rowSpan and
         * colSpan attributes of the cell to take up the same space as the
         * original cells.
         * @param startRowIndex Top coordinate of the cells to merge.
         * @param startColIndex Left coordinate of the cells to merge.
         * @param endRowIndex Bottom coordinate of the cells to merge.
         * @param endColIndex Right coordinate of the cells to merge.
         */
        mergeCells(
            startRowIndex: number, startColIndex: number, endRowIndex: number,
            endColIndex: number): boolean;
        /**
         * Walks the dom structure of this object's table element and populates
         * this.rows with goog.editor.TableRow objects. This is done initially
         * to populate the internal data structures, and also after each time
         * the DOM structure is modified. Currently this means that the all
         * existing information is discarded and re-read from the DOM.
         */
        refresh(): void;
        /**
         * Removes a column from the table. This is done by removing cell
         * elements, or shrinking the colspan of elements that span multiple
         * columns.
         * @param colIndex Index of the column to delete.
         */
        removeColumn(colIndex: number): void;
        /**
         * Removes a row from the table, removing the TR element and
         * decrementing the rowspan of any cells in other rows that overlap the
         * row.
         * @param rowIndex Index of the row to delete.
         */
        removeRow(rowIndex: number): void;
        /**
         * Splits a cell with colspans or rowspans into multiple descrete cells.
         * @param rowIndex y coordinate of the cell to split.
         * @param colIndex x coordinate of the cell to split.
         */
        splitCell(rowIndex: number, colIndex: number): (GlobalElement|null)[];
    }
}
declare module 'goog:goog.editor.Table' {
    import alias = ಠ_ಠ.clutz.goog.editor.Table;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor {
    /**
     * Class representing a table cell, which may span across multiple
     * rows and columns
     */
    class TableCell extends TableCell_Instance {}
    class TableCell_Instance {
        private noStructuralTyping_: any;
        /**
         * Class representing a table cell, which may span across multiple
         * rows and columns
         * @param td This cell's underlying TD or TH element.
         * @param startRow Index of the row where this cell begins.
         * @param startCol Index of the column where this cell begins.
         */
        constructor(td: GlobalElement|null, startRow: number, startCol: number);
        colSpan: any;
        element: GlobalElement|null;
        rowSpan: any;
        startCol: number;
        startRow: number;
        /**
         * Set this cell's colSpan, updating both its colSpan property and the
         * underlying element's colSpan attribute.
         * @param colSpan The new colSpan.
         */
        setColSpan(colSpan: number): void;
        /**
         * Set this cell's rowSpan, updating both its rowSpan property and the
         * underlying element's rowSpan attribute.
         * @param rowSpan The new rowSpan.
         */
        setRowSpan(rowSpan: number): void;
    }
}
declare module 'goog:goog.editor.TableCell' {
    import alias = ಠ_ಠ.clutz.goog.editor.TableCell;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor {
    /**
     * Class representing a logical table row: a tr element and any cells
     * that appear in that row.
     */
    class TableRow extends TableRow_Instance {}
    class TableRow_Instance {
        private noStructuralTyping_: any;
        /**
         * Class representing a logical table row: a tr element and any cells
         * that appear in that row.
         * @param trElement This rows's underlying TR element.
         * @param rowIndex This row's index in its parent table.
         */
        constructor(trElement: GlobalElement|null, rowIndex: number);
        columns: any[];
        element: GlobalElement|null;
        index: number;
    }
}
declare module 'goog:goog.editor.TableRow' {
    import alias = ಠ_ಠ.clutz.goog.editor.TableRow;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.defines {
    var USE_CONTENTEDITABLE_IN_FIREFOX_3: boolean;
}
declare module 'goog:goog.editor.defines' {
    import alias = ಠ_ಠ.clutz.goog.editor.defines;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.focus {
    /**
     * Change focus to the given input field and set cursor to end of current
     * text.
     * @param inputElem Input DOM element.
     */
    function focusInputField(inputElem: GlobalElement|null): void;
}
declare module 'goog:goog.editor.focus' {
    import alias = ಠ_ಠ.clutz.goog.editor.focus;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.icontent {
    /**
     * Sets up goog.editor.icontent to always use standards-mode iframes.
     */
    function forceStandardsModeIframes(): void;
    /**
     * Write the initial iframe content in IE/HTTPS mode.
     * @param info Formatting info about the field.
     * @param doc The iframe document.
     * @param bodyHtml The HTML to insert as the iframe body.
     */
    function writeHttpsInitialIframe(
        info: ಠ_ಠ.clutz.goog.editor.icontent.FieldFormatInfo|null,
        doc: Document|null, bodyHtml: string): void;
    /**
     * Write the initial iframe content in normal mode.
     * @param info Formatting info about the field.
     * @param bodyHtml The HTML to insert as the iframe body.
     * @param style Style info about the field, if needed.
     * @param iframe The iframe.
     */
    function writeNormalInitialBlendedIframe(
        info: ಠ_ಠ.clutz.goog.editor.icontent.FieldFormatInfo|null,
        bodyHtml: string,
        style: ಠ_ಠ.clutz.goog.editor.icontent.FieldStyleInfo|null,
        iframe: HTMLIFrameElement|null): void;
    /**
     * Write the initial iframe content in normal mode.
     * @param info Formatting info about the field.
     * @param bodyHtml The HTML to insert as the iframe body.
     * @param style Style info about the field, if needed.
     * @param iframe The iframe.
     */
    function writeNormalInitialIframe(
        info: ಠ_ಠ.clutz.goog.editor.icontent.FieldFormatInfo|null,
        bodyHtml: string,
        style: ಠ_ಠ.clutz.goog.editor.icontent.FieldStyleInfo|null,
        iframe: HTMLIFrameElement|null): void;
}
declare module 'goog:goog.editor.icontent' {
    import alias = ಠ_ಠ.clutz.goog.editor.icontent;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.icontent {
    /**
     * A data structure for storing simple rendering info about a field.
     */
    class FieldFormatInfo extends FieldFormatInfo_Instance {}
    class FieldFormatInfo_Instance {
        private noStructuralTyping_: any;
        /**
         * A data structure for storing simple rendering info about a field.
         * @param fieldId The id of the field.
         * @param standards Whether the field should be rendered in standards
         * mode.
         * @param blended Whether the field is in blended mode.
         * @param fixedHeight Whether the field is in fixedHeight mode.
         * @param opt_extraStyles Other style attributes for the field,
         * represented as a map of strings.
         */
        constructor(
            fieldId: string, standards: boolean, blended: boolean,
            fixedHeight: boolean, opt_extraStyles?: GlobalObject|null);
        blended_: boolean;
        extraStyles_: GlobalObject;
        fieldId_: string;
        fixedHeight_: boolean;
        standards_: boolean;
    }
}
declare module 'goog:goog.editor.icontent.FieldFormatInfo' {
    import alias = ಠ_ಠ.clutz.goog.editor.icontent.FieldFormatInfo;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.icontent {
    /**
     * A data structure for storing simple info about the styles of a field.
     * Only needed in Firefox/Blended mode.
     */
    class FieldStyleInfo extends FieldStyleInfo_Instance {}
    class FieldStyleInfo_Instance {
        private noStructuralTyping_: any;
        /**
         * A data structure for storing simple info about the styles of a field.
         * Only needed in Firefox/Blended mode.
         * @param wrapper The wrapper div around a field.
         * @param css The css for a field.
         */
        constructor(wrapper: GlobalElement|null, css: string);
        css_: string;
        wrapper_: GlobalElement|null;
    }
}
declare module 'goog:goog.editor.icontent.FieldStyleInfo' {
    import alias = ಠ_ಠ.clutz.goog.editor.icontent.FieldStyleInfo;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.node {
    /**
     * Search ancestor nodes using a predicate function and returns the topmost
     * ancestor in the chain of consecutive ancestors that satisfies the
     * condition.
     * @param node The node whose ancestors have to be searched.
     * @param hasProperty A function that takes a parent node as a parameter and
     * returns true if it meets the criteria.
     */
    function findHighestMatchingAncestor(
        node: Node|null, hasProperty: (a: Node|null) => boolean): Node|null;
    /**
     * Search child nodes using a predicate function and return the first node
     * that satisfies the condition.
     * @param parent The parent node to search.
     * @param hasProperty A function that takes a child node as a parameter and
     * returns true if it meets the criteria.
     */
    function findInChildren(
        parent: Node|null, hasProperty: (a: Node|null) => boolean): number|null;
    /**
     * Finds the top-most DOM node inside an editable field that is an ancestor
     * (or self) of a given DOM node and meets the specified criteria.
     * @param node The DOM node where the search starts.
     * @param criteria A function that takes a DOM node as a parameter and
     * returns a boolean to indicate whether the node meets the criteria or not.
     */
    function findTopMostEditableAncestor(
        node: Node|null, criteria: (a: Node|null) => boolean): Node|null;
    /**
     * Version of firstChild that skips nodes that are entirely
     * whitespace and comments.
     * @param parent The reference node.
     */
    function getFirstChild(parent: Node|null): Node|null;
    /**
     * Version of lastChild that skips nodes that are entirely whitespace or
     * comments.  (Normally lastChild is a property of all DOM nodes that gives
     * the last of the nodes contained directly in the reference node.)
     * @param parent The reference node.
     */
    function getLastChild(parent: Node|null): Node|null;
    /**
     * Get the left-most non-ignorable leaf node of the given node.
     * @param parent The parent ndoe.
     */
    function getLeftMostLeaf(parent: Node|null): Node|null;
    /**
     * Returns the length of the text in node if it is a text node, or the
     * number of children of the node, if it is an element. Useful for
     * range-manipulation code where you need to know the offset for the right
     * side of the node.
     * @param node The node to get the length of.
     */
    function getLength(node: Node|null): number;
    /**
     * Version of nextSibling that skips nodes that are entirely whitespace or
     * comments.
     * @param sibling The reference node.
     */
    function getNextSibling(sibling: Node|null): Node|null;
    /**
     * Version of previoussibling that skips nodes that are entirely
     * whitespace or comments.  (Normally previousSibling is a property
     * of all DOM nodes that gives the sibling node, the node that is
     * a child of the same parent, that occurs immediately before the
     * reference node.)
     * @param sibling The reference node.
     */
    function getPreviousSibling(sibling: Node|null): Node|null;
    /**
     * Get the right-most non-ignorable leaf node of the given node.
     * @param parent The parent ndoe.
     */
    function getRightMostLeaf(parent: Node|null): Node|null;
    /**
     * Determine whether a node's text content is entirely whitespace.
     * @param textNode A node implementing the CharacterData interface (i.e., a
     * Text, Comment, or CDATASection node.
     */
    function isAllNonNbspWhiteSpace(textNode: Node|null): boolean;
    /**
     * Checks if node is a block-level html element. The <tt>display</tt> css
     * property is ignored.
     * @param node The node to test.
     */
    function isBlockTag(node: Node|null): boolean;
    /**
     * Checks if a node is inside an editable container.
     * @param node The node to test.
     */
    function isEditable(node: Node|null): boolean;
    /**
     * Checks if an element is a top-level editable container (meaning that
     * it itself is not editable, but all its child nodes are editable).
     * @param element The element to test.
     */
    function isEditableContainer(element: Node|null): boolean;
    /**
     * Returns true if the node contains only whitespace and is not and does not
     * contain any images, iframes or embed tags.
     * @param node The node to check.
     * @param opt_prohibitSingleNbsp By default, this function treats a single
     * nbsp as empty.  Set this to true to treat this case as non-empty.
     */
    function isEmpty(
        node: Node|null, opt_prohibitSingleNbsp?: boolean): boolean;
    /**
     * Determine if a node should be returned by the iterator functions.
     * @param node An object implementing the DOM1 Node interface.
     */
    function isImportant(node: Node|null): boolean;
    /**
     * Check if the node is in a standards mode document.
     * @param node The node to test.
     */
    function isStandardsMode(node: Node|null): boolean;
    /**
     * Replaces the innerHTML of a node.
     *
     * IE has serious problems if you try to set innerHTML of an editable node
     * with any selection. Early versions of IE tear up the old internal tree
     * storage, to help avoid ref-counting loops. But this sometimes leaves the
     * selection object in a bad state and leads to segfaults.
     *
     * Removing the nodes first prevents IE from tearing them up. This is not
     * strictly necessary in nodes that do not have the selection. You should
     * always use this function when setting innerHTML inside of a field.
     * @param node A node.
     * @param html The innerHTML to set on the node.
     */
    function replaceInnerHtml(node: Node|null, html: string): void;
    /**
     * Skips siblings of a node that are empty text nodes.
     * @param node A node. May be null.
     */
    function skipEmptyTextNodes(node: Node|null): Node|null;
    /**
     * Splits off a subtree.
     * @param currentNode The starting splitting point.
     * @param opt_secondHalf The initial leftmost leaf the new subtree. If null,
     * siblings after currentNode will be placed in the subtree, but no
     * additional node will be.
     * @param opt_root The top of the tree where splitting stops at.
     */
    function splitDomTreeAt(
        currentNode: Node, opt_secondHalf?: Node|null,
        opt_root?: Node|null): Node;
    /**
     * Appends all of oldNode's children to newNode. This removes all children
     * from oldNode and appends them to newNode. oldNode is left with no
     * children.
     * @param newNode Node to transfer children to.
     * @param oldNode Node to transfer children from.
     */
    function transferChildren(newNode: Node, oldNode: Node|null): void;
}
declare module 'goog:goog.editor.node' {
    import alias = ಠ_ಠ.clutz.goog.editor.node;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
    /**
     * Base class for bubble plugins. This is used for to connect user behavior
     * in the editor to a goog.ui.editor.Bubble UI element that allows
     * the user to modify the properties of an element on their page (e.g. the
     * alt text of an image tag).
     *
     * Subclasses should override the abstract method
     * getBubbleTargetFromSelection() with code to determine if the current
     * selection should activate the bubble type. The other abstract method
     * createBubbleContents() should be overriden with code to create the inside
     * markup of the bubble.  The base class creates the rest of the bubble.
     */
    class AbstractBubblePlugin extends AbstractBubblePlugin_Instance {
        /**
         * The constant string used to separate option links.
         */
        static DASH_NBSP_STRING: string;
        /**
         * Sets the global bubble factory function.
         * @param bubbleFactory Function that creates a bubble for the given
         * bubble parent element and z index.
         */
        static setBubbleFactory(
            bubbleFactory: (a: GlobalElement, b: number) =>
                ಠ_ಠ.clutz.goog.ui.editor.Bubble): void;
    }
    class AbstractBubblePlugin_Instance extends
        ಠ_ಠ.clutz.goog.editor.Plugin_Instance {
        /**
         * Place to register events the plugin listens to.
         */
        eventRegister: ಠ_ಠ.clutz.goog.events
            .EventHandler<ಠ_ಠ.clutz.goog.editor.plugins.AbstractBubblePlugin>|
            null;
        /**
         * Called when the bubble is closed or hidden. The default
         * implementation does nothing.
         */
        cleanOnBubbleClose(): void;
        /**
         * Closes the bubble.
         */
        closeBubble(): void;
        /**
         * Creates and shows the property bubble.
         * @param targetElement The target element of the bubble.
         */
        createBubble(targetElement: GlobalElement|null): void;
        /**
         * Should be overriden by subclasses to add the type specific contents
         * to the bubble.
         * @param bubbleContainer The container element of the bubble to which
         * the contents should be added.
         */
        createBubbleContents(a: GlobalElement|null): any;
        /**
         * Helper method that creates a link with text set to linkText and
         * optionally wires up a listener for the CLICK event or the link. The
         * link is navigable by tabs if {@code enableKeyboardNavigation(true)}
         * was called.
         * @param linkId The id of the link.
         * @param linkText Text of the link.
         * @param opt_onClick Optional function to call when the link is
         * clicked.
         * @param opt_container If specified, location to insert link. If no
         * container is specified, the old link is removed and replaced.
         */
        createLink(
            linkId: string, linkText: string,
            opt_onClick?: (...a: any[]) => any,
            opt_container?: GlobalElement|null): GlobalElement|null;
        /**
         * Helper method to create a link to insert into the bubble. The link is
         * navigable by tabs if {@code enableKeyboardNavigation(true)} was
         * called.
         * @param linkId The id of the link.
         * @param linkText Text of the link.
         * @param isAnchor Set to true to create an actual anchor tag instead of
         * a span.  Actual links are right clickable (e.g. to open in a new
         * window) and also update window status on hover.
         * @param opt_container If specified, location to insert link. If no
         * container is specified, the old link is removed and replaced.
         */
        createLinkHelper(
            linkId: string, linkText: string, isAnchor: boolean,
            opt_container?: GlobalElement|null): GlobalElement|null;
        /**
         * Helper method that creates option links (such as edit, test, remove)
         * @param id String id for the span id.
         */
        createLinkOption(id: string): GlobalElement|null;
        disable(field: ಠ_ಠ.clutz.goog.editor.Field|null): void;
        /**
         * Sets whether the bubble should support tabbing through elements.
         */
        enableKeyboardNavigation(keyboardNavigationEnabled: boolean): void;
        getBubbleDom(): ಠ_ಠ.clutz.goog.dom.DomHelper|null;
        /**
         * Returns the bubble map.  Subclasses may override to use a separate
         * map.
         */
        getBubbleMap(): {
            [/* warning: coerced from ? */ key: string]:
                ಠ_ಠ.clutz.goog.ui.editor.Bubble | null
        };
        /**
         * Should be overriden by subclasses to return the bubble target element
         * or null if an element of their required type isn't found.
         * @param selectedElement The target of the selection change event or
         * the parent container of the current entire selection.
         */
        getBubbleTargetFromSelection(a: GlobalElement|null): GlobalElement|null;
        getBubbleTitle(): string;
        getBubbleType(): string;
        /**
         * Returns the element whose properties the bubble manipulates.
         */
        getTargetElement(): GlobalElement|null;
        /**
         * In case the keyboard navigation is enabled, this will set focus on
         * the first tabbable element in the bubble when TAB is clicked.
         */
        handleKeyDown(e: ಠ_ಠ.clutz.goog.events.BrowserEvent): boolean;
        handleKeyUp(e: ಠ_ಠ.clutz.goog.events.BrowserEvent): boolean;
        /**
         * Pops up a property bubble for the given selection if appropriate and
         * closes open property bubbles if no longer needed.  This should not be
         * overridden.
         */
        handleSelectionChange(
            opt_e?: ಠ_ಠ.clutz.goog.events.BrowserEvent,
            opt_target?: Node): boolean;
        /**
         * Pops up a property bubble for the given selection if appropriate and
         * closes open property bubbles if no longer needed.
         * @param selectedElement The selected element.
         */
        handleSelectionChangeInternal(selectedElement: GlobalElement|
                                      null): boolean;
        isVisible(): boolean;
        /**
         * Called after the bubble is shown. The default implementation does
         * nothing. Override it to provide your own one.
         */
        onShow(): void;
        /**
         * Register the handler for the target's CLICK and ENTER key events.
         * @param target The event source element.
         * @param handler The event handler.
         */
        registerActionHandler(
            target: GlobalElement|null, handler: (...a: any[]) => any): void;
        /**
         * Register the handler for the target's CLICK event.
         * @param target The event source element.
         * @param handler The event handler.
         */
        registerClickHandler(
            target: GlobalElement|null, handler: (...a: any[]) => any): void;
        /**
         * Reposition the property bubble.
         */
        reposition(): void;
        /**
         * Sets the instance bubble factory function.  If set to a non-null
         * value, this function will be used to create a bubble instead of the
         * global factory function.
         * @param bubbleFactory Function that creates a bubble for the given
         * bubble parent element and z index.  Null to reset the factory
         * function.
         */
        setBubbleFactory(bubbleFactory:
                             ((a: GlobalElement,
                               b: number) => ಠ_ಠ.clutz.goog.ui.editor.Bubble)|
                         null): void;
        /**
         * Sets the bubble parent.
         * @param bubbleParent An element where the bubble will be anchored. If
         * null, we will use the application document. This is useful when you
         * have an editor embedded in a scrolling div.
         */
        setBubbleParent(bubbleParent: GlobalElement|null): void;
        /**
         * Makes the given element tabbable.
         *
         * <p>Elements created by createLink[Helper] are tabbable even without
         * calling this method. Call it for other elements if needed.
         *
         * <p>If tabindex is not already set in the element, this function sets
         * it to 0. You'll usually want to also call {@code
         * enableKeyboardNavigation(true)}.
         */
        setTabbable(element: GlobalElement): void;
        /**
         * Inserts a link in the given container if it is specified or removes
         * the old link with this id and replaces it with the new link
         * @param link Html element to insert.
         * @param linkId Id of the link.
         * @param opt_container If specified, location to insert link.
         */
        setupLink(
            link: GlobalElement|null, linkId: string,
            opt_container?: GlobalElement|null): void;
        shouldPreferBubbleAboveElement(): boolean;
    }
}
declare module 'goog:goog.editor.plugins.AbstractBubblePlugin' {
    import alias = ಠ_ಠ.clutz.goog.editor.plugins.AbstractBubblePlugin;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
    /**
     * An abstract superclass for a Trogedit plugin that creates exactly one
     * dialog. By default dialogs are not reused -- each time execCommand is
     * called, a new instance of the dialog object is created (and the old one
     * disposed of). To enable reusing of the dialog object, subclasses should
     * call setReuseDialog() after calling the superclass constructor.
     */
    class AbstractDialogPlugin extends AbstractDialogPlugin_Instance {}
    class AbstractDialogPlugin_Instance extends
        ಠ_ಠ.clutz.goog.editor.Plugin_Instance {
        /**
         * An abstract superclass for a Trogedit plugin that creates exactly one
         * dialog. By default dialogs are not reused -- each time execCommand is
         * called, a new instance of the dialog object is created (and the old
         * one disposed of). To enable reusing of the dialog object, subclasses
         * should call setReuseDialog() after calling the superclass
         * constructor.
         * @param command The command that this plugin handles.
         */
        constructor(command: string);
        /**
         * Creates a new instance of this plugin's dialog. Must be overridden by
         * subclasses.
         * Implementations should expect that the editor is inactive and cannot
         * be focused, nor will its caret position (or selection) be
         * determinable until after the dialogs goog.ui.PopupBase.EventType.HIDE
         * event has been handled.
         * @param dialogDomHelper The dom helper to be used to create the
         * dialog.
         * @param opt_arg The dialog specific argument. Concrete subclasses
         * should declare a specific type.
         */
        createDialog(a: ಠ_ಠ.clutz.goog.dom.DomHelper, b?: any):
            ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog|null;
        disposeInternal(): void;
        /**
         * Cleans up the structure used to save the original selection before
         * the dialog was opened. Should be used by subclasses that don't
         * restore the original selection via restoreOriginalSelection.
         */
        disposeOriginalSelection(): void;
        /**
         * Handles execCommand. Dialog plugins don't make any changes when they
         * open a dialog, just when the dialog closes (because only modal
         * dialogs are supported). Hence this method does not dispatch the
         * change events that the superclass method does.
         * @param command The command to execute.
         * @param var_args Any additional parameters needed to execute the
         * command.
         */
        execCommand(command: string, ...var_args: any[]): any;
        /**
         * Handles execCommand by opening the dialog. Dispatches
         * {@link goog.editor.plugins.AbstractDialogPlugin.EventType.OPENED}
         * after the dialog is shown.
         * @param command The command to execute.
         * @param opt_arg The dialog specific argument. Should be the same as
         * {@link createDialog}.
         */
        execCommandInternal(command: string, opt_arg?: any): any;
        /**
         * Returns the current dialog that was created and opened by this
         * plugin.
         */
        getDialog(): ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog|null;
        /**
         * Cleans up after the dialog has closed, including restoring the
         * selection to what it was before the dialog was opened. If a subclass
         * modifies the editable field's content such that the original
         * selection is no longer valid (usually the case when the user clicks
         * OK, and sometimes also on Cancel), it is that subclass'
         * responsibility to place the selection in the desired place during the
         * OK or Cancel (or other) handler. In that case, this method will leave
         * the selection in place.
         * @param e The AFTER_HIDE event object.
         */
        handleAfterHide(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        isSupportedCommand(command: string): boolean;
        /**
         * Restores the selection in the editable field to what it was before
         * the dialog was opened. This is not guaranteed to work if the contents
         * of the field have changed.
         */
        restoreOriginalSelection(): void;
        /**
         * Sets whether this plugin should reuse the same instance of the dialog
         * each time execCommand is called or create a new one. This is intended
         * for use by subclasses only, hence protected.
         * @param reuse Whether to reuse the dialog.
         */
        setReuseDialog(reuse: boolean): void;
    }
}
declare module 'goog:goog.editor.plugins.AbstractDialogPlugin' {
    import alias = ಠ_ಠ.clutz.goog.editor.plugins.AbstractDialogPlugin;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins.AbstractDialogPlugin {
    /**
     * Event type constants for events the dialog plugins fire.
     */
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        CLOSED: EventType,
        OPENED: EventType,
    };
}
declare module 'goog:goog.editor.plugins.AbstractDialogPlugin.EventType' {
    import alias = ಠ_ಠ.clutz.goog.editor.plugins.AbstractDialogPlugin.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
    /**
     * Plugin to handle tab keys. Specific tab behavior defined by subclasses.
     */
    class AbstractTabHandler extends AbstractTabHandler_Instance {}
    class AbstractTabHandler_Instance extends
        ಠ_ಠ.clutz.goog.editor.Plugin_Instance {
        handleKeyboardShortcut(
            e: ಠ_ಠ.clutz.goog.events.BrowserEvent, key: string,
            isModifierPressed: boolean): boolean;
        /**
         * Handle a tab key press.
         * @param e The key event.
         */
        handleTabKey(a: ಠ_ಠ.clutz.goog.events.Event|null): boolean;
    }
}
declare module 'goog:goog.editor.plugins.AbstractTabHandler' {
    import alias = ಠ_ಠ.clutz.goog.editor.plugins.AbstractTabHandler;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
    /**
     * Functions to style text (e.g. underline, make bold, etc.)
     */
    class BasicTextFormatter extends BasicTextFormatter_Instance {}
    class BasicTextFormatter_Instance extends
        ಠ_ಠ.clutz.goog.editor.Plugin_Instance {
        cleanContentsDom(fieldCopy: GlobalElement): any;
        cleanContentsHtml(html: string): string;
        /**
         * Execute a user-initiated command.
         * @param command Command to execute.
         * @param var_args For color commands, this should be the hex color
         * (with the #). For FORMAT_BLOCK, this should be the
         * goog.editor.plugins.BasicTextFormatter.BLOCK_COMMAND. It will be
         * unused for other commands.
         */
        execCommandInternal(command: string, ...var_args: any[]): GlobalObject
            |null|undefined;
        getTrogClassId(): string;
        handleKeyboardShortcut(
            e: ಠ_ಠ.clutz.goog.events.BrowserEvent, key: string,
            isModifierPressed: boolean): boolean;
        /**
         * Whether the string corresponds to a command that should be silent.
         */
        isSilentCommand(command: string): boolean;
        /**
         * Whether the string corresponds to a command this plugin handles.
         * @param command Command string to check.
         */
        isSupportedCommand(command: string): boolean;
        /**
         * Logging object.
         */
        logger: ಠ_ಠ.clutz.goog.debug.Logger|null;
        prepareContentsHtml(html: string, a?: GlobalObject|null): string;
        /**
         * Gets the command value.
         * @param command The command value to get.
         */
        queryCommandValue(command: string): string|boolean|null;
    }
}
declare module 'goog:goog.editor.plugins.BasicTextFormatter' {
    import alias = ಠ_ಠ.clutz.goog.editor.plugins.BasicTextFormatter;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins.BasicTextFormatter {
    /**
     * Commands implemented by this plugin.
     */
    type COMMAND = string&{clutzEnumBrand: never};
    var COMMAND: {
        BACKGROUND_COLOR: COMMAND,
        BOLD: COMMAND,
        CREATE_LINK: COMMAND,
        FONT_COLOR: COMMAND,
        FONT_FACE: COMMAND,
        FONT_SIZE: COMMAND,
        FORMAT_BLOCK: COMMAND,
        HORIZONTAL_RULE: COMMAND,
        INDENT: COMMAND,
        ITALIC: COMMAND,
        JUSTIFY_CENTER: COMMAND,
        JUSTIFY_FULL: COMMAND,
        JUSTIFY_LEFT: COMMAND,
        JUSTIFY_RIGHT: COMMAND,
        LINK: COMMAND,
        ORDERED_LIST: COMMAND,
        OUTDENT: COMMAND,
        STRIKE_THROUGH: COMMAND,
        SUBSCRIPT: COMMAND,
        SUPERSCRIPT: COMMAND,
        UNDERLINE: COMMAND,
        UNORDERED_LIST: COMMAND,
    };
}
declare module 'goog:goog.editor.plugins.BasicTextFormatter.COMMAND' {
    import alias = ಠ_ಠ.clutz.goog.editor.plugins.BasicTextFormatter.COMMAND;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
    /**
     * Plugin to handle splitting block quotes.  This plugin does nothing on its
     * own and should be used in conjunction with EnterHandler or one of its
     * subclasses.
     */
    class Blockquote extends Blockquote_Instance {
        /**
         * Class ID used to identify this plugin.
         */
        static CLASS_ID: string;
        /**
         * Command implemented by this plugin.
         */
        static SPLIT_COMMAND: string;
    }
    class Blockquote_Instance extends ಠ_ಠ.clutz.goog.editor.Plugin_Instance {
        /**
         * Plugin to handle splitting block quotes.  This plugin does nothing on
         * its own and should be used in conjunction with EnterHandler or one of
         * its subclasses.
         * @param requiresClassNameToSplit Whether to split only blockquotes
         * that have the given classname.
         * @param opt_className The classname to apply to generated blockquotes.
         * Defaults to 'tr_bq'.
         */
        constructor(requiresClassNameToSplit: boolean, opt_className?: string);
        /**
         * Splits a quoted region if any.  To be called on a key press event.
         * When this function returns true, the event that caused it to be
         * called should be canceled.
         * @param command The command to execute.
         * @param var_args Single additional argument representing the current
         * cursor position. If BrowserFeature.HAS_W3C_RANGES it is an object
         * with a {@code node} key and an {@code offset} key. In other cases
         * (legacy IE) it is a single node.
         */
        execCommandInternal(command: string, ...var_args: any[]): boolean
            |undefined;
        /**
         * Gets the class name required for setup blockquotes.
         */
        getBlockquoteClassName(): string;
        getTrogClassId(): string;
        /**
         * Checks if a node is a blockquote element which has been setup.
         * @param node DOM node to check.
         */
        isSetupBlockquote(node: Node|null): boolean;
        /**
         * Checks if a node is a blockquote which can be split. A splittable
         * blockquote meets the following criteria: <ol> <li>Node is a
         * blockquote element</li> <li>Node has the blockquote classname if the
         * classname is required to split</li>
         * </ol>
         * @param node DOM node in question.
         */
        isSplittableBlockquote(node: Node|null): boolean;
        isSupportedCommand(command: string): boolean;
        /**
         * Checks if a node is a blockquote element which has not been setup
         * yet.
         * @param node DOM node to check.
         */
        isUnsetupBlockquote(node: Node|null): boolean;
        /**
         * Logging object.
         */
        logger: ಠ_ಠ.clutz.goog.debug.Logger|null;
    }
}
declare module 'goog:goog.editor.plugins.Blockquote' {
    import alias = ಠ_ಠ.clutz.goog.editor.plugins.Blockquote;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
    /**
     * Plugin for generating emoticons.
     */
    class Emoticons extends Emoticons_Instance {
        /**
         * The emoticon command.
         */
        static COMMAND: string;
    }
    class Emoticons_Instance extends ಠ_ಠ.clutz.goog.editor.Plugin_Instance {
        /**
         * Inserts an emoticon into the editor at the cursor location. Places
         * the cursor to the right of the inserted emoticon.
         * @param command Command to execute.
         * @param opt_arg Emoji to insert.
         */
        execCommandInternal(command: string, opt_arg?: any): GlobalObject
            |undefined;
        isSupportedCommand(command: string): boolean;
    }
}
declare module 'goog:goog.editor.plugins.Emoticons' {
    import alias = ಠ_ಠ.clutz.goog.editor.plugins.Emoticons;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
    /**
     * Plugin to handle enter keys. This does all the crazy to normalize (as
     * much as is reasonable) what happens when you hit enter. This also handles
     * the special casing of hitting enter in a blockquote.
     *
     * In IE, Webkit, and Opera, the resulting HTML uses one DIV tag per line.
     * In Firefox, the resulting HTML uses BR tags at the end of each line.
     */
    class EnterHandler extends EnterHandler_Instance {
        /**
         * Whether this is a node that contains a single BR tag and non-nbsp
         * whitespace.
         * @param node Node to check.
         */
        static isBrElem(node: Node|null): boolean;
        /**
         * Determines whether the lowest containing block node is a blockquote.
         * @param n The node.
         */
        static isDirectlyInBlockquote(n: Node|null): boolean;
    }
    class EnterHandler_Instance extends ಠ_ಠ.clutz.goog.editor.Plugin_Instance {
        /**
         * Deletes the element at the cursor if it is a BR node, and if it does,
         * calls e.preventDefault to stop the browser from deleting. Only
         * necessary in Gecko as a workaround for mozilla bug 205350 where
         * deleting a BR that is followed by a block element doesn't work (the
         * BR gets immediately replaced). We also need to account for an
         * ill-formed cursor which occurs from us trying to stop the browser
         * from deleting.
         * @param e The DELETE keypress event.
         */
        deleteBrGecko(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        enable(fieldObject: ಠ_ಠ.clutz.goog.editor.Field|null): void;
        /**
         * Ensures all text in IE and Opera to be in the given tag in order to
         * control Enter spacing. Call this when Enter is pressed if desired.
         *
         * We want to make sure the user is always inside of a block (or other
         * nodes listed in
         * goog.editor.plugins.EnterHandler.IGNORE_ENSURE_BLOCK_NODES_).  We
         * listen to keypress to force nodes that the user is leaving to turn
         * into blocks, but we also need to listen to keyup to force nodes that
         * the user is entering to turn into blocks. Example:  html is:
         * `<h2>foo[cursor]</h2>`, and the user hits enter.  We don't want to
         * format the h2, but we do want to format the P that is created on
         * enter.  The P node is not available until keyup.
         * @param tag The tag name to convert to.
         * @param opt_keyUp Whether the function is being called on key up. When
         * called on key up, the cursor is in the newly created node, so the
         * semantics for when to change it to a block are different.
         * Specifically, if the resulting node contains only a BR, it is
         * converted to `<tag>`.
         */
        ensureBlockIeOpera(
            tag: ಠ_ಠ.clutz.goog.dom.TagName<any>, opt_keyUp?: boolean): void;
        /**
         * Gets HTML with no contents that won't collapse, for browsers that
         * collapse the empty string.
         */
        getNonCollapsingBlankHtml(): string;
        getTrogClassId(): string;
        /**
         * Internal backspace handler.
         * @param e The keypress event.
         * @param range The closure range object.
         */
        handleBackspaceInternal(
            e: ಠ_ಠ.clutz.goog.events.Event|null,
            range: ಠ_ಠ.clutz.goog.dom.AbstractRange|null): void;
        /**
         * Internal delete key handler.
         * @param e The keypress event.
         */
        handleDeleteGecko(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Handle an enter key press on collapsed selection.  handleEnterGecko_
         * ensures the selection is collapsed by deleting its contents if it is
         * not.  The default implementation does nothing.
         * @param e The key press event.
         * @param wasCollapsed Whether the selection was collapsed before the
         * key press.  If it was not, code before this function has already
         * cleared the contents of the selection.
         * @param range Object representing the selection.
         */
        handleEnterAtCursorGeckoInternal(
            a: ಠ_ಠ.clutz.goog.events.BrowserEvent|null, b: boolean,
            c: ಠ_ಠ.clutz.goog.dom.AbstractRange|null): any;
        /**
         * Handle an enter key press in WebKit.
         * @param e The key press event.
         */
        handleEnterWebkitInternal(a: ಠ_ಠ.clutz.goog.events.BrowserEvent|
                                  null): any;
        handleKeyPress(e: ಠ_ಠ.clutz.goog.events.BrowserEvent): boolean;
        handleKeyUp(e: ಠ_ಠ.clutz.goog.events.BrowserEvent): boolean;
        /**
         * Internal handler for keyup events.
         * @param e The key event.
         */
        handleKeyUpInternal(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * If the contents are empty, return the 'default' html for the field.
         * The 'default' contents depend on the enter handling mode, so it
         * makes the most sense in this plugin.
         * @param html The html to prepare.
         */
        prepareContentsHtml(html: string, a?: GlobalObject|null): string;
        /**
         * Fix paragraphs to be the correct type of node.
         * @param e The `<enter>` key event.
         * @param split Whether we already split up a blockquote by manually
         * inserting elements.
         */
        processParagraphTagsInternal(
            e: ಠ_ಠ.clutz.goog.events.Event|null, split: boolean): void;
        /**
         * The type of block level tag to add on enter, for browsers that
         * support specifying the default block-level tag. Can be overriden by
         * subclasses; must be either DIV or P.
         */
        tag: ಠ_ಠ.clutz.goog.dom.TagName<any>;
    }
}
declare module 'goog:goog.editor.plugins.EnterHandler' {
    import alias = ಠ_ಠ.clutz.goog.editor.plugins.EnterHandler;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
    /**
     * First Strong plugin.
     */
    class FirstStrong extends FirstStrong_Instance {
        /**
         * The name of the attribute which records the input text.
         */
        static INPUT_ATTRIBUTE: string;
    }
    class FirstStrong_Instance extends ಠ_ಠ.clutz.goog.editor.Plugin_Instance {
        getTrogClassId(): string;
        handleKeyPress(e: ಠ_ಠ.clutz.goog.events.BrowserEvent): boolean;
        /**
         * Calls the flip directionality commands.  This is done here so things
         * go into the redo-undo stack at the expected order; fist enter the
         * input, then flip directionality.
         */
        handleKeyUp(e: ಠ_ಠ.clutz.goog.events.BrowserEvent): boolean;
        handleSelectionChange(
            e?: ಠ_ಠ.clutz.goog.events.BrowserEvent, node?: Node): boolean;
        queryCommandValue(command: string): any;
    }
}
declare module 'goog:goog.editor.plugins.FirstStrong' {
    import alias = ಠ_ಠ.clutz.goog.editor.plugins.FirstStrong;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
    /**
     * Applies header styles to text.
     */
    class HeaderFormatter extends HeaderFormatter_Instance {}
    class HeaderFormatter_Instance extends
        ಠ_ಠ.clutz.goog.editor.Plugin_Instance {
        getTrogClassId(): string;
        handleKeyboardShortcut(
            e: ಠ_ಠ.clutz.goog.events.BrowserEvent, key: string,
            isModifierPressed: boolean): boolean;
    }
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins.HeaderFormatter {
    type HEADER_COMMAND = string&{clutzEnumBrand: never};
    var HEADER_COMMAND: {
        H1: HEADER_COMMAND,
        H2: HEADER_COMMAND,
        H3: HEADER_COMMAND,
        H4: HEADER_COMMAND,
    };
}
declare module 'goog:goog.editor.plugins.HeaderFormatter' {
    import alias = ಠ_ಠ.clutz.goog.editor.plugins.HeaderFormatter;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
    /**
     * Property bubble plugin for links.
     */
    class LinkBubble extends LinkBubble_Instance {
        static MSG_INVALID_URL_LINK_BUBBLE: string;
        static MSG_LINK_BUBBLE_CHANGE: string;
        static MSG_LINK_BUBBLE_REMOVE: string;
        static MSG_LINK_BUBBLE_TEST_LINK: string;
    }
    class LinkBubble_Instance extends
        ಠ_ಠ.clutz.goog.editor.plugins.AbstractBubblePlugin_Instance {
        /**
         * Property bubble plugin for links.
         * @param var_args List of extra actions supported by the bubble.
         */
        constructor(...var_args:
                        (ಠ_ಠ.clutz.goog.editor.plugins.LinkBubble.Action|
                         undefined)[]);
        createBubbleContents(bubbleContainer: GlobalElement|null): any;
        execCommandInternal(command: string, ...var_args: any[]): any;
        getBubbleTargetFromSelection(selectedElement: GlobalElement|
                                     null): GlobalElement|null;
        getBubbleTitle(): string;
        getBubbleType(): string;
        /**
         * Returns the target element url for the bubble.
         */
        getTargetUrl(): string;
        /**
         * Returns the message to display for testing a link.
         */
        getTestLinkMessage(): string;
        getTrogClassId(): string;
        /**
         * Returns whether the URL should be considered invalid.  This always
         * returns false in the base class, and should be overridden by
         * subclasses that wish to impose validity rules on URLs.
         * @param url The url to check.
         */
        isInvalidUrl(a: string): boolean;
        isSupportedCommand(command: string): boolean;
        /**
         * Sets the proper state for the action links.
         */
        onShow(): void;
        /**
         * Tells the plugin whether to block URLs with schemes not in the
         * whitelist. If blocking is enabled, this plugin will not linkify the
         * link in the bubble popup.
         * @param blockOpeningUnsafeSchemes Whether to block non-whitelisted
         * schemes.
         */
        setBlockOpeningUnsafeSchemes(blockOpeningUnsafeSchemes: boolean): void;
        /**
         * Sets a whitelist of allowed URL schemes that are safe to open.
         * Schemes should all be in lowercase. If the plugin is set to block
         * opening unsafe schemes, user-entered URLs will be converted to
         * lowercase and checked against this list. The whitelist has no effect
         * if blocking is not enabled.
         * @param schemes String array of URL schemes to allow (http, https,
         * etc.).
         */
        setSafeToOpenSchemes(schemes: string[]|null): void;
        /**
         * Set the optional function for getting the "test" link of a url.
         * @param func The function to use.
         */
        setTestLinkUrlFn(func: (a: string) => string): void;
        /**
         * Checks whether the plugin should open the given url in a new window.
         * @param url The url to check.
         */
        shouldOpenUrl(url: string): boolean;
        /**
         * Tells the plugin to stop leaking the page's url via the referrer
         * header when the link text link is clicked. When the user clicks on a
         * link, the browser makes a request for the link url, passing the url
         * of the current page in the request headers. If the user wants the
         * current url to be kept secret (e.g. an unpublished document), the
         * owner of the url that was clicked will see the secret url in the
         * request headers, and it will no longer be a secret. Calling this
         * method will not send a referrer header in the request, just as if the
         * user had opened a blank window and typed the url in themselves.
         */
        stopReferrerLeaks(): void;
        /**
         * Tests the link by opening it in a new tab/window. Should be used as
         * the click event handler for the test pseudo-link.
         * @param opt_event If passed in, the event will be stopped.
         */
        testLink(opt_event?: GlobalEvent): void;
    }
}
declare module 'goog:goog.editor.plugins.LinkBubble' {
    import alias = ಠ_ಠ.clutz.goog.editor.plugins.LinkBubble;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins.LinkBubble {
    /**
     * Constructor for extra actions that can be added to the link bubble.
     */
    class Action extends Action_Instance {}
    class Action_Instance {
        private noStructuralTyping_: any;
        /**
         * Constructor for extra actions that can be added to the link bubble.
         * @param spanId The ID for the span showing the action.
         * @param linkId The ID for the link showing the action.
         * @param message The text for the link showing the action.
         * @param toShowFn Test function to determine whether to show the action
         * for the given URL.
         * @param actionFn Action function to run when the action is clicked.
         * Takes the current target URL as a parameter.
         */
        constructor(
            spanId: string, linkId: string, message: string,
            toShowFn: (a: string) => boolean, actionFn: (a: string) => void);
        actionFn_(a: string): void;
        linkId_: string;
        message_: string;
        spanId_: string;
        toShowFn_(a: string): boolean;
    }
}
declare module 'goog:goog.editor.plugins.LinkBubble.Action' {
    import alias = ಠ_ಠ.clutz.goog.editor.plugins.LinkBubble.Action;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
    /**
     * A plugin that opens the link dialog.
     */
    class LinkDialogPlugin extends LinkDialogPlugin_Instance {}
    class LinkDialogPlugin_Instance extends
        ಠ_ಠ.clutz.goog.editor.plugins.AbstractDialogPlugin_Instance {
        /**
         * A plugin that opens the link dialog.
         */
        constructor();
        /**
         * Creates a new instance of the dialog and registers for the relevant
         * events.
         * @param dialogDomHelper The dom helper to be used to create the
         * dialog.
         * @param opt_link The target link (should be a goog.editor.Link).
         */
        createDialog(
            dialogDomHelper: ಠ_ಠ.clutz.goog.dom.DomHelper|null,
            opt_link?: any): ಠ_ಠ.clutz.goog.ui.editor.LinkDialog;
        /**
         * Link object that the dialog is editing.
         */
        currentLink_: ಠ_ಠ.clutz.goog.editor.Link|null;
        disposeInternal(): void;
        /**
         * Handles execCommand by opening the dialog.
         * @param command The command to execute.
         * @param opt_arg {@link A goog.editor.Link} object representing the
         * link being edited.
         */
        execCommandInternal(command: string, opt_arg?: any): any;
        getCurrentLink(): ಠ_ಠ.clutz.goog.editor.Link|null;
        getEventHandler(): ಠ_ಠ.clutz.goog.events.EventHandler<this>|null;
        /**
         * Returns whether the"open link in new window" checkbox was checked
         * last time the dialog was closed.
         */
        getOpenLinkInNewWindowCheckedState(): boolean;
        /**
         * Handles when the dialog closes.
         * @param e The AFTER_HIDE event object.
         */
        handleAfterHide(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Handles the BeforeTestLink event fired when the 'test' link is
         * clicked.
         * @param e BeforeTestLink event object.
         */
        handleBeforeTestLink(e: ಠ_ಠ.clutz.goog.ui.editor.LinkDialog
                                 .BeforeTestLinkEvent|null): void;
        /**
         * Handles the OK event from the dialog by updating the link in the
         * field.
         * @param e OK event object.
         */
        handleOk(e: ಠ_ಠ.clutz.goog.ui.editor.LinkDialog.OkEvent|null): void;
        /**
         * Tells the plugin whether to block URLs with schemes not in the
         * whitelist. If blocking is enabled, this plugin will stop the 'Test
         * Link' popup window from being created. Blocking doesn't affect link
         * creation--if the user clicks the 'OK' button with an unsafe URL, the
         * link will still be created as normal.
         * @param blockOpeningUnsafeSchemes Whether to block non-whitelisted
         * schemes.
         */
        setBlockOpeningUnsafeSchemes(blockOpeningUnsafeSchemes: boolean): void;
        /**
         * Sets the warning message to show to users about including email
         * addresses on public web pages.
         * @param emailWarning Warning message to show users about including
         * email addresses on the web.
         */
        setEmailWarning(emailWarning: ಠ_ಠ.clutz.goog.html.SafeHtml): void;
        /**
         * Sets a whitelist of allowed URL schemes that are safe to open.
         * Schemes should all be in lowercase. If the plugin is set to block
         * opening unsafe schemes, user-entered URLs will be converted to
         * lowercase and checked against this list. The whitelist has no effect
         * if blocking is not enabled.
         * @param schemes String array of URL schemes to allow (http, https,
         * etc.).
         */
        setSafeToOpenSchemes(schemes: string[]|null): void;
        /**
         * Checks whether the plugin should open the given url in a new window.
         * @param url The url to check.
         */
        shouldOpenUrl(url: string): boolean;
        /**
         * Tells the dialog to show a checkbox where the user can choose to have
         * the link open in a new window.
         * @param startChecked Whether to check the checkbox the first time the
         * dialog is shown. Subesquent times the checkbox will remember its
         * previous state.
         */
        showOpenLinkInNewWindow(startChecked: boolean): void;
        /**
         * Tells the dialog to show a checkbox where the user can choose to have
         * 'rel=nofollow' attribute added to the link.
         */
        showRelNoFollow(): void;
        /**
         * Tells the plugin to stop leaking the page's url via the referrer
         * header when the "test this link" link is clicked. When the user
         * clicks on a link, the browser makes a request for the link url,
         * passing the url of the current page in the request headers. If the
         * user wants the current url to be kept secret (e.g. an unpublished
         * document), the owner of the url that was clicked will see the secret
         * url in the request headers, and it will no longer be a secret.
         * Calling this method will not send a referrer header in the request,
         * just as if the user had opened a blank window and typed the url in
         * themselves.
         */
        stopReferrerLeaks(): void;
    }
}
declare module 'goog:goog.editor.plugins.LinkDialogPlugin' {
    import alias = ಠ_ಠ.clutz.goog.editor.plugins.LinkDialogPlugin;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
    /**
     * Plugin to add a keyboard shortcut for the link command
     */
    class LinkShortcutPlugin extends LinkShortcutPlugin_Instance {}
    class LinkShortcutPlugin_Instance extends
        ಠ_ಠ.clutz.goog.editor.Plugin_Instance {
        getTrogClassId(): string;
        handleKeyboardShortcut(
            e: ಠ_ಠ.clutz.goog.events.BrowserEvent, key: string,
            isModifierPressed: boolean): boolean;
    }
}
declare module 'goog:goog.editor.plugins.LinkShortcutPlugin' {
    import alias = ಠ_ಠ.clutz.goog.editor.plugins.LinkShortcutPlugin;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
    /**
     * Plugin to handle tab keys in lists to indent and outdent.
     */
    class ListTabHandler extends ListTabHandler_Instance {}
    class ListTabHandler_Instance extends
        ಠ_ಠ.clutz.goog.editor.plugins.AbstractTabHandler_Instance {
        getTrogClassId(): string;
        handleTabKey(e: ಠ_ಠ.clutz.goog.events.Event|null): boolean;
    }
}
declare module 'goog:goog.editor.plugins.ListTabHandler' {
    import alias = ಠ_ಠ.clutz.goog.editor.plugins.ListTabHandler;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
    /**
     * A plugin that manages lorem ipsum state of editable fields.
     */
    class LoremIpsum extends LoremIpsum_Instance {}
    class LoremIpsum_Instance extends ಠ_ಠ.clutz.goog.editor.Plugin_Instance {
        /**
         * A plugin that manages lorem ipsum state of editable fields.
         * @param message The lorem ipsum message.
         */
        constructor(message: string);
        /**
         * Handles execCommand.
         * @param command The command to execute. Should be CLEAR_LOREM or
         * UPDATE_LOREM.
         * @param opt_placeCursor Whether to place the cursor in the field after
         * clearing lorem. Should be a boolean.
         */
        execCommand(command: string, opt_placeCursor?: any): any;
        isSupportedCommand(command: string): boolean;
        /**
         * Handles queryCommandValue.
         * @param command The command to query.
         */
        queryCommandValue(command: string): boolean;
    }
}
declare module 'goog:goog.editor.plugins.LoremIpsum' {
    import alias = ಠ_ಠ.clutz.goog.editor.plugins.LoremIpsum;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
    /**
     * A plugin to handle removing formatting from selected text.
     */
    class RemoveFormatting extends RemoveFormatting_Instance {
        /**
         * The editor command this plugin in handling.
         */
        static REMOVE_FORMATTING_COMMAND: string;
    }
    class RemoveFormatting_Instance extends
        ಠ_ಠ.clutz.goog.editor.Plugin_Instance {
        execCommandInternal(command: string, ...var_args: any[]): any;
        getTrogClassId(): string;
        /**
         * Handle per node special processing if necessary. If this function
         * returns null then standard cleanup is applied. Otherwise this node
         * and all children are assumed to be cleaned. NOTE(user): If an
         * alternate RemoveFormatting processor is provided
         * (setRemoveFormattingFunc()), this will no longer work.
         * @param node The node to clean.
         */
        getValueForNode(node: GlobalElement|null): string|null;
        handleKeyboardShortcut(
            e: ಠ_ಠ.clutz.goog.events.BrowserEvent, key: string,
            isModifierPressed: boolean): boolean;
        isSupportedCommand(command: string): boolean;
        setKeyboardShortcutKey(key: string): void;
        /**
         * Sets a function to be used for remove formatting.
         * @param removeFormattingFunc - A function that takes  a string of html
         * and returns a string of html that does any other formatting changes
         * desired.  Use this only if trogedit's behavior doesn't meet your
         * needs.
         */
        setRemoveFormattingFunc(removeFormattingFunc: (a: string) => string):
            void;
    }
}
declare module 'goog:goog.editor.plugins.RemoveFormatting' {
    import alias = ಠ_ಠ.clutz.goog.editor.plugins.RemoveFormatting;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
    /**
     * Plugin to handle tab keys when not in lists to add 4 spaces.
     */
    class SpacesTabHandler extends SpacesTabHandler_Instance {}
    class SpacesTabHandler_Instance extends
        ಠ_ಠ.clutz.goog.editor.plugins.AbstractTabHandler_Instance {
        getTrogClassId(): string;
        handleTabKey(e: ಠ_ಠ.clutz.goog.events.Event|null): boolean;
    }
}
declare module 'goog:goog.editor.plugins.SpacesTabHandler' {
    import alias = ಠ_ಠ.clutz.goog.editor.plugins.SpacesTabHandler;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
    /**
     * Plugin that adds support for table creation and editing commands.
     */
    class TableEditor extends TableEditor_Instance {}
    class TableEditor_Instance extends ಠ_ಠ.clutz.goog.editor.Plugin_Instance {
        /**
         * Adds a function to filter out non-user-editable tables.
         * @param func A function to decide whether the table element could be
         * editable by the user or not.
         */
        addIsTableEditableFunction(func: (a: GlobalElement|null) => boolean):
            void;
        enable(fieldObject: ಠ_ಠ.clutz.goog.editor.Field|null): void;
        execCommandInternal(command: string, ...opt_arg: any[]): any;
        getTrogClassId(): string;
        /**
         * Whether the string corresponds to a command this plugin handles.
         * @param command Command string to check.
         */
        isSupportedCommand(command: string): boolean;
        /**
         * Returns the current value of a given command. Currently this plugin
         * only returns a value for
         * goog.editor.plugins.TableEditor.COMMAND.TABLE.
         */
        queryCommandValue(command: string): any;
    }
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins.TableEditor {
    type COMMAND = string&{clutzEnumBrand: never};
    var COMMAND: {
        INSERT_COLUMN_AFTER: COMMAND,
        INSERT_COLUMN_BEFORE: COMMAND,
        INSERT_ROW_AFTER: COMMAND,
        INSERT_ROW_BEFORE: COMMAND,
        MERGE_CELLS: COMMAND,
        REMOVE_COLUMNS: COMMAND,
        REMOVE_ROWS: COMMAND,
        REMOVE_TABLE: COMMAND,
        SPLIT_CELL: COMMAND,
        TABLE: COMMAND,
    };
    class CellSelection_ extends CellSelection__Instance {}
    class CellSelection__Instance {
        private noStructuralTyping_: any;
        cells_: any[];
        firstColIndex_: any;
        firstRowIndex_: any;
        lastColIndex_: any;
        lastRowIndex_: any;
        parentTable_: ಠ_ಠ.clutz.goog.editor.Table;
        /**
         * Returns a boolean value indicating whether or not there is exactly
         * one cell in this selection. Note that this may not be the same as
         * checking whether getCells().length == 1; if there is a single cell
         * with rowSpan/colSpan set it will appear multiple times.
         */
        containsSingleCell(): boolean;
        /**
         * Returns the cells in this selection.
         */
        getCells(): (GlobalElement|null)[];
        /**
         * Returns the column index of the farthest left cell in this selection.
         */
        getFirstColumnIndex(): number;
        /**
         * Returns the row index of the uppermost cell in this selection.
         */
        getFirstRowIndex(): number;
        /**
         * Returns the column index of the farthest right cell in this
         * selection.
         */
        getLastColumnIndex(): number;
        /**
         * Returns the row index of the lowermost cell in this selection.
         */
        getLastRowIndex(): number;
        /**
         * Returns the EditableTable object of which this selection's cells are
         * a subset.
         */
        getTable(): ಠ_ಠ.clutz.goog.editor.Table;
        /**
         * Returns a boolean value indicating whether or not the cells in this
         * selection form a rectangle.
         */
        isRectangle(): boolean;
    }
}
declare module 'goog:goog.editor.plugins.TableEditor' {
    import alias = ಠ_ಠ.clutz.goog.editor.plugins.TableEditor;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
    /**
     * Plugin to handle enter keys. This subclass normalizes all browsers to use
     * the given block tag on enter.
     */
    class TagOnEnterHandler extends TagOnEnterHandler_Instance {}
    class TagOnEnterHandler_Instance extends
        ಠ_ಠ.clutz.goog.editor.plugins.EnterHandler_Instance {
        /**
         * Plugin to handle enter keys. This subclass normalizes all browsers to
         * use the given block tag on enter.
         * @param tag The type of tag to add on enter.
         */
        constructor(tag: ಠ_ಠ.clutz.goog.dom.TagName<any>);
        tag: ಠ_ಠ.clutz.goog.dom.TagName<any>;
        /**
         * This plugin is active on uneditable fields so it can provide a value
         * for queryCommandValue calls asking for
         * goog.editor.Command.BLOCKQUOTE.
         */
        activeOnUneditableFields(): boolean;
        getNonCollapsingBlankHtml(): string;
        getTrogClassId(): string;
        handleBackspaceInternal(
            e: ಠ_ಠ.clutz.goog.events.Event|null,
            range: ಠ_ಠ.clutz.goog.dom.AbstractRange|null): void;
        handleDeleteGecko(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        handleEnterAtCursorGeckoInternal(
            e: ಠ_ಠ.clutz.goog.events.BrowserEvent|null, wasCollapsed: boolean,
            range: ಠ_ಠ.clutz.goog.dom.AbstractRange|null): any;
        handleEnterWebkitInternal(e: ಠ_ಠ.clutz.goog.events.BrowserEvent|
                                  null): any;
        handleKeyUpInternal(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        isSupportedCommand(command: string): boolean;
        processParagraphTagsInternal(
            e: ಠ_ಠ.clutz.goog.events.Event|null, split: boolean): void;
        queryCommandValue(command: string): any;
    }
}
declare module 'goog:goog.editor.plugins.TagOnEnterHandler' {
    import alias = ಠ_ಠ.clutz.goog.editor.plugins.TagOnEnterHandler;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
    /**
     * Encapsulates undo/redo logic using a custom undo stack (i.e. not browser
     * built-in). Browser built-in undo stacks are too flaky (e.g. IE's gets
     * clobbered on DOM modifications). Also, this allows interleaving
     * non-editing commands into the undo stack via the UndoRedoManager.
     */
    class UndoRedo extends UndoRedo_Instance {}
    class UndoRedo_Instance extends ಠ_ಠ.clutz.goog.editor.Plugin_Instance {
        /**
         * Encapsulates undo/redo logic using a custom undo stack (i.e. not
         * browser built-in). Browser built-in undo stacks are too flaky (e.g.
         * IE's gets clobbered on DOM modifications). Also, this allows
         * interleaving non-editing commands into the undo stack via the
         * UndoRedoManager.
         * @param opt_manager An undo redo manager to be used by this plugin. If
         * none is provided one is created.
         */
        constructor(opt_manager?: ಠ_ಠ.clutz.goog.editor.plugins.UndoRedoManager|
                    null);
        currentStates_: GlobalObject;
        eventHandlers_: GlobalObject;
        /**
         * Clear the undo/redo stack.
         */
        clearHistory(): void;
        disable(fieldObject: ಠ_ಠ.clutz.goog.editor.Field|null): void;
        disposeInternal(): void;
        enable(fieldObject: ಠ_ಠ.clutz.goog.editor.Field|null): void;
        execCommand(command: string, ...var_args: any[]): any;
        /**
         * This is so subclasses can deal with multifield undo-redo.
         */
        getCurrentEventTarget(): ಠ_ಠ.clutz.goog.editor.Field|null;
        /**
         * This is so subclasses can deal with multifield undo-redo.
         */
        getCurrentFieldObject(): ಠ_ಠ.clutz.goog.editor.Field|null;
        /**
         * This is so subclasses can deal with multifield undo-redo.
         * @param fieldHashCode The Field's hashcode.
         */
        getFieldObjectForHash(fieldHashCode: string):
            ಠ_ಠ.clutz.goog.editor.Field|null;
        getTrogClassId(): string;
        handleKeyboardShortcut(
            e: ಠ_ಠ.clutz.goog.events.BrowserEvent, key: string,
            isModifierPressed: boolean): boolean;
        isEnabled(fieldObject: ಠ_ಠ.clutz.goog.editor.Field|null): boolean;
        /**
         * Whether the string corresponds to a command this plugin handles.
         * @param command Command string to check.
         */
        isSupportedCommand(command: string): boolean;
        /**
         * The logger for this class.
         */
        logger: ಠ_ಠ.clutz.goog.debug.Logger|null;
        queryCommandValue(command: string): any;
        /**
         * Refreshes the current state of the editable field as maintained by
         * undo-redo, without adding any undo-redo states to the stack.
         * @param fieldObject The editable field.
         */
        refreshCurrentState(fieldObject: ಠ_ಠ.clutz.goog.editor.Field|
                            null): void;
        /**
         * Restores the state of the editable field.
         * @param state The state initiating the restore.
         * @param content The content to restore.
         * @param cursorPosition The cursor position within the content.
         */
        restoreState(
            state: ಠ_ಠ.clutz.goog.editor.plugins.UndoRedo.UndoState_|null,
            content: string,
            cursorPosition:
                ಠ_ಠ.clutz.goog.editor.plugins.UndoRedo.CursorPosition_|
            null): void;
        /**
         * Set the max undo stack depth (not the real memory usage).
         * @param depth Depth of the stack.
         */
        setMaxUndoDepth(depth: number): void;
        /**
         * Set the undo-redo manager used by this plugin. Any state on a
         * previous undo-redo manager is lost.
         * @param manager The undo-redo manager.
         */
        setUndoRedoManager(manager:
                               ಠ_ಠ.clutz.goog.editor.plugins.UndoRedoManager|
                           null): void;
        /**
         * Unregisters and disables the fieldObject with this plugin. Thie does
         * *not* clobber the undo stack for the fieldObject though.
         * TODO(user): For the multifield version, we really should add a way to
         * ignore undo actions on field's that have been made uneditable.
         * This is probably as simple as skipping over entries in the undo stack
         * that have a hashcode of an uneditable field.
         * @param fieldObject The field to register with the plugin.
         */
        unregisterFieldObject(fieldObject: ಠ_ಠ.clutz.goog.editor.Field|
                              null): void;
    }
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins.UndoRedo {
    type COMMAND = string&{clutzEnumBrand: never};
    var COMMAND: {
        REDO: COMMAND,
        UNDO: COMMAND,
    };
    class CursorPosition_ extends CursorPosition__Instance {}
    class CursorPosition__Instance {
        private noStructuralTyping_: any;
        field_: ಠ_ಠ.clutz.goog.editor.Field|null;
        isValid(): boolean;
        /**
         * Makes the browser's selection match the cursor position.
         */
        select(): void;
        toString(): string;
    }
    class UndoState_ extends UndoState__Instance {}
    class UndoState__Instance extends
        ಠ_ಠ.clutz.goog.editor.plugins.UndoRedoState_Instance {
        /**
         * The hash code for the field whose content is being saved.
         */
        fieldHashCode: string;
        /**
         * Checks if the *contents* of two
         * {@code goog.editor.plugins.UndoRedo.UndoState_}s are the same.  We
         * don't bother checking the cursor position (that's not something we'd
         * want to save anyway).
         * @param rhs The state to compare.
         */
        equals(rhs: ಠ_ಠ.clutz.goog.editor.plugins.UndoRedoState|null): boolean;
        /**
         * Performs the redo operation represented by this state.
         */
        redo(): void;
        /**
         * Adds redo information to this state. This method should be called
         * before the state is added onto the undo stack.
         * @param content The content to restore on a redo.
         * @param cursorPosition The cursor position to restore on a redo.
         */
        setRedoState(
            content: string,
            cursorPosition:
                ಠ_ಠ.clutz.goog.editor.plugins.UndoRedo.CursorPosition_|
            null): void;
        /**
         * Updates the undo portion of this state. Should only be used to update
         * the current state of an editable field, which is not yet on the undo
         * stack after an undo or redo operation. You should never be modifying
         * states on the stack!
         * @param content The current content.
         * @param cursorPosition The current cursor position.
         */
        setUndoState(
            content: string,
            cursorPosition:
                ಠ_ಠ.clutz.goog.editor.plugins.UndoRedo.CursorPosition_|
            null): void;
        /**
         * Performs the undo operation represented by this state.
         */
        undo(): void;
    }
}
declare module 'goog:goog.editor.plugins.UndoRedo' {
    import alias = ಠ_ಠ.clutz.goog.editor.plugins.UndoRedo;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
    /**
     * Manages undo and redo operations through a series of {@code
     * UndoRedoState}s maintained on undo and redo stacks.
     */
    class UndoRedoManager extends UndoRedoManager_Instance {}
    class UndoRedoManager_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * Add state to the undo stack. This clears the redo stack.
         * @param state The state to add to the undo stack.
         */
        addState(state: ಠ_ಠ.clutz.goog.editor.plugins.UndoRedoState|null): void;
        /**
         * Clears the undo and redo stacks.
         */
        clearHistory(): void;
        hasRedoState(): boolean;
        hasUndoState(): boolean;
        /**
         * Performs the redo operation of the state at the top of the redo
         * stack, moving that state to the top of the undo stack. If redo undo
         * stack is empty, does nothing.
         */
        redo(): void;
        redoPeek(): ಠ_ಠ.clutz.goog.editor.plugins.UndoRedoState|null|undefined;
        /**
         * Set the max undo stack depth (not the real memory usage).
         * @param depth Depth of the stack.
         */
        setMaxUndoDepth(depth: number): void;
        /**
         * Performs the undo operation of the state at the top of the undo
         * stack, moving that state to the top of the redo stack. If the undo
         * stack is empty, does nothing.
         */
        undo(): void;
        undoPeek(): ಠ_ಠ.clutz.goog.editor.plugins.UndoRedoState|null|undefined;
    }
}
declare module 'goog:goog.editor.plugins.UndoRedoManager' {
    import alias = ಠ_ಠ.clutz.goog.editor.plugins.UndoRedoManager;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins.UndoRedoManager {
    /**
     * Event types for the events dispatched by undo-redo manager.
     */
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        BEFORE_REDO: EventType,
        BEFORE_UNDO: EventType,
        STATE_ADDED: EventType,
        STATE_CHANGE: EventType,
    };
}
declare module 'goog:goog.editor.plugins.UndoRedoManager.EventType' {
    import alias = ಠ_ಠ.clutz.goog.editor.plugins.UndoRedoManager.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
    /**
     * Represents an undo and redo action for a particular state transition.
     */
    class UndoRedoState extends UndoRedoState_Instance {
        /**
         * Event type for events indicating that this state has completed an
         * undo or redo operation.
         */
        static ACTION_COMPLETED: string;
    }
    class UndoRedoState_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * Represents an undo and redo action for a particular state transition.
         * @param asynchronous Whether the undo or redo actions for this state
         * complete asynchronously. If true, then this state must fire an
         * ACTION_COMPLETED event when undo or redo is complete.
         */
        constructor(asynchronous: boolean);
        /**
         * Checks if two undo-redo states are the same.
         * @param state The state to compare.
         */
        equals(a: ಠ_ಠ.clutz.goog.editor.plugins.UndoRedoState|null): boolean;
        isAsynchronous(): boolean;
        /**
         * Redoes the action represented by this state.
         */
        redo(): void;
        /**
         * Undoes the action represented by this state.
         */
        undo(): void;
    }
}
declare module 'goog:goog.editor.plugins.UndoRedoState' {
    import alias = ಠ_ಠ.clutz.goog.editor.plugins.UndoRedoState;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.range {
    /**
     * Saves the range using carets, but normalizes text nodes when carets
     * are removed.
     */
    class NormalizedCaretRange_ extends NormalizedCaretRange__Instance {}
    class NormalizedCaretRange__Instance extends
        ಠ_ಠ.clutz.goog.dom.SavedCaretRange_Instance {
        /**
         * Normalizes text nodes whenever carets are removed from the document.
         * @param opt_range A range whose offsets have already been adjusted for
         * caret removal; it will be adjusted and returned if it is also
         * affected by post-removal operations, such as text node normalization.
         */
        removeCarets(opt_range?: ಠ_ಠ.clutz.goog.dom.AbstractRange|
                     null): ಠ_ಠ.clutz.goog.dom.AbstractRange|null|undefined;
    }
    /**
     * Given a range, expand the range to include outer tags if the full
     * contents of those tags are entirely selected.  This essentially changes
     * the dom position, but not the visible position of the range. Ex.
     * <code><li>foo</li></code> if "foo" is selected, instead of returning
     * start and end nodes as the foo text node, return the li.
     * @param range The range.
     * @param opt_stopNode Optional node to stop expanding past.
     */
    function expand(
        range: ಠ_ಠ.clutz.goog.dom.AbstractRange|null,
        opt_stopNode?: Node|null): ಠ_ಠ.clutz.goog.dom.AbstractRange;
    /**
     * Get the deepest point in the DOM that's equivalent to the endpoint of the
     * given range.
     * @param range A range.
     * @param atStart True for the start point, false for the end point.
     */
    function getDeepEndPoint(
        range: ಠ_ಠ.clutz.goog.dom.AbstractRange|null,
        atStart: boolean): ಠ_ಠ.clutz.goog.editor.range.Point;
    /**
     * Returns whether the given range intersects with any instance of the given
     * tag.
     * @param range The range to check.
     * @param tagName The name of the tag.
     */
    function intersectsTag(
        range: ಠ_ಠ.clutz.goog.dom.AbstractRange|null,
        tagName: ಠ_ಠ.clutz.goog.dom.TagName<any>): boolean;
    /**
     * Checks if a range is completely inside an editable region.
     * @param range The range to test.
     */
    function isEditable(range: ಠ_ಠ.clutz.goog.dom.AbstractRange|null): boolean;
    /**
     * Given a range and an element, create a narrower range that is limited to
     * the boundaries of the element. If the range starts (or ends) outside the
     * element, the narrowed range's start point (or end point) will be the
     * leftmost (or rightmost) leaf of the element.
     * @param range The range.
     * @param el The element to limit the range to.
     */
    function narrow(
        range: ಠ_ಠ.clutz.goog.dom.AbstractRange|null,
        el: GlobalElement|null): ಠ_ಠ.clutz.goog.dom.AbstractRange|null;
    /**
     * Given a range in the current DOM, create a factory for a range that
     * represents the same selection in a normalized DOM. The factory function
     * should be invoked after the DOM is normalized.
     *
     * All browsers do a bad job preserving ranges across DOM normalization.
     * The issue is best described in this 5-year-old bug report:
     * https://bugzilla.mozilla.org/show_bug.cgi?id=191864
     * For most applications, this isn't a problem. The browsers do a good job
     * handling un-normalized text, so there's usually no reason to normalize.
     *
     * The exception to this rule is the rich text editing commands
     * execCommand and queryCommandValue, which will fail often if there are
     * un-normalized text nodes.
     *
     * The factory function creates new ranges so that we can normalize the DOM
     * without problems. It must be created before any normalization happens,
     * and invoked after normalization happens.
     * @param range The range to normalize. It may become invalid after
     * body.normalize() is called.
     */
    function normalize(range: ಠ_ಠ.clutz.goog.dom.AbstractRange|null): () =>
        ಠ_ಠ.clutz.goog.dom.AbstractRange | null;
    /**
     * Normalizes the given node.
     * @param node The node to normalize.
     */
    function normalizeNode(node: Node|null): void;
    /**
     * Position the cursor immediately to the left or right of "node".
     * In Firefox, the selection parent is outside of "node", so the cursor can
     * effectively be moved to the end of a link node, without being considered
     * inside of it.
     * Note: This does not always work in WebKit. In particular, if you try to
     * place a cursor to the right of a link, typing still puts you in the link.
     * Bug: http://bugs.webkit.org/show_bug.cgi?id=17697
     * @param node The node to position the cursor relative to.
     * @param toLeft True to place it to the left, false to the right.
     */
    function placeCursorNextTo(
        node: Node|null, toLeft: boolean): ಠ_ಠ.clutz.goog.dom.AbstractRange;
    /**
     * Normalizes the node, preserving a range of the document.
     *
     * May also normalize things outside the node, if it is more efficient to do
     * so.
     * @param node The node to normalize.
     * @param range The range to normalize.
     */
    function rangePreservingNormalize(
        node: Node|null, range: ಠ_ಠ.clutz.goog.dom.AbstractRange|null):
        ಠ_ಠ.clutz.goog.dom.AbstractRange|null;
    /**
     * Saves the range by inserting carets into the HTML.
     *
     * Unlike the regular saveUsingCarets, this SavedRange normalizes text
     * nodes. Browsers have other bugs where they don't handle split text nodes
     * in contentEditable regions right.
     * @param range The abstract range object.
     */
    function saveUsingNormalizedCarets(range: ಠ_ಠ.clutz.goog.dom.AbstractRange|
                                       null):
        ಠ_ಠ.clutz.goog.dom.SavedCaretRange;
    /**
     * Cause the window's selection to be the start of this node.
     * @param node The node to select the start of.
     */
    function selectNodeStart(node: Node|null): void;
    /**
     * Normalizes the node, preserving the selection of the document.
     *
     * May also normalize things outside the node, if it is more efficient to do
     * so.
     * @param node The node to normalize.
     */
    function selectionPreservingNormalize(node: Node|null): void;
}
declare module 'goog:goog.editor.range' {
    import alias = ಠ_ಠ.clutz.goog.editor.range;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.range {
    /**
     * One endpoint of a range, represented as a Node and and offset.
     */
    class Point extends Point_Instance {
        /**
         * Construct the deepest possible point in the DOM that's equivalent
         * to the given point, expressed as a node and an offset.
         * @param node The node containing the point.
         * @param offset The offset of the point from the node.
         * @param opt_trendLeft Notice that a (node, offset) pair may be
         * equivalent to more than one descendent (node, offset) pair in the
         * DOM. By default, we trend rightward. If this parameter is true, then
         * we trend leftward. The tendency to fall rightward by default is for
         * consistency with other range APIs (like placeCursorNextTo).
         * @param opt_stopOnChildlessElement If true, and we encounter a Node
         * which is an Element that cannot have children, we return a Point
         * based on its parent rather than that Node itself.
         */
        static createDeepestPoint(
            node: Node|null, offset: number, opt_trendLeft?: boolean,
            opt_stopOnChildlessElement?: boolean):
            ಠ_ಠ.clutz.goog.editor.range.Point;
        /**
         * Construct a point at the very end of the given node.
         * @param node The node to create a point for.
         */
        static getPointAtEndOfNode(node: Node|
                                   null): ಠ_ಠ.clutz.goog.editor.range.Point;
    }
    class Point_Instance {
        private noStructuralTyping_: any;
        /**
         * One endpoint of a range, represented as a Node and and offset.
         * @param node The node containing the point.
         * @param offset The offset of the point into the node.
         */
        constructor(node: Node|null, offset: number);
        /**
         * The node containing the point.
         */
        node: Node|null;
        /**
         * The offset of the point into the node.
         */
        offset: number;
        /**
         * Gets the point of this point's node in the DOM.
         */
        getParentPoint(): ಠ_ಠ.clutz.goog.editor.range.Point;
    }
}
declare module 'goog:goog.editor.range.Point' {
    import alias = ಠ_ಠ.clutz.goog.editor.range.Point;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.editor.style {
    /**
     * Return the first ancestor of this node that is a container, inclusive.
     * @param node Node to find the container of.
     */
    function getContainer(node: Node|null): GlobalElement|null;
    /**
     * Returns true if the element is a container of other non-inline HTML
     * Note that span, strong and em tags, being inline can only contain
     * other inline elements and are thus, not containers. Containers are
     * elements that should not be broken up when wrapping selections with a
     * node of an inline block styling.
     * @param element The element to check.
     */
    function isContainer(element: Node|null): boolean;
    /**
     * Checks whether the given element inherits display: block.
     * @param node The Node to check.
     */
    function isDisplayBlock(node: Node): boolean;
    /**
     * Make the given element selectable.
     *
     * For IE this simply turns off the "unselectable" property.
     *
     * Under FF no descendent of an unselectable node can be selectable:
     *
     * https://bugzilla.mozilla.org/show_bug.cgi?id=203291
     *
     * So we make each ancestor of node selectable, while trying to preserve the
     * unselectability of other nodes along that path
     *
     * This may cause certain text nodes which should be unselectable, to become
     * selectable. For example:
     *
     * <div id=div1 style="-moz-user-select: none">
     * Text1
     * <span id=span1>Text2</span>
     * </div>
     *
     * If we call makeSelectable on span1, then it will cause "Text1" to become
     * selectable, since it had to make div1 selectable in order for span1 to be
     * selectable.
     *
     * If "Text1" were enclosed within a `<p>` or `<span>`, then this problem
     * would not arise.  Text nodes do not have styles, so its style can't be
     * set to unselectable.
     * @param element The element to make selectable.
     */
    function makeSelectable(element: GlobalElement): void;
    /**
     * Makes the given element unselectable, as well as all of its children,
     * except for text areas, text, file and url inputs.
     * @param element The element to make unselectable.
     * @param eventHandler An EventHandler to register the event with. Assumes
     * when the node is destroyed, the eventHandler's listeners are destroyed as
     * well.
     */
    function makeUnselectable(
        element: GlobalElement|null,
        eventHandler: ಠ_ಠ.clutz.goog.events.EventHandler<any>|null): void;
}
declare module 'goog:goog.editor.style' {
    import alias = ಠ_ಠ.clutz.goog.editor.style;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
    /**
     * Event wrapper for action handling. Fires when an element is activated
     * either by clicking it or by focusing it and pressing Enter.
     */
    class ActionEventWrapper_ extends ActionEventWrapper__Instance {}
    class ActionEventWrapper__Instance implements
        ಠ_ಠ.clutz.goog.events.EventWrapper {
        private noStructuralTyping_: any;
        /**
         * Adds an event listener using the wrapper on a DOM Node or an object
         * that has implemented {@link goog.events.EventTarget}. A listener can
         * only be added once to an object.
         * @param target The target to listen to events on.
         * @param listener Callback method, or an object with a handleEvent
         * function.
         * @param opt_capt Whether to fire in capture phase (defaults to false).
         * @param opt_scope Element in whose scope to call the listener.
         * @param opt_eventHandler Event handler to add listener to.
         */
        listen(
            target: GlobalEventTarget|null|ಠ_ಠ.clutz.goog.events.Listenable,
            listener: ((a?: any) => any)|{handleEvent: (a?: any) => any}|null,
            opt_capt?: boolean, opt_scope?: GlobalObject|null,
            opt_eventHandler?: ಠ_ಠ.clutz.goog.events.EventHandler<any>|
            null): void;
        /**
         * Removes an event listener added using
         * goog.events.EventWrapper.listen.
         * @param target The node to remove listener from.
         * @param listener Callback method, or an object with a handleEvent
         * function.
         * @param opt_capt Whether to fire in capture phase (defaults to false).
         * @param opt_scope Element in whose scope to call the listener.
         * @param opt_eventHandler Event handler to remove listener from.
         */
        unlisten(
            target: GlobalEventTarget|null|ಠ_ಠ.clutz.goog.events.Listenable,
            listener: ((a?: any) => any)|{handleEvent: (a?: any) => any}|null,
            opt_capt?: boolean, opt_scope?: GlobalObject|null,
            opt_eventHandler?: ಠ_ಠ.clutz.goog.events.EventHandler<any>|
            null): void;
    }
    var CAPTURE_SIMULATION_MODE: number;
    /**
     * Dispatches an event (or event like object) and calls all listeners
     * listening for events of this type. The type of the event is decided by
     * the type property on the event object.
     *
     * If any of the listeners returns false OR calls preventDefault then this
     * function will return false.  If one of the capture listeners calls
     * stopPropagation, then the bubble listeners won't fire.
     * @param src The event target.
     * @param e Event object.
     */
    function dispatchEvent(
        src: ಠ_ಠ.clutz.goog.events.Listenable|null,
        e: string|GlobalObject|null): boolean;
    /**
     * Provides a nice string showing the normalized event objects public
     * members
     * @param e Event Object.
     */
    function expose(e: GlobalObject|null): string;
    /**
     * Fires a listener with a set of arguments
     * @param listener The listener object to call.
     * @param eventObject The event object to pass to the listener.
     */
    function fireListener(
        listener: ಠ_ಠ.clutz.goog.events.Listener|null,
        eventObject: GlobalObject|null): any;
    /**
     * Fires an object's listeners of a particular type and phase
     * @param obj Object whose listeners to call.
     * @param type Event type.
     * @param capture Which event phase.
     * @param eventObject Event object to be passed to listener.
     */
    function fireListeners(
        obj: GlobalObject|null, type: string|ಠ_ಠ.clutz.goog.events.EventId<any>,
        capture: boolean, eventObject: GlobalObject|null): boolean;
    /**
     * Gets the goog.events.Listener for the event or null if no such listener
     * is in use.
     * @param src The target from which to get listeners.
     * @param type The type of the event.
     * @param listener The listener function to get.
     * @param opt_capt In DOM-compliant browsers, this determines whether the
     * listener is fired during the capture or bubble phase of the event.
     * @param opt_handler Element in whose scope to call the listener.
     */
    function getListener<EVENTOBJ = any>(
        src: GlobalEventTarget | null | ಠ_ಠ.clutz.goog.events.Listenable,
        type: string | null | ಠ_ಠ.clutz.goog.events.EventId<EVENTOBJ>,
        listener: ((a: EVENTOBJ) => any) | {handleEvent: (a?: any) => any} |
            null,
        opt_capt?: boolean, opt_handler?: GlobalObject | null):
        ಠ_ಠ.clutz.goog.events.ListenableKey|null;
    /**
     * Gets the listeners for a given object, type and capture phase.
     * @param obj Object to get listeners for.
     * @param type Event type.
     * @param capture Capture phase?.
     */
    function getListeners(
        obj: GlobalObject|null, type: string|ಠ_ಠ.clutz.goog.events.EventId<any>,
        capture: boolean): ಠ_ಠ.clutz.goog.events.Listener[]|null;
    /**
     * Helper function for returning a proxy function.
     */
    function getProxy(): (...a: any[]) => any;
    /**
     * Gets the total number of listeners currently in the system.
     */
    function getTotalListenerCount(): number;
    /**
     * Creates a unique event id.
     * @param identifier The identifier.
     */
    function getUniqueId(identifier: string): string;
    /**
     * Returns whether an event target has any active listeners matching the
     * specified signature. If either the type or capture parameters are
     * unspecified, the function will match on the remaining criteria.
     * @param obj Target to get listeners for.
     * @param opt_type Event type.
     * @param opt_capture Whether to check for capture or bubble-phase
     * listeners.
     */
    function hasListener(
        obj: GlobalEventTarget|null|ಠ_ಠ.clutz.goog.events.Listenable,
        opt_type?: string|ಠ_ಠ.clutz.goog.events.EventId<any>,
        opt_capture?: boolean): boolean;
    /**
     * Adds an event listener for a specific event on a native event
     * target (such as a DOM element) or an object that has implemented
     * {@link goog.events.Listenable}. A listener can only be added once
     * to an object and if it is added again the key for the listener is
     * returned. Note that if the existing listener is a one-off listener
     * (registered via listenOnce), it will no longer be a one-off
     * listener after a call to listen().
     * @param src The node to listen to events on.
     * @param type Event type or array of event types.
     * @param listener Callback method, or an object with a handleEvent
     * function. WARNING: passing an Object is now softly deprecated.
     * @param opt_handler Element in whose scope to call the listener.
     */
    function listen<T = any, EVENTOBJ = any>(
        src: GlobalEventTarget | null | ಠ_ಠ.clutz.goog.events.Listenable,
        type: string | string[] | null |
            ಠ_ಠ.clutz.goog.events.EventId<EVENTOBJ>|
            ಠ_ಠ.clutz.goog.events.EventId<EVENTOBJ>[],
        listener: ((a: EVENTOBJ) => any) | {handleEvent: (a?: any) => any} |
            null,
        opt_options?: boolean | AddEventListenerOptions,
        opt_handler?: T): number|ಠ_ಠ.clutz.goog.events.ListenableKey|null;
    /**
     * Adds an event listener for a specific event on a native event
     * target (such as a DOM element) or an object that has implemented
     * {@link goog.events.Listenable}. After the event has fired the event
     * listener is removed from the target.
     *
     * If an existing listener already exists, listenOnce will do
     * nothing. In particular, if the listener was previously registered
     * via listen(), listenOnce() will not turn the listener into a
     * one-off listener. Similarly, if there is already an existing
     * one-off listener, listenOnce does not modify the listeners (it is
     * still a once listener).
     * @param src The node to listen to events on.
     * @param type Event type or array of event types.
     * @param listener Callback method.
     * @param opt_handler Element in whose scope to call the listener.
     */
    function listenOnce<T = any, EVENTOBJ = any>(
        src: GlobalEventTarget | null | ಠ_ಠ.clutz.goog.events.Listenable,
        type: string | string[] | null |
            ಠ_ಠ.clutz.goog.events.EventId<EVENTOBJ>|
            ಠ_ಠ.clutz.goog.events.EventId<EVENTOBJ>[],
        listener: ((a: EVENTOBJ) => any) | {handleEvent: (a?: any) => any} |
            null,
        opt_options?: boolean | AddEventListenerOptions,
        opt_handler?: T): number|ಠ_ಠ.clutz.goog.events.ListenableKey|null;
    /**
     * Adds an event listener with a specific event wrapper on a DOM Node or an
     * object that has implemented {@link goog.events.Listenable}. A listener
     * can only be added once to an object.
     * @param src The target to listen to events on.
     * @param wrapper Event wrapper to use.
     * @param listener Callback method, or an object with a handleEvent
     * function.
     * @param opt_capt Whether to fire in capture phase (defaults to false).
     * @param opt_handler Element in whose scope to call the listener.
     */
    function listenWithWrapper<T = any>(
        src: GlobalEventTarget | null | ಠ_ಠ.clutz.goog.events.Listenable,
        wrapper: ಠ_ಠ.clutz.goog.events.EventWrapper | null,
        listener: ((a?: any) => any) | {handleEvent: (a?: any) => any} | null,
        opt_capt?: boolean, opt_handler?: T): void;
    /**
     * Installs exception protection for the browser event entry point using the
     * given error handler.
     * @param errorHandler Error handler with which to protect the entry point.
     */
    function protectBrowserEventEntryPoint(
        errorHandler: ಠ_ಠ.clutz.goog.debug.ErrorHandler|null): void;
    /**
     * Removes all listeners from an object. You can also optionally
     * remove listeners of a particular type.
     * @param obj Object to remove listeners from. Must be an EventTarget or a
     * goog.events.Listenable.
     * @param opt_type Type of event to remove. Default is all types.
     */
    function removeAll(
        obj: GlobalObject|null|undefined,
        opt_type?: string|ಠ_ಠ.clutz.goog.events.EventId<any>): number;
    /**
     * Removes an event listener which was added with listen().
     * @param src The target to stop listening to events on.
     * @param type Event type or array of event types to unlisten to.
     * @param listener The listener function to remove.
     * @param opt_options whether the listener is fired during the capture or
     * bubble phase of the event.
     * @param opt_handler Element in whose scope to call the listener.
     */
    function unlisten<EVENTOBJ = any>(
        src: GlobalEventTarget | null | ಠ_ಠ.clutz.goog.events.Listenable,
        type: string | string[] | null |
            ಠ_ಠ.clutz.goog.events.EventId<EVENTOBJ>|
            ಠ_ಠ.clutz.goog.events.EventId<EVENTOBJ>[],
        listener: ((a?: any) => any) | {handleEvent: (a?: any) => any} | null,
        opt_options?: boolean | EventListenerOptions,
        opt_handler?: GlobalObject | null): boolean|null;
    /**
     * Removes an event listener which was added with listen() by the key
     * returned by listen().
     * @param key The key returned by listen() for this event listener.
     */
    function unlistenByKey(key: number|ಠ_ಠ.clutz.goog.events.ListenableKey|
                           null): boolean;
    /**
     * Removes an event listener which was added with listenWithWrapper().
     * @param src The target to stop listening to events on.
     * @param wrapper Event wrapper to use.
     * @param listener The listener function to remove.
     * @param opt_capt In DOM-compliant browsers, this determines whether the
     * listener is fired during the capture or bubble phase of the event.
     * @param opt_handler Element in whose scope to call the listener.
     */
    function unlistenWithWrapper(
        src: GlobalEventTarget|null|ಠ_ಠ.clutz.goog.events.Listenable,
        wrapper: ಠ_ಠ.clutz.goog.events.EventWrapper|null,
        listener: ((a?: any) => any)|{handleEvent: (a?: any) => any}|null,
        opt_capt?: boolean, opt_handler?: GlobalObject|null): void;
    function wrapListener(listener: GlobalObject|null): (...a: any[]) => any;
}
declare module 'goog:goog.events' {
    import alias = ಠ_ಠ.clutz.goog.events;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
    /**
     * This class is used for the goog.events.ActionHandler.EventType.ACTION
     * event.
     */
    class ActionEvent extends ActionEvent_Instance {}
    class ActionEvent_Instance extends
        ಠ_ಠ.clutz.goog.events.BrowserEvent_Instance {
        /**
         * This class is used for the goog.events.ActionHandler.EventType.ACTION
         * event.
         * @param browserEvent Browser event object.
         */
        constructor(browserEvent: ಠ_ಠ.clutz.goog.events.BrowserEvent);
        type: string;
    }
}
declare module 'goog:goog.events.ActionEvent' {
    import alias = ಠ_ಠ.clutz.goog.events.ActionEvent;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
    /**
     * A wrapper around an element that you want to listen to ACTION events on.
     */
    class ActionHandler extends ActionHandler_Instance {}
    class ActionHandler_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * A wrapper around an element that you want to listen to ACTION events
         * on.
         * @param element The element or document to listen on.
         */
        constructor(element: GlobalElement|null|Document);
        disposeInternal(): void;
    }
}
declare module 'goog:goog.events.ActionHandler' {
    import alias = ಠ_ಠ.clutz.goog.events.ActionHandler;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events.ActionHandler {
    /**
     * Enum type for the events fired by the action handler
     */
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        ACTION: EventType,
        BEFOREACTION: EventType,
    };
}
declare module 'goog:goog.events.ActionHandler.EventType' {
    import alias = ಠ_ಠ.clutz.goog.events.ActionHandler.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
    /**
     * This class is used for the
     * goog.events.ActionHandler.EventType.BEFOREACTION event. BEFOREACTION
     * gives a chance to the application so the keyboard focus can be restored
     * back, if required.
     */
    class BeforeActionEvent extends BeforeActionEvent_Instance {}
    class BeforeActionEvent_Instance extends
        ಠ_ಠ.clutz.goog.events.BrowserEvent_Instance {
        /**
         * This class is used for the
         * goog.events.ActionHandler.EventType.BEFOREACTION event. BEFOREACTION
         * gives a chance to the application so the keyboard focus can be
         * restored back, if required.
         * @param browserEvent Browser event object.
         */
        constructor(browserEvent: ಠ_ಠ.clutz.goog.events.BrowserEvent);
        type: string;
    }
}
declare module 'goog:goog.events.BeforeActionEvent' {
    import alias = ಠ_ಠ.clutz.goog.events.BeforeActionEvent;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
    /**
     * Accepts a browser event object and creates a patched, cross browser event
     * object.
     * The content of this object will not be initialized if no event object is
     * provided. If this is the case, init() needs to be invoked separately.
     */
    class BrowserEvent extends BrowserEvent_Instance {
        /**
         * Static data for mapping mouse buttons.
         */
        static IEButtonMap: ಠ_ಠ.clutz.goog.vec.Number;
        /**
         * Static data for mapping mouse buttons.
         */
        static IE_BUTTON_MAP: ಠ_ಠ.clutz.goog.vec.Number;
        /**
         * Static data for mapping MSPointerEvent types to PointerEvent types.
         */
        static IE_POINTER_TYPE_MAP:
            {[key: number]: ಠ_ಠ.clutz.goog.events.BrowserEvent.PointerType};
    }
    class BrowserEvent_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
        /**
         * Accepts a browser event object and creates a patched, cross browser
         * event object. The content of this object will not be initialized if
         * no event object is provided. If this is the case, init() needs to be
         * invoked separately.
         * @param opt_e Browser event object.
         * @param opt_currentTarget Current target for event.
         */
        constructor(
            opt_e?: GlobalEvent|null,
            opt_currentTarget?: GlobalEventTarget|null);
        /**
         * Whether alt was pressed at time of event.
         */
        altKey: boolean;
        /**
         * Which mouse button was pressed.
         */
        button: number;
        /**
         * Keycode of key press.
         */
        charCode: number;
        /**
         * X-coordinate relative to the window.
         */
        clientX: number;
        /**
         * Y-coordinate relative to the window.
         */
        clientY: number;
        /**
         * Whether control was pressed at time of event.
         */
        ctrlKey: boolean;
        /**
         * Node that had the listener attached.
         */
        currentTarget?: Node|null;
        /**
         * Key of key press.
         */
        key: string;
        /**
         * Keycode of key press.
         */
        keyCode: number;
        /**
         * Whether the meta key was pressed at time of event.
         */
        metaKey: boolean;
        /**
         * X-coordinate relative to target.
         */
        offsetX: number;
        /**
         * Y-coordinate relative to target.
         */
        offsetY: number;
        /**
         * Whether the default platform modifier key was pressed at time of
         * event. (This is control for all platforms except Mac, where it's
         * Meta.)
         */
        platformModifierKey: boolean;
        pointerId: number;
        pointerType: string;
        /**
         * For mouseover and mouseout events, the related object for the event.
         */
        relatedTarget: Node|null;
        /**
         * X-coordinate relative to the monitor.
         */
        screenX: number;
        /**
         * Y-coordinate relative to the monitor.
         */
        screenY: number;
        /**
         * Whether shift was pressed at time of event.
         */
        shiftKey: boolean;
        /**
         * History state object, only set for PopState events where it's a copy
         * of the state object provided to pushState or replaceState.
         */
        state: GlobalObject|null;
        /**
         * Target that fired the event.
         */
        target: Node|null;
        type: string;
        getBrowserEvent(): GlobalEvent|null;
        /**
         * Accepts a browser event object and creates a patched, cross browser
         * event object.
         * @param e Browser event object.
         * @param opt_currentTarget Current target for event.
         */
        init(e: GlobalEvent|null, opt_currentTarget?: GlobalEventTarget|null):
            void;
        /**
         * Tests to see which button was pressed during the event. This is
         * really only useful in IE and Gecko browsers. And in IE, it's only
         * useful for mousedown/mouseup events, because click only fires for the
         * left mouse button.
         *
         * Safari 2 only reports the left button being clicked, and uses the
         * value '1' instead of 0. Opera only reports a mousedown event for the
         * middle button, and no mouse events for the right button. Opera has
         * default behavior for left and middle click that can only be
         * overridden via a configuration setting.
         *
         * There's a nice table of this mess at
         * http://www.unixpapa.com/js/mouse.html.
         * @param button The button to test for.
         */
        isButton(button: ಠ_ಠ.clutz.goog.events.BrowserEvent.MouseButton):
            boolean;
        /**
         * Whether this has an "action"-producing mouse button.
         *
         * By definition, this includes left-click on windows/linux, and
         * left-click without the ctrl key on Macs.
         */
        isMouseActionButton(): boolean;
        preventDefault(): void;
        stopPropagation(): void;
    }
}
declare module 'goog:goog.events.BrowserEvent' {
    import alias = ಠ_ಠ.clutz.goog.events.BrowserEvent;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events.BrowserEvent {
    /**
     * Normalized button constants for the mouse.
     */
    enum MouseButton {
        LEFT,
        MIDDLE,
        RIGHT,
    }
}
declare module 'goog:goog.events.BrowserEvent.MouseButton' {
    import alias = ಠ_ಠ.clutz.goog.events.BrowserEvent.MouseButton;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events.BrowserEvent {
    /**
     * Normalized pointer type constants for pointer events.
     */
    type PointerType = string&{clutzEnumBrand: never};
    var PointerType: {
        MOUSE: PointerType,
        PEN: PointerType,
        TOUCH: PointerType,
    };
}
declare module 'goog:goog.events.BrowserEvent.PointerType' {
    import alias = ಠ_ಠ.clutz.goog.events.BrowserEvent.PointerType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
    /**
     * Enum of browser capabilities.
     */
    type BrowserFeature = boolean&{clutzEnumBrand: never};
    var BrowserFeature: {
        HAS_HTML5_NETWORK_EVENT_SUPPORT: BrowserFeature,
        HAS_NAVIGATOR_ONLINE_PROPERTY: BrowserFeature,
        HAS_W3C_BUTTON: BrowserFeature,
        HAS_W3C_EVENT_SUPPORT: BrowserFeature,
        HTML5_NETWORK_EVENTS_FIRE_ON_BODY: BrowserFeature,
        MSPOINTER_EVENTS: BrowserFeature,
        PASSIVE_EVENTS: BrowserFeature,
        POINTER_EVENTS: BrowserFeature,
        SET_KEY_CODE_TO_PREVENT_DEFAULT: BrowserFeature,
        TOUCH_ENABLED: BrowserFeature,
    };
}
declare module 'goog:goog.events.BrowserFeature' {
    import alias = ಠ_ಠ.clutz.goog.events.BrowserFeature;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
    enum CaptureSimulationMode {
        OFF_AND_FAIL,
        OFF_AND_SILENT,
        ON,
    }
}
declare module 'goog:goog.events.CaptureSimulationMode' {
    import alias = ಠ_ಠ.clutz.goog.events.CaptureSimulationMode;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
    /**
     * A base class for event objects, so that they can support preventDefault
     * and stopPropagation.
     */
    class Event extends Event_Instance {
        /**
         * Prevents the default action. It is equivalent to
         * {@code e.preventDefault()}, but can be used as the callback argument
         * of
         * {@link goog.events.listen} without declaring another function.
         * @param e An event.
         */
        static preventDefault(e: ಠ_ಠ.clutz.goog.events.Event): void;
        /**
         * Stops the propagation of the event. It is equivalent to
         * {@code e.stopPropagation()}, but can be used as the callback argument
         * of
         * {@link goog.events.listen} without declaring another function.
         * @param e An event.
         */
        static stopPropagation(e: ಠ_ಠ.clutz.goog.events.Event): void;
    }
    class Event_Instance {
        private noStructuralTyping_: any;
        /**
         * A base class for event objects, so that they can support
         * preventDefault and stopPropagation.
         * @param type Event Type.
         * @param opt_target Reference to the object that is the target of this
         * event. It has to implement the {@code EventTarget} interface declared
         * at {@link http://developer.mozilla.org/en/DOM/EventTarget}.
         */
        constructor(
            type: string|ಠ_ಠ.clutz.goog.events.EventId<any>,
            opt_target?: GlobalObject|null);
        /**
         * Object that had the listener attached.
         */
        currentTarget?: GlobalObject|null;
        /**
         * Whether the default action has been prevented.
         * This is a property to match the W3C specification at
         * {@link http://www.w3.org/TR/DOM-Level-3-Events/
         * #events-event-type-defaultPrevented}.
         * Must be treated as read-only outside the class.
         */
        defaultPrevented: boolean;
        /**
         * Whether to cancel the event in internal capture/bubble processing for
         * IE.
         */
        propagationStopped_: boolean;
        /**
         * Return value for in internal capture/bubble processing for IE.
         */
        returnValue_: boolean;
        /**
         * TODO(tbreisacher): The type should probably be
         * EventTarget|goog.events.EventTarget.
         *
         * Target of the event.
         */
        target?: GlobalObject|null;
        /**
         * Event type.
         */
        type: string;
        /**
         * Prevents the default action, for example a link redirecting to a url.
         */
        preventDefault(): void;
        row: any;
        rowNode?: any|null;
        /**
         * Stops event propagation.
         */
        stopPropagation(): void;
    }
}
declare module 'goog:goog.events.Event' {
    import alias = ಠ_ಠ.clutz.goog.events.Event;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
    /**
     * Super class for objects that want to easily manage a number of event
     * listeners.  It allows a short cut to listen and also provides a quick way
     * to remove all events listeners belonging to this object.
     */
    class EventHandler<SCOPE = any> extends EventHandler_Instance<SCOPE> {}
    class EventHandler_Instance<SCOPE = any> extends
        ಠ_ಠ.clutz.goog.Disposable_Instance {
        /**
         * Super class for objects that want to easily manage a number of event
         * listeners.  It allows a short cut to listen and also provides a quick
         * way to remove all events listeners belonging to this object.
         * @param opt_scope Object in whose scope to call the listeners.
         */
        constructor(opt_scope?: SCOPE);
        handler_?: SCOPE;
        /**
         * Disposes of this EventHandler and removes all listeners that it
         * registered.
         */
        disposeInternal(): void;
        getListenerCount(): number;
        /**
         * Default event handler
         * @param e Event object.
         */
        handleEvent(e: ಠ_ಠ.clutz.goog.events.Event|null): any;
        /**
         * Listen to an event on a Listenable.  If the function is omitted then
         * the EventHandler's handleEvent method will be used.
         * @param src Event source.
         * @param type Event type to listen for or array of event types.
         * @param opt_fn Optional callback function to be used as the listener
         * or an object with handleEvent function.
         */
        listen<EVENTOBJ = any>(
            src: GlobalEventTarget|null|ಠ_ಠ.clutz.goog.events.Listenable,
            type: string|string[]|null|
            ಠ_ಠ.clutz.goog.events.EventId<EVENTOBJ>|
            ಠ_ಠ.clutz.goog.events.EventId<EVENTOBJ>[],
            opt_fn?: ((a: EVENTOBJ) => any)|{handleEvent: (a?: any) => any}|
            null,
            opt_options?: boolean|AddEventListenerOptions): this;
        /**
         * Listen to an event on a Listenable.  If the function is omitted, then
         * the EventHandler's handleEvent method will be used. After the event
         * has fired the event listener is removed from the target. If an array
         * of event types is provided, each event type will be listened to once.
         * @param src Event source.
         * @param type Event type to listen for or array of event types.
         * @param opt_fn Optional callback function to be used as the listener
         * or an object with handleEvent function.
         */
        listenOnce<EVENTOBJ = any>(
            src: GlobalEventTarget|null|ಠ_ಠ.clutz.goog.events.Listenable,
            type: string|string[]|null|
            ಠ_ಠ.clutz.goog.events.EventId<EVENTOBJ>|
            ಠ_ಠ.clutz.goog.events.EventId<EVENTOBJ>[],
            opt_fn?: ((a: EVENTOBJ) => any)|{handleEvent: (a?: any) => any}|
            null,
            opt_options?: boolean|AddEventListenerOptions): this;
        /**
         * Listen to an event on a Listenable.  If the function is omitted, then
         * the EventHandler's handleEvent method will be used. After the event
         * has fired the event listener is removed from the target. If an array
         * of event types is provided, each event type will be listened to once.
         * @param src Event source.
         * @param type Event type to listen for or array of event types.
         * @param fn Optional callback function to be used as the listener or an
         * object with handleEvent function.
         * @param capture Optional whether to use capture phase.
         * @param scope Object in whose scope to call the listener.
         */
        listenOnceWithScope<T = any, EVENTOBJ = any>(
            src: GlobalEventTarget|null|ಠ_ಠ.clutz.goog.events.Listenable,
            type: string|string[]|null|
            ಠ_ಠ.clutz.goog.events.EventId<EVENTOBJ>|
            ಠ_ಠ.clutz.goog.events.EventId<EVENTOBJ>[],
            fn: ((a: EVENTOBJ) => any)|{handleEvent: (a?: any) => any}|null|
            undefined,
            capture: boolean|undefined, scope: T): this;
        /**
         * Listen to an event on a Listenable.  If the function is omitted then
         * the EventHandler's handleEvent method will be used.
         * @param src Event source.
         * @param type Event type to listen for or array of event types.
         * @param fn Optional callback function to be used as the listener or an
         * object with handleEvent function.
         * @param scope Object in whose scope to call the listener.
         */
        listenWithScope<T = any, EVENTOBJ = any>(
            src: GlobalEventTarget|null|ಠ_ಠ.clutz.goog.events.Listenable,
            type: string|string[]|null|
            ಠ_ಠ.clutz.goog.events.EventId<EVENTOBJ>|
            ಠ_ಠ.clutz.goog.events.EventId<EVENTOBJ>[],
            fn: ((a: EVENTOBJ) => any)|{handleEvent: (a?: any) => any}|null|
            undefined,
            options: boolean|AddEventListenerOptions|undefined, scope: T): this;
        /**
         * Adds an event listener with a specific event wrapper on a DOM Node or
         * an object that has implemented {@link goog.events.EventTarget}. A
         * listener can only be added once to an object.
         * @param src The node to listen to events on.
         * @param wrapper Event wrapper to use.
         * @param listener Callback method, or an object with a handleEvent
         * function.
         * @param opt_capt Whether to fire in capture phase (defaults to false).
         */
        listenWithWrapper(
            src: GlobalEventTarget|null|ಠ_ಠ.clutz.goog.events.EventTarget,
            wrapper: ಠ_ಠ.clutz.goog.events.EventWrapper|null,
            listener: ((a?: any) => any)|{handleEvent: (a?: any) => any}|null,
            opt_capt?: boolean): this;
        /**
         * Adds an event listener with a specific event wrapper on a DOM Node or
         * an object that has implemented {@link goog.events.EventTarget}. A
         * listener can only be added once to an object.
         * @param src The node to listen to events on.
         * @param wrapper Event wrapper to use.
         * @param listener Optional callback function to be used as the listener
         * or an object with handleEvent function.
         * @param capture Optional whether to use capture phase.
         * @param scope Object in whose scope to call the listener.
         */
        listenWithWrapperAndScope<T = any>(
            src: GlobalEventTarget|null|ಠ_ಠ.clutz.goog.events.EventTarget,
            wrapper: ಠ_ಠ.clutz.goog.events.EventWrapper|null,
            listener: ((a?: any) => any)|{handleEvent: (a?: any) => any}|null,
            capture: boolean|undefined, scope: T): this;
        /**
         * Unlistens to all events.
         */
        removeAll(): void;
        /**
         * Unlistens on an event.
         * @param src Event source.
         * @param type Event type or array of event types to unlisten to.
         * @param opt_fn Optional callback function to be used as the listener
         * or an object with handleEvent function.
         * @param opt_scope Object in whose scope to call the listener.
         */
        unlisten<EVENTOBJ = any>(
            src: GlobalEventTarget|null|ಠ_ಠ.clutz.goog.events.Listenable,
            type: string|string[]|null|
            ಠ_ಠ.clutz.goog.events.EventId<EVENTOBJ>|
            ಠ_ಠ.clutz.goog.events.EventId<EVENTOBJ>[],
            opt_fn?: ((a: EVENTOBJ) => any)|{handleEvent: (a?: any) => any}|
            null,
            opt_options?: boolean|EventListenerOptions,
            opt_scope?: GlobalObject|null): this;
        /**
         * Removes an event listener which was added with listenWithWrapper().
         * @param src The target to stop listening to events on.
         * @param wrapper Event wrapper to use.
         * @param listener The listener function to remove.
         * @param opt_capt In DOM-compliant browsers, this determines whether
         * the listener is fired during the capture or bubble phase of the
         * event.
         * @param opt_scope Element in whose scope to call the listener.
         */
        unlistenWithWrapper(
            src: GlobalEventTarget|null|ಠ_ಠ.clutz.goog.events.EventTarget,
            wrapper: ಠ_ಠ.clutz.goog.events.EventWrapper|null,
            listener: ((a?: any) => any)|{handleEvent: (a?: any) => any}|null,
            opt_capt?: boolean, opt_scope?: GlobalObject|null): this;
    }
}
declare module 'goog:goog.events.EventHandler' {
    import alias = ಠ_ಠ.clutz.goog.events.EventHandler;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
    /**
     * A templated class that is used when registering for events. Typical
     * usage:
     *
     * /** @type {goog.events.EventId<MyEventObj>} *\
     * var myEventId = new goog.events.EventId(
     * goog.events.getUniqueId(('someEvent'));
     *
     * // No need to cast or declare here since the compiler knows the
     * // correct type of 'evt' (MyEventObj).
     * something.listen(myEventId, function(evt) {});
     */
    class EventId<T = any> extends EventId_Instance<T> {}
    class EventId_Instance<T = any> {
        private noStructuralTyping_: any;
        /**
         * A templated class that is used when registering for events. Typical
         * usage:
         *
         * /** @type {goog.events.EventId<MyEventObj>} *\
         * var myEventId = new goog.events.EventId(
         * goog.events.getUniqueId(('someEvent'));
         *
         * // No need to cast or declare here since the compiler knows the
         * // correct type of 'evt' (MyEventObj).
         * something.listen(myEventId, function(evt) {});
         */
        constructor(eventId: string);
        id: string;
        toString(): any;
    }
}
declare module 'goog:goog.events.EventId' {
    import alias = ಠ_ಠ.clutz.goog.events.EventId;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
    /**
     * A typedef for event like objects that are dispatchable via the
     * goog.events.dispatchEvent function. strings are treated as the type for a
     * goog.events.Event. Objects are treated as an extension of a new
     * goog.events.Event with the type property of the object being used as the
     * type of the Event.
     */
    type EventLike = string|GlobalObject|null;
}
declare module 'goog:goog.events.EventLike' {
    import alias = ಠ_ಠ.clutz.goog.events.EventLike;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
    /**
     * An implementation of {@code goog.events.Listenable} with full W3C
     * EventTarget-like support (capture/bubble mechanism, stopping event
     * propagation, preventing default actions).
     *
     * You may subclass this class to turn your class into a Listenable.
     *
     * Unless propagation is stopped, an event dispatched by an
     * EventTarget will bubble to the parent returned by
     * {@code getParentEventTarget}. To set the parent, call
     * {@code setParentEventTarget}. Subclasses that don't support
     * changing the parent can override the setter to throw an error.
     *
     * Example usage:
     * <pre>
     * var source = new goog.events.EventTarget();
     * function handleEvent(e) {
     * alert('Type: ' + e.type + '; Target: ' + e.target);
     * }
     * source.listen('foo', handleEvent);
     * // Or: goog.events.listen(source, 'foo', handleEvent);
     * ...
     * source.dispatchEvent('foo');  // will call handleEvent
     * ...
     * source.unlisten('foo', handleEvent);
     * // Or: goog.events.unlisten(source, 'foo', handleEvent);
     * </pre>
     */
    class EventTarget extends EventTarget_Instance {}
    class EventTarget_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance
        implements ಠ_ಠ.clutz.goog.events.Listenable {
        /**
         * Adds an event listener to the event target. The same handler can only
         * be added once per the type. Even if you add the same handler multiple
         * times using the same type then it will only be called once when the
         * event is dispatched.
         * @param type The type of the event to listen for
         * @param handler The function to handle the event. The handler can also
         * be an object that implements the handleEvent method which takes the
         * event object as argument.
         * @param opt_capture In DOM-compliant browsers, this determines whether
         * the listener is fired during the capture or bubble phase of the
         * event.
         * @param opt_handlerScope Object in whose scope to call the listener.
         */
        addEventListener(
            type: string|ಠ_ಠ.clutz.goog.events.EventId<any>,
            handler?: ((a?: any) => any)|{handleEvent: (a?: any) => any}|null,
            opt_capture?: boolean, opt_handlerScope?: GlobalObject|null): void;
        dispatchEvent(e: string|GlobalObject|null): boolean;
        /**
         * Removes listeners from this object.  Classes that extend EventTarget
         * may need to override this method in order to remove references to DOM
         * Elements and additional listeners.
         */
        disposeInternal(): void;
        fireListeners<EVENTOBJ = any>(
            type: string|ಠ_ಠ.clutz.goog.events.EventId<EVENTOBJ>,
            capture: boolean, eventObject: EVENTOBJ): boolean;
        getListener<SCOPE = any, EVENTOBJ = any>(
            type: string|ಠ_ಠ.clutz.goog.events.EventId<EVENTOBJ>,
            listener: (a: EVENTOBJ) => boolean | undefined, capture: boolean,
            opt_listenerScope?: SCOPE): ಠ_ಠ.clutz.goog.events.ListenableKey
            |null;
        getListeners<EVENTOBJ = any>(
            type: string|ಠ_ಠ.clutz.goog.events.EventId<any>,
            capture: boolean): ಠ_ಠ.clutz.goog.events.ListenableKey[];
        /**
         * Returns the parent of this event target to use for bubbling.
         */
        getParentEventTarget(): ಠ_ಠ.clutz.goog.events.EventTarget|null;
        hasListener<EVENTOBJ = any>(
            opt_type?: string|ಠ_ಠ.clutz.goog.events.EventId<EVENTOBJ>,
            opt_capture?: boolean): boolean;
        listen<SCOPE = any, EVENTOBJ = any>(
            type: string|ಠ_ಠ.clutz.goog.events.EventId<EVENTOBJ>,
            listener: (a: EVENTOBJ) => boolean | undefined,
            opt_useCapture?: boolean,
            opt_listenerScope?: SCOPE): ಠ_ಠ.clutz.goog.events.ListenableKey;
        listenOnce<SCOPE = any, EVENTOBJ = any>(
            type: string|ಠ_ಠ.clutz.goog.events.EventId<EVENTOBJ>,
            listener: (a: EVENTOBJ) => boolean | undefined,
            opt_useCapture?: boolean,
            opt_listenerScope?: SCOPE): ಠ_ಠ.clutz.goog.events.ListenableKey;
        removeAllListeners(opt_type?: string): number;
        /**
         * Removes an event listener from the event target. The handler must be
         * the same object as the one added. If the handler has not been added
         * then nothing is done.
         * @param type The type of the event to listen for.
         * @param handler The function to handle the event. The handler can also
         * be an object that implements the handleEvent method which takes the
         * event object as argument.
         * @param opt_capture In DOM-compliant browsers, this determines whether
         * the listener is fired during the capture or bubble phase of the
         * event.
         * @param opt_handlerScope Object in whose scope to call the listener.
         */
        removeEventListener(
            type: string,
            handler?: ((a?: any) => any)|{handleEvent: (a?: any) => any}|null,
            opt_capture?: boolean, opt_handlerScope?: GlobalObject|null): void;
        /**
         * Sets the parent of this event target to use for capture/bubble
         * mechanism.
         * @param parent Parent listenable (null if none).
         */
        setParentEventTarget(parent: ಠ_ಠ.clutz.goog.events.EventTarget|
                             null): void;
        /**
         * Sets the target to be used for {@code event.target} when firing
         * event. Mainly used for testing. For example, see
         * {@code goog.testing.events.mixinListenable}.
         * @param target The target.
         */
        setTargetForTesting(target: GlobalObject): void;
        unlisten<SCOPE = any, EVENTOBJ = any>(
            type: string|ಠ_ಠ.clutz.goog.events.EventId<EVENTOBJ>,
            listener: (a: EVENTOBJ) => boolean | undefined,
            opt_useCapture?: boolean, opt_listenerScope?: SCOPE): boolean;
        unlistenByKey(key: ಠ_ಠ.clutz.goog.events.ListenableKey): boolean;
    }
}
declare module 'goog:goog.events.EventTarget' {
    import alias = ಠ_ಠ.clutz.goog.events.EventTarget;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
    /**
     * Constants for event names.
     */
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        ABORT: EventType,
        ACTIVATE: EventType,
        AFTERPRINT: EventType,
        ANIMATIONEND: EventType,
        ANIMATIONITERATION: EventType,
        ANIMATIONSTART: EventType,
        APPINSTALLED: EventType,
        BEFORECOPY: EventType,
        BEFORECUT: EventType,
        BEFOREINPUT: EventType,
        BEFOREINSTALLPROMPT: EventType,
        BEFOREPASTE: EventType,
        BEFOREPRINT: EventType,
        BEFOREUNLOAD: EventType,
        BLUR: EventType,
        CANPLAY: EventType,
        CANPLAYTHROUGH: EventType,
        CHANGE: EventType,
        CLICK: EventType,
        COMPOSITIONEND: EventType,
        COMPOSITIONSTART: EventType,
        COMPOSITIONUPDATE: EventType,
        CONNECT: EventType,
        CONSOLEMESSAGE: EventType,
        CONTEXTMENU: EventType,
        CONTROLLERCHANGE: EventType,
        COPY: EventType,
        CUT: EventType,
        DBLCLICK: EventType,
        DEACTIVATE: EventType,
        DEVICEMOTION: EventType,
        DEVICEORIENTATION: EventType,
        DOMATTRMODIFIED: EventType,
        DOMCHARACTERDATAMODIFIED: EventType,
        DOMCONTENTLOADED: EventType,
        DOMNODEINSERTED: EventType,
        DOMNODEINSERTEDINTODOCUMENT: EventType,
        DOMNODEREMOVED: EventType,
        DOMNODEREMOVEDFROMDOCUMENT: EventType,
        DOMSUBTREEMODIFIED: EventType,
        DRAG: EventType,
        DRAGEND: EventType,
        DRAGENTER: EventType,
        DRAGLEAVE: EventType,
        DRAGOVER: EventType,
        DRAGSTART: EventType,
        DROP: EventType,
        DURATIONCHANGE: EventType,
        EMPTIED: EventType,
        ENDED: EventType,
        ERROR: EventType,
        EXIT: EventType,
        FETCH: EventType,
        FOCUS: EventType,
        FOCUSIN: EventType,
        FOCUSOUT: EventType,
        FOREIGNFETCH: EventType,
        GOTPOINTERCAPTURE: EventType,
        HASHCHANGE: EventType,
        HELP: EventType,
        INPUT: EventType,
        INSTALL: EventType,
        KEYDOWN: EventType,
        KEYPRESS: EventType,
        KEYUP: EventType,
        LOAD: EventType,
        LOADABORT: EventType,
        LOADCOMMIT: EventType,
        LOADEDDATA: EventType,
        LOADEDMETADATA: EventType,
        LOADREDIRECT: EventType,
        LOADSTART: EventType,
        LOADSTOP: EventType,
        LOSECAPTURE: EventType,
        LOSTPOINTERCAPTURE: EventType,
        MESSAGE: EventType,
        MESSAGEERROR: EventType,
        MOUSEDOWN: EventType,
        MOUSEENTER: EventType,
        MOUSELEAVE: EventType,
        MOUSEMOVE: EventType,
        MOUSEOUT: EventType,
        MOUSEOVER: EventType,
        MOUSEUP: EventType,
        MSGESTURECHANGE: EventType,
        MSGESTUREEND: EventType,
        MSGESTUREHOLD: EventType,
        MSGESTURESTART: EventType,
        MSGESTURETAP: EventType,
        MSGOTPOINTERCAPTURE: EventType,
        MSINERTIASTART: EventType,
        MSLOSTPOINTERCAPTURE: EventType,
        MSPOINTERCANCEL: EventType,
        MSPOINTERDOWN: EventType,
        MSPOINTERENTER: EventType,
        MSPOINTERHOVER: EventType,
        MSPOINTERLEAVE: EventType,
        MSPOINTERMOVE: EventType,
        MSPOINTEROUT: EventType,
        MSPOINTEROVER: EventType,
        MSPOINTERUP: EventType,
        OFFLINE: EventType,
        ONLINE: EventType,
        ORIENTATIONCHANGE: EventType,
        PAGEHIDE: EventType,
        PAGESHOW: EventType,
        PASTE: EventType,
        PAUSE: EventType,
        PLAY: EventType,
        PLAYING: EventType,
        POINTERCANCEL: EventType,
        POINTERDOWN: EventType,
        POINTERENTER: EventType,
        POINTERLEAVE: EventType,
        POINTERMOVE: EventType,
        POINTEROUT: EventType,
        POINTEROVER: EventType,
        POINTERUP: EventType,
        POPSTATE: EventType,
        PROPERTYCHANGE: EventType,
        RATECHANGE: EventType,
        READYSTATECHANGE: EventType,
        RESET: EventType,
        RESIZE: EventType,
        RESPONSIVE: EventType,
        RIGHTCLICK: EventType,
        SCROLL: EventType,
        SEEKED: EventType,
        SEEKING: EventType,
        SELECT: EventType,
        SELECTIONCHANGE: EventType,
        SELECTSTART: EventType,
        SIZECHANGED: EventType,
        SOURCECLOSED: EventType,
        SOURCEENDED: EventType,
        SOURCEOPEN: EventType,
        STALLED: EventType,
        STATECHANGE: EventType,
        STORAGE: EventType,
        SUBMIT: EventType,
        SUSPEND: EventType,
        TEXT: EventType,
        TEXTINPUT: EventType,
        TIMEUPDATE: EventType,
        TOUCHCANCEL: EventType,
        TOUCHEND: EventType,
        TOUCHMOVE: EventType,
        TOUCHSTART: EventType,
        TRANSITIONEND: EventType,
        UNLOAD: EventType,
        UNRESPONSIVE: EventType,
        UPDATE: EventType,
        UPDATEEND: EventType,
        UPDATEFOUND: EventType,
        UPDATESTART: EventType,
        VISIBILITYCHANGE: EventType,
        VOLUMECHANGE: EventType,
        WAITING: EventType,
        WHEEL: EventType,
    };
}
declare module 'goog:goog.events.EventType' {
    import alias = ಠ_ಠ.clutz.goog.events.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
    /**
     * Interface for event wrappers.
     */
    interface EventWrapper {
        /**
         * Adds an event listener using the wrapper on a DOM Node or an object
         * that has implemented {@link goog.events.EventTarget}. A listener can
         * only be added once to an object.
         * @param src The node to listen to events on.
         * @param listener Callback method, or an object with a handleEvent
         * function.
         * @param opt_capt Whether to fire in capture phase (defaults to false).
         * @param opt_scope Element in whose scope to call the listener.
         * @param opt_eventHandler Event handler to add listener to.
         */
        listen(
            src: GlobalEventTarget|null|ಠ_ಠ.clutz.goog.events.Listenable,
            listener: ((a?: any) => any)|{handleEvent: (a?: any) => any}|null,
            opt_capt?: boolean, opt_scope?: GlobalObject|null,
            opt_eventHandler?: ಠ_ಠ.clutz.goog.events.EventHandler<any>|
            null): void;
        /**
         * Removes an event listener added using
         * goog.events.EventWrapper.listen.
         * @param src The node to remove listener from.
         * @param listener Callback method, or an object with a handleEvent
         * function.
         * @param opt_capt Whether to fire in capture phase (defaults to false).
         * @param opt_scope Element in whose scope to call the listener.
         * @param opt_eventHandler Event handler to remove listener from.
         */
        unlisten(
            src: GlobalEventTarget|null|ಠ_ಠ.clutz.goog.events.Listenable,
            listener: ((a?: any) => any)|{handleEvent: (a?: any) => any}|null,
            opt_capt?: boolean, opt_scope?: GlobalObject|null,
            opt_eventHandler?: ಠ_ಠ.clutz.goog.events.EventHandler<any>|
            null): void;
    }
}
declare module 'goog:goog.events.EventWrapper' {
    import alias = ಠ_ಠ.clutz.goog.events.EventWrapper;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
    /**
     * A files drag and drop event detector. Gets an {@code element} as
     * parameter and fires {@code goog.events.FileDropHandler.EventType.DROP}
     * event when files are dropped in the {@code element}.
     */
    class FileDropHandler extends FileDropHandler_Instance {}
    class FileDropHandler_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * A files drag and drop event detector. Gets an {@code element} as
         * parameter and fires {@code
         * goog.events.FileDropHandler.EventType.DROP} event when files are
         * dropped in the {@code element}.
         * @param element The element or document to listen on.
         * @param opt_preventDropOutside Whether to prevent a drop on the area
         * outside the {@code element}. Default false.
         */
        constructor(
            element: GlobalElement|null|Document,
            opt_preventDropOutside?: boolean);
        disposeInternal(): void;
    }
}
declare module 'goog:goog.events.FileDropHandler' {
    import alias = ಠ_ಠ.clutz.goog.events.FileDropHandler;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events.FileDropHandler {
    /**
     * The types of events fired by this class.
     */
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        DROP: EventType,
    };
}
declare module 'goog:goog.events.FileDropHandler.EventType' {
    import alias = ಠ_ಠ.clutz.goog.events.FileDropHandler.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
    /**
     * This event handler allows you to catch focus events when descendants gain
     * or loses focus.
     */
    class FocusHandler extends FocusHandler_Instance {}
    class FocusHandler_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * This event handler allows you to catch focus events when descendants
         * gain or loses focus.
         * @param element The node to listen on.
         */
        constructor(element: GlobalElement|null|Document);
        disposeInternal(): void;
        /**
         * This handles the underlying events and dispatches a new event.
         * @param e The underlying browser event.
         */
        handleEvent(e: ಠ_ಠ.clutz.goog.events.BrowserEvent|null): void;
    }
}
declare module 'goog:goog.events.FocusHandler' {
    import alias = ಠ_ಠ.clutz.goog.events.FocusHandler;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events.FocusHandler {
    /**
     * Enum type for the events fired by the focus handler
     */
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        FOCUSIN: EventType,
        FOCUSOUT: EventType,
    };
}
declare module 'goog:goog.events.FocusHandler.EventType' {
    import alias = ಠ_ಠ.clutz.goog.events.FocusHandler.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
    /**
     * Dispatches high-level events for IMEs.
     */
    class ImeHandler extends ImeHandler_Instance {
        /**
         * Whether to use the composition events.
         */
        static USES_COMPOSITION_EVENTS: boolean;
    }
    class ImeHandler_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * Dispatches high-level events for IMEs.
         * @param el The element to listen on.
         */
        constructor(el: GlobalElement|null);
        disposeInternal(): void;
        isImeMode(): boolean;
    }
}
declare module 'goog:goog.events.ImeHandler' {
    import alias = ಠ_ಠ.clutz.goog.events.ImeHandler;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events.ImeHandler {
    /**
     * An event fired by ImeHandler.
     */
    class Event extends Event_Instance {}
    class Event_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
        /**
         * An event fired by ImeHandler.
         * @param type The type.
         * @param reason The trigger for this event.
         */
        constructor(
            type: ಠ_ಠ.clutz.goog.events.ImeHandler.EventType,
            reason: ಠ_ಠ.clutz.goog.events.BrowserEvent|null);
        /**
         * The event that triggered this.
         */
        reason: ಠ_ಠ.clutz.goog.events.BrowserEvent|null;
    }
}
declare module 'goog:goog.events.ImeHandler.Event' {
    import alias = ಠ_ಠ.clutz.goog.events.ImeHandler.Event;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events.ImeHandler {
    /**
     * Event types fired by ImeHandler. These events do not make any guarantees
     * about whether they were fired before or after the event in question.
     */
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        END: EventType,
        START: EventType,
        UPDATE: EventType,
    };
}
declare module 'goog:goog.events.ImeHandler.EventType' {
    import alias = ಠ_ಠ.clutz.goog.events.ImeHandler.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
    /**
     * This event handler will dispatch events when the user types into a text
     * input, password input or a textarea
     */
    class InputHandler extends InputHandler_Instance {}
    class InputHandler_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * This event handler will dispatch events when the user types into a
         * text input, password input or a textarea
         * @param element The element that you want to listen for input events
         * on.
         */
        constructor(element: GlobalElement|null);
        disposeInternal(): void;
        /**
         * This handles the underlying events and dispatches a new event as
         * needed.
         * @param e The underlying browser event.
         */
        handleEvent(e: ಠ_ಠ.clutz.goog.events.BrowserEvent|null): void;
    }
}
declare module 'goog:goog.events.InputHandler' {
    import alias = ಠ_ಠ.clutz.goog.events.InputHandler;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events.InputHandler {
    /**
     * Enum type for the events fired by the input handler
     */
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        INPUT: EventType,
    };
}
declare module 'goog:goog.events.InputHandler.EventType' {
    import alias = ಠ_ಠ.clutz.goog.events.InputHandler.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
    type Key = number|ಠ_ಠ.clutz.goog.events.ListenableKey|null;
}
declare module 'goog:goog.events.Key' {
    import alias = ಠ_ಠ.clutz.goog.events.Key;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
    /**
     * Key codes for common characters.
     *
     * This list is not localized and therefore some of the key codes are not
     * correct for non US keyboard layouts. See comments below.
     */
    enum KeyCodes {
        A,
        ALT,
        APOSTROPHE,
        AT_SIGN,
        B,
        BACKSLASH,
        BACKSPACE,
        C,
        CAPS_LOCK,
        CLOSE_SQUARE_BRACKET,
        COMMA,
        CONTEXT_MENU,
        CTRL,
        D,
        DASH,
        DELETE,
        DOWN,
        E,
        EIGHT,
        END,
        ENTER,
        EQUALS,
        ESC,
        F,
        F1,
        F10,
        F11,
        F12,
        F2,
        F3,
        F4,
        F5,
        F6,
        F7,
        F8,
        F9,
        FF_DASH,
        FF_EQUALS,
        FF_SEMICOLON,
        FIRST_MEDIA_KEY,
        FIVE,
        FOUR,
        G,
        H,
        HOME,
        I,
        INSERT,
        J,
        K,
        L,
        LAST_MEDIA_KEY,
        LEFT,
        M,
        MAC_ENTER,
        MAC_FF_META,
        MAC_WK_CMD_LEFT,
        MAC_WK_CMD_RIGHT,
        META,
        N,
        NINE,
        NUMLOCK,
        NUM_CENTER,
        NUM_DIVISION,
        NUM_EIGHT,
        NUM_FIVE,
        NUM_FOUR,
        NUM_MINUS,
        NUM_MULTIPLY,
        NUM_NINE,
        NUM_ONE,
        NUM_PERIOD,
        NUM_PLUS,
        NUM_SEVEN,
        NUM_SIX,
        NUM_THREE,
        NUM_TWO,
        NUM_ZERO,
        O,
        ONE,
        OPEN_SQUARE_BRACKET,
        P,
        PAGE_DOWN,
        PAGE_UP,
        PAUSE,
        PERIOD,
        PHANTOM,
        PLUS_SIGN,
        PRINT_SCREEN,
        Q,
        QUESTION_MARK,
        R,
        RIGHT,
        S,
        SCROLL_LOCK,
        SEMICOLON,
        SEVEN,
        SHIFT,
        SINGLE_QUOTE,
        SIX,
        SLASH,
        SPACE,
        T,
        TAB,
        THREE,
        TILDE,
        TWO,
        U,
        UP,
        V,
        VK_NONAME,
        W,
        WIN_IME,
        WIN_KEY,
        WIN_KEY_FF_LINUX,
        WIN_KEY_RIGHT,
        X,
        Y,
        Z,
        ZERO,
    }
}
declare module 'goog:goog.events.KeyCodes' {
    import alias = ಠ_ಠ.clutz.goog.events.KeyCodes;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
    /**
     * This class is used for the goog.events.KeyHandler.EventType.KEY event and
     * it overrides the key code with the fixed key code.
     */
    class KeyEvent extends KeyEvent_Instance {}
    class KeyEvent_Instance extends
        ಠ_ಠ.clutz.goog.events.BrowserEvent_Instance {
        /**
         * This class is used for the goog.events.KeyHandler.EventType.KEY event
         * and it overrides the key code with the fixed key code.
         * @param keyCode The adjusted key code.
         * @param charCode The unicode character code.
         * @param repeat Whether this event was generated by keyboard repeat.
         * @param browserEvent Browser event object.
         */
        constructor(
            keyCode: number, charCode: number, repeat: boolean,
            browserEvent: GlobalEvent|null);
        altKey: boolean;
        /**
         * Unicode character code.
         */
        charCode: number;
        /**
         * Keycode of key press.
         */
        keyCode: number;
        /**
         * True if this event was generated by keyboard auto-repeat (i.e., the
         * user is holding the key down.)
         */
        repeat: boolean;
        type: string;
    }
}
declare module 'goog:goog.events.KeyEvent' {
    import alias = ಠ_ಠ.clutz.goog.events.KeyEvent;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
    /**
     * A wrapper around an element that you want to listen to keyboard events
     * on.
     */
    class KeyHandler extends KeyHandler_Instance {}
    class KeyHandler_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * A wrapper around an element that you want to listen to keyboard
         * events on.
         * @param opt_element The element or document to listen on.
         * @param opt_capture Whether to listen for browser events in capture
         * phase (defaults to false).
         */
        constructor(
            opt_element?: GlobalElement|null|Document, opt_capture?: boolean);
        /**
         * Adds the proper key event listeners to the element.
         * @param element The element to listen on.
         * @param opt_capture Whether to listen for browser events in capture
         * phase (defaults to false).
         */
        attach(element: GlobalElement|null|Document, opt_capture?: boolean):
            void;
        /**
         * Removes the listeners that may exist.
         */
        detach(): void;
        disposeInternal(): void;
        /**
         * Returns the element listened on for the real keyboard events.
         */
        getElement(): GlobalElement|null|Document;
        /**
         * Handles the events on the element.
         * @param e The keyboard event sent from the browser.
         */
        handleEvent(e: ಠ_ಠ.clutz.goog.events.BrowserEvent|null): void;
        /**
         * Resets the stored previous values. Needed to be called for webkit
         * which will not generate a key up for meta key operations. This should
         * only be called when having finished with repeat key possibilities.
         */
        resetState(): void;
    }
}
declare module 'goog:goog.events.KeyHandler' {
    import alias = ಠ_ಠ.clutz.goog.events.KeyHandler;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events.KeyHandler {
    /**
     * Enum type for the events fired by the key handler
     */
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        KEY: EventType,
    };
}
declare module 'goog:goog.events.KeyHandler.EventType' {
    import alias = ಠ_ಠ.clutz.goog.events.KeyHandler.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
    /**
     * Key names for common characters. These should be used with keyup/keydown
     * events, since the .keyCode property on those is meant to indicate the
     * * physical key* the user held down on the keyboard. Hence the mapping
     * uses only the unshifted version of each key (e.g. no '#', since that's
     * shift+3). Keypress events on the other hand generate (mostly) ASCII codes
     * since they correspond to *characters* the user typed.
     *
     * For further reference: http://unixpapa.com/js/key.html
     *
     * This list is not localized and therefore some of the key codes are not
     * correct for non-US keyboard layouts.
     */
    type KeyNames = string&{clutzEnumBrand: never};
    var KeyNames: {
        100: KeyNames,
        101: KeyNames,
        102: KeyNames,
        103: KeyNames,
        104: KeyNames,
        105: KeyNames,
        106: KeyNames,
        107: KeyNames,
        109: KeyNames,
        110: KeyNames,
        111: KeyNames,
        112: KeyNames,
        113: KeyNames,
        114: KeyNames,
        115: KeyNames,
        116: KeyNames,
        117: KeyNames,
        118: KeyNames,
        119: KeyNames,
        120: KeyNames,
        121: KeyNames,
        122: KeyNames,
        123: KeyNames,
        13: KeyNames,
        16: KeyNames,
        17: KeyNames,
        18: KeyNames,
        186: KeyNames,
        187: KeyNames,
        188: KeyNames,
        189: KeyNames,
        19: KeyNames,
        190: KeyNames,
        191: KeyNames,
        192: KeyNames,
        20: KeyNames,
        219: KeyNames,
        220: KeyNames,
        221: KeyNames,
        222: KeyNames,
        224: KeyNames,
        27: KeyNames,
        32: KeyNames,
        33: KeyNames,
        34: KeyNames,
        35: KeyNames,
        36: KeyNames,
        37: KeyNames,
        38: KeyNames,
        39: KeyNames,
        40: KeyNames,
        45: KeyNames,
        46: KeyNames,
        48: KeyNames,
        49: KeyNames,
        50: KeyNames,
        51: KeyNames,
        52: KeyNames,
        53: KeyNames,
        54: KeyNames,
        55: KeyNames,
        56: KeyNames,
        57: KeyNames,
        59: KeyNames,
        61: KeyNames,
        65: KeyNames,
        66: KeyNames,
        67: KeyNames,
        68: KeyNames,
        69: KeyNames,
        70: KeyNames,
        71: KeyNames,
        72: KeyNames,
        73: KeyNames,
        74: KeyNames,
        75: KeyNames,
        76: KeyNames,
        77: KeyNames,
        78: KeyNames,
        79: KeyNames,
        8: KeyNames,
        80: KeyNames,
        81: KeyNames,
        82: KeyNames,
        83: KeyNames,
        84: KeyNames,
        85: KeyNames,
        86: KeyNames,
        87: KeyNames,
        88: KeyNames,
        89: KeyNames,
        9: KeyNames,
        90: KeyNames,
        93: KeyNames,
        96: KeyNames,
        97: KeyNames,
        98: KeyNames,
        99: KeyNames,
    };
}
declare module 'goog:goog.events.KeyNames' {
    import alias = ಠ_ಠ.clutz.goog.events.KeyNames;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
    /**
     * Key values for common characters.
     */
    type Keys = string&{clutzEnumBrand: never};
    var Keys: {
        ALT: Keys,
        ALTGRAPH: Keys,
        CTRL: Keys,
        SHIFT: Keys,
    };
}
declare module 'goog:goog.events.Keys' {
    import alias = ಠ_ಠ.clutz.goog.events.Keys;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
    /**
     * A listenable interface. A listenable is an object with the ability
     * to dispatch/broadcast events to "event listeners" registered via
     * listen/listenOnce.
     *
     * The interface allows for an event propagation mechanism similar
     * to one offered by native browser event targets, such as
     * capture/bubble mechanism, stopping propagation, and preventing
     * default actions. Capture/bubble mechanism depends on the ancestor
     * tree constructed via {@code #getParentEventTarget}; this tree
     * must be directed acyclic graph. The meaning of default action(s)
     * in preventDefault is specific to a particular use case.
     *
     * Implementations that do not support capture/bubble or can not have
     * a parent listenable can simply not implement any ability to set the
     * parent listenable (and have {@code #getParentEventTarget} return
     * null).
     *
     * Implementation of this class can be used with or independently from
     * goog.events.
     *
     * Implementation must call {@code #addImplementation(implClass)}.
     */
    interface Listenable {
        /**
         * Dispatches an event (or event like object) and calls all listeners
         * listening for events of this type. The type of the event is decided
         * by the type property on the event object.
         *
         * If any of the listeners returns false OR calls preventDefault then
         * this function will return false.  If one of the capture listeners
         * calls stopPropagation, then the bubble listeners won't fire.
         * @param e Event object.
         */
        dispatchEvent(a: string|GlobalObject|null): boolean;
        /**
         * Fires all registered listeners in this listenable for the given
         * type and capture mode, passing them the given eventObject. This
         * does not perform actual capture/bubble. Only implementors of the
         * interface should be using this.
         * @param type The type of the listeners to fire.
         * @param capture The capture mode of the listeners to fire.
         * @param eventObject The event object to fire.
         */
        fireListeners<EVENTOBJ = any>(
            a: string|ಠ_ಠ.clutz.goog.events.EventId<EVENTOBJ>, b: boolean,
            c: EVENTOBJ): boolean;
        /**
         * Gets the goog.events.ListenableKey for the event or null if no such
         * listener is in use.
         * @param type The name of the event without the 'on' prefix.
         * @param listener The listener function to get.
         * @param capture Whether the listener is a capturing listener.
         * @param opt_listenerScope Object in whose scope to call the listener.
         */
        getListener<SCOPE = any, EVENTOBJ = any>(
            a: string|ಠ_ಠ.clutz.goog.events.EventId<EVENTOBJ>,
            b: (a: EVENTOBJ) => boolean | undefined, c: boolean,
            d?: SCOPE): ಠ_ಠ.clutz.goog.events.ListenableKey|null;
        /**
         * Gets all listeners in this listenable for the given type and
         * capture mode.
         * @param type The type of the listeners to fire.
         * @param capture The capture mode of the listeners to fire.
         */
        getListeners<EVENTOBJ = any>(
            a: string|ಠ_ಠ.clutz.goog.events.EventId<any>,
            b: boolean): ಠ_ಠ.clutz.goog.events.ListenableKey[];
        /**
         * Returns the parent of this event target to use for capture/bubble
         * mechanism.
         *
         * NOTE(chrishenry): The name reflects the original implementation of
         * custom event target ({@code goog.events.EventTarget}). We decided
         * that changing the name is not worth it.
         */
        getParentEventTarget(): ಠ_ಠ.clutz.goog.events.Listenable|null;
        /**
         * Whether there is any active listeners matching the specified
         * signature. If either the type or capture parameters are
         * unspecified, the function will match on the remaining criteria.
         * @param opt_type Event type.
         * @param opt_capture Whether to check for capture or bubble listeners.
         */
        hasListener<EVENTOBJ = any>(
            a?: string|ಠ_ಠ.clutz.goog.events.EventId<EVENTOBJ>,
            b?: boolean): boolean;
        /**
         * Adds an event listener. A listener can only be added once to an
         * object and if it is added again the key for the listener is
         * returned. Note that if the existing listener is a one-off listener
         * (registered via listenOnce), it will no longer be a one-off
         * listener after a call to listen().
         * @param type The event type id.
         * @param listener Callback method.
         * @param opt_useCapture Whether to fire in capture phase (defaults to
         * false).
         * @param opt_listenerScope Object in whose scope to call the listener.
         */
        listen<SCOPE = any, EVENTOBJ = any>(
            a: string|ಠ_ಠ.clutz.goog.events.EventId<EVENTOBJ>,
            b: (a: EVENTOBJ) => boolean | undefined, c?: boolean,
            d?: SCOPE): ಠ_ಠ.clutz.goog.events.ListenableKey;
        /**
         * Adds an event listener that is removed automatically after the
         * listener fired once.
         *
         * If an existing listener already exists, listenOnce will do
         * nothing. In particular, if the listener was previously registered
         * via listen(), listenOnce() will not turn the listener into a
         * one-off listener. Similarly, if there is already an existing
         * one-off listener, listenOnce does not modify the listeners (it is
         * still a once listener).
         * @param type The event type id.
         * @param listener Callback method.
         * @param opt_useCapture Whether to fire in capture phase (defaults to
         * false).
         * @param opt_listenerScope Object in whose scope to call the listener.
         */
        listenOnce<SCOPE = any, EVENTOBJ = any>(
            a: string|ಠ_ಠ.clutz.goog.events.EventId<EVENTOBJ>,
            b: (a: EVENTOBJ) => boolean | undefined, c?: boolean,
            d?: SCOPE): ಠ_ಠ.clutz.goog.events.ListenableKey;
        /**
         * Removes all listeners from this listenable. If type is specified,
         * it will only remove listeners of the particular type. otherwise all
         * registered listeners will be removed.
         * @param opt_type Type of event to remove, default is to remove all
         * types.
         */
        removeAllListeners(a?: string): number;
        /**
         * Removes an event listener which was added with listen() or
         * listenOnce().
         * @param type The event type id.
         * @param listener Callback method.
         * @param opt_useCapture Whether to fire in capture phase (defaults to
         * false).
         * @param opt_listenerScope Object in whose scope to call the listener.
         */
        unlisten<SCOPE = any, EVENTOBJ = any>(
            a: string|ಠ_ಠ.clutz.goog.events.EventId<EVENTOBJ>,
            b: (a: EVENTOBJ) => boolean | undefined, c?: boolean,
            d?: SCOPE): boolean;
        /**
         * Removes an event listener which was added with listen() by the key
         * returned by listen().
         * @param key The key returned by listen() or listenOnce().
         */
        unlistenByKey(a: ಠ_ಠ.clutz.goog.events.ListenableKey): boolean;
    }
}
declare namespace ಠ_ಠ.clutz.goog.events.Listenable {
    var IMPLEMENTED_BY_PROP: string;
    function addImplementation(
        cls: {new (...a: any[]): ಠ_ಠ.clutz.goog.events.Listenable}): void;
    function isImplementedBy(obj: GlobalObject|null): boolean;
}
declare module 'goog:goog.events.Listenable' {
    import alias = ಠ_ಠ.clutz.goog.events.Listenable;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
    /**
     * An interface that describes a single registered listener.
     */
    interface ListenableKey {
        /**
         * Whether the listener works on capture phase.
         */
        capture: boolean;
        /**
         * The 'this' object for the listener function's scope.
         */
        handler?: GlobalObject|null;
        /**
         * A globally unique number to identify the key.
         */
        key: number;
        /**
         * The listener function.
         */
        listener: ((a?: any) => any)|{handleEvent: (a?: any) => any}|null;
        /**
         * The source event target.
         */
        src: GlobalObject|null;
        /**
         * The event type the listener is listening to.
         */
        type: string;
    }
}
declare namespace ಠ_ಠ.clutz.goog.events.ListenableKey {
    function reserveKey(): number;
}
declare module 'goog:goog.events.ListenableKey' {
    import alias = ಠ_ಠ.clutz.goog.events.ListenableKey;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
    type ListenableType =
        GlobalEventTarget|null|ಠ_ಠ.clutz.goog.events.Listenable;
}
declare module 'goog:goog.events.ListenableType' {
    import alias = ಠ_ಠ.clutz.goog.events.ListenableType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
    /**
     * Simple class that stores information about a listener
     */
    class Listener extends Listener_Instance {
        static ENABLE_MONITORING: boolean;
    }
    class Listener_Instance implements ಠ_ಠ.clutz.goog.events.ListenableKey {
        private noStructuralTyping_: any;
        /**
         * Simple class that stores information about a listener
         * @param listener Callback function.
         * @param proxy Wrapper for the listener that patches the event.
         * @param src Source object for the event.
         * @param type Event type.
         * @param capture Whether in capture or bubble phase.
         * @param opt_handler Object in whose context to execute the callback.
         */
        constructor(
            listener: (a?: any) => any, proxy: (...a: any[]) => any,
            src: GlobalEventTarget|null|ಠ_ಠ.clutz.goog.events.Listenable,
            type: string, capture: boolean, opt_handler?: GlobalObject|null);
        /**
         * Whether to remove the listener after it has been called.
         */
        callOnce: boolean;
        /**
         * Whether the listener is being called in the capture or bubble phase
         */
        capture: boolean;
        /**
         * Optional object whose context to execute the listener in
         */
        handler?: GlobalObject|null;
        /**
         * The key of the listener.
         */
        key: number;
        listener: ((a?: any) => any)|null;
        /**
         * A wrapper over the original listener. This is used solely to
         * handle native browser events (it is used to simulate the capture
         * phase and to patch the event object).
         */
        proxy(...a: any[]): any;
        /**
         * Whether the listener has been removed.
         */
        removed: boolean;
        /**
         * Object or node that callback is listening to
         */
        src: GlobalEventTarget|null|ಠ_ಠ.clutz.goog.events.Listenable;
        /**
         * The event type.
         */
        type: string;
        /**
         * If monitoring the goog.events.Listener instances is enabled, stores
         * the creation stack trace of the Disposable instance.
         */
        creationStack: string;
        /**
         * Marks this listener as removed. This also remove references held by
         * this listener object (such as listener and event source).
         */
        markAsRemoved(): void;
    }
}
declare module 'goog:goog.events.Listener' {
    import alias = ಠ_ಠ.clutz.goog.events.Listener;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
    /**
     * Creates a new listener map.
     */
    class ListenerMap extends ListenerMap_Instance {}
    class ListenerMap_Instance {
        private noStructuralTyping_: any;
        /**
         * Creates a new listener map.
         * @param src The src object.
         */
        constructor(src: GlobalEventTarget|null|
                    ಠ_ಠ.clutz.goog.events.Listenable);
        /**
         * Maps of event type to an array of listeners.
         */
        listeners: {[key: string]: ಠ_ಠ.clutz.goog.events.Listener[]};
        src: GlobalEventTarget|null|ಠ_ಠ.clutz.goog.events.Listenable;
        /**
         * Adds an event listener. A listener can only be added once to an
         * object and if it is added again the key for the listener is
         * returned.
         *
         * Note that a one-off listener will not change an existing listener,
         * if any. On the other hand a normal listener will change existing
         * one-off listener to become a normal listener.
         * @param type The listener event type.
         * @param listener This listener callback method.
         * @param callOnce Whether the listener is a one-off listener.
         * @param opt_useCapture The capture mode of the listener.
         * @param opt_listenerScope Object in whose scope to call the listener.
         */
        add(type: string|ಠ_ಠ.clutz.goog.events.EventId<any>,
            listener: (...a: any[]) => any, callOnce: boolean,
            opt_useCapture?: boolean, opt_listenerScope?: GlobalObject|null):
            ಠ_ಠ.clutz.goog.events.ListenableKey;
        /**
         * Gets the goog.events.ListenableKey for the event or null if no such
         * listener is in use.
         * @param type The type of the listener to retrieve.
         * @param listener The listener function to get.
         * @param capture Whether the listener is a capturing listener.
         * @param opt_listenerScope Object in whose scope to call the listener.
         */
        getListener(
            type: string|ಠ_ಠ.clutz.goog.events.EventId<any>,
            listener: (...a: any[]) => any, capture: boolean,
            opt_listenerScope?: GlobalObject|
            null): ಠ_ಠ.clutz.goog.events.ListenableKey|null;
        getListenerCount(): number;
        /**
         * Gets all listeners that match the given type and capture mode. The
         * returned array is a copy (but the listener objects are not).
         * @param type The type of the listeners to retrieve.
         * @param capture The capture mode of the listeners to retrieve.
         */
        getListeners(
            type: string|ಠ_ಠ.clutz.goog.events.EventId<any>,
            capture: boolean): ಠ_ಠ.clutz.goog.events.ListenableKey[];
        getTypeCount(): number;
        /**
         * Whether there is a matching listener. If either the type or capture
         * parameters are unspecified, the function will match on the
         * remaining criteria.
         * @param opt_type The type of the listener.
         * @param opt_capture The capture mode of the listener.
         */
        hasListener(
            opt_type?: string|ಠ_ಠ.clutz.goog.events.EventId<any>,
            opt_capture?: boolean): boolean;
        /**
         * Removes a matching listener.
         * @param type The listener event type.
         * @param listener This listener callback method.
         * @param opt_useCapture The capture mode of the listener.
         * @param opt_listenerScope Object in whose scope to call the listener.
         */
        remove(
            type: string|ಠ_ಠ.clutz.goog.events.EventId<any>,
            listener: (...a: any[]) => any, opt_useCapture?: boolean,
            opt_listenerScope?: GlobalObject|null): boolean;
        /**
         * Removes all listeners from this map. If opt_type is provided, only
         * listeners that match the given type are removed.
         * @param opt_type Type of event to remove.
         */
        removeAll(opt_type?: string|ಠ_ಠ.clutz.goog.events.EventId<any>): number;
        /**
         * Removes the given listener object.
         * @param listener The listener to remove.
         */
        removeByKey(listener: ಠ_ಠ.clutz.goog.events.ListenableKey): boolean;
    }
}
declare module 'goog:goog.events.ListenerMap' {
    import alias = ಠ_ಠ.clutz.goog.events.ListenerMap;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
    /**
     * A base class for mouse wheel events. This is used with the
     * MouseWheelHandler.
     */
    class MouseWheelEvent extends MouseWheelEvent_Instance {}
    class MouseWheelEvent_Instance extends
        ಠ_ಠ.clutz.goog.events.BrowserEvent_Instance {
        /**
         * A base class for mouse wheel events. This is used with the
         * MouseWheelHandler.
         * @param detail The number of rows the user scrolled.
         * @param browserEvent Browser event object.
         * @param deltaX The number of rows the user scrolled in the X
         * direction.
         * @param deltaY The number of rows the user scrolled in the Y
         * direction.
         */
        constructor(
            detail: number, browserEvent: GlobalEvent|null, deltaX: number,
            deltaY: number);
        /**
         * The number of "lines" scrolled in the X direction.
         *
         * Note that not all browsers provide enough information to distinguish
         * horizontal and vertical scroll events, so for these unsupported
         * browsers, we will always have a deltaX of 0, even if the user
         * scrolled their mouse wheel or trackpad sideways.
         *
         * Currently supported browsers are Webkit and Firefox 3.1 or later.
         */
        deltaX: number;
        /**
         * The number of lines scrolled in the Y direction.
         */
        deltaY: number;
        /**
         * The number of lines the user scrolled
         */
        detail: number;
        type: string;
    }
}
declare module 'goog:goog.events.MouseWheelEvent' {
    import alias = ಠ_ಠ.clutz.goog.events.MouseWheelEvent;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
    /**
     * This event handler allows you to catch mouse wheel events in a consistent
     * manner.
     */
    class MouseWheelHandler extends MouseWheelHandler_Instance {}
    class MouseWheelHandler_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * This event handler allows you to catch mouse wheel events in a
         * consistent manner.
         * @param element The element to listen to the mouse wheel event on.
         * @param opt_capture Whether to handle the mouse wheel event in capture
         * phase.
         */
        constructor(
            element: GlobalElement|null|Document, opt_capture?: boolean);
        disposeInternal(): void;
        /**
         * Handles the events on the element.
         * @param e The underlying browser event.
         */
        handleEvent(e: ಠ_ಠ.clutz.goog.events.BrowserEvent|null): void;
        setMaxDeltaX(maxDeltaX: number): void;
        setMaxDeltaY(maxDeltaY: number): void;
    }
}
declare module 'goog:goog.events.MouseWheelHandler' {
    import alias = ಠ_ಠ.clutz.goog.events.MouseWheelHandler;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events.MouseWheelHandler {
    /**
     * Enum type for the events fired by the mouse wheel handler.
     */
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        MOUSEWHEEL: EventType,
    };
}
declare module 'goog:goog.events.MouseWheelHandler.EventType' {
    import alias = ಠ_ಠ.clutz.goog.events.MouseWheelHandler.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
    /**
     * Basic object for detecting whether the online state changes.
     */
    class OnlineHandler extends OnlineHandler_Instance {}
    class OnlineHandler_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance implements
            ಠ_ಠ.clutz.goog.net.NetworkStatusMonitor {
        disposeInternal(): void;
        isOnline(): boolean;
    }
}
declare module 'goog:goog.events.OnlineHandler' {
    import alias = ಠ_ಠ.clutz.goog.events.OnlineHandler;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events.OnlineHandler {
    /**
     * Enum for the events dispatched by the OnlineHandler.
     */
    //!! goog.events.OnlineHandler.EventType aliases enum
    //!goog.net.NetworkStatusMonitor.EventType
    type EventType = goog.net.NetworkStatusMonitor.EventType;
    const EventType: typeof goog.net.NetworkStatusMonitor.EventType;
}
declare module 'goog:goog.events.OnlineHandler.EventType' {
    import alias = ಠ_ಠ.clutz.goog.events.OnlineHandler.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
    /**
     * A paste event detector. Gets an {@code element} as parameter and fires
     * {@code goog.events.PasteHandler.EventType.PASTE} events when text is
     * pasted in the {@code element}. Uses heuristics to detect paste events in
     * FF2. See more details of the heuristic on {@link #handleEvent_}.
     */
    class PasteHandler extends PasteHandler_Instance {
        /**
         * The mandatory delay we expect between two {@code input} events, used
         * to differentiated between non key paste events and key events.
         */
        static MANDATORY_MS_BETWEEN_INPUT_EVENTS_TIE_BREAKER: number;
        /**
         * Whether current UA supoprts the native "paste" event type.
         */
        static SUPPORTS_NATIVE_PASTE_EVENT: boolean;
    }
    class PasteHandler_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * A paste event detector. Gets an {@code element} as parameter and
         * fires
         * {@code goog.events.PasteHandler.EventType.PASTE} events when text is
         * pasted in the {@code element}. Uses heuristics to detect paste events
         * in FF2. See more details of the heuristic on {@link #handleEvent_}.
         * @param element The textarea element we are listening on.
         */
        constructor(element: GlobalElement|null);
        disposeInternal(): void;
        /**
         * Returns the event handler.
         */
        getEventHandler(): ಠ_ಠ.clutz.goog.events.EventHandler<this>|null;
        /**
         * Returns the current state of the paste detection algorithm. Used
         * mostly for testing.
         */
        getState(): ಠ_ಠ.clutz.goog.events.PasteHandler.State;
    }
}
declare module 'goog:goog.events.PasteHandler' {
    import alias = ಠ_ಠ.clutz.goog.events.PasteHandler;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events.PasteHandler {
    /**
     * The types of events fired by this class.
     */
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        AFTER_PASTE: EventType,
        PASTE: EventType,
    };
}
declare module 'goog:goog.events.PasteHandler.EventType' {
    import alias = ಠ_ಠ.clutz.goog.events.PasteHandler.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events.PasteHandler {
    /**
     * The states that this class can be found, on the paste detection
     * algorithm.
     */
    type State = string&{clutzEnumBrand: never};
    var State: {
        FOCUSED: State,
        INIT: State,
        TYPING: State,
    };
}
declare module 'goog:goog.events.PasteHandler.State' {
    import alias = ಠ_ಠ.clutz.goog.events.PasteHandler.State;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
    /**
     * Constants for pointer event names that fall back to corresponding mouse
     * event names on unsupported platforms. These are intended to be drop-in
     * replacements for corresponding values in {@code goog.events.EventType}.
     */
    type PointerFallbackEventType = string&{clutzEnumBrand: never};
    var PointerFallbackEventType: {
        POINTERCANCEL: PointerFallbackEventType,
        POINTERDOWN: PointerFallbackEventType,
        POINTERENTER: PointerFallbackEventType,
        POINTERLEAVE: PointerFallbackEventType,
        POINTERMOVE: PointerFallbackEventType,
        POINTEROUT: PointerFallbackEventType,
        POINTEROVER: PointerFallbackEventType,
        POINTERUP: PointerFallbackEventType,
    };
}
declare module 'goog:goog.events.PointerFallbackEventType' {
    import alias = ಠ_ಠ.clutz.goog.events.PointerFallbackEventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
    /**
     * A common class for wheel events. This is used with the WheelHandler.
     */
    class WheelEvent extends WheelEvent_Instance {}
    class WheelEvent_Instance extends
        ಠ_ಠ.clutz.goog.events.BrowserEvent_Instance {
        /**
         * A common class for wheel events. This is used with the WheelHandler.
         * @param browserEvent Browser event object.
         * @param deltaMode The delta mode units of the wheel event.
         * @param deltaX The number of delta units the user in the X axis.
         * @param deltaY The number of delta units the user in the Y axis.
         * @param deltaZ The number of delta units the user in the Z axis.
         */
        constructor(
            browserEvent: GlobalEvent|null,
            deltaMode: ಠ_ಠ.clutz.goog.events.WheelEvent.DeltaMode,
            deltaX: number, deltaY: number, deltaZ: number);
        /**
         * An enum corresponding to the units of this event.
         */
        deltaMode: ಠ_ಠ.clutz.goog.events.WheelEvent.DeltaMode;
        /**
         * The number of delta units in the X axis.
         */
        deltaX: number;
        /**
         * The number of delta units in the Y axis.
         */
        deltaY: number;
        /**
         * The number of delta units in the Z axis.
         */
        deltaZ: number;
        /**
         * The number of delta pixels in the X axis. Code that doesn't want to
         * handle different deltaMode units can just look here.
         */
        pixelDeltaX: number;
        /**
         * The number of pixels in the Y axis. Code that doesn't want to
         * handle different deltaMode units can just look here.
         */
        pixelDeltaY: number;
        /**
         * The number of pixels scrolled in the Z axis. Code that doesn't want
         * to handle different deltaMode units can just look here.
         */
        pixelDeltaZ: number;
        type: ಠ_ಠ.clutz.goog.events.WheelEvent.EventType;
    }
}
declare namespace ಠ_ಠ.clutz.goog.events.WheelEvent {
    enum DeltaMode {
        LINE,
        PAGE,
        PIXEL,
    }
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        WHEEL: EventType,
    };
}
declare module 'goog:goog.events.WheelEvent' {
    import alias = ಠ_ಠ.clutz.goog.events.WheelEvent;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
    /**
     * This event handler allows you to catch wheel events in a consistent
     * manner.
     */
    class WheelHandler extends WheelHandler_Instance {
        /**
         * Returns the dom event type.
         */
        static getDomEventType(): string;
    }
    class WheelHandler_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * This event handler allows you to catch wheel events in a consistent
         * manner.
         * @param element The element to listen to the wheel event on.
         * @param opt_capture Whether to handle the wheel event in capture
         * phase.
         */
        constructor(element: GlobalElement|Document, opt_capture?: boolean);
        disposeInternal(): void;
        /**
         * Handles the events on the element.
         * @param e The underlying browser event.
         */
        handleEvent(e: ಠ_ಠ.clutz.goog.events.BrowserEvent): void;
    }
}
declare module 'goog:goog.events.WheelHandler' {
    import alias = ಠ_ಠ.clutz.goog.events.WheelHandler;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.events {
    /**
     * Singleton instance of ActionEventWrapper_.
     */
    var actionEventWrapper: ಠ_ಠ.clutz.goog.events.ActionEventWrapper_|null;
}
declare module 'goog:goog.events.actionEventWrapper' {
    import alias = ಠ_ಠ.clutz.goog.events.actionEventWrapper;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.format {
    /**
     * Constant for the WBR replacement used by insertWordBreaks.  Safari
     * requires <wbr></wbr>, Opera needs the &shy; entity, though this will give
     * a visible hyphen at breaks.  IE8 uses a zero width space. Other browsers
     * just use <wbr>.
     */
    var WORD_BREAK_HTML: string;
    /**
     * Formats a number of bytes in human readable form.
     * 54, 450K, 1.3M, 5G etc.
     * @param bytes The number of bytes to show.
     * @param opt_decimals The number of decimals to use.  Defaults to 2.
     */
    function fileSize(bytes: number, opt_decimals?: number): string;
    /**
     * Inserts word breaks into an HTML string at a given interval.
     *
     * This method is as aggressive as possible, using a full table of Unicode
     * characters where it is legal to insert word breaks; however, this table
     * comes at a 2.5k pre-gzip (~1k post-gzip) size cost.  Consider using
     * insertWordBreaksBasic to minimize the size impact.
     * @param str HTML to insert word breaks into.
     * @param opt_maxlen Maximum length after which to ensure there is a break.
     * Default is 10 characters.
     */
    function insertWordBreaks(str: string, opt_maxlen?: number): string;
    /**
     * Inserts word breaks into an HTML string at a given interval.
     *
     * This method is less aggressive than insertWordBreaks, only inserting
     * breaks next to punctuation and between Latin or Cyrillic characters.
     * However, this is good enough for the common case of URLs.  It also
     * works for all Latin and Cyrillic languages, plus CJK has no need for word
     * breaks.  When this method is used, goog.i18n.GraphemeBreak may be dead
     * code eliminated.
     * @param str HTML to insert word breaks into.
     * @param opt_maxlen Maximum length after which to ensure there is a break.
     * Default is 10 characters.
     */
    function insertWordBreaksBasic(str: string, opt_maxlen?: number): string;
    /**
     * Checks whether string value containing scaling units (K, M, G, T, P, m,
     * u, n) can be converted to a number.
     *
     * Where there is a decimal, there must be a digit to the left of the
     * decimal point.
     *
     * Negative numbers are valid.
     *
     * Examples:
     * 0, 1, 1.0, 10.4K, 2.3M, -0.3P, 1.2m
     * @param val String value to check.
     */
    function isConvertableScaledNumber(val: string): boolean;
    /**
     * Converts number of bytes to string representation. Binary conversion.
     * Default is to return the additional 'B' suffix only for scales greater
     * than 1K, e.g. '10.5KB' to minimize confusion with counts that are scaled
     * by powers of 1000. Otherwise, suffix is empty string.
     * @param val Value to be converted.
     * @param opt_decimals The number of decimals to use.  Defaults to 2.
     * @param opt_suffix If true, include trailing 'B' in returned string.
     * Default is true.
     * @param opt_useSeparator If true, number and scale will be separated by a
     * no break space. Default is false.
     */
    function numBytesToString(
        val: number, opt_decimals?: number, opt_suffix?: boolean,
        opt_useSeparator?: boolean): string;
    /**
     * Converts a numeric value to string representation. SI conversion.
     * @param val Value to be converted.
     * @param opt_decimals The number of decimals to use.  Defaults to 2.
     */
    function numericValueToString(val: number, opt_decimals?: number): string;
    /**
     * Converts a string to number of bytes, taking into account the units.
     * Binary conversion.
     * @param stringValue String to be converted to numeric value.
     */
    function stringToNumBytes(stringValue: string): number;
    /**
     * Converts a string to numeric value, taking into account the units.
     * If string ends in 'B', use binary conversion.
     * @param stringValue String to be converted to numeric value.
     */
    function stringToNumericValue(stringValue: string): number;
}
declare module 'goog:goog.format' {
    import alias = ಠ_ಠ.clutz.goog.format;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.format {
    /**
     * Formats an email address string for display, and allows for extraction of
     * the individual components of the address.
     */
    class EmailAddress extends EmailAddress_Instance {
        /**
         * Match string for characters that require display names to be quoted
         * and are not address separators.
         */
        static SPECIAL_CHARS: string;
        static isAddressSeparator(ch: string): boolean;
        /**
         * Checks if the provided string is a valid address spec
         * (local@domain.com).
         * @param str The email address to check.
         */
        static isValidAddrSpec(str: string): boolean;
        /**
         * Checks if the provided string is a valid email address. Supports both
         * simple email addresses (address specs) and addresses that contain
         * display names.
         * @param str The email address to check.
         */
        static isValidAddress(str: string): boolean;
        /**
         * Checks if the provided string is a valid domain part (part after the
         * '@') of an email address.
         * @param str The domain part to check.
         */
        static isValidDomainPartSpec(str: string): boolean;
        /**
         * Checks if the provided string is a valid local part (part before the
         * '@') of an email address.
         * @param str The local part to check.
         */
        static isValidLocalPartSpec(str: string): boolean;
        /**
         * Parses an email address of the form "name" &lt;address&gt; into
         * an email address.
         * @param addr The address string.
         */
        static parse(addr: string): ಠ_ಠ.clutz.goog.format.EmailAddress;
        /**
         * Parses an email address of the form "name" &lt;address&gt; ("name" is
         * optional) into an email address.
         * @param addr The address string.
         * @param ctor EmailAddress constructor to instantiate the output
         * address.
         */
        static parseInternal(addr: string, ctor: {
            new(a?: string, b?: string): ಠ_ಠ.clutz.goog.format.EmailAddress
        }): ಠ_ಠ.clutz.goog.format.EmailAddress;
        /**
         * Parses a string containing email addresses of the form
         * "name" &lt;address&gt; into an array of email addresses.
         * @param str The address list.
         */
        static parseList(str: string): ಠ_ಠ.clutz.goog.format.EmailAddress[];
        /**
         * Parse a string containing email addresses of the form
         * "name" &lt;address&gt; into an array of email addresses.
         * @param str The address list.
         * @param parser The parser to employ.
         * @param separatorChecker Accepts a character and returns whether it
         * should be considered an address separator.
         */
        static parseListInternal(
            str: string, parser: (a: string) => any,
            separatorChecker: (a: string) => boolean):
            ಠ_ಠ.clutz.goog.format.EmailAddress[];
    }
    class EmailAddress_Instance {
        private noStructuralTyping_: any;
        /**
         * Formats an email address string for display, and allows for
         * extraction of the individual components of the address.
         * @param opt_address The email address.
         * @param opt_name The name associated with the email address.
         */
        constructor(opt_address?: string, opt_name?: string);
        /**
         * The email address.
         */
        address: string;
        /**
         * Get the email address.
         */
        getAddress(): string;
        /**
         * Get the name associated with the email address.
         */
        getName(): string;
        /**
         * Determines if the current object is a valid email address.
         */
        isValid(): boolean;
        /**
         * Set the email address.
         * @param address The email address.
         */
        setAddress(address: string): void;
        /**
         * Set the name associated with the email address.
         * @param name The name to associate.
         */
        setName(name: string): void;
        /**
         * Return the address in a standard format:
         * - remove extra spaces.
         * - Surround name with quotes if it contains special characters.
         */
        toString(): string;
        /**
         * Return the address in a standard format:
         * - remove extra spaces.
         * - Surround name with quotes if it contains special characters.
         * @param specialChars String that contains the characters that require
         * the display name to be quoted.
         */
        toStringInternal(specialChars: string): string;
    }
}
declare module 'goog:goog.format.EmailAddress' {
    import alias = ಠ_ಠ.clutz.goog.format.EmailAddress;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.format {
    /**
     * This class formats HTML to be more human-readable.
     * TODO(user): Add hierarchical indentation.
     */
    class HtmlPrettyPrinter extends HtmlPrettyPrinter_Instance {
        /**
         * Static utility function. See prototype #format.
         * @param html The HTML text to pretty print.
         */
        static format(html: string): string;
    }
    class HtmlPrettyPrinter_Instance {
        private noStructuralTyping_: any;
        /**
         * This class formats HTML to be more human-readable.
         * TODO(user): Add hierarchical indentation.
         * @param opt_timeOutMillis Max # milliseconds to spend on #format. If
         * this time is exceeded, return partially formatted. 0 or negative
         * number indicates no timeout.
         */
        constructor(opt_timeOutMillis?: number);
        /**
         * Breaks up HTML so it's easily readable by the user.
         * @param html The HTML text to pretty print.
         */
        format(html: string): string;
    }
}
declare module 'goog:goog.format.HtmlPrettyPrinter' {
    import alias = ಠ_ಠ.clutz.goog.format.HtmlPrettyPrinter;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.format.HtmlPrettyPrinter {
    /**
     * This class is a buffer to which we push our output. It tracks line breaks
     * to make sure we don't add unnecessary ones.
     */
    class Buffer extends Buffer_Instance {}
    class Buffer_Instance {
        private noStructuralTyping_: any;
        /**
         * Tracks number of line breaks added.
         */
        breakCount: number;
        /**
         * Append line break if we need one.
         */
        lineBreak(): void;
        /**
         * Adds token and necessary line breaks to output buffer.
         * @param breakBefore If true, add line break before token if necessary.
         * @param token Token to push.
         * @param breakAfter If true, add line break after token if necessary.
         */
        pushToken(breakBefore: boolean, token: string, breakAfter: boolean):
            void;
        toString(): string;
    }
}
declare module 'goog:goog.format.HtmlPrettyPrinter.Buffer' {
    import alias = ಠ_ಠ.clutz.goog.format.HtmlPrettyPrinter.Buffer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.format {
    /**
     * Formats an email address string for display, and allows for extraction of
     * the individual components of the address.
     */
    class InternationalizedEmailAddress extends
        InternationalizedEmailAddress_Instance {
        static isAddressSeparator(ch: string): boolean;
        /**
         * Checks if the provided string is a valid address spec
         * (local@domain.com).
         * @param str The email address to check.
         */
        static isValidAddrSpec(str: string): boolean;
        /**
         * Checks if the provided string is a valid email address. Supports both
         * simple email addresses (address specs) and addresses that contain
         * display names.
         * @param str The email address to check.
         */
        static isValidAddress(str: string): boolean;
        /**
         * Checks if the provided string is a valid domain part (part after the
         * '@') of an EAI email address.
         * @param str The domain part to check.
         */
        static isValidDomainPartSpec(str: string): boolean;
        /**
         * Checks if the provided string is a valid local part (part before the
         * '@') of an EAI email address.
         * @param str The local part to check.
         */
        static isValidLocalPartSpec(str: string): boolean;
        /**
         * Parses an email address of the form "name" &lt;address&gt; into
         * an email address.
         * @param addr The address string.
         */
        static parse(addr: string): ಠ_ಠ.clutz.goog.format.EmailAddress;
        /**
         * Parses a string containing email addresses of the form
         * "name" &lt;address&gt; into an array of email addresses.
         * @param str The address list.
         */
        static parseList(str: string): ಠ_ಠ.clutz.goog.format.EmailAddress[];
    }
    class InternationalizedEmailAddress_Instance extends
        ಠ_ಠ.clutz.goog.format.EmailAddress_Instance {
        /**
         * Formats an email address string for display, and allows for
         * extraction of the individual components of the address.
         * @param opt_address The email address.
         * @param opt_name The name associated with the email address.
         */
        constructor(opt_address?: string, opt_name?: string);
        isValid(): boolean;
        /**
         * Return the address in a standard format:
         * - remove extra spaces.
         * - Surround name with quotes if it contains special characters.
         */
        toString(): string;
    }
}
declare module 'goog:goog.format.InternationalizedEmailAddress' {
    import alias = ಠ_ಠ.clutz.goog.format.InternationalizedEmailAddress;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.format {
    /**
     * Formats a JSON object as a string, properly indented for display.
     * Supports displaying the string as text or html.  Users can also specify
     * their own set of delimiters for different environments.  For example, the
     * JSON object:
     *
     * <code>{"a": 1, "b": {"c": null, "d": true, "e": [1, 2]}}</code>
     *
     * Will be displayed like this:
     *
     * <code>{
     * "a": 1,
     * "b": {
     * "c": null,
     * "d": true,
     * "e": [
     * 1,
     * 2
     * ]
     * }
     * }</code>
     */
    class JsonPrettyPrinter extends JsonPrettyPrinter_Instance {}
    class JsonPrettyPrinter_Instance {
        private noStructuralTyping_: any;
        /**
         * Formats a JSON object as a string, properly indented for display.
         * Supports displaying the string as text or html.  Users can also
         * specify their own set of delimiters for different environments.  For
         * example, the JSON object:
         *
         * <code>{"a": 1, "b": {"c": null, "d": true, "e": [1, 2]}}</code>
         *
         * Will be displayed like this:
         *
         * <code>{
         * "a": 1,
         * "b": {
         * "c": null,
         * "d": true,
         * "e": [
         * 1,
         * 2
         * ]
         * }
         * }</code>
         * @param opt_delimiters Container for the various strings to use to
         * delimit objects, arrays, newlines, and other pieces of the output.
         */
        constructor(opt_delimiters?:
                        ಠ_ಠ.clutz.goog.format.JsonPrettyPrinter.TextDelimiters|
                    null);
        /**
         * Formats a JSON object as a string, properly indented for display.
         * @param json The object to pretty print. It could be a JSON object, a
         * string representing a JSON object, or any other type.
         */
        format(json: any): string;
        /**
         * Formats a JSON object as a SafeHtml, properly indented for display.
         * @param json The object to pretty print. It could be a JSON object, a
         * string representing a JSON object, or any other type.
         */
        formatSafeHtml(json: any): ಠ_ಠ.clutz.goog.html.SafeHtml;
    }
}
declare module 'goog:goog.format.JsonPrettyPrinter' {
    import alias = ಠ_ಠ.clutz.goog.format.JsonPrettyPrinter;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.format.JsonPrettyPrinter {
    /**
     * A container for the delimiting characters used to display the JSON string
     * to an HTML <code>&lt;pre&gt;</code> or <code>&lt;code&gt;</code> element.
     * It escapes the names and values before they are added to the output.
     * Use this class together with
     * goog.format.JsonPrettyPrinter#formatSafeHtml.
     */
    class SafeHtmlDelimiters extends SafeHtmlDelimiters_Instance {}
    class SafeHtmlDelimiters_Instance extends
        ಠ_ಠ.clutz.goog.format.JsonPrettyPrinter.TextDelimiters_Instance {
        formatName(name: string): string|ಠ_ಠ.clutz.goog.html.SafeHtml;
        formatValue(value: string, typeOf: string): string
            |ಠ_ಠ.clutz.goog.html.SafeHtml;
        /**
         * Return a class name for the given type.
         * @param typeOf The type of the value.
         */
        getValueCssName(typeOf: string): string;
    }
}
declare module 'goog:goog.format.JsonPrettyPrinter.SafeHtmlDelimiters' {
    import alias = ಠ_ಠ.clutz.goog.format.JsonPrettyPrinter.SafeHtmlDelimiters;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.format.JsonPrettyPrinter {
    /**
     * A container for the delimiting characters used to display the JSON string
     * to a text display.  Each delimiter is a publicly accessible property of
     * the object, which makes it easy to tweak delimiters to specific
     * environments.
     */
    class TextDelimiters extends TextDelimiters_Instance {}
    class TextDelimiters_Instance {
        private noStructuralTyping_: any;
        /**
         * Represents the end of an array in the output.
         */
        arrayEnd: string;
        /**
         * Represents the start of an array in the output.
         */
        arrayStart: string;
        /**
         * Formats a property name before adding it to the output.
         * @param name The property name.
         */
        formatName(name: string): string|ಠ_ಠ.clutz.goog.html.SafeHtml;
        /**
         * Formats a value before adding it to the output.
         * @param value The value.
         * @param typeOf The type of the value obtained by goog.typeOf.
         */
        formatValue(value: string, typeOf: string): string
            |ಠ_ಠ.clutz.goog.html.SafeHtml;
        /**
         * Represents the number of spaces to indent each sub-property of the
         * JSON.
         */
        indent: number;
        /**
         * Represents a newline character in the output.  Used to begin a new
         * line.
         */
        lineBreak: string|ಠ_ಠ.clutz.goog.html.SafeHtml;
        /**
         * Represents the string used to separate property names from property
         * values in the output.
         */
        nameValueSeparator: string|ಠ_ಠ.clutz.goog.html.SafeHtml;
        /**
         * Represents the end of an object in the output.
         */
        objectEnd: string;
        /**
         * Represents the start of an object in the output.
         */
        objectStart: string;
        /**
         * A string that's placed after a property name in the output.  Useful
         * for wrapping a property name in an html tag.
         */
        postName: string;
        /**
         * A string that's placed after a property value in the output.  Useful
         * for wrapping a property value in an html tag.
         */
        postValue: string;
        /**
         * A string that's placed before a property name in the output.  Useful
         * for wrapping a property name in an html tag.
         */
        preName: string;
        /**
         * A string that's placed before a property value in the output.  Useful
         * for wrapping a property value in an html tag.
         */
        preValue: string;
        /**
         * Represents the string used to separate properties in the output.
         */
        propertySeparator: string;
        /**
         * Represents a space character in the output.  Used to indent
         * properties a certain number of spaces, and to separate property names
         * from property values.
         */
        space: string;
    }
}
declare module 'goog:goog.format.JsonPrettyPrinter.TextDelimiters' {
    import alias = ಠ_ಠ.clutz.goog.format.JsonPrettyPrinter.TextDelimiters;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.functions {
    var CACHE_RETURN_VALUE: boolean;
    /**
     * Always returns false.
     */
    function FALSE(...a: any[]): boolean;
    /**
     * Always returns NULL.
     */
    function NULL(...a: any[]): null;
    /**
     * Always returns true.
     */
    function TRUE(...a: any[]): boolean;
    /**
     * Creates a function that returns true if each of its components evaluates
     * to true. The components are evaluated in order, and the evaluation will
     * be short-circuited as soon as a function returns false. For example,
     * (goog.functions.and(f, g))(x) is equivalent to f(x) && g(x).
     * @param var_args A list of functions.
     */
    function and(...var_args: (((...a: any[]) => any)|undefined)[]):
        (...a: any[]) => boolean;
    /**
     * Gives a wrapper function that caches the return value of a parameterless
     * function when first called.
     *
     * When called for the first time, the given function is called and its
     * return value is cached (thus this is only appropriate for idempotent
     * functions).  Subsequent calls will return the cached return value. This
     * allows the evaluation of expensive functions to be delayed until first
     * used.
     *
     * To cache the return values of functions with parameters, see
     * goog.memoize.
     * @param fn A function to lazily evaluate.
     */
    function cacheReturnValue<T = any>(fn: () => T): () => T;
    /**
     * Creates the composition of the functions passed in.
     * For example, (goog.functions.compose(f, g))(a) is equivalent to f(g(a)).
     * @param fn The final function.
     * @param var_args A list of functions.
     */
    function compose<T = any>(
        fn: (...a: any[]) => T,
        ...var_args: (((...a: any[]) => any)|undefined)[]): (...a: any[]) => T;
    /**
     * Creates a function that always returns the same value.
     * @param retValue The value to return.
     */
    function constant<T = any>(retValue: T): () => T;
    /**
     * Generic factory function to construct an object given the constructor
     * and the arguments. Intended to be bound to create object factories.
     *
     * Example:
     *
     * var factory = goog.partial(goog.functions.create, Class);
     * @param constructor The constructor for the Object.
     * @param var_args The arguments to be passed to the constructor.
     */
    function create<T = any>(
        constructor: {new (...a: any[]): T}, ...var_args: any[]): T;
    /**
     * Wraps a function to allow it to be called, at most, once per interval
     * (specified in milliseconds). If the wrapper function is called N times
     * within that interval, only the Nth call will go through.
     *
     * This is particularly useful for batching up repeated actions where the
     * last action should win. This can be used, for example, for refreshing an
     * autocomplete pop-up every so often rather than updating with every
     * keystroke, since the final text typed by the user is the one that should
     * produce the final autocomplete results. For more stateful debouncing with
     * support for pausing, resuming, and canceling debounced actions, use
     * {@code goog.async.Debouncer}.
     * @param f Function to call.
     * @param interval Interval over which to debounce. The function will only
     * be called after the full interval has elapsed since the last call.
     * @param opt_scope Object in whose scope to call the function.
     */
    function debounce<SCOPE = any>(
        f: (...a: any[]) => any, interval: number,
        opt_scope?: SCOPE): (...a: any[]) => void;
    /**
     * Creates a function that returns whether its argument equals the given
     * value.
     *
     * Example:
     * var key = goog.object.findKey(obj, goog.functions.equalTo('needle'));
     * @param value The value to compare to.
     * @param opt_useLooseComparison Whether to use a loose (==) comparison
     * rather than a strict (===) one. Defaults to false.
     */
    function equalTo(value: any, opt_useLooseComparison?: boolean): (a: any) =>
        boolean;
    /**
     * Creates a function that always throws an error with the given message.
     * @param message The error message.
     */
    function error(message: string): (...a: any[]) => any;
    /**
     * Creates a function that throws the given object.
     * @param err An object to be thrown.
     */
    function fail(err: any): (...a: any[]) => any;
    /**
     * A simple function that returns the first argument of whatever is passed
     * into it.
     * @param opt_returnValue The single value that will be returned.
     * @param var_args Optional trailing arguments. These are ignored.
     */
    function identity<T = any>(opt_returnValue?: T, ...var_args: any[]): T;
    /**
     * Given a function, create a function that keeps opt_numArgs arguments and
     * silently discards all additional arguments.
     * @param f The original function.
     * @param opt_numArgs The number of arguments to keep. Defaults to 0.
     */
    function lock(
        f: (...a: any[]) => any, opt_numArgs?: number): (...a: any[]) => any;
    /**
     * Creates a function that returns the Boolean opposite of a provided
     * function. For example, (goog.functions.not(f))(x) is equivalent to !f(x).
     * @param f The original function.
     */
    function not(f: (...a: any[]) => any): (...a: any[]) => boolean;
    /**
     * Creates a function that returns its nth argument.
     * @param n The position of the return argument.
     */
    function nth(n: number): (...a: any[]) => any;
    /**
     * Wraps a function to allow it to be called, at most, once. All
     * additional calls are no-ops.
     *
     * This is particularly useful for initialization functions
     * that should be called, at most, once.
     * @param f Function to call.
     */
    function once(f: () => any): () => void;
    /**
     * Creates a function that returns true if any of its components evaluates
     * to true. The components are evaluated in order, and the evaluation will
     * be short-circuited as soon as a function returns true. For example,
     * (goog.functions.or(f, g))(x) is equivalent to f(x) || g(x).
     * @param var_args A list of functions.
     */
    function or(...var_args: (((...a: any[]) => any)|undefined)[]):
        (...a: any[]) => boolean;
    /**
     * Like goog.partial(), except that arguments are added after arguments to
     * the returned function.
     *
     * Usage:
     * function f(arg1, arg2, arg3, arg4) { ... }
     * var g = goog.functions.partialRight(f, arg3, arg4);
     * g(arg1, arg2);
     * @param fn A function to partially apply.
     * @param var_args Additional arguments that are partially applied to fn at
     * the end.
     */
    function partialRight(
        fn: (...a: any[]) => any, ...var_args: any[]): (...a: any[]) => any;
    /**
     * Wraps a function to allow it to be called, at most, once per interval
     * (specified in milliseconds). If the wrapper function is called N times
     * within that interval, only the 1st call will go through.
     *
     * This is particularly useful for limiting repeated user requests where the
     * first request is guaranteed to have all the data required to perform the
     * final action, so there's no need to wait until the end of the interval
     * before sending the request out.
     * @param f Function to call.
     * @param interval Interval over which to rate-limit. The function will only
     * be called once per interval, and ignored for the remainer of the
     * interval.
     * @param opt_scope Object in whose scope to call the function.
     */
    function rateLimit<SCOPE = any>(
        f: (...a: any[]) => any, interval: number,
        opt_scope?: SCOPE): (...a: any[]) => void;
    /**
     * Creates a function that calls the functions passed in in sequence, and
     * returns the value of the last function. For example,
     * (goog.functions.sequence(f, g))(x) is equivalent to f(x),g(x).
     * @param var_args A list of functions.
     */
    function sequence(...var_args: (((...a: any[]) => any)|undefined)[]):
        (...a: any[]) => any;
    /**
     * Wraps a function to allow it to be called, at most, once per interval
     * (specified in milliseconds). If the wrapper function is called N times in
     * that interval, both the 1st and the Nth calls will go through.
     *
     * This is particularly useful for limiting repeated user requests where the
     * the last action should win, but you also don't want to wait until the end
     * of the interval before sending a request out, as it leads to a perception
     * of slowness for the user.
     * @param f Function to call.
     * @param interval Interval over which to throttle. The function can only be
     * called once per interval.
     * @param opt_scope Object in whose scope to call the function.
     */
    function throttle<SCOPE = any>(
        f: (...a: any[]) => any, interval: number,
        opt_scope?: SCOPE): (...a: any[]) => void;
    /**
     * Given a function, create a new function that swallows its return value
     * and replaces it with a new one.
     * @param f A function.
     * @param retValue A new return value.
     */
    function withReturnValue<T = any>(
        f: (...a: any[]) => any, retValue: T): (...a: any[]) => T;
}
declare module 'goog:goog.functions' {
    import alias = ಠ_ಠ.clutz.goog.functions;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx {
    /**
     * Class representing an active drop target
     */
    class ActiveDropTarget_ extends ActiveDropTarget__Instance {}
    class ActiveDropTarget__Instance {
        private noStructuralTyping_: any;
    }
    /**
     * Class for representing a scrollable container
     */
    class ScrollableContainer_ extends ScrollableContainer__Instance {}
    class ScrollableContainer__Instance {
        private noStructuralTyping_: any;
    }
}
declare module 'goog:goog.fx' {
    import alias = ಠ_ಠ.clutz.goog.fx;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx {
    /**
     * Abstract class that provides reusable functionality for implementing drag
     * and drop functionality.
     *
     * This class also allows clients to define their own subtargeting function
     * so that drop areas can have finer granularity than a single element. This
     * is accomplished by using a client provided function to map from element
     * and coordinates to a subregion id.
     *
     * This class can also be made aware of scrollable containers that contain
     * drop targets by calling addScrollableContainer. This will cause dnd to
     * take changing scroll positions into account while a drag is occurring.
     */
    class AbstractDragDrop extends AbstractDragDrop_Instance {
        /**
         * Constant for distance threshold, in pixels, an element has to be
         * moved to initiate a drag operation.
         */
        static initDragDistanceThreshold: number;
    }
    class AbstractDragDrop_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * List of items that makes up the drag source or drop target.
         */
        items_: (ಠ_ಠ.clutz.goog.fx.DragDropItem|null)[]|null;
        /**
         * Add item to drag object.
         * @param element Dom Node, or string representation of node id, to be
         * used as drag source/drop target.
         */
        addItem(a: GlobalElement|null|string): any;
        /**
         * Makes drag and drop aware of a target container that could scroll mid
         * drag.
         * @param element The scroll container.
         */
        addScrollableContainer(element: GlobalElement|null): void;
        /**
         * Associate drop target with drag element.
         * @param target Target to add.
         */
        addTarget(target: ಠ_ಠ.clutz.goog.fx.AbstractDragDrop|null): void;
        /**
         * Called after a drag operation has finished.
         * @param opt_dropTarget Target for successful drop.
         */
        afterEndDrag(opt_dropTarget?: ಠ_ಠ.clutz.goog.fx.DragDropItem|
                     null): void;
        /**
         * Creates an element for the item being dragged.
         * @param sourceEl Drag source element.
         */
        createDragElement(sourceEl: GlobalElement|null): GlobalElement|null;
        /**
         * Generates an element to follow the cursor during dragging, given a
         * drag source element.  The default behavior is simply to clone the
         * source element, but this may be overridden in subclasses.  This
         * method is called by
         * {@code createDragElement()} before the drag class is added.
         * @param sourceEl Drag source element.
         */
        createDragElementInternal(sourceEl: GlobalElement|null): GlobalElement;
        /**
         * Creates the Dragger for the drag element.
         * @param sourceEl Drag source element.
         * @param el the element created by createDragElement().
         * @param event Mouse down event for start of drag.
         */
        createDraggerFor(
            sourceEl: GlobalElement|null, el: GlobalElement|null,
            event: ಠ_ಠ.clutz.goog.events.BrowserEvent|
            null): ಠ_ಠ.clutz.goog.fx.Dragger;
        /**
         * Called once a drag operation has finished. Removes event listeners
         * and elements.
         */
        disposeDrag(): void;
        disposeInternal(): void;
        /**
         * Called when removing an item. Removes event listeners and classes.
         * @param item Item to dispose.
         */
        disposeItem(item: ಠ_ಠ.clutz.goog.fx.DragDropItem|null): void;
        /**
         * Event handler that's used to stop drag. Fires a drop event if over a
         * valid target.
         * @param event Drag event.
         */
        endDrag(event: ಠ_ಠ.clutz.goog.fx.DragEvent|null): void;
        /**
         * Returns the position for the drag element.
         * @param el Drag source element.
         * @param dragEl The dragged element created by createDragElement().
         * @param event Mouse down event for start of drag.
         */
        getDragElementPosition(
            el: GlobalElement|null, dragEl: GlobalElement|null,
            event: ಠ_ಠ.clutz.goog.events.BrowserEvent|
            null): ಠ_ಠ.clutz.goog.math.Coordinate;
        /**
         * Returns the dragger object.
         */
        getDragger(): ಠ_ಠ.clutz.goog.fx.Dragger|null;
        /**
         * Calculates the position and dimension of a draggable element.
         * @param item Item that's being dragged.
         * @param element The element to calculate the box.
         */
        getElementBox(
            item: ಠ_ಠ.clutz.goog.fx.DragDropItem|null,
            element: GlobalElement|null): ಠ_ಠ.clutz.goog.math.Box;
        /**
         * Get the position of a drag event.
         * @param event Drag event.
         */
        getEventPosition(event: ಠ_ಠ.clutz.goog.fx.DragEvent|
                         null): ಠ_ಠ.clutz.goog.math.Coordinate;
        /**
         * Gets the scroll distance as a coordinate object, using
         * the window of the current drag element's dom.
         */
        getScrollPos(): ಠ_ಠ.clutz.goog.math.Coordinate;
        /**
         * Initialize drag and drop functionality for sources/targets already
         * added. Sources/targets added after init has been called will
         * initialize themselves one by one.
         */
        init(): void;
        /**
         * Initializes a single item.
         * @param item Item to initialize.
         */
        initItem(item: ಠ_ಠ.clutz.goog.fx.DragDropItem|null): void;
        /**
         * Whether the control has been initialized.
         */
        isInitialized(): boolean;
        /**
         * Checks whatever a given point is inside a given box.
         * @param x Cursor position on the x-axis.
         * @param y Cursor position on the y-axis.
         * @param box Box to check position against.
         */
        isInside(x: number, y: number, box: ಠ_ಠ.clutz.goog.math.Box|null):
            boolean;
        /**
         * Starts a drag event for an item if the mouse button stays pressed and
         * the cursor moves a few pixels. Allows dragging of items without first
         * having to register them with addItem.
         * @param event Mouse down event.
         * @param item Item that's being dragged.
         */
        maybeStartDrag(
            event: ಠ_ಠ.clutz.goog.events.BrowserEvent|null,
            item: ಠ_ಠ.clutz.goog.fx.DragDropItem|null): void;
        /**
         * Recalculates the geometry of this source's drag targets.  Call this
         * if the position or visibility of a drag target has changed during
         * a drag, or if targets are added or removed.
         *
         * TODO(user): this is an expensive operation;  more efficient APIs
         * may be necessary.
         */
        recalculateDragTargets(): void;
        /**
         * Recalculates the current scroll positions of scrollable containers
         * and allocates targets. Call this if the position of a container
         * changed or if targets are added or removed.
         */
        recalculateScrollableContainers(): void;
        /**
         * Removes all scrollable containers.
         */
        removeAllScrollableContainers(): void;
        /**
         * Removes all items.
         */
        removeItems(): void;
        /**
         * Removes the specified target from the list of drop targets.
         * @param target Target to remove.
         */
        removeTarget(target: ಠ_ಠ.clutz.goog.fx.AbstractDragDrop): void;
        /**
         * Set class to add to source elements being dragged.
         * @param className Class to be added.  Must be a single, valid
         * classname.
         */
        setDragClass(className: string): void;
        /**
         * Sets the SCROLL event target to make drag element follow scrolling.
         * @param scrollTarget The element that dispatches SCROLL events.
         */
        setScrollTarget(scrollTarget: GlobalEventTarget|null): void;
        /**
         * Set class to add to source elements.
         * @param className Class to be added.  Must be a single, valid
         * classname.
         */
        setSourceClass(className: string): void;
        /**
         * Set a function that provides subtargets. A subtargeting function
         * returns an arbitrary identifier for each subtarget of an element.
         * DnD code will generate additional drag over / out events when
         * switching from subtarget to subtarget. This is useful for instance
         * if you are interested if you are on the top half or the bottom half
         * of the element.
         * The provided function will be given the DragDropItem, box, x, y
         * box is the current window coordinates occupied by element
         * x, y is the mouse position in window coordinates
         * @param f The new subtarget function.
         */
        setSubtargetFunction(f: (...a: any[]) => any): void;
        /**
         * Set class to add to target elements.
         * @param className Class to be added.  Must be a single, valid
         * classname.
         */
        setTargetClass(className: string): void;
        /**
         * Event handler that's used to start drag.
         * @param event Mouse move event.
         * @param item Item that's being dragged.
         */
        startDrag(
            event: ಠ_ಠ.clutz.goog.events.BrowserEvent|null,
            item: ಠ_ಠ.clutz.goog.fx.DragDropItem|null): void;
    }
}
declare module 'goog:goog.fx.AbstractDragDrop' {
    import alias = ಠ_ಠ.clutz.goog.fx.AbstractDragDrop;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.AbstractDragDrop.EventType {
    var DRAG: string;
    var DRAGEND: string;
    var DRAGOUT: string;
    var DRAGOVER: string;
    var DRAGSTART: string;
    var DROP: string;
}
declare module 'goog:goog.fx.AbstractDragDrop.EventType' {
    import alias = ಠ_ಠ.clutz.goog.fx.AbstractDragDrop.EventType;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx {
    /**
     * Constructor for an animation object.
     */
    class Animation extends Animation_Instance {
        static TIMEOUT: number;
        static setAnimationWindow(animationWindow: Window|null): void;
    }
    class Animation_Instance extends ಠ_ಠ.clutz.goog.fx.TransitionBase_Instance
        implements ಠ_ಠ.clutz.goog.fx.anim.Animated,
                   ಠ_ಠ.clutz.goog.fx.Transition {
        /**
         * Constructor for an animation object.
         * @param start Array for start coordinates.
         * @param end Array for end coordinates.
         * @param duration Length of animation in milliseconds.
         * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
         */
        constructor(
            start: ಠ_ಠ.clutz.goog.vec.Number|null,
            end: ಠ_ಠ.clutz.goog.vec.Number|null, duration: number,
            opt_acc?: (...a: any[]) => any);
        /**
         * Current coordinate for animation.
         */
        coords: ಠ_ಠ.clutz.goog.vec.Number|null;
        /**
         * Duration of animation in milliseconds.
         */
        duration: number;
        /**
         * End point.
         */
        endPoint: ಠ_ಠ.clutz.goog.vec.Number|null;
        endTime: number|null;
        /**
         * Timestamp for when last frame was run.
         */
        lastFrame: number|null;
        /**
         * Percent of the way through the animation.
         */
        progress: number;
        /**
         * Start point.
         */
        startPoint: ಠ_ಠ.clutz.goog.vec.Number|null;
        startTime: number|null;
        /**
         * Handles the actual iteration of the animation in a timeout
         * @param now The current time.
         */
        cycle(now: number): void;
        /**
         * Stops an animation, fires a 'destroy' event and then removes all the
         * event handlers to clean up memory.
         */
        destroy(): void;
        dispatchAnimationEvent(type: string): void;
        /**
         * Disposes of the animation.  Stops an animation, fires a 'destroy'
         * event and then removes all the event handlers to clean up memory.
         */
        disposeInternal(): void;
        /**
         * Sets whether the animation should use "right" rather than "left" to
         * position elements.  This is a temporary flag to allow clients to
         * transition to the new component at their convenience.  At some point
         * "right" will be used for RTL elements by default.
         * @param useRightPositioningForRtl True if "right" should be used for
         * positioning, false if "left" should be used for positioning.
         */
        enableRightPositioningForRtl(useRightPositioningForRtl: boolean): void;
        getDuration(): number;
        getProgress(): number;
        /**
         * Whether the animation should use "right" rather than "left" to
         * position elements.  This is a temporary flag to allow clients to
         * transition to the new component at their convenience.  At some point
         * "right" will be used for RTL elements by default.
         */
        isRightPositioningForRtlEnabled(): boolean;
        /**
         * Dispatches the ANIMATE event. Sub classes should override this
         * instead of listening to the event.
         */
        onAnimate(): void;
        onAnimationFrame(now: number): any;
        /**
         * Dispatches the DESTROY event. Sub classes should override this
         * instead of listening to the event.
         */
        onDestroy(): void;
        /**
         * Pauses the animation (iff it's playing).
         */
        pause(): void;
        /**
         * Starts or resumes an animation.
         * @param opt_restart Whether to restart the animation from the
         * beginning if it has been paused.
         */
        play(opt_restart?: boolean): boolean;
        /**
         * Sets the progress of the animation.
         * @param progress The new progress of the animation.
         */
        setProgress(progress: number): void;
        /**
         * Stops the animation.
         * @param opt_gotoEnd If true the animation will move to the end coords.
         */
        stop(opt_gotoEnd?: boolean): any;
    }
}
declare module 'goog:goog.fx.Animation' {
    import alias = ಠ_ಠ.clutz.goog.fx.Animation;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.Animation {
    /**
     * Events fired by the animation.
     */
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        ANIMATE: EventType,
        BEGIN: EventType,
        DESTROY: EventType,
        END: EventType,
        FINISH: EventType,
        PAUSE: EventType,
        PLAY: EventType,
        RESUME: EventType,
        STOP: EventType,
    };
}
declare module 'goog:goog.fx.Animation.EventType' {
    import alias = ಠ_ಠ.clutz.goog.fx.Animation.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.Animation {
    /**
     * Enum for the possible states of an animation.
     */
    //!! goog.fx.Animation.State aliases enum goog.fx.TransitionBase.State
    type State = goog.fx.TransitionBase.State;
    const State: typeof goog.fx.TransitionBase.State;
}
declare module 'goog:goog.fx.Animation.State' {
    import alias = ಠ_ಠ.clutz.goog.fx.Animation.State;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx {
    /**
     * Class for an animation event object.
     */
    class AnimationEvent extends AnimationEvent_Instance {}
    class AnimationEvent_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
        /**
         * Class for an animation event object.
         * @param type Event type.
         * @param anim An animation object.
         */
        constructor(type: string, anim: ಠ_ಠ.clutz.goog.fx.Animation|null);
        /**
         * The animation object.
         */
        anim: ಠ_ಠ.clutz.goog.fx.Animation|null;
        /**
         * The current coordinates.
         */
        coords: ಠ_ಠ.clutz.goog.vec.Number|null;
        /**
         * The current duration.
         */
        duration: number;
        /**
         * Frames per second so far.
         */
        fps: number;
        /**
         * The current progress.
         */
        progress: number;
        /**
         * The state of the animation.
         */
        state: number;
        /**
         * The x coordinate.
         */
        x: number;
        /**
         * The y coordinate.
         */
        y: number;
        /**
         * The z coordinate.
         */
        z: number;
        /**
         * Returns the coordinates as integers (rounded to nearest integer).
         */
        coordsAsInts(): ಠ_ಠ.clutz.goog.vec.Number;
    }
}
declare module 'goog:goog.fx.AnimationEvent' {
    import alias = ಠ_ಠ.clutz.goog.fx.AnimationEvent;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx {
    /**
     * Constructor for AnimationParallelQueue object.
     */
    class AnimationParallelQueue extends AnimationParallelQueue_Instance {}
    class AnimationParallelQueue_Instance extends
        ಠ_ಠ.clutz.goog.fx.AnimationQueue_Instance {
        endTime: number|null;
        startTime: number|null;
        onAnimationFinish(e: ಠ_ಠ.clutz.goog.events.Event|null): any;
        pause(): void;
        play(opt_restart?: boolean): boolean;
        stop(opt_gotoEnd?: boolean): any;
    }
}
declare module 'goog:goog.fx.AnimationParallelQueue' {
    import alias = ಠ_ಠ.clutz.goog.fx.AnimationParallelQueue;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx {
    /**
     * Constructor for AnimationQueue object.
     */
    class AnimationQueue extends AnimationQueue_Instance {}
    class AnimationQueue_Instance extends
        ಠ_ಠ.clutz.goog.fx.TransitionBase_Instance {
        /**
         * An array holding all animations in the queue.
         */
        queue: (ಠ_ಠ.clutz.goog.fx.TransitionBase|null)[]|null;
        /**
         * Pushes an Animation to the end of the queue.
         * @param animation The animation to add to the queue.
         */
        add(animation: ಠ_ಠ.clutz.goog.fx.TransitionBase|null): void;
        /**
         * Disposes of the animations.
         */
        disposeInternal(): void;
        /**
         * Handles the event that an animation has finished.
         * @param e The finishing event.
         */
        onAnimationFinish(a: ಠ_ಠ.clutz.goog.events.Event|null): any;
        /**
         * Removes an Animation from the queue.
         * @param animation The animation to remove.
         */
        remove(animation: ಠ_ಠ.clutz.goog.fx.Animation|null): void;
    }
}
declare module 'goog:goog.fx.AnimationQueue' {
    import alias = ಠ_ಠ.clutz.goog.fx.AnimationQueue;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx {
    /**
     * Constructor for AnimationSerialQueue object.
     */
    class AnimationSerialQueue extends AnimationSerialQueue_Instance {}
    class AnimationSerialQueue_Instance extends
        ಠ_ಠ.clutz.goog.fx.AnimationQueue_Instance {
        endTime: number|null;
        startTime: number|null;
        onAnimationFinish(e: ಠ_ಠ.clutz.goog.events.Event|null): any;
        pause(): void;
        play(opt_restart?: boolean): boolean;
        stop(opt_gotoEnd?: boolean): any;
    }
}
declare module 'goog:goog.fx.AnimationSerialQueue' {
    import alias = ಠ_ಠ.clutz.goog.fx.AnimationSerialQueue;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx {
    /**
     * This animation class is used to animate a CSS sprite (moving a background
     * image).  This moves through a series of images in a single image sprite.
     * By default, the animation loops when done.  Looping can be disabled by
     * setting
     * {@code opt_disableLoop} and results in the animation stopping on the last
     * image in the image sprite.  You should set up the {@code
     * background-image} and size in a CSS rule for the relevant element.
     */
    class CssSpriteAnimation extends CssSpriteAnimation_Instance {}
    class CssSpriteAnimation_Instance extends
        ಠ_ಠ.clutz.goog.fx.Animation_Instance {
        /**
         * This animation class is used to animate a CSS sprite (moving a
         * background image).  This moves through a series of images in a single
         * image sprite. By default, the animation loops when done.  Looping can
         * be disabled by setting
         * {@code opt_disableLoop} and results in the animation stopping on the
         * last image in the image sprite.  You should set up the {@code
         * background-image} and size in a CSS rule for the relevant element.
         * @param element The HTML element to animate the background for.
         * @param size The size of one image in the image sprite.
         * @param box The box describing the layout of the sprites to use in the
         * large image.  The sprites can be position horizontally or vertically
         * and using a box here allows the implementation to know which way to
         * go.
         * @param time The duration in milliseconds for one iteration of the
         * animation.  For example, if the sprite contains 4 images and the
         * duration is set to 400ms then each sprite will be displayed for
         * 100ms.
         * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
         * This can be used to make certain frames be shown for a longer period
         * of time.
         * @param opt_disableLoop Whether the animation should be halted after a
         * single loop of the images in the sprite.
         */
        constructor(
            element: GlobalElement|null, size: ಠ_ಠ.clutz.goog.math.Size|null,
            box: ಠ_ಠ.clutz.goog.math.Box|null, time: number,
            opt_acc?: (a: number) => number, opt_disableLoop?: boolean);
        /**
         * Clears the background position style set directly on the element
         * by the animation. Allows to apply CSS styling for background position
         * on the same element when the sprite animation is not runniing.
         */
        clearSpritePosition(): void;
        disposeInternal(): void;
        onAnimate(): void;
        onFinish(): void;
    }
}
declare module 'goog:goog.fx.CssSpriteAnimation' {
    import alias = ಠ_ಠ.clutz.goog.fx.CssSpriteAnimation;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx {
    /**
     * Drag/drop implementation for creating drag sources/drop targets
     * consisting of a single HTML Element.
     */
    class DragDrop extends DragDrop_Instance {}
    class DragDrop_Instance extends
        ಠ_ಠ.clutz.goog.fx.AbstractDragDrop_Instance {
        /**
         * Drag/drop implementation for creating drag sources/drop targets
         * consisting of a single HTML Element.
         * @param element Dom Node, or string representation of node id, to be
         * used as drag source/drop target.
         * @param opt_data Data associated with the source/target.
         */
        constructor(
            element: GlobalElement|null|string, opt_data?: GlobalObject|null);
    }
}
declare module 'goog:goog.fx.DragDrop' {
    import alias = ಠ_ಠ.clutz.goog.fx.DragDrop;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx {
    /**
     * Object representing a drag and drop event.
     */
    class DragDropEvent extends DragDropEvent_Instance {}
    class DragDropEvent_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
        /**
         * Object representing a drag and drop event.
         * @param type Event type.
         * @param source Source drag drop object.
         * @param sourceItem Source item.
         * @param opt_target Target drag drop object.
         * @param opt_targetItem Target item.
         * @param opt_targetElement Target element.
         * @param opt_clientX X-Position relative to the screen.
         * @param opt_clientY Y-Position relative to the screen.
         * @param opt_x X-Position relative to the viewport.
         * @param opt_y Y-Position relative to the viewport.
         * @param opt_subtarget The currently active subtarget.
         * @param opt_browserEvent The browser event that caused this dragdrop
         * event.
         */
        constructor(
            type: string, source: ಠ_ಠ.clutz.goog.fx.AbstractDragDrop|null,
            sourceItem: ಠ_ಠ.clutz.goog.fx.DragDropItem|null,
            opt_target?: ಠ_ಠ.clutz.goog.fx.AbstractDragDrop|null,
            opt_targetItem?: ಠ_ಠ.clutz.goog.fx.DragDropItem|null,
            opt_targetElement?: GlobalElement|null, opt_clientX?: number,
            opt_clientY?: number, opt_x?: number, opt_y?: number,
            opt_subtarget?: GlobalObject|null,
            opt_browserEvent?: ಠ_ಠ.clutz.goog.events.BrowserEvent|null);
        /**
         * The browser event that caused this dragdrop event.
         */
        browserEvent?: ಠ_ಠ.clutz.goog.events.BrowserEvent|null;
        /**
         * X-Position relative to the screen.
         */
        clientX?: number;
        /**
         * Y-Position relative to the screen.
         */
        clientY?: number;
        /**
         * Reference to the source goog.fx.AbstractDragDrop object.
         */
        dragSource: ಠ_ಠ.clutz.goog.fx.AbstractDragDrop|null;
        /**
         * Reference to the source goog.fx.DragDropItem object.
         */
        dragSourceItem: ಠ_ಠ.clutz.goog.fx.DragDropItem|null;
        /**
         * Reference to the target goog.fx.AbstractDragDrop object.
         */
        dropTarget?: ಠ_ಠ.clutz.goog.fx.AbstractDragDrop|null;
        /**
         * The actual element of the drop target that is the target for this
         * event.
         */
        dropTargetElement?: GlobalElement|null;
        /**
         * Reference to the target goog.fx.DragDropItem object.
         */
        dropTargetItem?: ಠ_ಠ.clutz.goog.fx.DragDropItem|null;
        /**
         * The subtarget that is currently active if a subtargeting function
         * is supplied.
         */
        subtarget?: GlobalObject|null;
        /**
         * X-Position relative to the viewport.
         */
        viewportX?: number;
        /**
         * Y-Position relative to the viewport.
         */
        viewportY?: number;
    }
}
declare module 'goog:goog.fx.DragDropEvent' {
    import alias = ಠ_ಠ.clutz.goog.fx.DragDropEvent;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx {
    /**
     * Drag/drop implementation for creating drag sources/drop targets
     * consisting of multiple HTML Elements (items). All items share the same
     * drop target(s) but can be dragged individually.
     */
    class DragDropGroup extends DragDropGroup_Instance {}
    class DragDropGroup_Instance extends
        ಠ_ಠ.clutz.goog.fx.AbstractDragDrop_Instance {
        /**
         * Add DragDropItem to drag object.
         * @param item DragDropItem being added to the drag object.
         */
        addDragDropItem(item: ಠ_ಠ.clutz.goog.fx.DragDropItem|null): void;
        /**
         * Add item to drag object.
         * @param element Dom Node, or string representation of node id, to be
         * used as drag source/drop target.
         * @param opt_data Data associated with the source/target.
         */
        addItem(
            element: GlobalElement|null|string,
            opt_data?: GlobalObject|null): any;
        /**
         * Remove item from drag object.
         * @param element Dom Node, or string representation of node id, that
         * was previously added with addItem().
         */
        removeItem(element: GlobalElement|null|string): void;
        /**
         * Marks the supplied list of items as selected. A drag operation for
         * any of the selected items will affect all of them.
         * @param list List of items to select or null to clear selection.
         * TODO(eae): Not yet implemented.
         */
        setSelection(list: (ಠ_ಠ.clutz.goog.fx.DragDropItem|null)[]|null): void;
    }
}
declare module 'goog:goog.fx.DragDropGroup' {
    import alias = ಠ_ಠ.clutz.goog.fx.DragDropGroup;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx {
    /**
     * Class representing a source or target element for drag and drop
     * operations.
     */
    class DragDropItem extends DragDropItem_Instance {}
    class DragDropItem_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * Class representing a source or target element for drag and drop
         * operations.
         * @param element Dom Node, or string representation of node id, to be
         * used as drag source/drop target.
         * @param opt_data Data associated with the source/target.
         */
        constructor(
            element: GlobalElement|null|string, opt_data?: GlobalObject|null);
        /**
         * Data associated with element.
         */
        data?: GlobalObject|null;
        /**
         * Reference to drag source/target element
         */
        element: GlobalElement|null;
        /**
         * Gets the element that is currently being dragged.
         */
        getCurrentDragElement(): GlobalElement|null;
        /**
         * Get the data associated with the source/target.
         */
        getData(): GlobalObject|null|undefined;
        /**
         * Gets the element that is actually draggable given that the given
         * target was attempted to be dragged. This should be overridden when
         * the element that was given actually contains many items that can be
         * dragged. From the target, you can determine what element should
         * actually be dragged.
         * @param target The target that was attempted to be dragged.
         */
        getDraggableElement(target: GlobalElement|null): GlobalElement|null;
        /**
         * Gets all the elements of this item that are potentially draggable/
         */
        getDraggableElements(): (GlobalElement|null)[];
        /**
         * Sets the dragdrop to which this item belongs.
         * @param parent The parent dragdrop.
         */
        setParent(parent: ಠ_ಠ.clutz.goog.fx.AbstractDragDrop|null): void;
    }
}
declare module 'goog:goog.fx.DragDropItem' {
    import alias = ಠ_ಠ.clutz.goog.fx.DragDropItem;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx {
    /**
     * Object representing a drag event
     */
    class DragEvent extends DragEvent_Instance {}
    class DragEvent_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
        /**
         * Object representing a drag event
         * @param type Event type.
         * @param dragobj Drag object initiating event.
         * @param clientX X-coordinate relative to the viewport.
         * @param clientY Y-coordinate relative to the viewport.
         * @param browserEvent The closure object representing the browser event
         * that caused this drag event.
         * @param opt_actX Optional actual x for drag if it has been limited.
         * @param opt_actY Optional actual y for drag if it has been limited.
         * @param opt_dragCanceled Whether the drag has been canceled.
         */
        constructor(
            type: string, dragobj: ಠ_ಠ.clutz.goog.fx.Dragger|null,
            clientX: number, clientY: number,
            browserEvent: ಠ_ಠ.clutz.goog.events.BrowserEvent|null,
            opt_actX?: number, opt_actY?: number, opt_dragCanceled?: boolean);
        /**
         * The closure object representing the browser event that caused this
         * drag event.
         */
        browserEvent: ಠ_ಠ.clutz.goog.events.BrowserEvent|null;
        /**
         * X-coordinate relative to the viewport
         */
        clientX: number;
        /**
         * Y-coordinate relative to the viewport
         */
        clientY: number;
        /**
         * Whether drag was canceled with this event. Used to differentiate
         * between a legitimate drag END that can result in an action and a drag
         * END which is a result of a drag cancelation. For now it can happen 1)
         * with drag END event on FireFox when user drags the mouse out of the
         * window, 2) with drag END event on IE7 which is generated on MOUSEMOVE
         * event when user moves the mouse into the document after the mouse
         * button has been released, 3) when TOUCHCANCEL is raised instead of
         * TOUCHEND (on touch events).
         */
        dragCanceled: boolean;
        /**
         * Reference to the drag object for this event
         */
        dragger: ಠ_ಠ.clutz.goog.fx.Dragger|null;
        /**
         * The real x-position of the drag if it has been limited
         */
        left: number;
        /**
         * The real y-position of the drag if it has been limited
         */
        top: number;
    }
}
declare module 'goog:goog.fx.DragEvent' {
    import alias = ಠ_ಠ.clutz.goog.fx.DragEvent;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx {
    /**
     * Enum to indicate the direction that a drag list grows.
     */
    enum DragListDirection {
        DOWN,
        LEFT,
        LEFT_2D,
        RIGHT,
        RIGHT_2D,
    }
}
declare module 'goog:goog.fx.DragListDirection' {
    import alias = ಠ_ಠ.clutz.goog.fx.DragListDirection;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx {
    /**
     * A class representing a group of one or more "drag lists" with items that
     * can be dragged within them and between them.
     *
     * Example usage:
     * var dragListGroup = new goog.fx.DragListGroup();
     * dragListGroup.setDragItemHandleHoverClass(className1, className2);
     * dragListGroup.setDraggerElClass(className3);
     * dragListGroup.addDragList(vertList, goog.fx.DragListDirection.DOWN);
     * dragListGroup.addDragList(horizList, goog.fx.DragListDirection.RIGHT);
     * dragListGroup.init();
     */
    class DragListGroup extends DragListGroup_Instance {}
    class DragListGroup_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * Adds a drag list to this DragListGroup.
         * All calls to this method must happen before the call to init().
         * Remember that all child nodes (except text nodes) will be made
         * draggable to any other drag list in this group.
         * @param dragListElement Must be a container for a list of items that
         * should all be made draggable.
         * @param growthDirection The direction that this drag list grows in
         * (i.e. if an item is appended to the DOM, the list's bounding box
         * expands in this direction).
         * @param opt_unused Unused argument.
         * @param opt_dragHoverClass CSS class to apply to this drag list when
         * the draggerEl hovers over it during a drag action.  If present, must
         * be a single, valid classname (not a string of space-separated
         * classnames).
         */
        addDragList(
            dragListElement: GlobalElement|null,
            growthDirection: ಠ_ಠ.clutz.goog.fx.DragListDirection,
            opt_unused?: boolean, opt_dragHoverClass?: string): void;
        /**
         * Adds a single item to the given drag list and sets up the drag
         * listeners for it. If opt_index is specified the item is inserted at
         * this index, otherwise the item is added as the last child of the
         * list.
         * @param list The drag list where to add item to.
         * @param item The new element to add.
         * @param opt_index Index where to insert the item in the list. If not
         * specified item is inserted as the last child of list.
         */
        addItemToDragList(
            list: GlobalElement, item: GlobalElement, opt_index?: number): void;
        /**
         * Generates an element to follow the cursor during dragging, given a
         * drag source element.  The default behavior is simply to clone the
         * source element, but this may be overridden in subclasses.  This
         * method is called by
         * {@code createDragElement()} before the drag class is added.
         * @param sourceEl Drag source element.
         */
        createDragElementInternal(sourceEl: GlobalElement|null): GlobalElement;
        disposeInternal(): void;
        getHysteresis(): number;
        /**
         * Performs the initial setup to make all items in all lists draggable.
         */
        init(): void;
        /**
         * Inserts the currently dragged item in its new place.
         *
         * This method is used for insertion only when updateWhileDragging_ is
         * false (otherwise there is no need for that). In the basic
         * implementation the element is inserted before the currently hovered
         * over item (this can be changed by overriding the method in
         * subclasses).
         */
        insertCurrHoverItem(): void;
        isDragging(): boolean;
        /**
         * Listens for drag events on the given drag item. This method is
         * currently used to initialize drag items.
         * @param dragItem the element to initialize. This element has to be in
         * one of the drag lists.
         */
        listenForDragEvents(dragItem: GlobalElement): void;
        /**
         * Caches the heights of each drag list and drag item, except for the
         * current drag item.
         */
        recacheListAndItemBounds(): void;
        /**
         * Sets a user-supplied CSS class to add to the current drag item
         * (during a drag action).
         *
         * If not set, the default behavior adds visibility:hidden to the
         * current drag item so that it is a block of empty space in the hover
         * drag list (if any). If this class is set by the user, then the
         * default behavior does not happen (unless, of course, the class also
         * contains visibility:hidden).
         * @param var_args The CSS class or classes.
         */
        setCurrDragItemClass(...var_args: (string|undefined)[]): void;
        /**
         * Sets a user-supplied CSS class to add to a drag item handle on hover
         * (not during a drag action).
         * @param var_args The CSS class or classes.
         */
        setDragItemHandleHoverClass(...var_args: (string|undefined)[]): void;
        /**
         * Sets a user-supplied CSS class to add to a drag item on hover (not
         * during a drag action).
         * @param var_args The CSS class or classes.
         */
        setDragItemHoverClass(...var_args: (string|undefined)[]): void;
        /**
         * Sets a user-supplied CSS class to add to the clone of the current
         * drag item that's actually being dragged around (during a drag
         * action).
         * @param draggerElClass The CSS class.
         */
        setDraggerElClass(draggerElClass: string): void;
        /**
         * Sets a user-supplied function used to get the "handle" element for a
         * drag item. The function must accept exactly one argument. The
         * argument may be any drag item element.
         *
         * If not set, the default implementation uses the whole drag item as
         * the handle.
         * @param getHandleForDragItemFn A function that, given any drag item,
         * returns a reference to its "handle" element (which may be the drag
         * item element itself).
         */
        setFunctionToGetHandleForDragItem(
            getHandleForDragItemFn: (a: GlobalElement) => GlobalElement |
                null): void;
        /**
         * Sets the distance the user has to drag the element before a drag
         * operation is started.
         * @param distance The number of pixels after which a mousedown and move
         * is considered a drag.
         */
        setHysteresis(distance: number): void;
        /**
         * Sets the property of the currDragItem that it is always displayed in
         * the list.
         */
        setIsCurrDragItemAlwaysDisplayed(): void;
        /**
         * Sets the private property updateWhileDragging_ to false. This
         * disables the update of the position of the currDragItem while
         * dragging. It will only be placed to its new location once the drag
         * ends.
         */
        setNoUpdateWhileDragging(): void;
        /**
         * Updates the value of currHoverItem_.
         *
         * This method is used for insertion only when updateWhileDragging_ is
         * false. The below implementation is the basic one. This method can be
         * extended by a subclass to support changes to hovered item (eg:
         * highlighting). Parametr opt_draggerElCenter can be used for more
         * sophisticated effects.
         * @param hoverNextItem element of the list that is hovered over.
         * @param opt_draggerElCenter current position of the dragged element.
         */
        updateCurrHoverItem(
            hoverNextItem: GlobalElement|null,
            opt_draggerElCenter?: ಠ_ಠ.clutz.goog.math.Coordinate|null): void;
    }
}
declare module 'goog:goog.fx.DragListGroup' {
    import alias = ಠ_ಠ.clutz.goog.fx.DragListGroup;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.DragListGroup {
    /**
     * Events dispatched by this class.
     */
    type EventType =
        ಠ_ಠ.clutz.goog.events.EventId<ಠ_ಠ.clutz.goog.fx.DragListGroupEvent>&
        {clutzEnumBrand: never};
    var EventType: {
        BEFOREDRAGEND: EventType,
        BEFOREDRAGMOVE: EventType,
        BEFOREDRAGSTART: EventType,
        DRAGEND: EventType,
        DRAGGERCREATED: EventType,
        DRAGGERREMOVED: EventType,
        DRAGMOVE: EventType,
        DRAGSTART: EventType,
    };
}
declare module 'goog:goog.fx.DragListGroup.EventType' {
    import alias = ಠ_ಠ.clutz.goog.fx.DragListGroup.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx {
    /**
     * The event object dispatched by DragListGroup.
     * The fields draggerElCenter, hoverList, and hoverNextItem are only
     * available for the BEFOREDRAGMOVE and DRAGMOVE events.
     */
    class DragListGroupEvent extends DragListGroupEvent_Instance {}
    class DragListGroupEvent_Instance extends
        ಠ_ಠ.clutz.goog.events.Event_Instance {
        /**
         * The event object dispatched by DragListGroup.
         * The fields draggerElCenter, hoverList, and hoverNextItem are only
         * available for the BEFOREDRAGMOVE and DRAGMOVE events.
         * @param dragListGroup A reference to the associated DragListGroup
         * object.
         * @param event The event fired by the browser or fired by the dragger.
         * @param currDragItem The current drag item being moved.
         * @param draggerEl The clone of the current drag item that's actually
         * being dragged around.
         * @param dragger The dragger object.
         * @param opt_draggerElCenter The current center position of the
         * draggerEl.
         * @param opt_hoverList The current drag list that's being hovered over,
         * or null if the center of draggerEl is outside of any drag lists. If
         * not null and the drag action ends right now, then currDragItem will
         * end up in this list.
         * @param opt_hoverNextItem The current next item in the hoverList that
         * the draggerEl is hovering over. (I.e. If the drag action ends right
         * now, then this item would become the next item after the new location
         * of currDragItem.) May be null if not applicable or if currDragItem
         * would be added to the end of hoverList.
         */
        constructor(
            type: ಠ_ಠ.clutz.goog.fx.DragListGroup.EventType,
            dragListGroup: ಠ_ಠ.clutz.goog.fx.DragListGroup|null,
            event: ಠ_ಠ.clutz.goog.events.BrowserEvent|null|
            ಠ_ಠ.clutz.goog.fx.DragEvent,
            currDragItem: GlobalElement|null, draggerEl: GlobalElement|null,
            dragger: ಠ_ಠ.clutz.goog.fx.Dragger|null,
            opt_draggerElCenter?: ಠ_ಠ.clutz.goog.math.Coordinate|null,
            opt_hoverList?: GlobalElement|null,
            opt_hoverNextItem?: GlobalElement|null);
        /**
         * The current drag item being move.
         */
        currDragItem: GlobalElement|null;
        /**
         * A reference to the associated DragListGroup object.
         */
        dragListGroup: ಠ_ಠ.clutz.goog.fx.DragListGroup|null;
        /**
         * The dragger object.
         */
        dragger: ಠ_ಠ.clutz.goog.fx.Dragger|null;
        /**
         * The clone of the current drag item that's actually being dragged
         * around.
         */
        draggerEl: GlobalElement|null;
        /**
         * The current center position of the draggerEl.
         */
        draggerElCenter?: ಠ_ಠ.clutz.goog.math.Coordinate|null;
        /**
         * The event fired by the browser or fired by the dragger.
         */
        event: ಠ_ಠ.clutz.goog.events.BrowserEvent|null|
            ಠ_ಠ.clutz.goog.fx.DragEvent;
        /**
         * The current drag list that's being hovered over, or null if the
         * center of draggerEl is outside of any drag lists. (I.e. If not null
         * and the drag action ends right now, then currDragItem will end up in
         * this list.)
         */
        hoverList?: GlobalElement|null;
        /**
         * The current next item in the hoverList that the draggerEl is hovering
         * over. (I.e. If the drag action ends right now, then this item would
         * become the next item after the new location of currDragItem.) May be
         * null if not applicable or if currDragItem would be added to the end
         * of hoverList.
         */
        hoverNextItem?: GlobalElement|null;
    }
}
declare module 'goog:goog.fx.DragListGroupEvent' {
    import alias = ಠ_ಠ.clutz.goog.fx.DragListGroupEvent;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx {
    /**
     * A scroll support class. Currently this class will automatically scroll
     * a scrollable container node and scroll it by a fixed amount at a timed
     * interval when the mouse is moved above or below the container or in
     * vertical margin areas. Intended for use in drag and drop. This could
     * potentially be made more general and could support horizontal scrolling.
     */
    class DragScrollSupport extends DragScrollSupport_Instance {
        /**
         * The suggested scrolling margin.
         */
        static MARGIN: number;
    }
    class DragScrollSupport_Instance extends
        ಠ_ಠ.clutz.goog.Disposable_Instance {
        /**
         * A scroll support class. Currently this class will automatically
         * scroll a scrollable container node and scroll it by a fixed amount at
         * a timed interval when the mouse is moved above or below the container
         * or in vertical margin areas. Intended for use in drag and drop. This
         * could potentially be made more general and could support horizontal
         * scrolling.
         * @param containerNode A container that can be scrolled.
         * @param opt_margin Optional margin to use while scrolling.
         * @param opt_externalMouseMoveTracking Whether mouse move events are
         * tracked externally by the client object which calls the mouse move
         * event handler, useful when events are generated for more than one
         * source element and/or are not real mousemove events.
         */
        constructor(
            containerNode: GlobalElement|null, opt_margin?: number,
            opt_externalMouseMoveTracking?: boolean);
        /**
         * Calculates scroll delta.
         * @param coordinate Current mouse pointer coordinate.
         * @param min The coordinate value below which scrolling up should be
         * started.
         * @param rangeLength The length of the range in which scrolling should
         * be disabled and above which scrolling down should be started.
         */
        calculateScrollDelta(
            coordinate: number, min: number, rangeLength: number): number;
        disposeInternal(): void;
        /**
         * Handler for mouse moves events.
         * @param event Mouse move event.
         */
        onMouseMove(event: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Sets whether scrolling should be constrained to happen only when the
         * cursor is inside the container node. NOTE: If a margin is not set,
         * then it does not make sense to contain the scroll, because in that
         * case scroll will never be triggered.
         * @param constrain Whether scrolling should be constrained to happen
         * only when the cursor is inside the container node.
         */
        setConstrainScroll(constrain: boolean): void;
        /**
         * Sets whether horizontal scrolling is allowed.
         * @param scrolling Whether horizontal scrolling is allowed.
         */
        setHorizontalScrolling(scrolling: boolean): void;
    }
}
declare module 'goog:goog.fx.DragScrollSupport' {
    import alias = ಠ_ಠ.clutz.goog.fx.DragScrollSupport;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx {
    /**
     * A class that allows mouse or touch-based dragging (moving) of an element
     */
    class Dragger extends Dragger_Instance {
        /**
         * Creates copy of node being dragged.  This is a utility function to be
         * used wherever it is inappropriate for the original source to follow
         * the mouse cursor itself.
         * @param sourceEl Element to copy.
         */
        static cloneNode(sourceEl: GlobalElement|null): GlobalElement;
    }
    class Dragger_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * A class that allows mouse or touch-based dragging (moving) of an
         * element
         * @param target The element that will be dragged.
         * @param opt_handle An optional handle to control the drag, if null the
         * target is used.
         * @param opt_limits Object containing left, top, width, and height.
         */
        constructor(
            target: GlobalElement|null, opt_handle?: GlobalElement|null,
            opt_limits?: ಠ_ಠ.clutz.goog.math.Rect|null);
        /**
         * Current x position of mouse or touch relative to viewport.
         */
        clientX: number;
        /**
         * Current y position of mouse or touch relative to viewport.
         */
        clientY: number;
        /**
         * Current x position of drag relative to target's parent.
         */
        deltaX: number;
        /**
         * Current y position of drag relative to target's parent.
         */
        deltaY: number;
        /**
         * Reference to the handler that initiates the drag.
         */
        handle: GlobalElement|null;
        /**
         * Object representing the limits of the drag region.
         */
        limits: ಠ_ಠ.clutz.goog.math.Rect|null;
        /**
         * The current page scroll value.
         */
        pageScroll: ಠ_ಠ.clutz.goog.math.Coordinate|null;
        /**
         * Current x position of mouse or touch relative to screen. Deprecated
         * because it doesn't take into affect zoom level or pixel density.
         */
        screenX: number;
        /**
         * Current y position of mouse or touch relative to screen. Deprecated
         * because it doesn't take into affect zoom level or pixel density.
         */
        screenY: number;
        /**
         * The x position where the first mousedown or touchstart occurred.
         */
        startX: number;
        /**
         * The y position where the first mousedown or touchstart occurred.
         */
        startY: number;
        /**
         * Reference to drag target element.
         */
        target: GlobalElement|null;
        /**
         * Overridable function for computing the initial position of the target
         * before dragging begins.
         */
        computeInitialPosition(): void;
        /**
         * Overridable function for handling the default action of the drag
         * behaviour. Normally this is simply moving the element to x,y though
         * in some cases it might be used to resize the layer.  This is
         * basically a shortcut to implementing a default ondrag event handler.
         * @param x X-coordinate for target element. In right-to-left, x this is
         * the number of pixels the target should be moved to from the right.
         * @param y Y-coordinate for target element.
         */
        defaultAction(x: number, y: number): void;
        disposeInternal(): void;
        doDrag(
            e: ಠ_ಠ.clutz.goog.events.BrowserEvent|null, x: number, y: number,
            dragFromScroll: boolean): void;
        /**
         * Turns on/off true RTL behavior.  This should be called immediately
         * after construction.  This is a temporary flag to allow clients to
         * transition to the new component at their convenience.  At some point
         * true will be the default.
         * @param useRightPositioningForRtl True if "right" should be used for
         * positioning, false if "left" should be used for positioning.
         */
        enableRightPositioningForRtl(useRightPositioningForRtl: boolean): void;
        /**
         * Event handler that is used to end the drag.
         * @param e Event object.
         * @param opt_dragCanceled Whether the drag has been canceled.
         */
        endDrag(
            e: ಠ_ಠ.clutz.goog.events.BrowserEvent|null,
            opt_dragCanceled?: boolean): void;
        /**
         * Event handler that is used to end the drag by cancelling it.
         * @param e Event object.
         */
        endDragCancel(e: ಠ_ಠ.clutz.goog.events.BrowserEvent|null): void;
        getEnabled(): boolean;
        /**
         * Returns the event handler, intended for subclass use.
         */
        getHandler(): ಠ_ಠ.clutz.goog.events.EventHandler<this>;
        /**
         * Gets the distance the user has to drag the element before a drag
         * operation is started.
         */
        getHysteresis(): number;
        isDragging(): boolean;
        /**
         * Returns the 'real' x after limits are applied (allows for some
         * limits to be undefined).
         * @param x X-coordinate to limit.
         */
        limitX(x: number): number;
        /**
         * Returns the 'real' y after limits are applied (allows for some
         * limits to be undefined).
         * @param y Y-coordinate to limit.
         */
        limitY(y: number): number;
        /**
         * Prevents the dragger from calling setCapture(), even in browsers that
         * support it.  If the draggable item has click handlers, setCapture()
         * can break them.
         * @param allow True to use setCapture if the browser supports it.
         */
        setAllowSetCapture(allow: boolean): void;
        /**
         * Enables cancelling of built-in IE drag events.
         * @param cancelIeDragStart Whether to enable cancelling of IE dragstart
         * event.
         */
        setCancelIeDragStart(cancelIeDragStart: boolean): void;
        /**
         * Set whether dragger is enabled
         * @param enabled Whether dragger is enabled.
         */
        setEnabled(enabled: boolean): void;
        /**
         * Sets the distance the user has to drag the element before a drag
         * operation is started.
         * @param distance The number of pixels after which a mousedown and move
         * is considered a drag.
         */
        setHysteresis(distance: number): void;
        /**
         * Sets (or reset) the Drag limits after a Dragger is created.
         * @param limits Object containing left, top, width, height for new
         * Dragger limits. If target is right-to-left and
         * enableRightPositioningForRtl(true) is called, then rect is
         * interpreted as right, top, width, and height.
         */
        setLimits(limits: ಠ_ಠ.clutz.goog.math.Rect|null): void;
        /**
         * Set whether mousedown should be default prevented.
         * @param preventMouseDown Whether mousedown should be default
         * prevented.
         */
        setPreventMouseDown(preventMouseDown: boolean): void;
        /**
         * Sets the SCROLL event target to make drag element follow scrolling.
         * @param scrollTarget The event target that dispatches SCROLL events.
         */
        setScrollTarget(scrollTarget: GlobalEventTarget|null): void;
        /**
         * Sets up event handlers when dragging starts.
         */
        setupDragHandlers(): void;
        /**
         * Event handler that is used to start the drag
         * @param e Event object.
         */
        startDrag(e: ಠ_ಠ.clutz.goog.events.BrowserEvent|null): void;
    }
}
declare module 'goog:goog.fx.Dragger' {
    import alias = ಠ_ಠ.clutz.goog.fx.Dragger;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.Dragger {
    /**
     * Constants for event names.
     */
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        BEFOREDRAG: EventType,
        DRAG: EventType,
        EARLY_CANCEL: EventType,
        END: EventType,
        START: EventType,
    };
}
declare module 'goog:goog.fx.Dragger.EventType' {
    import alias = ಠ_ಠ.clutz.goog.fx.Dragger.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx {
    /**
     * An interface for programmatic transition. Must extend
     * {@code goog.events.EventTarget}.
     */
    interface Transition {
        play(): any;
        stop(): any;
    }
}
declare module 'goog:goog.fx.Transition' {
    import alias = ಠ_ಠ.clutz.goog.fx.Transition;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.Transition {
    /**
     * Transition event types.
     */
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        BEGIN: EventType,
        END: EventType,
        FINISH: EventType,
        PAUSE: EventType,
        PLAY: EventType,
        RESUME: EventType,
        STOP: EventType,
    };
}
declare module 'goog:goog.fx.Transition.EventType' {
    import alias = ಠ_ಠ.clutz.goog.fx.Transition.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx {
    /**
     * Constructor for a transition object.
     */
    class TransitionBase extends TransitionBase_Instance {}
    class TransitionBase_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance implements
            ಠ_ಠ.clutz.goog.fx.Transition {
        /**
         * Timestamp for when the animation finished or was stopped.
         */
        endTime: number|null;
        /**
         * Timestamp for when the animation was started.
         */
        startTime: number|null;
        /**
         * Dispatches an event object for the current animation.
         * @param type Event type that will be dispatched.
         */
        dispatchAnimationEvent(type: string): void;
        /**
         * Returns the current state of the animation.
         */
        getStateInternal(): ಠ_ಠ.clutz.goog.fx.TransitionBase.State;
        isPaused(): boolean;
        isPlaying(): boolean;
        isStopped(): boolean;
        /**
         * Dispatches the BEGIN event. Sub classes should override this instead
         * of listening to the event, and call this instead of dispatching the
         * event.
         */
        onBegin(): void;
        /**
         * Dispatches the END event. Sub classes should override this instead
         * of listening to the event, and call this instead of dispatching the
         * event.
         */
        onEnd(): void;
        /**
         * Dispatches the FINISH event. Sub classes should override this instead
         * of listening to the event, and call this instead of dispatching the
         * event.
         */
        onFinish(): void;
        /**
         * Dispatches the PAUSE event. Sub classes should override this instead
         * of listening to the event, and call this instead of dispatching the
         * event.
         */
        onPause(): void;
        /**
         * Dispatches the PLAY event. Sub classes should override this instead
         * of listening to the event, and call this instead of dispatching the
         * event.
         */
        onPlay(): void;
        /**
         * Dispatches the RESUME event. Sub classes should override this instead
         * of listening to the event, and call this instead of dispatching the
         * event.
         */
        onResume(): void;
        /**
         * Dispatches the STOP event. Sub classes should override this instead
         * of listening to the event, and call this instead of dispatching the
         * event.
         */
        onStop(): void;
        /**
         * Pauses the animation.
         */
        pause(): void;
        /**
         * Plays the animation.
         * @param opt_restart Optional parameter to restart the animation.
         */
        play(a?: boolean): boolean;
        /**
         * Sets the current state of the animation to paused.
         */
        setStatePaused(): void;
        /**
         * Sets the current state of the animation to playing.
         */
        setStatePlaying(): void;
        /**
         * Sets the current state of the animation to stopped.
         */
        setStateStopped(): void;
        /**
         * Stops the animation.
         * @param opt_gotoEnd Optional boolean parameter to go the the end of
         * the animation.
         */
        stop(a?: boolean): any;
    }
}
declare module 'goog:goog.fx.TransitionBase' {
    import alias = ಠ_ಠ.clutz.goog.fx.TransitionBase;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.TransitionBase {
    /**
     * Enum for the possible states of an animation.
     */
    enum State {
        PAUSED,
        PLAYING,
        STOPPED,
    }
}
declare module 'goog:goog.fx.TransitionBase.State' {
    import alias = ಠ_ಠ.clutz.goog.fx.TransitionBase.State;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.anim {
    /**
     * Default wait timeout for animations (in milliseconds).  Only used for
     * timed animation, which uses a timer (setTimeout) to schedule animation.
     */
    var TIMEOUT: number;
    /**
     * Registers an animation to be cycled on the global timer.
     * @param animation The animation to register.
     */
    function registerAnimation(animation: ಠ_ಠ.clutz.goog.fx.anim.Animated|
                               null): void;
    /**
     * Registers an animation window. This allows usage of the timing control
     * API for animations. Note that this window must be visible, as non-visible
     * windows can potentially stop animating. This window does not necessarily
     * need to be the window inside which animation occurs, but must remain
     * visible. See:
     * https://developer.mozilla.org/en/DOM/window.mozRequestAnimationFrame.
     * @param animationWindow The window in which to animate elements.
     */
    function setAnimationWindow(animationWindow: Window|null): void;
    /**
     * Tears down this module. Useful for testing.
     */
    function tearDown(): void;
    /**
     * Removes an animation from the list of animations which are cycled on the
     * global timer.
     * @param animation The animation to unregister.
     */
    function unregisterAnimation(animation: ಠ_ಠ.clutz.goog.fx.anim.Animated|
                                 null): void;
}
declare module 'goog:goog.fx.anim' {
    import alias = ಠ_ಠ.clutz.goog.fx.anim;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.anim {
    /**
     * An interface for programatically animated objects. I.e. rendered in
     * javascript frame by frame.
     */
    interface Animated {
        /**
         * Function called when a frame is requested for the animation.
         * @param now Current time in milliseconds.
         */
        onAnimationFrame(a: number): any;
    }
}
declare module 'goog:goog.fx.anim.Animated' {
    import alias = ಠ_ಠ.clutz.goog.fx.anim.Animated;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.css3 {
    /**
     * Creates a transition to fade the element.
     * @param element The element to fade.
     * @param duration Duration in seconds.
     * @param timing The CSS3 timing function.
     * @param startOpacity Starting opacity.
     * @param endOpacity Ending opacity.
     */
    function fade(
        element: GlobalElement|null, duration: number, timing: string,
        startOpacity: number,
        endOpacity: number): ಠ_ಠ.clutz.goog.fx.css3.Transition;
    /**
     * Creates a transition to fade in the element.
     * @param element The element to fade in.
     * @param duration Duration in seconds.
     */
    function fadeIn(element: GlobalElement|null, duration: number):
        ಠ_ಠ.clutz.goog.fx.css3.Transition;
    /**
     * Creates a transition to fade out the element.
     * @param element The element to fade out.
     * @param duration Duration in seconds.
     */
    function fadeOut(element: GlobalElement|null, duration: number):
        ಠ_ಠ.clutz.goog.fx.css3.Transition;
}
declare module 'goog:goog.fx.css3' {
    import alias = ಠ_ಠ.clutz.goog.fx.css3;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.css3 {
    /**
     * A class to handle targeted CSS3 transition. This class
     * handles common features required for targeted CSS3 transition.
     *
     * Browser that does not support CSS3 transition will still receive all
     * the events fired by the transition object, but will not have any
     * transition played. If the browser supports the final state as set in
     * setFinalState method, the element will ends in the final state.
     *
     * Transitioning multiple properties with the same setting is possible
     * by setting Css3Property's property to 'all'. Performing multiple
     * transitions can be done via setting multiple initialStyle,
     * finalStyle and transitions. Css3Property's delay can be used to
     * delay one of the transition. Here is an example for a transition
     * that expands on the width and then followed by the height:
     *
     * <pre>
     * var animation = new goog.fx.css3.Transition(
     * element,
     * duration,
     * {width: 10px, height: 10px},
     * {width: 100px, height: 100px},
     * [
     * {property: width, duration: 1, timing: 'ease-in', delay: 0},
     * {property: height, duration: 1, timing: 'ease-in', delay: 1}
     * ]
     * );
     * </pre>
     */
    class Transition extends Transition_Instance {}
    class Transition_Instance extends
        ಠ_ಠ.clutz.goog.fx.TransitionBase_Instance {
        /**
         * A class to handle targeted CSS3 transition. This class
         * handles common features required for targeted CSS3 transition.
         *
         * Browser that does not support CSS3 transition will still receive all
         * the events fired by the transition object, but will not have any
         * transition played. If the browser supports the final state as set in
         * setFinalState method, the element will ends in the final state.
         *
         * Transitioning multiple properties with the same setting is possible
         * by setting Css3Property's property to 'all'. Performing multiple
         * transitions can be done via setting multiple initialStyle,
         * finalStyle and transitions. Css3Property's delay can be used to
         * delay one of the transition. Here is an example for a transition
         * that expands on the width and then followed by the height:
         *
         * <pre>
         * var animation = new goog.fx.css3.Transition(
         * element,
         * duration,
         * {width: 10px, height: 10px},
         * {width: 100px, height: 100px},
         * [
         * {property: width, duration: 1, timing: 'ease-in', delay: 0},
         * {property: height, duration: 1, timing: 'ease-in', delay: 1}
         * ]
         * );
         * </pre>
         * @param element The element to be transitioned.
         * @param duration The duration of the transition in seconds. This
         * should be the longest of all transitions.
         * @param initialStyle Initial style properties of the element before
         * animating. Set using {@code goog.style.setStyle}.
         * @param finalStyle Final style properties of the element after
         * animating. Set using {@code goog.style.setStyle}.
         * @param transitions A single CSS3 transition property or an array of
         * it.
         */
        constructor(
            element: GlobalElement|null, duration: number,
            initialStyle: GlobalObject|null, finalStyle: GlobalObject|null,
            transitions: {
                delay: number,
                duration: number,
                property: string,
                timing: string
            }|string|({
                delay: number,
                duration: number,
                property: string,
                timing: string
            }|string)[]|null);
        endTime: number|null;
        startTime: number|null;
        disposeInternal(): void;
        /**
         * Pausing CSS3 Transitions in not supported.
         */
        pause(): void;
        play(a?: boolean): boolean;
        stop(a?: boolean): any;
    }
}
declare module 'goog:goog.fx.css3.Transition' {
    import alias = ಠ_ಠ.clutz.goog.fx.css3.Transition;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
    /**
     * Fade elements background color from start color to the element's current
     * background color.
     *
     * Start should be a 3D array representing R,G,B
     * @param element Dom Node to be used in the animation.
     * @param start 3D Array for RGB of start color.
     * @param time Length of animation in milliseconds.
     * @param opt_eventHandler Optional event handler to use when listening for
     * events.
     */
    function bgColorFadeIn(
        element: GlobalElement|null, start: ಠ_ಠ.clutz.goog.vec.Number|null,
        time: number,
        opt_eventHandler?: ಠ_ಠ.clutz.goog.events.EventHandler<any>|null): void;
}
declare module 'goog:goog.fx.dom' {
    import alias = ಠ_ಠ.clutz.goog.fx.dom;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
    /**
     * Provides a transformation of an elements background-color.
     *
     * Start and End should be 3D arrays representing R,G,B
     */
    class BgColorTransform extends BgColorTransform_Instance {}
    class BgColorTransform_Instance extends
        ಠ_ಠ.clutz.goog.fx.dom.PredefinedEffect_Instance {
        /**
         * Provides a transformation of an elements background-color.
         *
         * Start and End should be 3D arrays representing R,G,B
         * @param element Dom Node to be used in the animation.
         * @param start 3D Array for RGB of start color.
         * @param end 3D Array for RGB of end color.
         * @param time Length of animation in milliseconds.
         * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
         */
        constructor(
            element: GlobalElement|null, start: ಠ_ಠ.clutz.goog.vec.Number|null,
            end: ಠ_ಠ.clutz.goog.vec.Number|null, time: number,
            opt_acc?: (...a: any[]) => any);
        /**
         * Animation event handler that will set the background-color of an
         * element
         */
        setColor(): void;
        updateStyle(): void;
    }
}
declare module 'goog:goog.fx.dom.BgColorTransform' {
    import alias = ಠ_ಠ.clutz.goog.fx.dom.BgColorTransform;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
    /**
     * Provides a transformation of an elements color.
     */
    class ColorTransform extends ColorTransform_Instance {}
    class ColorTransform_Instance extends
        ಠ_ಠ.clutz.goog.fx.dom.PredefinedEffect_Instance {
        /**
         * Provides a transformation of an elements color.
         * @param element Dom Node to be used in the animation.
         * @param start 3D Array representing R,G,B.
         * @param end 3D Array representing R,G,B.
         * @param time Length of animation in milliseconds.
         * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
         */
        constructor(
            element: GlobalElement|null, start: ಠ_ಠ.clutz.goog.vec.Number|null,
            end: ಠ_ಠ.clutz.goog.vec.Number|null, time: number,
            opt_acc?: (...a: any[]) => any);
        /**
         * Animation event handler that will set the color of an element.
         */
        updateStyle(): void;
    }
}
declare module 'goog:goog.fx.dom.ColorTransform' {
    import alias = ಠ_ಠ.clutz.goog.fx.dom.ColorTransform;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
    /**
     * Creates an animation object that fades the opacity of an element between
     * two limits.
     *
     * Start and End should be floats between 0 and 1
     */
    class Fade extends Fade_Instance {}
    class Fade_Instance extends
        ಠ_ಠ.clutz.goog.fx.dom.PredefinedEffect_Instance {
        /**
         * Creates an animation object that fades the opacity of an element
         * between two limits.
         *
         * Start and End should be floats between 0 and 1
         * @param element Dom Node to be used in the animation.
         * @param start 1D Array or Number with start opacity.
         * @param end 1D Array or Number for end opacity.
         * @param time Length of animation in milliseconds.
         * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
         */
        constructor(
            element: GlobalElement|null,
            start: ಠ_ಠ.clutz.goog.vec.Number|null|number,
            end: ಠ_ಠ.clutz.goog.vec.Number|null|number, time: number,
            opt_acc?: (...a: any[]) => any);
        /**
         * Animation event handler that will hide the element
         */
        hide(): void;
        onBegin(): void;
        onEnd(): void;
        /**
         * Animation event handler that will show the element.
         */
        show(): void;
        /**
         * Animation event handler that will set the opacity of an element.
         */
        updateStyle(): void;
    }
}
declare module 'goog:goog.fx.dom.Fade' {
    import alias = ಠ_ಠ.clutz.goog.fx.dom.Fade;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
    /**
     * Fades an element in from completely transparent to fully opacity.
     */
    class FadeIn extends FadeIn_Instance {}
    class FadeIn_Instance extends ಠ_ಠ.clutz.goog.fx.dom.Fade_Instance {
        /**
         * Fades an element in from completely transparent to fully opacity.
         * @param element Dom Node to be used in the animation.
         * @param time Length of animation in milliseconds.
         * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
         */
        constructor(
            element: GlobalElement|null, time: number,
            opt_acc?: (...a: any[]) => any);
    }
}
declare module 'goog:goog.fx.dom.FadeIn' {
    import alias = ಠ_ಠ.clutz.goog.fx.dom.FadeIn;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
    /**
     * Sets an element's display to be visible and then fades an element in from
     * completely transparent to fully opaque.
     */
    class FadeInAndShow extends FadeInAndShow_Instance {}
    class FadeInAndShow_Instance extends ಠ_ಠ.clutz.goog.fx.dom.Fade_Instance {
        /**
         * Sets an element's display to be visible and then fades an element in
         * from completely transparent to fully opaque.
         * @param element Dom Node to be used in the animation.
         * @param time Length of animation in milliseconds.
         * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
         */
        constructor(
            element: GlobalElement|null, time: number,
            opt_acc?: (...a: any[]) => any);
        onBegin(): void;
    }
}
declare module 'goog:goog.fx.dom.FadeInAndShow' {
    import alias = ಠ_ಠ.clutz.goog.fx.dom.FadeInAndShow;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
    /**
     * Fades an element out from full opacity to completely transparent.
     */
    class FadeOut extends FadeOut_Instance {}
    class FadeOut_Instance extends ಠ_ಠ.clutz.goog.fx.dom.Fade_Instance {
        /**
         * Fades an element out from full opacity to completely transparent.
         * @param element Dom Node to be used in the animation.
         * @param time Length of animation in milliseconds.
         * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
         */
        constructor(
            element: GlobalElement|null, time: number,
            opt_acc?: (...a: any[]) => any);
    }
}
declare module 'goog:goog.fx.dom.FadeOut' {
    import alias = ಠ_ಠ.clutz.goog.fx.dom.FadeOut;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
    /**
     * Fades an element out from full opacity to completely transparent and then
     * sets the display to 'none'
     */
    class FadeOutAndHide extends FadeOutAndHide_Instance {}
    class FadeOutAndHide_Instance extends ಠ_ಠ.clutz.goog.fx.dom.Fade_Instance {
        /**
         * Fades an element out from full opacity to completely transparent and
         * then sets the display to 'none'
         * @param element Dom Node to be used in the animation.
         * @param time Length of animation in milliseconds.
         * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
         */
        constructor(
            element: GlobalElement|null, time: number,
            opt_acc?: (...a: any[]) => any);
        onBegin(): void;
        onEnd(): void;
    }
}
declare module 'goog:goog.fx.dom.FadeOutAndHide' {
    import alias = ಠ_ಠ.clutz.goog.fx.dom.FadeOutAndHide;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
    /**
     * Abstract class that provides reusable functionality for predefined
     * animations that manipulate a single DOM element
     */
    class PredefinedEffect extends PredefinedEffect_Instance {}
    class PredefinedEffect_Instance extends
        ಠ_ಠ.clutz.goog.fx.Animation_Instance {
        /**
         * Abstract class that provides reusable functionality for predefined
         * animations that manipulate a single DOM element
         * @param element Dom Node to be used in the animation.
         * @param start Array for start coordinates.
         * @param end Array for end coordinates.
         * @param time Length of animation in milliseconds.
         * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
         */
        constructor(
            element: GlobalElement|null, start: ಠ_ಠ.clutz.goog.vec.Number|null,
            end: ಠ_ಠ.clutz.goog.vec.Number|null, time: number,
            opt_acc?: (...a: any[]) => any);
        /**
         * DOM Node that will be used in the animation
         */
        element: GlobalElement|null;
        /**
         * Whether the DOM element being manipulated is rendered right-to-left.
         */
        isRightToLeft(): boolean;
        onAnimate(): void;
        onBegin(): void;
        onEnd(): void;
        /**
         * Called to update the style of the element.
         */
        updateStyle(): void;
    }
}
declare module 'goog:goog.fx.dom.PredefinedEffect' {
    import alias = ಠ_ಠ.clutz.goog.fx.dom.PredefinedEffect;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
    /**
     * Creates an animation object that will resize an element between two
     * widths and heights.
     *
     * Start and End should be 2 dimensional arrays
     */
    class Resize extends Resize_Instance {}
    class Resize_Instance extends
        ಠ_ಠ.clutz.goog.fx.dom.PredefinedEffect_Instance {
        /**
         * Creates an animation object that will resize an element between two
         * widths and heights.
         *
         * Start and End should be 2 dimensional arrays
         * @param element Dom Node to be used in the animation.
         * @param start 2D array for start width and height.
         * @param end 2D array for end width and height.
         * @param time Length of animation in milliseconds.
         * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
         */
        constructor(
            element: GlobalElement|null, start: ಠ_ಠ.clutz.goog.vec.Number|null,
            end: ಠ_ಠ.clutz.goog.vec.Number|null, time: number,
            opt_acc?: (...a: any[]) => any);
        /**
         * Animation event handler that will resize an element by setting its
         * width and height.
         */
        updateStyle(): void;
    }
}
declare module 'goog:goog.fx.dom.Resize' {
    import alias = ಠ_ಠ.clutz.goog.fx.dom.Resize;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
    /**
     * Creates an animation object that will resize an element between two
     * heights
     *
     * Start and End should be numbers
     */
    class ResizeHeight extends ResizeHeight_Instance {}
    class ResizeHeight_Instance extends
        ಠ_ಠ.clutz.goog.fx.dom.PredefinedEffect_Instance {
        /**
         * Creates an animation object that will resize an element between two
         * heights
         *
         * Start and End should be numbers
         * @param element Dom Node to be used in the animation.
         * @param start Start height.
         * @param end End height.
         * @param time Length of animation in milliseconds.
         * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
         */
        constructor(
            element: GlobalElement|null, start: number, end: number,
            time: number, opt_acc?: (...a: any[]) => any);
        /**
         * Animation event handler that will resize an element by setting its
         * height.
         */
        updateStyle(): void;
    }
}
declare module 'goog:goog.fx.dom.ResizeHeight' {
    import alias = ಠ_ಠ.clutz.goog.fx.dom.ResizeHeight;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
    /**
     * Creates an animation object that will resize an element between two
     * widths
     *
     * Start and End should be numbers
     */
    class ResizeWidth extends ResizeWidth_Instance {}
    class ResizeWidth_Instance extends
        ಠ_ಠ.clutz.goog.fx.dom.PredefinedEffect_Instance {
        /**
         * Creates an animation object that will resize an element between two
         * widths
         *
         * Start and End should be numbers
         * @param element Dom Node to be used in the animation.
         * @param start Start width.
         * @param end End width.
         * @param time Length of animation in milliseconds.
         * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
         */
        constructor(
            element: GlobalElement|null, start: number, end: number,
            time: number, opt_acc?: (...a: any[]) => any);
        /**
         * Animation event handler that will resize an element by setting its
         * width.
         */
        updateStyle(): void;
    }
}
declare module 'goog:goog.fx.dom.ResizeWidth' {
    import alias = ಠ_ಠ.clutz.goog.fx.dom.ResizeWidth;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
    /**
     * Creates an animation object that will scroll an element from A to B.
     *
     * Start and End should be 2 dimensional arrays
     */
    class Scroll extends Scroll_Instance {}
    class Scroll_Instance extends
        ಠ_ಠ.clutz.goog.fx.dom.PredefinedEffect_Instance {
        /**
         * Creates an animation object that will scroll an element from A to B.
         *
         * Start and End should be 2 dimensional arrays
         * @param element Dom Node to be used in the animation.
         * @param start 2D array for start scroll left and top.
         * @param end 2D array for end scroll left and top.
         * @param time Length of animation in milliseconds.
         * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
         */
        constructor(
            element: GlobalElement|null, start: ಠ_ಠ.clutz.goog.vec.Number|null,
            end: ಠ_ಠ.clutz.goog.vec.Number|null, time: number,
            opt_acc?: (...a: any[]) => any);
        /**
         * Animation event handler that will set the scroll position of an
         * element.
         */
        updateStyle(): void;
    }
}
declare module 'goog:goog.fx.dom.Scroll' {
    import alias = ಠ_ಠ.clutz.goog.fx.dom.Scroll;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
    /**
     * Creates an animation object that will slide an element from A to B. (This
     * in effect automatically sets up the onanimate event for an Animation
     * object)
     *
     * Start and End should be 2 dimensional arrays
     */
    class Slide extends Slide_Instance {}
    class Slide_Instance extends
        ಠ_ಠ.clutz.goog.fx.dom.PredefinedEffect_Instance {
        /**
         * Creates an animation object that will slide an element from A to B.
         * (This in effect automatically sets up the onanimate event for an
         * Animation object)
         *
         * Start and End should be 2 dimensional arrays
         * @param element Dom Node to be used in the animation.
         * @param start 2D array for start coordinates (X, Y).
         * @param end 2D array for end coordinates (X, Y).
         * @param time Length of animation in milliseconds.
         * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
         */
        constructor(
            element: GlobalElement|null, start: ಠ_ಠ.clutz.goog.vec.Number|null,
            end: ಠ_ಠ.clutz.goog.vec.Number|null, time: number,
            opt_acc?: (...a: any[]) => any);
        updateStyle(): void;
    }
}
declare module 'goog:goog.fx.dom.Slide' {
    import alias = ಠ_ಠ.clutz.goog.fx.dom.Slide;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
    /**
     * Slides an element from its current position.
     */
    class SlideFrom extends SlideFrom_Instance {}
    class SlideFrom_Instance extends ಠ_ಠ.clutz.goog.fx.dom.Slide_Instance {
        /**
         * Slides an element from its current position.
         * @param element DOM node to be used in the animation.
         * @param end 2D array for end coordinates (X, Y).
         * @param time Length of animation in milliseconds.
         * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
         */
        constructor(
            element: GlobalElement|null, end: ಠ_ಠ.clutz.goog.vec.Number|null,
            time: number, opt_acc?: (...a: any[]) => any);
        startPoint: ಠ_ಠ.clutz.goog.vec.Number|null;
        onBegin(): void;
    }
}
declare module 'goog:goog.fx.dom.SlideFrom' {
    import alias = ಠ_ಠ.clutz.goog.fx.dom.SlideFrom;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
    /**
     * Creates an animation object that will slide an element into its final
     * size. Requires that the element is absolutely positioned.
     */
    class Swipe extends Swipe_Instance {}
    class Swipe_Instance extends
        ಠ_ಠ.clutz.goog.fx.dom.PredefinedEffect_Instance {
        /**
         * Creates an animation object that will slide an element into its final
         * size. Requires that the element is absolutely positioned.
         * @param element Dom Node to be used in the animation.
         * @param start 2D array for start size (W, H).
         * @param end 2D array for end size (W, H).
         * @param time Length of animation in milliseconds.
         * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
         */
        constructor(
            element: GlobalElement|null, start: ಠ_ಠ.clutz.goog.vec.Number|null,
            end: ಠ_ಠ.clutz.goog.vec.Number|null, time: number,
            opt_acc?: (...a: any[]) => any);
        /**
         * Animation event handler that will resize an element by setting its
         * width, height and clipping.
         */
        updateStyle(): void;
    }
}
declare module 'goog:goog.fx.dom.Swipe' {
    import alias = ಠ_ಠ.clutz.goog.fx.dom.Swipe;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.fx.easing {
    /**
     * Ease in - Start slow and speed up.
     * @param t Input between 0 and 1.
     */
    function easeIn(t: number): number;
    /**
     * Ease out - Start fastest and slows to a stop.
     * @param t Input between 0 and 1.
     */
    function easeOut(t: number): number;
    /**
     * Ease out long - Start fastest and slows to a stop with a long ease.
     * @param t Input between 0 and 1.
     */
    function easeOutLong(t: number): number;
    /**
     * Ease in and out - Start slow, speed up, then slow down.
     * @param t Input between 0 and 1.
     */
    function inAndOut(t: number): number;
}
declare module 'goog:goog.fx.easing' {
    import alias = ಠ_ಠ.clutz.goog.fx.easing;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
    /**
     * Returns an instance of goog.graphics.AbstractGraphics that knows how to
     * draw for the current platform (A factory for the proper Graphics
     * implementation)
     * @param width The width in pixels.  Strings expressing percentages of
     * parent with (e.g. '80%') are also accepted.
     * @param height The height in pixels.  Strings expressing percentages of
     * parent with (e.g. '80%') are also accepted.
     * @param opt_coordWidth The optional coordinate width - if omitted or null,
     * defaults to same as width.
     * @param opt_coordHeight The optional coordinate height - if omitted or
     * null, defaults to same as height.
     * @param opt_domHelper The DOM helper object for the document we want to
     * render in.
     */
    function createGraphics(
        width: string|number, height: string|number,
        opt_coordWidth?: number|null, opt_coordHeight?: number|null,
        opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|
        null): ಠ_ಠ.clutz.goog.graphics.AbstractGraphics;
    /**
     * Returns an instance of goog.graphics.AbstractGraphics that knows how to
     * draw for the current platform (A factory for the proper Graphics
     * implementation)
     * @param width The width in pixels.  Strings expressing percentages of
     * parent with (e.g. '80%') are also accepted.
     * @param height The height in pixels.   Strings expressing percentages of
     * parent with (e.g. '80%') are also accepted.
     * @param opt_coordWidth The optional coordinate width, defaults to same as
     * width.
     * @param opt_coordHeight The optional coordinate height, defaults to same
     * as height.
     * @param opt_domHelper The DOM helper object for the document we want to
     * render in.
     */
    function createSimpleGraphics(
        width: string|number, height: string|number,
        opt_coordWidth?: number|null, opt_coordHeight?: number|null,
        opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|
        null): ಠ_ಠ.clutz.goog.graphics.AbstractGraphics;
    /**
     * Static function to check if the current browser has Graphics support.
     */
    function isBrowserSupported(): boolean;
}
declare module 'goog:goog.graphics' {
    import alias = ಠ_ಠ.clutz.goog.graphics;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
    /**
     * Base class for the different graphics. You should never construct objects
     * of this class. Instead us goog.graphics.createGraphics
     */
    class AbstractGraphics extends AbstractGraphics_Instance {}
    class AbstractGraphics_Instance extends
        ಠ_ಠ.clutz.goog.ui.Component_Instance {
        /**
         * Base class for the different graphics. You should never construct
         * objects of this class. Instead us goog.graphics.createGraphics
         * @param width The width in pixels or percent.
         * @param height The height in pixels or percent.
         * @param opt_coordWidth Optional coordinate system width - if omitted
         * or null, defaults to same as width.
         * @param opt_coordHeight Optional coordinate system height - if omitted
         * or null, defaults to same as height.
         * @param opt_domHelper The DOM helper object for the document we want
         * to render in.
         */
        constructor(
            width: number|string, height: number|string,
            opt_coordWidth?: number|null, opt_coordHeight?: number|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * Height of coordinate system in units.
         */
        coordHeight: number|null;
        /**
         * Width of coordinate system in units.
         */
        coordWidth: number|null;
        /**
         * Height of graphics in pixels or percentage points.
         */
        height: number|string;
        /**
         * Width of graphics in pixels or percentage points.
         */
        width: number|string;
        /**
         * The root level group element.
         */
        canvasElement: ಠ_ಠ.clutz.goog.graphics.GroupElement|null;
        /**
         * Remove all drawing elements from the graphics.
         */
        clear(...a: any[]): any;
        /**
         * Left coordinate of the view box
         */
        coordLeft: number;
        /**
         * Top coordinate of the view box
         */
        coordTop: number;
        /**
         * Create an empty group of drawing elements.
         * @param opt_group The group wrapper element to append to. If not
         * specified, appends to the main canvas.
         */
        createGroup(a?: ಠ_ಠ.clutz.goog.graphics.GroupElement|
                    null): ಠ_ಠ.clutz.goog.graphics.GroupElement|null;
        /**
         * Create an empty path.
         */
        createPath(): ಠ_ಠ.clutz.goog.graphics.Path;
        /**
         * Draw a circle
         * @param cx Center X coordinate.
         * @param cy Center Y coordinate.
         * @param r Radius length.
         * @param stroke Stroke object describing the stroke.
         * @param fill Fill object describing the fill.
         * @param opt_group The group wrapper element to append to. If not
         * specified, appends to the main canvas.
         */
        drawCircle(
            cx: number, cy: number, r: number,
            stroke: ಠ_ಠ.clutz.goog.graphics.Stroke|null,
            fill: ಠ_ಠ.clutz.goog.graphics.Fill|null,
            opt_group?: ಠ_ಠ.clutz.goog.graphics.GroupElement|
            null): ಠ_ಠ.clutz.goog.graphics.EllipseElement|null;
        /**
         * Draw an ellipse
         * @param cx Center X coordinate.
         * @param cy Center Y coordinate.
         * @param rx Radius length for the x-axis.
         * @param ry Radius length for the y-axis.
         * @param stroke Stroke object describing the stroke.
         * @param fill Fill object describing the fill.
         * @param opt_group The group wrapper element to append to. If not
         * specified, appends to the main canvas.
         */
        drawEllipse(
            a: number, b: number, c: number, d: number,
            e: ಠ_ಠ.clutz.goog.graphics.Stroke|null,
            f: ಠ_ಠ.clutz.goog.graphics.Fill|null,
            g?: ಠ_ಠ.clutz.goog.graphics.GroupElement|
            null): ಠ_ಠ.clutz.goog.graphics.EllipseElement|null;
        /**
         * Draw a path.
         * @param path The path object to draw.
         * @param stroke Stroke object describing the stroke.
         * @param fill Fill object describing the fill.
         * @param opt_group The group wrapper element to append to. If not
         * specified, appends to the main canvas.
         */
        drawPath(
            a: ಠ_ಠ.clutz.goog.graphics.Path,
            b: ಠ_ಠ.clutz.goog.graphics.Stroke|null,
            c: ಠ_ಠ.clutz.goog.graphics.Fill|null,
            d?: ಠ_ಠ.clutz.goog.graphics.GroupElement|
            null): ಠ_ಠ.clutz.goog.graphics.PathElement|null;
        /**
         * Draw a rectangle
         * @param x X coordinate (left).
         * @param y Y coordinate (top).
         * @param width Width of rectangle.
         * @param height Height of rectangle.
         * @param stroke Stroke object describing the stroke.
         * @param fill Fill object describing the fill.
         * @param opt_group The group wrapper element to append to. If not
         * specified, appends to the main canvas.
         */
        drawRect(
            a: number, b: number, c: number, d: number,
            e: ಠ_ಠ.clutz.goog.graphics.Stroke|null,
            f: ಠ_ಠ.clutz.goog.graphics.Fill|null,
            g?: ಠ_ಠ.clutz.goog.graphics.GroupElement|
            null): ಠ_ಠ.clutz.goog.graphics.RectElement|null;
        /**
         * Draw a text string within a rectangle (drawing is horizontal)
         * @param text The text to draw.
         * @param x X coordinate (left).
         * @param y Y coordinate (top).
         * @param width Width of rectangle.
         * @param height Height of rectangle.
         * @param align Horizontal alignment: left (default), center, right.
         * @param vAlign Vertical alignment: top (default), center, bottom.
         * @param font Font describing the font properties.
         * @param stroke Stroke object describing the stroke.
         * @param fill Fill object describing the fill.
         * @param opt_group The group wrapper element to append to. If not
         * specified, appends to the main canvas.
         */
        drawText(
            text: string, x: number, y: number, width: number, height: number,
            align: string, vAlign: string,
            font: ಠ_ಠ.clutz.goog.graphics.Font|null,
            stroke: ಠ_ಠ.clutz.goog.graphics.Stroke|null,
            fill: ಠ_ಠ.clutz.goog.graphics.Fill|null,
            opt_group?: ಠ_ಠ.clutz.goog.graphics.GroupElement|
            null): ಠ_ಠ.clutz.goog.graphics.TextElement|null;
        /**
         * Draw a text string vertically centered on a given line.
         * @param text The text to draw.
         * @param x1 X coordinate of start of line.
         * @param y1 Y coordinate of start of line.
         * @param x2 X coordinate of end of line.
         * @param y2 Y coordinate of end of line.
         * @param align Horizontal alingnment: left (default), center, right.
         * @param font Font describing the font properties.
         * @param stroke Stroke object describing the stroke.
         * @param fill Fill object describing the fill.
         * @param opt_group The group wrapper element to append to. If not
         * specified, appends to the main canvas.
         */
        drawTextOnLine(
            a: string, b: number, c: number, d: number, e: number, f: string,
            g: ಠ_ಠ.clutz.goog.graphics.Font|null,
            h: ಠ_ಠ.clutz.goog.graphics.Stroke|null,
            i: ಠ_ಠ.clutz.goog.graphics.Fill|null,
            j?: ಠ_ಠ.clutz.goog.graphics.GroupElement|
            null): ಠ_ಠ.clutz.goog.graphics.TextElement|null;
        getCanvasElement(): ಠ_ಠ.clutz.goog.graphics.GroupElement|null;
        getCoordOrigin(): ಠ_ಠ.clutz.goog.math.Coordinate;
        getCoordSize(): ಠ_ಠ.clutz.goog.math.Size|null;
        getPixelScaleX(): number;
        getPixelScaleY(): number;
        getPixelSize(): ಠ_ಠ.clutz.goog.math.Size|null;
        getSize(): ಠ_ಠ.clutz.goog.math.Size|null;
        /**
         * Measure and return the width (in pixels) of a given text string.
         * Text measurement is needed to make sure a text can fit in the
         * allocated area. The way text length is measured is by writing it into
         * a div that is after the visible area, measure the div width, and
         * immediately erase the written value.
         * @param text The text string to measure.
         * @param font The font object describing the font style.
         */
        getTextWidth(a: string, b: ಠ_ಠ.clutz.goog.graphics.Font|null): number;
        isDomClonable(): boolean;
        /**
         * Remove a single drawing element from the surface.  The default
         * implementation assumes a DOM based drawing surface.
         * @param element The element to remove.
         */
        removeElement(element: ಠ_ಠ.clutz.goog.graphics.Element|null): void;
        /**
         * Stop preventing redraws.  If any redraws had been prevented, a redraw
         * will be done now.
         */
        resume(): void;
        /**
         * Changes the coordinate system position.
         * @param left The coordinate system left bound.
         * @param top The coordinate system top bound.
         */
        setCoordOrigin(a: number, b: number): any;
        /**
         * Changes the coordinate size.
         * @param coordWidth The coordinate width.
         * @param coordHeight The coordinate height.
         */
        setCoordSize(coordWidth: number, coordHeight: number): void;
        /**
         * Set the affine transform of an element.
         * @param element The element wrapper.
         * @param affineTransform The transformation applied to this element.
         */
        setElementAffineTransform(
            a: ಠ_ಠ.clutz.goog.graphics.Element,
            b: ಠ_ಠ.clutz.goog.graphics.AffineTransform): any;
        /**
         * Sets the fill for the given element.
         * @param element The element wrapper.
         * @param fill The fill object.
         */
        setElementFill(
            a: ಠ_ಠ.clutz.goog.graphics.StrokeAndFillElement|null,
            b: ಠ_ಠ.clutz.goog.graphics.Fill|null): any;
        /**
         * Sets the stroke for the given element.
         * @param element The element wrapper.
         * @param stroke The stroke object.
         */
        setElementStroke(
            a: ಠ_ಠ.clutz.goog.graphics.StrokeAndFillElement|null,
            b: ಠ_ಠ.clutz.goog.graphics.Stroke|null): any;
        /**
         * Set the transformation of an element.
         *
         * If a more general affine transform is needed than this provides
         * (e.g. skew and scale) then use setElementAffineTransform.
         * @param element The element wrapper.
         * @param x The x coordinate of the translation transform.
         * @param y The y coordinate of the translation transform.
         * @param angle The angle of the rotation transform.
         * @param centerX The horizontal center of the rotation transform.
         * @param centerY The vertical center of the rotation transform.
         */
        setElementTransform(
            a: ಠ_ಠ.clutz.goog.graphics.Element|null, b: number, c: number,
            d: number, e: number, f: number): any;
        /**
         * Change the size of the canvas.
         * @param pixelWidth The width in pixels.
         * @param pixelHeight The height in pixels.
         */
        setSize(a: number, b: number): any;
        /**
         * Start preventing redraws - useful for chaining large numbers of
         * changes together.  Not guaranteed to do anything - i.e. only use this
         * for optimization of a single code path.
         */
        suspend(): void;
    }
}
declare module 'goog:goog.graphics.AbstractGraphics' {
    import alias = ಠ_ಠ.clutz.goog.graphics.AbstractGraphics;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
    /**
     * Creates a 2D affine transform. An affine transform performs a linear
     * mapping from 2D coordinates to other 2D coordinates that preserves the
     * "straightness" and "parallelness" of lines.
     *
     * Such a coordinate transformation can be represented by a 3 row by 3
     * column matrix with an implied last row of [ 0 0 1 ]. This matrix
     * transforms source coordinates (x,y) into destination coordinates (x',y')
     * by considering them to be a column vector and multiplying the coordinate
     * vector by the matrix according to the following process: <pre> [ x']   [
     * m00  m01  m02  ] [ x ]   [ m00x + m01y + m02 ] [ y'] = [  m10  m11  m12
     * ] [ y ] = [ m10x + m11y + m12 ] [ 1 ]   [   0    0    1   ] [ 1 ]   [
     * 1         ]
     * </pre>
     *
     * This class is optimized for speed and minimizes calculations based on its
     * knowledge of the underlying matrix (as opposed to say simply performing
     * matrix multiplication).
     */
    class AffineTransform extends AffineTransform_Instance {
        /**
         * Creates a transform representing a rotation transformation.
         * @param theta The angle of rotation measured in radians.
         * @param x The x coordinate of the anchor point.
         * @param y The y coordinate of the anchor point.
         */
        static getRotateInstance(theta: number, x: number, y: number):
            ಠ_ಠ.clutz.goog.graphics.AffineTransform;
        /**
         * Creates a transform representing a scaling transformation.
         * @param sx The x-axis scaling factor.
         * @param sy The y-axis scaling factor.
         */
        static getScaleInstance(sx: number, sy: number):
            ಠ_ಠ.clutz.goog.graphics.AffineTransform;
        /**
         * Creates a transform representing a shearing transformation.
         * @param shx The x-axis shear factor.
         * @param shy The y-axis shear factor.
         */
        static getShearInstance(shx: number, shy: number):
            ಠ_ಠ.clutz.goog.graphics.AffineTransform;
        /**
         * Creates a transform representing a translation transformation.
         * @param dx The distance to translate in the x direction.
         * @param dy The distance to translate in the y direction.
         */
        static getTranslateInstance(dx: number, dy: number):
            ಠ_ಠ.clutz.goog.graphics.AffineTransform;
    }
    class AffineTransform_Instance {
        private noStructuralTyping_: any;
        /**
         * Creates a 2D affine transform. An affine transform performs a linear
         * mapping from 2D coordinates to other 2D coordinates that preserves
         * the "straightness" and "parallelness" of lines.
         *
         * Such a coordinate transformation can be represented by a 3 row by 3
         * column matrix with an implied last row of [ 0 0 1 ]. This matrix
         * transforms source coordinates (x,y) into destination coordinates
         * (x',y') by considering them to be a column vector and multiplying the
         * coordinate vector by the matrix according to the following process:
         * <pre>
         * [ x']   [  m00  m01  m02  ] [ x ]   [ m00x + m01y + m02 ]
         * [ y'] = [  m10  m11  m12  ] [ y ] = [ m10x + m11y + m12 ]
         * [ 1 ]   [   0    0    1   ] [ 1 ]   [         1         ]
         * </pre>
         *
         * This class is optimized for speed and minimizes calculations based on
         * its knowledge of the underlying matrix (as opposed to say simply
         * performing matrix multiplication).
         * @param opt_m00 The m00 coordinate of the transform.
         * @param opt_m10 The m10 coordinate of the transform.
         * @param opt_m01 The m01 coordinate of the transform.
         * @param opt_m11 The m11 coordinate of the transform.
         * @param opt_m02 The m02 coordinate of the transform.
         * @param opt_m12 The m12 coordinate of the transform.
         */
        constructor(
            opt_m00?: number, opt_m10?: number, opt_m01?: number,
            opt_m11?: number, opt_m02?: number, opt_m12?: number);
        m00_: number;
        m01_: number;
        m02_: number;
        m10_: number;
        m11_: number;
        m12_: number;
        clone(): ಠ_ಠ.clutz.goog.graphics.AffineTransform;
        /**
         * Concatenates an affine transform to this transform.
         * @param tx The transform to concatenate.
         */
        concatenate(tx: ಠ_ಠ.clutz.goog.graphics.AffineTransform):
            ಠ_ಠ.clutz.goog.graphics.AffineTransform;
        /**
         * Sets this transform to be identical to the given transform.
         * @param tx The transform to copy.
         */
        copyFrom(tx: ಠ_ಠ.clutz.goog.graphics.AffineTransform):
            ಠ_ಠ.clutz.goog.graphics.AffineTransform;
        createInverse(): ಠ_ಠ.clutz.goog.graphics.AffineTransform;
        /**
         * Compares two affine transforms for equality.
         * @param tx The other affine transform.
         */
        equals(tx: ಠ_ಠ.clutz.goog.graphics.AffineTransform|null): boolean;
        getDeterminant(): number;
        getScaleX(): number;
        getScaleY(): number;
        getShearX(): number;
        getShearY(): number;
        getTranslateX(): number;
        getTranslateY(): number;
        isIdentity(): boolean;
        /**
         * Returns whether the transform is invertible. A transform is not
         * invertible if the determinant is 0 or any value is non-finite or NaN.
         */
        isInvertible(): boolean;
        /**
         * Pre-concatenates an affine transform to this transform.
         * @param tx The transform to preconcatenate.
         */
        preConcatenate(tx: ಠ_ಠ.clutz.goog.graphics.AffineTransform):
            ಠ_ಠ.clutz.goog.graphics.AffineTransform;
        /**
         * Pre-concatenates this transform with a rotation transformation around
         * an anchor point.
         * @param theta The angle of rotation measured in radians.
         * @param x The x coordinate of the anchor point.
         * @param y The y coordinate of the anchor point.
         */
        preRotate(theta: number, x: number, y: number):
            ಠ_ಠ.clutz.goog.graphics.AffineTransform;
        /**
         * Pre-concatenates this transform with a scaling transformation,
         * i.e. calculates the following matrix product:
         *
         * <pre>
         * [sx  0 0] [m00 m01 m02]
         * [ 0 sy 0] [m10 m11 m12]
         * [ 0  0 1] [  0   0   1]
         * </pre>
         * @param sx The x-axis scaling factor.
         * @param sy The y-axis scaling factor.
         */
        preScale(sx: number, sy: number):
            ಠ_ಠ.clutz.goog.graphics.AffineTransform;
        /**
         * Pre-concatenates this transform with a shear transformation.
         * i.e. calculates the following matrix product:
         *
         * <pre>
         * [  1 shx 0] [m00 m01 m02]
         * [shy   1 0] [m10 m11 m12]
         * [  0   0 1] [  0   0   1]
         * </pre>
         * @param shx The x shear factor.
         * @param shy The y shear factor.
         */
        preShear(shx: number, shy: number):
            ಠ_ಠ.clutz.goog.graphics.AffineTransform;
        /**
         * Pre-concatenates this transform with a translate transformation,
         * i.e. calculates the following matrix product:
         *
         * <pre>
         * [1 0 dx] [m00 m01 m02]
         * [0 1 dy] [m10 m11 m12]
         * [0 0  1] [  0   0   1]
         * </pre>
         * @param dx The distance to translate in the x direction.
         * @param dy The distance to translate in the y direction.
         */
        preTranslate(dx: number, dy: number):
            ಠ_ಠ.clutz.goog.graphics.AffineTransform;
        /**
         * Concatenates this transform with a rotation transformation around an
         * anchor point.
         * @param theta The angle of rotation measured in radians.
         * @param x The x coordinate of the anchor point.
         * @param y The y coordinate of the anchor point.
         */
        rotate(theta: number, x: number, y: number):
            ಠ_ಠ.clutz.goog.graphics.AffineTransform;
        /**
         * Concatenates this transform with a scaling transformation.
         * @param sx The x-axis scaling factor.
         * @param sy The y-axis scaling factor.
         */
        scale(sx: number, sy: number): ಠ_ಠ.clutz.goog.graphics.AffineTransform;
        /**
         * Sets this transform to a rotation transformation.
         * @param theta The angle of rotation measured in radians.
         * @param x The x coordinate of the anchor point.
         * @param y The y coordinate of the anchor point.
         */
        setToRotation(theta: number, x: number, y: number):
            ಠ_ಠ.clutz.goog.graphics.AffineTransform;
        /**
         * Sets this transform to a scaling transformation.
         * @param sx The x-axis scaling factor.
         * @param sy The y-axis scaling factor.
         */
        setToScale(sx: number, sy: number):
            ಠ_ಠ.clutz.goog.graphics.AffineTransform;
        /**
         * Sets this transform to a shearing transformation.
         * @param shx The x-axis shear factor.
         * @param shy The y-axis shear factor.
         */
        setToShear(shx: number, shy: number):
            ಠ_ಠ.clutz.goog.graphics.AffineTransform;
        /**
         * Sets this transform to a translation transformation.
         * @param dx The distance to translate in the x direction.
         * @param dy The distance to translate in the y direction.
         */
        setToTranslation(dx: number, dy: number):
            ಠ_ಠ.clutz.goog.graphics.AffineTransform;
        /**
         * Sets this transform to the matrix specified by the 6 values.
         * @param m00 The m00 coordinate of the transform.
         * @param m10 The m10 coordinate of the transform.
         * @param m01 The m01 coordinate of the transform.
         * @param m11 The m11 coordinate of the transform.
         * @param m02 The m02 coordinate of the transform.
         * @param m12 The m12 coordinate of the transform.
         */
        setTransform(
            m00: number, m10: number, m01: number, m11: number, m02: number,
            m12: number): ಠ_ಠ.clutz.goog.graphics.AffineTransform;
        /**
         * Concatenates this transform with a shear transformation.
         * @param shx The x shear factor.
         * @param shy The y shear factor.
         */
        shear(shx: number, shy: number):
            ಠ_ಠ.clutz.goog.graphics.AffineTransform;
        toString(): string;
        /**
         * Transforms an array of coordinates by this transform and stores the
         * result into a destination array.
         * @param src The array containing the source points as x, y value
         * pairs.
         * @param srcOff The offset to the first point to be transformed.
         * @param dst The array into which to store the transformed point pairs.
         * @param dstOff The offset of the location of the first transformed
         * point in the destination array.
         * @param numPts The number of points to transform.
         */
        transform(
            src: ಠ_ಠ.clutz.goog.vec.Number, srcOff: number,
            dst: ಠ_ಠ.clutz.goog.vec.Number, dstOff: number,
            numPts: number): void;
        /**
         * Concatenates this transform with a translate transformation.
         * @param dx The distance to translate in the x direction.
         * @param dy The distance to translate in the y direction.
         */
        translate(dx: number, dy: number):
            ಠ_ಠ.clutz.goog.graphics.AffineTransform;
    }
}
declare module 'goog:goog.graphics.AffineTransform' {
    import alias = ಠ_ಠ.clutz.goog.graphics.AffineTransform;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
    /**
     * Thin wrapper for canvas ellipse elements.
     * This is an implementation of the goog.graphics.EllipseElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     */
    class CanvasEllipseElement extends CanvasEllipseElement_Instance {}
    class CanvasEllipseElement_Instance extends
        ಠ_ಠ.clutz.goog.graphics.EllipseElement_Instance {
        /**
         * Thin wrapper for canvas ellipse elements.
         * This is an implementation of the goog.graphics.EllipseElement
         * interface. You should not construct objects from this constructor.
         * The graphics will return the object for you.
         * @param element The DOM element to wrap.
         * @param graphics The graphics creating this element.
         * @param cx Center X coordinate.
         * @param cy Center Y coordinate.
         * @param rx Radius length for the x-axis.
         * @param ry Radius length for the y-axis.
         * @param stroke The stroke to use for this element.
         * @param fill The fill to use for this element.
         */
        constructor(
            element: GlobalElement|null,
            graphics: ಠ_ಠ.clutz.goog.graphics.CanvasGraphics|null, cx: number,
            cy: number, rx: number, ry: number,
            stroke: ಠ_ಠ.clutz.goog.graphics.Stroke|null,
            fill: ಠ_ಠ.clutz.goog.graphics.Fill|null);
        /**
         * Draw the ellipse.  Should be treated as package scope.
         * @param ctx The context to draw the element in.
         */
        draw(ctx: CanvasRenderingContext2D|null): void;
        /**
         * Update the center point of the ellipse.
         * @param cx Center X coordinate.
         * @param cy Center Y coordinate.
         */
        setCenter(cx: number, cy: number): any;
        /**
         * Update the radius of the ellipse.
         * @param rx Center X coordinate.
         * @param ry Center Y coordinate.
         */
        setRadius(rx: number, ry: number): any;
    }
}
declare module 'goog:goog.graphics.CanvasEllipseElement' {
    import alias = ಠ_ಠ.clutz.goog.graphics.CanvasEllipseElement;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
    /**
     * A Graphics implementation for drawing using canvas.
     */
    class CanvasGraphics extends CanvasGraphics_Instance {}
    class CanvasGraphics_Instance extends
        ಠ_ಠ.clutz.goog.graphics.AbstractGraphics_Instance {
        /**
         * A Graphics implementation for drawing using canvas.
         * @param width The (non-zero) width in pixels.  Strings expressing
         * percentages of parent with (e.g. '80%') are also accepted.
         * @param height The (non-zero) height in pixels.  Strings expressing
         * percentages of parent with (e.g. '80%') are also accepted.
         * @param opt_coordWidth The coordinate width - if omitted or null,
         * defaults to same as width.
         * @param opt_coordHeight The coordinate height - if omitted or null,
         * defaults to same as height.
         * @param opt_domHelper The DOM helper object for the document we want
         * to render in.
         */
        constructor(
            width: string|number, height: string|number,
            opt_coordWidth?: number|null, opt_coordHeight?: number|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * The main canvas element.
         */
        canvasElement: ಠ_ಠ.clutz.goog.graphics.CanvasGroupElement|null;
        coordLeft: number;
        coordTop: number;
        height: number|string;
        width: number|string;
        /**
         * Append an element.
         * @param element The element to draw.
         * @param group The group to draw it in. If null or undefined, defaults
         * to the root group.
         */
        append(
            element: ಠ_ಠ.clutz.goog.graphics.Element|null,
            group: ಠ_ಠ.clutz.goog.graphics.GroupElement|null|undefined): void;
        /**
         * Remove all drawing elements from the graphics.
         */
        clear(): void;
        /**
         * Creates the DOM representation of the graphics area.
         */
        createDom(): void;
        /**
         * Create an empty group of drawing elements.
         * @param opt_group The group wrapper element to append to. If not
         * specified, appends to the main canvas.
         */
        createGroup(opt_group?: ಠ_ಠ.clutz.goog.graphics.GroupElement|
                    null): ಠ_ಠ.clutz.goog.graphics.CanvasGroupElement;
        /**
         * Disposes of the component by removing event handlers, detacing DOM
         * nodes from the document body, and removing references to them.
         */
        disposeInternal(): void;
        /**
         * Draw an element, including any stroke or fill.
         * @param element The element to draw.
         */
        drawElement(element: ಠ_ಠ.clutz.goog.graphics.Element|null): void;
        /**
         * Draw an ellipse.
         * @param cx Center X coordinate.
         * @param cy Center Y coordinate.
         * @param rx Radius length for the x-axis.
         * @param ry Radius length for the y-axis.
         * @param stroke Stroke object describing the stroke.
         * @param fill Fill object describing the fill.
         * @param opt_group The group wrapper element to append to.  If not
         * specified, appends to the main canvas.
         */
        drawEllipse(
            cx: number, cy: number, rx: number, ry: number,
            stroke: ಠ_ಠ.clutz.goog.graphics.Stroke|null,
            fill: ಠ_ಠ.clutz.goog.graphics.Fill|null,
            opt_group?: ಠ_ಠ.clutz.goog.graphics.GroupElement|
            null): ಠ_ಠ.clutz.goog.graphics.EllipseElement;
        /**
         * Draw an image.
         * @param x X coordinate (left).
         * @param y Y coordinate (top).
         * @param width Width of image.
         * @param height Height of image.
         * @param src Source of the image.
         * @param opt_group The group wrapper element to append to. If not
         * specified, appends to the main canvas.
         */
        drawImage(
            x: number, y: number, width: number, height: number, src: string,
            opt_group?: ಠ_ಠ.clutz.goog.graphics.GroupElement|
            null): ಠ_ಠ.clutz.goog.graphics.ImageElement;
        /**
         * Draw a path.
         * @param path The path object to draw.
         * @param stroke Stroke object describing the stroke.
         * @param fill Fill object describing the fill.
         * @param opt_group The group wrapper element to append to. If not
         * specified, appends to the main canvas.
         */
        drawPath(
            path: ಠ_ಠ.clutz.goog.graphics.Path,
            stroke: ಠ_ಠ.clutz.goog.graphics.Stroke|null,
            fill: ಠ_ಠ.clutz.goog.graphics.Fill|null,
            opt_group?: ಠ_ಠ.clutz.goog.graphics.GroupElement|
            null): ಠ_ಠ.clutz.goog.graphics.PathElement;
        /**
         * Draw a rectangle.
         * @param x X coordinate (left).
         * @param y Y coordinate (top).
         * @param width Width of rectangle.
         * @param height Height of rectangle.
         * @param stroke Stroke object describing the stroke.
         * @param fill Fill object describing the fill.
         * @param opt_group The group wrapper element to append to. If not
         * specified, appends to the main canvas.
         */
        drawRect(
            x: number, y: number, width: number, height: number,
            stroke: ಠ_ಠ.clutz.goog.graphics.Stroke|null,
            fill: ಠ_ಠ.clutz.goog.graphics.Fill|null,
            opt_group?: ಠ_ಠ.clutz.goog.graphics.GroupElement|
            null): ಠ_ಠ.clutz.goog.graphics.RectElement;
        /**
         * Draw a text string vertically centered on a given line.
         * @param text The text to draw.
         * @param x1 X coordinate of start of line.
         * @param y1 Y coordinate of start of line.
         * @param x2 X coordinate of end of line.
         * @param y2 Y coordinate of end of line.
         * @param align Horizontal alignment: left (default), center, right.
         * @param font Font describing the font properties.
         * @param stroke Stroke object describing the stroke.
         * @param fill Fill object describing the fill.
         * @param opt_group The group wrapper element to append to. If not
         * specified, appends to the main canvas.
         */
        drawTextOnLine(
            text: string, x1: number, y1: number, x2: number, y2: number,
            align: string|null, font: ಠ_ಠ.clutz.goog.graphics.Font|null,
            stroke: ಠ_ಠ.clutz.goog.graphics.Stroke|null,
            fill: ಠ_ಠ.clutz.goog.graphics.Fill|null,
            opt_group?: ಠ_ಠ.clutz.goog.graphics.GroupElement|
            null): ಠ_ಠ.clutz.goog.graphics.TextElement;
        enterDocument(): void;
        /**
         * Returns the drawing context.
         */
        getContext(): GlobalObject|null;
        getPixelSize(): ಠ_ಠ.clutz.goog.math.Size|null;
        /**
         * Measure and return the width (in pixels) of a given text string.
         * Text measurement is needed to make sure a text can fit in the
         * allocated area. The way text length is measured is by writing it into
         * a div that is after the visible area, measure the div width, and
         * immediately erase the written value.
         * @param text The text string to measure.
         * @param font The font object describing the font style.
         */
        getTextWidth(a: string, b: ಠ_ಠ.clutz.goog.graphics.Font|null): number;
        isDrawable(group: ಠ_ಠ.clutz.goog.graphics.GroupElement|null): boolean;
        /**
         * Returns true if drawing to the given group means a redraw is
         * required.
         * @param group The group to draw to.
         */
        isRedrawRequired(group: ಠ_ಠ.clutz.goog.graphics.GroupElement|
                         null): boolean;
        /**
         * Pop an element transform off of the transform stack.
         */
        popElementTransform(): void;
        /**
         * Push an element transform on to the transform stack.
         * @param element The transformed element.
         */
        pushElementTransform(element: ಠ_ಠ.clutz.goog.graphics.Element|
                             null): void;
        /**
         * Redraw the entire canvas.
         */
        redraw(): void;
        /**
         * Removes an element from the Canvas.
         * @param elem the element to remove.
         */
        removeElement(elem: ಠ_ಠ.clutz.goog.graphics.Element|null): void;
        /**
         * Reset the canvas.
         */
        reset(): void;
        /**
         * Stop preventing redraws.  If any redraws had been prevented, a redraw
         * will be done now.
         */
        resume(): void;
        /**
         * Changes the coordinate system position.
         * @param left The coordinate system left bound.
         * @param top The coordinate system top bound.
         */
        setCoordOrigin(left: number, top: number): any;
        /**
         * Changes the coordinate size.
         * @param coordWidth The coordinate width.
         * @param coordHeight The coordinate height.
         */
        setCoordSize(coordWidth: number, coordHeight: number): void;
        /**
         * Set the transformation of an element.
         *
         * Note that in this implementation this method just calls this.redraw()
         * and the affineTransform param is unused.
         * @param element The element wrapper.
         * @param affineTransform The transformation applied to this element.
         */
        setElementAffineTransform(
            element: ಠ_ಠ.clutz.goog.graphics.Element,
            affineTransform: ಠ_ಠ.clutz.goog.graphics.AffineTransform): any;
        /**
         * Sets the fill for the given element.
         * @param element The element wrapper.
         * @param fill The fill object.
         */
        setElementFill(
            element: ಠ_ಠ.clutz.goog.graphics.StrokeAndFillElement|null,
            fill: ಠ_ಠ.clutz.goog.graphics.Fill|null): any;
        /**
         * Sets the stroke for the given element.
         * @param element The element wrapper.
         * @param stroke The stroke object.
         */
        setElementStroke(
            element: ಠ_ಠ.clutz.goog.graphics.StrokeAndFillElement|null,
            stroke: ಠ_ಠ.clutz.goog.graphics.Stroke|null): any;
        /**
         * Set the translation and rotation of an element.
         *
         * If a more general affine transform is needed than this provides
         * (e.g. skew and scale) then use setElementAffineTransform.
         * @param element The element wrapper.
         * @param x The x coordinate of the translation transform.
         * @param y The y coordinate of the translation transform.
         * @param angle The angle of the rotation transform.
         * @param centerX The horizontal center of the rotation transform.
         * @param centerY The vertical center of the rotation transform.
         */
        setElementTransform(
            element: ಠ_ಠ.clutz.goog.graphics.Element|null, x: number, y: number,
            angle: number, centerX: number, centerY: number): any;
        /**
         * Change the size of the canvas.
         * @param pixelWidth The width in pixels.
         * @param pixelHeight The height in pixels.
         */
        setSize(pixelWidth: number, pixelHeight: number): any;
        /**
         * Start preventing redraws - useful for chaining large numbers of
         * changes together.  Not guaranteed to do anything - i.e. only use this
         * for optimization of a single code path.
         */
        suspend(): void;
        /**
         * Update the size of the canvas.
         */
        updateSize(): void;
    }
}
declare module 'goog:goog.graphics.CanvasGraphics' {
    import alias = ಠ_ಠ.clutz.goog.graphics.CanvasGraphics;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
    /**
     * Object representing a group of objects in a canvas.
     * This is an implementation of the goog.graphics.GroupElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     */
    class CanvasGroupElement extends CanvasGroupElement_Instance {}
    class CanvasGroupElement_Instance extends
        ಠ_ಠ.clutz.goog.graphics.GroupElement_Instance {
        /**
         * Object representing a group of objects in a canvas.
         * This is an implementation of the goog.graphics.GroupElement
         * interface. You should not construct objects from this constructor.
         * The graphics will return the object for you.
         * @param graphics The graphics creating this element.
         */
        constructor(graphics: ಠ_ಠ.clutz.goog.graphics.CanvasGraphics|null);
        /**
         * Append a child to the group.  Does not draw it
         * @param element The child to append.
         */
        appendChild(element: ಠ_ಠ.clutz.goog.graphics.Element|null): void;
        /**
         * Remove all drawing elements from the group.
         */
        clear(): void;
        /**
         * Draw the group.
         * @param ctx The context to draw the element in.
         */
        draw(ctx: CanvasRenderingContext2D|null): void;
        /**
         * Removes an element from the group.
         * @param elem the element to remove.
         */
        removeElement(elem: ಠ_ಠ.clutz.goog.graphics.Element): void;
        /**
         * Set the size of the group element.
         * @param width The width of the group element.
         * @param height The height of the group element.
         */
        setSize(width: number|string, height: number|string): any;
    }
}
declare module 'goog:goog.graphics.CanvasGroupElement' {
    import alias = ಠ_ಠ.clutz.goog.graphics.CanvasGroupElement;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
    /**
     * Thin wrapper for canvas image elements.
     * This is an implementation of the goog.graphics.ImageElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     */
    class CanvasImageElement extends CanvasImageElement_Instance {}
    class CanvasImageElement_Instance extends
        ಠ_ಠ.clutz.goog.graphics.ImageElement_Instance {
        /**
         * Thin wrapper for canvas image elements.
         * This is an implementation of the goog.graphics.ImageElement
         * interface. You should not construct objects from this constructor.
         * The graphics will return the object for you.
         * @param element The DOM element to wrap.
         * @param graphics The graphics creating this element.
         * @param x X coordinate (left).
         * @param y Y coordinate (top).
         * @param w Width of rectangle.
         * @param h Height of rectangle.
         * @param src Source of the image.
         */
        constructor(
            element: GlobalElement|null,
            graphics: ಠ_ಠ.clutz.goog.graphics.CanvasGraphics|null, x: number,
            y: number, w: number, h: number, src: string);
        /**
         * Draw the image.  Should be treated as package scope.
         * @param ctx The context to draw the element in.
         */
        draw(ctx: CanvasRenderingContext2D|null): void;
        /**
         * Update the position of the image.
         * @param x X coordinate (left).
         * @param y Y coordinate (top).
         */
        setPosition(x: number, y: number): any;
        /**
         * Update the size of the image.
         * @param width Width of rectangle.
         * @param height Height of rectangle.
         */
        setSize(width: number, height: number): any;
        /**
         * Update the source of the image.
         * @param src Source of the image.
         */
        setSource(src: string): any;
    }
}
declare module 'goog:goog.graphics.CanvasImageElement' {
    import alias = ಠ_ಠ.clutz.goog.graphics.CanvasImageElement;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
    /**
     * Thin wrapper for canvas path elements.
     * This is an implementation of the goog.graphics.PathElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     */
    class CanvasPathElement extends CanvasPathElement_Instance {}
    class CanvasPathElement_Instance extends
        ಠ_ಠ.clutz.goog.graphics.PathElement_Instance {
        /**
         * Thin wrapper for canvas path elements.
         * This is an implementation of the goog.graphics.PathElement interface.
         * You should not construct objects from this constructor. The graphics
         * will return the object for you.
         * @param element The DOM element to wrap.
         * @param graphics The graphics creating this element.
         * @param path The path object to draw.
         * @param stroke The stroke to use for this element.
         * @param fill The fill to use for this element.
         */
        constructor(
            element: GlobalElement|null,
            graphics: ಠ_ಠ.clutz.goog.graphics.CanvasGraphics|null,
            path: ಠ_ಠ.clutz.goog.graphics.Path,
            stroke: ಠ_ಠ.clutz.goog.graphics.Stroke|null,
            fill: ಠ_ಠ.clutz.goog.graphics.Fill|null);
        /**
         * Draw the path.  Should be treated as package scope.
         * @param ctx The context to draw the element in.
         */
        draw(ctx: CanvasRenderingContext2D|null): void;
        /**
         * Update the underlying path.
         * @param path The path object to draw.
         */
        setPath(path: ಠ_ಠ.clutz.goog.graphics.Path): any;
    }
}
declare module 'goog:goog.graphics.CanvasPathElement' {
    import alias = ಠ_ಠ.clutz.goog.graphics.CanvasPathElement;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
    /**
     * Thin wrapper for canvas rectangle elements.
     * This is an implementation of the goog.graphics.RectElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     */
    class CanvasRectElement extends CanvasRectElement_Instance {}
    class CanvasRectElement_Instance extends
        ಠ_ಠ.clutz.goog.graphics.RectElement_Instance {
        /**
         * Thin wrapper for canvas rectangle elements.
         * This is an implementation of the goog.graphics.RectElement interface.
         * You should not construct objects from this constructor. The graphics
         * will return the object for you.
         * @param element The DOM element to wrap.
         * @param graphics The graphics creating this element.
         * @param x X coordinate (left).
         * @param y Y coordinate (top).
         * @param w Width of rectangle.
         * @param h Height of rectangle.
         * @param stroke The stroke to use for this element.
         * @param fill The fill to use for this element.
         */
        constructor(
            element: GlobalElement|null,
            graphics: ಠ_ಠ.clutz.goog.graphics.CanvasGraphics|null, x: number,
            y: number, w: number, h: number,
            stroke: ಠ_ಠ.clutz.goog.graphics.Stroke|null,
            fill: ಠ_ಠ.clutz.goog.graphics.Fill|null);
        /**
         * Draw the rectangle.  Should be treated as package scope.
         * @param ctx The context to draw the element in.
         */
        draw(ctx: CanvasRenderingContext2D|null): void;
        /**
         * Update the position of the rectangle.
         * @param x X coordinate (left).
         * @param y Y coordinate (top).
         */
        setPosition(x: number, y: number): any;
        /**
         * Update the size of the rectangle.
         * @param width Width of rectangle.
         * @param height Height of rectangle.
         */
        setSize(width: number, height: number): any;
    }
}
declare module 'goog:goog.graphics.CanvasRectElement' {
    import alias = ಠ_ಠ.clutz.goog.graphics.CanvasRectElement;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
    /**
     * Thin wrapper for canvas text elements.
     * This is an implementation of the goog.graphics.TextElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     */
    class CanvasTextElement extends CanvasTextElement_Instance {}
    class CanvasTextElement_Instance extends
        ಠ_ಠ.clutz.goog.graphics.TextElement_Instance {
        /**
         * Thin wrapper for canvas text elements.
         * This is an implementation of the goog.graphics.TextElement interface.
         * You should not construct objects from this constructor. The graphics
         * will return the object for you.
         * @param graphics The graphics creating this element.
         * @param text The text to draw.
         * @param x1 X coordinate of start of line.
         * @param y1 Y coordinate of start of line.
         * @param x2 X coordinate of end of line.
         * @param y2 Y coordinate of end of line.
         * @param align Horizontal alignment: left (default), center, right.
         * @param font Font describing the font properties.
         * @param stroke The stroke to use for this element.
         * @param fill The fill to use for this element.
         */
        constructor(
            graphics: ಠ_ಠ.clutz.goog.graphics.CanvasGraphics, text: string,
            x1: number, y1: number, x2: number, y2: number, align: string|null,
            font: ಠ_ಠ.clutz.goog.graphics.Font,
            stroke: ಠ_ಠ.clutz.goog.graphics.Stroke|null,
            fill: ಠ_ಠ.clutz.goog.graphics.Fill|null);
        fill: ಠ_ಠ.clutz.goog.graphics.Fill|null;
        /**
         * Draw the text.  Should be treated as package scope.
         * @param ctx The context to draw the element in.
         */
        draw(ctx: CanvasRenderingContext2D|null): void;
        /**
         * Sets the fill for this element.
         * @param fill The fill object.
         */
        setFill(fill: ಠ_ಠ.clutz.goog.graphics.Fill|null): void;
        /**
         * Sets the stroke for this element.
         * @param stroke The stroke object.
         */
        setStroke(stroke: ಠ_ಠ.clutz.goog.graphics.Stroke|null): void;
        /**
         * Update the displayed text of the element.
         * @param text The text to draw.
         */
        setText(text: string): any;
    }
}
declare module 'goog:goog.graphics.CanvasTextElement' {
    import alias = ಠ_ಠ.clutz.goog.graphics.CanvasTextElement;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
    /**
     * Base class for a thin wrapper around the DOM element returned from
     * the different draw methods of the graphics.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     */
    class Element extends Element_Instance {}
    class Element_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * Base class for a thin wrapper around the DOM element returned from
         * the different draw methods of the graphics.
         * You should not construct objects from this constructor. The graphics
         * will return the object for you.
         * @param element The DOM element to wrap.
         * @param graphics The graphics creating this element.
         */
        constructor(
            element: GlobalElement|null,
            graphics: ಠ_ಠ.clutz.goog.graphics.AbstractGraphics|null);
        addEventListener(
            type: string|ಠ_ಠ.clutz.goog.events.EventId<any>,
            handler?: ((a?: any) => any)|{handleEvent: (a?: any) => any},
            opt_capture?: boolean, opt_handlerScope?: GlobalObject|null): void;
        disposeInternal(): void;
        /**
         * Returns the underlying object.
         */
        getElement(): GlobalElement|null;
        /**
         * Returns the graphics.
         */
        getGraphics(): ಠ_ಠ.clutz.goog.graphics.AbstractGraphics|null;
        getTransform(): ಠ_ಠ.clutz.goog.graphics.AffineTransform;
        removeEventListener(
            type: string,
            handler?: ((a?: any) => any)|{handleEvent: (a?: any) => any},
            opt_capture?: boolean, opt_handlerScope?: GlobalObject|null): void;
        /**
         * Set the affine transform of the element.
         * @param affineTransform The transformation applied to this element.
         */
        setTransform(affineTransform: ಠ_ಠ.clutz.goog.graphics.AffineTransform):
            void;
        /**
         * Set the translation and rotation of the element.
         *
         * If a more general affine transform is needed than this provides
         * (e.g. skew and scale) then use setTransform.
         * @param x The x coordinate of the translation transform.
         * @param y The y coordinate of the translation transform.
         * @param rotate The angle of the rotation transform.
         * @param centerX The horizontal center of the rotation transform.
         * @param centerY The vertical center of the rotation transform.
         */
        setTransformation(
            x: number, y: number, rotate: number, centerX: number,
            centerY: number): void;
    }
}
declare module 'goog:goog.graphics.Element' {
    import alias = ಠ_ಠ.clutz.goog.graphics.Element;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
    /**
     * Interface for a graphics ellipse element.
     * You should not construct objects from this constructor. The graphics
     * will return an implementation of this interface for you.
     */
    class EllipseElement extends EllipseElement_Instance {}
    class EllipseElement_Instance extends
        ಠ_ಠ.clutz.goog.graphics.StrokeAndFillElement_Instance {
        /**
         * Interface for a graphics ellipse element.
         * You should not construct objects from this constructor. The graphics
         * will return an implementation of this interface for you.
         * @param element The DOM element to wrap.
         * @param graphics The graphics creating this element.
         * @param stroke The stroke to use for this element.
         * @param fill The fill to use for this element.
         */
        constructor(
            element: GlobalElement|null,
            graphics: ಠ_ಠ.clutz.goog.graphics.AbstractGraphics|null,
            stroke: ಠ_ಠ.clutz.goog.graphics.Stroke|null,
            fill: ಠ_ಠ.clutz.goog.graphics.Fill|null);
        /**
         * Update the center point of the ellipse.
         * @param cx Center X coordinate.
         * @param cy Center Y coordinate.
         */
        setCenter(a: number, b: number): any;
        /**
         * Update the radius of the ellipse.
         * @param rx Radius length for the x-axis.
         * @param ry Radius length for the y-axis.
         */
        setRadius(a: number, b: number): any;
    }
}
declare module 'goog:goog.graphics.EllipseElement' {
    import alias = ಠ_ಠ.clutz.goog.graphics.EllipseElement;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
    /**
     * Creates a fill object
     */
    class Fill extends Fill_Instance {}
    class Fill_Instance {
        private noStructuralTyping_: any;
        getColor1(): string;
        getColor2(): string;
    }
}
declare module 'goog:goog.graphics.Fill' {
    import alias = ಠ_ಠ.clutz.goog.graphics.Fill;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
    /**
     * This class represents a font to be used with a renderer.
     */
    class Font extends Font_Instance {}
    class Font_Instance {
        private noStructuralTyping_: any;
        /**
         * This class represents a font to be used with a renderer.
         * @param size The font size.
         * @param family The font family.
         */
        constructor(size: number, family: string);
        /**
         * The name of the font family to use, can be a comma separated string.
         */
        family: string;
        /**
         * Font size.
         */
        size: number;
        /**
         * Indication if text should be bolded
         */
        bold: boolean;
        /**
         * Indication if text should be in italics
         */
        italic: boolean;
    }
}
declare module 'goog:goog.graphics.Font' {
    import alias = ಠ_ಠ.clutz.goog.graphics.Font;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
    /**
     * Interface for a graphics group element.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     */
    class GroupElement extends GroupElement_Instance {}
    class GroupElement_Instance extends
        ಠ_ಠ.clutz.goog.graphics.Element_Instance {
        /**
         * Interface for a graphics group element.
         * You should not construct objects from this constructor. The graphics
         * will return the object for you.
         * @param element The DOM element to wrap.
         * @param graphics The graphics creating this element.
         */
        constructor(
            element: GlobalElement|null,
            graphics: ಠ_ಠ.clutz.goog.graphics.AbstractGraphics|null);
        /**
         * Remove all drawing elements from the group.
         */
        clear(...a: any[]): any;
        /**
         * Set the size of the group element.
         * @param width The width of the group element.
         * @param height The height of the group element.
         */
        setSize(a: number|string, b: number|string): any;
    }
}
declare module 'goog:goog.graphics.GroupElement' {
    import alias = ಠ_ಠ.clutz.goog.graphics.GroupElement;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
    /**
     * Interface for a graphics image element.
     * You should not construct objects from this constructor. Instead,
     * you should use {@code goog.graphics.Graphics.drawImage} and it
     * will return an implementation of this interface for you.
     */
    class ImageElement extends ImageElement_Instance {}
    class ImageElement_Instance extends
        ಠ_ಠ.clutz.goog.graphics.Element_Instance {
        /**
         * Interface for a graphics image element.
         * You should not construct objects from this constructor. Instead,
         * you should use {@code goog.graphics.Graphics.drawImage} and it
         * will return an implementation of this interface for you.
         * @param element The DOM element to wrap.
         * @param graphics The graphics creating this element.
         */
        constructor(
            element: GlobalElement|null,
            graphics: ಠ_ಠ.clutz.goog.graphics.AbstractGraphics|null);
        /**
         * Update the position of the image.
         * @param x X coordinate (left).
         * @param y Y coordinate (top).
         */
        setPosition(a: number, b: number): any;
        /**
         * Update the size of the image.
         * @param width Width of image.
         * @param height Height of image.
         */
        setSize(a: number, b: number): any;
        /**
         * Update the source of the image.
         * @param src Source of the image.
         */
        setSource(a: string): any;
    }
}
declare module 'goog:goog.graphics.ImageElement' {
    import alias = ಠ_ಠ.clutz.goog.graphics.ImageElement;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
    /**
     * Creates an immutable linear gradient fill object.
     */
    class LinearGradient extends LinearGradient_Instance {}
    class LinearGradient_Instance extends
        ಠ_ಠ.clutz.goog.graphics.Fill_Instance {
        /**
         * Creates an immutable linear gradient fill object.
         * @param x1 Start X position of the gradient.
         * @param y1 Start Y position of the gradient.
         * @param x2 End X position of the gradient.
         * @param y2 End Y position of the gradient.
         * @param color1 Start color of the gradient.
         * @param color2 End color of the gradient.
         * @param opt_opacity1 Start opacity of the gradient, both or neither of
         * opt_opacity1 and opt_opacity2 have to be set.
         * @param opt_opacity2 End opacity of the gradient.
         */
        constructor(
            x1: number, y1: number, x2: number, y2: number, color1: string,
            color2: string, opt_opacity1?: number|null,
            opt_opacity2?: number|null);
        getColor1(): string;
        getColor2(): string;
        getOpacity1(): number|null;
        getOpacity2(): number|null;
        getX1(): number;
        getX2(): number;
        getY1(): number;
        getY2(): number;
    }
}
declare module 'goog:goog.graphics.LinearGradient' {
    import alias = ಠ_ಠ.clutz.goog.graphics.LinearGradient;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
    /**
     * Creates a path object. A path is a sequence of segments and may be open
     * or closed. Path uses the EVEN-ODD fill rule for determining the interior
     * of the path. A path must start with a moveTo command.
     *
     * A "simple" path does not contain any arcs and may be transformed using
     * the {@code transform} method.
     */
    class Path extends Path_Instance {
        /**
         * Creates a copy of the given path, replacing {@code arcTo} with
         * {@code arcToAsCurves}. The resulting path is simplified and can
         * be transformed.
         * @param src The path to simplify.
         */
        static createSimplifiedPath(src: ಠ_ಠ.clutz.goog.graphics.Path):
            ಠ_ಠ.clutz.goog.graphics.Path;
        /**
         * Returns the number of points for a segment type.
         * @param segment The segment type.
         */
        static getSegmentCount(segment: number): number;
    }
    class Path_Instance {
        private noStructuralTyping_: any;
        /**
         * Appends another path to the end of this path.
         * @param path The path to append.
         */
        appendPath(path: ಠ_ಠ.clutz.goog.graphics.Path):
            ಠ_ಠ.clutz.goog.graphics.Path;
        /**
         * Adds a path command to draw an arc centered at the point {@code (cx,
         * cy)} with radius {@code rx} along the x-axis and {@code ry} along the
         * y-axis from
         * {@code startAngle} through {@code extent} degrees. Positive rotation
         * is in the direction from positive x-axis to positive y-axis.
         * @param cx X coordinate of center of ellipse.
         * @param cy Y coordinate of center of ellipse.
         * @param rx Radius of ellipse on x axis.
         * @param ry Radius of ellipse on y axis.
         * @param fromAngle Starting angle measured in degrees from the positive
         * x-axis.
         * @param extent The span of the arc in degrees.
         * @param connect If true, the starting point of the arc is connected to
         * the current point.
         */
        arc(cx: number, cy: number, rx: number, ry: number, fromAngle: number,
            extent: number, connect: boolean): ಠ_ಠ.clutz.goog.graphics.Path;
        /**
         * Adds a path command to draw an arc starting at the path's current
         * point, with radius {@code rx} along the x-axis and {@code ry} along
         * the y-axis from
         * {@code startAngle} through {@code extent} degrees. Positive rotation
         * is in the direction from positive x-axis to positive y-axis.
         *
         * This method makes the path non-simple.
         * @param rx Radius of ellipse on x axis.
         * @param ry Radius of ellipse on y axis.
         * @param fromAngle Starting angle measured in degrees from the positive
         * x-axis.
         * @param extent The span of the arc in degrees.
         */
        arcTo(rx: number, ry: number, fromAngle: number, extent: number):
            ಠ_ಠ.clutz.goog.graphics.Path;
        /**
         * Same as {@code arcTo}, but approximates the arc using bezier curves.
         * .* As a result, this method does not affect the simplified status of
         * this path. The algorithm is adapted from {@code
         * java.awt.geom.ArcIterator}.
         * @param rx Radius of ellipse on x axis.
         * @param ry Radius of ellipse on y axis.
         * @param fromAngle Starting angle measured in degrees from the positive
         * x-axis.
         * @param extent The span of the arc in degrees.
         */
        arcToAsCurves(
            rx: number, ry: number, fromAngle: number,
            extent: number): ಠ_ಠ.clutz.goog.graphics.Path;
        /**
         * Clears the path.
         */
        clear(): ಠ_ಠ.clutz.goog.graphics.Path;
        clone(): ಠ_ಠ.clutz.goog.graphics.Path;
        /**
         * Adds a path command to close the path by connecting the
         * last point to the first point.
         */
        close(): ಠ_ಠ.clutz.goog.graphics.Path;
        /**
         * Creates a transformed copy of this path. The path is simplified
         * {@see #createSimplifiedPath} prior to transformation.
         * @param tx The transformation to perform.
         */
        createTransformedPath(tx: ಠ_ಠ.clutz.goog.graphics.AffineTransform):
            ಠ_ಠ.clutz.goog.graphics.Path;
        /**
         * Adds points to the path by drawing cubic Bezier curves. Each curve is
         * specified using 3 points (6 coordinates) - two control points and the
         * end point of the curve.
         * @param var_args The coordinates specifying each curve in sets of 6
         * points: {@code [x1, y1]} the first control point, {@code [x2, y2]}
         * the second control point and {@code [x, y]} the end point.
         */
        curveTo(...var_args: (number|undefined)[]):
            ಠ_ಠ.clutz.goog.graphics.Path;
        /**
         * Iterates over the path calling the supplied callback once for each
         * path segment. The arguments to the callback function are the segment
         * type and an array of its arguments.
         *
         * The {@code LINETO} and {@code CURVETO} arrays can contain multiple
         * segments of the same type. The number of segments is the length of
         * the array divided by the segment length (2 for lines, 6 for  curves).
         *
         * As a convenience the {@code ARCTO} segment also includes the end
         * point as the last two arguments: {@code rx, ry, fromAngle, extent, x,
         * y}.
         * @param callback The function to call with each path segment.
         */
        forEachSegment(callback: (a: number, b: any[]|null) => any): void;
        /**
         * Returns the coordinates most recently added to the end of the path.
         */
        getCurrentPoint(): ಠ_ಠ.clutz.goog.vec.Number|null;
        isEmpty(): boolean;
        /**
         * Returns true if this path contains no arcs. Simplified paths can be
         * created using {@code createSimplifiedPath}.
         */
        isSimple(): boolean;
        /**
         * Adds points to the path by drawing a straight line to each point.
         * @param var_args The coordinates of each destination point as x, y
         * value pairs.
         */
        lineTo(...var_args: (number|undefined)[]): ಠ_ಠ.clutz.goog.graphics.Path;
        /**
         * Adds a point to the path by moving to the specified point. Repeated
         * moveTo commands are collapsed into a single moveTo.
         * @param x X coordinate of destination point.
         * @param y Y coordinate of destination point.
         */
        moveTo(x: number, y: number): ಠ_ಠ.clutz.goog.graphics.Path;
        /**
         * Transforms the path. Only simple paths are transformable. Attempting
         * to transform a non-simple path will throw an error.
         * @param tx The transformation to perform.
         */
        transform(tx: ಠ_ಠ.clutz.goog.graphics.AffineTransform):
            ಠ_ಠ.clutz.goog.graphics.Path;
    }
}
declare module 'goog:goog.graphics.Path' {
    import alias = ಠ_ಠ.clutz.goog.graphics.Path;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics.Path {
    /**
     * Path segment types.
     */
    enum Segment {
        ARCTO,
        CLOSE,
        CURVETO,
        LINETO,
        MOVETO,
    }
}
declare module 'goog:goog.graphics.Path.Segment' {
    import alias = ಠ_ಠ.clutz.goog.graphics.Path.Segment;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
    /**
     * Interface for a graphics path element.
     * You should not construct objects from this constructor. The graphics
     * will return an implementation of this interface for you.
     */
    class PathElement extends PathElement_Instance {}
    class PathElement_Instance extends
        ಠ_ಠ.clutz.goog.graphics.StrokeAndFillElement_Instance {
        /**
         * Interface for a graphics path element.
         * You should not construct objects from this constructor. The graphics
         * will return an implementation of this interface for you.
         * @param element The DOM element to wrap.
         * @param graphics The graphics creating this element.
         * @param stroke The stroke to use for this element.
         * @param fill The fill to use for this element.
         */
        constructor(
            element: GlobalElement|null,
            graphics: ಠ_ಠ.clutz.goog.graphics.AbstractGraphics|null,
            stroke: ಠ_ಠ.clutz.goog.graphics.Stroke|null,
            fill: ಠ_ಠ.clutz.goog.graphics.Fill|null);
        /**
         * Update the underlying path.
         * @param path The path object to draw.
         */
        setPath(a: ಠ_ಠ.clutz.goog.graphics.Path): any;
    }
}
declare module 'goog:goog.graphics.PathElement' {
    import alias = ಠ_ಠ.clutz.goog.graphics.PathElement;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
    /**
     * Interface for a graphics rectangle element.
     * You should not construct objects from this constructor. The graphics
     * will return an implementation of this interface for you.
     */
    class RectElement extends RectElement_Instance {}
    class RectElement_Instance extends
        ಠ_ಠ.clutz.goog.graphics.StrokeAndFillElement_Instance {
        /**
         * Interface for a graphics rectangle element.
         * You should not construct objects from this constructor. The graphics
         * will return an implementation of this interface for you.
         * @param element The DOM element to wrap.
         * @param graphics The graphics creating this element.
         * @param stroke The stroke to use for this element.
         * @param fill The fill to use for this element.
         */
        constructor(
            element: GlobalElement|null,
            graphics: ಠ_ಠ.clutz.goog.graphics.AbstractGraphics|null,
            stroke: ಠ_ಠ.clutz.goog.graphics.Stroke|null,
            fill: ಠ_ಠ.clutz.goog.graphics.Fill|null);
        /**
         * Update the position of the rectangle.
         * @param x X coordinate (left).
         * @param y Y coordinate (top).
         */
        setPosition(a: number, b: number): any;
        /**
         * Update the size of the rectangle.
         * @param width Width of rectangle.
         * @param height Height of rectangle.
         */
        setSize(a: number, b: number): any;
    }
}
declare module 'goog:goog.graphics.RectElement' {
    import alias = ಠ_ಠ.clutz.goog.graphics.RectElement;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
    /**
     * Creates an immutable solid color fill object.
     */
    class SolidFill extends SolidFill_Instance {}
    class SolidFill_Instance extends ಠ_ಠ.clutz.goog.graphics.Fill_Instance {
        /**
         * Creates an immutable solid color fill object.
         * @param color The color of the background.
         * @param opt_opacity The opacity of the background fill. The value must
         * be greater than or equal to zero (transparent) and less than or equal
         * to 1 (opaque).
         */
        constructor(color: string, opt_opacity?: number);
        getColor(): string;
        getOpacity(): number;
    }
}
declare module 'goog:goog.graphics.SolidFill' {
    import alias = ಠ_ಠ.clutz.goog.graphics.SolidFill;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
    /**
     * Creates an immutable stroke object.
     */
    class Stroke extends Stroke_Instance {}
    class Stroke_Instance {
        private noStructuralTyping_: any;
        /**
         * Creates an immutable stroke object.
         * @param width The width of the stroke.
         * @param color The color of the stroke.
         * @param opt_opacity The opacity of the background fill. The value must
         * be greater than or equal to zero (transparent) and less than or equal
         * to 1 (opaque).
         */
        constructor(width: number|string, color: string, opt_opacity?: number);
        getColor(): string;
        getOpacity(): number;
        getWidth(): number|string;
    }
}
declare module 'goog:goog.graphics.Stroke' {
    import alias = ಠ_ಠ.clutz.goog.graphics.Stroke;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
    /**
     * Interface for a graphics element with a stroke and fill.
     * This is the base interface for ellipse, rectangle and other
     * shape interfaces.
     * You should not construct objects from this constructor. The graphics
     * will return an implementation of this interface for you.
     */
    class StrokeAndFillElement extends StrokeAndFillElement_Instance {}
    class StrokeAndFillElement_Instance extends
        ಠ_ಠ.clutz.goog.graphics.Element_Instance {
        /**
         * Interface for a graphics element with a stroke and fill.
         * This is the base interface for ellipse, rectangle and other
         * shape interfaces.
         * You should not construct objects from this constructor. The graphics
         * will return an implementation of this interface for you.
         * @param element The DOM element to wrap.
         * @param graphics The graphics creating this element.
         * @param stroke The stroke to use for this element.
         * @param fill The fill to use for this element.
         */
        constructor(
            element: GlobalElement|null,
            graphics: ಠ_ಠ.clutz.goog.graphics.AbstractGraphics|null,
            stroke: ಠ_ಠ.clutz.goog.graphics.Stroke|null,
            fill: ಠ_ಠ.clutz.goog.graphics.Fill|null);
        /**
         * The latest fill applied to this element.
         */
        fill: ಠ_ಠ.clutz.goog.graphics.Fill|null;
        getFill(): ಠ_ಠ.clutz.goog.graphics.Fill|null;
        getStroke(): ಠ_ಠ.clutz.goog.graphics.Stroke|null;
        /**
         * Re-strokes the element to react to coordinate size changes.
         */
        reapplyStroke(): void;
        /**
         * Sets the fill for this element.
         * @param fill The fill object.
         */
        setFill(fill: ಠ_ಠ.clutz.goog.graphics.Fill|null): void;
        /**
         * Sets the stroke for this element.
         * @param stroke The stroke object.
         */
        setStroke(stroke: ಠ_ಠ.clutz.goog.graphics.Stroke|null): void;
    }
}
declare module 'goog:goog.graphics.StrokeAndFillElement' {
    import alias = ಠ_ಠ.clutz.goog.graphics.StrokeAndFillElement;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
    /**
     * Thin wrapper for SVG ellipse elements.
     * This is an implementation of the goog.graphics.EllipseElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     */
    class SvgEllipseElement extends SvgEllipseElement_Instance {}
    class SvgEllipseElement_Instance extends
        ಠ_ಠ.clutz.goog.graphics.EllipseElement_Instance {
        /**
         * Thin wrapper for SVG ellipse elements.
         * This is an implementation of the goog.graphics.EllipseElement
         * interface. You should not construct objects from this constructor.
         * The graphics will return the object for you.
         * @param element The DOM element to wrap.
         * @param graphics The graphics creating this element.
         * @param stroke The stroke to use for this element.
         * @param fill The fill to use for this element.
         */
        constructor(
            element: GlobalElement|null,
            graphics: ಠ_ಠ.clutz.goog.graphics.SvgGraphics|null,
            stroke: ಠ_ಠ.clutz.goog.graphics.Stroke|null,
            fill: ಠ_ಠ.clutz.goog.graphics.Fill|null);
        /**
         * Update the center point of the ellipse.
         * @param cx Center X coordinate.
         * @param cy Center Y coordinate.
         */
        setCenter(cx: number, cy: number): any;
        /**
         * Update the radius of the ellipse.
         * @param rx Radius length for the x-axis.
         * @param ry Radius length for the y-axis.
         */
        setRadius(rx: number, ry: number): any;
    }
}
declare module 'goog:goog.graphics.SvgEllipseElement' {
    import alias = ಠ_ಠ.clutz.goog.graphics.SvgEllipseElement;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
    /**
     * A Graphics implementation for drawing using SVG.
     */
    class SvgGraphics extends SvgGraphics_Instance {
        /**
         * Returns a string representation of a logical path suitable for use in
         * an SVG element.
         * @param path The logical path.
         */
        static getSvgPath(path: ಠ_ಠ.clutz.goog.graphics.Path|null): string;
    }
    class SvgGraphics_Instance extends
        ಠ_ಠ.clutz.goog.graphics.AbstractGraphics_Instance {
        /**
         * A Graphics implementation for drawing using SVG.
         * @param width The width in pixels.  Strings expressing percentages of
         * parent with (e.g. '80%') are also accepted.
         * @param height The height in pixels.  Strings expressing percentages
         * of parent with (e.g. '80%') are also accepted.
         * @param opt_coordWidth The coordinate width - if omitted or null,
         * defaults to same as width.
         * @param opt_coordHeight The coordinate height - if omitted or null,
         * defaults to same as height.
         * @param opt_domHelper The DOM helper object for the document we want
         * to render in.
         */
        constructor(
            width: string|number, height: string|number,
            opt_coordWidth?: number|null, opt_coordHeight?: number|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        canvasElement: ಠ_ಠ.clutz.goog.graphics.GroupElement|null;
        coordLeft: number;
        coordTop: number;
        /**
         * Adds a definition of an element to the global definitions.
         * @param defKey This is a key that should be unique in a way that if
         * two definitions are equal the should have the same key.
         * @param defElement DOM element to add as a definition. It must have an
         * id attribute set.
         */
        addDef(defKey: string, defElement: GlobalElement|null): string;
        /**
         * Remove all drawing elements from the graphics.
         */
        clear(): void;
        /**
         * Creates the DOM representation of the graphics area.
         */
        createDom(): void;
        /**
         * Create an empty group of drawing elements.
         * @param opt_group The group wrapper element to append to. If not
         * specified, appends to the main canvas.
         */
        createGroup(opt_group?: ಠ_ಠ.clutz.goog.graphics.GroupElement|
                    null): ಠ_ಠ.clutz.goog.graphics.GroupElement;
        /**
         * Disposes of the component by removing event handlers, detacing DOM
         * nodes from the document body, and removing references to them.
         */
        disposeInternal(): void;
        /**
         * Draw an ellipse.
         * @param cx Center X coordinate.
         * @param cy Center Y coordinate.
         * @param rx Radius length for the x-axis.
         * @param ry Radius length for the y-axis.
         * @param stroke Stroke object describing the stroke.
         * @param fill Fill object describing the fill.
         * @param opt_group The group wrapper element to append to. If not
         * specified, appends to the main canvas.
         */
        drawEllipse(
            cx: number, cy: number, rx: number, ry: number,
            stroke: ಠ_ಠ.clutz.goog.graphics.Stroke|null,
            fill: ಠ_ಠ.clutz.goog.graphics.Fill|null,
            opt_group?: ಠ_ಠ.clutz.goog.graphics.GroupElement|
            null): ಠ_ಠ.clutz.goog.graphics.EllipseElement;
        /**
         * Draw an image.
         * @param x X coordinate (left).
         * @param y Y coordinate (top).
         * @param width Width of the image.
         * @param height Height of the image.
         * @param src The source fo the image.
         * @param opt_group The group wrapper element to append to. If not
         * specified, appends to the main canvas.
         */
        drawImage(
            x: number, y: number, width: number, height: number, src: string,
            opt_group?: ಠ_ಠ.clutz.goog.graphics.GroupElement|
            null): ಠ_ಠ.clutz.goog.graphics.ImageElement;
        /**
         * Draw a path.
         * @param path The path object to draw.
         * @param stroke Stroke object describing the stroke.
         * @param fill Fill object describing the fill.
         * @param opt_group The group wrapper element to append to. If not
         * specified, appends to the main canvas.
         */
        drawPath(
            path: ಠ_ಠ.clutz.goog.graphics.Path,
            stroke: ಠ_ಠ.clutz.goog.graphics.Stroke|null,
            fill: ಠ_ಠ.clutz.goog.graphics.Fill|null,
            opt_group?: ಠ_ಠ.clutz.goog.graphics.GroupElement|
            null): ಠ_ಠ.clutz.goog.graphics.PathElement;
        /**
         * Draw a rectangle.
         * @param x X coordinate (left).
         * @param y Y coordinate (top).
         * @param width Width of rectangle.
         * @param height Height of rectangle.
         * @param stroke Stroke object describing the stroke.
         * @param fill Fill object describing the fill.
         * @param opt_group The group wrapper element to append to. If not
         * specified, appends to the main canvas.
         */
        drawRect(
            x: number, y: number, width: number, height: number,
            stroke: ಠ_ಠ.clutz.goog.graphics.Stroke|null,
            fill: ಠ_ಠ.clutz.goog.graphics.Fill|null,
            opt_group?: ಠ_ಠ.clutz.goog.graphics.GroupElement|
            null): ಠ_ಠ.clutz.goog.graphics.RectElement;
        /**
         * Draw a text string vertically centered on a given line.
         * @param text The text to draw.
         * @param x1 X coordinate of start of line.
         * @param y1 Y coordinate of start of line.
         * @param x2 X coordinate of end of line.
         * @param y2 Y coordinate of end of line.
         * @param align Horizontal alignment: left (default), center, right.
         * @param font Font describing the font properties.
         * @param stroke Stroke object describing the stroke.
         * @param fill Fill object describing the fill.
         * @param opt_group The group wrapper element to append to. If not
         * specified, appends to the main canvas.
         */
        drawTextOnLine(
            text: string, x1: number, y1: number, x2: number, y2: number,
            align: string, font: ಠ_ಠ.clutz.goog.graphics.Font|null,
            stroke: ಠ_ಠ.clutz.goog.graphics.Stroke|null,
            fill: ಠ_ಠ.clutz.goog.graphics.Fill|null,
            opt_group?: ಠ_ಠ.clutz.goog.graphics.GroupElement|
            null): ಠ_ಠ.clutz.goog.graphics.TextElement;
        enterDocument(): void;
        exitDocument(): void;
        /**
         * Returns the id of a definition element.
         * @param defKey This is a key that should be unique in a way that if
         * two definitions are equal the should have the same key.
         */
        getDef(defKey: string): string|null;
        getPixelSize(): ಠ_ಠ.clutz.goog.math.Size|null;
        /**
         * Measure and return the width (in pixels) of a given text string.
         * Text measurement is needed to make sure a text can fit in the
         * allocated area. The way text length is measured is by writing it into
         * a div that is after the visible area, measure the div width, and
         * immediately erase the written value.
         */
        getTextWidth(text: string, font: ಠ_ಠ.clutz.goog.graphics.Font|null):
            number;
        isDomClonable(): boolean;
        /**
         * Removes a definition of an elemnt from the global definitions.
         * @param defKey This is a key that should be unique in a way that if
         * two definitions are equal they should have the same key.
         */
        removeDef(defKey: string): void;
        /**
         * Changes the coordinate system position.
         * @param left The coordinate system left bound.
         * @param top The coordinate system top bound.
         */
        setCoordOrigin(left: number, top: number): any;
        /**
         * Changes the coordinate size.
         * @param coordWidth The coordinate width.
         * @param coordHeight The coordinate height.
         */
        setCoordSize(coordWidth: number, coordHeight: number): void;
        /**
         * Set the transformation of an element.
         * @param element The element wrapper.
         * @param affineTransform The transformation applied to this element.
         */
        setElementAffineTransform(
            element: ಠ_ಠ.clutz.goog.graphics.Element|null,
            affineTransform: ಠ_ಠ.clutz.goog.graphics.AffineTransform): any;
        /**
         * Sets properties to an SVG element. Used internally and by different
         * SVG elements.
         * @param element The svg element.
         * @param attributes Map of name-value pairs for attributes.
         */
        setElementAttributes(
            element: GlobalElement|null, attributes: GlobalObject|null): void;
        /**
         * Sets the fill of the given element.
         * @param element The element wrapper.
         * @param fill The fill object.
         */
        setElementFill(
            element: ಠ_ಠ.clutz.goog.graphics.StrokeAndFillElement|null,
            fill: ಠ_ಠ.clutz.goog.graphics.Fill|null): any;
        /**
         * Sets the stroke of the given element.
         * @param element The element wrapper.
         * @param stroke The stroke object.
         */
        setElementStroke(
            element: ಠ_ಠ.clutz.goog.graphics.StrokeAndFillElement|null,
            stroke: ಠ_ಠ.clutz.goog.graphics.Stroke|null): any;
        /**
         * Set the translation and rotation of an element.
         *
         * If a more general affine transform is needed than this provides
         * (e.g. skew and scale) then use setElementAffineTransform.
         * @param element The element wrapper.
         * @param x The x coordinate of the translation transform.
         * @param y The y coordinate of the translation transform.
         * @param angle The angle of the rotation transform.
         * @param centerX The horizontal center of the rotation transform.
         * @param centerY The vertical center of the rotation transform.
         */
        setElementTransform(
            element: ಠ_ಠ.clutz.goog.graphics.Element|null, x: number, y: number,
            angle: number, centerX: number, centerY: number): any;
        /**
         * Change the size of the canvas.
         * @param pixelWidth The width in pixels.
         * @param pixelHeight The height in pixels.
         */
        setSize(pixelWidth: number, pixelHeight: number): any;
    }
}
declare module 'goog:goog.graphics.SvgGraphics' {
    import alias = ಠ_ಠ.clutz.goog.graphics.SvgGraphics;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
    /**
     * Thin wrapper for SVG group elements.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     */
    class SvgGroupElement extends SvgGroupElement_Instance {}
    class SvgGroupElement_Instance extends
        ಠ_ಠ.clutz.goog.graphics.GroupElement_Instance {
        /**
         * Thin wrapper for SVG group elements.
         * You should not construct objects from this constructor. The graphics
         * will return the object for you.
         * @param element The DOM element to wrap.
         * @param graphics The graphics creating this element.
         */
        constructor(
            element: GlobalElement|null,
            graphics: ಠ_ಠ.clutz.goog.graphics.SvgGraphics|null);
        /**
         * Remove all drawing elements from the group.
         */
        clear(): void;
        /**
         * Set the size of the group element.
         * @param width The width of the group element.
         * @param height The height of the group element.
         */
        setSize(width: number|string, height: number|string): any;
    }
}
declare module 'goog:goog.graphics.SvgGroupElement' {
    import alias = ಠ_ಠ.clutz.goog.graphics.SvgGroupElement;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
    /**
     * Thin wrapper for SVG image elements.
     * This is an implementation of the goog.graphics.ImageElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     */
    class SvgImageElement extends SvgImageElement_Instance {}
    class SvgImageElement_Instance extends
        ಠ_ಠ.clutz.goog.graphics.ImageElement_Instance {
        /**
         * Thin wrapper for SVG image elements.
         * This is an implementation of the goog.graphics.ImageElement
         * interface. You should not construct objects from this constructor.
         * The graphics will return the object for you.
         * @param element The DOM element to wrap.
         * @param graphics The graphics creating this element.
         */
        constructor(
            element: GlobalElement|null,
            graphics: ಠ_ಠ.clutz.goog.graphics.SvgGraphics|null);
        /**
         * Update the position of the image.
         * @param x X coordinate (left).
         * @param y Y coordinate (top).
         */
        setPosition(x: number, y: number): any;
        /**
         * Update the size of the image.
         * @param width Width of image.
         * @param height Height of image.
         */
        setSize(width: number, height: number): any;
        /**
         * Update the source of the image.
         * @param src Source of the image.
         */
        setSource(src: string): any;
    }
}
declare module 'goog:goog.graphics.SvgImageElement' {
    import alias = ಠ_ಠ.clutz.goog.graphics.SvgImageElement;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
    /**
     * Thin wrapper for SVG path elements.
     * This is an implementation of the goog.graphics.PathElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     */
    class SvgPathElement extends SvgPathElement_Instance {}
    class SvgPathElement_Instance extends
        ಠ_ಠ.clutz.goog.graphics.PathElement_Instance {
        /**
         * Thin wrapper for SVG path elements.
         * This is an implementation of the goog.graphics.PathElement interface.
         * You should not construct objects from this constructor. The graphics
         * will return the object for you.
         * @param element The DOM element to wrap.
         * @param graphics The graphics creating this element.
         * @param stroke The stroke to use for this element.
         * @param fill The fill to use for this element.
         */
        constructor(
            element: GlobalElement|null,
            graphics: ಠ_ಠ.clutz.goog.graphics.SvgGraphics|null,
            stroke: ಠ_ಠ.clutz.goog.graphics.Stroke|null,
            fill: ಠ_ಠ.clutz.goog.graphics.Fill|null);
        /**
         * Update the underlying path.
         * @param path The path object to draw.
         */
        setPath(path: ಠ_ಠ.clutz.goog.graphics.Path): any;
    }
}
declare module 'goog:goog.graphics.SvgPathElement' {
    import alias = ಠ_ಠ.clutz.goog.graphics.SvgPathElement;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
    /**
     * Thin wrapper for SVG rectangle elements.
     * This is an implementation of the goog.graphics.RectElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     */
    class SvgRectElement extends SvgRectElement_Instance {}
    class SvgRectElement_Instance extends
        ಠ_ಠ.clutz.goog.graphics.RectElement_Instance {
        /**
         * Thin wrapper for SVG rectangle elements.
         * This is an implementation of the goog.graphics.RectElement interface.
         * You should not construct objects from this constructor. The graphics
         * will return the object for you.
         * @param element The DOM element to wrap.
         * @param graphics The graphics creating this element.
         * @param stroke The stroke to use for this element.
         * @param fill The fill to use for this element.
         */
        constructor(
            element: GlobalElement|null,
            graphics: ಠ_ಠ.clutz.goog.graphics.SvgGraphics|null,
            stroke: ಠ_ಠ.clutz.goog.graphics.Stroke|null,
            fill: ಠ_ಠ.clutz.goog.graphics.Fill|null);
        /**
         * Update the position of the rectangle.
         * @param x X coordinate (left).
         * @param y Y coordinate (top).
         */
        setPosition(x: number, y: number): any;
        /**
         * Update the size of the rectangle.
         * @param width Width of rectangle.
         * @param height Height of rectangle.
         */
        setSize(width: number, height: number): any;
    }
}
declare module 'goog:goog.graphics.SvgRectElement' {
    import alias = ಠ_ಠ.clutz.goog.graphics.SvgRectElement;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
    /**
     * Thin wrapper for SVG text elements.
     * This is an implementation of the goog.graphics.TextElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     */
    class SvgTextElement extends SvgTextElement_Instance {}
    class SvgTextElement_Instance extends
        ಠ_ಠ.clutz.goog.graphics.TextElement_Instance {
        /**
         * Thin wrapper for SVG text elements.
         * This is an implementation of the goog.graphics.TextElement interface.
         * You should not construct objects from this constructor. The graphics
         * will return the object for you.
         * @param element The DOM element to wrap.
         * @param graphics The graphics creating this element.
         * @param stroke The stroke to use for this element.
         * @param fill The fill to use for this element.
         */
        constructor(
            element: GlobalElement|null,
            graphics: ಠ_ಠ.clutz.goog.graphics.SvgGraphics|null,
            stroke: ಠ_ಠ.clutz.goog.graphics.Stroke|null,
            fill: ಠ_ಠ.clutz.goog.graphics.Fill|null);
        /**
         * Update the displayed text of the element.
         * @param text The text to draw.
         */
        setText(text: string): any;
    }
}
declare module 'goog:goog.graphics.SvgTextElement' {
    import alias = ಠ_ಠ.clutz.goog.graphics.SvgTextElement;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
    /**
     * Interface for a graphics text element.
     * You should not construct objects from this constructor. The graphics
     * will return an implementation of this interface for you.
     */
    class TextElement extends TextElement_Instance {}
    class TextElement_Instance extends
        ಠ_ಠ.clutz.goog.graphics.StrokeAndFillElement_Instance {
        /**
         * Interface for a graphics text element.
         * You should not construct objects from this constructor. The graphics
         * will return an implementation of this interface for you.
         * @param element The DOM element to wrap.
         * @param graphics The graphics creating this element.
         * @param stroke The stroke to use for this element.
         * @param fill The fill to use for this element.
         */
        constructor(
            element: GlobalElement|null,
            graphics: ಠ_ಠ.clutz.goog.graphics.AbstractGraphics|null,
            stroke: ಠ_ಠ.clutz.goog.graphics.Stroke|null,
            fill: ಠ_ಠ.clutz.goog.graphics.Fill|null);
        /**
         * Update the displayed text of the element.
         * @param text The text to draw.
         */
        setText(a: string): any;
    }
}
declare module 'goog:goog.graphics.TextElement' {
    import alias = ಠ_ಠ.clutz.goog.graphics.TextElement;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
    /**
     * Thin wrapper for VML ellipse elements.
     * This is an implementation of the goog.graphics.EllipseElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     */
    class VmlEllipseElement extends VmlEllipseElement_Instance {}
    class VmlEllipseElement_Instance extends
        ಠ_ಠ.clutz.goog.graphics.EllipseElement_Instance {
        /**
         * Thin wrapper for VML ellipse elements.
         * This is an implementation of the goog.graphics.EllipseElement
         * interface. You should not construct objects from this constructor.
         * The graphics will return the object for you.
         * @param element The DOM element to wrap.
         * @param graphics The graphics creating this element.
         * @param cx Center X coordinate.
         * @param cy Center Y coordinate.
         * @param rx Radius length for the x-axis.
         * @param ry Radius length for the y-axis.
         * @param stroke The stroke to use for this element.
         * @param fill The fill to use for this element.
         */
        constructor(
            element: GlobalElement|null,
            graphics: ಠ_ಠ.clutz.goog.graphics.VmlGraphics|null, cx: number,
            cy: number, rx: number, ry: number,
            stroke: ಠ_ಠ.clutz.goog.graphics.Stroke|null,
            fill: ಠ_ಠ.clutz.goog.graphics.Fill|null);
        /**
         * X coordinate of the ellipse center.
         */
        cx: number;
        /**
         * Y coordinate of the ellipse center.
         */
        cy: number;
        id_: any;
        /**
         * Radius length for the x-axis.
         */
        rx: number;
        /**
         * Radius length for the y-axis.
         */
        ry: number;
        /**
         * Update the center point of the ellipse.
         * @param cx Center X coordinate.
         * @param cy Center Y coordinate.
         */
        setCenter(cx: number, cy: number): any;
        /**
         * Update the radius of the ellipse.
         * @param rx Center X coordinate.
         * @param ry Center Y coordinate.
         */
        setRadius(rx: number, ry: number): any;
    }
}
declare module 'goog:goog.graphics.VmlEllipseElement' {
    import alias = ಠ_ಠ.clutz.goog.graphics.VmlEllipseElement;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
    /**
     * A Graphics implementation for drawing using VML.
     */
    class VmlGraphics extends VmlGraphics_Instance {
        /**
         * The coordinate multiplier to allow sub-pixel rendering
         */
        static COORD_MULTIPLIER: number;
        /**
         * Returns a string representation of a logical path suitable for use in
         * a VML element.
         * @param path The logical path.
         */
        static getVmlPath(path: ಠ_ಠ.clutz.goog.graphics.Path|null): string;
        /**
         * Sets an attribute on the given VML element, in the way best suited to
         * the current version of IE.  Should only be used in the goog.graphics
         * package.
         * @param element The element to set an attribute on.
         * @param name The name of the attribute to set.
         * @param value The value to set it to.
         */
        static setAttribute(
            element: GlobalElement|null, name: string, value: string): void;
        /**
         * Set top, left, width and height for an element.
         * This function is internal for the VML supporting classes, and
         * should not be used externally.
         * @param element DOM element.
         * @param left Left ccordinate in pixels.
         * @param top Top ccordinate in pixels.
         * @param width Width in pixels.
         * @param height Height in pixels.
         */
        static setPositionAndSize(
            element: GlobalElement|null, left: number, top: number,
            width: number, height: number): void;
        /**
         * Converts the given size to a css size.  If it is a percentage, leaves
         * it alone.  Otherwise assumes px.
         * @param size The size to use.
         */
        static toCssSize(size: number|string): string;
        /**
         * Multiplies positioning coordinates by COORD_MULTIPLIER to allow
         * sub-pixel coordinates.  Also adds a half pixel offset to match SVG.
         *
         * This function is internal for the VML supporting classes, and
         * should not be used externally.
         * @param number A position in pixels.
         */
        static toPosCoord(number: number|string): number;
        /**
         * Add a "px" suffix to a number of pixels, and multiplies all
         * coordinates by COORD_MULTIPLIER to allow sub-pixel coordinates.
         *
         * This function is internal for the VML supporting classes, and
         * should not be used externally.
         * @param number A position in pixels.
         */
        static toPosPx(number: number|string): string;
        /**
         * Multiplies the width or height coordinate by COORD_MULTIPLIER to
         * allow sub-pixel coordinates.
         *
         * This function is internal for the VML supporting classes, and
         * should not be used externally.
         * @param number A size in units.
         */
        static toSizeCoord(number: string|number): number;
        /**
         * Add a "px" suffix to a number of pixels, and multiplies all
         * coordinates by COORD_MULTIPLIER to allow sub-pixel coordinates.
         *
         * This function is internal for the VML supporting classes, and
         * should not be used externally.
         * @param number A size in pixels.
         */
        static toSizePx(number: number|string): string;
    }
    class VmlGraphics_Instance extends
        ಠ_ಠ.clutz.goog.graphics.AbstractGraphics_Instance {
        /**
         * A Graphics implementation for drawing using VML.
         * @param width The (non-zero) width in pixels.  Strings expressing
         * percentages of parent with (e.g. '80%') are also accepted.
         * @param height The (non-zero) height in pixels.  Strings expressing
         * percentages of parent with (e.g. '80%') are also accepted.
         * @param opt_coordWidth The coordinate width - if omitted or null,
         * defaults to same as width.
         * @param opt_coordHeight The coordinate height - if omitted or null,
         * defaults to same as height.
         * @param opt_domHelper The DOM helper object for the document we want
         * to render in.
         */
        constructor(
            width: string|number, height: string|number,
            opt_coordWidth?: number|null, opt_coordHeight?: number|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        canvasElement: ಠ_ಠ.clutz.goog.graphics.GroupElement|null;
        coordLeft: number;
        coordTop: number;
        /**
         * Remove all drawing elements from the graphics.
         */
        clear(): void;
        /**
         * Creates the DOM representation of the graphics area.
         */
        createDom(): void;
        /**
         * Create an empty group of drawing elements.
         * @param opt_group The group wrapper element to append to. If not
         * specified, appends to the main canvas.
         */
        createGroup(opt_group?: ಠ_ಠ.clutz.goog.graphics.GroupElement|
                    null): ಠ_ಠ.clutz.goog.graphics.GroupElement;
        /**
         * Creates a VML element. Used internally and by different VML classes.
         * @param tagName The type of element to create.
         */
        createVmlElement(tagName: string): GlobalElement;
        /**
         * Disposes of the component by removing event handlers, detacing DOM
         * nodes from the document body, and removing references to them.
         */
        disposeInternal(): void;
        /**
         * Draw an ellipse.
         * @param cx Center X coordinate.
         * @param cy Center Y coordinate.
         * @param rx Radius length for the x-axis.
         * @param ry Radius length for the y-axis.
         * @param stroke Stroke object describing the stroke.
         * @param fill Fill object describing the fill.
         * @param opt_group The group wrapper element to append to. If not
         * specified, appends to the main canvas.
         */
        drawEllipse(
            cx: number, cy: number, rx: number, ry: number,
            stroke: ಠ_ಠ.clutz.goog.graphics.Stroke|null,
            fill: ಠ_ಠ.clutz.goog.graphics.Fill|null,
            opt_group?: ಠ_ಠ.clutz.goog.graphics.GroupElement|
            null): ಠ_ಠ.clutz.goog.graphics.EllipseElement;
        /**
         * Draw an image.
         * @param x X coordinate (left).
         * @param y Y coordinate (top).
         * @param width Width of image.
         * @param height Height of image.
         * @param src Source of the image.
         * @param opt_group The group wrapper element to append to. If not
         * specified, appends to the main canvas.
         */
        drawImage(
            x: number, y: number, width: number, height: number, src: string,
            opt_group?: ಠ_ಠ.clutz.goog.graphics.GroupElement|
            null): ಠ_ಠ.clutz.goog.graphics.ImageElement;
        /**
         * Draw a path.
         * @param path The path object to draw.
         * @param stroke Stroke object describing the stroke.
         * @param fill Fill object describing the fill.
         * @param opt_group The group wrapper element to append to. If not
         * specified, appends to the main canvas.
         */
        drawPath(
            path: ಠ_ಠ.clutz.goog.graphics.Path,
            stroke: ಠ_ಠ.clutz.goog.graphics.Stroke|null,
            fill: ಠ_ಠ.clutz.goog.graphics.Fill|null,
            opt_group?: ಠ_ಠ.clutz.goog.graphics.GroupElement|
            null): ಠ_ಠ.clutz.goog.graphics.PathElement;
        /**
         * Draw a rectangle.
         * @param x X coordinate (left).
         * @param y Y coordinate (top).
         * @param width Width of rectangle.
         * @param height Height of rectangle.
         * @param stroke Stroke object describing the stroke.
         * @param fill Fill object describing the fill.
         * @param opt_group The group wrapper element to append to. If not
         * specified, appends to the main canvas.
         */
        drawRect(
            x: number, y: number, width: number, height: number,
            stroke: ಠ_ಠ.clutz.goog.graphics.Stroke|null,
            fill: ಠ_ಠ.clutz.goog.graphics.Fill|null,
            opt_group?: ಠ_ಠ.clutz.goog.graphics.GroupElement|
            null): ಠ_ಠ.clutz.goog.graphics.RectElement;
        /**
         * Draw a text string vertically centered on a given line.
         * @param text The text to draw.
         * @param x1 X coordinate of start of line.
         * @param y1 Y coordinate of start of line.
         * @param x2 X coordinate of end of line.
         * @param y2 Y coordinate of end of line.
         * @param align Horizontal alignment: left (default), center, right.
         * @param font Font describing the font properties.
         * @param stroke Stroke object describing the stroke.
         * @param fill Fill object describing the fill.
         * @param opt_group The group wrapper element to append to. If not
         * specified, appends to the main canvas.
         */
        drawTextOnLine(
            text: string, x1: number, y1: number, x2: number, y2: number,
            align: string|null, font: ಠ_ಠ.clutz.goog.graphics.Font|null,
            stroke: ಠ_ಠ.clutz.goog.graphics.Stroke|null,
            fill: ಠ_ಠ.clutz.goog.graphics.Fill|null,
            opt_group?: ಠ_ಠ.clutz.goog.graphics.GroupElement|
            null): ಠ_ಠ.clutz.goog.graphics.TextElement;
        enterDocument(): void;
        getPixelSize(): ಠ_ಠ.clutz.goog.math.Size;
        /**
         * Measure and return the width (in pixels) of a given text string.
         * Text measurement is needed to make sure a text can fit in the
         * allocated area. The way text length is measured is by writing it into
         * a div that is after the visible area, measure the div width, and
         * immediately erase the written value.
         * @param text The text string to measure.
         * @param font The font object describing the font style.
         */
        getTextWidth(text: string, font: ಠ_ಠ.clutz.goog.graphics.Font|null):
            number;
        /**
         * Returns the VML element with the given id that is a child of this
         * graphics object. Should be considered package private, and not used
         * externally.
         * @param id The element id to find.
         */
        getVmlElement(id: string): GlobalElement|null;
        /**
         * Changes the coordinate system position.
         * @param left The coordinate system left bound.
         * @param top The coordinate system top bound.
         */
        setCoordOrigin(left: number, top: number): any;
        /**
         * Changes the coordinate size.
         * @param coordWidth The coordinate width.
         * @param coordHeight The coordinate height.
         */
        setCoordSize(coordWidth: number, coordHeight: number): void;
        /**
         * Set the transformation of an element.
         * @param element The element wrapper.
         * @param affineTransform The transformation applied to this element.
         */
        setElementAffineTransform(
            element: ಠ_ಠ.clutz.goog.graphics.Element,
            affineTransform: ಠ_ಠ.clutz.goog.graphics.AffineTransform): any;
        /**
         * Sets the fill for the given element.
         * @param element The element wrapper.
         * @param fill The fill object.
         */
        setElementFill(
            element: ಠ_ಠ.clutz.goog.graphics.StrokeAndFillElement|null,
            fill: ಠ_ಠ.clutz.goog.graphics.Fill|null): any;
        /**
         * Sets the stroke for the given element.
         * @param element The element wrapper.
         * @param stroke The stroke object.
         */
        setElementStroke(
            element: ಠ_ಠ.clutz.goog.graphics.StrokeAndFillElement|null,
            stroke: ಠ_ಠ.clutz.goog.graphics.Stroke|null): any;
        /**
         * Set the translation and rotation of an element.
         *
         * If a more general affine transform is needed than this provides
         * (e.g. skew and scale) then use setElementAffineTransform.
         * @param element The element wrapper.
         * @param x The x coordinate of the translation transform.
         * @param y The y coordinate of the translation transform.
         * @param angle The angle of the rotation transform.
         * @param centerX The horizontal center of the rotation transform.
         * @param centerY The vertical center of the rotation transform.
         */
        setElementTransform(
            element: ಠ_ಠ.clutz.goog.graphics.Element|null, x: number, y: number,
            angle: number, centerX: number, centerY: number): any;
        /**
         * Change the size of the canvas.
         * @param pixelWidth The width in pixels.
         * @param pixelHeight The height in pixels.
         */
        setSize(pixelWidth: number, pixelHeight: number): any;
    }
}
declare module 'goog:goog.graphics.VmlGraphics' {
    import alias = ಠ_ಠ.clutz.goog.graphics.VmlGraphics;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
    /**
     * Thin wrapper for VML group elements.
     * This is an implementation of the goog.graphics.GroupElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     */
    class VmlGroupElement extends VmlGroupElement_Instance {}
    class VmlGroupElement_Instance extends
        ಠ_ಠ.clutz.goog.graphics.GroupElement_Instance {
        /**
         * Thin wrapper for VML group elements.
         * This is an implementation of the goog.graphics.GroupElement
         * interface. You should not construct objects from this constructor.
         * The graphics will return the object for you.
         * @param element The DOM element to wrap.
         * @param graphics The graphics creating this element.
         */
        constructor(
            element: GlobalElement|null,
            graphics: ಠ_ಠ.clutz.goog.graphics.VmlGraphics|null);
        id_: any;
        /**
         * Remove all drawing elements from the group.
         */
        clear(): void;
        /**
         * Set the size of the group element.
         * @param width The width of the group element.
         * @param height The height of the group element.
         */
        setSize(width: number|string, height: number|string): any;
    }
}
declare module 'goog:goog.graphics.VmlGroupElement' {
    import alias = ಠ_ಠ.clutz.goog.graphics.VmlGroupElement;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
    /**
     * Thin wrapper for VML image elements.
     * This is an implementation of the goog.graphics.ImageElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     */
    class VmlImageElement extends VmlImageElement_Instance {}
    class VmlImageElement_Instance extends
        ಠ_ಠ.clutz.goog.graphics.ImageElement_Instance {
        /**
         * Thin wrapper for VML image elements.
         * This is an implementation of the goog.graphics.ImageElement
         * interface. You should not construct objects from this constructor.
         * The graphics will return the object for you.
         * @param element The DOM element to wrap.
         * @param graphics The graphics creating this element.
         */
        constructor(
            element: GlobalElement|null,
            graphics: ಠ_ಠ.clutz.goog.graphics.VmlGraphics|null);
        id_: any;
        /**
         * Update the position of the image.
         * @param x X coordinate (left).
         * @param y Y coordinate (top).
         */
        setPosition(x: number, y: number): any;
        /**
         * Update the size of the image.
         * @param width Width of rectangle.
         * @param height Height of rectangle.
         */
        setSize(width: number, height: number): any;
        /**
         * Update the source of the image.
         * @param src Source of the image.
         */
        setSource(src: string): any;
    }
}
declare module 'goog:goog.graphics.VmlImageElement' {
    import alias = ಠ_ಠ.clutz.goog.graphics.VmlImageElement;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
    /**
     * Thin wrapper for VML path elements.
     * This is an implementation of the goog.graphics.PathElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     */
    class VmlPathElement extends VmlPathElement_Instance {}
    class VmlPathElement_Instance extends
        ಠ_ಠ.clutz.goog.graphics.PathElement_Instance {
        /**
         * Thin wrapper for VML path elements.
         * This is an implementation of the goog.graphics.PathElement interface.
         * You should not construct objects from this constructor. The graphics
         * will return the object for you.
         * @param element The DOM element to wrap.
         * @param graphics The graphics creating this element.
         * @param stroke The stroke to use for this element.
         * @param fill The fill to use for this element.
         */
        constructor(
            element: GlobalElement|null,
            graphics: ಠ_ಠ.clutz.goog.graphics.VmlGraphics|null,
            stroke: ಠ_ಠ.clutz.goog.graphics.Stroke|null,
            fill: ಠ_ಠ.clutz.goog.graphics.Fill|null);
        id_: any;
        /**
         * Update the underlying path.
         * @param path The path object to draw.
         */
        setPath(path: ಠ_ಠ.clutz.goog.graphics.Path): any;
    }
}
declare module 'goog:goog.graphics.VmlPathElement' {
    import alias = ಠ_ಠ.clutz.goog.graphics.VmlPathElement;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
    /**
     * Thin wrapper for VML rectangle elements.
     * This is an implementation of the goog.graphics.RectElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     */
    class VmlRectElement extends VmlRectElement_Instance {}
    class VmlRectElement_Instance extends
        ಠ_ಠ.clutz.goog.graphics.RectElement_Instance {
        /**
         * Thin wrapper for VML rectangle elements.
         * This is an implementation of the goog.graphics.RectElement interface.
         * You should not construct objects from this constructor. The graphics
         * will return the object for you.
         * @param element The DOM element to wrap.
         * @param graphics The graphics creating this element.
         * @param stroke The stroke to use for this element.
         * @param fill The fill to use for this element.
         */
        constructor(
            element: GlobalElement|null,
            graphics: ಠ_ಠ.clutz.goog.graphics.VmlGraphics|null,
            stroke: ಠ_ಠ.clutz.goog.graphics.Stroke|null,
            fill: ಠ_ಠ.clutz.goog.graphics.Fill|null);
        id_: any;
        /**
         * Update the position of the rectangle.
         * @param x X coordinate (left).
         * @param y Y coordinate (top).
         */
        setPosition(x: number, y: number): any;
        /**
         * Update the size of the rectangle.
         * @param width Width of rectangle.
         * @param height Height of rectangle.
         */
        setSize(width: number, height: number): any;
    }
}
declare module 'goog:goog.graphics.VmlRectElement' {
    import alias = ಠ_ಠ.clutz.goog.graphics.VmlRectElement;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics {
    /**
     * Thin wrapper for VML text elements.
     * This is an implementation of the goog.graphics.TextElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     */
    class VmlTextElement extends VmlTextElement_Instance {}
    class VmlTextElement_Instance extends
        ಠ_ಠ.clutz.goog.graphics.TextElement_Instance {
        /**
         * Thin wrapper for VML text elements.
         * This is an implementation of the goog.graphics.TextElement interface.
         * You should not construct objects from this constructor. The graphics
         * will return the object for you.
         * @param element The DOM element to wrap.
         * @param graphics The graphics creating this element.
         * @param stroke The stroke to use for this element.
         * @param fill The fill to use for this element.
         */
        constructor(
            element: GlobalElement|null,
            graphics: ಠ_ಠ.clutz.goog.graphics.VmlGraphics|null,
            stroke: ಠ_ಠ.clutz.goog.graphics.Stroke|null,
            fill: ಠ_ಠ.clutz.goog.graphics.Fill|null);
        id_: any;
        /**
         * Update the displayed text of the element.
         * @param text The text to draw.
         */
        setText(text: string): any;
    }
}
declare module 'goog:goog.graphics.VmlTextElement' {
    import alias = ಠ_ಠ.clutz.goog.graphics.VmlTextElement;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics.ext {}
declare module 'goog:goog.graphics.ext' {
    import alias = ಠ_ಠ.clutz.goog.graphics.ext;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics.ext {
    /**
     * Base class for a wrapper around the goog.graphics wrapper that enables
     * more advanced functionality.
     */
    class Element extends Element_Instance {}
    class Element_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * Base class for a wrapper around the goog.graphics wrapper that
         * enables more advanced functionality.
         * @param group Parent for this element.
         * @param wrapper The thin wrapper to wrap.
         */
        constructor(
            group: ಠ_ಠ.clutz.goog.graphics.ext.Group|null,
            wrapper: ಠ_ಠ.clutz.goog.graphics.Element|null);
        /**
         * Overridable function for subclass specific parent dependency.
         */
        checkParentDependent(): boolean;
        disposeInternal(): void;
        getBottom(): number;
        getCenter(): number;
        getGraphics(): ಠ_ಠ.clutz.goog.graphics.ext.Element|null;
        /**
         * Returns the graphics implementation.
         */
        getGraphicsImplementation(): ಠ_ಠ.clutz.goog.graphics.AbstractGraphics
            |null;
        getHeight(): number;
        getLeft(): number;
        getMaxX(): number;
        getMaxY(): number;
        getMiddle(): number;
        getMinHeight(): number;
        getMinWidth(): number;
        getParent(): ಠ_ಠ.clutz.goog.graphics.ext.Group|null|undefined;
        getPixelScaleX(): number;
        getPixelScaleY(): number;
        getRight(): number;
        getRotation(): number;
        getTop(): number;
        getWidth(): number;
        getWrapper(): ಠ_ಠ.clutz.goog.graphics.Element|null;
        /**
         * Returns whether this element's bounds depend on its parents.
         *
         * This function should be treated as if it has package scope.
         */
        isParentDependent(): boolean;
        isPendingTransform(): boolean;
        /**
         * Called by the parent when the parent has transformed.
         *
         * Should be treated as package scope.
         */
        parentTransform(): void;
        /**
         * Overridable function for subclass specific reset.
         */
        redraw(): void;
        /**
         * Reset the element.  This is called when the element changes size, or
         * when the coordinate system changes in a way that would affect pixel
         * based rendering
         */
        reset(): void;
        /**
         * Sets the bottom coordinate of the element.  Overwrites any previous
         * value of top, middle, or bottom for this element.
         * @param bottom The bottom coordinate.
         * @param opt_chain Optional flag to specify this function is part of a
         * chain of calls and therefore transformations should be set as pending
         * but not yet performed.
         */
        setBottom(bottom: string|number, opt_chain?: boolean): void;
        /**
         * Shortcut for setting the left, top, width, and height.
         * @param left The left coordinate.
         * @param top The top coordinate.
         * @param width The new width value.
         * @param height The new height value.
         * @param opt_chain Optional flag to specify this function is part of a
         * chain of calls and therefore transformations should be set as pending
         * but not yet performed.
         */
        setBounds(
            left: string|number, top: string|number, width: string|number,
            height: string|number, opt_chain?: boolean): void;
        /**
         * Sets the center coordinate of the element.  Overwrites any previous
         * value of left, center, or right for this element.
         * @param center The center coordinate.
         * @param opt_chain Optional flag to specify this function is part of a
         * chain of calls and therefore transformations should be set as pending
         * but not yet performed.
         */
        setCenter(center: string|number, opt_chain?: boolean): void;
        /**
         * Sets the height of the element.
         * @param height The new height value.
         * @param opt_chain Optional flag to specify this function is part of a
         * chain of calls and therefore transformations should be set as pending
         * but not yet performed.
         */
        setHeight(height: string|number, opt_chain?: boolean): void;
        /**
         * Sets the left coordinate of the element.  Overwrites any previous
         * value of left, center, or right for this element.
         * @param left The left coordinate.
         * @param opt_chain Optional flag to specify this function is part of a
         * chain of calls and therefore transformations should be set as pending
         * but not yet performed.
         */
        setLeft(left: string|number, opt_chain?: boolean): void;
        /**
         * Sets the middle coordinate of the element.  Overwrites any previous
         * value of top, middle, or bottom for this element
         * @param middle The middle coordinate.
         * @param opt_chain Optional flag to specify this function is part of a
         * chain of calls and therefore transformations should be set as pending
         * but not yet performed.
         */
        setMiddle(middle: string|number, opt_chain?: boolean): void;
        /**
         * Sets the minimum height of the element.
         * @param minHeight The minimum height of the element.
         */
        setMinHeight(minHeight: string|number): void;
        /**
         * Sets the minimum width of the element.
         * @param minWidth The minimum width of the element.
         */
        setMinWidth(minWidth: string|number): void;
        /**
         * Shortcut for setting the left and top position.
         * @param left The left coordinate.
         * @param top The top coordinate.
         * @param opt_chain Optional flag to specify this function is part of a
         * chain of calls and therefore transformations should be set as pending
         * but not yet performed.
         */
        setPosition(
            left: string|number, top: string|number, opt_chain?: boolean): void;
        /**
         * Sets the right coordinate of the element.  Overwrites any previous
         * value of left, center, or right for this element.
         * @param right The right coordinate.
         * @param opt_chain Optional flag to specify this function is part of a
         * chain of calls and therefore transformations should be set as pending
         * but not yet performed.
         */
        setRight(right: string|number, opt_chain?: boolean): void;
        /**
         * Set the rotation of this element.
         * @param angle The angle of rotation, in degrees.
         */
        setRotation(angle: number): void;
        /**
         * Shortcut for setting the width and height.
         * @param width The new width value.
         * @param height The new height value.
         * @param opt_chain Optional flag to specify this function is part of a
         * chain of calls and therefore transformations should be set as pending
         * but not yet performed.
         */
        setSize(
            width: string|number, height: string|number,
            opt_chain?: boolean): void;
        /**
         * Sets the top coordinate of the element.  Overwrites any previous
         * value of top, middle, or bottom for this element.
         * @param top The top coordinate.
         * @param opt_chain Optional flag to specify this function is part of a
         * chain of calls and therefore transformations should be set as pending
         * but not yet performed.
         */
        setTop(top: string|number, opt_chain?: boolean): void;
        /**
         * Sets the width of the element.
         * @param width The new width value.
         * @param opt_chain Optional flag to specify this function is part of a
         * chain of calls and therefore transformations should be set as pending
         * but not yet performed.
         */
        setWidth(width: string|number, opt_chain?: boolean): void;
        /**
         * Performs a pending transform.
         */
        transform(): void;
    }
}
declare namespace ಠ_ಠ.clutz.goog.graphics.ext.Element {
    class Position_ extends Position__Instance {}
    class Position__Instance {
        private noStructuralTyping_: any;
        element_: ಠ_ಠ.clutz.goog.graphics.ext.Element|null;
        horizontal_: boolean;
        getEnd(): number;
        getMaxPosition(): number;
        getMiddle(): number;
        getMinSize(): number;
        getSize(): number;
        getStart(): number;
        isParentDependent(): boolean;
        /**
         * Resets the caches of position values and coordinate values.
         */
        resetCache(): void;
        /**
         * Sets the minimum width/height of the element.
         * @param minSize The minimum width/height of the element.
         */
        setMinSize(minSize: string|number): void;
        /**
         * Sets the position, either as a left/top, center/middle, or
         * right/bottom value.
         * @param value The value of the coordinate.
         * @param type The type of the coordinate.
         */
        setPosition(value: number|string, type: PrivateType): void;
        /**
         * Sets the width/height of the element.
         * @param size The width/height of the element.
         */
        setSize(size: string|number): boolean;
    }
}
declare module 'goog:goog.graphics.ext.Element' {
    import alias = ಠ_ಠ.clutz.goog.graphics.ext.Element;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics.ext {
    /**
     * Wrapper for a graphics ellipse element.
     */
    class Ellipse extends Ellipse_Instance {}
    class Ellipse_Instance extends
        ಠ_ಠ.clutz.goog.graphics.ext.StrokeAndFillElement_Instance {
        /**
         * Wrapper for a graphics ellipse element.
         * @param group Parent for this element.
         */
        constructor(group: ಠ_ಠ.clutz.goog.graphics.ext.Group|null);
        /**
         * Redraw the ellipse.  Called when the coordinate system is changed.
         */
        redraw(): void;
    }
}
declare module 'goog:goog.graphics.ext.Ellipse' {
    import alias = ಠ_ಠ.clutz.goog.graphics.ext.Ellipse;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics.ext {
    /**
     * Wrapper for a graphics surface.
     */
    class Graphics extends Graphics_Instance {}
    class Graphics_Instance extends ಠ_ಠ.clutz.goog.graphics.ext.Group_Instance {
        /**
         * Wrapper for a graphics surface.
         * @param width The width in pixels.  Strings expressing percentages of
         * parent with (e.g. '80%') are also accepted.
         * @param height The height in pixels.  Strings expressing percentages
         * of parent with (e.g. '80%') are also accepted.
         * @param opt_coordWidth The coordinate width - if omitted or null,
         * defaults to same as width.
         * @param opt_coordHeight The coordinate height. - if omitted or null,
         * defaults to same as height.
         * @param opt_domHelper The DOM helper object for the document we want
         * to render in.
         * @param opt_isSimple Flag used to indicate the graphics object will be
         * drawn to in a single pass, and the fastest implementation for this
         * scenario should be favored.  NOTE: Setting to true may result in
         * degradation of text support.
         */
        constructor(
            width: string|number, height: string|number,
            opt_coordWidth?: number|null, opt_coordHeight?: number|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null,
            opt_isSimple?: boolean);
        getCoordOrigin(): ಠ_ಠ.clutz.goog.math.Coordinate;
        getCoordSize(): ಠ_ಠ.clutz.goog.math.Size|null;
        getElement(): GlobalElement|null;
        getHeight(): number;
        getImplementation(): ಠ_ಠ.clutz.goog.graphics.AbstractGraphics|null;
        getPixelScaleX(): number;
        getPixelScaleY(): number;
        getPixelSize(): ಠ_ಠ.clutz.goog.math.Size|null;
        getWidth(): number;
        /**
         * Called from the parent class, this method resets any pre-computed
         * positions and sizes.
         */
        redraw(): void;
        /**
         * Renders the underlying graphics.
         * @param parentElement Parent element to render the component into.
         */
        render(parentElement: GlobalElement|null): void;
        /**
         * Changes the coordinate system position.
         * @param left The coordinate system left bound.
         * @param top The coordinate system top bound.
         */
        setCoordOrigin(left: number, top: number): void;
        /**
         * Changes the coordinate size.
         * @param coordWidth The coordinate width.
         * @param coordHeight The coordinate height.
         */
        setCoordSize(coordWidth: number, coordHeight: number): void;
        /**
         * Change the size of the canvas.
         * @param pixelWidth The width in pixels.
         * @param pixelHeight The height in pixels.
         */
        setPixelSize(pixelWidth: number, pixelHeight: number): void;
    }
}
declare module 'goog:goog.graphics.ext.Graphics' {
    import alias = ಠ_ಠ.clutz.goog.graphics.ext.Graphics;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics.ext {
    /**
     * Wrapper for a graphics group.
     */
    class Group extends Group_Instance {}
    class Group_Instance extends ಠ_ಠ.clutz.goog.graphics.ext.Element_Instance {
        /**
         * Wrapper for a graphics group.
         * @param group Parent for this element. Can be null if this is a
         * Graphics instance.
         * @param opt_wrapper The thin wrapper to wrap. If omitted, a new group
         * will be created. Must be included when group is null.
         */
        constructor(
            group: ಠ_ಠ.clutz.goog.graphics.ext.Group|null,
            opt_wrapper?: ಠ_ಠ.clutz.goog.graphics.GroupElement|null);
        /**
         * Add an element to the group.  This should be treated as package
         * local, as it is called by the draw* methods.
         * @param element The element to add.
         * @param opt_chain Whether this addition is part of a longer set of
         * element additions.
         */
        addChild(
            element: ಠ_ಠ.clutz.goog.graphics.ext.Element,
            opt_chain?: boolean): void;
        /**
         * Remove all drawing elements from the group.
         */
        clear(): void;
        /**
         * Calls the given function on each of this component's children in
         * order.  If
         * {@code opt_obj} is provided, it will be used as the 'this' object in
         * the function when called.  The function should take two arguments:
         * the child component and its 0-based index.  The return value is
         * ignored.
         * @param f The function to call for every child component; should take
         * 2 arguments (the child and its index).
         * @param opt_obj Used as the 'this' object in f when called.
         */
        forEachChild(f: (...a: any[]) => any, opt_obj?: GlobalObject|null):
            void;
        getCoordinateHeight(): number;
        getCoordinateWidth(): number;
        getWrapper(): ಠ_ಠ.clutz.goog.graphics.GroupElement|null;
        /**
         * Called from the parent class, this method resets any pre-computed
         * positions and sizes.
         */
        redraw(): void;
        /**
         * Remove an element from the group.
         * @param element The element to remove.
         */
        removeChild(element: ಠ_ಠ.clutz.goog.graphics.ext.Element|null): void;
        /**
         * Reset the element.
         */
        reset(): void;
        /**
         * Transform the children that need to be transformed.
         */
        transformChildren(): void;
        /**
         * As part of the reset process, update child elements.
         */
        updateChildren(): void;
    }
}
declare module 'goog:goog.graphics.ext.Group' {
    import alias = ಠ_ಠ.clutz.goog.graphics.ext.Group;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics.ext {
    /**
     * Wrapper for a graphics image element.
     */
    class Image extends Image_Instance {}
    class Image_Instance extends ಠ_ಠ.clutz.goog.graphics.ext.Element_Instance {
        /**
         * Wrapper for a graphics image element.
         * @param group Parent for this element.
         * @param src The path to the image to display.
         */
        constructor(group: ಠ_ಠ.clutz.goog.graphics.ext.Group|null, src: string);
        /**
         * Redraw the image.  Called when the coordinate system is changed.
         */
        redraw(): void;
        /**
         * Update the source of the image.
         * @param src Source of the image.
         */
        setSource(src: string): void;
    }
}
declare module 'goog:goog.graphics.ext.Image' {
    import alias = ಠ_ಠ.clutz.goog.graphics.ext.Image;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics.ext {
    /**
     * Creates a path object
     */
    class Path extends Path_Instance {}
    class Path_Instance extends ಠ_ಠ.clutz.goog.graphics.Path_Instance {
        /**
         * Clones the path.
         */
        clone(): ಠ_ಠ.clutz.goog.graphics.ext.Path;
        getBoundingBox(): ಠ_ಠ.clutz.goog.math.Rect|null;
        /**
         * Modify the bounding box of the path.  This may cause the path to be
         * simplified (i.e. arcs converted to curves) as a side-effect.
         * @param deltaX How far to translate the x coordinates.
         * @param deltaY How far to translate the y coordinates.
         * @param xFactor After translation, all x coordinates are multiplied by
         * this number.
         * @param yFactor After translation, all y coordinates are multiplied by
         * this number.
         */
        modifyBounds(
            deltaX: number, deltaY: number, xFactor: number,
            yFactor: number): ಠ_ಠ.clutz.goog.graphics.ext.Path;
        /**
         * Transforms the path. Only simple paths are transformable. Attempting
         * to transform a non-simple path will throw an error.
         * @param tx The transformation to perform.
         */
        transform(tx: ಠ_ಠ.clutz.goog.graphics.AffineTransform):
            ಠ_ಠ.clutz.goog.graphics.ext.Path;
        /**
         * Set the precomputed bounds.
         * @param bounds The bounds to use, or set to null to clear and
         * recompute on the next call to getBoundingBox.
         */
        useBoundingBox(bounds: ಠ_ಠ.clutz.goog.math.Rect|null): void;
    }
}
declare module 'goog:goog.graphics.ext.Path' {
    import alias = ಠ_ಠ.clutz.goog.graphics.ext.Path;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics.ext {
    /**
     * Wrapper for a graphics rectangle element.
     */
    class Rectangle extends Rectangle_Instance {}
    class Rectangle_Instance extends
        ಠ_ಠ.clutz.goog.graphics.ext.StrokeAndFillElement_Instance {
        /**
         * Wrapper for a graphics rectangle element.
         * @param group Parent for this element.
         */
        constructor(group: ಠ_ಠ.clutz.goog.graphics.ext.Group|null);
        /**
         * Redraw the rectangle.  Called when the coordinate system is changed.
         */
        redraw(): void;
    }
}
declare module 'goog:goog.graphics.ext.Rectangle' {
    import alias = ಠ_ಠ.clutz.goog.graphics.ext.Rectangle;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics.ext {
    /**
     * Wrapper for a graphics shape element.
     */
    class Shape extends Shape_Instance {}
    class Shape_Instance extends
        ಠ_ಠ.clutz.goog.graphics.ext.StrokeAndFillElement_Instance {
        /**
         * Wrapper for a graphics shape element.
         * @param group Parent for this element.
         * @param path The path to draw.
         * @param opt_autoSize Optional flag to specify the path should
         * automatically resize to fit the element.  Defaults to false.
         */
        constructor(
            group: ಠ_ಠ.clutz.goog.graphics.ext.Group|null,
            path: ಠ_ಠ.clutz.goog.graphics.ext.Path, opt_autoSize?: boolean);
        checkParentDependent(): boolean;
        /**
         * Get the path drawn by this shape.
         */
        getPath(): ಠ_ಠ.clutz.goog.graphics.Path|null;
        /**
         * Redraw the ellipse.  Called when the coordinate system is changed.
         */
        redraw(): void;
        /**
         * Set the path to draw.
         * @param path The path to draw.
         */
        setPath(path: ಠ_ಠ.clutz.goog.graphics.ext.Path|null): void;
    }
}
declare module 'goog:goog.graphics.ext.Shape' {
    import alias = ಠ_ಠ.clutz.goog.graphics.ext.Shape;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics.ext {
    /**
     * Interface for a graphics element that has a stroke and fill.
     * This is the base interface for ellipse, rectangle and other
     * shape interfaces.
     * You should not construct objects from this constructor. Use a subclass.
     */
    class StrokeAndFillElement extends StrokeAndFillElement_Instance {}
    class StrokeAndFillElement_Instance extends
        ಠ_ಠ.clutz.goog.graphics.ext.Element_Instance {
        /**
         * Interface for a graphics element that has a stroke and fill.
         * This is the base interface for ellipse, rectangle and other
         * shape interfaces.
         * You should not construct objects from this constructor. Use a
         * subclass.
         * @param group Parent for this element.
         * @param wrapper The thin wrapper to wrap.
         */
        constructor(
            group: ಠ_ಠ.clutz.goog.graphics.ext.Group|null,
            wrapper: ಠ_ಠ.clutz.goog.graphics.StrokeAndFillElement|null);
        /**
         * Redraw the rectangle.  Called when the coordinate system is changed.
         */
        redraw(): void;
        /**
         * Sets the fill for this element.
         * @param fill The fill object.
         */
        setFill(fill: ಠ_ಠ.clutz.goog.graphics.Fill|null): void;
        /**
         * Sets the stroke for this element.
         * @param stroke The stroke object.
         */
        setStroke(stroke: ಠ_ಠ.clutz.goog.graphics.Stroke|null): void;
    }
}
declare module 'goog:goog.graphics.ext.StrokeAndFillElement' {
    import alias = ಠ_ಠ.clutz.goog.graphics.ext.StrokeAndFillElement;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics.ext.coordinates {
    /**
     * Returns the value of the given expression in the given context.
     *
     * Should be treated as package scope.
     * @param coord The coordinate to convert.
     * @param size The size of the parent element.
     * @param scale The ratio of pixels to units.
     */
    function computeValue(
        coord: string|number, size: number, scale: number): number;
    /**
     * Converts the given coordinate to a number value in units.
     *
     * Should be treated as package scope.
     * @param coord The coordinate to retrieve the value for.
     * @param forMaximum Whether we are computing the largest value this
     * coordinate would be in a parent of no size.  The container size in this
     * case should be set to the size of the current element.
     * @param containerSize The unit value of the size of the container of this
     * element.  Should be set to the minimum width of this element if
     * forMaximum is true.
     * @param scale The ratio of pixels to units.
     * @param opt_cache Optional (but highly recommend) object to store cached
     * computations in.  The calling class should manage clearing out the cache
     * when the scale or containerSize changes.
     */
    function getValue(
        coord: string|number, forMaximum: boolean|undefined,
        containerSize: number, scale: number,
        opt_cache?: GlobalObject|null): number;
    /**
     * Determines if the given coordinate is special - i.e. not just a number.
     * @param coord The coordinate to test.
     */
    function isSpecial(coord: string|number|null): boolean;
}
declare module 'goog:goog.graphics.ext.coordinates' {
    import alias = ಠ_ಠ.clutz.goog.graphics.ext.coordinates;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.graphics.paths {
    /**
     * Defines an arrow.
     * @param a Point A.
     * @param b Point B.
     * @param aHead The size of the arrow head at point A. 0 omits the head.
     * @param bHead The size of the arrow head at point B. 0 omits the head.
     */
    function createArrow(
        a: ಠ_ಠ.clutz.goog.math.Coordinate|null,
        b: ಠ_ಠ.clutz.goog.math.Coordinate|null, aHead: number|null,
        bHead: number|null): ಠ_ಠ.clutz.goog.graphics.Path;
    /**
     * Defines a regular n-gon by specifing the center, a vertex, and the total
     * number of vertices.
     * @param center The center point.
     * @param vertex The vertex, which implicitly defines a radius as well.
     * @param n The number of vertices.
     */
    function createRegularNGon(
        center: ಠ_ಠ.clutz.goog.math.Coordinate|null,
        vertex: ಠ_ಠ.clutz.goog.math.Coordinate|null,
        n: number): ಠ_ಠ.clutz.goog.graphics.Path;
}
declare module 'goog:goog.graphics.paths' {
    import alias = ಠ_ಠ.clutz.goog.graphics.paths;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.history {
    /**
     * Event object dispatched after the history state has changed.
     */
    class Event extends Event_Instance {}
    class Event_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
        /**
         * Event object dispatched after the history state has changed.
         * @param token The string identifying the new history state.
         * @param isNavigation True if the event was triggered by a browser
         * action, such as forward or back, clicking on a link, editing the URL,
         * or calling {@code window.history.(go|back|forward)}. False if the
         * token has been changed by a {@code setToken} or {@code replaceToken}
         * call.
         */
        constructor(token: string, isNavigation: boolean);
        /**
         * Whether the event was triggered by browser navigation.
         */
        isNavigation: boolean;
        /**
         * The current history state.
         */
        token: string;
    }
}
declare module 'goog:goog.history.Event' {
    import alias = ಠ_ಠ.clutz.goog.history.Event;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.history {
    /**
     * Event types for goog.history.
     */
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        NAVIGATE: EventType,
    };
}
declare module 'goog:goog.history.EventType' {
    import alias = ಠ_ಠ.clutz.goog.history.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.history {
    /**
     * An implementation compatible with goog.History that uses the HTML5
     * history APIs.
     */
    class Html5History extends Html5History_Instance {
        /**
         * Returns whether Html5History is supported.
         * @param opt_win Optional window to check.
         */
        static isSupported(opt_win?: Window|null): boolean;
    }
    class Html5History_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * An implementation compatible with goog.History that uses the HTML5
         * history APIs.
         * @param opt_win The window to listen/dispatch history events on.
         * @param opt_transformer The token transformer that is used to create
         * URL from the token when storing token without using hash fragment.
         */
        constructor(
            opt_win?: Window|null,
            opt_transformer?:
                ಠ_ಠ.clutz.goog.history.Html5History.TokenTransformer|null);
        disposeInternal(): void;
        /**
         * Gets the path prefix.
         */
        getPathPrefix(): string;
        /**
         * Returns the current token.
         */
        getToken(): string;
        /**
         * Replaces the current history state without affecting the rest of the
         * history stack.
         * @param token The history state identifier.
         * @param opt_title Optional title to associate with history entry.
         */
        replaceToken(token: string, opt_title?: string): void;
        /**
         * Starts or stops the History.  When enabled, the History object
         * will immediately fire an event for the current location. The caller
         * can set up event listeners between the call to the constructor and
         * the call to setEnabled.
         * @param enable Whether to enable history.
         */
        setEnabled(enable: boolean): void;
        /**
         * Sets the path prefix to use if storing tokens in the path. The path
         * prefix should start and end with slash.
         * @param pathPrefix Sets the path prefix.
         */
        setPathPrefix(pathPrefix: string): void;
        /**
         * Sets the history state.
         * @param token The history state identifier.
         * @param opt_title Optional title to associate with history entry.
         */
        setToken(token: string, opt_title?: string): void;
        /**
         * Sets whether to use the fragment to store tokens.
         * @param useFragment Whether to use the fragment.
         */
        setUseFragment(useFragment: boolean): void;
    }
}
declare module 'goog:goog.history.Html5History' {
    import alias = ಠ_ಠ.clutz.goog.history.Html5History;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.history.Html5History {
    /**
     * A token transformer that can create a URL from a history
     * token. This is used by {@code goog.history.Html5History} to create
     * URL when storing token without the hash fragment.
     *
     * Given a {@code window.location} object containing the location
     * created by {@code createUrl}, the token transformer allows
     * retrieval of the token back via {@code retrieveToken}.
     */
    interface TokenTransformer {
        /**
         * Creates a URL to be pushed into HTML5 history stack when storing
         * token without using hash fragment.
         * @param token The history token.
         * @param pathPrefix The path prefix to use when storing token in a
         * path; always begin with a slash.
         * @param location The {@code window.location} object. Treat this object
         * as read-only.
         */
        createUrl(token: string, pathPrefix: string, location: Location|null):
            string;
        /**
         * Retrieves a history token given the path prefix and
         * {@code window.location} object.
         * @param pathPrefix The path prefix to use when storing token in a
         * path; always begin with a slash.
         * @param location The {@code window.location} object. Treat this object
         * as read-only.
         */
        retrieveToken(pathPrefix: string, location: Location|null): string;
    }
}
declare module 'goog:goog.history.Html5History.TokenTransformer' {
    import alias = ಠ_ಠ.clutz.goog.history.Html5History.TokenTransformer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.html.CssSpecificity {
    function getSpecificity(selector: string): ಠ_ಠ.clutz.goog.vec.Number;
}
declare module 'goog:goog.html.CssSpecificity' {
    import alias = ಠ_ಠ.clutz.goog.html.CssSpecificity;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.html {
    /**
     * A string that is safe to use in HTML context in DOM APIs and HTML
     * documents.
     *
     * A SafeHtml is a string-like object that carries the security type
     * contract that its value as a string will not cause untrusted script
     * execution when evaluated as HTML in a browser.
     *
     * Values of this type are guaranteed to be safe to use in HTML contexts,
     * such as, assignment to the innerHTML DOM property, or interpolation into
     * a HTML template in HTML PC_DATA context, in the sense that the use will
     * not result in a Cross-Site-Scripting vulnerability.
     *
     * Instances of this type must be created via the factory methods
     * ({@code goog.html.SafeHtml.create}, {@code
     * goog.html.SafeHtml.htmlEscape}), etc and not by invoking its constructor.
     * The constructor intentionally takes no parameters and the type is
     * immutable; hence only a default instance corresponding to the empty
     * string can be obtained via constructor invocation.
     */
    class SafeHtml extends SafeHtml_Instance {
        /**
         * A SafeHtml instance corresponding to the <br> tag.
         */
        static BR: ಠ_ಠ.clutz.goog.html.SafeHtml;
        /**
         * A SafeHtml instance corresponding to the HTML doctype: "<!DOCTYPE
         * html>".
         */
        static DOCTYPE_HTML: ಠ_ಠ.clutz.goog.html.SafeHtml;
        /**
         * A SafeHtml instance corresponding to the empty string.
         */
        static EMPTY: ಠ_ಠ.clutz.goog.html.SafeHtml;
        /**
         * Checks if the user agent supports sandboxed iframes.
         */
        static canUseSandboxIframe(): boolean;
        static combineAttributes(
            fixedAttributes: {
                [key: string]:
                    string | number | ಠ_ಠ.clutz.goog.string.TypedString | null |
                    ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap | undefined
            },
            defaultAttributes: {[key: string]: string}, opt_attributes?: {
                [key: string]:
                    string | number | ಠ_ಠ.clutz.goog.string.TypedString | null |
                    ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap | undefined
            }|null): {
            [key: string]: string | number | ಠ_ಠ.clutz.goog.string.TypedString |
                null | ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap | undefined
        };
        /**
         * Creates a new SafeHtml object by concatenating values.
         * @param var_args Values to concatenate.
         */
        static concat(...var_args: (
            string|number|boolean|ಠ_ಠ.clutz.goog.string.TypedString|
            ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString|
            (string|number|boolean|ಠ_ಠ.clutz.goog.string.TypedString|
             ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString)[]|
            undefined)[]): ಠ_ಠ.clutz.goog.html.SafeHtml;
        /**
         * Creates a new SafeHtml object with known directionality by
         * concatenating the values.
         * @param dir Directionality.
         * @param var_args Elements of array arguments would be processed
         * recursively.
         */
        static concatWithDir(
            dir: ಠ_ಠ.clutz.goog.i18n.bidi.Dir,
            ...var_args:
                (string|number|boolean|ಠ_ಠ.clutz.goog.string.TypedString|
                 ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString|
                 (string|number|boolean|ಠ_ಠ.clutz.goog.string.TypedString|
                  ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString)[]|
                 undefined)[]): ಠ_ಠ.clutz.goog.html.SafeHtml;
        /**
         * Creates a SafeHtml content consisting of a tag with optional
         * attributes and optional content.
         *
         * For convenience tag names and attribute names are accepted as regular
         * strings, instead of goog.string.Const. Nevertheless, you should not
         * pass user-controlled values to these parameters. Note that these
         * parameters are syntactically validated at runtime, and invalid values
         * will result in an exception.
         *
         * Example usage:
         *
         * goog.html.SafeHtml.create('br');
         * goog.html.SafeHtml.create('div', {'class': 'a'});
         * goog.html.SafeHtml.create('p', {}, 'a');
         * goog.html.SafeHtml.create('p', {}, goog.html.SafeHtml.create('br'));
         *
         * goog.html.SafeHtml.create('span', {
         * 'style': {'margin': '0'}
         * });
         *
         * To guarantee SafeHtml's type contract is upheld there are
         * restrictions on attribute values and tag names.
         *
         * - For attributes which contain script code (on*), a goog.string.Const
         * is required.
         * - For attributes which contain style (style), a goog.html.SafeStyle
         * or a goog.html.SafeStyle.PropertyMap is required.
         * - For attributes which are interpreted as URLs (e.g. src, href) a
         * goog.html.SafeUrl, goog.string.Const or string is required. If a
         * string is passed, it will be sanitized with SafeUrl.sanitize().
         * - For tags which can load code or set security relevant page
         * metadata, more specific goog.html.SafeHtml.create*() functions must
         * be used. Tags which are not supported by this function are applet,
         * base, embed, iframe, link, math, object, script, style, svg, and
         * template.
         * @param tagName The name of the tag. Only tag names consisting of
         * [a-zA-Z0-9-] are allowed. Tag names documented above are disallowed.
         * @param opt_attributes Mapping from attribute names to their values.
         * Only attribute names consisting of [a-zA-Z0-9-] are allowed. Value of
         * null or undefined causes the attribute to be omitted.
         * @param opt_content Content to HTML-escape and put inside the tag.
         * This must be empty for void tags like <br>. Array elements are
         * concatenated.
         */
        static create(
            tagName: ಠ_ಠ.clutz.goog.dom.TagName<any>|string, opt_attributes?: {
                [key: string]:
                    string | number | ಠ_ಠ.clutz.goog.string.TypedString | null |
                    ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap | undefined
            }|null,
            opt_content?: string|number|boolean|
            ಠ_ಠ.clutz.goog.string.TypedString|
            ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString|
            (string|number|boolean|ಠ_ಠ.clutz.goog.string.TypedString|
             ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString)[]):
            ಠ_ಠ.clutz.goog.html.SafeHtml;
        /**
         * Creates a SafeHtml representing an iframe tag.
         *
         * This by default restricts the iframe as much as possible by setting
         * the sandbox attribute to the empty string. If the iframe requires
         * less restrictions, set the sandbox attribute as tight as possible,
         * but do not rely on the sandbox as a security feature because it is
         * not supported by older browsers. If a sandbox is essential to
         * security (e.g. for third-party frames), use createSandboxIframe which
         * checks for browser support.
         * @param opt_src The value of the src attribute. If null or undefined
         * src will not be set.
         * @param opt_srcdoc The value of the srcdoc attribute. If null or
         * undefined srcdoc will not be set.
         * @param opt_attributes Mapping from attribute names to their values.
         * Only attribute names consisting of [a-zA-Z0-9-] are allowed. Value of
         * null or undefined causes the attribute to be omitted.
         * @param opt_content Content to HTML-escape and put inside the tag.
         * Array elements are concatenated.
         */
        static createIframe(
            opt_src?: ಠ_ಠ.clutz.goog.html.TrustedResourceUrl|null,
            opt_srcdoc?: ಠ_ಠ.clutz.goog.html.SafeHtml|null, opt_attributes?: {
                [key: string]:
                    string | number | ಠ_ಠ.clutz.goog.string.TypedString | null |
                    ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap | undefined
            }|null,
            opt_content?: string|number|boolean|
            ಠ_ಠ.clutz.goog.string.TypedString|
            ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString|
            (string|number|boolean|ಠ_ಠ.clutz.goog.string.TypedString|
             ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString)[]):
            ಠ_ಠ.clutz.goog.html.SafeHtml;
        /**
         * Creates a SafeHtml representing a meta refresh tag.
         * @param url Where to redirect. If a string is passed, it will be
         * sanitized with SafeUrl.sanitize().
         * @param opt_secs Number of seconds until the page should be reloaded.
         * Will be set to 0 if unspecified.
         */
        static createMetaRefresh(
            url: ಠ_ಠ.clutz.goog.html.SafeUrl|string,
            opt_secs?: number): ಠ_ಠ.clutz.goog.html.SafeHtml;
        /**
         * Package-internal utility method to create SafeHtml instances.
         * @param html The string to initialize the SafeHtml object with.
         * @param dir The directionality of the SafeHtml to be constructed, or
         * null if unknown.
         */
        static createSafeHtmlSecurityPrivateDoNotAccessOrElse(
            html: string, dir: ಠ_ಠ.clutz.goog.i18n.bidi.Dir|null):
            ಠ_ಠ.clutz.goog.html.SafeHtml;
        /**
         * Like create() but does not restrict which tags can be constructed.
         * @param tagName Tag name. Set or validated by caller.
         */
        static createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(
            tagName: string, opt_attributes?: {
                [key: string]:
                    string | number | ಠ_ಠ.clutz.goog.string.TypedString | null |
                    ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap | undefined
            }|null,
            opt_content?: string|number|boolean|
            ಠ_ಠ.clutz.goog.string.TypedString|
            ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString|
            (string|number|boolean|ಠ_ಠ.clutz.goog.string.TypedString|
             ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString)[]):
            ಠ_ಠ.clutz.goog.html.SafeHtml;
        /**
         * Creates a SafeHtml representing a sandboxed iframe tag.
         *
         * The sandbox attribute is enforced in its most restrictive mode, an
         * empty string. Consequently, the security requirements for the src and
         * srcdoc attributes are relaxed compared to SafeHtml.createIframe. This
         * function will throw on browsers that do not support the sandbox
         * attribute, as determined by SafeHtml.canUseSandboxIframe.
         *
         * The SafeHtml returned by this function can trigger downloads with no
         * user interaction on Chrome (though only a few, further attempts are
         * blocked). Firefox and IE will block all downloads from the sandbox.
         * @param opt_src The value of the src attribute. If null or undefined
         * src will not be set.
         * @param opt_srcdoc The value of the srcdoc attribute. If null or
         * undefined srcdoc will not be set. Will not be sanitized.
         * @param opt_attributes Mapping from attribute names to their values.
         * Only attribute names consisting of [a-zA-Z0-9-] are allowed. Value of
         * null or undefined causes the attribute to be omitted.
         * @param opt_content Content to HTML-escape and put inside the tag.
         * Array elements are concatenated.
         */
        static createSandboxIframe(
            opt_src?: string|ಠ_ಠ.clutz.goog.html.SafeUrl, opt_srcdoc?: string,
            opt_attributes?: {
                [key: string]:
                    string | number | ಠ_ಠ.clutz.goog.string.TypedString | null |
                    ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap | undefined
            },
            opt_content?: string|number|boolean|
            ಠ_ಠ.clutz.goog.string.TypedString|
            ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString|
            (string|number|boolean|ಠ_ಠ.clutz.goog.string.TypedString|
             ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString)[]):
            ಠ_ಠ.clutz.goog.html.SafeHtml;
        /**
         * Creates a SafeHtml representing a script tag. Does not allow the
         * language, src, text or type attributes to be set.
         * @param script Content to put inside the tag. Array elements are
         * concatenated.
         * @param opt_attributes Mapping from attribute names to their values.
         * Only attribute names consisting of [a-zA-Z0-9-] are allowed. Value of
         * null or undefined causes the attribute to be omitted.
         */
        static createScript(
            script: ಠ_ಠ.clutz.goog.html.SafeScript|
            ಠ_ಠ.clutz.goog.html.SafeScript[],
            opt_attributes?: {
                [key: string]:
                    string | number | ಠ_ಠ.clutz.goog.string.TypedString | null |
                    ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap | undefined
            }|null): ಠ_ಠ.clutz.goog.html.SafeHtml;
        /**
         * Creates a SafeHtml representing a script tag with the src attribute.
         * @param src The value of the src attribute.
         * @param opt_attributes Mapping from attribute names to their values.
         * Only attribute names consisting of [a-zA-Z0-9-] are allowed. Value of
         * null or undefined causes the attribute to be omitted.
         */
        static createScriptSrc(
            src: ಠ_ಠ.clutz.goog.html.TrustedResourceUrl, opt_attributes?: {
                [key: string]:
                    string | number | ಠ_ಠ.clutz.goog.string.TypedString | null |
                    ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap | undefined
            }|null): ಠ_ಠ.clutz.goog.html.SafeHtml;
        /**
         * Creates a SafeHtml representing a style tag. The type attribute is
         * set to "text/css".
         * @param styleSheet Content to put inside the tag. Array elements are
         * concatenated.
         * @param opt_attributes Mapping from attribute names to their values.
         * Only attribute names consisting of [a-zA-Z0-9-] are allowed. Value of
         * null or undefined causes the attribute to be omitted.
         */
        static createStyle(
            styleSheet: ಠ_ಠ.clutz.goog.html.SafeStyleSheet|
            ಠ_ಠ.clutz.goog.html.SafeStyleSheet[],
            opt_attributes?: {
                [key: string]:
                    string | number | ಠ_ಠ.clutz.goog.string.TypedString | null |
                    ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap | undefined
            }|null): ಠ_ಠ.clutz.goog.html.SafeHtml;
        /**
         * Creates a SafeHtml content with known directionality consisting of a
         * tag with optional attributes and optional content.
         * @param dir Directionality.
         */
        static createWithDir(
            dir: ಠ_ಠ.clutz.goog.i18n.bidi.Dir, tagName: string,
            opt_attributes?: {
                [key: string]:
                    string | number | ಠ_ಠ.clutz.goog.string.TypedString | null |
                    ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap | undefined
            }|null,
            opt_content?: string|number|boolean|
            ಠ_ಠ.clutz.goog.string.TypedString|
            ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString|
            (string|number|boolean|ಠ_ಠ.clutz.goog.string.TypedString|
             ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString)[]):
            ಠ_ಠ.clutz.goog.html.SafeHtml;
        /**
         * Coerces an arbitrary object into a SafeHtml object.
         *
         * If {@code textOrHtml} is already of type {@code goog.html.SafeHtml},
         * the same object is returned. Otherwise, {@code textOrHtml} is coerced
         * to string, and HTML-escaped. If {@code textOrHtml} is of a type that
         * implements
         * {@code goog.i18n.bidi.DirectionalString}, its directionality, if
         * known, is preserved.
         * @param textOrHtml The text or SafeHtml to coerce.
         */
        static from(a: string|number|boolean|
                    ಠ_ಠ.clutz.goog.string.TypedString|
                    ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString):
            ಠ_ಠ.clutz.goog.html.SafeHtml;
        /**
         * Returns HTML-escaped text as a SafeHtml object.
         *
         * If text is of a type that implements
         * {@code goog.i18n.bidi.DirectionalString}, the directionality of the
         * new
         * {@code SafeHtml} object is set to {@code text}'s directionality, if
         * known. Otherwise, the directionality of the resulting SafeHtml is
         * unknown (i.e.,
         * {@code null}).
         * @param textOrHtml The text to escape. If the parameter is of type
         * SafeHtml it is returned directly (no escaping is done).
         */
        static htmlEscape(textOrHtml: string|number|boolean|
                          ಠ_ಠ.clutz.goog.string.TypedString|
                          ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString):
            ಠ_ಠ.clutz.goog.html.SafeHtml;
        /**
         * Returns HTML-escaped text as a SafeHtml object, with newlines changed
         * to &lt;br&gt;.
         * @param textOrHtml The text to escape. If the parameter is of type
         * SafeHtml it is returned directly (no escaping is done).
         */
        static htmlEscapePreservingNewlines(
            textOrHtml: string|number|boolean|
            ಠ_ಠ.clutz.goog.string.TypedString|
            ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString):
            ಠ_ಠ.clutz.goog.html.SafeHtml;
        /**
         * Returns HTML-escaped text as a SafeHtml object, with newlines changed
         * to &lt;br&gt; and escaping whitespace to preserve spatial formatting.
         * Character entity #160 is used to make it safer for XML.
         * @param textOrHtml The text to escape. If the parameter is of type
         * SafeHtml it is returned directly (no escaping is done).
         */
        static htmlEscapePreservingNewlinesAndSpaces(
            textOrHtml: string|number|boolean|
            ಠ_ಠ.clutz.goog.string.TypedString|
            ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString):
            ಠ_ಠ.clutz.goog.html.SafeHtml;
        /**
         * Creates a string with attributes to insert after tagName.
         */
        static stringifyAttributes(tagName: string, opt_attributes?: {
            [key: string]: string | number | ಠ_ಠ.clutz.goog.string.TypedString |
                null | ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap | undefined
        }|null): string;
        /**
         * Performs a runtime check that the provided object is indeed a
         * SafeHtml object, and returns its value.
         * @param safeHtml The object to extract from.
         */
        static unwrap(safeHtml: ಠ_ಠ.clutz.goog.html.SafeHtml): string;
        /**
         * Verifies if the tag name is valid and if it doesn't change the
         * context. E.g. STRONG is fine but SCRIPT throws because it changes
         * context. See goog.html.SafeHtml.create for an explanation of allowed
         * tags.
         */
        static verifyTagName(tagName: string): void;
    }
    class SafeHtml_Instance implements
        ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString,
        ಠ_ಠ.clutz.goog.string.TypedString {
        private noStructuralTyping_: any;
        getDirection(): ಠ_ಠ.clutz.goog.i18n.bidi.Dir|null;
        /**
         * Returns this SafeHtml's value as string.
         *
         * IMPORTANT: In code where it is security relevant that an object's
         * type is indeed {@code SafeHtml}, use {@code
         * goog.html.SafeHtml.unwrap} instead of this method. If in doubt,
         * assume that it's security relevant. In particular, note that
         * goog.html functions which return a goog.html type do not guarantee
         * that the returned instance is of the right type. For example:
         *
         * <pre>
         * var fakeSafeHtml = new String('fake');
         * fakeSafeHtml.__proto__ = goog.html.SafeHtml.prototype;
         * var newSafeHtml = goog.html.SafeHtml.htmlEscape(fakeSafeHtml);
         * // newSafeHtml is just an alias for fakeSafeHtml, it's passed through
         * by
         * // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml
         * // instanceof goog.html.SafeHtml.
         * </pre>
         */
        getTypedStringValue(): string;
        implementsGoogI18nBidiDirectionalString: boolean;
        implementsGoogStringTypedString: boolean;
        /**
         * Returns a debug string-representation of this value.
         *
         * To obtain the actual string value wrapped in a SafeHtml, use
         * {@code goog.html.SafeHtml.unwrap}.
         */
        toString(): any;
    }
}
declare namespace ಠ_ಠ.clutz.goog.html.SafeHtml {
    type AttributeValue = string|number|
                          ಠ_ಠ.clutz.goog.string.TypedString|null|
                          ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap|undefined;
}
declare module 'goog:goog.html.SafeHtml' {
    import alias = ಠ_ಠ.clutz.goog.html.SafeHtml;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.html {
    /**
     * Formatter producing SafeHtml from a plain text format and HTML fragments.
     *
     * Example usage:
     *
     * var formatter = new goog.html.SafeHtmlFormatter();
     * var safeHtml = formatter.format(
     * formatter.startTag('b') +
     * 'User input:' +
     * formatter.endTag('b') +
     * ' ' +
     * formatter.text(userInput));
     *
     * The most common usage is with goog.getMsg:
     *
     * var MSG_USER_INPUT = goog.getMsg(
     * '{$startLink}Learn more{$endLink} about {$userInput}', {
     * 'startLink': formatter.startTag('a', {'href': url}),
     * 'endLink': formatter.endTag('a'),
     * 'userInput': formatter.text(userInput)
     * });
     * var safeHtml = formatter.format(MSG_USER_INPUT);
     *
     * The formatting string should be constant with all variables processed by
     * formatter.text().
     */
    class SafeHtmlFormatter extends SafeHtmlFormatter_Instance {}
    class SafeHtmlFormatter_Instance {
        private noStructuralTyping_: any;
        /**
         * Saves an end tag and returns its marker.
         */
        endTag(tagName: string): string;
        /**
         * Formats a plain text string with markers holding HTML fragments to
         * SafeHtml.
         * @param format Plain text format, will be HTML-escaped.
         */
        format(format: string): ಠ_ಠ.clutz.goog.html.SafeHtml;
        /**
         * Saves SafeHtml and returns its marker.
         */
        safeHtml(safeHtml: ಠ_ಠ.clutz.goog.html.SafeHtml): string;
        /**
         * Saves a start tag and returns its marker.
         * @param opt_attributes Mapping from attribute names to their values.
         * Only attribute names consisting of [a-zA-Z0-9-] are allowed. Value of
         * null or undefined causes the attribute to be omitted.
         */
        startTag(tagName: string, opt_attributes?: {
            [key: string]: string | number | ಠ_ಠ.clutz.goog.string.TypedString |
                null | ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap | undefined
        }|null): string;
        /**
         * Escapes a text, saves it and returns its marker.
         *
         * Wrapping any user input to .text() prevents the attacker with access
         * to the random number generator to duplicate tags used elsewhere in
         * the format.
         */
        text(text: string): string;
    }
}
declare namespace ಠ_ಠ.clutz.goog.html.SafeHtmlFormatter {
    type Replacement = {
        attributes?: string,
        endTag?: string,
        html?: string,
        startTag?: string
    }|null;
}
declare module 'goog:goog.html.SafeHtmlFormatter' {
    import alias = ಠ_ಠ.clutz.goog.html.SafeHtmlFormatter;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.html {
    /**
     * A string-like object which represents JavaScript code and that carries
     * the security type contract that its value, as a string, will not cause
     * execution of unconstrained attacker controlled code (XSS) when evaluated
     * as JavaScript in a browser.
     *
     * Instances of this type must be created via the factory method
     * {@code goog.html.SafeScript.fromConstant} and not by invoking its
     * constructor. The constructor intentionally takes no parameters and the
     * type is immutable; hence only a default instance corresponding to the
     * empty string can be obtained via constructor invocation.
     *
     * A SafeScript's string representation can safely be interpolated as the
     * content of a script element within HTML. The SafeScript string should not
     * be escaped before interpolation.
     *
     * Note that the SafeScript might contain text that is attacker-controlled
     * but that text should have been interpolated with appropriate escaping,
     * sanitization and/or validation into the right location in the script,
     * such that it is highly constrained in its effect (for example, it had to
     * match a set of whitelisted words).
     *
     * A SafeScript can be constructed via security-reviewed unchecked
     * conversions. In this case producers of SafeScript must ensure themselves
     * that the SafeScript does not contain unsafe script. Note in particular
     * that
     * {@code &lt;} is dangerous, even when inside JavaScript strings, and so
     * should always be forbidden or JavaScript escaped in user controlled
     * input. For example, if {@code
     * &lt;/script&gt;&lt;script&gt;evil&lt;/script&gt;"} were interpolated
     * inside a JavaScript string, it would break out of the context of the
     * original script element and {@code evil} would execute. Also note that
     * within an HTML script (raw text) element, HTML character references, such
     * as "&lt;" are not allowed. See
     * http://www.w3.org/TR/html5/scripting-1.html#restrictions-for-contents-of-script-elements.
     */
    class SafeScript extends SafeScript_Instance {
        /**
         * A SafeScript instance corresponding to the empty string.
         */
        static EMPTY: ಠ_ಠ.clutz.goog.html.SafeScript;
        /**
         * Package-internal utility method to create SafeScript instances.
         * @param script The string to initialize the SafeScript object with.
         */
        static createSafeScriptSecurityPrivateDoNotAccessOrElse(script: string):
            ಠ_ಠ.clutz.goog.html.SafeScript;
        /**
         * Creates a SafeScript object from a compile-time constant string.
         * @param script A compile-time-constant string from which to create a
         * SafeScript.
         */
        static fromConstant(script: ಠ_ಠ.clutz.goog.string.Const):
            ಠ_ಠ.clutz.goog.html.SafeScript;
        /**
         * Performs a runtime check that the provided object is indeed a
         * SafeScript object, and returns its value.
         * @param safeScript The object to extract from.
         */
        static unwrap(safeScript: ಠ_ಠ.clutz.goog.html.SafeScript): string;
    }
    class SafeScript_Instance implements ಠ_ಠ.clutz.goog.string.TypedString {
        private noStructuralTyping_: any;
        /**
         * Returns this SafeScript's value as a string.
         *
         * IMPORTANT: In code where it is security relevant that an object's
         * type is indeed {@code SafeScript}, use {@code
         * goog.html.SafeScript.unwrap} instead of this method. If in doubt,
         * assume that it's security relevant. In particular, note that
         * goog.html functions which return a goog.html type do not guarantee
         * the returned instance is of the right type. For example:
         *
         * <pre>
         * var fakeSafeHtml = new String('fake');
         * fakeSafeHtml.__proto__ = goog.html.SafeHtml.prototype;
         * var newSafeHtml = goog.html.SafeHtml.htmlEscape(fakeSafeHtml);
         * // newSafeHtml is just an alias for fakeSafeHtml, it's passed through
         * by
         * // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml
         * // instanceof goog.html.SafeHtml.
         * </pre>
         */
        getTypedStringValue(): string;
        implementsGoogStringTypedString: boolean;
        /**
         * Returns a debug string-representation of this value.
         *
         * To obtain the actual string value wrapped in a SafeScript, use
         * {@code goog.html.SafeScript.unwrap}.
         */
        toString(): any;
    }
}
declare module 'goog:goog.html.SafeScript' {
    import alias = ಠ_ಠ.clutz.goog.html.SafeScript;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.html {
    /**
     * A string-like object which represents a sequence of CSS declarations
     * ({@code propertyName1: propertyvalue1; propertyName2: propertyValue2;
     * ...}) and that carries the security type contract that its value, as a
     * string, will not cause untrusted script execution (XSS) when evaluated as
     * CSS in a browser.
     *
     * Instances of this type must be created via the factory methods
     * ({@code goog.html.SafeStyle.create} or
     * {@code goog.html.SafeStyle.fromConstant}) and not by invoking its
     * constructor. The constructor intentionally takes no parameters and the
     * type is immutable; hence only a default instance corresponding to the
     * empty string can be obtained via constructor invocation.
     *
     * SafeStyle's string representation can safely be:
     * <ul>
     * <li>Interpolated as the content of a *quoted* HTML style attribute.
     * However, the SafeStyle string *must be HTML-attribute-escaped* before
     * interpolation.
     * <li>Interpolated as the content of a {}-wrapped block within a
     * stylesheet.
     * '<' characters in the SafeStyle string *must be CSS-escaped* before
     * interpolation. The SafeStyle string is also guaranteed not to be able
     * to introduce new properties or elide existing ones.
     * <li>Interpolated as the content of a {}-wrapped block within an HTML
     * <style> element. '<' characters in the SafeStyle string
     * * must be CSS-escaped* before interpolation.
     * <li>Assigned to the style property of a DOM node. The SafeStyle string
     * should not be escaped before being assigned to the property.
     * </ul>
     *
     * A SafeStyle may never contain literal angle brackets. Otherwise, it could
     * be unsafe to place a SafeStyle into a &lt;style&gt; tag (where it can't
     * be HTML escaped). For example, if the SafeStyle containing
     * "{@code font: 'foo &lt;style/&gt;&lt;script&gt;evil&lt;/script&gt;'}"
     * were interpolated within a &lt;style&gt; tag, this would then break out
     * of the style context into HTML.
     *
     * A SafeStyle may contain literal single or double quotes, and as such the
     * entire style string must be escaped when used in a style attribute (if
     * this were not the case, the string could contain a matching quote that
     * would escape from the style attribute).
     *
     * Values of this type must be composable, i.e. for any two values
     * {@code style1} and {@code style2} of this type,
     * {@code goog.html.SafeStyle.unwrap(style1) +
     * goog.html.SafeStyle.unwrap(style2)} must itself be a value that satisfies
     * the SafeStyle type constraint. This requirement implies that for any
     * value
     * {@code style} of this type, {@code goog.html.SafeStyle.unwrap(style)}
     * must not end in a "property value" or "property name" context. For
     * example, a value of {@code background:url("} or {@code font-} would not
     * satisfy the SafeStyle contract. This is because concatenating such
     * strings with a second value that itself does not contain unsafe CSS can
     * result in an overall string that does. For example, if {@code
     * javascript:evil())"} is appended to {@code background:url("}, the
     * resulting string may result in the execution of a malicious script.
     *
     * TODO(mlourenco): Consider whether we should implement UTF-8 interchange
     * validity checks and blacklisting of newlines (including Unicode ones) and
     * other whitespace characters (\t, \f). Document here if so and also update
     * SafeStyle.fromConstant().
     *
     * The following example values comply with this type's contract:
     * <ul>
     * <li><pre>width: 1em;</pre>
     * <li><pre>height:1em;</pre>
     * <li><pre>width: 1em;height: 1em;</pre>
     * <li><pre>background:url('http://url');</pre>
     * </ul>
     * In addition, the empty string is safe for use in a CSS attribute.
     *
     * The following example values do NOT comply with this type's contract:
     * <ul>
     * <li><pre>background: red</pre> (missing a trailing semi-colon)
     * <li><pre>background:</pre> (missing a value and a trailing semi-colon)
     * <li><pre>1em</pre> (missing an attribute name, which provides context for
     * the value)
     * </ul>
     */
    class SafeStyle extends SafeStyle_Instance {
        /**
         * A SafeStyle instance corresponding to the empty string.
         */
        static EMPTY: ಠ_ಠ.clutz.goog.html.SafeStyle;
        /**
         * The innocuous string generated by goog.html.SafeStyle.create when
         * passed an unsafe value.
         */
        static INNOCUOUS_STRING: string;
        /**
         * Creates a new SafeStyle object by concatenating the values.
         * @param var_args SafeStyles to concatenate.
         */
        static concat(...var_args: (ಠ_ಠ.clutz.goog.html.SafeStyle|
                                    ಠ_ಠ.clutz.goog.html.SafeStyle[]|
                                    undefined)[]):
            ಠ_ಠ.clutz.goog.html.SafeStyle;
        /**
         * Creates a new SafeStyle object from the properties specified in the
         * map.
         * @param map Mapping of property names to their values, for example
         * {'margin': '1px'}. Names must consist of [-_a-zA-Z0-9]. Values might
         * be strings consisting of [-,.'"%_!# a-zA-Z0-9], where " and ' must be
         * properly balanced. We also allow simple functions like rgb() and
         * url() which sanitizes its contents. Other values must be wrapped in
         * goog.string.Const. URLs might be passed as goog.html.SafeUrl which
         * will be wrapped into url(""). We also support array whose elements
         * are joined with ' '. Null value causes skipping the property.
         */
        static create(map: ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap):
            ಠ_ಠ.clutz.goog.html.SafeStyle;
        /**
         * Package-internal utility method to create SafeStyle instances.
         * @param style The string to initialize the SafeStyle object with.
         */
        static createSafeStyleSecurityPrivateDoNotAccessOrElse(style: string):
            ಠ_ಠ.clutz.goog.html.SafeStyle;
        /**
         * Creates a SafeStyle object from a compile-time constant string.
         *
         * {@code style} should be in the format
         * {@code name: value; [name: value; ...]} and must not have any < or >
         * characters in it. This is so that SafeStyle's contract is preserved,
         * allowing the SafeStyle to correctly be interpreted as a sequence of
         * CSS declarations and without affecting the syntactic structure of any
         * surrounding CSS and HTML.
         *
         * This method performs basic sanity checks on the format of {@code
         * style} but does not constrain the format of {@code name} and {@code
         * value}, except for disallowing tag characters.
         * @param style A compile-time-constant string from which to create a
         * SafeStyle.
         */
        static fromConstant(style: ಠ_ಠ.clutz.goog.string.Const):
            ಠ_ಠ.clutz.goog.html.SafeStyle;
        /**
         * Performs a runtime check that the provided object is indeed a
         * SafeStyle object, and returns its value.
         * @param safeStyle The object to extract from.
         */
        static unwrap(safeStyle: ಠ_ಠ.clutz.goog.html.SafeStyle): string;
    }
    class SafeStyle_Instance implements ಠ_ಠ.clutz.goog.string.TypedString {
        private noStructuralTyping_: any;
        /**
         * Returns this SafeStyle's value as a string.
         *
         * IMPORTANT: In code where it is security relevant that an object's
         * type is indeed {@code SafeStyle}, use {@code
         * goog.html.SafeStyle.unwrap} instead of this method. If in doubt,
         * assume that it's security relevant. In particular, note that
         * goog.html functions which return a goog.html type do not guarantee
         * the returned instance is of the right type. For example:
         *
         * <pre>
         * var fakeSafeHtml = new String('fake');
         * fakeSafeHtml.__proto__ = goog.html.SafeHtml.prototype;
         * var newSafeHtml = goog.html.SafeHtml.htmlEscape(fakeSafeHtml);
         * // newSafeHtml is just an alias for fakeSafeHtml, it's passed through
         * by
         * // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml
         * // instanceof goog.html.SafeHtml.
         * </pre>
         */
        getTypedStringValue(): string;
        implementsGoogStringTypedString: boolean;
        /**
         * Returns a debug string-representation of this value.
         *
         * To obtain the actual string value wrapped in a SafeStyle, use
         * {@code goog.html.SafeStyle.unwrap}.
         */
        toString(): any;
    }
}
declare namespace ಠ_ಠ.clutz.goog.html.SafeStyle {
    type PropertyMap = {
        [key: string]: string | ಠ_ಠ.clutz.goog.string.Const |
            ಠ_ಠ.clutz.goog.html.SafeUrl | null |
            (string|ಠ_ಠ.clutz.goog.string.Const|ಠ_ಠ.clutz.goog.html.SafeUrl)[]
    };
    type PropertyValue =
        string|ಠ_ಠ.clutz.goog.string.Const|ಠ_ಠ.clutz.goog.html.SafeUrl;
}
declare module 'goog:goog.html.SafeStyle' {
    import alias = ಠ_ಠ.clutz.goog.html.SafeStyle;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.html {
    /**
     * A string-like object which represents a CSS style sheet and that carries
     * the security type contract that its value, as a string, will not cause
     * untrusted script execution (XSS) when evaluated as CSS in a browser.
     *
     * Instances of this type must be created via the factory method
     * {@code goog.html.SafeStyleSheet.fromConstant} and not by invoking its
     * constructor. The constructor intentionally takes no parameters and the
     * type is immutable; hence only a default instance corresponding to the
     * empty string can be obtained via constructor invocation.
     *
     * A SafeStyleSheet's string representation can safely be interpolated as
     * the content of a style element within HTML. The SafeStyleSheet string
     * should not be escaped before interpolation.
     *
     * Values of this type must be composable, i.e. for any two values
     * {@code styleSheet1} and {@code styleSheet2} of this type,
     * {@code goog.html.SafeStyleSheet.unwrap(styleSheet1) +
     * goog.html.SafeStyleSheet.unwrap(styleSheet2)} must itself be a value that
     * satisfies the SafeStyleSheet type constraint. This requirement implies
     * that for any value {@code styleSheet} of this type,
     * {@code goog.html.SafeStyleSheet.unwrap(styleSheet1)} must end in
     * "beginning of rule" context.
     *
     * A SafeStyleSheet can be constructed via security-reviewed unchecked
     * conversions. In this case producers of SafeStyleSheet must ensure
     * themselves that the SafeStyleSheet does not contain unsafe script. Note
     * in particular that {@code &lt;} is dangerous, even when inside CSS
     * strings, and so should always be forbidden or CSS-escaped in user
     * controlled input. For example, if
     * {@code &lt;/style&gt;&lt;script&gt;evil&lt;/script&gt;"} were
     * interpolated inside a CSS string, it would break out of the context of
     * the original style element and {@code evil} would execute. Also note that
     * within an HTML style (raw text) element, HTML character references, such
     * as
     * {@code &amp;lt;}, are not allowed. See
     *
     * http://www.w3.org/TR/html5/scripting-1.html#restrictions-for-contents-of-script-elements
     * (similar considerations apply to the style element).
     */
    class SafeStyleSheet extends SafeStyleSheet_Instance {
        /**
         * A SafeStyleSheet instance corresponding to the empty string.
         */
        static EMPTY: ಠ_ಠ.clutz.goog.html.SafeStyleSheet;
        /**
         * Creates a new SafeStyleSheet object by concatenating values.
         * @param var_args Values to concatenate.
         */
        static concat(...var_args: (ಠ_ಠ.clutz.goog.html.SafeStyleSheet|
                                    ಠ_ಠ.clutz.goog.html.SafeStyleSheet[]|
                                    undefined)[]):
            ಠ_ಠ.clutz.goog.html.SafeStyleSheet;
        /**
         * Creates a style sheet consisting of one selector and one style
         * definition. Use {@link goog.html.SafeStyleSheet.concat} to create
         * longer style sheets. This function doesn't support @import, @media
         * and similar constructs.
         * @param selector CSS selector, e.g. '#id' or 'tag .class, #id'. We
         * support CSS3 selectors: https://w3.org/TR/css3-selectors/#selectors.
         * @param style Style definition associated with the selector.
         */
        static createRule(
            selector: string,
            style: ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap|
            ಠ_ಠ.clutz.goog.html.SafeStyle): ಠ_ಠ.clutz.goog.html.SafeStyleSheet;
        /**
         * Package-internal utility method to create SafeStyleSheet instances.
         * @param styleSheet The string to initialize the SafeStyleSheet object
         * with.
         */
        static createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(
            styleSheet: string): ಠ_ಠ.clutz.goog.html.SafeStyleSheet;
        /**
         * Creates a SafeStyleSheet object from a compile-time constant string.
         *
         * {@code styleSheet} must not have any &lt; characters in it, so that
         * the syntactic structure of the surrounding HTML is not affected.
         * @param styleSheet A compile-time-constant string from which to create
         * a SafeStyleSheet.
         */
        static fromConstant(styleSheet: ಠ_ಠ.clutz.goog.string.Const):
            ಠ_ಠ.clutz.goog.html.SafeStyleSheet;
        /**
         * Performs a runtime check that the provided object is indeed a
         * SafeStyleSheet object, and returns its value.
         * @param safeStyleSheet The object to extract from.
         */
        static unwrap(safeStyleSheet: ಠ_ಠ.clutz.goog.html.SafeStyleSheet):
            string;
    }
    class SafeStyleSheet_Instance implements ಠ_ಠ.clutz.goog.string.TypedString {
        private noStructuralTyping_: any;
        /**
         * Returns this SafeStyleSheet's value as a string.
         *
         * IMPORTANT: In code where it is security relevant that an object's
         * type is indeed {@code SafeStyleSheet}, use {@code
         * goog.html.SafeStyleSheet.unwrap} instead of this method. If in doubt,
         * assume that it's security relevant. In particular, note that
         * goog.html functions which return a goog.html type do not guarantee
         * the returned instance is of the right type. For example:
         *
         * <pre>
         * var fakeSafeHtml = new String('fake');
         * fakeSafeHtml.__proto__ = goog.html.SafeHtml.prototype;
         * var newSafeHtml = goog.html.SafeHtml.htmlEscape(fakeSafeHtml);
         * // newSafeHtml is just an alias for fakeSafeHtml, it's passed through
         * by
         * // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml
         * // instanceof goog.html.SafeHtml.
         * </pre>
         */
        getTypedStringValue(): string;
        implementsGoogStringTypedString: boolean;
        /**
         * Returns a debug string-representation of this value.
         *
         * To obtain the actual string value wrapped in a SafeStyleSheet, use
         * {@code goog.html.SafeStyleSheet.unwrap}.
         */
        toString(): any;
    }
}
declare module 'goog:goog.html.SafeStyleSheet' {
    import alias = ಠ_ಠ.clutz.goog.html.SafeStyleSheet;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.html {
    /**
     * A string that is safe to use in URL context in DOM APIs and HTML
     * documents.
     *
     * A SafeUrl is a string-like object that carries the security type contract
     * that its value as a string will not cause untrusted script execution
     * when evaluated as a hyperlink URL in a browser.
     *
     * Values of this type are guaranteed to be safe to use in URL/hyperlink
     * contexts, such as assignment to URL-valued DOM properties, in the sense
     * that the use will not result in a Cross-Site-Scripting vulnerability.
     * Similarly, SafeUrls can be interpolated into the URL context of an HTML
     * template (e.g., inside a href attribute). However, appropriate
     * HTML-escaping must still be applied.
     *
     * Note that, as documented in {@code goog.html.SafeUrl.unwrap}, this type's
     * contract does not guarantee that instances are safe to interpolate into
     * HTML without appropriate escaping.
     *
     * Note also that this type's contract does not imply any guarantees
     * regarding the resource the URL refers to.  In particular, SafeUrls are
     * <b>not</b> safe to use in a context where the referred-to resource is
     * interpreted as trusted code, e.g., as the src of a script tag.
     *
     * Instances of this type must be created via the factory methods
     * ({@code goog.html.SafeUrl.fromConstant}, {@code
     * goog.html.SafeUrl.sanitize}), etc and not by invoking its constructor.
     * The constructor intentionally takes no parameters and the type is
     * immutable; hence only a default instance corresponding to the empty
     * string can be obtained via constructor invocation.
     */
    class SafeUrl extends SafeUrl_Instance {
        /**
         * A SafeUrl corresponding to the special about:blank url.
         */
        static ABOUT_BLANK: ಠ_ಠ.clutz.goog.html.SafeUrl;
        /**
         * The innocuous string generated by goog.html.SafeUrl.sanitize when
         * passed an unsafe URL.
         *
         * about:invalid is registered in
         * http://www.w3.org/TR/css3-values/#about-invalid.
         * http://tools.ietf.org/html/rfc6694#section-2.2.1 permits about URLs
         * to contain a fragment, which is not to be considered when determining
         * if an about URL is well-known.
         *
         * Using about:invalid seems preferable to using a fixed data URL, since
         * browsers might choose to not report CSP violations on it, as
         * legitimate CSS function calls to attr() can result in this URL being
         * produced. It is also a standard URL which matches exactly the
         * semantics we need: "The about:invalid URI references a non-existent
         * document with a generic error condition. It can be used when a URI is
         * necessary, but the default value shouldn't be resolveable as any type
         * of document".
         */
        static INNOCUOUS_STRING: string;
        /**
         * Package-internal utility method to create SafeUrl instances.
         * @param url The string to initialize the SafeUrl object with.
         */
        static createSafeUrlSecurityPrivateDoNotAccessOrElse(url: string):
            ಠ_ಠ.clutz.goog.html.SafeUrl;
        /**
         * Creates a SafeUrl wrapping a blob URL for the given {@code blob}.
         *
         * The blob URL is created with {@code URL.createObjectURL}. If the MIME
         * type for {@code blob} is not of a known safe audio, image or video
         * MIME type, then the SafeUrl will wrap {@link #INNOCUOUS_STRING}.
         */
        static fromBlob(blob: Blob): ಠ_ಠ.clutz.goog.html.SafeUrl;
        /**
         * Creates a SafeUrl object from a compile-time constant string.
         *
         * Compile-time constant strings are inherently program-controlled and
         * hence trusted.
         * @param url A compile-time-constant string from which to create a
         * SafeUrl.
         */
        static fromConstant(url: ಠ_ಠ.clutz.goog.string.Const):
            ಠ_ಠ.clutz.goog.html.SafeUrl;
        /**
         * Creates a SafeUrl wrapping a data: URL, after validating it matches a
         * known-safe audio, image or video MIME type.
         * @param dataUrl A valid base64 data URL with one of the whitelisted
         * audio, image or video MIME types.
         */
        static fromDataUrl(dataUrl: string): ಠ_ಠ.clutz.goog.html.SafeUrl;
        /**
         * Creates a SafeUrl wrapping a tel: URL.
         * @param telUrl A tel URL.
         */
        static fromTelUrl(telUrl: string): ಠ_ಠ.clutz.goog.html.SafeUrl;
        /**
         * Creates a SafeUrl from TrustedResourceUrl. This is safe because
         * TrustedResourceUrl is more tightly restricted than SafeUrl.
         */
        static fromTrustedResourceUrl(
            trustedResourceUrl: ಠ_ಠ.clutz.goog.html.TrustedResourceUrl):
            ಠ_ಠ.clutz.goog.html.SafeUrl;
        /**
         * Creates a SafeUrl object from {@code url}. If {@code url} is a
         * goog.html.SafeUrl then it is simply returned. Otherwise the input
         * string is validated to match a pattern of commonly used safe URLs.
         *
         * {@code url} may be a URL with the http, https, mailto or ftp scheme,
         * or a relative URL (i.e., a URL without a scheme; specifically, a
         * scheme-relative, absolute-path-relative, or path-relative URL).
         * @param url The URL to validate.
         */
        static sanitize(url: string|ಠ_ಠ.clutz.goog.string.TypedString):
            ಠ_ಠ.clutz.goog.html.SafeUrl;
        /**
         * Creates a SafeUrl object from {@code url}. If {@code url} is a
         * goog.html.SafeUrl then it is simply returned. Otherwise the input
         * string is validated to match a pattern of commonly used safe URLs.
         *
         * {@code url} may be a URL with the http, https, mailto or ftp scheme,
         * or a relative URL (i.e., a URL without a scheme; specifically, a
         * scheme-relative, absolute-path-relative, or path-relative URL).
         *
         * This function asserts (using goog.asserts) that the URL matches this
         * pattern. If it does not, in addition to failing the assert, an
         * innocous URL will be returned.
         * @param url The URL to validate.
         */
        static sanitizeAssertUnchanged(url: string|
                                       ಠ_ಠ.clutz.goog.string.TypedString):
            ಠ_ಠ.clutz.goog.html.SafeUrl;
        /**
         * Performs a runtime check that the provided object is indeed a SafeUrl
         * object, and returns its value.
         *
         * IMPORTANT: The guarantees of the SafeUrl type contract only extend to
         * the behavior of  browsers when interpreting URLs. Values of SafeUrl
         * objects MUST be appropriately escaped before embedding in a HTML
         * document. Note that the required escaping is context-sensitive (e.g.
         * a different escaping is required for embedding a URL in a style
         * property within a style attribute, as opposed to embedding in a href
         * attribute).
         * @param safeUrl The object to extract from.
         */
        static unwrap(safeUrl: ಠ_ಠ.clutz.goog.html.SafeUrl): string;
    }
    class SafeUrl_Instance implements
        ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString,
        ಠ_ಠ.clutz.goog.string.TypedString {
        private noStructuralTyping_: any;
        /**
         * Returns this URLs directionality, which is always {@code LTR}.
         */
        getDirection(): ಠ_ಠ.clutz.goog.i18n.bidi.Dir|null;
        /**
         * Returns this SafeUrl's value a string.
         *
         * IMPORTANT: In code where it is security relevant that an object's
         * type is indeed {@code SafeUrl}, use {@code goog.html.SafeUrl.unwrap}
         * instead of this method. If in doubt, assume that it's security
         * relevant. In particular, note that goog.html functions which return a
         * goog.html type do not guarantee that the returned instance is of the
         * right type. For example:
         *
         * <pre>
         * var fakeSafeHtml = new String('fake');
         * fakeSafeHtml.__proto__ = goog.html.SafeHtml.prototype;
         * var newSafeHtml = goog.html.SafeHtml.htmlEscape(fakeSafeHtml);
         * // newSafeHtml is just an alias for fakeSafeHtml, it's passed through
         * by
         * // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml instanceof
         * // goog.html.SafeHtml.
         * </pre>
         *
         * IMPORTANT: The guarantees of the SafeUrl type contract only extend to
         * the behavior of browsers when interpreting URLs. Values of SafeUrl
         * objects MUST be appropriately escaped before embedding in a HTML
         * document. Note that the required escaping is context-sensitive (e.g.
         * a different escaping is required for embedding a URL in a style
         * property within a style attribute, as opposed to embedding in a href
         * attribute).
         */
        getTypedStringValue(): string;
        implementsGoogI18nBidiDirectionalString: boolean;
        implementsGoogStringTypedString: boolean;
        /**
         * Returns a debug string-representation of this value.
         *
         * To obtain the actual string value wrapped in a SafeUrl, use
         * {@code goog.html.SafeUrl.unwrap}.
         */
        toString(): any;
    }
}
declare module 'goog:goog.html.SafeUrl' {
    import alias = ಠ_ಠ.clutz.goog.html.SafeUrl;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.html {
    /**
     * A URL which is under application control and from which script, CSS, and
     * other resources that represent executable code, can be fetched.
     *
     * Given that the URL can only be constructed from strings under application
     * control and is used to load resources, bugs resulting in a malformed URL
     * should not have a security impact and are likely to be easily detectable
     * during testing. Given the wide number of non-RFC compliant URLs in use,
     * stricter validation could prevent some applications from being able to
     * use this type.
     *
     * Instances of this type must be created via the factory method,
     * ({@code fromConstant}, {@code fromConstants}, {@code format} or {@code
     * formatWithParams}), and not by invoking its constructor. The constructor
     * intentionally takes no parameters and the type is immutable; hence only a
     * default instance corresponding to the empty string can be obtained via
     * constructor invocation.
     */
    class TrustedResourceUrl extends TrustedResourceUrl_Instance {
        /**
         * Package-internal utility method to create TrustedResourceUrl
         * instances.
         * @param url The string to initialize the TrustedResourceUrl object
         * with.
         */
        static createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(
            url: string): ಠ_ಠ.clutz.goog.html.TrustedResourceUrl;
        /**
         * Creates a TrustedResourceUrl from a format string and arguments.
         *
         * The arguments for interpolation into the format string map labels to
         * values. Values of type `goog.string.Const` are interpolated without
         * modifcation. Values of other types are cast to string and encoded
         * with encodeURIComponent.
         *
         * `%{<label>}` markers are used in the format string to indicate
         * locations to be interpolated with the valued mapped to the given
         * label. `<label>` must contain only alphanumeric and `_` characters.
         *
         * The format string must start with one of the following:
         * - `https://<origin>/`
         * - `//<origin>/`
         * - `/<pathStart>`
         * - `about:blank`
         *
         * `<origin>` must contain only alphanumeric or any of the following:
         * `-.:[]`.
         * `<pathStart>` is any character except `/` and `\`.
         *
         * Example usage:
         *
         * var url = goog.html.TrustedResourceUrl.format(goog.string.Const.from(
         * 'https://www.google.com/search?q=%{query}'), {'query': searchTerm});
         *
         * var url = goog.html.TrustedResourceUrl.format(goog.string.Const.from(
         * '//www.youtube.com/v/%{videoId}?hl=en&fs=1%{autoplay}'), {
         * 'videoId': videoId,
         * 'autoplay': opt_autoplay ?
         * goog.string.Const.from('&autoplay=1') : goog.string.Const.EMPTY
         * });
         *
         * While this function can be used to create a TrustedResourceUrl from
         * only constants, fromConstant() and fromConstants() are generally
         * preferable for that purpose.
         * @param format The format string.
         * @param args Mapping of labels to values to be interpolated into the
         * format string. goog.string.Const values are interpolated without
         * encoding.
         */
        static format(
            format: ಠ_ಠ.clutz.goog.string.Const,
            args:
                {[key: string]: string | number | ಠ_ಠ.clutz.goog.string.Const}):
            ಠ_ಠ.clutz.goog.html.TrustedResourceUrl;
        /**
         * Formats the URL same as TrustedResourceUrl.format and then adds extra
         * URL parameters.
         *
         * Example usage:
         *
         * // Creates '//www.youtube.com/v/abc?autoplay=1' for videoId='abc' and
         * // opt_autoplay=1. Creates '//www.youtube.com/v/abc' for
         * videoId='abc'
         * // and opt_autoplay=undefined.
         * var url = goog.html.TrustedResourceUrl.formatWithParams(
         * goog.string.Const.from('//www.youtube.com/v/%{videoId}'),
         * {'videoId': videoId},
         * {'autoplay': opt_autoplay});
         * @param format The format string.
         * @param args Mapping of labels to values to be interpolated into the
         * format string. goog.string.Const values are interpolated without
         * encoding.
         * @param params Parameters to add to URL. Parameters with value {@code
         * null} or {@code undefined} are skipped. Both keys and values are
         * encoded. If the value is an array then the same parameter is added
         * for every element in the array. Note that JavaScript doesn't
         * guarantee the order of values in an object which might result in
         * non-deterministic order of the parameters. However, browsers
         * currently preserve the order.
         */
        static formatWithParams(
            format: ಠ_ಠ.clutz.goog.string.Const,
            args:
                {[key: string]: string | number | ಠ_ಠ.clutz.goog.string.Const},
            params: {[key: string]: any}):
            ಠ_ಠ.clutz.goog.html.TrustedResourceUrl;
        /**
         * Creates a TrustedResourceUrl object from a compile-time constant
         * string.
         *
         * Compile-time constant strings are inherently program-controlled and
         * hence trusted.
         * @param url A compile-time-constant string from which to create a
         * TrustedResourceUrl.
         */
        static fromConstant(url: ಠ_ಠ.clutz.goog.string.Const):
            ಠ_ಠ.clutz.goog.html.TrustedResourceUrl;
        /**
         * Creates a TrustedResourceUrl object from a compile-time constant
         * strings.
         *
         * Compile-time constant strings are inherently program-controlled and
         * hence trusted.
         * @param parts Compile-time-constant strings from which to create a
         * TrustedResourceUrl.
         */
        static fromConstants(parts: ಠ_ಠ.clutz.goog.string.Const[]):
            ಠ_ಠ.clutz.goog.html.TrustedResourceUrl;
        /**
         * Performs a runtime check that the provided object is indeed a
         * TrustedResourceUrl object, and returns its value.
         * @param trustedResourceUrl The object to extract from.
         */
        static unwrap(trustedResourceUrl:
                          ಠ_ಠ.clutz.goog.html.TrustedResourceUrl): string;
    }
    class TrustedResourceUrl_Instance implements
        ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString,
        ಠ_ಠ.clutz.goog.string.TypedString {
        private noStructuralTyping_: any;
        /**
         * Creates a new TrustedResourceUrl with params added to URL.
         * @param params Parameters to add to URL. Parameters with value {@code
         * null} or {@code undefined} are skipped. Both keys and values are
         * encoded. If the value is an array then the same parameter is added
         * for every element in the array. Note that JavaScript doesn't
         * guarantee the order of values in an object which might result in
         * non-deterministic order of the parameters. However, browsers
         * currently preserve the order.
         * @param hashParams Hash parameters to add to URL. See goog.html.TrustedResourceUrl.stringifyParams_ for exact format definition.
         */
        cloneWithParams(params: string|{[key: string]: any}|null|undefined, hashParams?:string|{[key: string]: any}|null):
            ಠ_ಠ.clutz.goog.html.TrustedResourceUrl;
        /**
         * Returns this URLs directionality, which is always {@code LTR}.
         */
        getDirection(): ಠ_ಠ.clutz.goog.i18n.bidi.Dir|null;
        /**
         * Returns this TrustedResourceUrl's value as a string.
         *
         * IMPORTANT: In code where it is security relevant that an object's
         * type is indeed {@code TrustedResourceUrl}, use
         * {@code goog.html.TrustedResourceUrl.unwrap} instead of this method.
         * If in doubt, assume that it's security relevant. In particular, note
         * that goog.html functions which return a goog.html type do not
         * guarantee that the returned instance is of the right type. For
         * example:
         *
         * <pre>
         * var fakeSafeHtml = new String('fake');
         * fakeSafeHtml.__proto__ = goog.html.SafeHtml.prototype;
         * var newSafeHtml = goog.html.SafeHtml.htmlEscape(fakeSafeHtml);
         * // newSafeHtml is just an alias for fakeSafeHtml, it's passed through
         * by
         * // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml instanceof
         * // goog.html.SafeHtml.
         * </pre>
         */
        getTypedStringValue(): string;
        implementsGoogI18nBidiDirectionalString: boolean;
        implementsGoogStringTypedString: boolean;
        /**
         * Returns a debug string-representation of this value.
         *
         * To obtain the actual string value wrapped in a TrustedResourceUrl,
         * use
         * {@code goog.html.TrustedResourceUrl.unwrap}.
         */
        toString(): any;
    }
}
declare module 'goog:goog.html.TrustedResourceUrl' {
    import alias = ಠ_ಠ.clutz.goog.html.TrustedResourceUrl;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.html.flash {
    function combineParams(
        defaultParams:
            {[key: string]: string | ಠ_ಠ.clutz.goog.string.TypedString},
        opt_params?: {[key: string]: string}|
        null): ಠ_ಠ.clutz.goog.html.SafeHtml[];
    function createEmbed(src?: any, opt_attributes?: any): any;
    function createObject(
        data?: any, opt_params?: any, opt_attributes?: any): any;
    function createObjectForOldIe(
        movie?: any, opt_params?: any, opt_attributes?: any): any;
    /**
     * Checks that keys are not present as keys in maps.
     * @param keys Keys that must not be present, lower-case.
     * @param opt_attributes Optional attributes passed to create*().
     * @param opt_params Optional params passed to createObject*().
     */
    function verifyKeysNotInMaps(
        keys: string[], opt_attributes?: {
            [key: string]: string | number | ಠ_ಠ.clutz.goog.string.TypedString |
                null | ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap | undefined
        }|null,
        opt_params?: {[key: string]: string}|null): void;
}
declare module 'goog:goog.html.flash' {
    import alias = ಠ_ಠ.clutz.goog.html.flash;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.html.legacyconversions {
    /**
     * Performs an "unchecked conversion" from string to SafeHtml for legacy API
     * purposes.
     *
     * Please read fileoverview documentation before using.
     * @param html A string to be converted to SafeHtml.
     */
    function safeHtmlFromString(html: string): ಠ_ಠ.clutz.goog.html.SafeHtml;
    /**
     * Performs an "unchecked conversion" from string to SafeScript for legacy
     * API purposes.
     *
     * Please read fileoverview documentation before using.
     * @param script A string to be converted to SafeScript.
     */
    function safeScriptFromString(script: string):
        ಠ_ಠ.clutz.goog.html.SafeScript;
    /**
     * Performs an "unchecked conversion" from string to SafeStyle for legacy
     * API purposes.
     *
     * Please read fileoverview documentation before using.
     * @param style A string to be converted to SafeStyle.
     */
    function safeStyleFromString(style: string): ಠ_ಠ.clutz.goog.html.SafeStyle;
    /**
     * Performs an "unchecked conversion" from string to SafeStyleSheet for
     * legacy API purposes.
     *
     * Please read fileoverview documentation before using.
     * @param styleSheet A string to be converted to SafeStyleSheet.
     */
    function safeStyleSheetFromString(styleSheet: string):
        ಠ_ಠ.clutz.goog.html.SafeStyleSheet;
    /**
     * Performs an "unchecked conversion" from string to SafeUrl for legacy API
     * purposes.
     *
     * Please read fileoverview documentation before using.
     * @param url A string to be converted to SafeUrl.
     */
    function safeUrlFromString(url: string): ಠ_ಠ.clutz.goog.html.SafeUrl;
    /**
     * Sets a function that will be called every time a legacy conversion is
     * performed. The function is called with no parameters but it can use
     * goog.debug.getStacktrace to get a stacktrace.
     * @param callback Error callback as defined above.
     */
    function setReportCallback(callback: () => void): void;
    /**
     * Performs an "unchecked conversion" from string to TrustedResourceUrl for
     * legacy API purposes.
     *
     * Please read fileoverview documentation before using.
     * @param url A string to be converted to TrustedResourceUrl.
     */
    function trustedResourceUrlFromString(url: string):
        ಠ_ಠ.clutz.goog.html.TrustedResourceUrl;
}
declare module 'goog:goog.html.legacyconversions' {
    import alias = ಠ_ಠ.clutz.goog.html.legacyconversions;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.html.sanitizer.AttributeSanitizedWhitelist {}
declare module 'goog:goog.html.sanitizer.AttributeSanitizedWhitelist' {
    import alias = ಠ_ಠ.clutz.goog.html.sanitizer.AttributeSanitizedWhitelist;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.html.sanitizer.AttributeWhitelist {}
declare module 'goog:goog.html.sanitizer.AttributeWhitelist' {
    import alias = ಠ_ಠ.clutz.goog.html.sanitizer.AttributeWhitelist;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.html.sanitizer.CssSanitizer {
    /**
     * Converts rules in STYLE tags into style attributes on the tags they apply
     * to. Modifies the provided DOM subtree in-place.
     */
    function inlineStyleRules(element: GlobalElement): void;
    /**
     * Returns an inert DOM tree produced by parsing the provided html using
     * DOMParser. "Inert" here means that merely parsing the string won't
     * execute scripts or load images. If you attach this tree to a non-inert
     * document, it will execute these side effects! In this package we prefer
     * using the TEMPLATE tag over DOMParser to produce inert trees, but at
     * least on Chrome the inert STYLE tag does not have a CSSStyleSheet object
     * attached to it.
     */
    function safeParseHtmlAndGetInertElement(html: string): GlobalElement|null;
    /**
     * Sanitizes an inline style attribute. Short-hand attributes are expanded
     * to their individual elements. Note: The sanitizer does not output vendor
     * prefixed styles.
     * @param cssStyle A CSS style object.
     * @param opt_uriRewriter A URI rewriter that returns a goog.html.SafeUrl.
     */
    function sanitizeInlineStyle(
        cssStyle: CSSStyleDeclaration|null,
        opt_uriRewriter?: (a: string, b: string) =>
            ಠ_ಠ.clutz.goog.html.SafeUrl | null): ಠ_ಠ.clutz.goog.html.SafeStyle;
    /**
     * Sanitizes inline CSS text and returns it as a SafeStyle object. When
     * adequate browser support is not available, such as for IE9 and below, a
     * SafeStyle-wrapped empty string is returned.
     * @param cssText CSS text to be sanitized.
     * @param opt_uriRewriter A URI rewriter that returns a goog.html.SafeUrl.
     */
    function sanitizeInlineStyleString(
        cssText: string,
        opt_uriRewriter?: (a: string, b: string) =>
            ಠ_ಠ.clutz.goog.html.SafeUrl | null): ಠ_ಠ.clutz.goog.html.SafeStyle;
    /**
     * Sanitizes the contents of a STYLE tag.
     * @param textContent The textual content of the STYLE tag.
     * @param opt_containerId The ID of a node that will contain the STYLE tag
     * that includes the sanitized content, to restrict the effects of the rules
     * being sanitized to descendants of this node.
     * @param opt_uriRewriter A URI rewriter that returns a goog.html.SafeUrl.
     */
    function sanitizeStyleSheetString(
        textContent: string, opt_containerId?: string|null,
        opt_uriRewriter?: (a: string, b: string) =>
            ಠ_ಠ.clutz.goog.html.SafeUrl |
            null): ಠ_ಠ.clutz.goog.html.SafeStyleSheet;
}
declare module 'goog:goog.html.sanitizer.CssSanitizer' {
    import alias = ಠ_ಠ.clutz.goog.html.sanitizer.CssSanitizer;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.html.sanitizer {
    /**
     * Creates an HTML sanitizer.
     */
    class HtmlSanitizer extends HtmlSanitizer_Instance {
        /**
         * Sanitizes a HTML string using a sanitizer with default options.
         */
        static sanitize(unsanitizedHtml: string): ಠ_ಠ.clutz.goog.html.SafeHtml;
    }
    class HtmlSanitizer_Instance {
        private noStructuralTyping_: any;
        /**
         * Creates an HTML sanitizer.
         */
        constructor(opt_builder?:
                        ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer.Builder);
        /**
         * Parses the DOM tree of a given HTML string, then walks the tree. For
         * each element, it creates a new sanitized version, applies sanitized
         * attributes, and returns a SafeHtml object representing the sanitized
         * tree.
         */
        sanitize(unsanitizedHtml: string): ಠ_ಠ.clutz.goog.html.SafeHtml;
        /**
         * Parses the DOM tree of a given HTML string, then walks the tree. For
         * each element, it creates a new sanitized version, applies sanitized
         * attributes, and returns a span element containing the sanitized
         * content.
         */
        sanitizeToDomNode(unsanitizedHtml: string): HTMLSpanElement;
    }
}
declare module 'goog:goog.html.sanitizer.HtmlSanitizer' {
    import alias = ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer {
    /**
     * The builder for the HTML Sanitizer. All methods except build return this.
     */
    class Builder extends Builder_Instance {}
    class Builder_Instance {
        private noStructuralTyping_: any;
        /**
         * Adds the original tag name in the data attribute 'original-tag' when
         * unknown tags are sanitized to &lt;span&rt;, so that caller can
         * distinguish them from actual &lt;span&rt; tags.
         */
        addOriginalTagNames():
            ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer.Builder;
        /**
         * Allows inline CSS styles.
         */
        allowCssStyles(): ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer.Builder;
        /**
         * Extends the list of allowed data attributes.
         */
        allowDataAttributes(dataAttributeWhitelist: string[]):
            ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer.Builder;
        /**
         * Allows form tags in the HTML. Without this all form tags and content
         * will be dropped.
         */
        allowFormTag(): ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer.Builder;
        /**
         * Allows STYLE tags. Note that the sanitizer wraps the output of each
         * call to
         * {@link sanitize} with a SPAN tag, give it a random ID unique across
         * multiple calls, and then restrict all CSS rules found inside STYLE
         * tags to only apply to children of the SPAN tag. This means that CSS
         * rules in STYLE tags will only apply to content provided in the same
         * call to {@link sanitize}. This feature is not compatible with {@link
         * inlineStyleRules}.
         */
        allowStyleTag(): ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer.Builder;
        /**
         * Extends the attribute whitelist (Package-internal utility method
         * only).
         * @param attrs The list of attributes to be added to the whitelist.
         */
        alsoAllowAttributesPrivateDoNotAccessOrElse(attrs: (
            string|
            ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizerAttributePolicy)[]):
            ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer.Builder;
        /**
         * Extends the tag whitelist (Package-internal utility method only).
         * @param tags The list of tags to be added to the whitelist.
         */
        alsoAllowTagsPrivateDoNotAccessOrElse(tags: string[]):
            ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer.Builder;
        /**
         * Builds and returns a goog.html.sanitizer.HtmlSanitizer object.
         */
        build(): ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer;
        /**
         * Converts rules in STYLE tags into style attributes on the tags they
         * apply to. This feature is not compatible with {@link
         * withStyleContainer} and {@link allowStyleTag}. This method requires
         * {@link allowCssStyles} (otherwise rules would be deleted after being
         * inlined), and is not compatible with {@link allowStyleTag}.
         */
        inlineStyleRules(): ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer.Builder;
        /**
         * Turns off sanitization of template tag contents and pass them
         * unmodified (Package-internal utility method only).
         */
        keepUnsanitizedTemplateContentsPrivateDoNotAccessOrElse():
            ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer.Builder;
        /**
         * Allows only the provided whitelist of attributes, possibly setting a
         * custom policy for them. The set of tag/attribute combinations need to
         * be a subset of the currently allowed combinations. <p> Note that you
         * cannot define a generic handler for an attribute if only a
         * tag-specific one is present, and vice versa. To configure the
         * sanitizer to accept an attribute only for a specific tag when only a
         * generic handler is whitelisted, use the
         * goog.html.sanitizer.HtmlSanitizerPolicyHints parameter and simply
         * reject the attribute in unwanted tags. <p> Also note that the
         * sanitizer's policy is still called after the provided one, to ensure
         * that supplying misconfigured policy cannot introduce vulnerabilities.
         * To completely override an existing attribute policy or to allow new
         * attributes, see the goog.html.sanitizer.unsafe package.
         * @param attrWhitelist The subset of attributes that the sanitizer will
         * accept. Attributes can come in of two forms: - string: allow all
         * values for this attribute on all tags. -
         * HtmlSanitizerAttributePolicy: allows specifying a policy for a
         * particular tag. The tagName can be "*", which means all tags. If no
         * policy is passed, the default is to allow all values. The tag and
         * attribute names are case-insensitive. Note that the policy for id,
         * URLs, names etc is controlled separately (using withCustom* methods).
         */
        onlyAllowAttributes(attrWhitelist: (
            string|
            ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizerAttributePolicy)[]):
            ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer.Builder;
        /**
         * Allows only the provided whitelist of tags. Tags still need to be in
         * the TagWhitelist to be allowed. <p> SPAN tags are ALWAYS ALLOWED as
         * part of the mechanism required to preserve the HTML tree structure
         * (when removing non-blacklisted tags and non-whitelisted tags).
         */
        onlyAllowTags(tagWhitelist: string[]):
            ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer.Builder;
        /**
         * Sets a custom name policy.
         */
        withCustomNamePolicy(customNamePolicy: ಠ_ಠ.clutz.goog.html.sanitizer
                                 .HtmlSanitizerPolicy):
            ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer.Builder;
        /**
         * Sets a custom network URL policy.
         */
        withCustomNetworkRequestUrlPolicy(
            customNetworkReqUrlPolicy:
                ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizerUrlPolicy):
            ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer.Builder;
        /**
         * Sets a custom token policy.
         */
        withCustomTokenPolicy(customTokenPolicy: ಠ_ಠ.clutz.goog.html.sanitizer
                                  .HtmlSanitizerPolicy):
            ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer.Builder;
        /**
         * Sets a custom non-network URL policy.
         */
        withCustomUrlPolicy(customUrlPolicy: ಠ_ಠ.clutz.goog.html.sanitizer
                                .HtmlSanitizerUrlPolicy):
            ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer.Builder;
        /**
         * Fixes the ID of the style container used for CSS rules found in STYLE
         * tags, and disables automatic wrapping with the container. This allows
         * multiple calls to {@link sanitize} to share STYLE rules. If
         * opt_styleContainer is missing, the sanitizer will stop restricting
         * the scope of CSS rules altogether. Requires {@link allowStyleTag} to
         * be called first.
         * @param opt_styleContainer An optional container ID to restrict the
         * scope of any CSS rule found in STYLE tags.
         */
        withStyleContainer(opt_styleContainer?: string):
            ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer.Builder;
    }
}
declare module 'goog:goog.html.sanitizer.HtmlSanitizer.Builder' {
    import alias = ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer.Builder;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.html.sanitizer {
    /**
     * Type for attribute policy configuration.
     */
    type HtmlSanitizerAttributePolicy = {
        attributeName: string,
        policy: (ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizerPolicy) | null,
        tagName: string
    };
}
declare module 'goog:goog.html.sanitizer.HtmlSanitizerAttributePolicy' {
    import alias = ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizerAttributePolicy;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.html.sanitizer {
    /**
     * Type for a policy function.
     */
    type HtmlSanitizerPolicy =
        (a: string, b?: ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizerPolicyHints,
         c?: ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizerPolicyContext,
         d?: any) => string|null;
}
declare module 'goog:goog.html.sanitizer.HtmlSanitizerPolicy' {
    import alias = ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizerPolicy;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.html.sanitizer {
    /**
     * Type for optional context objects to the policy handler functions.
     */
    type HtmlSanitizerPolicyContext = {cssStyle?: CSSStyleDeclaration | null};
}
declare module 'goog:goog.html.sanitizer.HtmlSanitizerPolicyContext' {
    import alias = ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizerPolicyContext;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.html.sanitizer {
    /**
     * Type for optional hints to policy handler functions.
     */
    type HtmlSanitizerPolicyHints = {
        attributeName?: string,
        cssProperty?: string,
        tagName?: string
    };
}
declare module 'goog:goog.html.sanitizer.HtmlSanitizerPolicyHints' {
    import alias = ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizerPolicyHints;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.html.sanitizer {
    /**
     * Type for a URL policy function.
     */
    type HtmlSanitizerUrlPolicy =
        (a: string,
         b?: ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizerPolicyHints) =>
            ಠ_ಠ.clutz.goog.html.SafeUrl|null;
}
declare module 'goog:goog.html.sanitizer.HtmlSanitizerUrlPolicy' {
    import alias = ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizerUrlPolicy;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.html.sanitizer.TagBlacklist {
    var APPLET: boolean;
    var AUDIO: boolean;
    var BASE: boolean;
    var BGSOUND: boolean;
    var EMBED: boolean;
    var FORM: boolean;
    var IFRAME: boolean;
    var ISINDEX: boolean;
    var KEYGEN: boolean;
    var LAYER: boolean;
    var LINK: boolean;
    var META: boolean;
    var OBJECT: boolean;
    var SCRIPT: boolean;
    var STYLE: boolean;
    var SVG: boolean;
    var TEMPLATE: boolean;
    var VIDEO: boolean;
}
declare module 'goog:goog.html.sanitizer.TagBlacklist' {
    import alias = ಠ_ಠ.clutz.goog.html.sanitizer.TagBlacklist;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.html.sanitizer.TagWhitelist {
    var A: boolean;
    var ABBR: boolean;
    var ACRONYM: boolean;
    var ADDRESS: boolean;
    var AREA: boolean;
    var ARTICLE: boolean;
    var ASIDE: boolean;
    var B: boolean;
    var BDI: boolean;
    var BDO: boolean;
    var BIG: boolean;
    var BLOCKQUOTE: boolean;
    var BR: boolean;
    var BUTTON: boolean;
    var CAPTION: boolean;
    var CENTER: boolean;
    var CITE: boolean;
    var CODE: boolean;
    var COL: boolean;
    var COLGROUP: boolean;
    var DATA: boolean;
    var DATALIST: boolean;
    var DD: boolean;
    var DEL: boolean;
    var DETAILS: boolean;
    var DFN: boolean;
    var DIALOG: boolean;
    var DIR: boolean;
    var DIV: boolean;
    var DL: boolean;
    var DT: boolean;
    var EM: boolean;
    var FIELDSET: boolean;
    var FIGCAPTION: boolean;
    var FIGURE: boolean;
    var FONT: boolean;
    var FOOTER: boolean;
    var FORM: boolean;
    var H1: boolean;
    var H2: boolean;
    var H3: boolean;
    var H4: boolean;
    var H5: boolean;
    var H6: boolean;
    var HEADER: boolean;
    var HGROUP: boolean;
    var HR: boolean;
    var I: boolean;
    var IMG: boolean;
    var INPUT: boolean;
    var INS: boolean;
    var KBD: boolean;
    var LABEL: boolean;
    var LEGEND: boolean;
    var LI: boolean;
    var MAIN: boolean;
    var MAP: boolean;
    var MARK: boolean;
    var MENU: boolean;
    var METER: boolean;
    var NAV: boolean;
    var NOSCRIPT: boolean;
    var OL: boolean;
    var OPTGROUP: boolean;
    var OPTION: boolean;
    var OUTPUT: boolean;
    var P: boolean;
    var PRE: boolean;
    var PROGRESS: boolean;
    var Q: boolean;
    var S: boolean;
    var SAMP: boolean;
    var SECTION: boolean;
    var SELECT: boolean;
    var SMALL: boolean;
    var SOURCE: boolean;
    var SPAN: boolean;
    var STRIKE: boolean;
    var STRONG: boolean;
    var STYLE: boolean;
    var SUB: boolean;
    var SUMMARY: boolean;
    var SUP: boolean;
    var TABLE: boolean;
    var TBODY: boolean;
    var TD: boolean;
    var TEXTAREA: boolean;
    var TFOOT: boolean;
    var TH: boolean;
    var THEAD: boolean;
    var TIME: boolean;
    var TR: boolean;
    var TT: boolean;
    var U: boolean;
    var UL: boolean;
    var VAR: boolean;
    var WBR: boolean;
}
declare module 'goog:goog.html.sanitizer.TagWhitelist' {
    import alias = ಠ_ಠ.clutz.goog.html.sanitizer.TagWhitelist;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.html.sanitizer.noclobber {
    function assertNodeIsElement(node: Node): GlobalElement;
    function elementMatches(element: GlobalElement, selector: string): boolean;
    function getChildNodes(node: Node): NodeList|null;
    function getCssPropertyValue(
        cssStyle: CSSStyleDeclaration, propName: string,
        opt_allowClobbering?: boolean): string;
    function getElementAttribute(
        element: GlobalElement, attrName: string): string;
    function getElementAttributes(element: GlobalElement): NamedNodeMap|null;
    function getElementInnerHTML(element: GlobalElement): string;
    function getElementStyle(element: GlobalElement): CSSStyleDeclaration|null;
    function getElementStyleSheet(element: GlobalElement): CSSStyleSheet|null;
    function getElementsByTagName(
        element: GlobalElement, name: string): GlobalElement[];
    function getNodeName(node: Node): string;
    function getNodeType(node: Node): number;
    function getParentNode(node: Node): Node|null;
    function isNodeElement(node: Node): boolean;
    function setCssProperty(
        cssStyle: CSSStyleDeclaration, propName: string,
        sanitizedValue: string|null, opt_allowClobbering?: boolean): void;
    function setElementAttribute(
        element: GlobalElement, name: string, value: string): void;
}
declare module 'goog:goog.html.sanitizer.noclobber' {
    import alias = ಠ_ಠ.clutz.goog.html.sanitizer.noclobber;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.html.sanitizer.unsafe {
    /**
     * Installs custom attribute policies for the attributes provided in the
     * list. This can be used either on non-whitelisted attributes, effectively
     * extending the attribute whitelist, or on attributes that are whitelisted
     * and already have a policy, to override their policies.
     *
     * IMPORTANT: Uses of this method must be carefully security-reviewed to
     * ensure that the new tags do not introduce untrusted code execution or
     * unsanctioned network activity.
     * @param justification A constant string explaining why the addition of
     * these attributes to the whitelist is safe. May include a security review
     * ticket number.
     * @param builder The builder whose attribute whitelist should be extended.
     * @param attrs A list of attributes whose policy should be overridden.
     * Attributes can come in of two forms: - string: allow all values and just
     * trim whitespaces for this attribute on all tags. -
     * HtmlSanitizerAttributePolicy: allows specifying a policy for a particular
     * tag. The tagName can be '*', which means all tags. If no policy is
     * passed, the default is allow all values and just trim whitespaces. The
     * tag and attribute names are case-insensitive.
     */
    function alsoAllowAttributes(
        justification: ಠ_ಠ.clutz.goog.string.Const,
        builder: ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer.Builder,
        attrs: (string|
                ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizerAttributePolicy)[]):
        ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer.Builder;
    /**
     * Extends the tag whitelist with the list of tags provided.
     *
     * IMPORTANT: Uses of this method must be carefully security-reviewed to
     * ensure that the new tags do not introduce untrusted code execution or
     * unsanctioned network activity.
     * @param justification A constant string explaining why the addition of
     * these tags to the whitelist is safe. May include a security review ticket
     * number.
     * @param builder The builder whose tag whitelist should be extended.
     * @param tags A list of additional tags to allow through the sanitizer.
     * Note that if the tag is also present in the blacklist, its addition to
     * the whitelist has no effect. The tag names are case-insensitive.
     */
    function alsoAllowTags(
        justification: ಠ_ಠ.clutz.goog.string.Const,
        builder: ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer.Builder,
        tags: string[]): ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer.Builder;
    /**
     * Turns off sanitization of TEMPLATE tag descendants. The output is still
     * safe to consume as a whole, but clients need to handle the contents of
     * TEMPLATE nodes carefully, hence its definition in the unsafe package.
     *
     * Note that this only applies to descendants of unsanitized template tags,
     * not to the tag itself, which must be manually added to the whitelist and
     * removed from the blacklist.
     *
     * IMPORTANT: Uses of this method must be carefully security-reviewed to
     * ensure that the new tags do not introduce untrusted code execution or
     * unsanctioned network activity.
     * @param justification A constant string explaining why the templates
     * should not be sanitized, and why this is safe. May include a security
     * review ticket number.
     * @param builder The builder whose template tag descendants should not be
     * sanitized.
     */
    function keepUnsanitizedTemplateContents(
        justification: ಠ_ಠ.clutz.goog.string.Const,
        builder: ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer.Builder):
        ಠ_ಠ.clutz.goog.html.sanitizer.HtmlSanitizer.Builder;
}
declare module 'goog:goog.html.sanitizer.unsafe' {
    import alias = ಠ_ಠ.clutz.goog.html.sanitizer.unsafe;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.html.silverlight {
    /**
     * Creates a SafeHtml representing an object tag, for loading Silverlight
     * files.
     *
     * The following attributes are set to these fixed values:
     * - data: data:application/x-silverlight-2,
     * - type: application/x-silverlight-2
     * - typemustmatch: "" (the empty string, meaning true for a boolean
     * attribute)
     * @param source The value of the source param.
     * @param opt_params Mapping used to generate child param tags. Each tag has
     * a name and value attribute, as defined in mapping. Only names consisting
     * of [a-zA-Z0-9-] are allowed. Value of null or undefined causes the param
     * tag to be omitted.
     * @param opt_attributes Mapping from other attribute names to their values.
     * Only attribute names consisting of [a-zA-Z0-9-] are allowed. Value of
     * null or undefined causes the attribute to be omitted.
     */
    function createObject(
        source: ಠ_ಠ.clutz.goog.html.TrustedResourceUrl,
        opt_params?: {[key: string]: string}|null, opt_attributes?: {
            [key: string]: string | number | ಠ_ಠ.clutz.goog.string.TypedString |
                null | ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap | undefined
        }|null): ಠ_ಠ.clutz.goog.html.SafeHtml;
}
declare module 'goog:goog.html.silverlight' {
    import alias = ಠ_ಠ.clutz.goog.html.silverlight;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.html.textExtractor {
    /**
     * Safely extracts text from an untrusted HTML string using the
     * HtmlSanitizer. Compared to goog.html.utils.stripHtmlTags, it tries to be
     * smarter about printing newlines between blocks and leave out textual
     * content that would not be displayed to the user (such as SCRIPT and STYLE
     * tags).
     * @param html The untrusted HTML string.
     */
    function extractTextContent(html: string): string;
    /**
     * Whether the browser supports the text extractor. The extractor depends on
     * the HTML Sanitizer, which only supports IE starting from version 10.
     * Visible for testing.
     */
    function isSupported(): boolean;
}
declare module 'goog:goog.html.textExtractor' {
    import alias = ಠ_ಠ.clutz.goog.html.textExtractor;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.html.uncheckedconversions {
    /**
     * Performs an "unchecked conversion" to SafeHtml from a plain string that
     * is known to satisfy the SafeHtml type contract.
     *
     * IMPORTANT: Uses of this method must be carefully security-reviewed to
     * ensure that the value of {@code html} satisfies the SafeHtml type
     * contract in all possible program states.
     * @param justification A constant string explaining why this use of this
     * method is safe. May include a security review ticket number.
     * @param html A string that is claimed to adhere to the SafeHtml contract.
     * @param opt_dir The optional directionality of the SafeHtml to be
     * constructed. A null or undefined value signifies an unknown
     * directionality.
     */
    function safeHtmlFromStringKnownToSatisfyTypeContract(
        justification: ಠ_ಠ.clutz.goog.string.Const, html: string,
        opt_dir?: ಠ_ಠ.clutz.goog.i18n.bidi.Dir|
        null): ಠ_ಠ.clutz.goog.html.SafeHtml;
    /**
     * Performs an "unchecked conversion" to SafeScript from a plain string that
     * is known to satisfy the SafeScript type contract.
     *
     * IMPORTANT: Uses of this method must be carefully security-reviewed to
     * ensure that the value of {@code script} satisfies the SafeScript type
     * contract in all possible program states.
     * @param justification A constant string explaining why this use of this
     * method is safe. May include a security review ticket number.
     * @param script The string to wrap as a SafeScript.
     */
    function safeScriptFromStringKnownToSatisfyTypeContract(
        justification: ಠ_ಠ.clutz.goog.string.Const,
        script: string): ಠ_ಠ.clutz.goog.html.SafeScript;
    /**
     * Performs an "unchecked conversion" to SafeStyle from a plain string that
     * is known to satisfy the SafeStyle type contract.
     *
     * IMPORTANT: Uses of this method must be carefully security-reviewed to
     * ensure that the value of {@code style} satisfies the SafeStyle type
     * contract in all possible program states.
     * @param justification A constant string explaining why this use of this
     * method is safe. May include a security review ticket number.
     * @param style The string to wrap as a SafeStyle.
     */
    function safeStyleFromStringKnownToSatisfyTypeContract(
        justification: ಠ_ಠ.clutz.goog.string.Const,
        style: string): ಠ_ಠ.clutz.goog.html.SafeStyle;
    /**
     * Performs an "unchecked conversion" to SafeStyleSheet from a plain string
     * that is known to satisfy the SafeStyleSheet type contract.
     *
     * IMPORTANT: Uses of this method must be carefully security-reviewed to
     * ensure that the value of {@code styleSheet} satisfies the SafeStyleSheet
     * type contract in all possible program states.
     * @param justification A constant string explaining why this use of this
     * method is safe. May include a security review ticket number.
     * @param styleSheet The string to wrap as a SafeStyleSheet.
     */
    function safeStyleSheetFromStringKnownToSatisfyTypeContract(
        justification: ಠ_ಠ.clutz.goog.string.Const,
        styleSheet: string): ಠ_ಠ.clutz.goog.html.SafeStyleSheet;
    /**
     * Performs an "unchecked conversion" to SafeUrl from a plain string that is
     * known to satisfy the SafeUrl type contract.
     *
     * IMPORTANT: Uses of this method must be carefully security-reviewed to
     * ensure that the value of {@code url} satisfies the SafeUrl type contract
     * in all possible program states.
     * @param justification A constant string explaining why this use of this
     * method is safe. May include a security review ticket number.
     * @param url The string to wrap as a SafeUrl.
     */
    function safeUrlFromStringKnownToSatisfyTypeContract(
        justification: ಠ_ಠ.clutz.goog.string.Const,
        url: string): ಠ_ಠ.clutz.goog.html.SafeUrl;
    /**
     * Performs an "unchecked conversion" to TrustedResourceUrl from a plain
     * string that is known to satisfy the TrustedResourceUrl type contract.
     *
     * IMPORTANT: Uses of this method must be carefully security-reviewed to
     * ensure that the value of {@code url} satisfies the TrustedResourceUrl
     * type contract in all possible program states.
     * @param justification A constant string explaining why this use of this
     * method is safe. May include a security review ticket number.
     * @param url The string to wrap as a TrustedResourceUrl.
     */
    function trustedResourceUrlFromStringKnownToSatisfyTypeContract(
        justification: ಠ_ಠ.clutz.goog.string.Const,
        url: string): ಠ_ಠ.clutz.goog.html.TrustedResourceUrl;
}
declare module 'goog:goog.html.uncheckedconversions' {
    import alias = ಠ_ಠ.clutz.goog.html.uncheckedconversions;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.html.utils {
    /**
     * Extracts plain text from HTML.
     *
     * This behaves similarly to extracting textContent from a hypothetical DOM
     * element containing the specified HTML.  Block-level elements such as div
     * are surrounded with whitespace, but inline elements are not.  Span is
     * treated as a block level element because it is often used as a container.
     * Breaking spaces are compressed and trimmed.
     * @param value The input HTML to have tags removed.
     */
    function stripHtmlTags(value: string): string;
}
declare module 'goog:goog.html.utils' {
    import alias = ಠ_ಠ.clutz.goog.html.utils;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
    /**
     * Utility class for formatting text for display in a potentially
     * opposite-directionality context without garbling. Provides the following
     * functionality:
     *
     * 1. BiDi Wrapping
     * When text in one language is mixed into a document in another, opposite-
     * directionality language, e.g. when an English business name is embedded
     * in a Hebrew web page, both the inserted string and the text following it
     * may be displayed incorrectly unless the inserted string is explicitly
     * separated from the surrounding text in a "wrapper" that declares its
     * directionality at the start and then resets it back at the end. This
     * wrapping can be done in HTML mark-up (e.g. a 'span dir="rtl"' tag) or -
     * only in contexts where mark-up can not be used - in Unicode BiDi
     * formatting codes (LRE|RLE and PDF). Providing such wrapping services is
     * the basic purpose of the BiDi formatter.
     *
     * 2. Directionality estimation
     * How does one know whether a string about to be inserted into surrounding
     * text has the same directionality? Well, in many cases, one knows that
     * this must be the case when writing the code doing the insertion, e.g.
     * when a localized message is inserted into a localized page. In such cases
     * there is no need to involve the BiDi formatter at all. In the remaining
     * cases, e.g. when the string is user-entered or comes from a database, the
     * language of the string (and thus its directionality) is not known a
     * priori, and must be estimated at run-time. The BiDi formatter does this
     * automatically.
     *
     * 3. Escaping
     * When wrapping plain text - i.e. text that is not already HTML or HTML-
     * escaped - in HTML mark-up, the text must first be HTML-escaped to prevent
     * XSS attacks and other nasty business. This of course is always true, but
     * the escaping can not be done after the string has already been wrapped in
     * mark-up, so the BiDi formatter also serves as a last chance and includes
     * escaping services.
     *
     * Thus, in a single call, the formatter will escape the input string as
     * specified, determine its directionality, and wrap it as necessary. It is
     * then up to the caller to insert the return value in the output.
     *
     * See http://wiki/Main/TemplatesAndBiDi for more information.
     */
    class BidiFormatter extends BidiFormatter_Instance {}
    class BidiFormatter_Instance {
        private noStructuralTyping_: any;
        /**
         * Utility class for formatting text for display in a potentially
         * opposite-directionality context without garbling. Provides the
         * following functionality:
         *
         * 1. BiDi Wrapping
         * When text in one language is mixed into a document in another,
         * opposite- directionality language, e.g. when an English business name
         * is embedded in a Hebrew web page, both the inserted string and the
         * text following it may be displayed incorrectly unless the inserted
         * string is explicitly separated from the surrounding text in a
         * "wrapper" that declares its directionality at the start and then
         * resets it back at the end. This wrapping can be done in HTML mark-up
         * (e.g. a 'span dir="rtl"' tag) or - only in contexts where mark-up can
         * not be used - in Unicode BiDi formatting codes (LRE|RLE and PDF).
         * Providing such wrapping services is the basic purpose of the BiDi
         * formatter.
         *
         * 2. Directionality estimation
         * How does one know whether a string about to be inserted into
         * surrounding text has the same directionality? Well, in many cases,
         * one knows that this must be the case when writing the code doing the
         * insertion, e.g. when a localized message is inserted into a localized
         * page. In such cases there is no need to involve the BiDi formatter at
         * all. In the remaining cases, e.g. when the string is user-entered or
         * comes from a database, the language of the string (and thus its
         * directionality) is not known a priori, and must be estimated at
         * run-time. The BiDi formatter does this automatically.
         *
         * 3. Escaping
         * When wrapping plain text - i.e. text that is not already HTML or
         * HTML- escaped - in HTML mark-up, the text must first be HTML-escaped
         * to prevent XSS attacks and other nasty business. This of course is
         * always true, but the escaping can not be done after the string has
         * already been wrapped in mark-up, so the BiDi formatter also serves as
         * a last chance and includes escaping services.
         *
         * Thus, in a single call, the formatter will escape the input string as
         * specified, determine its directionality, and wrap it as necessary. It
         * is then up to the caller to insert the return value in the output.
         *
         * See http://wiki/Main/TemplatesAndBiDi for more information.
         * @param contextDir The context directionality, in one of the following
         * formats: 1. A goog.i18n.bidi.Dir constant. NEUTRAL is treated the
         * same as null, i.e. unknown, for backward compatibility with legacy
         * calls. 2. A number (positive = LTR, negative = RTL, 0 = unknown). 3.
         * A boolean (true = RTL, false = LTR). 4. A null for unknown
         * directionality.
         * @param opt_alwaysSpan Whether {@link #spanWrap} should always use a
         * 'span' tag, even when the input directionality is neutral or matches
         * the context, so that the DOM structure of the output does not depend
         * on the combination of directionalities. Default: false.
         */
        constructor(contextDir: number|boolean|null, opt_alwaysSpan?: boolean);
        /**
         * Returns 'dir="ltr"' or 'dir="rtl"', depending on {@code str}'s
         * estimated directionality, if it is not the same as the context
         * directionality. Otherwise, returns the empty string.
         * @param str Text whose directionality is to be estimated.
         * @param opt_isHtml Whether {@code str} is HTML / HTML-escaped.
         * Default: false.
         */
        dirAttr(str: string, opt_isHtml?: boolean): string;
        /**
         * Returns "rtl" if {@code str}'s estimated directionality is RTL, and
         * "ltr" if it is LTR. In case it's NEUTRAL, returns "rtl" if the
         * context directionality is RTL, and "ltr" otherwise. Needed for GXP,
         * which can't handle dirAttr. Example use case: &lt;td
         * expr:dir='bidiFormatter.dirAttrValue(foo)'&gt; &lt;gxp:eval
         * expr='foo'&gt; &lt;/td&gt;
         * @param str Text whose directionality is to be estimated.
         * @param opt_isHtml Whether {@code str} is HTML / HTML-escaped.
         * Default: false.
         */
        dirAttrValue(str: string, opt_isHtml?: boolean): string;
        /**
         * Returns 'left' for RTL context directionality. Otherwise (LTR or
         * neutral / unknown context directionality) returns 'right'.
         */
        endEdge(): string;
        /**
         * Returns the directionality of input argument {@code str}.
         * Identical to {@link goog.i18n.bidi.estimateDirection}.
         * @param str The input text.
         * @param opt_isHtml Whether {@code str} is HTML / HTML-escaped.
         * Default: false.
         */
        estimateDirection(a: string, b?: boolean): ಠ_ಠ.clutz.goog.i18n.bidi.Dir;
        getAlwaysSpan(): boolean;
        getContextDir(): ಠ_ಠ.clutz.goog.i18n.bidi.Dir|null;
        /**
         * Returns 'dir="ltr"' or 'dir="rtl"', depending on the given
         * directionality, if it is not the same as the context directionality.
         * Otherwise, returns the empty string.
         * @param dir A directionality.
         */
        knownDirAttr(dir: ಠ_ಠ.clutz.goog.i18n.bidi.Dir): string;
        /**
         * Returns "rtl" if the given directionality is RTL, and "ltr" if it is
         * LTR. In case it's NEUTRAL, returns "rtl" if the context
         * directionality is RTL, and "ltr" otherwise.
         * @param dir A directionality.
         */
        knownDirAttrValue(dir: ಠ_ಠ.clutz.goog.i18n.bidi.Dir): string;
        /**
         * Returns the Unicode BiDi mark matching the context directionality
         * (LRM for LTR context directionality, RLM for RTL context
         * directionality), or the empty string for neutral / unknown context
         * directionality.
         */
        mark(): string;
        /**
         * Returns a Unicode BiDi mark matching the context directionality (LRM
         * or RLM) if the directionality or the exit directionality of {@code
         * str} are opposite to the context directionality. Otherwise returns
         * the empty string.
         * @param str The input text.
         * @param opt_isHtml Whether {@code str} is HTML / HTML-escaped.
         * Default: false.
         */
        markAfter(str: string, opt_isHtml?: boolean): string;
        /**
         * Returns a Unicode BiDi mark matching the context directionality (LRM
         * or RLM) if the given directionality or the exit directionality of
         * {@code str} are opposite to the context directionality. Otherwise
         * returns the empty string.
         * @param dir {@code str}'s overall directionality, or null if unknown
         * and needs to be estimated.
         * @param str The input text.
         * @param opt_isHtml Whether {@code str} is HTML / HTML-escaped.
         * Default: false.
         */
        markAfterKnownDir(
            dir: ಠ_ಠ.clutz.goog.i18n.bidi.Dir|null, str: string,
            opt_isHtml?: boolean): string;
        setAlwaysSpan(alwaysSpan: boolean): void;
        setContextDir(contextDir: number|boolean|null): void;
        /**
         * Formats a string of unknown directionality for use in HTML output of
         * the context directionality, so an opposite-directionality string is
         * neither garbled nor garbles what follows it. The algorithm: estimates
         * the directionality of input argument {@code html}. In case its
         * directionality doesn't match the context directionality, wraps it
         * with a 'span' tag and adds a "dir" attribute (either 'dir="rtl"' or
         * 'dir="ltr"'). If setAlwaysSpan(true) was used, the input is always
         * wrapped with 'span', skipping just the dir attribute when it's not
         * needed.
         *
         * If {@code opt_dirReset}, and if the overall directionality or the
         * exit directionality of {@code str} are opposite to the context
         * directionality, a trailing unicode BiDi mark matching the context
         * directionality is appened (LRM or RLM).
         * @param html The input HTML.
         * @param opt_dirReset Whether to append a trailing unicode bidi mark
         * matching the context directionality, when needed, to prevent the
         * possible garbling of whatever may follow {@code html}. Default: true.
         */
        spanWrapSafeHtml(
            html: ಠ_ಠ.clutz.goog.html.SafeHtml,
            opt_dirReset?: boolean): ಠ_ಠ.clutz.goog.html.SafeHtml;
        /**
         * Formats a string of given directionality for use in HTML output of
         * the context directionality, so an opposite-directionality string is
         * neither garbled nor garbles what follows it. The algorithm: If {@code
         * dir} doesn't match the context directionality, wraps
         * {@code html} with a 'span' tag and adds a "dir" attribute (either
         * 'dir="rtl"' or 'dir="ltr"'). If setAlwaysSpan(true) was used, the
         * input is always wrapped with 'span', skipping just the dir attribute
         * when it's not needed.
         *
         * If {@code opt_dirReset}, and if {@code dir} or the exit
         * directionality of
         * {@code html} are opposite to the context directionality, a trailing
         * unicode BiDi mark matching the context directionality is appened (LRM
         * or RLM).
         * @param dir {@code html}'s overall directionality, or null if unknown
         * and needs to be estimated.
         * @param html The input HTML.
         * @param opt_dirReset Whether to append a trailing unicode bidi mark
         * matching the context directionality, when needed, to prevent the
         * possible garbling of whatever may follow {@code html}. Default: true.
         */
        spanWrapSafeHtmlWithKnownDir(
            dir: ಠ_ಠ.clutz.goog.i18n.bidi.Dir|null,
            html: ಠ_ಠ.clutz.goog.html.SafeHtml,
            opt_dirReset?: boolean): ಠ_ಠ.clutz.goog.html.SafeHtml;
        /**
         * Returns 'right' for RTL context directionality. Otherwise (LTR or
         * neutral / unknown context directionality) returns 'left'.
         */
        startEdge(): string;
        /**
         * Formats a string of unknown directionality for use in plain-text
         * output of the context directionality, so an opposite-directionality
         * string is neither garbled nor garbles what follows it. As opposed to
         * {@link #spanWrap}, this makes use of unicode BiDi formatting
         * characters. In HTML, its *only* valid use is inside of elements that
         * do not allow mark-up, e.g. an 'option' tag. The algorithm: estimates
         * the directionality of input argument {@code str}. In case it doesn't
         * match  the context directionality, wraps it with Unicode BiDi
         * formatting characters: RLE{@code str}PDF for RTL text, and LRE{@code
         * str}PDF for LTR text.
         *
         * If {@code opt_dirReset}, and if the overall directionality or the
         * exit directionality of {@code str} are opposite to the context
         * directionality, a trailing unicode BiDi mark matching the context
         * directionality is appended (LRM or RLM).
         *
         * Does *not* do HTML-escaping regardless of the value of {@code
         * opt_isHtml}. The return value can be HTML-escaped as necessary.
         * @param str The input text.
         * @param opt_isHtml Whether {@code str} is HTML / HTML-escaped.
         * Default: false.
         * @param opt_dirReset Whether to append a trailing unicode bidi mark
         * matching the context directionality, when needed, to prevent the
         * possible garbling of whatever may follow {@code str}. Default: true.
         */
        unicodeWrap(str: string, opt_isHtml?: boolean, opt_dirReset?: boolean):
            string;
        /**
         * Formats a string of given directionality for use in plain-text output
         * of the context directionality, so an opposite-directionality string
         * is neither garbled nor garbles what follows it. As opposed to {@link
         * #spanWrapWithKnownDir}, makes use of unicode BiDi formatting
         * characters. In HTML, its *only* valid use is inside of elements that
         * do not allow mark-up, e.g. an 'option' tag. The algorithm: If {@code
         * dir} doesn't match the context directionality, wraps
         * {@code str} with Unicode BiDi formatting characters: RLE{@code
         * str}PDF for RTL text, and LRE{@code str}PDF for LTR text.
         *
         * If {@code opt_dirReset}, and if the overall directionality or the
         * exit directionality of {@code str} are opposite to the context
         * directionality, a trailing unicode BiDi mark matching the context
         * directionality is appended (LRM or RLM).
         *
         * Does *not* do HTML-escaping regardless of the value of {@code
         * opt_isHtml}. The return value can be HTML-escaped as necessary.
         * @param dir {@code str}'s overall directionality, or null if unknown
         * and needs to be estimated.
         * @param str The input text.
         * @param opt_isHtml Whether {@code str} is HTML / HTML-escaped.
         * Default: false.
         * @param opt_dirReset Whether to append a trailing unicode bidi mark
         * matching the context directionality, when needed, to prevent the
         * possible garbling of whatever may follow {@code str}. Default: true.
         */
        unicodeWrapWithKnownDir(
            dir: ಠ_ಠ.clutz.goog.i18n.bidi.Dir|null, str: string,
            opt_isHtml?: boolean, opt_dirReset?: boolean): string;
    }
}
declare module 'goog:goog.i18n.BidiFormatter' {
    import alias = ಠ_ಠ.clutz.goog.i18n.BidiFormatter;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
    /**
     * Class to decompress base88 compressed character list.
     */
    class CharListDecompressor extends CharListDecompressor_Instance {}
    class CharListDecompressor_Instance {
        private noStructuralTyping_: any;
        /**
         * Gets the list of characters specified in the given string by base 88
         * scheme.
         * @param str The string encoding character list.
         */
        toCharList(str: string): string[];
    }
}
declare module 'goog:goog.i18n.CharListDecompressor' {
    import alias = ಠ_ಠ.clutz.goog.i18n.CharListDecompressor;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
    /**
     * Object holding two level character organization and character listing.
     */
    class CharPickerData extends CharPickerData_Instance {
        /**
         * List of characters in base88 encoding scheme. Each base88 encoded
         * charater string represents corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}. Encoding
         * scheme is described in {@code goog.i18n.CharListDecompressor}.
         */
        static CHARLIST_OF_AFRICAN_SCRIPTS: string[];
        /**
         * List of characters in base88 encoding scheme. Each base88 encoded
         * charater string represents corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}. Encoding
         * scheme is described in {@code goog.i18n.CharListDecompressor}.
         */
        static CHARLIST_OF_AMERICAN_SCRIPTS: string[];
        /**
         * List of characters in base88 encoding scheme. Each base88 encoded
         * charater string represents corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}. Encoding
         * scheme is described in {@code goog.i18n.CharListDecompressor}.
         */
        static CHARLIST_OF_EMOJI: string[];
        /**
         * List of characters in base88 encoding scheme. Each base88 encoded
         * charater string represents corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}. Encoding
         * scheme is described in {@code goog.i18n.CharListDecompressor}.
         */
        static CHARLIST_OF_FORMAT_WHITESPACE: string[];
        /**
         * List of characters in base88 encoding scheme. Each base88 encoded
         * charater string represents corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}. Encoding
         * scheme is described in {@code goog.i18n.CharListDecompressor}.
         */
        static CHARLIST_OF_HANGUL: string[];
        /**
         * List of characters in base88 encoding scheme. Each base88 encoded
         * charater string represents corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}. Encoding
         * scheme is described in {@code goog.i18n.CharListDecompressor}.
         */
        static CHARLIST_OF_HAN_10_STROKE_RADICALS: string[];
        /**
         * List of characters in base88 encoding scheme. Each base88 encoded
         * charater string represents corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}. Encoding
         * scheme is described in {@code goog.i18n.CharListDecompressor}.
         */
        static CHARLIST_OF_HAN_11_17_STROKE_RADICALS: string[];
        /**
         * List of characters in base88 encoding scheme. Each base88 encoded
         * charater string represents corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}. Encoding
         * scheme is described in {@code goog.i18n.CharListDecompressor}.
         */
        static CHARLIST_OF_HAN_1_STROKE_RADICALS: string[];
        /**
         * List of characters in base88 encoding scheme. Each base88 encoded
         * charater string represents corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}. Encoding
         * scheme is described in {@code goog.i18n.CharListDecompressor}.
         */
        static CHARLIST_OF_HAN_2_STROKE_RADICALS: string[];
        /**
         * List of characters in base88 encoding scheme. Each base88 encoded
         * charater string represents corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}. Encoding
         * scheme is described in {@code goog.i18n.CharListDecompressor}.
         */
        static CHARLIST_OF_HAN_3_STROKE_RADICALS: string[];
        /**
         * List of characters in base88 encoding scheme. Each base88 encoded
         * charater string represents corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}. Encoding
         * scheme is described in {@code goog.i18n.CharListDecompressor}.
         */
        static CHARLIST_OF_HAN_4_STROKE_RADICALS: string[];
        /**
         * List of characters in base88 encoding scheme. Each base88 encoded
         * charater string represents corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}. Encoding
         * scheme is described in {@code goog.i18n.CharListDecompressor}.
         */
        static CHARLIST_OF_HAN_5_STROKE_RADICALS: string[];
        /**
         * List of characters in base88 encoding scheme. Each base88 encoded
         * charater string represents corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}. Encoding
         * scheme is described in {@code goog.i18n.CharListDecompressor}.
         */
        static CHARLIST_OF_HAN_6_STROKE_RADICALS: string[];
        /**
         * List of characters in base88 encoding scheme. Each base88 encoded
         * charater string represents corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}. Encoding
         * scheme is described in {@code goog.i18n.CharListDecompressor}.
         */
        static CHARLIST_OF_HAN_7_STROKE_RADICALS: string[];
        /**
         * List of characters in base88 encoding scheme. Each base88 encoded
         * charater string represents corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}. Encoding
         * scheme is described in {@code goog.i18n.CharListDecompressor}.
         */
        static CHARLIST_OF_HAN_8_STROKE_RADICALS: string[];
        /**
         * List of characters in base88 encoding scheme. Each base88 encoded
         * charater string represents corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}. Encoding
         * scheme is described in {@code goog.i18n.CharListDecompressor}.
         */
        static CHARLIST_OF_HAN_9_STROKE_RADICALS: string[];
        /**
         * List of characters in base88 encoding scheme. Each base88 encoded
         * charater string represents corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}. Encoding
         * scheme is described in {@code goog.i18n.CharListDecompressor}.
         */
        static CHARLIST_OF_HAN_OTHER: string[];
        /**
         * List of characters in base88 encoding scheme. Each base88 encoded
         * charater string represents corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}. Encoding
         * scheme is described in {@code goog.i18n.CharListDecompressor}.
         */
        static CHARLIST_OF_LATIN: string[];
        /**
         * List of characters in base88 encoding scheme. Each base88 encoded
         * charater string represents corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}. Encoding
         * scheme is described in {@code goog.i18n.CharListDecompressor}.
         */
        static CHARLIST_OF_MIDDLE_EASTERN_SCRIPTS: string[];
        /**
         * List of characters in base88 encoding scheme. Each base88 encoded
         * charater string represents corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}. Encoding
         * scheme is described in {@code goog.i18n.CharListDecompressor}.
         */
        static CHARLIST_OF_MODIFIER: string[];
        /**
         * List of characters in base88 encoding scheme. Each base88 encoded
         * charater string represents corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}. Encoding
         * scheme is described in {@code goog.i18n.CharListDecompressor}.
         */
        static CHARLIST_OF_NUMBER: string[];
        /**
         * List of characters in base88 encoding scheme. Each base88 encoded
         * charater string represents corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}. Encoding
         * scheme is described in {@code goog.i18n.CharListDecompressor}.
         */
        static CHARLIST_OF_OTHER_EAST_ASIAN_SCRIPTS: string[];
        /**
         * List of characters in base88 encoding scheme. Each base88 encoded
         * charater string represents corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}. Encoding
         * scheme is described in {@code goog.i18n.CharListDecompressor}.
         */
        static CHARLIST_OF_OTHER_EUROPEAN_SCRIPTS: string[];
        /**
         * List of characters in base88 encoding scheme. Each base88 encoded
         * charater string represents corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}. Encoding
         * scheme is described in {@code goog.i18n.CharListDecompressor}.
         */
        static CHARLIST_OF_PUNCTUATION: string[];
        /**
         * List of characters in base88 encoding scheme. Each base88 encoded
         * charater string represents corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}. Encoding
         * scheme is described in {@code goog.i18n.CharListDecompressor}.
         */
        static CHARLIST_OF_SOUTHEAST_ASIAN_SCRIPTS: string[];
        /**
         * List of characters in base88 encoding scheme. Each base88 encoded
         * charater string represents corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}. Encoding
         * scheme is described in {@code goog.i18n.CharListDecompressor}.
         */
        static CHARLIST_OF_SOUTH_ASIAN_SCRIPTS: string[];
        /**
         * List of characters in base88 encoding scheme. Each base88 encoded
         * charater string represents corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}. Encoding
         * scheme is described in {@code goog.i18n.CharListDecompressor}.
         */
        static CHARLIST_OF_SYMBOL: string[];
        static MSG_CP_AFRICAN_SCRIPTS: string;
        static MSG_CP_AMERICAN_SCRIPTS: string;
        static MSG_CP_ANIMALS_PLANTS_AND_FOOD: string;
        static MSG_CP_ARABIC: string;
        static MSG_CP_ARMENIAN: string;
        static MSG_CP_ARROWS: string;
        static MSG_CP_ASCII_BASED: string;
        static MSG_CP_AVESTAN: string;
        static MSG_CP_BALINESE: string;
        static MSG_CP_BAMUM: string;
        static MSG_CP_BATAK: string;
        static MSG_CP_BENGALI: string;
        static MSG_CP_BOPOMOFO: string;
        static MSG_CP_BRAHMI: string;
        static MSG_CP_BRAILLE: string;
        static MSG_CP_BUGINESE: string;
        static MSG_CP_BUHID: string;
        static MSG_CP_CANADIAN_ABORIGINAL: string;
        static MSG_CP_CARIAN: string;
        static MSG_CP_CHAKMA: string;
        static MSG_CP_CHAM: string;
        static MSG_CP_CHEROKEE: string;
        static MSG_CP_CJK_STROKES: string;
        static MSG_CP_COMMON: string;
        static MSG_CP_COMPATIBILITY: string;
        static MSG_CP_CONTROL_PICTURES: string;
        static MSG_CP_COPTIC: string;
        static MSG_CP_CUNEIFORM: string;
        static MSG_CP_CURRENCY: string;
        static MSG_CP_CYPRIOT: string;
        static MSG_CP_CYRILLIC: string;
        static MSG_CP_DASH_CONNECTOR: string;
        static MSG_CP_DECIMAL: string;
        static MSG_CP_DESERET: string;
        static MSG_CP_DEVANAGARI: string;
        static MSG_CP_EGYPTIAN_HIEROGLYPHS: string;
        static MSG_CP_EMOJI: string;
        static MSG_CP_EMOTICONS: string;
        static MSG_CP_ENCLOSED: string;
        static MSG_CP_ENCLOSED_DOTTED: string;
        static MSG_CP_ENCLOSING: string;
        static MSG_CP_ETHIOPIC: string;
        static MSG_CP_FLIPPED_MIRRORED: string;
        static MSG_CP_FORMAT: string;
        static MSG_CP_FORMAT_WHITESPACE: string;
        static MSG_CP_FRACTIONS_RELATED: string;
        static MSG_CP_GAME_PIECES: string;
        static MSG_CP_GENDER_AND_GENEALOGICAL: string;
        static MSG_CP_GEOMETRIC_SHAPES: string;
        static MSG_CP_GEORGIAN: string;
        static MSG_CP_GLAGOLITIC: string;
        static MSG_CP_GOTHIC: string;
        static MSG_CP_GREEK: string;
        static MSG_CP_GUJARATI: string;
        static MSG_CP_GURMUKHI: string;
        static MSG_CP_HANGUL: string;
        static MSG_CP_HANUNOO: string;
        static MSG_CP_HAN_10_STROKE_RADICALS: string;
        static MSG_CP_HAN_11_17_STROKE_RADICALS: string;
        static MSG_CP_HAN_1_STROKE_RADICALS: string;
        static MSG_CP_HAN_2_STROKE_RADICALS: string;
        static MSG_CP_HAN_3_STROKE_RADICALS: string;
        static MSG_CP_HAN_4_STROKE_RADICALS: string;
        static MSG_CP_HAN_5_STROKE_RADICALS: string;
        static MSG_CP_HAN_6_STROKE_RADICALS: string;
        static MSG_CP_HAN_7_STROKE_RADICALS: string;
        static MSG_CP_HAN_8_STROKE_RADICALS: string;
        static MSG_CP_HAN_9_STROKE_RADICALS: string;
        static MSG_CP_HAN_OTHER: string;
        static MSG_CP_HEBREW: string;
        static MSG_CP_HIRAGANA: string;
        static MSG_CP_HISTORIC: string;
        static MSG_CP_IDEOGRAPHIC_DESCRIPTION: string;
        static MSG_CP_IMPERIAL_ARAMAIC: string;
        static MSG_CP_INSCRIPTIONAL_PAHLAVI: string;
        static MSG_CP_INSCRIPTIONAL_PARTHIAN: string;
        static MSG_CP_JAVANESE: string;
        static MSG_CP_KAITHI: string;
        static MSG_CP_KANNADA: string;
        static MSG_CP_KATAKANA: string;
        static MSG_CP_KAYAH_LI: string;
        static MSG_CP_KEYBOARD_AND_UI: string;
        static MSG_CP_KHAROSHTHI: string;
        static MSG_CP_KHMER: string;
        static MSG_CP_LAO: string;
        static MSG_CP_LATIN: string;
        static MSG_CP_LATIN_1_SUPPLEMENT: string;
        static MSG_CP_LEPCHA: string;
        static MSG_CP_LESS_COMMON: string;
        static MSG_CP_LIMBU: string;
        static MSG_CP_LINEAR_B: string;
        static MSG_CP_LISU: string;
        static MSG_CP_LYCIAN: string;
        static MSG_CP_LYDIAN: string;
        static MSG_CP_MALAYALAM: string;
        static MSG_CP_MANDAIC: string;
        static MSG_CP_MARKS: string;
        static MSG_CP_MATH: string;
        static MSG_CP_MATH_ALPHANUMERIC: string;
        static MSG_CP_MEETEI_MAYEK: string;
        static MSG_CP_MEROITIC_CURSIVE: string;
        static MSG_CP_MEROITIC_HIEROGLYPHS: string;
        static MSG_CP_MIAO: string;
        static MSG_CP_MIDDLE_EASTERN_SCRIPTS: string;
        static MSG_CP_MISCELLANEOUS: string;
        static MSG_CP_MODIFIER: string;
        static MSG_CP_MONGOLIAN: string;
        static MSG_CP_MUSICAL: string;
        static MSG_CP_MYANMAR: string;
        static MSG_CP_NEW_TAI_LUE: string;
        static MSG_CP_NKO: string;
        static MSG_CP_NONSPACING: string;
        static MSG_CP_NUMBER: string;
        static MSG_CP_OBJECTS: string;
        static MSG_CP_OGHAM: string;
        static MSG_CP_OLD_ITALIC: string;
        static MSG_CP_OLD_PERSIAN: string;
        static MSG_CP_OLD_SOUTH_ARABIAN: string;
        static MSG_CP_OLD_TURKIC: string;
        static MSG_CP_OL_CHIKI: string;
        static MSG_CP_ORIYA: string;
        static MSG_CP_OSMANYA: string;
        static MSG_CP_OTHER: string;
        static MSG_CP_OTHER_EAST_ASIAN_SCRIPTS: string;
        static MSG_CP_OTHER_EUROPEAN_SCRIPTS: string;
        static MSG_CP_PAIRED: string;
        static MSG_CP_PEOPLE_AND_EMOTIONS: string;
        static MSG_CP_PHAGS_PA: string;
        static MSG_CP_PHOENICIAN: string;
        static MSG_CP_PHONETICS_IPA: string;
        static MSG_CP_PHONETICS_X_IPA: string;
        static MSG_CP_PUNCTUATION: string;
        static MSG_CP_REJANG: string;
        static MSG_CP_RUNIC: string;
        static MSG_CP_SAMARITAN: string;
        static MSG_CP_SAURASHTRA: string;
        static MSG_CP_SHARADA: string;
        static MSG_CP_SHAVIAN: string;
        static MSG_CP_SINHALA: string;
        static MSG_CP_SORA_SOMPENG: string;
        static MSG_CP_SOUTHEAST_ASIAN_SCRIPTS: string;
        static MSG_CP_SOUTH_ASIAN_SCRIPTS: string;
        static MSG_CP_SPACING: string;
        static MSG_CP_SPORTS_CELEBRATIONS_AND_ACTIVITIES: string;
        static MSG_CP_STARS_ASTERISKS: string;
        static MSG_CP_SUBSCRIPT: string;
        static MSG_CP_SUNDANESE: string;
        static MSG_CP_SUPERSCRIPT: string;
        static MSG_CP_SYLOTI_NAGRI: string;
        static MSG_CP_SYMBOL: string;
        static MSG_CP_SYMBOLS: string;
        static MSG_CP_SYRIAC: string;
        static MSG_CP_TAGALOG: string;
        static MSG_CP_TAGBANWA: string;
        static MSG_CP_TAI_LE: string;
        static MSG_CP_TAI_THAM: string;
        static MSG_CP_TAI_VIET: string;
        static MSG_CP_TAKRI: string;
        static MSG_CP_TAMIL: string;
        static MSG_CP_TECHNICAL: string;
        static MSG_CP_TELUGU: string;
        static MSG_CP_THAANA: string;
        static MSG_CP_THAI: string;
        static MSG_CP_TIBETAN: string;
        static MSG_CP_TIFINAGH: string;
        static MSG_CP_TRANSPORT_AND_MAP: string;
        static MSG_CP_TRANSPORT_MAPS_AND_SIGNAGE: string;
        static MSG_CP_UGARITIC: string;
        static MSG_CP_VAI: string;
        static MSG_CP_VARIATION_SELECTOR: string;
        static MSG_CP_WEATHER_AND_ASTROLOGICAL: string;
        static MSG_CP_WEATHER_SCENES_AND_ZODIAC_SIGNS: string;
        static MSG_CP_WHITESPACE: string;
        static MSG_CP_YI: string;
        static MSG_CP_YIJING_TAI_XUAN_JING: string;
        /**
         * Names of subcategories. Each message this array is the
         * name for the corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}.
         */
        static SUBCATEGORY_NAMES_OF_AFRICAN_SCRIPTS: string[];
        /**
         * Names of subcategories. Each message this array is the
         * name for the corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}.
         */
        static SUBCATEGORY_NAMES_OF_AMERICAN_SCRIPTS: string[];
        /**
         * Names of subcategories. Each message this array is the
         * name for the corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}.
         */
        static SUBCATEGORY_NAMES_OF_EMOJI: string[];
        /**
         * Names of subcategories. Each message this array is the
         * name for the corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}.
         */
        static SUBCATEGORY_NAMES_OF_FORMAT_WHITESPACE: string[];
        /**
         * Names of subcategories. Each message this array is the
         * name for the corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}.
         */
        static SUBCATEGORY_NAMES_OF_HANGUL: string[];
        /**
         * Names of subcategories. Each message this array is the
         * name for the corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}.
         */
        static SUBCATEGORY_NAMES_OF_HAN_10_STROKE_RADICALS: string[];
        /**
         * Names of subcategories. Each message this array is the
         * name for the corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}.
         */
        static SUBCATEGORY_NAMES_OF_HAN_11_17_STROKE_RADICALS: string[];
        /**
         * Names of subcategories. Each message this array is the
         * name for the corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}.
         */
        static SUBCATEGORY_NAMES_OF_HAN_1_STROKE_RADICALS: string[];
        /**
         * Names of subcategories. Each message this array is the
         * name for the corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}.
         */
        static SUBCATEGORY_NAMES_OF_HAN_2_STROKE_RADICALS: string[];
        /**
         * Names of subcategories. Each message this array is the
         * name for the corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}.
         */
        static SUBCATEGORY_NAMES_OF_HAN_3_STROKE_RADICALS: string[];
        /**
         * Names of subcategories. Each message this array is the
         * name for the corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}.
         */
        static SUBCATEGORY_NAMES_OF_HAN_4_STROKE_RADICALS: string[];
        /**
         * Names of subcategories. Each message this array is the
         * name for the corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}.
         */
        static SUBCATEGORY_NAMES_OF_HAN_5_STROKE_RADICALS: string[];
        /**
         * Names of subcategories. Each message this array is the
         * name for the corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}.
         */
        static SUBCATEGORY_NAMES_OF_HAN_6_STROKE_RADICALS: string[];
        /**
         * Names of subcategories. Each message this array is the
         * name for the corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}.
         */
        static SUBCATEGORY_NAMES_OF_HAN_7_STROKE_RADICALS: string[];
        /**
         * Names of subcategories. Each message this array is the
         * name for the corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}.
         */
        static SUBCATEGORY_NAMES_OF_HAN_8_STROKE_RADICALS: string[];
        /**
         * Names of subcategories. Each message this array is the
         * name for the corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}.
         */
        static SUBCATEGORY_NAMES_OF_HAN_9_STROKE_RADICALS: string[];
        /**
         * Names of subcategories. Each message this array is the
         * name for the corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}.
         */
        static SUBCATEGORY_NAMES_OF_HAN_OTHER: string[];
        /**
         * Names of subcategories. Each message this array is the
         * name for the corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}.
         */
        static SUBCATEGORY_NAMES_OF_LATIN: string[];
        /**
         * Names of subcategories. Each message this array is the
         * name for the corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}.
         */
        static SUBCATEGORY_NAMES_OF_MIDDLE_EASTERN_SCRIPTS: string[];
        /**
         * Names of subcategories. Each message this array is the
         * name for the corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}.
         */
        static SUBCATEGORY_NAMES_OF_MODIFIER: string[];
        /**
         * Names of subcategories. Each message this array is the
         * name for the corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}.
         */
        static SUBCATEGORY_NAMES_OF_NUMBER: string[];
        /**
         * Names of subcategories. Each message this array is the
         * name for the corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}.
         */
        static SUBCATEGORY_NAMES_OF_OTHER_EAST_ASIAN_SCRIPTS: string[];
        /**
         * Names of subcategories. Each message this array is the
         * name for the corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}.
         */
        static SUBCATEGORY_NAMES_OF_OTHER_EUROPEAN_SCRIPTS: string[];
        /**
         * Names of subcategories. Each message this array is the
         * name for the corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}.
         */
        static SUBCATEGORY_NAMES_OF_PUNCTUATION: string[];
        /**
         * Names of subcategories. Each message this array is the
         * name for the corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}.
         */
        static SUBCATEGORY_NAMES_OF_SOUTHEAST_ASIAN_SCRIPTS: string[];
        /**
         * Names of subcategories. Each message this array is the
         * name for the corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}.
         */
        static SUBCATEGORY_NAMES_OF_SOUTH_ASIAN_SCRIPTS: string[];
        /**
         * Names of subcategories. Each message this array is the
         * name for the corresponding subcategory specified in
         * {@code goog.i18n.CharPickerData.subcategories}.
         */
        static SUBCATEGORY_NAMES_OF_SYMBOL: string[];
    }
    class CharPickerData_Instance {
        private noStructuralTyping_: any;
        /**
         * Top catagory names of character organization.
         */
        categories: string[];
        /**
         * Character lists in base88 encoding scheme. Each subarray is a list of
         * base88 encoded charater strings representing corresponding
         * subcategory specified in {@code goog.i18n.CharPickerData.categories}.
         * Encoding scheme is described in {@code
         * goog.i18n.CharListDecompressor}.
         */
        charList: string[][];
        /**
         * Subcategory names. Each subarray in this array is a list of
         * subcategory names for the corresponding category specified in
         * {@code goog.i18n.CharPickerData.categories}.
         */
        subcategories: string[][];
    }
}
declare module 'goog:goog.i18n.CharPickerData' {
    import alias = ಠ_ಠ.clutz.goog.i18n.CharPickerData;
    export default alias;
}
declare namespace ಠ_ಠ.clutz {
    /**
     * Constructs a DateIntervalFormat object based on the current locale.
     */
    class module$exports$goog$i18n$DateIntervalFormat extends
        module$exports$goog$i18n$DateIntervalFormat_Instance {}
    class module$exports$goog$i18n$DateIntervalFormat_Instance {
        private noStructuralTyping_: any;
        /**
         * Constructs a DateIntervalFormat object based on the current locale.
         * @param pattern Pattern specification or pattern object.
         * @param opt_dateIntervalSymbols Optional DateIntervalSymbols to use
         * for this instance rather than the global symbols.
         * @param opt_dateTimeSymbols Optional DateTimeSymbols to use for this
         * instance rather than the global symbols.
         */
        constructor(
            pattern: number|{[k:string]:string},
            opt_dateIntervalSymbols?:
                any,
            opt_dateTimeSymbols?:
                any);
        /**
         * Formats the given date or date interval objects according to the
         * present pattern and current locale.
         *
         * Parameter combinations:
         * * StartDate: {@link goog.date.DateLike}, EndDate: {@link
         * goog.date.DateLike}
         * * StartDate: {@link goog.date.DateLike}, Interval: {@link
         * goog.date.Interval}
         * @param startDate Start date of the date range.
         * @param endDate End date of the date range or an interval object.
         * @param opt_timeZone Timezone to be used in the target representation.
         */
        format(
            startDate: GlobalDate|ಠ_ಠ.clutz.goog.date.Date,
            endDate: GlobalDate|ಠ_ಠ.clutz.goog.date.Date|
            ಠ_ಠ.clutz.goog.date.Interval,
            opt_timeZone?: ಠ_ಠ.clutz.goog.i18n.TimeZone): string;
        /**
         * Formats the given date range object according to the present pattern
         * and current locale.
         * @param opt_timeZone Timezone to be used in the target representation.
         */
        formatRange(
            dateRange: ಠ_ಠ.clutz.goog.date.DateRange,
            opt_timeZone?: ಠ_ಠ.clutz.goog.i18n.TimeZone): string;
    }
}
declare module 'goog:goog.i18n.DateIntervalFormat' {
    import alias = ಠ_ಠ.clutz.module$exports$goog$i18n$DateIntervalFormat;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
    /**
     * Construct a DateTimeFormat object based on current locale.
     */
    class DateTimeFormat extends DateTimeFormat_Instance {
        static isEnforceAsciiDigits(): boolean;
        /**
         * Localizes a string potentially containing numbers, replacing ASCII
         * digits with native digits if specified so by the locale. Leaves other
         * characters.
         * @param input the string to be localized, using ASCII digits.
         * @param opt_dateTimeSymbols Optional symbols to use rather than the
         * global symbols.
         */
        static localizeNumbers(
            input: number|string, opt_dateTimeSymbols?: GlobalObject): string;
        /**
         * Sets if the usage of Ascii digits in formatting should be enforced in
         * formatted date/time even for locales where native digits are
         * indicated. Also sets whether to remove RLM unicode control characters
         * when using standard enumerated patterns (they exist e.g. in standard
         * d/M/y for Arabic). Production code should call this once before any
         * {@code DateTimeFormat} object is instantiated. Caveats:
         * * Enforcing ASCII digits affects all future formatting by new or
         * existing
         * {@code DateTimeFormat} objects.
         * * Removal of RLM characters only applies to {@code DateTimeFormat}
         * objects instantiated after this call.
         * @param enforceAsciiDigits Whether Ascii digits should be enforced.
         */
        static setEnforceAsciiDigits(enforceAsciiDigits: boolean): void;
    }
    class DateTimeFormat_Instance {
        private noStructuralTyping_: any;
        /**
         * Construct a DateTimeFormat object based on current locale.
         * @param pattern pattern specification or pattern type.
         * @param opt_dateTimeSymbols Optional symbols to use for this instance
         * rather than the global symbols.
         */
        constructor(pattern: string|number, opt_dateTimeSymbols?: GlobalObject);
        patternParts_: any[];
        /**
         * Format the given date object according to preset pattern and current
         * locale.
         * @param date The Date object that is being formatted.
         * @param opt_timeZone optional, if specified, time related fields will
         * be formatted based on its setting. When this field is not specified,
         * "undefined" will be pass around and those function that really need
         * time zone service will create a default one.
         */
        format(
            date: GlobalDate|null|ಠ_ಠ.clutz.goog.date.Date,
            opt_timeZone?: ಠ_ಠ.clutz.goog.i18n.TimeZone|null): string;
    }
}
declare module 'goog:goog.i18n.DateTimeFormat' {
    import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeFormat;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.DateTimeFormat {
    /**
     * Enum to identify predefined Date/Time format pattern.
     */
    enum Format {
        FULL_DATE,
        FULL_DATETIME,
        FULL_TIME,
        LONG_DATE,
        LONG_DATETIME,
        LONG_TIME,
        MEDIUM_DATE,
        MEDIUM_DATETIME,
        MEDIUM_TIME,
        SHORT_DATE,
        SHORT_DATETIME,
        SHORT_TIME,
    }
}
declare module 'goog:goog.i18n.DateTimeFormat.Format' {
    import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeFormat.Format;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
    /**
     * Construct a DateTimeParse based on current locale.
     */
    class DateTimeParse extends DateTimeParse_Instance {
        /**
         * Number of years prior to now that the century used to
         * disambiguate two digit years will begin
         */
        static ambiguousYearCenturyStart: number;
    }
    class DateTimeParse_Instance {
        private noStructuralTyping_: any;
        /**
         * Construct a DateTimeParse based on current locale.
         * @param pattern pattern specification or pattern type.
         * @param opt_dateTimeSymbols Optional symbols to use for this instance
         * rather than the global symbols.
         */
        constructor(pattern: string|number, opt_dateTimeSymbols?: GlobalObject);
        patternParts_: any[];
        /**
         * Parse the given string and fill info into date object. This version
         * does not validate the input.
         * @param text The string being parsed.
         * @param date The Date object to hold the parsed date.
         * @param opt_start The position from where parse should begin.
         */
        parse(
            text: string, date: GlobalDate|null|ಠ_ಠ.clutz.goog.date.Date,
            opt_start?: number): number;
        /**
         * Parse the given string and fill info into date object. This version
         * will validate the input and make sure it is a valid date/time.
         * @param text The string being parsed.
         * @param date The Date object to hold the parsed date.
         * @param opt_start The position from where parse should begin.
         */
        strictParse(
            text: string, date: GlobalDate|null|ಠ_ಠ.clutz.goog.date.Date,
            opt_start?: number): number;
    }
}
declare namespace ಠ_ಠ.clutz.goog.i18n.DateTimeParse {
    class MyDate_ extends MyDate__Instance {}
    class MyDate__Instance {
        private noStructuralTyping_: any;
        /**
         * The date's before/afternoon denominator.
         */
        ampm: number|null;
        /**
         * The date's day of month.
         */
        day: number|null;
        /**
         * The date's day of week. Sunday is 0, Saturday is 6.
         */
        dayOfWeek: number|null;
        /**
         * The date's era.
         */
        era: number|null;
        /**
         * The date's hour.
         */
        hours: number|null;
        /**
         * The date's milliseconds.
         */
        milliseconds: number|null;
        /**
         * The date's minutes.
         */
        minutes: number|null;
        /**
         * The date's month.
         */
        month: number|null;
        /**
         * The date's seconds.
         */
        seconds: number|null;
        /**
         * The date's timezone offset.
         */
        tzOffset: number|null;
        /**
         * The date's year.
         */
        year: number|null;
    }
}
declare module 'goog:goog.i18n.DateTimeParse' {
    import alias = ಠ_ಠ.clutz.goog.i18n.DateTimeParse;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.GraphemeBreak {
    /**
     * Indicates if there is a grapheme cluster boundary between a and b.
     *
     * Legacy function. Does not cover cases where a sequence of code points is
     * required in order to decide if there is a grapheme cluster boundary, such
     * as emoji modifier sequences and emoji flag sequences. To cover all cases
     * please use {@code hasGraphemeBreakStrings}.
     *
     * There are two kinds of grapheme clusters: 1) Legacy 2) Extended. This
     * method is to check for both using a boolean flag to switch between them.
     * If no flag is provided rules for the extended clusters will be used by
     * default.
     * @param a The code point value of the first character.
     * @param b The code point value of the second character.
     * @param opt_extended If true, indicates extended grapheme cluster; If
     * false, indicates legacy cluster. Default value is true.
     */
    function hasGraphemeBreak(
        a: number, b: number, opt_extended?: boolean): boolean;
    /**
     * Indicates if there is a grapheme cluster boundary between a and b.
     *
     * There are two kinds of grapheme clusters: 1) Legacy 2) Extended. This
     * method is to check for both using a boolean flag to switch between them.
     * If no flag is provided rules for the extended clusters will be used by
     * default.
     * @param a String with the first sequence of characters.
     * @param b String with the second sequence of characters.
     * @param opt_extended If true, indicates extended grapheme cluster; If
     * false, indicates legacy cluster. Default value is true.
     */
    function hasGraphemeBreakStrings(
        a: string, b: string, opt_extended?: boolean): boolean;
    /**
     * Enum for all Grapheme Cluster Break properties.
     * These enums directly corresponds to Grapheme_Cluster_Break property
     * values mentioned in http://unicode.org/reports/tr29 table 2. VIRAMA and
     * INDIC_LETTER are for the Virama × Base tailoring mentioned in the notes.
     */
    enum property {
        CONTROL,
        CR,
        EXTEND,
        E_BASE,
        E_BASE_GAZ,
        E_MODIFIER,
        GLUE_AFTER_ZWJ,
        INDIC_LETTER,
        L,
        LF,
        LV,
        LVT,
        OTHER,
        PREPEND,
        REGIONAL_INDICATOR,
        SPACING_MARK,
        T,
        V,
        VIRAMA,
        ZWJ,
    }
}
declare module 'goog:goog.i18n.GraphemeBreak' {
    import alias = ಠ_ಠ.clutz.goog.i18n.GraphemeBreak;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
    /**
     * Constructor of MessageFormat.
     */
    class MessageFormat extends MessageFormat_Instance {}
    class MessageFormat_Instance {
        private noStructuralTyping_: any;
        /**
         * Constructor of MessageFormat.
         * @param pattern The pattern we parse and apply positional parameters
         * to.
         */
        constructor(pattern: string);
        /**
         * Formats a message, treating '#' with special meaning representing
         * the number (plural_variable - offset).
         * @param namedParameters Parameters that either influence the
         * formatting or are used as actual data. I.e. in call to
         * fmt.format({'NUM_PEOPLE': 5, 'NAME': 'Angela'}), object
         * {'NUM_PEOPLE': 5, 'NAME': 'Angela'} holds positional parameters. 1st
         * parameter could mean 5 people, which could influence plural format,
         * and 2nd parameter is just a data to be printed out in proper
         * position.
         */
        format(namedParameters: GlobalObject): string;
        /**
         * Formats a message, treating '#' as literary character.
         * @param namedParameters Parameters that either influence the
         * formatting or are used as actual data. I.e. in call to
         * fmt.format({'NUM_PEOPLE': 5, 'NAME': 'Angela'}), object
         * {'NUM_PEOPLE': 5, 'NAME': 'Angela'} holds positional parameters. 1st
         * parameter could mean 5 people, which could influence plural format,
         * and 2nd parameter is just a data to be printed out in proper
         * position.
         */
        formatIgnoringPound(namedParameters: GlobalObject): string;
    }
}
declare namespace ಠ_ಠ.clutz.goog.i18n.MessageFormat {
    type TypeVal_ = {type: PrivateType, value: any};
}
declare module 'goog:goog.i18n.MessageFormat' {
    import alias = ಠ_ಠ.clutz.goog.i18n.MessageFormat;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
    /**
     * Constructor of NumberFormat.
     */
    class NumberFormat extends NumberFormat_Instance {
        /**
         * Return if Ascii digits is enforced.
         */
        static isEnforceAsciiDigits(): boolean;
        /**
         * Set if the usage of Ascii digits in formatting should be enforced.
         * NOTE: This function must be called before constructing NumberFormat.
         * @param doEnforce Boolean value about if Ascii digits should be
         * enforced.
         */
        static setEnforceAsciiDigits(doEnforce: boolean): void;
    }
    class NumberFormat_Instance {
        private noStructuralTyping_: any;
        /**
         * Constructor of NumberFormat.
         * @param pattern The number that indicates a predefined number format
         * pattern.
         * @param opt_currency Optional international currency code. This
         * determines the currency code/symbol used in format/parse. If not
         * given, the currency code for current locale will be used.
         * @param opt_currencyStyle currency style, value defined in
         * goog.i18n.NumberFormat.CurrencyStyle.
         */
        constructor(
            pattern: number|string, opt_currency?: string,
            opt_currencyStyle?: number);
        /**
         * Formats a Number to produce a string.
         * @param number The Number to be formatted.
         */
        format(number: number): string;
        /**
         * Gets the number on which compact formatting is currently based, or
         * null if no such number is set. See setBaseFormatting() for more
         * information.
         */
        getBaseFormatting(): number|null;
        /**
         * Gets number of significant digits to show. Only fractions will be
         * rounded.
         */
        getSignificantDigits(): number;
        /**
         * Checks if the currency symbol comes before the value ($12) or after
         * (12$) Handy for applications that need to have separate UI fields for
         * the currency value and symbol, especially for input: Price: [USD]
         * [123.45] The currency symbol might be a combo box, or a label.
         */
        isCurrencyCodeBeforeValue(): boolean;
        /**
         * Parses text string to produce a Number.
         *
         * This method attempts to parse text starting from position "opt_pos"
         * if it is given. Otherwise the parse will start from the beginning of
         * the text. When opt_pos presents, opt_pos will be updated to the
         * character next to where parsing stops after the call. If an error
         * occurs, opt_pos won't be updated.
         * @param text The string to be parsed.
         * @param opt_pos Position to pass in and get back.
         */
        parse(text: string, opt_pos?: ಠ_ಠ.clutz.goog.vec.Number|null): number;
        /**
         * Sets a number to base the formatting on when compact style formatting
         * is used. If this is null, the formatting should be based only on the
         * number to be formatting.
         *
         * This base formatting number can be used to format the target number
         * as another number would be formatted. For example, 100,000 is
         * normally formatted as "100K" in the COMPACT_SHORT format. To instead
         * format it as '0.1M', the base number could be set to 1,000,000 in
         * order to force all numbers to be formatted in millions. Similarly,
         * 1,000,000,000 would normally be formatted as '1B' and setting the
         * base formatting number to 1,000,000, would cause it to be formatted
         * instead as '1,000M'.
         * @param baseFormattingNumber The number to base formatting on, or null
         * if formatting should not be based on another number.
         */
        setBaseFormatting(baseFormattingNumber: number|
                          null): ಠ_ಠ.clutz.goog.i18n.NumberFormat;
        /**
         * Sets maximum number of fraction digits.
         * @param max the maximum.
         */
        setMaximumFractionDigits(max: number): ಠ_ಠ.clutz.goog.i18n.NumberFormat;
        /**
         * Sets minimum number of fraction digits.
         * @param min the minimum.
         */
        setMinimumFractionDigits(min: number): ಠ_ಠ.clutz.goog.i18n.NumberFormat;
        /**
         * Sets whether trailing fraction zeros should be shown when
         * significantDigits_ is positive. If this is true and
         * significantDigits_ is 2, 1 will be formatted as '1.0'.
         * @param showTrailingZeros Whether trailing zeros should be shown.
         */
        setShowTrailingZeros(showTrailingZeros: boolean):
            ಠ_ಠ.clutz.goog.i18n.NumberFormat;
        /**
         * Sets number of significant digits to show. Only fractions will be
         * rounded. Regardless of the number of significant digits set, the
         * number of fractional digits shown will always be capped by the
         * maximum number of fractional digits set on {@link
         * #setMaximumFractionDigits}.
         * @param number The number of significant digits to include.
         */
        setSignificantDigits(number: number): ಠ_ಠ.clutz.goog.i18n.NumberFormat;
    }
}
declare namespace ಠ_ಠ.clutz.goog.i18n.NumberFormat {
    type CompactNumberUnit = {
        divisorBase: number,
        prefix: string,
        suffix: string
    };
    enum CompactStyle {
        LONG,
        NONE,
        SHORT,
    }
}
declare module 'goog:goog.i18n.NumberFormat' {
    import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormat;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.NumberFormat {
    /**
     * Currency styles.
     */
    enum CurrencyStyle {
        GLOBAL,
        LOCAL,
        PORTABLE,
    }
}
declare module 'goog:goog.i18n.NumberFormat.CurrencyStyle' {
    import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormat.CurrencyStyle;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.NumberFormat {
    /**
     * Standard number formatting patterns.
     */
    enum Format {
        COMPACT_LONG,
        COMPACT_SHORT,
        CURRENCY,
        DECIMAL,
        PERCENT,
        SCIENTIFIC,
    }
}
declare module 'goog:goog.i18n.NumberFormat.Format' {
    import alias = ಠ_ಠ.clutz.goog.i18n.NumberFormat.Format;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
    /**
     * TimeZone class implemented a time zone resolution and name information
     * source for client applications. The time zone object is initiated from
     * a time zone information object. Application can initiate a time zone
     * statically, or it may choose to initiate from a data obtained from
     * server. Each time zone information array is small, but the whole set of
     * data is too much for client application to download. If end user is
     * allowed to change time zone setting, dynamic retrieval should be the
     * method to use. In case only time zone offset is known, there is a decent
     * fallback that only use the time zone offset to create a TimeZone object.
     */
    class TimeZone extends TimeZone_Instance {
        /**
         * This factory method creates a time zone instance.  It takes either an
         * object containing complete time zone information, or a single number
         * representing a constant time zone offset.  If the latter form is
         * used, DST functionality is not available.
         * @param timeZoneData If this parameter is a number, it should indicate
         * minutes WEST of UTC to be used as a constant time zone offset.
         * Otherwise, it should be an object with these four fields: <ul>
         * <li>id: A string ID for the time zone. <li>std_offset: The standard
         * time zone offset in minutes EAST of UTC. <li>names: An array of four
         * names (standard short name, standard long name, daylight short name,
         * daylight long, name) <li>names_ext: A hash of four fields (standard
         * long name gmt, daylight long name gmt, standard generic location,
         * daylight generic location) <li>transitions: An array of numbers which
         * are interpreted in pairs: [time1, adjustment1, time2, adjustment2,
         * ...] where each time is a DST transition point given as a number of
         * hours since 00:00 UTC, January 1, 1970, and each adjustment is the
         * adjustment to apply for times after the DST transition, given as
         * minutes EAST of UTC. </ul>
         */
        static createTimeZone(timeZoneData: number|GlobalObject|
                              null): ಠ_ಠ.clutz.goog.i18n.TimeZone;
    }
    class TimeZone_Instance {
        private noStructuralTyping_: any;
        /**
         * Return the DST adjustment to the time zone offset for a given time.
         * While Daylight Saving Time is in effect, this number is positive.
         * Otherwise, it is zero.
         * @param date The time to check.
         */
        getDaylightAdjustment(date: GlobalDate|null|
                              ಠ_ಠ.clutz.goog.date.Date): number;
        /**
         * Return the GMT representation of this time zone object.
         * @param date The date for which time to retrieve GMT string.
         */
        getGMTString(date: GlobalDate|null|ಠ_ಠ.clutz.goog.date.Date): string;
        /**
         * Get the generic location time zone name for a given date/time.
         * @param date The time for which to retrieve the generic location time
         * zone name.
         */
        getGenericLocation(date: GlobalDate|ಠ_ಠ.clutz.goog.date.Date): string;
        /**
         * Get the long time zone name for a given date/time.
         * @param date The time for which to retrieve the long time zone name.
         */
        getLongName(date: GlobalDate|null|ಠ_ಠ.clutz.goog.date.Date): string;
        /**
         * Get the long GMT time zone name for a given date/time.
         * @param date The time for which to retrieve the long GMT time zone
         * name.
         */
        getLongNameGMT(date: GlobalDate|ಠ_ಠ.clutz.goog.date.Date): string;
        /**
         * Get the time zone offset in minutes WEST of UTC for a given
         * date/time.
         * @param date The time for which to retrieve the time zone offset.
         */
        getOffset(date: GlobalDate|null|ಠ_ಠ.clutz.goog.date.Date): number;
        /**
         * Get the RFC representation of the time zone for a given date/time.
         * @param date The time for which to retrieve the RFC time zone string.
         */
        getRFCTimeZoneString(date: GlobalDate|null|
                             ಠ_ಠ.clutz.goog.date.Date): string;
        /**
         * Get the short time zone name for given date/time.
         * @param date The time for which to retrieve the short time zone name.
         */
        getShortName(date: GlobalDate|null|ಠ_ಠ.clutz.goog.date.Date): string;
        /**
         * Convert the contents of time zone object to a timeZoneData object,
         * suitable for passing to goog.i18n.TimeZone.createTimeZone.
         */
        getTimeZoneData(): GlobalObject;
        /**
         * Return the time zone ID for this time zone.
         */
        getTimeZoneId(): string;
        /**
         * Check if Daylight Saving Time is in effect at a given time in this
         * time zone.
         * @param date The time to check.
         */
        isDaylightTime(date: GlobalDate|null|ಠ_ಠ.clutz.goog.date.Date): boolean;
    }
}
declare namespace ಠ_ಠ.clutz.goog.i18n.TimeZone {
    enum NameType {
        DLT_LONG_NAME,
        DLT_SHORT_NAME,
        STD_LONG_NAME,
        STD_SHORT_NAME,
    }
}
declare module 'goog:goog.i18n.TimeZone' {
    import alias = ಠ_ಠ.clutz.goog.i18n.TimeZone;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.bidi {
    var FORCE_RTL: boolean;
    /**
     * 'right' if locale is RTL, 'left' if not.
     */
    var I18N_LEFT: string;
    /**
     * 'left' if locale is RTL, 'right' if not.
     */
    var I18N_RIGHT: string;
    /**
     * Constant that defines whether or not the current locale is a RTL locale.
     * If {@link goog.i18n.bidi.FORCE_RTL} is not true, this constant will
     * default to check that {@link goog.LOCALE} is one of a few major RTL
     * locales.
     *
     * <p>This is designed to be a maximally efficient compile-time constant.
     * For example, for the default goog.LOCALE, compiling "if
     * (goog.i18n.bidi.IS_RTL) alert('rtl') else {}" should produce no code. It
     * is this design consideration that limits the implementation to only
     * supporting a few major RTL locales, as opposed to the broader repertoire
     * of something like goog.i18n.bidi.isRtlLanguage.
     *
     * <p>Since this constant refers to the directionality of the locale, it is
     * up to the caller to determine if this constant should also be used for
     * the direction of the UI.
     *
     * {@see goog.LOCALE}
     */
    var IS_RTL: boolean;
    /**
     * 'left' string constant.
     */
    var LEFT: string;
    /**
     * 'right' string constant.
     */
    var RIGHT: string;
    /**
     * Check the directionality of a piece of text, return true if the piece of
     * text should be laid out in RTL direction.
     * @param str The piece of text that need to be detected.
     * @param opt_isHtml Whether str is HTML / HTML-escaped. Default: false.
     */
    function detectRtlDirectionality(
        str: string, opt_isHtml?: boolean): boolean;
    /**
     * Check if the exit directionality a piece of text is LTR, i.e. if the last
     * strongly-directional character in the string is LTR.
     * @param str String being checked.
     * @param opt_isHtml Whether str is HTML / HTML-escaped. Default: false.
     */
    function endsWithLtr(str: string, opt_isHtml?: boolean): boolean;
    /**
     * Check if the exit directionality a piece of text is RTL, i.e. if the last
     * strongly-directional character in the string is RTL.
     * @param str String being checked.
     * @param opt_isHtml Whether str is HTML / HTML-escaped. Default: false.
     */
    function endsWithRtl(str: string, opt_isHtml?: boolean): boolean;
    /**
     * Enforce the html snippet in RTL directionality regardless overall
     * context. If the html piece was enclosed by tag, dir will be applied to
     * existing tag, otherwise a span tag will be added as wrapper. For this
     * reason, if html snippet start with with tag, this tag must enclose the
     * whole piece. If the tag already has a dir specified, this new one will
     * override existing one in behavior (tested on FF and IE).
     * @param html The string that need to be processed.
     */
    function enforceLtrInHtml(html: string): string;
    /**
     * Enforce LTR on both end of the given text piece using unicode BiDi
     * formatting characters LRE and PDF.
     * @param text The piece of text that need to be wrapped.
     */
    function enforceLtrInText(text: string): string;
    /**
     * Enforce the html snippet in RTL directionality regardless overall
     * context. If the html piece was enclosed by tag, dir will be applied to
     * existing tag, otherwise a span tag will be added as wrapper. For this
     * reason, if html snippet start with with tag, this tag must enclose the
     * whole piece. If the tag already has a dir specified, this new one will
     * override existing one in behavior (tested on FF and IE).
     * @param html The string that need to be processed.
     */
    function enforceRtlInHtml(html: string): string;
    /**
     * Enforce RTL on both end of the given text piece using unicode BiDi
     * formatting characters RLE and PDF.
     * @param text The piece of text that need to be wrapped.
     */
    function enforceRtlInText(text: string): string;
    /**
     * Estimates the directionality of a string based on relative word counts.
     * If the number of RTL words is above a certain percentage of the total
     * number of strongly directional words, returns RTL. Otherwise, if any
     * words are strongly or weakly LTR, returns LTR. Otherwise, returns
     * UNKNOWN, which is used to mean "neutral". Numbers are counted as weakly
     * LTR.
     * @param str The string to be checked.
     * @param opt_isHtml Whether str is HTML / HTML-escaped. Default: false.
     */
    function estimateDirection(
        str: string, opt_isHtml?: boolean): ಠ_ಠ.clutz.goog.i18n.bidi.Dir;
    /**
     * Apply bracket guard using LRM and RLM. This is to address the problem of
     * messy bracket display frequently happens in RTL layout.
     * This function works for plain text, not for HTML. In HTML, the opening
     * bracket might be in a different context than the closing bracket (such as
     * an attribute value).
     * @param s The string that need to be processed.
     * @param opt_isRtlContext specifies default direction (usually direction of
     * the UI).
     */
    function guardBracketInText(s: string, opt_isRtlContext?: boolean): string;
    /**
     * Test whether the given string has any LTR characters in it.
     * @param str The given string that need to be tested.
     * @param opt_isHtml Whether str is HTML / HTML-escaped. Default: false.
     */
    function hasAnyLtr(str: string, opt_isHtml?: boolean): boolean;
    /**
     * Test whether the given string has any RTL characters in it.
     * @param str The given string that need to be tested.
     * @param opt_isHtml Whether str is HTML / HTML-escaped. Default: false.
     */
    function hasAnyRtl(str: string, opt_isHtml?: boolean): boolean;
    /**
     * Test whether the given string has any RTL characters in it.
     * @param str The given string that need to be tested.
     */
    function hasRtlChar(a: string): boolean;
    /**
     * Check if the first character in the string is LTR or not.
     * @param str The given string that need to be tested.
     */
    function isLtrChar(str: string): boolean;
    /**
     * Check if the exit directionality a piece of text is LTR, i.e. if the last
     * strongly-directional character in the string is LTR.
     * @param str String being checked.
     * @param opt_isHtml Whether str is HTML / HTML-escaped. Default: false.
     */
    function isLtrExitText(a: string, b?: boolean): boolean;
    /**
     * Check whether the first strongly directional character (if any) is LTR.
     * @param str String being checked.
     * @param opt_isHtml Whether str is HTML / HTML-escaped. Default: false.
     */
    function isLtrText(a: string, b?: boolean): boolean;
    /**
     * Check if the first character in the string is neutral or not.
     * @param str The given string that need to be tested.
     */
    function isNeutralChar(str: string): boolean;
    /**
     * Check whether the input string either contains no strongly directional
     * characters or looks like a url.
     * @param str String being checked.
     * @param opt_isHtml Whether str is HTML / HTML-escaped. Default: false.
     */
    function isNeutralText(str: string, opt_isHtml?: boolean): boolean;
    /**
     * Check if the first character in the string is RTL or not.
     * @param str The given string that need to be tested.
     */
    function isRtlChar(str: string): boolean;
    /**
     * Check if the exit directionality a piece of text is RTL, i.e. if the last
     * strongly-directional character in the string is RTL.
     * @param str String being checked.
     * @param opt_isHtml Whether str is HTML / HTML-escaped. Default: false.
     */
    function isRtlExitText(a: string, b?: boolean): boolean;
    /**
     * Check if a BCP 47 / III language code indicates an RTL language, i.e.
     * either:
     * - a language code explicitly specifying one of the right-to-left scripts,
     * e.g. "az-Arab", or<p>
     * - a language code specifying one of the languages normally written in a
     * right-to-left script, e.g. "fa" (Farsi), except ones explicitly
     * specifying Latin or Cyrillic script (which are the usual LTR
     * alternatives).<p> The list of right-to-left scripts appears in the
     * 100-199 range in http://www.unicode.org/iso15924/iso15924-num.html, of
     * which Arabic and Hebrew are by far the most widely used. We also
     * recognize Thaana, N'Ko, and Tifinagh, which also have significant modern
     * usage. The rest (Syriac, Samaritan, Mandaic, etc.) seem to have extremely
     * limited or no modern usage and are not recognized to save on code size.
     * The languages usually written in a right-to-left script are taken as
     * those with Suppress-Script: Hebr|Arab|Thaa|Nkoo|Tfng  in
     * http://www.iana.org/assignments/language-subtag-registry,
     * as well as Central (or Sorani) Kurdish (ckb), Sindhi (sd) and Uyghur
     * (ug). Other subtags of the language code, e.g. regions like EG (Egypt),
     * are ignored.
     * @param lang BCP 47 (a.k.a III) language code.
     */
    function isRtlLanguage(lang: string): boolean;
    /**
     * Check whether the first strongly directional character (if any) is RTL.
     * @param str String being checked.
     * @param opt_isHtml Whether str is HTML / HTML-escaped. Default: false.
     */
    function isRtlText(a: string, b?: boolean): boolean;
    /**
     * Swap location parameters and 'left'/'right' in CSS specification. The
     * processed string will be suited for RTL layout. Though this function can
     * cover most cases, there are always exceptions. It is suggested to put
     * those exceptions in separate group of CSS string.
     * @param cssStr CSS spefication string.
     */
    function mirrorCSS(cssStr: string): string;
    /**
     * Replace the double and single quote directly after a Hebrew character
     * with GERESH and GERSHAYIM. In such case, most likely that's user
     * intention.
     * @param str String that need to be processed.
     */
    function normalizeHebrewQuote(str: string): string;
    /**
     * Sets text input element's directionality and text alignment based on a
     * given directionality. Does nothing if the given directionality is unknown
     * or neutral.
     * @param element Input field element to set directionality to.
     * @param dir Desired directionality, given in one of the following
     * formats: 1. A goog.i18n.bidi.Dir constant. 2. A number (positive = LRT,
     * negative = RTL, 0 = neutral). 3. A boolean (true = RTL, false = LTR). 4.
     * A null for unknown directionality.
     */
    function setElementDirAndAlign(
        element: GlobalElement|null, dir: number|boolean|null): void;
    /**
     * Sets element dir based on estimated directionality of the given text.
     */
    function setElementDirByTextDirectionality(
        element: GlobalElement, text: string): void;
    /**
     * Check whether the first strongly directional character (if any) is LTR.
     * @param str String being checked.
     * @param opt_isHtml Whether str is HTML / HTML-escaped. Default: false.
     */
    function startsWithLtr(str: string, opt_isHtml?: boolean): boolean;
    /**
     * Check whether the first strongly directional character (if any) is RTL.
     * @param str String being checked.
     * @param opt_isHtml Whether str is HTML / HTML-escaped. Default: false.
     */
    function startsWithRtl(str: string, opt_isHtml?: boolean): boolean;
    /**
     * Convert a directionality given in various formats to a goog.i18n.bidi.Dir
     * constant. Useful for interaction with different standards of
     * directionality representation.
     * @param givenDir Directionality given in one of the following formats: 1.
     * A goog.i18n.bidi.Dir constant. 2. A number (positive = LTR, negative =
     * RTL, 0 = neutral). 3. A boolean (true = RTL, false = LTR). 4. A null for
     * unknown directionality.
     * @param opt_noNeutral Whether a givenDir of zero or
     * goog.i18n.bidi.Dir.NEUTRAL should be treated as null, i.e. unknown, in
     * order to preserve legacy behavior.
     */
    function toDir(givenDir: number|boolean|null, opt_noNeutral?: boolean):
        ಠ_ಠ.clutz.goog.i18n.bidi.Dir|null;
}
declare module 'goog:goog.i18n.bidi' {
    import alias = ಠ_ಠ.clutz.goog.i18n.bidi;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.bidi {
    /**
     * Directionality enum.
     */
    enum Dir {
        LTR,
        NEUTRAL,
        RTL,
    }
}
declare module 'goog:goog.i18n.bidi.Dir' {
    import alias = ಠ_ಠ.clutz.goog.i18n.bidi.Dir;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.bidi {
    /**
     * Strings that have an (optional) known direction.
     *
     * Implementations of this interface are string-like objects that carry an
     * attached direction, if known.
     */
    interface DirectionalString {
        /**
         * Retrieves this object's known direction (if any).
         */
        getDirection(): ಠ_ಠ.clutz.goog.i18n.bidi.Dir|null;
        /**
         * Interface marker of the DirectionalString interface.
         *
         * This property can be used to determine at runtime whether or not an
         * object implements this interface.  All implementations of this
         * interface set this property to {@code true}.
         */
        implementsGoogI18nBidiDirectionalString: boolean;
    }
}
declare module 'goog:goog.i18n.bidi.DirectionalString' {
    import alias = ಠ_ಠ.clutz.goog.i18n.bidi.DirectionalString;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.bidi {
    /**
     * Unicode formatting characters and directionality string constants.
     */
    type Format = string&{clutzEnumBrand: never};
    var Format: {
        LRE: Format,
        LRM: Format,
        PDF: Format,
        RLE: Format,
        RLM: Format,
    };
}
declare module 'goog:goog.i18n.bidi.Format' {
    import alias = ಠ_ಠ.clutz.goog.i18n.bidi.Format;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.collation {
    /**
     * Returns the comparator for a locale. If a locale is not explicitly
     * specified, a comparator for the user's locale will be returned. Note that
     * if the browser does not support locale-sensitive string comparisons, the
     * comparator returned will be a simple codepoint comparator.
     * @param opt_locale the locale that the comparator is used for.
     * @param opt_options the optional set of options for use with the native
     * collator.
     */
    function createComparator(opt_locale?: string, opt_options?: {
        caseFirst?: string,
        ignorePunctuation?: boolean,
        localeMatcher?: string,
        numeric?: boolean,
        sensitivity?: string,
        usage?: string
    }): (a: string, b: string) => number;
    /**
     * Returns true if a locale-sensitive comparator is available for a locale.
     * If a locale is not explicitly specified, the user's locale is used
     * instead.
     * @param opt_locale The locale to be checked.
     */
    function hasNativeComparator(opt_locale?: string): boolean;
}
declare module 'goog:goog.i18n.collation' {
    import alias = ಠ_ಠ.clutz.goog.i18n.collation;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.currency {
    /**
     * This function will add tier2 currency support. Be default, only tier1
     * (most popular currencies) are supported. If an application really needs
     * to support some of the rarely used currencies, it should call this
     * function before any other functions in this namespace.
     */
    function addTier2Support(): void;
    /**
     * Modify currency pattern string by adjusting precision for given currency.
     * Standard currency pattern will have 2 digit after decimal point.
     * Examples:
     * $#,##0.00 ->  $#,##0    (precision == 0)
     * $#,##0.00 ->  $#,##0.0  (precision == 1)
     * $#,##0.00 ->  $#,##0.000  (precision == 3)
     * @param pattern currency pattern string.
     * @param currencyCode 3-letter currency code.
     */
    function adjustPrecision(pattern: string, currencyCode: string): string;
    /**
     * Deprecated.
     * Global currency pattern always uses ISO-4217 currency code as prefix.
     * Local currency sign is added if it is different from currency code. Each
     * currency is unique in this form. The negative side is that ISO code looks
     * weird in some countries as people normally do not use it. Local currency
     * sign alleviates the problem, but also makes it a little verbose.
     * @param currencyCode ISO-4217 3-letter currency code.
     */
    function getGlobalCurrencyPattern(currencyCode: string): string;
    /**
     * Return global currency sign string for those applications
     * that want to handle currency sign themselves.
     * @param currencyCode ISO-4217 3-letter currency code.
     */
    function getGlobalCurrencySign(currencyCode: string): string;
    /**
     * Deprecated.
     * Local currency pattern is the most frequently used pattern in currency's
     * native region. It does not care about how it is distinguished from other
     * currencies.
     * @param currencyCode ISO-4217 3-letter currency code.
     */
    function getLocalCurrencyPattern(currencyCode: string): string;
    /**
     * Returns local currency sign string for those applications that need to
     * handle currency sign separately.
     * @param currencyCode ISO-4217 3-letter currency code.
     */
    function getLocalCurrencySign(currencyCode: string): string;
    /**
     * Deprecated.
     * Portable currency pattern is a compromise between local and global. It is
     * not a mere blend or mid-way between the two. Currency sign is chosen so
     * that it looks familiar to native users. It also has enough information to
     * distinguish itself from other popular currencies in its native region.
     * In this pattern, currency sign symbols that has availability problem in
     * popular fonts are also avoided.
     * @param currencyCode ISO-4217 3-letter currency code.
     */
    function getPortableCurrencyPattern(currencyCode: string): string;
    /**
     * Return portable currency sign string for those applications that need to
     * handle currency sign themselves.
     * @param currencyCode ISO-4217 3-letter currency code.
     */
    function getPortableCurrencySign(currencyCode: string): string;
    /**
     * Tests if currency is available.
     *
     * Note: If the currency is not available it might be in the tier2 currency
     * set:
     * {@link goog.i18n.currency.CurrencyInfoTier2}. If that is the case call
     * {@link goog.i18n.currency.addTier2Support} before calling any other
     * function in this namespace.
     * @param currencyCode Currency code to tested.
     */
    function isAvailable(currencyCode: string): boolean;
    /**
     * This function returns the default currency sign's position. Some
     * applications may want to handle currency sign and currency amount
     * separately. This function can be used in such situations to correctly
     * position the currency sign relative to the amount.
     *
     * Use {@link goog.i18n.NumberFormat#isCurrencyCodeBeforeValue} for a locale
     * aware version of this API (recommended). isPrefixSignPosition() returns
     * the default currency sign's position in the currency's default locale
     * (e.g. 'en' for 'USD'), but most commonly the position is needed for the
     * locale in which the number is going to be displayed. For example, in
     * 'fr' 10.10 USD would be displayed as '10,10 $'.
     * @param currencyCode ISO-4217 3-letter currency code.
     */
    function isPrefixSignPosition(currencyCode: string): boolean;
}
declare module 'goog:goog.i18n.currency' {
    import alias = ಠ_ಠ.clutz.goog.i18n.currency;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.currency {
    /**
     * Tier 1 currency information.
     *
     * The first number in the array is a combination of the precision mask and
     * other flags. The precision mask indicates how many decimal places to show
     * for the currency. Valid values are [0..7]. The position flag indicates
     * whether the currency sign should be positioned after the number. Valid
     * values are 0 (before the number) or 16 (after the number). The space flag
     * indicates whether a space should be inserted between the currency sign
     * and number. Valid values are 0 (no space) and 32 (space).
     *
     * The number in the array is calculated by adding together the mask and
     * flag values. For example:
     *
     * 0: no precision (0), currency sign first (0), no space (0)
     * 2: two decimals precision (2), currency sign first (0), no space (0)
     * 18: two decimals precision (2), currency sign last (16), no space (0)
     * 50: two decimals precision (2), currency sign last (16), space (32)
     *
     * It's not recommended to read this data directly. Format numbers using
     * {@link goog.i18n.NumberFormat} with
     * {@link goog.i18n.NumberFormat.Format.CURRENCY} instead.
     */
    var CurrencyInfo: {[/* warning: coerced from ? */ key: string]: any[]};
}
declare module 'goog:goog.i18n.currency.CurrencyInfo' {
    import alias = ಠ_ಠ.clutz.goog.i18n.currency.CurrencyInfo;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.currency {
    /**
     * Tier 2 currency information.
     *
     * It's not recommended to read this data directly. Format numbers using
     * {@link goog.i18n.NumberFormat} with
     * {@link goog.i18n.NumberFormat.Format.CURRENCY} instead.
     */
    var CurrencyInfoTier2: {[/* warning: coerced from ? */ key: string]: any[]};
}
declare module 'goog:goog.i18n.currency.CurrencyInfoTier2' {
    import alias = ಠ_ಠ.clutz.goog.i18n.currency.CurrencyInfoTier2;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
    /**
     * Deprecated, this data is not being updated. Please use
     * {@link goog.i18n.currency}.
     *
     * The mapping of currency symbol through intl currency code.
     * The source of information is mostly from wikipedia and CLDR. Since there
     * is no authoritative source, items are judged by personal perception.
     *
     * If an application need currency support that available in tier2, it
     * should extend currencyCodeMap to include tier2 data by doing this:
     * goog.object.extend(goog.i18n.currencyCodeMap,
     * goog.i18n.currencyCodeMapTier2);
     */
    var currencyCodeMap: {[key: string]: string};
}
declare module 'goog:goog.i18n.currencyCodeMap' {
    import alias = ಠ_ಠ.clutz.goog.i18n.currencyCodeMap;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n {
    /**
     * Deprecated, this data is not being updated. Please use
     * {@link goog.i18n.currency}.
     *
     * This group of currency data is unlikely to be used. In case they are,
     * program need to merge it into goog.locale.CurrencyCodeMap.
     */
    var currencyCodeMapTier2: {[key: string]: string};
}
declare module 'goog:goog.i18n.currencyCodeMapTier2' {
    import alias = ಠ_ಠ.clutz.goog.i18n.currencyCodeMapTier2;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.mime {
    /**
     * Get an array of UTF-8 hex codes for a given character.
     * @param c The matched character.
     */
    function getHexCharArray(c: string): string[];
}
declare module 'goog:goog.i18n.mime' {
    import alias = ಠ_ಠ.clutz.goog.i18n.mime;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.mime {
    /**
     * Encodes a string for inclusion in a MIME header. The string is encoded
     * in UTF-8 according to RFC 1522, using quoted-printable form.
     * @param str The string to encode.
     * @param opt_noquote Whether double-quote characters should also be escaped
     * (should be true if the result will be placed inside a quoted string for a
     * parameter value in a MIME header).
     */
    function encode(str: string, opt_noquote?: boolean): string;
}
declare module 'goog:goog.i18n.mime.encode' {
    import alias = ಠ_ಠ.clutz.goog.i18n.mime.encode;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.ordinalRules {
    /**
     * Ordinal pattern keyword
     */
    type Keyword = string&{clutzEnumBrand: never};
    var Keyword: {
        FEW: Keyword,
        MANY: Keyword,
        ONE: Keyword,
        OTHER: Keyword,
        TWO: Keyword,
        ZERO: Keyword,
    };
    /**
     * Ordinal selection function.
     *
     * The actual implementation is locale-dependent.
     * @param n The count of items.
     * @param opt_precision optional, precision.
     */
    function select(
        a: number, b?: number): ಠ_ಠ.clutz.goog.i18n.ordinalRules.Keyword;
}
declare module 'goog:goog.i18n.ordinalRules' {
    import alias = ಠ_ಠ.clutz.goog.i18n.ordinalRules;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.pluralRules {
    /**
     * Plural pattern keyword
     */
    type Keyword = string&{clutzEnumBrand: never};
    var Keyword: {
        FEW: Keyword,
        MANY: Keyword,
        ONE: Keyword,
        OTHER: Keyword,
        TWO: Keyword,
        ZERO: Keyword,
    };
    /**
     * Plural selection function.
     *
     * The actual implementation is locale-dependent.
     * @param n The count of items.
     * @param opt_precision optional, precision.
     */
    function select(
        a: number, b?: number): ಠ_ಠ.clutz.goog.i18n.pluralRules.Keyword;
}
declare module 'goog:goog.i18n.pluralRules' {
    import alias = ಠ_ಠ.clutz.goog.i18n.pluralRules;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.uChar {
    /**
     * Composes a supplementary Unicode code point from the given UTF-16
     * surrogate pair. If leadSurrogate isn't a leading surrogate code point or
     * trailSurrogate isn't a trailing surrogate code point, null is returned.
     * @param lead The leading surrogate code point.
     * @param trail The trailing surrogate code point.
     */
    function buildSupplementaryCodePoint(lead: number, trail: number): number|
        null;
    /**
     * Determines the length of the string needed to represent the specified
     * Unicode code point.
     */
    function charCount(codePoint: number): number;
    /**
     * Gets a character from the given Unicode value. If the given code point is
     * not a valid Unicode code point, null is returned.
     * @param code The Unicode value of the character.
     */
    function fromCharCode(code: number): string|null;
    /**
     * Returns the Unicode code point at the specified index.
     *
     * If the char value specified at the given index is in the
     * leading-surrogate range, and the following index is less than the length
     * of {@code string}, and the char value at the following index is in the
     * trailing-surrogate range, then the supplementary code point corresponding
     * to this surrogate pair is returned.
     *
     * If the char value specified at the given index is in the
     * trailing-surrogate range, and the preceding index is not before the start
     * of {@code string}, and the char value at the preceding index is in the
     * leading-surrogate range, then the negated supplementary code point
     * corresponding to this surrogate pair is returned.
     *
     * The negation allows the caller to differentiate between the case where
     * the given index is at the leading surrogate and the one where it is at
     * the trailing surrogate, and thus deduce where the next character starts
     * and preceding character ends.
     *
     * Otherwise, the char value at the given index is returned. Thus, a leading
     * surrogate is returned when it is not followed by a trailing surrogate,
     * and a trailing surrogate is returned when it is not preceded by a leading
     * surrogate.
     * @param string The string.
     * @param index The index from which the code point is to be retrieved.
     */
    function getCodePointAround(string: string, index: number): number;
    /**
     * Gets whether the given code point is a leading surrogate character.
     */
    function isLeadSurrogateCodePoint(codePoint: number): boolean;
    /**
     * Determines whether the specified Unicode code point is in the
     * supplementary Unicode characters range.
     */
    function isSupplementaryCodePoint(codePoint: number): boolean;
    /**
     * Gets whether the given code point is a trailing surrogate character.
     */
    function isTrailSurrogateCodePoint(codePoint: number): boolean;
    /**
     * Gets Unicode value of the given character.
     * @param ch The given character, which in the case of a supplementary
     * character is actually a surrogate pair. The remainder of the string is
     * ignored.
     */
    function toCharCode(ch: string): number;
    /**
     * Gets the U+ notation string of a Unicode character. Ex: 'U+0041' for 'A'.
     * @param ch The given character.
     */
    function toHexString(ch: string): string;
}
declare module 'goog:goog.i18n.uChar' {
    import alias = ಠ_ಠ.clutz.goog.i18n.uChar;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.uChar {
    /**
     * Builds the NameFetcherLocal object. This is a simple object which
     * retrieves character names from a local bundled database. This database
     * only covers invisible characters. See the goog.i18n.uChar class for more
     * details.
     */
    class LocalNameFetcher extends LocalNameFetcher_Instance {}
    class LocalNameFetcher_Instance implements
        ಠ_ಠ.clutz.goog.i18n.uChar.NameFetcher {
        private noStructuralTyping_: any;
        getName(character: string, callback: (a: string|null) => any): void;
        isNameAvailable(character: string): boolean;
        prefetch(character: string): void;
    }
}
declare module 'goog:goog.i18n.uChar.LocalNameFetcher' {
    import alias = ಠ_ಠ.clutz.goog.i18n.uChar.LocalNameFetcher;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.uChar {
    /**
     * NameFetcher interface. Implementations of this interface are used to
     * retrieve Unicode character names.
     */
    interface NameFetcher {
        /**
         * Retrieves the name of a particular character.
         * @param character The character to retrieve.
         * @param callback The callback function called when the name retrieval
         * is complete, contains a single string parameter with the codepoint
         * name, this parameter will be null if the character name is not
         * defined.
         */
        getName(character: string, callback: (a: string|null) => any): void;
        /**
         * Tests whether the name of a given character is available to be
         * retrieved by the getName() function.
         * @param character The character to test.
         */
        isNameAvailable(character: string): boolean;
        /**
         * Retrieves the names of a given set of characters and stores them in a
         * cache for fast retrieval. Offline implementations can simply provide
         * an empty implementation.
         * @param characters The list of characters in base 88 to fetch. These
         * lists are stored by category and subcategory in the
         * goog.i18n.charpickerdata class.
         */
        prefetch(characters: string): void;
    }
}
declare module 'goog:goog.i18n.uChar.NameFetcher' {
    import alias = ಠ_ಠ.clutz.goog.i18n.uChar.NameFetcher;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.uChar {
    /**
     * Builds the RemoteNameFetcher object. This object retrieves codepoint
     * names from a remote data source.
     */
    class RemoteNameFetcher extends RemoteNameFetcher_Instance {}
    class RemoteNameFetcher_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance
        implements ಠ_ಠ.clutz.goog.i18n.uChar.NameFetcher {
        /**
         * Builds the RemoteNameFetcher object. This object retrieves codepoint
         * names from a remote data source.
         * @param dataSourceUri URI to the data source.
         */
        constructor(dataSourceUri: string);
        disposeInternal(): void;
        getName(character: string, callback: (a: string|null) => any): void;
        isNameAvailable(character: string): boolean;
        prefetch(characters: string): void;
    }
}
declare module 'goog:goog.i18n.uChar.RemoteNameFetcher' {
    import alias = ಠ_ಠ.clutz.goog.i18n.uChar.RemoteNameFetcher;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.i18n.uCharNames {
    /**
     * Sets up the character map, lazily.  Some characters are indexed by their
     * decimal value.
     */
    function createCharData(): void;
    /**
     * Gets the name of a character, if available, returns null otherwise.
     * @param ch The character.
     */
    function toName(ch: string): string|null;
}
declare module 'goog:goog.i18n.uCharNames' {
    import alias = ಠ_ಠ.clutz.goog.i18n.uCharNames;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.iter {
    /**
     * Implements the {@code goog.iter.groupBy} iterator.
     */
    class GroupByIterator_<KEY = any, VALUE = any> extends
        GroupByIterator__Instance<KEY, VALUE> {}
    class GroupByIterator__Instance<KEY = any, VALUE = any> extends
        ಠ_ಠ.clutz.goog.iter.Iterator_Instance<any[]> {
        /**
         * The current key visited during iteration.
         */
        currentKey: KEY;
        /**
         * The current value being added to the group.
         */
        currentValue: VALUE;
        /**
         * The iterable to group, coerced to an iterator.
         */
        iterator: ಠ_ಠ.clutz.goog.iter.Iterator<any>;
        /**
         * A function for determining the key value for each element in the
         * iterable. If no function is provided, the identity function is used
         * and returns the element unchanged.
         */
        keyFunc(a: VALUE): KEY;
        /**
         * The target key for determining the start of a group.
         */
        targetKey: KEY;
        next(): any[];
    }
    /**
     * Creates an iterator that returns running totals from the numbers in
     * {@code iterable}. For example, the array {@code [1, 2, 3, 4, 5]} yields
     * {@code 1 -> 3 -> 6 -> 10 -> 15}.
     * @param iterable The iterable of numbers to accumulate.
     */
    function accumulate(iterable: {length: number}|{__iterator__: any}):
        ಠ_ಠ.clutz.goog.iter.Iterator<number>;
    /**
     * Takes zero or more iterables and returns one iterator that will iterate
     * over them in the order chained.
     * @param var_args Any number of iterable objects.
     */
    function chain<VALUE = any>(...var_args: (
        ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>|{length: number}|
        {__iterator__: any}|undefined)[]): ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>;
    /**
     * Takes a single iterable containing zero or more iterables and returns one
     * iterator that will iterate over each one in the order given.
     * @param iterable The iterable of iterables to chain.
     */
    function chainFromIterable<VALUE = any>(
        iterable: null | {length: number} |
        {__iterator__: any}): ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>;
    /**
     * Creates an iterator that returns combinations of elements from
     * {@code iterable}.
     *
     * Combinations are obtained by taking the {@see goog.iter#permutations} of
     * {@code iterable} and filtering those whose elements appear in the order
     * they are encountered in {@code iterable}. For example, the 3-length
     * combinations of {@code [0,1,2,3]} are {@code [[0,1,2], [0,1,3], [0,2,3],
     * [1,2,3]]}.
     * @param iterable The iterable from which to generate combinations.
     * @param length The length of each combination.
     */
    function combinations<VALUE = any>(
        iterable: ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>| {length: number} |
            {__iterator__: any},
        length: number): ಠ_ಠ.clutz.goog.iter.Iterator<VALUE[]>;
    /**
     * Creates an iterator that returns combinations of elements from
     * {@code iterable}, with repeated elements possible.
     *
     * Combinations are obtained by taking the Cartesian product of {@code
     * length} iterables and filtering those whose elements appear in the order
     * they are encountered in {@code iterable}. For example, the 2-length
     * combinations of
     * {@code [1,2,3]} are {@code [[1,1], [1,2], [1,3], [2,2], [2,3], [3,3]]}.
     * @param iterable The iterable to combine.
     * @param length The length of each combination.
     */
    function combinationsWithReplacement<VALUE = any>(
        iterable: ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>| {length: number} |
            {__iterator__: any},
        length: number): ಠ_ಠ.clutz.goog.iter.Iterator<VALUE[]>;
    /**
     * Creates an iterator that filters {@code iterable} based on a series of
     * {@code selectors}. On each call to {@code next()}, one item is taken from
     * both the {@code iterable} and {@code selectors} iterators. If the item
     * from
     * {@code selectors} evaluates to true, the item from {@code iterable} is
     * given. Otherwise, it is skipped. Once either {@code iterable} or {@code
     * selectors} is exhausted, subsequent calls to {@code next()} will throw
     * {@code goog.iter.StopIteration}.
     * @param iterable The iterable to filter.
     * @param selectors An iterable of items to be evaluated in a boolean
     * context to determine if the corresponding element in {@code iterable}
     * should be included in the result.
     */
    function compress<VALUE = any>(
        iterable: ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>| {length: number} |
            {__iterator__: any},
        selectors: ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>| {length: number} |
            {__iterator__: any}): ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>;
    /**
     * Creates an iterator that is advanced {@code count} steps ahead. Consumed
     * values are silently discarded. If {@code count} is greater than the
     * number of elements in {@code iterable}, an empty iterator is returned.
     * Subsequent calls to {@code next()} will throw {@code
     * goog.iter.StopIteration}.
     * @param iterable The iterable to consume.
     * @param count The number of elements to consume from the iterator.
     */
    function consume<VALUE = any>(
        iterable: ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>| {length: number} |
            {__iterator__: any},
        count: number): ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>;
    /**
     * Creates an iterator that counts indefinitely from a starting value.
     * @param opt_start The starting value. Default is 0.
     * @param opt_step The number to increment with between each call to next.
     * Negative and floating point numbers are allowed. Default is 1.
     */
    function count(opt_start?: number, opt_step?: number):
        ಠ_ಠ.clutz.goog.iter.Iterator<number>;
    /**
     * Create an iterator to cycle over the iterable's elements indefinitely.
     * For example, ([1, 2, 3]) would return : 1, 2, 3, 1, 2, 3, ...
     * @param iterable The iterable object.
     */
    function cycle<VALUE = any>(
        iterable: ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>| {length: number} |
        {__iterator__: any}): ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>;
    /**
     * Builds a new iterator that iterates over the original, but skips elements
     * as long as a supplied function returns true.
     * @param iterable The iterator object.
     * @param f The function to call for every value. This function takes 3
     * arguments (the value, undefined, and the iterator) and should return a
     * boolean.
     * @param opt_obj The object to be used as the value of 'this' within {@code
     * f}.
     */
    function dropWhile<THIS = any, VALUE = any>(
        iterable: ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>| null | {length: number} |
            {__iterator__: any},
        f: (a: VALUE, b: undefined, c: ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>) =>
            boolean,
        opt_obj?: THIS): ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>;
    /**
     * Creates an iterator that returns arrays containing a count and an element
     * obtained from the given {@code iterable}.
     * @param iterable The iterable to enumerate.
     * @param opt_start Optional starting value. Default is 0.
     */
    function enumerate<VALUE = any>(
        iterable: ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>| {length: number} |
            {__iterator__: any},
        opt_start?: number): ಠ_ಠ.clutz.goog.iter.Iterator<any[]>;
    /**
     * Iterates over two iterables and returns true if they contain the same
     * sequence of elements and have the same length.
     * @param iterable1 The first iterable object.
     * @param iterable2 The second iterable object.
     * @param opt_equalsFn Optional comparison function. Should take two
     * arguments to compare, and return true if the arguments are equal.
     * Defaults to {@link goog.array.defaultCompareEquality} which compares the
     * elements using the built-in '===' operator.
     */
    function equals<VALUE = any>(
        iterable1: ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>| {length: number} |
            {__iterator__: any},
        iterable2: ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>| {length: number} |
            {__iterator__: any},
        opt_equalsFn?: (a: VALUE, b: VALUE) => boolean): boolean;
    /**
     * Goes through the values in the iterator. Calls f for each of these and if
     * any of them returns false this returns false (without checking the rest).
     * If all return true this will return true.
     * @param iterable The iterator object.
     * @param f The function to call for every value. This function takes 3
     * arguments (the value, undefined, and the iterator) and should return a
     * boolean.
     * @param opt_obj The object to be used as the value of 'this' within {@code
     * f}.
     */
    function every<THIS = any, VALUE = any>(
        iterable: ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>| null | {length: number} |
            {__iterator__: any},
        f: (a: VALUE, b: undefined, c: ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>) =>
            boolean,
        opt_obj?: THIS): boolean;
    /**
     * Calls a function for every element in the iterator, and if the function
     * returns true adds the element to a new iterator.
     * @param iterable The iterator to iterate over.
     * @param f The function to call for every element. This function takes 3
     * arguments (the element, undefined, and the iterator) and should return a
     * boolean. If the return value is true the element will be included in the
     * returned iterator.  If it is false the element is not included.
     * @param opt_obj The object to be used as the value of 'this' within {@code
     * f}.
     */
    function filter<THIS = any, VALUE = any>(
        iterable: ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>| null | {length: number} |
            {__iterator__: any},
        f: (a: VALUE, b: undefined, c: ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>) =>
            boolean,
        opt_obj?: THIS): ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>;
    /**
     * Calls a function for every element in the iterator, and if the function
     * returns false adds the element to a new iterator.
     * @param iterable The iterator to iterate over.
     * @param f The function to call for every element. This function takes 3
     * arguments (the element, undefined, and the iterator) and should return a
     * boolean. If the return value is false the element will be included in the
     * returned iterator.  If it is true the element is not included.
     * @param opt_obj The object to be used as the value of 'this' within {@code
     * f}.
     */
    function filterFalse<THIS = any, VALUE = any>(
        iterable: ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>| null | {length: number} |
            {__iterator__: any},
        f: (a: VALUE, b: undefined, c: ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>) =>
            boolean,
        opt_obj?: THIS): ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>;
    /**
     * Calls a function for each element in the iterator with the element of the
     * iterator passed as argument.
     * @param iterable The iterator to iterate over. If the iterable is an
     * object {@code toIterator} will be called on it.
     * @param f The function to call for every element.  This function takes 3 arguments (the element, undefined, and the iterator) and the return value is irrelevant.  The reason for passing undefined as the second argument is so that the same function can be used in {@see goog.array#forEach} as well as others.  The third parameter is of type "number" for arraylike objects, undefined, otherwise.
     * @param opt_obj The object to be used as the value of 'this' within {@code
     * f}.
     */
    function forEach<THIS = any, VALUE = any>(
        iterable: ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>| null | {length: number} |
            {__iterator__: any},
        f: (a: VALUE, b: any, c: ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>) => any,
        opt_obj?: THIS): void;
    /**
     * Creates an iterator that returns arrays containing elements from the
     * {@code iterable} grouped by a key value. For iterables with repeated
     * elements (i.e. sorted according to a particular key function), this
     * function has a {@code uniq}-like effect. For example, grouping the array:
     * {@code [A, B, B, C, C, A]} produces
     * {@code [A, [A]], [B, [B, B]], [C, [C, C]], [A, [A]]}.
     * @param iterable The iterable to group.
     * @param opt_keyFunc Optional function for determining the key value for
     * each group in the {@code iterable}. Default is the identity function.
     */
    function groupBy<KEY = any, VALUE = any>(
        iterable: ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>| {length: number} |
            {__iterator__: any},
        opt_keyFunc?: (a: VALUE) => KEY): ಠ_ಠ.clutz.goog.iter.Iterator<any[]>;
    /**
     * Joins the values in a iterator with a delimiter.
     * @param iterable The iterator to get the values from.
     * @param deliminator The text to put between the values.
     */
    function join<VALUE = any>(
        iterable: ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>| null | {length: number} |
            {__iterator__: any},
        deliminator: string): string;
    /**
     * Creates an iterator that returns the first {@code limitSize} elements
     * from an iterable. If this number is greater than the number of elements
     * in the iterable, all the elements are returned.
     * @param iterable The iterable to limit.
     * @param limitSize The maximum number of elements to return.
     */
    function limit<VALUE = any>(
        iterable: ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>| {length: number} |
            {__iterator__: any},
        limitSize: number): ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>;
    /**
     * For every element in the iterator call a function and return a new
     * iterator with that value.
     * @param iterable The iterator to iterate over.
     * @param f The function to call for every element.  This function takes 3
     * arguments (the element, undefined, and the iterator) and should return a
     * new value.
     * @param opt_obj The object to be used as the value of 'this' within {@code
     * f}.
     */
    function map<THIS = any, VALUE = any, RESULT = any>(
        iterable: ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>| {length: number} |
            {__iterator__: any},
        f: (a: VALUE, b: undefined, c: ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>) =>
            RESULT,
        opt_obj?: THIS): ಠ_ಠ.clutz.goog.iter.Iterator<RESULT>;
    /**
     * Advances the iterator to the next position, returning the given default
     * value instead of throwing an exception if the iterator has no more
     * entries.
     * @param iterable The iterable object.
     * @param defaultValue The value to return if the iterator is empty.
     */
    function nextOrValue<VALUE = any>(
        iterable: ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>| null | {length: number} |
            {__iterator__: any},
        defaultValue: VALUE): VALUE;
    /**
     * Creates an iterator that returns permutations of elements in
     * {@code iterable}.
     *
     * Permutations are obtained by taking the Cartesian product of
     * {@code opt_length} iterables and filtering out those with repeated
     * elements. For example, the permutations of {@code [1,2,3]} are
     * {@code [[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]]}.
     * @param iterable The iterable from which to generate permutations.
     * @param opt_length Length of each permutation. If omitted, defaults to the
     * length of {@code iterable}.
     */
    function permutations<VALUE = any>(
        iterable: ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>| {length: number} |
            {__iterator__: any},
        opt_length?: number): ಠ_ಠ.clutz.goog.iter.Iterator<VALUE[]>;
    /**
     * Cartesian product of zero or more sets.  Gives an iterator that gives
     * every combination of one element chosen from each set.  For example,
     * ([1, 2], [3, 4]) gives ([1, 3], [1, 4], [2, 3], [2, 4]).
     * @param var_args Zero or more sets, as arrays.
     */
    function product<VALUE = any>(...var_args: (ArrayLike<VALUE>|undefined)[]):
        ಠ_ಠ.clutz.goog.iter.Iterator<VALUE[]>;
    /**
     * Creates a new iterator that returns the values in a range.  This function
     * can take 1, 2 or 3 arguments:
     * <pre>
     * range(5) same as range(0, 5, 1)
     * range(2, 5) same as range(2, 5, 1)
     * </pre>
     * @param startOrStop The stop value if only one argument is provided. The
     * start value if 2 or more arguments are provided.  If only one argument is
     * used the start value is 0.
     * @param opt_stop The stop value.  If left out then the first argument is
     * used as the stop value.
     * @param opt_step The number to increment with between each call to next.
     * This can be negative.
     */
    function range(startOrStop: number, opt_stop?: number, opt_step?: number):
        ಠ_ಠ.clutz.goog.iter.Iterator<number>;
    /**
     * Passes every element of an iterator into a function and accumulates the
     * result.
     * @param iterable The iterator to iterate over.
     * @param f The function to call for every element. This function takes 2
     * arguments (the function's previous result or the initial value, and the
     * value of the current element). function(previousValue, currentElement) :
     * newValue.
     * @param val The initial value to pass into the function on the first call.
     * @param opt_obj The object to be used as the value of 'this' within f.
     */
    function reduce<THIS = any, VALUE = any>(
        iterable: ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>| null | {length: number} |
            {__iterator__: any},
        f: (a: VALUE, b: VALUE) => VALUE, val: VALUE, opt_obj?: THIS): VALUE;
    /**
     * Creates an iterator that returns the same object or value repeatedly.
     * @param value Any object or value to repeat.
     */
    function repeat<VALUE = any>(value: VALUE):
        ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>;
    /**
     * Creates an iterator that returns a range of elements from an iterable.
     * Similar to {@see goog.array#slice} but does not support negative indexes.
     * @param iterable The iterable to slice.
     * @param start The index of the first element to return.
     * @param opt_end The index after the last element to return. If defined,
     * must be greater than or equal to {@code start}.
     */
    function slice<VALUE = any>(
        iterable: ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>| {length: number} |
            {__iterator__: any},
        start: number, opt_end?: number): ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>;
    /**
     * Goes through the values in the iterator. Calls f for each of these, and
     * if any of them returns true, this returns true (without checking the
     * rest). If all return false this will return false.
     * @param iterable The iterator object.
     * @param f The function to call for every value. This function takes 3
     * arguments (the value, undefined, and the iterator) and should return a
     * boolean.
     * @param opt_obj The object to be used as the value of 'this' within {@code
     * f}.
     */
    function some<THIS = any, VALUE = any>(
        iterable: ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>| null | {length: number} |
            {__iterator__: any},
        f: (a: VALUE, b: undefined, c: ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>) =>
            boolean,
        opt_obj?: THIS): boolean;
    /**
     * Gives an iterator that gives the result of calling the given function
     * <code>f</code> with the arguments taken from the next element from
     * <code>iterable</code> (the elements are expected to also be iterables).
     *
     * Similar to {@see goog.iter#map} but allows the function to accept multiple
     * arguments from the iterable.
     * @param iterable The iterable of iterables to iterate over.
     * @param f The function to call for every element.  This function takes N+2
     * arguments, where N represents the number of items from the next element
     * of the iterable. The two additional arguments passed to the function are
     * undefined and the iterator itself. The function should return a new
     * value.
     * @param opt_obj The object to be used as the value of 'this' within {@code
     * f}.
     */
    function starMap<THIS = any, RESULT = any>(
        iterable: {length: number} | {__iterator__: any},
        f: (...a: any[]) => RESULT,
        opt_obj?: THIS): ಠ_ಠ.clutz.goog.iter.Iterator<RESULT>;
    /**
     * Builds a new iterator that iterates over the original, but only as long
     * as a supplied function returns true.
     * @param iterable The iterator object.
     * @param f The function to call for every value. This function takes 3
     * arguments (the value, undefined, and the iterator) and should return a
     * boolean.
     * @param opt_obj This is used as the 'this' object in f when called.
     */
    function takeWhile<THIS = any, VALUE = any>(
        iterable: ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>| null | {length: number} |
            {__iterator__: any},
        f: (a: VALUE, b: undefined, c: ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>) =>
            boolean,
        opt_obj?: THIS): ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>;
    /**
     * Returns an array of iterators each of which can iterate over the values
     * in
     * {@code iterable} without advancing the others.
     * @param iterable The iterable to tee.
     * @param opt_num The number of iterators to create. Default is 2.
     */
    function tee<VALUE = any>(
        iterable: ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>| {length: number} |
            {__iterator__: any},
        opt_num?: number): (ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>|null)[];
    /**
     * Converts the iterator to an array
     * @param iterable The iterator to convert to an array.
     */
    function toArray<VALUE = any>(
        iterable: ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>| null | {length: number} |
        {__iterator__: any}): VALUE[];
    /**
     * Returns an iterator that knows how to iterate over the values in the
     * object.
     * @param iterable If the object is an iterator it will be returned as is.
     * If the object has an {@code __iterator__} method that will be called to
     * get the value iterator.  If the object is an array-like object we create
     * an iterator for that.
     */
    function toIterator<VALUE = any>(
        iterable: ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>| null | {length: number} |
        {__iterator__: any}): ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>;
    /**
     * Creates an iterator that returns arrays containing the ith elements from
     * the provided iterables. The returned arrays will be the same size as the
     * number of iterables given in {@code var_args}. Once the shortest iterable
     * is exhausted, subsequent calls to {@code next()} will throw
     * {@code goog.iter.StopIteration}.
     * @param var_args Any number of iterable objects.
     */
    function zip<VALUE = any>(...var_args: (ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>|
                                            {length: number}|
                                            {__iterator__: any}|undefined)[]):
        ಠ_ಠ.clutz.goog.iter.Iterator<VALUE[]>;
    /**
     * Creates an iterator that returns arrays containing the ith elements from
     * the provided iterables. The returned arrays will be the same size as the
     * number of iterables given in {@code var_args}. Shorter iterables will be
     * extended with {@code fillValue}. Once the longest iterable is exhausted,
     * subsequent calls to {@code next()} will throw {@code
     * goog.iter.StopIteration}.
     * @param fillValue The object or value used to fill shorter iterables.
     * @param var_args Any number of iterable objects.
     */
    function zipLongest<VALUE = any>(
        fillValue: VALUE,
        ...var_args: (ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>|{length: number}|
                      {__iterator__: any}|
                      undefined)[]): ಠ_ಠ.clutz.goog.iter.Iterator<VALUE[]>;
}
declare module 'goog:goog.iter' {
    import alias = ಠ_ಠ.clutz.goog.iter;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.iter {
    type Iterable = null|{length: number}|{__iterator__: any};
}
declare module 'goog:goog.iter.Iterable' {
    import alias = ಠ_ಠ.clutz.goog.iter.Iterable;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.iter {
    /**
     * Class/interface for iterators.  An iterator needs to implement a {@code
     * next} method and it needs to throw a {@code goog.iter.StopIteration} when
     * the iteration passes beyond the end.  Iterators have no {@code hasNext}
     * method. It is recommended to always use the helper functions to iterate
     * over the iterator or in case you are only targeting JavaScript 1.7 for in
     * loops.
     */
    class Iterator<VALUE = any> extends Iterator_Instance<VALUE> {}
    class Iterator_Instance<VALUE = any> {
        private noStructuralTyping_: any;
        /**
         * Returns the {@code Iterator} object itself.  This is used to
         * implement the iterator protocol in JavaScript 1.7
         * @param opt_keys Whether to return the keys or values. Default is to
         * only return the values.  This is being used by the for-in loop (true)
         * and the for-each-in loop (false).  Even though the param gives a hint
         * about what the iterator will return there is no guarantee that it
         * will return the keys when true is passed.
         */
        __iterator__(opt_keys?: boolean): ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>;
        /**
         * Returns the next value of the iteration.  This will throw the object
         * {@see goog.iter#StopIteration} when the iteration passes the end.
         */
        next(): VALUE;
    }
}
declare module 'goog:goog.iter.Iterator' {
    import alias = ಠ_ಠ.clutz.goog.iter.Iterator;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.iter {
    /**
     * Singleton Error object that is used to terminate iterations.
     */
    var StopIteration: GlobalError;
}
declare module 'goog:goog.iter.StopIteration' {
    import alias = ಠ_ಠ.clutz.goog.iter.StopIteration;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.module$exports$goog$iter$es6 {
    /**
     * Concrete ES6 `Iterator` that also implements `ShimIterable`.
     */
    class ShimEs6Iterator<VALUE = any> extends ShimEs6Iterator_Instance<VALUE> {
    }
    class ShimEs6Iterator_Instance<VALUE = any> extends
        module$contents$goog$iter$es6_ShimIterableImpl_Instance<VALUE>
            implements IterableIterator<VALUE> {
        /**
         * Concrete ES6 `Iterator` that also implements `ShimIterable`.
         */
        constructor(iter: Iterator<VALUE>);
        next(value?: any): IteratorResult<VALUE>;
        [Symbol.iterator](): IterableIterator<VALUE>;
        toEs6(): ShimEs6Iterator<VALUE|null>;
        toGoog(): ShimGoogIterator<VALUE|null>;
    }
    /**
     * Concrete `goog.iter.Iterator` subclass that also implements
     * `ShimIterable`.
     */
    class ShimGoogIterator<VALUE = any> extends
        ShimGoogIterator_Instance<VALUE> {}
    class ShimGoogIterator_Instance<VALUE = any> extends
        ಠ_ಠ.clutz.goog.iter.Iterator_Instance<VALUE> implements
            ಠ_ಠ.clutz.module$exports$goog$iter$es6.ShimIterable<any> {
        /**
         * Concrete `goog.iter.Iterator` subclass that also implements
         * `ShimIterable`.
         */
        constructor(iter: Iterator<VALUE>);
        iter_: Iterator<VALUE>;
        __iterator__(a?: boolean): ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>;
        next(): VALUE;
        toEs6(): ShimEs6Iterator<VALUE|null>;
        toGoog(): ShimGoogIterator<VALUE|null>;
        [Symbol.iterator](): IterableIterator<VALUE>;
    }
    /**
     * Common interface extending both `goog.iter.Iterable` and ES6 `Iterable`,
     * and providing `toGoog()` and `toEs6()` methods to get either kind
     * of iterator.  `ShimIterable.of()` is the primary entry point for
     * this library.  If it is given an iterable that is *not* also an
     * iterator, then it will inherit any reusability from its argument
     * (i.e. `ShimIterable.of(mySet)` will be reusable, since mySet makes
     * a fresh Iterator every time, whereas `ShimIterable.of(myIterator)`
     * will be one-shot).
     *
     * `ShimGoogIterator` and `ShimEs6Iterator` extend `ShimIterable` and
     * also implement one or the other iterator API.  Since they extend
     * `ShimIterable`, it is easy to convert back and forth between the two
     * APIs.  Any such conversion will expose a view to the same underlying
     * iterator, so elements pulled via one API will not be available from
     * the other.
     */
    interface ShimIterable<VALUE = any> extends Iterable<VALUE> {
        __iterator__(): ಠ_ಠ.clutz.goog.iter.Iterator<VALUE>;
        toEs6(): ಠ_ಠ.clutz.module$exports$goog$iter$es6.ShimEs6Iterator<any>;
        toGoog(): ಠ_ಠ.clutz.module$exports$goog$iter$es6.ShimGoogIterator<any>;
    }
}
declare module 'goog:goog.iter.es6' {
    import alias = ಠ_ಠ.clutz.module$exports$goog$iter$es6;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.json {
    var TRY_NATIVE_JSON: boolean;
    var USE_NATIVE_JSON: boolean;
    /**
     * Tests if a string is an invalid JSON string. This only ensures that we
     * are not using any invalid characters
     * @param s The string to test.
     */
    function isValid(s: string): boolean;
    /**
     * Parses a JSON string and returns the result. This throws an exception if
     * the string is an invalid JSON string.
     *
     * Note that this is very slow on large strings. Use JSON.parse if possible.
     * @param s The JSON string to parse.
     */
    function parse(a: any): GlobalObject|null;
    /**
     * Serializes an object or a value to a JSON string.
     * @param object The object to serialize.
     * @param opt_replacer A replacer function called for each (key, value) pair
     * that determines how the value should be serialized. By defult, this just
     * returns the value and allows default serialization to kick in.
     */
    function serialize(a: any, b?: (ಠ_ಠ.clutz.goog.json.Replacer)|null): string;
    /**
     * Sets an error logger to use if there's a recoverable parsing error and
     * {@code goog.json.TRY_NATIVE_JSON} is enabled.
     * @param errorLogger The first parameter is the error message, the second
     * is the exception thrown by {@code JSON.parse}.
     */
    function setErrorLogger(errorLogger: (a: string, b: GlobalError) => any):
        void;
}
declare module 'goog:goog.json' {
    import alias = ಠ_ಠ.clutz.goog.json;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.json {
    /**
     * A class that parses and stringifies JSON using eval (as implemented in
     * goog.json).
     * Adapts {@code goog.json} to the {@code goog.json.Processor} interface.
     */
    class EvalJsonProcessor extends EvalJsonProcessor_Instance {}
    class EvalJsonProcessor_Instance implements ಠ_ಠ.clutz.goog.json.Processor {
        private noStructuralTyping_: any;
        /**
         * A class that parses and stringifies JSON using eval (as implemented
         * in goog.json). Adapts {@code goog.json} to the {@code
         * goog.json.Processor} interface.
         * @param opt_replacer An optional replacer to use during serialization.
         * @param opt_useUnsafeParsing Whether to skip validation before
         * evaluating. Safe parsing is very slow on large strings. On the other
         * hand, unsafe parsing uses eval() without checking whether the string
         * is valid, so it should only be used if you trust the source of the
         * string.
         */
        constructor(
            opt_replacer?: (ಠ_ಠ.clutz.goog.json.Replacer)|null,
            opt_useUnsafeParsing?: boolean|null);
        parse(s: string): any;
        stringify(object: any): string;
    }
}
declare module 'goog:goog.json.EvalJsonProcessor' {
    import alias = ಠ_ಠ.clutz.goog.json.EvalJsonProcessor;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.json {
    /**
     * A class that parses and stringifies JSON using the browser's built-in
     * JSON library, if it is available.
     *
     * Note that the native JSON api has subtle differences across browsers, so
     * use this implementation with care.  See json_test#assertSerialize
     * for details on the differences from goog.json.
     *
     * This implementation is signficantly faster than goog.json, at least on
     * Chrome.  See json_perf.html for a perf test showing the difference.
     */
    class NativeJsonProcessor extends NativeJsonProcessor_Instance {}
    class NativeJsonProcessor_Instance implements
        ಠ_ಠ.clutz.goog.json.Processor {
        private noStructuralTyping_: any;
        /**
         * A class that parses and stringifies JSON using the browser's built-in
         * JSON library, if it is available.
         *
         * Note that the native JSON api has subtle differences across browsers,
         * so use this implementation with care.  See json_test#assertSerialize
         * for details on the differences from goog.json.
         *
         * This implementation is signficantly faster than goog.json, at least
         * on Chrome.  See json_perf.html for a perf test showing the
         * difference.
         * @param opt_replacer An optional replacer to use during serialization.
         * @param opt_reviver An optional reviver to use during parsing.
         */
        constructor(
            opt_replacer?: (ಠ_ಠ.clutz.goog.json.Replacer)|null,
            opt_reviver?: (ಠ_ಠ.clutz.goog.json.Reviver)|null);
        parse(s: string): any;
        stringify(object: any): string;
    }
}
declare module 'goog:goog.json.NativeJsonProcessor' {
    import alias = ಠ_ಠ.clutz.goog.json.NativeJsonProcessor;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.json {
    /**
     * An interface for JSON parsing and serialization.
     */
    interface Processor extends ಠ_ಠ.clutz.goog.string.Parser,
                                ಠ_ಠ.clutz.goog.string.Stringifier {}
}
declare module 'goog:goog.json.Processor' {
    import alias = ಠ_ಠ.clutz.goog.json.Processor;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.json {
    /**
     * JSON replacer, as defined in Section 15.12.3 of the ES5 spec.
     */
    type Replacer = (a: string, b: any) => any;
}
declare module 'goog:goog.json.Replacer' {
    import alias = ಠ_ಠ.clutz.goog.json.Replacer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.json {
    /**
     * JSON reviver, as defined in Section 15.12.2 of the ES5 spec.
     */
    type Reviver = (a: string, b: any) => any;
}
declare module 'goog:goog.json.Reviver' {
    import alias = ಠ_ಠ.clutz.goog.json.Reviver;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.json {
    /**
     * Class that is used to serialize JSON objects to a string.
     */
    class Serializer extends Serializer_Instance {}
    class Serializer_Instance {
        private noStructuralTyping_: any;
        /**
         * Class that is used to serialize JSON objects to a string.
         * @param opt_replacer Replacer.
         */
        constructor(opt_replacer?: (ಠ_ಠ.clutz.goog.json.Replacer)|null);
        /**
         * Serializes an object or a value to a JSON string.
         * @param object The object to serialize.
         */
        serialize(object: any): string;
        /**
         * Serializes an array to a JSON string
         * @param arr The array to serialize.
         * @param sb Array used as a string builder.
         */
        serializeArray(arr: string[]|null, sb: string[]|null): void;
        /**
         * Serializes a generic value to a JSON string
         * @param object The object to serialize.
         * @param sb Array used as a string builder.
         */
        serializeInternal(object: any, sb: string[]|null): void;
    }
}
declare module 'goog:goog.json.Serializer' {
    import alias = ಠ_ಠ.clutz.goog.json.Serializer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.json.hybrid {
    /**
     * Attempts to parse the JSON string natively, falling back to
     * {@code goog.json.parse} if unsuccessful.
     * @param jsonString JSON string to parse.
     */
    function parse(a: string): GlobalObject|null;
    /**
     * Attempts to serialize the JSON string natively, falling back to
     * {@code goog.json.serialize} if unsuccessful.
     * @param obj JavaScript object to serialize to JSON.
     */
    function stringify(a: GlobalObject): string;
}
declare module 'goog:goog.json.hybrid' {
    import alias = ಠ_ಠ.clutz.goog.json.hybrid;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.dom {
    /**
     * A page visibility change event.
     */
    class PageVisibilityEvent extends PageVisibilityEvent_Instance {}
    class PageVisibilityEvent_Instance extends
        ಠ_ಠ.clutz.goog.events.Event_Instance {
        /**
         * A page visibility change event.
         * @param hidden Whether the page is hidden.
         * @param visibilityState A more detailed visibility state.
         */
        constructor(
            hidden: boolean,
            visibilityState: ಠ_ಠ.clutz.goog.labs.dom.PageVisibilityState);
        /**
         * Whether the page is hidden.
         */
        hidden: boolean;
        /**
         * A more detailed visibility state.
         */
        visibilityState: ಠ_ಠ.clutz.goog.labs.dom.PageVisibilityState;
    }
}
declare module 'goog:goog.labs.dom.PageVisibilityEvent' {
    import alias = ಠ_ಠ.clutz.goog.labs.dom.PageVisibilityEvent;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.dom {
    /**
     * This event handler allows you to catch page visibility change events.
     */
    class PageVisibilityMonitor extends PageVisibilityMonitor_Instance {}
    class PageVisibilityMonitor_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * This event handler allows you to catch page visibility change events.
         */
        constructor(opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper);
        disposeInternal(): void;
        getVisibilityState(): ಠ_ಠ.clutz.goog.labs.dom.PageVisibilityState|null;
        isHidden(): boolean;
        isSupported(): boolean;
    }
}
declare module 'goog:goog.labs.dom.PageVisibilityMonitor' {
    import alias = ಠ_ಠ.clutz.goog.labs.dom.PageVisibilityMonitor;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.dom {
    /**
     * The different visibility states.
     */
    type PageVisibilityState = string&{clutzEnumBrand: never};
    var PageVisibilityState: {
        HIDDEN: PageVisibilityState,
        PRERENDER: PageVisibilityState,
        UNLOADED: PageVisibilityState,
        VISIBLE: PageVisibilityState,
    };
}
declare module 'goog:goog.labs.dom.PageVisibilityState' {
    import alias = ಠ_ಠ.clutz.goog.labs.dom.PageVisibilityState;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.events {
    /**
     * An implementation of {@code goog.events.Listenable} with full W3C
     * EventTarget-like support (capture/bubble mechanism, stopping event
     * propagation, preventing default actions).
     *
     * You may subclass this class to turn your class into a Listenable.
     *
     * Unlike {@link goog.events.EventTarget}, this class does not implement
     * {@link goog.disposable.IDisposable}. Instances of this class that have
     * had It is not necessary to call {@link goog.dispose} or {@link
     * #removeAllListeners} in order for an instance of this class to be garbage
     * collected.
     *
     * Unless propagation is stopped, an event dispatched by an
     * EventTarget will bubble to the parent returned by
     * {@code getParentEventTarget}. To set the parent, call
     * {@code setParentEventTarget}. Subclasses that don't support
     * changing the parent can override the setter to throw an error.
     *
     * Example usage:
     * <pre>
     * var source = new goog.labs.events.NonDisposableEventTarget();
     * function handleEvent(e) {
     * alert('Type: ' + e.type + '; Target: ' + e.target);
     * }
     * source.listen('foo', handleEvent);
     * source.dispatchEvent('foo'); // will call handleEvent
     * </pre>
     *
     * TODO(chrishenry|johnlenz): Consider a more modern, less viral
     * (not based on inheritance) replacement of goog.Disposable, which will
     * allow goog.events.EventTarget to not be disposable.
     */
    class NonDisposableEventTarget extends NonDisposableEventTarget_Instance {}
    class NonDisposableEventTarget_Instance implements
        ಠ_ಠ.clutz.goog.events.Listenable {
        private noStructuralTyping_: any;
        dispatchEvent(e: string|GlobalObject|null): boolean;
        fireListeners<EVENTOBJ = any>(
            type: string|ಠ_ಠ.clutz.goog.events.EventId<EVENTOBJ>,
            capture: boolean, eventObject: EVENTOBJ): boolean;
        getListener<SCOPE = any, EVENTOBJ = any>(
            type: string|ಠ_ಠ.clutz.goog.events.EventId<EVENTOBJ>,
            listener: (a: EVENTOBJ) => boolean | undefined, capture: boolean,
            opt_listenerScope?: SCOPE): ಠ_ಠ.clutz.goog.events.ListenableKey
            |null;
        getListeners<EVENTOBJ = any>(
            type: string|ಠ_ಠ.clutz.goog.events.EventId<any>,
            capture: boolean): ಠ_ಠ.clutz.goog.events.ListenableKey[];
        getParentEventTarget(): ಠ_ಠ.clutz.goog.events.Listenable|null;
        hasListener<EVENTOBJ = any>(
            opt_type?: string|ಠ_ಠ.clutz.goog.events.EventId<EVENTOBJ>,
            opt_capture?: boolean): boolean;
        listen<SCOPE = any, EVENTOBJ = any>(
            type: string|ಠ_ಠ.clutz.goog.events.EventId<EVENTOBJ>,
            listener: (a: EVENTOBJ) => boolean | undefined,
            opt_useCapture?: boolean,
            opt_listenerScope?: SCOPE): ಠ_ಠ.clutz.goog.events.ListenableKey;
        listenOnce<SCOPE = any, EVENTOBJ = any>(
            type: string|ಠ_ಠ.clutz.goog.events.EventId<EVENTOBJ>,
            listener: (a: EVENTOBJ) => boolean | undefined,
            opt_useCapture?: boolean,
            opt_listenerScope?: SCOPE): ಠ_ಠ.clutz.goog.events.ListenableKey;
        removeAllListeners(opt_type?: string): number;
        /**
         * Sets the parent of this event target to use for capture/bubble
         * mechanism.
         * @param parent Parent listenable (null if none).
         */
        setParentEventTarget(parent: ಠ_ಠ.clutz.goog.events.Listenable|
                             null): void;
        unlisten<SCOPE = any, EVENTOBJ = any>(
            type: string|ಠ_ಠ.clutz.goog.events.EventId<EVENTOBJ>,
            listener: (a: EVENTOBJ) => boolean | undefined,
            opt_useCapture?: boolean, opt_listenerScope?: SCOPE): boolean;
        unlistenByKey(key: ಠ_ಠ.clutz.goog.events.ListenableKey): boolean;
    }
}
declare module 'goog:goog.labs.events.NonDisposableEventTarget' {
    import alias = ಠ_ಠ.clutz.goog.labs.events.NonDisposableEventTarget;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.events.touch {
    /**
     * Takes a mouse or touch event and returns the relevant geometry and target
     * data.
     * @param e A mouse or touch event.
     */
    function getTouchData(e: GlobalEvent):
        ಠ_ಠ.clutz.goog.labs.events.touch.TouchData;
}
declare module 'goog:goog.labs.events.touch' {
    import alias = ಠ_ಠ.clutz.goog.labs.events.touch;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.events.touch {
    /**
     * Description the geometry and target of an event.
     */
    type TouchData = {
        clientX: number,
        clientY: number,
        screenX: number,
        screenY: number,
        target: GlobalEventTarget | null
    };
}
declare module 'goog:goog.labs.events.touch.TouchData' {
    import alias = ಠ_ಠ.clutz.goog.labs.events.touch.TouchData;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.format.csv {
    var ENABLE_VERBOSE_DEBUGGING: boolean;
    /**
     * Parses a CSV string to create a two-dimensional array.
     *
     * This function does not process header lines, etc -- such transformations
     * can be made on the resulting array.
     * @param text The entire CSV text to be parsed.
     * @param opt_ignoreErrors Whether to ignore parsing errors and instead try
     * to recover and keep going.
     * @param opt_delimiter The delimiter to use. Defaults to ','
     */
    function parse(
        text: string, opt_ignoreErrors?: boolean,
        opt_delimiter?: string): string[][];
}
declare module 'goog:goog.labs.format.csv' {
    import alias = ಠ_ಠ.clutz.goog.labs.format.csv;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.format.csv {
    /**
     * Error thrown when parsing fails.
     */
    class ParseError extends ParseError_Instance {}
    class ParseError_Instance extends ಠ_ಠ.clutz.goog.debug.Error_Instance {
        /**
         * Error thrown when parsing fails.
         * @param text The CSV source text being parsed.
         * @param index The index, in the string, of the position of the error.
         * @param opt_message A description of the violated parse expectation.
         */
        constructor(text: string, index: number, opt_message?: string);
        position: {column: number, line: number}|null;
        name: string;
    }
}
declare module 'goog:goog.labs.format.csv.ParseError' {
    import alias = ಠ_ಠ.clutz.goog.labs.format.csv.ParseError;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.format.csv {
    /**
     * A token -- a single-character string or a sentinel.
     */
    type Token = string|PrivateType;
}
declare module 'goog:goog.labs.format.csv.Token' {
    import alias = ಠ_ಠ.clutz.goog.labs.format.csv.Token;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
    /**
     * GenderInfo provides a method to determine the gender of a list/array
     * of objects when one knows the gender of each item of the list.
     * It does this in a locale sensitive manner.
     * The constructor initializes the object based on the locale data from
     * the current goog.labs.i18n.ListFormatSymbols.
     *
     * Similar to the ICU4J class com.icu.util.GenderInfo:
     * http://icu-project.org/apiref/icu4j/com/ibm/icu/util/GenderInfo.html
     */
    class GenderInfo extends GenderInfo_Instance {}
    class GenderInfo_Instance {
        private noStructuralTyping_: any;
        /**
         * Determines the overal gender of a list based on the gender of all the
         * list items, in a locale-aware way.
         * @param genders An array of genders, will give the gender of the list.
         */
        getListGender(genders: ಠ_ಠ.clutz.goog.labs.i18n.GenderInfo.Gender[]):
            ಠ_ಠ.clutz.goog.labs.i18n.GenderInfo.Gender;
    }
}
declare module 'goog:goog.labs.i18n.GenderInfo' {
    import alias = ಠ_ಠ.clutz.goog.labs.i18n.GenderInfo;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n.GenderInfo {
    /**
     * Enumeration for the possible gender values.
     * Gender: OTHER means either the information is unavailable,
     * or the person has declined to state MALE or FEMALE.
     */
    enum Gender {
        FEMALE,
        MALE,
        OTHER,
    }
}
declare module 'goog:goog.labs.i18n.GenderInfo.Gender' {
    import alias = ಠ_ಠ.clutz.goog.labs.i18n.GenderInfo.Gender;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
    /**
     * ListFormat provides a method to format a list/array of objects to a
     * string, in a user friendly way and in a locale sensitive manner. If the
     * objects are not strings, toString is called to convert them. The
     * constructor initializes the object based on the locale data from the
     * current goog.labs.i18n.ListFormatSymbols.
     *
     * Similar to the ICU4J class com.ibm.icu.text.ListFormatter:
     * http://icu-project.org/apiref/icu4j/com/ibm/icu/text/ListFormatter.html
     */
    class ListFormat extends ListFormat_Instance {}
    class ListFormat_Instance {
        private noStructuralTyping_: any;
        /**
         * Formats an array of strings into a string.
         * It is a user facing, locale-aware list (i.e. 'red, green, and blue').
         * @param items Items to format.
         */
        format(items: (string|number)[]): string;
    }
}
declare module 'goog:goog.labs.i18n.ListFormat' {
    import alias = ಠ_ಠ.clutz.goog.labs.i18n.ListFormat;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.module$exports$goog$labs$iterable {
    /**
     * Call a function with every value of an iterable.
     *
     * Warning: this function will never halt if given an iterable that
     * is never exhausted.
     */
    function forEach<VALUE = any>(
        f: (a: VALUE) => void, iterable: Iterable<VALUE>): void;
    /**
     * Get the iterator for an iterable.
     */
    function getIterator<VALUE = any>(iterable: Iterable<VALUE>):
        Iterator<VALUE>;
    /**
     * Maps the values of one iterable to create another iterable.
     *
     * When next() is called on the returned iterable, it will call the given
     * function {@code f} with the next value of the given iterable
     * {@code iterable} until the given iterable is exhausted.
     */
    function map<THIS = any, VALUE = any, RESULT = any>(
        f: (a: VALUE) => RESULT, iterable: Iterable<VALUE>): Iterable<RESULT>;
}
declare module 'goog:goog.labs.iterable' {
    import alias = ಠ_ಠ.clutz.module$exports$goog$labs$iterable;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.image {
    /**
     * Loads a single image.  Useful for preloading images.
     * @param uri URI of the image.
     * @param opt_image If present, instead of creating a new Image instance the
     * function will use the passed Image instance or the result of calling the
     * Image factory respectively. This can be used to control exactly how Image
     * instances are created, for example if they should be created in a
     * particular document element, or have fields that will trigger CORS image
     * fetches.
     */
    function load(uri: string, opt_image?: Image|(() => Image)):
        ಠ_ಠ.clutz.goog.Promise<Image, any>;
}
declare module 'goog:goog.labs.net.image' {
    import alias = ಠ_ಠ.clutz.goog.labs.net.image;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel {
    /**
     * A TestChannel is used during the first part of channel negotiation
     * with the server to create the channel. It helps us determine whether
     * we're behind a buffering proxy.
     */
    class BaseTestChannel extends BaseTestChannel_Instance {}
    class BaseTestChannel_Instance implements
        ಠ_ಠ.clutz.goog.labs.net.webChannel.Channel {
        private noStructuralTyping_: any;
        /**
         * A TestChannel is used during the first part of channel negotiation
         * with the server to create the channel. It helps us determine whether
         * we're behind a buffering proxy.
         * @param channel The channel that owns this test channel.
         * @param channelDebug A WebChannelDebug instance to use for logging.
         */
        constructor(
            channel: ಠ_ಠ.clutz.goog.labs.net.webChannel.Channel,
            channelDebug: ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelDebug);
        /**
         * Aborts the test channel.
         */
        abort(): void;
        /**
         * Starts the test channel. This initiates connections to the server.
         * @param path The relative uri for the test connection.
         */
        connect(path: string): void;
        correctHostPrefix(...a: any[]): any;
        createDataUri(...a: any[]): any;
        createXhrIo(hostPrefix: string|null): ಠ_ಠ.clutz.goog.net.XhrIo;
        getBackChannelUri(...a: any[]): any;
        getBackgroundChannelTest(...a: any[]): any;
        getClientProtocol(): string|null;
        getConnectionState(...a: any[]): any;
        getForwardChannelUri(...a: any[]): any;
        getHttpSessionId(...a: any[]): any;
        getHttpSessionIdParam(...a: any[]): any;
        /**
         * Returns the last status code received for a request.
         */
        getLastStatusCode(): number;
        isActive(): boolean;
        /**
         * Returns whether the test channel is closed. The ChannelRequest object
         * expects this method to be implemented on its handler.
         */
        isClosed(): boolean;
        /**
         * Callback from ChannelRequest that indicates a request has completed.
         * @param req The request object.
         */
        onRequestComplete(
            req: ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest): any;
        /**
         * Callback from ChannelRequest for when new data is received
         * @param req The request object.
         * @param responseText The text of the response.
         */
        onRequestData(
            req: ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest|null,
            responseText: string): any;
        /**
         * Sets extra HTTP headers to add to all the requests sent to the
         * server.
         * @param extraHeaders The HTTP headers.
         */
        setExtraHeaders(extraHeaders: GlobalObject|null): void;
        setHttpSessionId(...a: any[]): any;
        setHttpSessionIdParam(...a: any[]): any;
        shouldUseSecondaryDomains(): boolean;
        testConnectionFailure(...a: any[]): any;
        testConnectionFinished(...a: any[]): any;
    }
}
declare module 'goog:goog.labs.net.webChannel.BaseTestChannel' {
    import alias = ಠ_ಠ.clutz.goog.labs.net.webChannel.BaseTestChannel;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel {
    /**
     * Shared interface between Channel and TestChannel to support callbacks
     * between WebChannelBase and BaseTestChannel and between Channel and
     * ChannelRequest.
     */
    interface Channel {
        /**
         * Not needed for testchannel.
         *
         * Allows the handler to override a host prefix provided by the server.
         * Will be called whenever the channel has received such a prefix and is
         * considering its use.
         * @param serverHostPrefix The host prefix provided by the server.
         */
        correctHostPrefix(a: string|null): string|null;
        /**
         * Not needed for testchannel.
         *
         * Creates a data Uri applying logic for secondary hostprefix, port
         * overrides, and versioning.
         * @param hostPrefix The host prefix.
         * @param path The path on the host (may be absolute or relative).
         * @param opt_overridePort Optional override port.
         */
        createDataUri(a: string|null, b: string, c?: number): ಠ_ಠ.clutz.goog.Uri
            |null;
        /**
         * Called when creating an XhrIo object.  Override in a subclass if
         * you need to customize the behavior, for example to enable the
         * creation of XHR's capable of calling a secondary domain. Will also
         * allow calling a secondary domain if withCredentials (CORS) is
         * enabled.
         * @param hostPrefix The host prefix, if we need an XhrIo object capable
         * of calling a secondary domain.
         */
        createXhrIo(a: string|null): ಠ_ಠ.clutz.goog.net.XhrIo;
        /**
         * Not needed for testchannel.
         *
         * Gets the Uri used for the connection that receives data from the
         * server.
         * @param hostPrefix The host prefix.
         * @param path The path on the host.
         */
        getBackChannelUri(a: string|null, b: string): ಠ_ಠ.clutz.goog.Uri|null;
        /**
         * Returns true if the channel-test is done in background.
         */
        getBackgroundChannelTest(): boolean;
        /**
         * Not needed for testchannel.
         * Gets the result of previous connectivity tests.
         */
        getConnectionState():
            ಠ_ಠ.clutz.goog.labs.net.webChannel.ConnectionState;
        /**
         * Not needed for testchannel.
         *
         * Gets the Uri used for the connection that sends data to the server.
         * @param path The path on the host.
         */
        getForwardChannelUri(a: string): ಠ_ಠ.clutz.goog.Uri|null;
        /**
         * Gets the http session id.
         */
        getHttpSessionId(): string|null;
        /**
         * Gets the parameter name for the http session id.
         */
        getHttpSessionIdParam(): string|null;
        /**
         * Gets whether this channel is currently active. This is used to
         * determine the length of time to wait before retrying. This call
         * delegates to the handler.
         */
        isActive(): boolean;
        /**
         * Returns whether the channel is closed
         */
        isClosed(): boolean;
        /**
         * Callback from ChannelRequest that indicates a request has completed.
         * @param request The request object.
         */
        onRequestComplete(a: ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest):
            any;
        /**
         * Callback from ChannelRequest for when new data is received
         * @param request The request object.
         * @param responseText The text of the response.
         */
        onRequestData(
            a: ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest|null,
            b: string): any;
        /**
         * Sets the http session id.
         * @param httpSessionId The http session id
         */
        setHttpSessionId(a: string): any;
        /**
         * Sets the parameter name for the http session id.
         * @param httpSessionIdParam The parameter name for http session id
         */
        setHttpSessionIdParam(a: string|null): any;
        /**
         * Determines whether to use a secondary domain when the server gives us
         * a host prefix. This allows us to work around browser per-domain
         * connection limits.
         *
         * If you need to use secondary domains on different browsers and IE10,
         * you have two choices:
         * 1) If you only care about browsers that support CORS
         * (https://developer.mozilla.org/en-US/docs/HTTP_access_control), you
         * can use {@link #setSupportsCrossDomainXhrs} and set the appropriate
         * CORS response headers on the server.
         * 2) Or, override this method in a subclass, and make sure that those
         * browsers use some messaging mechanism that works cross-domain (e.g
         * iframes and window.postMessage).
         */
        shouldUseSecondaryDomains(): boolean;
        /**
         * Not needed for testchannel.
         *
         * Callback from TestChannel for when the channel has an error.
         * @param testChannel The TestChannel.
         * @param errorCode The error code of the failure.
         */
        testConnectionFailure(
            a: ಠ_ಠ.clutz.goog.labs.net.webChannel.BaseTestChannel|null,
            b: ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest.Error): any;
        /**
         * Not needed for testchannel.
         *
         * Callback from TestChannel for when the channel is finished.
         * @param testChannel The TestChannel.
         * @param useChunked Whether we can chunk responses.
         */
        testConnectionFinished(
            a: ಠ_ಠ.clutz.goog.labs.net.webChannel.BaseTestChannel|null,
            b: boolean): any;
    }
}
declare module 'goog:goog.labs.net.webChannel.Channel' {
    import alias = ಠ_ಠ.clutz.goog.labs.net.webChannel.Channel;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel {
    /**
     * A new ChannelRequest is created for each request to the server.
     */
    class ChannelRequest extends ChannelRequest_Instance {
        /**
         * Convenience factory method.
         * @param channel The channel object that owns this request.
         * @param channelDebug A WebChannelDebug to use for logging.
         * @param opt_sessionId The session id for the channel.
         * @param opt_requestId The request id for this request.
         * @param opt_retryId The retry id for this request.
         */
        static createChannelRequest(
            channel: ಠ_ಠ.clutz.goog.labs.net.webChannel.Channel|null,
            channelDebug: ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelDebug|
            null,
            opt_sessionId?: string, opt_requestId?: string|number,
            opt_retryId?: number):
            ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest;
        /**
         * Returns a useful error string for debugging based on the specified
         * error code.
         * @param errorCode The error code.
         * @param statusCode The HTTP status code.
         */
        static errorStringFromCode(
            errorCode: ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest.Error|
            null,
            statusCode: number): string;
        /**
         * Returns whether XHR streaming is supported on this browser.
         */
        static supportsXhrStreaming(): boolean;
    }
    class ChannelRequest_Instance {
        private noStructuralTyping_: any;
        /**
         * A new ChannelRequest is created for each request to the server.
         * @param channel The channel that owns this request.
         * @param channelDebug A WebChannelDebug to use for logging.
         * @param opt_sessionId The session id for the channel.
         * @param opt_requestId The request id for this request.
         * @param opt_retryId The retry id for this request.
         */
        constructor(
            channel: ಠ_ಠ.clutz.goog.labs.net.webChannel.Channel|null,
            channelDebug: ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelDebug|
            null,
            opt_sessionId?: string, opt_requestId?: string|number,
            opt_retryId?: number);
        /**
         * Cancels the request no matter what the underlying transport is.
         */
        cancel(): void;
        /**
         * If the request was not successful, returns the reason.
         */
        getLastError(): ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest.Error
            |null;
        /**
         * Returns the status code of the last request.
         */
        getLastStatusCode(): number;
        /**
         * Gets the pending messages that this request is handling, in case of a
         * retry.
         */
        getPendingMessages():
            (ಠ_ಠ.clutz.goog.labs.net.webChannel.Wire.QueuedMap|null)[];
        /**
         * Returns the data for a post, if this request is a post.
         */
        getPostData(): string|null;
        /**
         * Returns the request id for this request. Each request has a unique
         * request id and the request IDs are a sequential increasing count.
         */
        getRequestId(): string|number|undefined;
        /**
         * Returns the time that the request started, if it has started.
         */
        getRequestStartTime(): number|null;
        /**
         * Returns the session id for this channel.
         */
        getSessionId(): string|undefined;
        /**
         * Indicates whether the request was successful. Only valid after the
         * handler is called to indicate completion of the request.
         */
        getSuccess(): boolean;
        /**
         * Returns the XhrIo request object.
         */
        getXhr(): ಠ_ಠ.clutz.goog.net.XhrIo|null;
        /**
         * Uses an IMG tag or navigator.sendBeacon to send an HTTP get to the
         * server.
         *
         * This is only currently used to terminate the connection, as an IMG
         * tag is the most reliable way to send something to the server while
         * the page is getting torn down.
         *
         * Navigator.sendBeacon is available on Chrome and Firefox as a formal
         * solution to ensure delivery without blocking window close. See
         * https://developer.mozilla.org/en-US/docs/Web/API/Navigator/sendBeacon
         *
         * For Chrome Apps, sendBeacon is always necessary due to Content
         * Security Policy (CSP) violation of using an IMG tag.
         *
         * For react-native, we use xhr to send the actual close request, and
         * assume there is no page-close issue with react-native.
         * @param uri The uri to send a request to.
         */
        sendCloseRequest(uri: ಠ_ಠ.clutz.goog.Uri|null): void;
        /**
         * Sets extra HTTP headers to add to all the requests sent to the
         * server.
         * @param extraHeaders The HTTP headers.
         */
        setExtraHeaders(extraHeaders: GlobalObject|null): void;
        /**
         * Sets the pending messages that this request is handling.
         * @param pendingMessages The pending messages for this request.
         */
        setPendingMessages(pendingMessages: (
            ಠ_ಠ.clutz.goog.labs.net.webChannel.Wire.QueuedMap|null)[]): void;
        /**
         * Sets the throttle for handling onreadystatechange events for the
         * request.
         * @param throttle The throttle in ms.  A value of zero indicates no
         * throttle.
         */
        setReadyStateChangeThrottle(throttle: number): void;
        /**
         * Sets the timeout for a request
         * @param timeout The timeout in MS for when we fail the request.
         */
        setTimeout(timeout: number): void;
        /**
         * Overrides the default HTTP method.
         * @param verb The HTTP method
         */
        setVerb(verb: string): void;
        /**
         * Uses XMLHTTP to send an HTTP GET to the server.
         * @param uri The uri of the request.
         * @param decodeChunks Whether to the result is expected to be encoded
         * for chunking and thus requires decoding.
         * @param hostPrefix The host prefix, if we might be using a secondary
         * domain.  Note that it should also be in the URL, adding this won't
         * cause it to be added to the URL.
         */
        xmlHttpGet(
            uri: ಠ_ಠ.clutz.goog.Uri|null, decodeChunks: boolean,
            hostPrefix: string|null): void;
        /**
         * Uses XMLHTTP to send an HTTP POST to the server.
         * @param uri The uri of the request.
         * @param postData The data for the post body.
         * @param decodeChunks Whether to the result is expected to be encoded
         * for chunking and thus requires decoding.
         */
        xmlHttpPost(
            uri: ಠ_ಠ.clutz.goog.Uri|null, postData: string|null,
            decodeChunks: boolean): void;
    }
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest {
    enum Error {
        BAD_DATA,
        BROWSER_OFFLINE,
        HANDLER_EXCEPTION,
        NO_DATA,
        STATUS,
        TIMEOUT,
        UNKNOWN_SESSION_ID,
    }
}
declare module 'goog:goog.labs.net.webChannel.ChannelRequest' {
    import alias = ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel {
    /**
     * The connectivity state of the channel.
     */
    class ConnectionState extends ConnectionState_Instance {}
    class ConnectionState_Instance {
        private noStructuralTyping_: any;
        /**
         * The result of checking if there is a buffering proxy in the network.
         * True means the connection is buffered, False means unbuffered,
         * null means that the result is not available.
         */
        bufferingProxyResult: boolean|null;
        /**
         * Handshake result.
         */
        handshakeResult: string[]|null;
    }
}
declare module 'goog:goog.labs.net.webChannel.ConnectionState' {
    import alias = ಠ_ಠ.clutz.goog.labs.net.webChannel.ConnectionState;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel {
    type ForwardChannelRequestPool =
        ಠ_ಠ.clutz
            .module$contents$goog$labs$net$webChannel$ForwardChannelRequestPool_ForwardChannelRequestPool;
    var ForwardChannelRequestPool: typeof ಠ_ಠ.clutz
        .module$contents$goog$labs$net$webChannel$ForwardChannelRequestPool_ForwardChannelRequestPool;
}
declare module 'goog:goog.labs.net.webChannel.ForwardChannelRequestPool' {
    import alias = ಠ_ಠ.clutz.goog.labs.net.webChannel.ForwardChannelRequestPool;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel {
    /**
     * This WebChannel implementation is branched off goog.net.BrowserChannel
     * for now. Ongoing changes to goog.net.BrowserChannel will be back
     * ported to this implementation as needed.
     */
    class WebChannelBase extends WebChannelBase_Instance {
        /**
         * Maximum number of attempts to connect to the server for back channel
         * requests.
         */
        static BACK_CHANNEL_MAX_RETRIES: number;
        /**
         * The timeout in milliseconds for a forward channel request.
         */
        static FORWARD_CHANNEL_RETRY_TIMEOUT: number;
        /**
         * When retrying for an inactive channel, we will multiply the total
         * delay by this number.
         */
        static INACTIVE_CHANNEL_RETRY_FACTOR: number;
        /**
         * A LogSaver that can be used to accumulate all the debug logs so they
         * can be sent to the server when a problem is detected.
         */
        static LogSaver: GlobalObject;
        /**
         * A guess at a cutoff at which to no longer assume the backchannel is
         * dead when we are slow to receive data. Number in bytes.
         *
         * Assumption: The worst bandwidth we work on is 50 kilobits/sec
         * 50kbits/sec * (1 byte / 8 bits) * 6 sec dead backchannel timeout
         */
        static OUTSTANDING_DATA_BACKCHANNEL_RETRY_CUTOFF: number;
        /**
         * A number in MS of how long we guess the maxmium amount of time a
         * round trip to the server should take. In the future this could be
         * substituted with a real measurement of the RTT.
         */
        static RTT_ESTIMATE: number;
    }
    class WebChannelBase_Instance implements
        ಠ_ಠ.clutz.goog.labs.net.webChannel.Channel {
        private noStructuralTyping_: any;
        /**
         * This WebChannel implementation is branched off
         * goog.net.BrowserChannel for now. Ongoing changes to
         * goog.net.BrowserChannel will be back ported to this implementation as
         * needed.
         * @param opt_options Configuration for the WebChannel instance.
         * @param opt_clientVersion An application-specific version number that
         * is sent to the server when connected.
         * @param opt_conn Previously determined connection conditions.
         */
        constructor(
            opt_options?: ಠ_ಠ.clutz.goog.net.WebChannel.Options,
            opt_clientVersion?: number,
            opt_conn?: ಠ_ಠ.clutz.goog.labs.net.webChannel.ConnectionState);
        /**
         * Starts the channel. This initiates connections to the server.
         * @param testPath The path for the test connection.
         * @param channelPath The path for the channel connection.
         * @param opt_extraParams Extra parameter keys and values to add to the
         * requests.
         * @param opt_oldSessionId Session ID from a previous session.
         * @param opt_oldArrayId The last array ID from a previous session.
         */
        connect(
            testPath: string, channelPath: string,
            opt_extraParams?: GlobalObject, opt_oldSessionId?: string,
            opt_oldArrayId?: number): void;
        /**
         * Decides which host prefix should be used, if any.  If there is a
         * handler, allows the handler to validate a host prefix provided by the
         * server, and optionally override it.
         * @param serverHostPrefix The host prefix provided by the server.
         */
        correctHostPrefix(serverHostPrefix: string|null): string|null;
        createDataUri(
            hostPrefix: string|null, path: string,
            opt_overridePort?: number): ಠ_ಠ.clutz.goog.Uri|null;
        createXhrIo(hostPrefix: string|null): ಠ_ಠ.clutz.goog.net.XhrIo;
        /**
         * Disconnects and closes the channel.
         */
        disconnect(): void;
        /**
         * Returns whether chunked mode is allowed. In certain debugging
         * situations, it's useful for the application to have a way to disable
         * chunked mode for a user.
         */
        getAllowChunkedMode(): boolean;
        /**
         * Returns whether the channel allows the use of a subdomain. There may
         * be cases where this isn't allowed.
         */
        getAllowHostPrefix(): boolean;
        getBackChannelMaxRetries(): number;
        getBackChannelUri(hostPrefix: string|null, path: string):
            ಠ_ಠ.clutz.goog.Uri|null;
        getBackgroundChannelTest(): boolean;
        /**
         * Returns the logger.
         */
        getChannelDebug(): ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelDebug;
        getConnectionState():
            ಠ_ಠ.clutz.goog.labs.net.webChannel.ConnectionState;
        /**
         * Returns the extra HTTP headers to add to all the requests sent to the
         * server.
         */
        getExtraHeaders(): GlobalObject|null;
        getForwardChannelMaxRetries(): number;
        getForwardChannelRequestPool():
            module$contents$goog$labs$net$webChannel$ForwardChannelRequestPool_ForwardChannelRequestPool;
        getForwardChannelUri(path: string): ಠ_ಠ.clutz.goog.Uri|null;
        /**
         * Returns the handler used for channel callback events.
         */
        getHandler(): ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase.Handler
            |null;
        getHttpSessionId(): string|null;
        getHttpSessionIdParam(): string|null;
        /**
         * Returns the extra HTTP headers to add to the init requests
         * sent to the server.
         */
        getInitHeaders(): GlobalObject|null;
        getLastArrayId(): number;
        /**
         * Return the last status code received for a request.
         */
        getLastStatusCode(): number;
        /**
         * Returns the session id of the channel. Only available after the
         * channel has been opened.
         */
        getSessionId(): string;
        /**
         * Returns the channel state.
         */
        getState(): ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase.State;
        getWireCodec(): GlobalObject;
        /**
         * Returns whether there are outstanding requests servicing the channel.
         */
        hasOutstandingRequests(): boolean;
        isActive(): boolean;
        /**
         * Returns whether the channel is buffered or not. This state is valid
         * for querying only after the test connection has completed. This may
         * be queried in the WebChannelBase.okToMakeRequest() callback. A
         * channel may be buffered if the test connection determines that a
         * chunked response could not be sent down within a suitable time.
         */
        isBuffered(): boolean;
        isClosed(): boolean;
        onRequestComplete(
            request: ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest): any;
        onRequestData(
            request: ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest|null,
            responseText: string): any;
        /**
         * Sends a request to the server. The format of the request is a Map
         * data structure of key/value pairs. These maps are then encoded in a
         * format suitable for the wire and then reconstituted as a Map data
         * structure that the server can process.
         * @param map The map to send.
         * @param opt_context The context associated with the map.
         */
        sendMap(map: GlobalObject, opt_context?: GlobalObject): void;
        /**
         * Sets whether chunked mode is allowed. In certain debugging
         * situations, it's useful for the application to have a way to disable
         * chunked mode for a user.
         * @param allowChunkedMode Whether chunked mode is allowed.
         */
        setAllowChunkedMode(allowChunkedMode: boolean): void;
        /**
         * Sets whether the channel allows the use of a subdomain. There may be
         * cases where this isn't allowed, for example, logging in with
         * troutboard where using a subdomain causes Apache to force the user to
         * authenticate twice.
         * @param allowHostPrefix Whether a host prefix is allowed.
         */
        setAllowHostPrefix(allowHostPrefix: boolean): void;
        /**
         * Sets the logger.
         * @param channelDebug The channel debug object.
         */
        setChannelDebug(channelDebug:
                            ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelDebug):
            void;
        /**
         * Sets extra HTTP headers to add to all the requests sent to the
         * server.
         * @param extraHeaders The HTTP headers, or null.
         */
        setExtraHeaders(extraHeaders: GlobalObject|null): void;
        /**
         * When set to true, this changes the behavior of the forward channel so
         * it will not retry requests; it will fail after one network failure,
         * and if there was already one network failure, the request will fail
         * immediately.
         * @param failFast Whether or not to fail fast.
         */
        setFailFast(failFast: boolean): void;
        /**
         * Sets the maximum number of attempts to connect to the server for
         * forward channel requests.
         * @param retries The maximum number of attempts.
         */
        setForwardChannelMaxRetries(retries: number): void;
        /**
         * Sets the timeout for a forward channel request.
         * @param timeoutMs The timeout in milliseconds.
         */
        setForwardChannelRequestTimeout(timeoutMs: number): void;
        /**
         * Sets the handler used for channel callback events.
         * @param handler The handler to set.
         */
        setHandler(handler: ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase
                       .Handler|null): void;
        /**
         * Sets the URL param name to overwrite custom HTTP headers.
         * @param httpHeadersOverwriteParam The URL param name.
         */
        setHttpHeadersOverwriteParam(httpHeadersOverwriteParam: string): void;
        setHttpSessionId(httpSessionId: string): any;
        setHttpSessionIdParam(httpSessionIdParam: string|null): any;
        /**
         * Sets extra HTTP headers to add to the init requests sent to the
         * server.
         * @param initHeaders The HTTP headers, or null.
         */
        setInitHeaders(initHeaders: GlobalObject|null): void;
        /**
         * Sets the throttle for handling onreadystatechange events for the
         * request.
         * @param throttle The throttle in ms.  A value of zero indicates no
         * throttle.
         */
        setReadyStateChangeThrottle(throttle: number): void;
        setRetryDelay(baseDelayMs: number, delaySeedMs: number): void;
        /**
         * Sets whether cross origin requests are supported for the channel.
         *
         * Setting this allows the creation of requests to secondary domains and
         * sends XHRs with the CORS withCredentials bit set to true.
         *
         * In order for cross-origin requests to work, the server will also need
         * to set CORS response headers as per:
         * https://developer.mozilla.org/en-US/docs/HTTP_access_control
         *
         * See {@link goog.net.XhrIo#setWithCredentials}.
         * @param supportCrossDomain Whether cross domain XHRs are supported.
         */
        setSupportsCrossDomainXhrs(supportCrossDomain: boolean): void;
        shouldUseSecondaryDomains(): boolean;
        testConnectionFailure(
            testChannel: ಠ_ಠ.clutz.goog.labs.net.webChannel.BaseTestChannel|
            null,
            errorCode: ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest.Error):
            any;
        testConnectionFinished(
            testChannel: ಠ_ಠ.clutz.goog.labs.net.webChannel.BaseTestChannel|
            null,
            useChunked: boolean): any;
    }
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase {
    enum Error {
        BAD_DATA,
        BAD_RESPONSE,
        LOGGED_OUT,
        NETWORK,
        NO_DATA,
        OK,
        REQUEST_FAILED,
        STOP,
        UNKNOWN_SESSION_ID,
    }
    class Handler extends Handler_Instance {}
    class Handler_Instance {
        private noStructuralTyping_: any;
        /**
         * Called by the channel if enumeration of the map throws an exception.
         * @param channel The channel.
         * @param map The map that can't be enumerated.
         */
        badMapError(
            channel: ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase|null,
            map: GlobalObject|null): void;
        /**
         * Indicates the WebChannel is closed. Also notifies about which maps,
         * if any, that may not have been delivered to the server.
         * @param channel The channel.
         * @param opt_pendingMaps The array of pending maps, which may or may
         * not have been delivered to the server.
         * @param opt_undeliveredMaps The array of undelivered maps, which have
         * definitely not been delivered to the server.
         */
        channelClosed(
            channel: ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase|null,
            opt_pendingMaps?:
                (ಠ_ಠ.clutz.goog.labs.net.webChannel.Wire.QueuedMap|null)[]|null,
            opt_undeliveredMaps?:
                (ಠ_ಠ.clutz.goog.labs.net.webChannel.Wire.QueuedMap|null)[]|
            null): void;
        /**
         * Indicates an error occurred on the WebChannel.
         * @param channel The channel.
         * @param error The error code.
         */
        channelError(
            channel: ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase|null,
            error: ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase.Error):
            void;
        /**
         * New input is available for the application to process.
         * @param channel The channel.
         * @param array The data array.
         */
        channelHandleArray(
            channel: ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase|null,
            array: any[]|null): void;
        /**
         * Callback handler for when a batch of response arrays is received from
         * the server. When null, batched dispatching is disabled.
         */
        channelHandleMultipleArrays:
            ((a: ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase,
              b: any[][]) => any)|null;
        /**
         * Indicates the WebChannel has successfully negotiated with the server
         * and can now send and receive data.
         * @param channel The channel.
         */
        channelOpened(channel:
                          ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase|
                      null): void;
        /**
         * Indicates messages that have been successfully sent on the channel.
         * @param channel The channel.
         * @param request The request object that contains the pending messages
         * that have been successfully delivered to the server.
         */
        channelSuccess(
            channel: ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase|null,
            request: ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest): void;
        /**
         * Allows the handler to override a host prefix provided by the server.
         * Will be called whenever the channel has received such a prefix and is
         * considering its use.
         * @param serverHostPrefix The host prefix provided by the server.
         */
        correctHostPrefix(serverHostPrefix: string|null): string|null;
        /**
         * Gets any parameters that should be added at the time another
         * connection is made to the server.
         * @param channel The channel.
         */
        getAdditionalParams(channel: ಠ_ಠ.clutz.goog.labs.net.webChannel
                                .WebChannelBase|null): GlobalObject;
        /**
         * Gets the URI of an image that can be used to test network
         * connectivity.
         * @param channel The channel.
         */
        getNetworkTestImageUri(
            channel: ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase|
            null): ಠ_ಠ.clutz.goog.Uri|null;
        /**
         * Gets whether this channel is currently active. This is used to
         * determine the length of time to wait before retrying.
         * @param channel The channel.
         */
        isActive(channel: ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase|
                 null): boolean;
        /**
         * Whether it's okay to make a request to the server. A handler can
         * return false if the channel should fail. For example, if the user has
         * logged out, the handler may want all requests to fail immediately.
         * @param channel The channel.
         */
        okToMakeRequest(channel:
                            ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase|
                        null):
            ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase.Error;
    }
    enum State {
        CLOSED,
        INIT,
        OPENED,
        OPENING,
    }
}
declare module 'goog:goog.labs.net.webChannel.WebChannelBase' {
    import alias = ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel {
    /**
     * Implementation of {@link goog.net.WebChannelTransport} with
     * {@link goog.labs.net.webChannel.WebChannelBase} as the underlying channel
     * implementation.
     */
    class WebChannelBaseTransport extends WebChannelBaseTransport_Instance {}
    class WebChannelBaseTransport_Instance implements
        ಠ_ಠ.clutz.goog.net.WebChannelTransport {
        private noStructuralTyping_: any;
        createWebChannel(
            url: string, opt_options?: ಠ_ಠ.clutz.goog.net.WebChannel.Options):
            ಠ_ಠ.clutz.goog.net.WebChannel;
    }
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBaseTransport {
    class Channel extends Channel_Instance {}
    class Channel_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance
        implements ಠ_ಠ.clutz.goog.net.WebChannel {
        /**
         * Implementation of the {@link goog.net.WebChannel} interface.
         * @param url The URL path for the new WebChannel instance.
         * @param opt_options Configuration for the new WebChannel instance.
         */
        constructor(
            url: string, opt_options?: ಠ_ಠ.clutz.goog.net.WebChannel.Options);
        close(): void;
        disposeInternal(): void;
        getRuntimeProperties(): ಠ_ಠ.clutz.goog.net.WebChannel.RuntimeProperties;
        halfClose(): void;
        /**
         * Test path is always set to "/url/test".
         */
        open(): void;
        /**
         * The WebChannelBase only supports object types.
         * @param message The message to send.
         */
        send(message: ArrayBuffer|Blob|{[key: string]: GlobalObject | string}|
             any[]|string): any;
    }
    class ChannelProperties extends ChannelProperties_Instance {}
    class ChannelProperties_Instance implements
        ಠ_ಠ.clutz.goog.net.WebChannel.RuntimeProperties {
        private noStructuralTyping_: any;
        /**
         * Implementation of the {@link goog.net.WebChannel.RuntimeProperties}.
         * @param channel The underlying channel object.
         */
        constructor(channel: ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase);
        ackCommit(...a: any[]): any;
        commit(...a: any[]): any;
        getConcurrentRequestLimit(): number;
        getHttpSessionId(): string|null;
        getLastStatusCode(): number;
        getNonAckedMessageCount(...a: any[]): any;
        getPendingRequestCount(): number;
        isSpdyEnabled(): boolean;
        notifyNonAckedMessageCount(...a: any[]): any;
        onCommit(...a: any[]): any;
    }
}
declare module 'goog:goog.labs.net.webChannel.WebChannelBaseTransport' {
    import alias = ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBaseTransport;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel {
    /**
     * Logs and keeps a buffer of debugging info for the Channel.
     */
    class WebChannelDebug extends WebChannelDebug_Instance {}
    class WebChannelDebug_Instance {
        private noStructuralTyping_: any;
        /**
         * Logs that the browser went offline during the lifetime of a request.
         * @param url The URL being requested.
         */
        browserOfflineResponse(url: ಠ_ಠ.clutz.goog.Uri|null): void;
        /**
         * Logs a debug message.
         * @param text The message.
         */
        debug(text: string|(() => string)): void;
        /**
         * Turns off redact.
         */
        disableRedact(): void;
        /**
         * Logs an exception
         * @param e The error or error event.
         * @param opt_msg The optional message, defaults to 'Exception'.
         */
        dumpException(e: GlobalError|null, opt_msg?: string|(() => string)):
            void;
        /**
         * Logs an info message.
         * @param text The message.
         */
        info(text: string|(() => string)): void;
        /**
         * Logs a severe message.
         * @param text The message.
         */
        severe(text: string|(() => string)): void;
        /**
         * Logs a request timeout.
         * @param uri The uri that timed out.
         */
        timeoutResponse(uri: ಠ_ಠ.clutz.goog.Uri|null): void;
        /**
         * Logs a warning message.
         * @param text The message.
         */
        warning(text: string|(() => string)): void;
        /**
         * Logs an XmlHttp request..
         * @param verb The request type (GET/POST).
         * @param uri The request destination.
         * @param id The request id.
         * @param attempt Which attempt # the request was.
         * @param postData The data posted in the request.
         */
        xmlHttpChannelRequest(
            verb: string, uri: ಠ_ಠ.clutz.goog.Uri|null,
            id: string|number|undefined, attempt: number,
            postData: string|null): void;
        /**
         * Logs the meta data received from an XmlHttp request.
         * @param verb The request type (GET/POST).
         * @param uri The request destination.
         * @param id The request id.
         * @param attempt Which attempt # the request was.
         * @param readyState The ready state.
         * @param statusCode The HTTP status code.
         */
        xmlHttpChannelResponseMetaData(
            verb: string, uri: ಠ_ಠ.clutz.goog.Uri|null,
            id: string|number|undefined, attempt: number,
            readyState: ಠ_ಠ.clutz.goog.net.XmlHttp.ReadyState,
            statusCode: number): void;
        /**
         * Logs the response data received from an XmlHttp request.
         * @param id The request id.
         * @param responseText The response text.
         * @param opt_desc Optional request description.
         */
        xmlHttpChannelResponseText(
            id: string|number|undefined, responseText: string|null,
            opt_desc?: string|null): void;
    }
}
declare module 'goog:goog.labs.net.webChannel.WebChannelDebug' {
    import alias = ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelDebug;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel {
    /**
     * The interface class.
     */
    interface Wire {}
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel.Wire {
    var LATEST_CHANNEL_VERSION: number;
    class QueuedMap extends QueuedMap_Instance {}
    class QueuedMap_Instance {
        private noStructuralTyping_: any;
        /**
         * Simple container class for a (mapId, map) pair.
         * @param mapId The id for this map.
         * @param map The map itself.
         * @param opt_context The context associated with the map.
         */
        constructor(
            mapId: number, map: GlobalObject, opt_context?: GlobalObject);
        /**
         * The context for the map.
         */
        context: GlobalObject|null;
        /**
         * The map itself.
         */
        map: GlobalObject;
        /**
         * The id for this map.
         */
        mapId: number;
    }
}
declare module 'goog:goog.labs.net.webChannel.Wire' {
    import alias = ಠ_ಠ.clutz.goog.labs.net.webChannel.Wire;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel {
    /**
     * The v8 codec class.
     */
    class WireV8 extends WireV8_Instance {}
    class WireV8_Instance {
        private noStructuralTyping_: any;
        /**
         * Decodes a standalone message received from the wire. May throw
         * exception if text is ill-formatted.
         *
         * Must be valid JSON as it is insecure to use eval() to decode JS
         * literals; and eval() is disallowed in Chrome apps too.
         *
         * Invalid JS literals include null array elements, quotas etc.
         * @param messageText The string content as received from the wire.
         */
        decodeMessage(messageText: string): any;
        /**
         * Encodes a standalone message into the wire format.
         *
         * May throw exception if the message object contains any invalid
         * elements.
         * @param message The message data. V8 only support JS objects (or Map).
         * @param buffer The text buffer to write the message to.
         * @param opt_prefix The prefix for each field of the object.
         */
        encodeMessage(
            message: GlobalObject, buffer: string[], opt_prefix?: string): void;
        /**
         * Encodes all the buffered messages of the forward channel.
         * @param messageQueue The message data. V8 only support JS objects.
         * @param count The number of messages to be encoded.
         * @param badMapHandler Callback for bad messages.
         */
        encodeMessageQueue(
            messageQueue:
                (ಠ_ಠ.clutz.goog.labs.net.webChannel.Wire.QueuedMap|null)[],
            count: number,
            badMapHandler: ((a: GlobalObject) => any)|null): string;
    }
}
declare module 'goog:goog.labs.net.webChannel.WireV8' {
    import alias = ಠ_ಠ.clutz.goog.labs.net.webChannel.WireV8;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel.netUtils {
    /**
     * Default timeout to allow for URI pings.
     */
    var NETWORK_TIMEOUT: number;
    /**
     * Test loading the given image.
     * @param url URL to the image.
     * @param timeout Milliseconds before giving up.
     * @param callback Function to call with results.
     */
    function testLoadImage(
        url: string, timeout: number, callback: (a: boolean) => any): void;
    /**
     * Test loading the given image, retrying if necessary.
     * @param url URL to the image.
     * @param timeout Milliseconds before giving up.
     * @param callback Function to call with results.
     * @param retries The number of times to retry.
     * @param channelDebug The debug object
     * @param opt_pauseBetweenRetriesMS Optional number of milliseconds between
     * retries - defaults to 0.
     */
    function testLoadImageWithRetries(
        url: string, timeout: number, callback: (a: boolean) => any,
        retries: number,
        channelDebug: ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelDebug,
        opt_pauseBetweenRetriesMS?: number): void;
    /**
     * Pings the network with an image URI to check if an error is a server
     * error or user's network error.
     *
     * The caller needs to add a 'rand' parameter to make sure the response is
     * not fulfilled by browser cache.
     * @param callback The function to call back with results.
     * @param opt_imageUri The URI (of an image) to use for the network test.
     */
    function testNetwork(
        callback: (a: boolean) => any,
        opt_imageUri?: ಠ_ಠ.clutz.goog.Uri | null): void;
}
declare module 'goog:goog.labs.net.webChannel.netUtils' {
    import alias = ಠ_ಠ.clutz.goog.labs.net.webChannel.netUtils;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats {
    /**
     * Returns the singleton event target for stat events.
     */
    function getStatEventTarget(): ಠ_ಠ.clutz.goog.events.EventTarget|null;
    /**
     * Notify the channel that a particular fine grained network event has
     * occurred. Should be considered package-private.
     * @param reachabilityType The reachability event type.
     */
    function notifyServerReachabilityEvent(
        reachabilityType:
            ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.ServerReachability):
        void;
    /**
     * Helper function to call the stat event callback.
     * @param stat The stat.
     */
    function notifyStatEvent(
        stat: ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.Stat): void;
    /**
     * Helper function to notify listeners about POST request performance.
     * @param size Number of characters in the POST data.
     * @param rtt The amount of time from POST start to response.
     * @param retries The number of times the POST had to be retried.
     */
    function notifyTimingEvent(
        size: number, rtt: number, retries: number): void;
    /**
     * Helper function to call the end hook
     */
    function onEndExecution(): void;
    /**
     * Helper function to call the start hook
     */
    function onStartExecution(): void;
    /**
     * Allows the application to set an execution hooks for when a channel
     * stops processing requests. This is useful to track timing or logging
     * special information. The function takes no parameters and return void.
     * @param endHook The function for the end hook.
     */
    function setEndThreadExecutionHook(endHook: (...a: any[]) => any): void;
    /**
     * Allows the application to set an execution hooks for when a channel
     * starts processing requests. This is useful to track timing or logging
     * special information. The function takes no parameters and return void.
     * @param startHook The function for the start hook.
     */
    function setStartThreadExecutionHook(startHook: (...a: any[]) => any): void;
    /**
     * Wrapper around SafeTimeout which calls the start and end execution hooks
     * with a try...finally block.
     * @param fn The callback function.
     * @param ms The time in MS for the timer.
     */
    function setTimeout(fn: (...a: any[]) => any, ms: number): number;
}
declare module 'goog:goog.labs.net.webChannel.requestStats' {
    import alias = ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.Event {
    var /**
         * The type of event that occurs every time some information about how
         * reachable the server is is discovered.
         */
            SERVER_REACHABILITY_EVENT: string;
    var /**
         * Stat Event that fires when things of interest happen that may be
         * useful for applications to know about for stats or debugging
         * purposes.
         */
            STAT_EVENT: string;
    var /**
         * An event that fires when POST requests complete successfully,
         * indicating the size of the POST and the round trip time.
         */
            TIMING_EVENT: string;
}
declare module 'goog:goog.labs.net.webChannel.requestStats.Event' {
    import alias = ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.Event;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats {
    /**
     * Types of events which reveal information about the reachability of the
     * server.
     */
    enum ServerReachability {
        BACK_CHANNEL_ACTIVITY,
        REQUEST_FAILED,
        REQUEST_MADE,
        REQUEST_SUCCEEDED,
    }
}
declare module 'goog:goog.labs.net.webChannel.requestStats.ServerReachability' {
    import alias = ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.ServerReachability;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats {
    /**
     * Event class for SERVER_REACHABILITY_EVENT.
     */
    class ServerReachabilityEvent extends ServerReachabilityEvent_Instance {}
    class ServerReachabilityEvent_Instance extends
        ಠ_ಠ.clutz.goog.events.Event_Instance {
        /**
         * Event class for SERVER_REACHABILITY_EVENT.
         * @param target The stat event target for the channel.
         * @param reachabilityType The reachability event type.
         */
        constructor(
            target: ಠ_ಠ.clutz.goog.events.EventTarget|null,
            reachabilityType: ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats
                .ServerReachability);
        reachabilityType:
            ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.ServerReachability;
    }
}
declare module 'goog:goog.labs.net.webChannel.requestStats.ServerReachabilityEvent' {
    import alias = ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.ServerReachabilityEvent;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats {
    /**
     * Enum that identifies events for statistics that are interesting to track.
     */
    enum Stat {
        BACKCHANNEL_DEAD,
        BACKCHANNEL_MISSING,
        BROWSER_OFFLINE,
        CONNECT_ATTEMPT,
        ERROR_NETWORK,
        ERROR_OTHER,
        NOPROXY,
        PROXY,
        REQUEST_BAD_DATA,
        REQUEST_BAD_STATUS,
        REQUEST_INCOMPLETE_DATA,
        REQUEST_NO_DATA,
        REQUEST_TIMEOUT,
        REQUEST_UNKNOWN_SESSION_ID,
        TEST_STAGE_ONE_FAILED,
        TEST_STAGE_ONE_START,
        TEST_STAGE_TWO_DATA_BOTH,
        TEST_STAGE_TWO_DATA_ONE,
        TEST_STAGE_TWO_DATA_TWO,
        TEST_STAGE_TWO_FAILED,
        TEST_STAGE_TWO_START,
    }
}
declare module 'goog:goog.labs.net.webChannel.requestStats.Stat' {
    import alias = ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.Stat;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats {
    /**
     * Event class for STAT_EVENT.
     */
    class StatEvent extends StatEvent_Instance {}
    class StatEvent_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
        /**
         * Event class for STAT_EVENT.
         * @param eventTarget The stat event target for the channel.
         * @param stat The stat.
         */
        constructor(
            eventTarget: ಠ_ಠ.clutz.goog.events.EventTarget|null,
            stat: ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.Stat);
        /**
         * The stat
         */
        stat: ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.Stat;
    }
}
declare module 'goog:goog.labs.net.webChannel.requestStats.StatEvent' {
    import alias = ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.StatEvent;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats {
    /**
     * Event class for requestStats.Event.TIMING_EVENT
     */
    class TimingEvent extends TimingEvent_Instance {}
    class TimingEvent_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
        /**
         * Event class for requestStats.Event.TIMING_EVENT
         * @param target The stat event target for the channel.
         * @param size The number of characters in the POST data.
         * @param rtt The total round trip time from POST to response in MS.
         * @param retries The number of times the POST had to be retried.
         */
        constructor(
            target: ಠ_ಠ.clutz.goog.events.EventTarget|null, size: number,
            rtt: number, retries: number);
        retries: number;
        rtt: number;
        size: number;
    }
}
declare module 'goog:goog.labs.net.webChannel.requestStats.TimingEvent' {
    import alias = ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.TimingEvent;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.xhr {
    /**
     * The Content-Type HTTP header name.
     */
    var CONTENT_TYPE_HEADER: string;
    /**
     * The Content-Type HTTP header value for a url-encoded form.
     */
    var FORM_CONTENT_TYPE: string;
    /**
     * Sends a get request, returning a promise that will be resolved
     * with the response text once the request completes.
     * @param url The URL to request.
     * @param opt_options Configuration options for the request.
     */
    function get(
        url: string, opt_options?: ಠ_ಠ.clutz.goog.labs.net.xhr.Options):
        ಠ_ಠ.clutz.goog.Promise<string, any>;
    /**
     * Sends a get request, returning a promise that will be resolved with the
     * response as a Blob.
     * @param url The URL to request.
     * @param opt_options Configuration options for the request. If responseType
     * is set, it will be ignored for this request.
     */
    function getBlob(
        url: string, opt_options?: ಠ_ಠ.clutz.goog.labs.net.xhr.Options):
        ಠ_ಠ.clutz.goog.Promise<Blob, any>;
    /**
     * Sends a get request, returning a promise that will be resolved with the
     * response as an array of bytes.
     *
     * Supported in all XMLHttpRequest level 2 browsers, as well as IE9. IE8 and
     * earlier are not supported.
     * @param url The URL to request.
     * @param opt_options Configuration options for the request. If responseType
     * is set, it will be ignored for this request.
     */
    function getBytes(
        url: string, opt_options?: ಠ_ಠ.clutz.goog.labs.net.xhr.Options):
        ಠ_ಠ.clutz.goog.Promise<Uint8Array|ಠ_ಠ.clutz.goog.vec.Number, any>;
    /**
     * Sends a get request, returning a promise that will be resolved with
     * the parsed response text once the request completes.
     * @param url The URL to request.
     * @param opt_options Configuration options for the request.
     */
    function getJson(
        url: string, opt_options?: ಠ_ಠ.clutz.goog.labs.net.xhr.Options):
        ಠ_ಠ.clutz.goog.Promise<GlobalObject|null, any>;
    /**
     * Sends a post request, returning a promise that will be resolved
     * with the response text once the request completes.
     * @param url The URL to request.
     * @param data The body of the post request.
     * @param opt_options Configuration options for the request.
     */
    function post(
        url: string,
        data: ArrayBuffer|null|ArrayBufferView|Blob|Document|FormData|string|
        undefined,
        opt_options?: ಠ_ಠ.clutz.goog.labs.net.xhr.Options):
        ಠ_ಠ.clutz.goog.Promise<string, any>;
    /**
     * Sends a post request, returning a promise that will be resolved with
     * the parsed response text once the request completes.
     * @param url The URL to request.
     * @param data The body of the post request.
     * @param opt_options Configuration options for the request.
     */
    function postJson(
        url: string,
        data: ArrayBuffer|null|ArrayBufferView|Blob|Document|FormData|string|
        undefined,
        opt_options?: ಠ_ಠ.clutz.goog.labs.net.xhr.Options):
        ಠ_ಠ.clutz.goog.Promise<GlobalObject|null, any>;
    /**
     * Sends a request, returning a promise that will be resolved
     * with the XHR object once the request completes.
     *
     * If content type hasn't been set in opt_options headers, and hasn't been
     * explicitly set to null, default to form-urlencoded/UTF8 for POSTs.
     * @param method The HTTP method for the request.
     * @param url The URL to request.
     * @param data The body of the post request.
     * @param opt_options Configuration options for the request.
     */
    function send(
        method: string, url: string,
        data: ArrayBuffer|null|ArrayBufferView|Blob|Document|FormData|string|
        undefined,
        opt_options?: ಠ_ಠ.clutz.goog.labs.net.xhr.Options):
        ಠ_ಠ.clutz.goog.Promise<ಠ_ಠ.clutz.goog.net.XhrLike|XMLHttpRequest, any>;
}
declare module 'goog:goog.labs.net.xhr' {
    import alias = ಠ_ಠ.clutz.goog.labs.net.xhr;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.xhr {
    /**
     * Generic error that may occur during a request.
     */
    class Error extends Error_Instance {}
    class Error_Instance extends ಠ_ಠ.clutz.goog.debug.Error_Instance {
        /**
         * Generic error that may occur during a request.
         * @param message The error message.
         * @param url The URL that was being requested.
         * @param request The XHR that failed.
         */
        constructor(
            message: string, url: string,
            request: ಠ_ಠ.clutz.goog.net.XhrLike|XMLHttpRequest);
        /**
         * The URL that was requested.
         */
        url: string;
        /**
         * The XMLHttpRequest corresponding with the failed request.
         */
        xhr: ಠ_ಠ.clutz.goog.net.XhrLike|XMLHttpRequest;
        name: string;
    }
}
declare module 'goog:goog.labs.net.xhr.Error' {
    import alias = ಠ_ಠ.clutz.goog.labs.net.xhr.Error;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.xhr {
    /**
     * Class for HTTP errors.
     */
    class HttpError extends HttpError_Instance {}
    class HttpError_Instance extends
        ಠ_ಠ.clutz.goog.labs.net.xhr.Error_Instance {
        /**
         * Class for HTTP errors.
         * @param status The HTTP status code of the response.
         * @param url The URL that was being requested.
         * @param request The XHR that failed.
         */
        constructor(
            status: number, url: string,
            request: ಠ_ಠ.clutz.goog.net.XhrLike|XMLHttpRequest);
        /**
         * The HTTP status code for the error.
         */
        status: number;
        name: string;
    }
}
declare module 'goog:goog.labs.net.xhr.HttpError' {
    import alias = ಠ_ಠ.clutz.goog.labs.net.xhr.HttpError;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.xhr {
    /**
     * Configuration options for an XMLHttpRequest.
     * - headers: map of header key/value pairs.
     * - timeoutMs: number of milliseconds after which the request will be timed
     * out by the client. Default is to allow the browser to handle timeouts.
     * - withCredentials: whether user credentials are to be included in a
     * cross-origin request. See:
     * http://www.w3.org/TR/XMLHttpRequest/#the-withcredentials-attribute
     * - mimeType: allows the caller to override the content-type and charset
     * for the request. See:
     * http://www.w3.org/TR/XMLHttpRequest/#dom-xmlhttprequest-overridemimetype
     * - responseType: may be set to change the response type to an arraybuffer
     * or blob for downloading binary data. See:
     * http://www.w3.org/TR/XMLHttpRequest/#dom-xmlhttprequest-responsetype]
     * - xmlHttpFactory: allows the caller to override the factory used to
     * create XMLHttpRequest objects.
     * - xssiPrefix: Prefix used for protecting against XSSI attacks, which
     * should be removed before parsing the response as JSON.
     */
    type Options = {
        headers?: {[/* warning: coerced from ? */ key: string]: string} | null,
        mimeType?: string,
        responseType?: ಠ_ಠ.clutz.goog.labs.net.xhr.ResponseType,
        timeoutMs?: number,
        withCredentials?: boolean,
        xmlHttpFactory?: ಠ_ಠ.clutz.goog.net.XmlHttpFactory | null,
        xssiPrefix?: string
    };
}
declare module 'goog:goog.labs.net.xhr.Options' {
    import alias = ಠ_ಠ.clutz.goog.labs.net.xhr.Options;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.xhr {
    /**
     * Defines the types that are allowed as post data.
     */
    type PostData = ArrayBuffer|null|ArrayBufferView|Blob|Document|FormData|
        string|undefined;
}
declare module 'goog:goog.labs.net.xhr.PostData' {
    import alias = ಠ_ಠ.clutz.goog.labs.net.xhr.PostData;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.xhr {
    /**
     * Supported data types for the responseType field.
     * See: http://www.w3.org/TR/XMLHttpRequest/#dom-xmlhttprequest-response
     */
    type ResponseType = string&{clutzEnumBrand: never};
    var ResponseType: {
        ARRAYBUFFER: ResponseType,
        BLOB: ResponseType,
        DOCUMENT: ResponseType,
        JSON: ResponseType,
        TEXT: ResponseType,
    };
}
declare module 'goog:goog.labs.net.xhr.ResponseType' {
    import alias = ಠ_ಠ.clutz.goog.labs.net.xhr.ResponseType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.net.xhr {
    /**
     * Class for Timeout errors.
     */
    class TimeoutError extends TimeoutError_Instance {}
    class TimeoutError_Instance extends
        ಠ_ಠ.clutz.goog.labs.net.xhr.Error_Instance {
        /**
         * Class for Timeout errors.
         * @param url The URL that timed out.
         * @param request The XHR that failed.
         */
        constructor(
            url: string, request: ಠ_ಠ.clutz.goog.net.XhrLike|XMLHttpRequest);
        name: string;
    }
}
declare module 'goog:goog.labs.net.xhr.TimeoutError' {
    import alias = ಠ_ಠ.clutz.goog.labs.net.xhr.TimeoutError;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.pubsub {
    /**
     * Topic-based publish/subscribe messaging implementation that provides
     * communication between browsing contexts that share the same origin.
     *
     * Wrapper around PubSub that utilizes localStorage to broadcast
     * publications to all browser windows with the same origin as the
     * publishing context. This allows for topic-based publish/subscribe
     * implementation of strings shared by all browser contexts that share the
     * same origin.
     *
     * Delivery is guaranteed on all browsers except IE8 where topics expire
     * after a timeout. Publishing of a topic within a callback function
     * provides no guarantee on ordering in that there is a possibility that
     * separate origin contexts may see topics in a different order.
     *
     * This class is not secure and in certain cases (e.g., a browser crash)
     * data that is published can persist in localStorage indefinitely. Do not
     * use this class to communicate private or confidential information.
     *
     * On IE8, localStorage is shared by the http and https origins. An attacker
     * could possibly leverage this to publish to the secure origin.
     *
     * goog.labs.pubsub.BroadcastPubSub wraps an instance of PubSub rather than
     * subclassing because the base PubSub class allows publishing of arbitrary
     * objects.
     *
     * Special handling is done for the IE8 browsers. See the IE8_EVENTS_KEY_
     * constant and the {@code publish} function for more information.
     */
    class BroadcastPubSub extends BroadcastPubSub_Instance {}
    class BroadcastPubSub_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance {
        /**
         * Clears the subscription list for a topic, or all topics if
         * unspecified.
         * @param opt_topic Topic to clear (all topics if unspecified).
         */
        clear(opt_topic?: string): void;
        disposeInternal(): void;
        /**
         * Returns the number of subscriptions to the given topic (or all topics
         * if unspecified). This number will not change while publishing any
         * messages.
         * @param opt_topic The topic (all topics if unspecified).
         */
        getCount(opt_topic?: string): number;
        /**
         * Publishes a message to a topic. Remote subscriptions in other
         * tabs/windows are dispatched via local storage events. Local
         * subscriptions are called asynchronously via Timer event in order to
         * simulate remote behavior locally.
         * @param topic Topic to publish to.
         * @param var_args String arguments that are applied to each
         * subscription function.
         */
        publish(topic: string, ...var_args: (string|undefined)[]): void;
        /**
         * Subscribes a function to a topic. The function is invoked as a method
         * on the given {@code opt_context} object, or in the global scope if no
         * context is specified. Subscribing the same function to the same topic
         * multiple times will result in multiple function invocations while
         * publishing. Returns a subscription key that can be used to
         * unsubscribe the function from the topic via {@link
         * #unsubscribeByKey}.
         * @param topic Topic to subscribe to.
         * @param fn Function to be invoked when a message is published to the
         * given topic.
         * @param opt_context Object in whose context the function is to be
         * called (the global scope if none).
         */
        subscribe(
            topic: string, fn: (...a: any[]) => any,
            opt_context?: GlobalObject|null): number;
        /**
         * Subscribes a single-use function to a topic. The function is invoked
         * as a method on the given {@code opt_context} object, or in the global
         * scope if no context is specified, and is then unsubscribed. Returns a
         * subscription key that can be used to unsubscribe the function from
         * the topic via {@link #unsubscribeByKey}.
         * @param topic Topic to subscribe to.
         * @param fn Function to be invoked once and then unsubscribed when a
         * message is published to the given topic.
         * @param opt_context Object in whose context the function is to be
         * called (the global scope if none).
         */
        subscribeOnce(
            topic: string, fn: (...a: any[]) => any,
            opt_context?: GlobalObject|null): number;
        /**
         * Unsubscribes a function from a topic. Only deletes the first match
         * found. Returns a Boolean indicating whether a subscription was
         * removed.
         * @param topic Topic to unsubscribe from.
         * @param fn Function to unsubscribe.
         * @param opt_context Object in whose context the function was to be
         * called (the global scope if none).
         */
        unsubscribe(
            topic: string, fn: (...a: any[]) => any,
            opt_context?: GlobalObject|null): boolean;
        /**
         * Removes a subscription based on the key returned by {@link
         * #subscribe}. No-op if no matching subscription is found. Returns a
         * Boolean indicating whether a subscription was removed.
         * @param key Subscription key.
         */
        unsubscribeByKey(key: number): boolean;
    }
}
declare module 'goog:goog.labs.pubsub.BroadcastPubSub' {
    import alias = ಠ_ಠ.clutz.goog.labs.pubsub.BroadcastPubSub;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.storage {
    /**
     * Provides a storage with bounded number of elements, expiring keys and
     * a collection method.
     */
    class BoundedCollectableStorage extends BoundedCollectableStorage_Instance {
    }
    class BoundedCollectableStorage_Instance extends
        ಠ_ಠ.clutz.goog.storage.CollectableStorage_Instance {
        /**
         * Provides a storage with bounded number of elements, expiring keys and
         * a collection method.
         * @param mechanism The underlying storage mechanism.
         * @param maxItems Maximum number of items in storage.
         */
        constructor(
            mechanism: ಠ_ಠ.clutz.goog.storage.mechanism.IterableMechanism,
            maxItems: number);
        /**
         * Cleans up the storage by removing expired keys.
         * @param opt_strict Also remove invalid keys.
         */
        collect(opt_strict?: boolean): void;
        /**
         * Ensures that we keep only maxItems number of items in a local
         * storage.
         * @param opt_skipExpired skip removing expired items first.
         * @param opt_strict Also remove invalid keys.
         */
        collectOversize(opt_skipExpired?: boolean, opt_strict?: boolean): void;
        /**
         * Remove an item from the data storage.
         * @param key The key to remove.
         */
        remove(key: string): void;
        /**
         * Set an item in the storage.
         * @param key The key to set.
         * @param value The value to serialize to a string and save.
         * @param opt_expiration The number of miliseconds since epoch (as in
         * goog.now()) when the value is to expire. If the expiration time is
         * not provided, the value will persist as long as possible.
         */
        set(key: string, value: any, opt_expiration?: number): void;
    }
}
declare module 'goog:goog.labs.storage.BoundedCollectableStorage' {
    import alias = ಠ_ಠ.clutz.goog.labs.storage.BoundedCollectableStorage;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.structs {
    /**
     * Creates a new map.
     */
    class Map extends Map_Instance {}
    class Map_Instance {
        private noStructuralTyping_: any;
        /**
         * Adds the content of the map to this map. If a new entry uses a key
         * that already exists in this map, the existing key is replaced.
         * @param map The map to add.
         */
        addAll(map: ಠ_ಠ.clutz.goog.labs.structs.Map): void;
        /**
         * Clears the map to the initial state.
         */
        clear(): void;
        /**
         * Clones this map.
         */
        clone(): ಠ_ಠ.clutz.goog.labs.structs.Map;
        containsKey(key: string): boolean;
        /**
         * Whether the map contains the given value. The comparison is done
         * using !== comparator. Also returns true if the passed value is NaN
         * and a NaN value exists in the map.
         * @param value Value to check.
         */
        containsValue(value: any): boolean;
        /**
         * Gets the value for the given key.
         * @param key The key whose value we want to retrieve.
         * @param opt_default The default value to return if the key does not
         * exist in the map, default to undefined.
         */
        get(key: string, opt_default?: any): any;
        getCount(): number;
        getEntries(): (any[]|null)[];
        getKeys(): string[];
        getValues(): ಠ_ಠ.clutz.goog.uri.utils.QueryArray;
        isEmpty(): boolean;
        /**
         * Removes the map entry with the given key.
         * @param key The key to remove.
         */
        remove(key: string): boolean;
        /**
         * Adds the (key, value) pair, overriding previous entry with the same
         * key, if any.
         * @param key The key.
         * @param value The value.
         */
        set(key: string, value: any): void;
    }
}
declare namespace ಠ_ಠ.clutz.goog.labs.structs.Map {
    type BrowserFeature = boolean&{clutzEnumBrand: never};
    var BrowserFeature: {
        OBJECT_CREATE_SUPPORTED: BrowserFeature,
        OBJECT_KEYS_SUPPORTED: BrowserFeature,
    };
}
declare module 'goog:goog.labs.structs.Map' {
    import alias = ಠ_ಠ.clutz.goog.labs.structs.Map;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.structs {
    /**
     * Creates a new multimap.
     */
    class Multimap extends Multimap_Instance {}
    class Multimap_Instance {
        private noStructuralTyping_: any;
        /**
         * Adds the given (key, value) pair to the map. The (key, value) pair
         * is guaranteed to be added.
         * @param key The key to add.
         * @param value The value to add.
         */
        add(key: string, value: any): void;
        /**
         * Adds the contents of the given map/multimap to this multimap.
         * @param map The map to add.
         */
        addAllFromMultimap(map: ಠ_ಠ.clutz.goog.labs.structs.Map|
                           ಠ_ಠ.clutz.goog.labs.structs.Multimap): void;
        /**
         * Stores a collection of values to the given key. Does not replace
         * existing (key, value) pairs.
         * @param key The key to add.
         * @param values The values to add.
         */
        addAllValues(key: string, values: ಠ_ಠ.clutz.goog.uri.utils.QueryArray):
            void;
        /**
         * Clears the multimap.
         */
        clear(): void;
        /**
         * Clones this multimap.
         */
        clone(): ಠ_ಠ.clutz.goog.labs.structs.Multimap;
        containsEntry(key: string, value: any): boolean;
        containsKey(key: string): boolean;
        containsValue(value: any): boolean;
        /**
         * Gets the values correspond to the given key.
         * @param key The key to retrieve.
         */
        get(key: string): ಠ_ಠ.clutz.goog.uri.utils.QueryArray;
        getCount(): number;
        getEntries(): any[][];
        getKeys(): string[];
        getValues(): ಠ_ಠ.clutz.goog.uri.utils.QueryArray;
        isEmpty(): boolean;
        /**
         * Removes a single occurrence of (key, value) pair.
         * @param key The key to remove.
         * @param value The value to remove.
         */
        remove(key: string, value: any): boolean;
        /**
         * Removes all values corresponding to the given key.
         * @param key The key whose values are to be removed.
         */
        removeAll(key: string): boolean;
        /**
         * Replaces all the values for the given key with the given values.
         * @param key The key whose values are to be replaced.
         * @param values The new values. If empty, this is equivalent to {@code
         * removaAll(key)}.
         */
        replaceValues(key: string, values: ಠ_ಠ.clutz.goog.uri.utils.QueryArray):
            void;
    }
}
declare module 'goog:goog.labs.structs.Multimap' {
    import alias = ಠ_ಠ.clutz.goog.labs.structs.Multimap;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.style {
    /**
     * Monitors the window for changes to the ratio between device and screen
     * pixels, e.g. when the user moves the window from a high density screen to
     * a screen with normal density. Dispatches
     * goog.labs.style.PixelDensityMonitor.EventType.CHANGE events when the
     * density changes between the two predefined values NORMAL and HIGH.
     *
     * This class uses the window.devicePixelRatio value which is supported in
     * WebKit and FF18. If the value does not exist, it will always return a
     * NORMAL density. It requires support for MediaQueryList to detect changes
     * to the devicePixelRatio.
     */
    class PixelDensityMonitor extends PixelDensityMonitor_Instance {}
    class PixelDensityMonitor_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * Monitors the window for changes to the ratio between device and
         * screen pixels, e.g. when the user moves the window from a high
         * density screen to a screen with normal density. Dispatches
         * goog.labs.style.PixelDensityMonitor.EventType.CHANGE events when the
         * density changes between the two predefined values NORMAL and HIGH.
         *
         * This class uses the window.devicePixelRatio value which is supported
         * in WebKit and FF18. If the value does not exist, it will always
         * return a NORMAL density. It requires support for MediaQueryList to
         * detect changes to the devicePixelRatio.
         * @param opt_domHelper The DomHelper which contains the document
         * associated with the window to listen to. Defaults to the one in which
         * this code is executing.
         */
        constructor(opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper);
        disposeInternal(): void;
        getDensity(): ಠ_ಠ.clutz.goog.labs.style.PixelDensityMonitor.Density;
        /**
         * Starts monitoring for changes in pixel density.
         */
        start(): void;
    }
}
declare module 'goog:goog.labs.style.PixelDensityMonitor' {
    import alias = ಠ_ಠ.clutz.goog.labs.style.PixelDensityMonitor;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.style.PixelDensityMonitor {
    /**
     * The two different pixel density modes on which the various ratios between
     * physical and device pixels are mapped.
     */
    enum Density {
        HIGH,
        NORMAL,
    }
}
declare module 'goog:goog.labs.style.PixelDensityMonitor.Density' {
    import alias = ಠ_ಠ.clutz.goog.labs.style.PixelDensityMonitor.Density;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.style.PixelDensityMonitor {
    /**
     * The events fired by the PixelDensityMonitor.
     */
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        CHANGE: EventType,
    };
}
declare module 'goog:goog.labs.style.PixelDensityMonitor.EventType' {
    import alias = ಠ_ಠ.clutz.goog.labs.style.PixelDensityMonitor.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.userAgent.browser {
    function getVersion(): string;
    function isAndroidBrowser(): boolean;
    function isChrome(): boolean;
    function isCoast(): boolean;
    function isEdge(): boolean;
    function isFirefox(): boolean;
    function isIE(): boolean;
    function isIosWebview(): boolean;
    function isOpera(): boolean;
    function isSafari(): boolean;
    /**
     * For more information, see:
     * http://docs.aws.amazon.com/silk/latest/developerguide/user-agent.html
     */
    function isSilk(): boolean;
    function isVersionOrHigher(version: string|number): boolean;
}
declare module 'goog:goog.labs.userAgent.browser' {
    import alias = ಠ_ಠ.clutz.goog.labs.userAgent.browser;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.userAgent.device {
    function isDesktop(): boolean;
    /**
     * Currently we detect the iPhone, iPod and Android mobiles (devices that
     * have both Android and Mobile in the user agent string).
     */
    function isMobile(): boolean;
    /**
     * Currently we detect Kindle Fire, iPad, and Android tablets (devices that
     * have Android but not Mobile in the user agent string).
     */
    function isTablet(): boolean;
}
declare module 'goog:goog.labs.userAgent.device' {
    import alias = ಠ_ಠ.clutz.goog.labs.userAgent.device;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.userAgent.engine {
    function getVersion(): string;
    function isEdge(): boolean;
    function isGecko(): boolean;
    function isPresto(): boolean;
    function isTrident(): boolean;
    function isVersionOrHigher(version: string|number): boolean;
    function isWebKit(): boolean;
}
declare module 'goog:goog.labs.userAgent.engine' {
    import alias = ಠ_ಠ.clutz.goog.labs.userAgent.engine;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.userAgent.platform {
    /**
     * The version of the platform. We only determine the version for Windows,
     * Mac, and Chrome OS. It doesn't make much sense on Linux. For Windows, we
     * only look at the NT version. Non-NT-based versions (e.g. 95, 98, etc.)
     * are given version 0.0.
     */
    function getVersion(): string;
    function isAndroid(): boolean;
    function isChromeOS(): boolean;
    function isIos(): boolean;
    function isIpad(): boolean;
    function isIphone(): boolean;
    function isIpod(): boolean;
    /**
     * Note: ChromeOS is not considered to be Linux as it does not report itself
     * as Linux in the user agent string.
     */
    function isLinux(): boolean;
    function isMacintosh(): boolean;
    function isVersionOrHigher(version: string|number): boolean;
    function isWindows(): boolean;
}
declare module 'goog:goog.labs.userAgent.platform' {
    import alias = ಠ_ಠ.clutz.goog.labs.userAgent.platform;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.userAgent.util {
    /**
     * Parses the user agent into tuples for each section.
     */
    function extractVersionTuples(userAgent: string): string[][];
    function getUserAgent(): string;
    function matchUserAgent(str: string): boolean;
    function matchUserAgentIgnoreCase(str: string): boolean;
    /**
     * Applications may override browser detection on the built in
     * navigator.userAgent object by setting this string. Set to null to use the
     * browser object instead.
     * @param opt_userAgent The User-Agent override.
     */
    function setUserAgent(opt_userAgent?: string|null): void;
}
declare module 'goog:goog.labs.userAgent.util' {
    import alias = ಠ_ಠ.clutz.goog.labs.userAgent.util;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.labs.useragent.verifier {
    var NOT_IE: number;
    /**
     * Detect the the current IE version using runtime behavior, returns 0
     * if a version of IE is not detected.
     */
    function detectIeVersionByBehavior(): number;
    /**
     * Detect the the current IE version using MSIE version presented in the
     * user agent string (This will not detected IE 11 which does not present a
     * MSIE version), or zero if IE is not detected.
     */
    function detectIeVersionByNavigator(): number;
    /**
     * Correct the actual IE version based on the Trident version in the user
     * agent string.  This adjusts for IE's "compatiblity modes".
     */
    function getCorrectedIEVersionByNavigator(): number;
}
declare module 'goog:goog.labs.useragent.verifier' {
    import alias = ಠ_ಠ.clutz.goog.labs.useragent.verifier;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.locale {
    /**
     * Enum of resources that can be registered.
     */
    type Resource = string&{clutzEnumBrand: never};
    var Resource: {
        DATE_TIME_CONSTANTS: Resource,
        LOCAL_NAME_CONSTANTS: Resource,
        NUMBER_FORMAT_CONSTANTS: Resource,
        TIME_ZONE_ALL_LONG_NAMES: Resource,
        TIME_ZONE_CONSTANTS: Resource,
        TIME_ZONE_SELECTED_IDS: Resource,
        TIME_ZONE_SELECTED_LONG_NAMES: Resource,
        TIME_ZONE_SELECTED_SHORT_NAMES: Resource,
    };
    /**
     * Returns the language-subtag of the given language code.
     * @param languageCode Language code to extract language subtag from.
     */
    function getLanguageSubTag(languageCode: string): string;
    /**
     * Retrieve the current locale
     */
    function getLocale(): string;
    /**
     * Returns the localized country name for the provided language code in the
     * current or provided locale symbols set.
     *
     * This method depends on `goog.locale.LocaleNameConstants__<locale>`
     * available from http://go/js_locale_data. User of this method has to add
     * dependency to this.
     * @param languageCode Language code to lookup the country name for.
     * @param opt_localeSymbols If omitted the current locale symbol set is
     * used.
     */
    function getLocalizedCountryName(
        languageCode: string, opt_localeSymbols?: GlobalObject|null): string;
    /**
     * Returns the localized language name for the provided language code in
     * the current or provided locale symbols set.
     *
     * This method depends on `goog.locale.LocaleNameConstants__<locale>`
     * available from http://go/js_locale_data. User of this method has to add
     * dependency to this.
     * @param languageCode Language code to lookup the language name for.
     * @param opt_localeSymbols locale symbol set if given.
     */
    function getLocalizedLanguageName(
        languageCode: string, opt_localeSymbols?: GlobalObject|null): string;
    /**
     * Returns the localized country name for the provided language code in the
     * current or provided locale symbols set.
     *
     * This method depends on `goog.locale.LocaleNameConstants__<locale>`
     * available from http://go/js_locale_data. User of this method has to add
     * dependency to this.
     * @param regionCode Two character country code or three digit region code
     * to look up the country name for.
     * @param opt_localeSymbols If omitted the current locale symbol set is
     * used.
     */
    function getLocalizedRegionNameFromRegionCode(
        regionCode: string, opt_localeSymbols?: GlobalObject|null): string;
    /**
     * Returns the country name of the provided language code in its native
     * language.
     *
     * This method depends on goog.locale.nativeNameConstants available from
     * nativenameconstants.js. User of this method has to add dependency to
     * this.
     * @param countryCode Code to lookup the country name for.
     */
    function getNativeCountryName(countryCode: string): string;
    /**
     * Returns the language name of the provided language code in its native
     * language.
     *
     * This method depends on goog.locale.nativeNameConstants available from
     * nativenameconstants.js. User of this method has to add dependency to
     * this.
     * @param languageCode Language code to lookup the language name for.
     */
    function getNativeLanguageName(languageCode: string): string;
    /**
     * Returns the region-sub-tag of the given language code.
     * @param languageCode Language code to extract region subtag from.
     */
    function getRegionSubTag(languageCode: string): string;
    /**
     * Retrieve specified resource for certain locale.
     * @param resourceName String that represents the type of resource.
     * @param opt_locale Locale ID, if not given, current locale will be
     * assumed.
     */
    function getResource(
        resourceName: string, opt_locale?: string): GlobalObject|null|undefined;
    /**
     * Retrieve specified resource for certain locale with fallback. For
     * example, request of 'zh_CN' will be resolved in following order: zh_CN,
     * zh, en. If none of the above succeeds, of if the resource as indicated by
     * resourceName does not exist at all, undefined will be returned.
     * @param resourceName String that represents the type of resource.
     * @param opt_locale locale ID, if not given, current locale will be
     * assumed.
     */
    function getResourceWithFallback(
        resourceName: string, opt_locale?: string): GlobalObject|null|undefined;
    /**
     * Returns the script subtag of the locale with the first alphabet in
     * uppercase and the rest 3 characters in lower case.
     * @param languageCode Language Code to extract script subtag from.
     */
    function getScriptSubTag(languageCode: string): string;
    /**
     * Returns the displayable list of long timezone names paired with its id
     * for the current locale.
     *
     * This method depends on `goog.locale.TimeZoneAllLongNames__<locale>`
     * available from http://go/js_locale_data. Users of this method must add a
     * dependency on this.
     */
    function getTimeZoneAllLongNames(): (GlobalObject|null)[]|null;
    /**
     * Returns the displayable list of long timezone names paired with its id
     * for the current locale, selected based on the region or language
     * provided.
     *
     * This method depends on `goog.locale.TimeZone*__<locale>` available
     * from http://go/js_locale_data. Users of this method must add a dependency
     * on this.
     * @param opt_regionOrLang If region tag is provided, timezone ids specific
     * this region are considered. If language is provided, all regions for
     * which this language is defacto official is considered. If this parameter
     * is not speficied, current locale is used to extract this information.
     */
    function getTimeZoneSelectedLongNames(opt_regionOrLang?: string):
        (GlobalObject|null)[];
    /**
     * Returns the displayable list of short timezone names paired with its id
     * for the current locale, selected based on the region or language
     * provided.
     *
     * This method depends on `goog.locale.TimeZone*__<locale>` available
     * from http://go/js_locale_data. Users of this method must add a dependency
     * on this.
     * @param opt_regionOrLang If region tag is provided, timezone ids specific
     * this region are considered. If language is provided, all regions for
     * which this language is defacto official is considered. If this parameter
     * is not speficied, current locale is used to extract this information.
     */
    function getTimeZoneSelectedShortNames(opt_regionOrLang?: string):
        (GlobalObject|null)[];
    /**
     * Returns the variant-sub-tag of the given language code.
     * @param languageCode Language code to extract variant subtag from.
     */
    function getVariantSubTag(languageCode: string): string;
    /**
     * Returns true if the required resource has already been registered.
     * @param resourceName String that represents the type of resource.
     * @param localeName Locale ID.
     */
    function isResourceRegistered(
        resourceName: string, localeName: string): boolean;
    /**
     * Registers the LocaleNameConstants constants object for a given locale
     * name.
     * @param dataObj The resource object.
     * @param localeName Locale ID.
     */
    function registerLocaleNameConstants(
        dataObj: GlobalObject|null, localeName: string): void;
    /**
     * Register a resource object for certain locale.
     * @param dataObj The resource object being registered.
     * @param resourceName String that represents the type of resource.
     * @param localeName Locale ID.
     */
    function registerResource(
        dataObj: GlobalObject|null, resourceName: string,
        localeName: string): void;
    /**
     * Registers the TimeZoneAllLongNames constants object for a given locale
     * name.
     * @param dataObj The resource object.
     * @param localeName Locale ID.
     */
    function registerTimeZoneAllLongNames(
        dataObj: GlobalObject|null, localeName: string): void;
    /**
     * Registers the timezone constants object for a given locale name.
     * @param dataObj The resource object.
     * @param localeName Locale ID.
     */
    function registerTimeZoneConstants(
        dataObj: GlobalObject|null, localeName: string): void;
    /**
     * Registers the TimeZoneSelectedIds constants object for a given locale
     * name.
     * @param dataObj The resource object.
     * @param localeName Locale ID.
     */
    function registerTimeZoneSelectedIds(
        dataObj: GlobalObject|null, localeName: string): void;
    /**
     * Registers the TimeZoneSelectedLongNames constants object for a given
     * locale name.
     * @param dataObj The resource object.
     * @param localeName Locale ID.
     */
    function registerTimeZoneSelectedLongNames(
        dataObj: GlobalObject|null, localeName: string): void;
    /**
     * Registers the TimeZoneSelectedShortNames constants object for a given
     * locale name.
     * @param dataObj The resource object.
     * @param localeName Locale ID.
     */
    function registerTimeZoneSelectedShortNames(
        dataObj: GlobalObject|null, localeName: string): void;
    /**
     * Set current locale to the specified one.
     * @param localeName Locale name string. We are following the usage in CLDR,
     * but can make a few compromise for existing name compatibility.
     */
    function setLocale(localeName: string): void;
    var activeLocale_: any;
}
declare module 'goog:goog.locale' {
    import alias = ಠ_ಠ.clutz.goog.locale;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.locale {
    /**
     * Time zone fingerprint mapping to time zone list.
     */
    type TimeZoneFingerprint = string[]&{clutzEnumBrand: never};
    var TimeZoneFingerprint: {
        1001739662: TimeZoneFingerprint,
        1037565906: TimeZoneFingerprint,
        105862464: TimeZoneFingerprint,
        12: TimeZoneFingerprint,
        1286253222: TimeZoneFingerprint,
        1294772902: TimeZoneFingerprint,
        1373765610: TimeZoneFingerprint,
        1465210176: TimeZoneFingerprint,
        1465865536: TimeZoneFingerprint,
        20: TimeZoneFingerprint,
        22: TimeZoneFingerprint,
        24: TimeZoneFingerprint,
        25: TimeZoneFingerprint,
        26: TimeZoneFingerprint,
        269133956: TimeZoneFingerprint,
        28: TimeZoneFingerprint,
        29: TimeZoneFingerprint,
        30: TimeZoneFingerprint,
        312471854: TimeZoneFingerprint,
        32: TimeZoneFingerprint,
        34: TimeZoneFingerprint,
        35: TimeZoneFingerprint,
        36: TimeZoneFingerprint,
        37: TimeZoneFingerprint,
        38: TimeZoneFingerprint,
        39: TimeZoneFingerprint,
        40: TimeZoneFingerprint,
        403351686: TimeZoneFingerprint,
        41: TimeZoneFingerprint,
        41025476: TimeZoneFingerprint,
        411740806: TimeZoneFingerprint,
        42: TimeZoneFingerprint,
        44: TimeZoneFingerprint,
        456480044: TimeZoneFingerprint,
        46: TimeZoneFingerprint,
        474655352: TimeZoneFingerprint,
        48: TimeZoneFingerprint,
        483044050: TimeZoneFingerprint,
        483699410: TimeZoneFingerprint,
        487587858: TimeZoneFingerprint,
        487915538: TimeZoneFingerprint,
        491433170: TimeZoneFingerprint,
        492088530: TimeZoneFingerprint,
        495058823: TimeZoneFingerprint,
        497024903: TimeZoneFingerprint,
        49938444: TimeZoneFingerprint,
        50: TimeZoneFingerprint,
        501219282: TimeZoneFingerprint,
        52: TimeZoneFingerprint,
        54: TimeZoneFingerprint,
        559943005: TimeZoneFingerprint,
        56: TimeZoneFingerprint,
        570425352: TimeZoneFingerprint,
        572522538: TimeZoneFingerprint,
        58: TimeZoneFingerprint,
        581567010: TimeZoneFingerprint,
        592794974: TimeZoneFingerprint,
        599086472: TimeZoneFingerprint,
        599086512: TimeZoneFingerprint,
        6: TimeZoneFingerprint,
        60: TimeZoneFingerprint,
        617261764: TimeZoneFingerprint,
        617261788: TimeZoneFingerprint,
        617786052: TimeZoneFingerprint,
        62: TimeZoneFingerprint,
        626175196: TimeZoneFingerprint,
        626175324: TimeZoneFingerprint,
        626306268: TimeZoneFingerprint,
        626338524: TimeZoneFingerprint,
        626339164: TimeZoneFingerprint,
        626347356: TimeZoneFingerprint,
        626392412: TimeZoneFingerprint,
        635437856: TimeZoneFingerprint,
        64: TimeZoneFingerprint,
        66: TimeZoneFingerprint,
        662525310: TimeZoneFingerprint,
        67: TimeZoneFingerprint,
        670913918: TimeZoneFingerprint,
        671787146: TimeZoneFingerprint,
        68: TimeZoneFingerprint,
        680176266: TimeZoneFingerprint,
        70: TimeZoneFingerprint,
        710950176: TimeZoneFingerprint,
        72: TimeZoneFingerprint,
        76502378: TimeZoneFingerprint,
        769654750: TimeZoneFingerprint,
        771751924: TimeZoneFingerprint,
        778043508: TimeZoneFingerprint,
        8: TimeZoneFingerprint,
        805300897: TimeZoneFingerprint,
        805312524: TimeZoneFingerprint,
        805312908: TimeZoneFingerprint,
        805337484: TimeZoneFingerprint,
        830603252: TimeZoneFingerprint,
        836894706: TimeZoneFingerprint,
        836894708: TimeZoneFingerprint,
        838860786: TimeZoneFingerprint,
        838860812: TimeZoneFingerprint,
        839516172: TimeZoneFingerprint,
        850043558: TimeZoneFingerprint,
        897537370: TimeZoneFingerprint,
        901076366: TimeZoneFingerprint,
        905969678: TimeZoneFingerprint,
        919994368: TimeZoneFingerprint,
        919994592: TimeZoneFingerprint,
        928339288: TimeZoneFingerprint,
        931091802: TimeZoneFingerprint,
        931091834: TimeZoneFingerprint,
        937427058: TimeZoneFingerprint,
        939480410: TimeZoneFingerprint,
        939579406: TimeZoneFingerprint,
        941621262: TimeZoneFingerprint,
        943019406: TimeZoneFingerprint,
        946339336: TimeZoneFingerprint,
        947956358: TimeZoneFingerprint,
        948087430: TimeZoneFingerprint,
        952805774: TimeZoneFingerprint,
        970325971: TimeZoneFingerprint,
        970326003: TimeZoneFingerprint,
        973078513: TimeZoneFingerprint,
        983564836: TimeZoneFingerprint,
        984437412: TimeZoneFingerprint,
    };
}
declare module 'goog:goog.locale.TimeZoneFingerprint' {
    import alias = ಠ_ಠ.clutz.goog.locale.TimeZoneFingerprint;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.locale {
    var TimeZoneList: GlobalObject;
}
declare module 'goog:goog.locale.TimeZoneList' {
    import alias = ಠ_ಠ.clutz.goog.locale.TimeZoneList;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.locale {
    /**
     * List of codes for countries valid today.
     */
    var countries: string[];
}
declare module 'goog:goog.locale.countries' {
    import alias = ಠ_ಠ.clutz.goog.locale.countries;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.locale.defaultLocaleNameConstants {
    var COUNTRY: GlobalObject;
    var LANGUAGE: GlobalObject;
}
declare module 'goog:goog.locale.defaultLocaleNameConstants' {
    import alias = ಠ_ಠ.clutz.goog.locale.defaultLocaleNameConstants;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.locale.genericFontNames {
    /**
     * Gets the list of fonts and their generic names for the given locale.
     * @param locale The locale for which font lists and font family names to be
     * produced. The expected locale id is as described in
     * http://wiki/Main/IIISynonyms in all lowercase for easy matching. Smallest
     * possible id is expected. Examples: 'zh', 'zh-tw', 'iw' instead of
     * 'zh-CN', 'zh-Hant-TW', 'he'.
     */
    function getList(locale: string): (GlobalObject|null)[]|null;
}
declare module 'goog:goog.locale.genericFontNames' {
    import alias = ಠ_ಠ.clutz.goog.locale.genericFontNames;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.locale {
    /**
     * Map from script code or language code to list of pairs of (generic name,
     * font name fallback list).
     */
    var genericFontNamesData: {[key: string]: string[][]};
}
declare module 'goog:goog.locale.genericFontNamesData' {
    import alias = ಠ_ಠ.clutz.goog.locale.genericFontNamesData;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.locale {
    /**
     * Native country and language names
     */
    var nativeNameConstants: {[key: string]: {[key: string]: string}};
}
declare module 'goog:goog.locale.nativeNameConstants' {
    import alias = ಠ_ಠ.clutz.goog.locale.nativeNameConstants;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.locale {
    /**
     * The script code to list of language codes map.
     */
    var scriptToLanguages: {[key: string]: string[]};
}
declare module 'goog:goog.locale.scriptToLanguages' {
    import alias = ಠ_ಠ.clutz.goog.locale.scriptToLanguages;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.locale.timeZoneDetection {
    /**
     * Detects browser's time zone setting. If user's country is known, a better
     * time zone choice could be guessed.
     * @param opt_country Two-letter ISO 3166 country code.
     * @param opt_date Date for calculating the fingerprint. Defaults to the
     * current date.
     */
    function detectTimeZone(
        opt_country?: string, opt_date?: GlobalDate|null): string;
    /**
     * Calculates time zone fingerprint by poking time zone offsets for 13
     * preselected time points.
     * See {@link goog.locale.timeZoneDetection.TZ_POKE_POINTS_}
     * @param date Date for calculating the fingerprint.
     */
    function getFingerprint(date: GlobalDate|null): number;
    /**
     * Returns an array of time zones that are consistent with user's platform
     * setting. If user's country is given, only the time zone for that country
     * is returned.
     * @param opt_country 2 letter ISO 3166 country code. Helps in making a
     * better guess for user's time zone.
     * @param opt_date Date for retrieving timezone list. Defaults to the
     * current date.
     */
    function getTimeZoneList(
        opt_country?: string, opt_date?: GlobalDate|null): string[];
}
declare module 'goog:goog.locale.timeZoneDetection' {
    import alias = ಠ_ಠ.clutz.goog.locale.timeZoneDetection;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.log {
    var ENABLED: boolean;
    var ROOT_LOGGER_NAME: string;
    /**
     * Adds a handler to the logger. This doesn't use the event system because
     * we want to be able to add logging to the event system.
     * @param handler Handler function to add.
     */
    function addHandler(
        logger: ಠ_ಠ.clutz.goog.debug.Logger|null,
        handler: (...a: any[]) => any): void;
    /**
     * Logs a message at the Level.SEVERE level.
     * If the logger is currently enabled for the given message level then the
     * given message is forwarded to all the registered output Handler objects.
     * @param msg The message to log.
     * @param opt_exception An exception associated with the message.
     */
    function error(
        logger: ಠ_ಠ.clutz.goog.debug.Logger|null, msg: string|(() => string),
        opt_exception?: GlobalError|null): void;
    /**
     * Logs a message at the Level.Fine level.
     * If the logger is currently enabled for the given message level then the
     * given message is forwarded to all the registered output Handler objects.
     * @param msg The message to log.
     * @param opt_exception An exception associated with the message.
     */
    function fine(
        logger: ಠ_ಠ.clutz.goog.debug.Logger|null, msg: string|(() => string),
        opt_exception?: GlobalError|null): void;
    /**
     * Finds or creates a logger for a named subsystem. If a logger has already
     * been created with the given name it is returned. Otherwise a new logger
     * is created. If a new logger is created its log level will be configured
     * based on the goog.debug.LogManager configuration and it will configured
     * to also send logging output to its parent's handlers.
     * @param name A name for the logger. This should be a dot-separated name
     * and should normally be based on the package name or class name of the
     * subsystem, such as goog.net.BrowserChannel.
     * @param opt_level If provided, override the default logging level with the
     * provided level.
     */
    function getLogger(
        name: string, opt_level?: ಠ_ಠ.clutz.goog.debug.Logger.Level|null):
        ಠ_ಠ.clutz.goog.debug.Logger|null;
    /**
     * Logs a message at the Level.INFO level.
     * If the logger is currently enabled for the given message level then the
     * given message is forwarded to all the registered output Handler objects.
     * @param msg The message to log.
     * @param opt_exception An exception associated with the message.
     */
    function info(
        logger: ಠ_ಠ.clutz.goog.debug.Logger|null, msg: string|(() => string),
        opt_exception?: GlobalError|null): void;
    /**
     * Logs a message. If the logger is currently enabled for the
     * given message level then the given message is forwarded to all the
     * registered output Handler objects.
     * @param level One of the level identifiers.
     * @param msg The message to log.
     * @param opt_exception An exception associated with the message.
     */
    function log(
        logger: ಠ_ಠ.clutz.goog.debug.Logger|null,
        level: ಠ_ಠ.clutz.goog.debug.Logger.Level|null,
        msg: string|(() => string), opt_exception?: null|GlobalObject): void;
    /**
     * Removes a handler from the logger. This doesn't use the event system
     * because we want to be able to add logging to the event system.
     * @param handler Handler function to remove.
     */
    function removeHandler(
        logger: ಠ_ಠ.clutz.goog.debug.Logger|null,
        handler: (...a: any[]) => any): boolean;
    /**
     * Logs a message at the Level.WARNING level.
     * If the logger is currently enabled for the given message level then the
     * given message is forwarded to all the registered output Handler objects.
     * @param msg The message to log.
     * @param opt_exception An exception associated with the message.
     */
    function warning(
        logger: ಠ_ಠ.clutz.goog.debug.Logger|null, msg: string|(() => string),
        opt_exception?: GlobalError|null): void;
}
declare module 'goog:goog.log' {
    import alias = ಠ_ಠ.clutz.goog.log;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.log {
    type Level = ಠ_ಠ.clutz.goog.debug.Logger.Level;
    var Level: typeof ಠ_ಠ.clutz.goog.debug.Logger.Level;
}
declare module 'goog:goog.log.Level' {
    import alias = ಠ_ಠ.clutz.goog.log.Level;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.log {
    type LogRecord = ಠ_ಠ.clutz.goog.debug.LogRecord;
    var LogRecord: typeof ಠ_ಠ.clutz.goog.debug.LogRecord;
}
declare module 'goog:goog.log.LogRecord' {
    import alias = ಠ_ಠ.clutz.goog.log.LogRecord;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.log {
    type Logger = ಠ_ಠ.clutz.goog.debug.Logger;
    var Logger: typeof ಠ_ಠ.clutz.goog.debug.Logger;
}
declare module 'goog:goog.log.Logger' {
    import alias = ಠ_ಠ.clutz.goog.log.Logger;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math {
    /**
     * Computes the angle between two points (x1,y1) and (x2,y2).
     * Angle zero points in the +X direction, 90 degrees points in the +Y
     * direction (down) and from there we grow clockwise towards 360 degrees.
     * @param x1 x of first point.
     * @param y1 y of first point.
     * @param x2 x of second point.
     * @param y2 y of second point.
     */
    function angle(x1: number, y1: number, x2: number, y2: number): number;
    /**
     * Computes the difference between startAngle and endAngle (angles in
     * degrees).
     * @param startAngle Start angle in degrees.
     * @param endAngle End angle in degrees.
     */
    function angleDifference(startAngle: number, endAngle: number): number;
    /**
     * For a given angle and radius, finds the X portion of the offset.
     * @param degrees Angle in degrees (zero points in +X direction).
     * @param radius Radius.
     */
    function angleDx(degrees: number, radius: number): number;
    /**
     * For a given angle and radius, finds the Y portion of the offset.
     * @param degrees Angle in degrees (zero points in +X direction).
     * @param radius Radius.
     */
    function angleDy(degrees: number, radius: number): number;
    /**
     * Returns the arithmetic mean of the arguments.
     * @param var_args Numbers to average.
     */
    function average(...var_args: (number|undefined)[]): number;
    /**
     * Takes a number and clamps it to within the provided bounds.
     * @param value The input number.
     * @param min The minimum value to return.
     * @param max The maximum value to return.
     */
    function clamp(value: number, min: number, max: number): number;
    /**
     * Returns whether the supplied number is finite and not NaN.
     * @param num The number to test.
     */
    function isFiniteNumber(num: number): boolean;
    /**
     * Returns whether the supplied number represents an integer, i.e. that is
     * has no fractional component.  No range-checking is performed on the
     * number.
     * @param num The number to test.
     */
    function isInt(num: number): boolean;
    function isNegativeZero(num: number): boolean;
    /**
     * Performs linear interpolation between values a and b. Returns the value
     * between a and b proportional to x (when x is between 0 and 1. When x is
     * outside this range, the return value is a linear extrapolation).
     * @param a A number.
     * @param b A number.
     * @param x The proportion between a and b.
     */
    function lerp(a: number, b: number, x: number): number;
    /**
     * Returns the precise value of floor(log10(num)).
     * Simpler implementations didn't work because of floating point rounding
     * errors. For example
     * <ul>
     * <li>Math.floor(Math.log(num) / Math.LN10) is off by one for num == 1e+3.
     * <li>Math.floor(Math.log(num) * Math.LOG10E) is off by one for num ==
     * 1e+15. <li>Math.floor(Math.log10(num)) is off by one for num == 1e+15
     * - 1.
     * </ul>
     * @param num A floating point number.
     */
    function log10Floor(num: number): number;
    /**
     * JavaScript implementation of Longest Common Subsequence problem.
     * http://en.wikipedia.org/wiki/Longest_common_subsequence
     *
     * Returns the longest possible array that is subarray of both of given
     * arrays.
     * @param array1 First array of objects.
     * @param array2 Second array of objects.
     * @param opt_compareFn Function that acts as a custom comparator for the
     * array ojects. Function should return true if objects are equal, otherwise
     * false.
     * @param opt_collectorFn Function used to decide what to return as a result
     * subsequence. It accepts 2 arguments: index of common element in the first
     * array and index in the second. The default function returns element from
     * the first array.
     */
    function longestCommonSubsequence<S = any, T = any>(
        array1: ArrayLike<S>| null, array2: ArrayLike<T>| null,
        opt_compareFn?: (...a: any[]) => any,
        opt_collectorFn?: (...a: any[]) => any): (S|T)[];
    /**
     * The % operator in JavaScript returns the remainder of a / b, but differs
     * from some other languages in that the result will have the same sign as
     * the dividend. For example, -1 % 8 == -1, whereas in some other languages
     * (such as Python) the result would be 7. This function emulates the more
     * correct modulo behavior, which is useful for certain applications such as
     * calculating an offset index in a circular list.
     * @param a The dividend.
     * @param b The divisor.
     */
    function modulo(a: number, b: number): number;
    /**
     * Tests whether the two values are equal to each other, within a certain
     * tolerance to adjust for floating point errors.
     * @param a A number.
     * @param b A number.
     * @param opt_tolerance Optional tolerance range. Defaults to 0.000001. If
     * specified, should be greater than 0.
     */
    function nearlyEquals(
        a: number, b: number, opt_tolerance?: number): boolean;
    /**
     * Returns a random integer greater than or equal to 0 and less than {@code
     * a}.
     * @param a The upper bound for the random integer (exclusive).
     */
    function randomInt(a: number): number;
    /**
     * A tweaked variant of {@code Math.ceil}. See {@code goog.math.safeFloor}
     * for details.
     * @param num A number.
     * @param opt_epsilon An infinitesimally small positive number, the rounding
     * error to tolerate.
     */
    function safeCeil(num: number, opt_epsilon?: number): number;
    /**
     * A tweaked variant of {@code Math.floor} which tolerates if the passed
     * number is infinitesimally smaller than the closest integer. It often
     * happens with the results of floating point calculations because of the
     * finite precision of the intermediate results. For example {@code
     * Math.floor(Math.log(1000) / Math.LN10) == 2}, not 3 as one would expect.
     * @param num A number.
     * @param opt_epsilon An infinitesimally small positive number, the rounding
     * error to tolerate.
     */
    function safeFloor(num: number, opt_epsilon?: number): number;
    /**
     * Returns the unbiased sample variance of the arguments. For a definition,
     * see e.g. http://en.wikipedia.org/wiki/Variance
     * @param var_args Number samples to analyze.
     */
    function sampleVariance(...var_args: (number|undefined)[]): number;
    /**
     * Returns the sign of a number as per the "sign" or "signum" function.
     * @param x The number to take the sign of.
     */
    function sign(x: number): number;
    /**
     * Normalizes an angle to be in range [0-360). Angles outside this range
     * will be normalized to be the equivalent angle with that range.
     * @param angle Angle in degrees.
     */
    function standardAngle(angle: number): number;
    /**
     * Normalizes an angle to be in range [0-2*PI). Angles outside this range
     * will be normalized to be the equivalent angle with that range.
     * @param angle Angle in radians.
     */
    function standardAngleInRadians(angle: number): number;
    /**
     * Returns the sample standard deviation of the arguments.  For a definition
     * of sample standard deviation, see e.g.
     * http://en.wikipedia.org/wiki/Standard_deviation
     * @param var_args Number samples to analyze.
     */
    function standardDeviation(...var_args: (number|undefined)[]): number;
    /**
     * Returns the sum of the arguments.
     * @param var_args Numbers to add.
     */
    function sum(...var_args: (number|undefined)[]): number;
    /**
     * Converts radians to degrees.
     * @param angleRadians Angle in radians.
     */
    function toDegrees(angleRadians: number): number;
    /**
     * Converts degrees to radians.
     * @param angleDegrees Angle in degrees.
     */
    function toRadians(angleDegrees: number): number;
    /**
     * Returns a random number greater than or equal to {@code a} and less than
     * {@code b}.
     * @param a The lower bound for the random number (inclusive).
     * @param b The upper bound for the random number (exclusive).
     */
    function uniformRandom(a: number, b: number): number;
}
declare module 'goog:goog.math' {
    import alias = ಠ_ಠ.clutz.goog.math;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.math {
    /**
     * Creates a 2D affine transform. An affine transform performs a linear
     * mapping from 2D coordinates to other 2D coordinates that preserves the
     * "straightness" and "parallelness" of lines.
     *
     * Such a coordinate transformation can be represented by a 3 row by 3
     * column matrix with an implied last row of [ 0 0 1 ]. This matrix
     * transforms source coordinates (x,y) into destination coordinates (x',y')
     * by considering them to be a column vector and multiplying the coordinate
     * vector by the matrix according to the following process: <pre> [ x']   [
     * m00  m01  m02  ] [ x ]   [ m00x + m01y + m02 ] [ y'] = [  m10  m11  m12
     * ] [ y ] = [ m10x + m11y + m12 ] [ 1 ]   [   0    0    1   ] [ 1 ]   [
     * 1         ]
     * </pre>
     *
     * This class is optimized for speed and minimizes calculations based on its
     * knowledge of the underlying matrix (as opposed to say simply performing
     * matrix multiplication).
     */
    class AffineTransform extends AffineTransform_Instance {
        /**
         * Creates a transform representing a rotation transformation.
         * @param theta The angle of rotation measured in radians.
         * @param x The x coordinate of the anchor point.
         * @param y The y coordinate of the anchor point.
         */
        static getRotateInstance(theta: number, x: number, y: number):
            ಠ_ಠ.clutz.goog.math.AffineTransform;
        /**
         * Creates a transform representing a scaling transformation.
         * @param sx The x-axis scaling factor.
         * @param sy The y-axis scaling factor.
         */
        static getScaleInstance(sx: number, sy: number):
            ಠ_ಠ.clutz.goog.math.AffineTransform;
        /**
         * Creates a transform representing a shearing transformation.
         * @param shx The x-axis shear factor.
         * @param shy The y-axis shear factor.
         */
        static getShearInstance(shx: number, shy: number):
            ಠ_ಠ.clutz.goog.math.AffineTransform;
        /**
         * Creates a transform representing a translation transformation.
         * @param dx The distance to translate in the x direction.
         * @param dy The distance to translate in the y direction.
         */
        static getTranslateInstance(dx: number, dy: number):
            ಠ_ಠ.clutz.goog.math.AffineTransform;
    }
    class AffineTransform_Instance {
        private noStructuralTyping_: any;
        /**
         * Creates a 2D affine transform. An affine transform performs a linear
         * mapping from 2D coordinates to other 2D coordinates that preserves
         * the "straightness" and "parallelness" of lines.
         *
         * Such a coordinate transformation can be represented by a 3 row by 3
         * column matrix with an implied last row of [ 0 0 1 ]. This matrix
         * transforms source coordinates (x,y) into destination coordinates
         * (x',y') by considering them to be a column vector and multiplying the
         * coordinate vector by the matrix according to the following process:
         * <pre>
         * [ x']   [  m00  m01  m02  ] [ x ]   [ m00x + m01y + m02 ]
         * [ y'] = [  m10  m11  m12  ] [ y ] = [ m10x + m11y + m12 ]
         * [ 1 ]   [   0    0    1   ] [ 1 ]   [         1         ]
         * </pre>
         *
         * This class is optimized for speed and minimizes calculations based on
         * its knowledge of the underlying matrix (as opposed to say simply
         * performing matrix multiplication).
         * @param opt_m00 The m00 coordinate of the transform.
         * @param opt_m10 The m10 coordinate of the transform.
         * @param opt_m01 The m01 coordinate of the transform.
         * @param opt_m11 The m11 coordinate of the transform.
         * @param opt_m02 The m02 coordinate of the transform.
         * @param opt_m12 The m12 coordinate of the transform.
         */
        constructor(
            opt_m00?: number, opt_m10?: number, opt_m01?: number,
            opt_m11?: number, opt_m02?: number, opt_m12?: number);
        m00_: number;
        m01_: number;
        m02_: number;
        m10_: number;
        m11_: number;
        m12_: number;
        clone(): ಠ_ಠ.clutz.goog.math.AffineTransform;
        /**
         * Concatenates an affine transform to this transform.
         * @param tx The transform to concatenate.
         */
        concatenate(tx: ಠ_ಠ.clutz.goog.math.AffineTransform):
            ಠ_ಠ.clutz.goog.math.AffineTransform;
        /**
         * Sets this transform to be identical to the given transform.
         * @param tx The transform to copy.
         */
        copyFrom(tx: ಠ_ಠ.clutz.goog.math.AffineTransform):
            ಠ_ಠ.clutz.goog.math.AffineTransform;
        createInverse(): ಠ_ಠ.clutz.goog.math.AffineTransform;
        /**
         * Compares two affine transforms for equality.
         * @param tx The other affine transform.
         */
        equals(tx: ಠ_ಠ.clutz.goog.math.AffineTransform|null): boolean;
        getDeterminant(): number;
        getScaleX(): number;
        getScaleY(): number;
        getShearX(): number;
        getShearY(): number;
        getTranslateX(): number;
        getTranslateY(): number;
        isIdentity(): boolean;
        /**
         * Returns whether the transform is invertible. A transform is not
         * invertible if the determinant is 0 or any value is non-finite or NaN.
         */
        isInvertible(): boolean;
        /**
         * Pre-concatenates an affine transform to this transform.
         * @param tx The transform to preconcatenate.
         */
        preConcatenate(tx: ಠ_ಠ.clutz.goog.math.AffineTransform):
            ಠ_ಠ.clutz.goog.math.AffineTransform;
        /**
         * Pre-concatenates this transform with a rotation transformation around
         * an anchor point.
         * @param theta The angle of rotation measured in radians.
         * @param x The x coordinate of the anchor point.
         * @param y The y coordinate of the anchor point.
         */
        preRotate(theta: number, x: number, y: number):
            ಠ_ಠ.clutz.goog.math.AffineTransform;
        /**
         * Pre-concatenates this transform with a scaling transformation,
         * i.e. calculates the following matrix product:
         *
         * <pre>
         * [sx  0 0] [m00 m01 m02]
         * [ 0 sy 0] [m10 m11 m12]
         * [ 0  0 1] [  0   0   1]
         * </pre>
         * @param sx The x-axis scaling factor.
         * @param sy The y-axis scaling factor.
         */
        preScale(sx: number, sy: number): ಠ_ಠ.clutz.goog.math.AffineTransform;
        /**
         * Pre-concatenates this transform with a shear transformation.
         * i.e. calculates the following matrix product:
         *
         * <pre>
         * [  1 shx 0] [m00 m01 m02]
         * [shy   1 0] [m10 m11 m12]
         * [  0   0 1] [  0   0   1]
         * </pre>
         * @param shx The x shear factor.
         * @param shy The y shear factor.
         */
        preShear(shx: number, shy: number): ಠ_ಠ.clutz.goog.math.AffineTransform;
        /**
         * Pre-concatenates this transform with a translate transformation,
         * i.e. calculates the following matrix product:
         *
         * <pre>
         * [1 0 dx] [m00 m01 m02]
         * [0 1 dy] [m10 m11 m12]
         * [0 0  1] [  0   0   1]
         * </pre>
         * @param dx The distance to translate in the x direction.
         * @param dy The distance to translate in the y direction.
         */
        preTranslate(dx: number, dy: number):
            ಠ_ಠ.clutz.goog.math.AffineTransform;
        /**
         * Concatenates this transform with a rotation transformation around an
         * anchor point.
         * @param theta The angle of rotation measured in radians.
         * @param x The x coordinate of the anchor point.
         * @param y The y coordinate of the anchor point.
         */
        rotate(theta: number, x: number, y: number):
            ಠ_ಠ.clutz.goog.math.AffineTransform;
        /**
         * Concatenates this transform with a scaling transformation.
         * @param sx The x-axis scaling factor.
         * @param sy The y-axis scaling factor.
         */
        scale(sx: number, sy: number): ಠ_ಠ.clutz.goog.math.AffineTransform;
        /**
         * Sets this transform to a rotation transformation.
         * @param theta The angle of rotation measured in radians.
         * @param x The x coordinate of the anchor point.
         * @param y The y coordinate of the anchor point.
         */
        setToRotation(theta: number, x: number, y: number):
            ಠ_ಠ.clutz.goog.math.AffineTransform;
        /**
         * Sets this transform to a scaling transformation.
         * @param sx The x-axis scaling factor.
         * @param sy The y-axis scaling factor.
         */
        setToScale(sx: number, sy: number): ಠ_ಠ.clutz.goog.math.AffineTransform;
        /**
         * Sets this transform to a shearing transformation.
         * @param shx The x-axis shear factor.
         * @param shy The y-axis shear factor.
         */
        setToShear(shx: number, shy: number):
            ಠ_ಠ.clutz.goog.math.AffineTransform;
        /**
         * Sets this transform to a translation transformation.
         * @param dx The distance to translate in the x direction.
         * @param dy The distance to translate in the y direction.
         */
        setToTranslation(dx: number, dy: number):
            ಠ_ಠ.clutz.goog.math.AffineTransform;
        /**
         * Sets this transform to the matrix specified by the 6 values.
         * @param m00 The m00 coordinate of the transform.
         * @param m10 The m10 coordinate of the transform.
         * @param m01 The m01 coordinate of the transform.
         * @param m11 The m11 coordinate of the transform.
         * @param m02 The m02 coordinate of the transform.
         * @param m12 The m12 coordinate of the transform.
         */
        setTransform(
            m00: number, m10: number, m01: number, m11: number, m02: number,
            m12: number): ಠ_ಠ.clutz.goog.math.AffineTransform;
        /**
         * Concatenates this transform with a shear transformation.
         * @param shx The x shear factor.
         * @param shy The y shear factor.
         */
        shear(shx: number, shy: number): ಠ_ಠ.clutz.goog.math.AffineTransform;
        toString(): string;
        /**
         * Transforms an array of coordinates by this transform and stores the
         * result into a destination array.
         * @param src The array containing the source points as x, y value
         * pairs.
         * @param srcOff The offset to the first point to be transformed.
         * @param dst The array into which to store the transformed point pairs.
         * @param dstOff The offset of the location of the first transformed
         * point in the destination array.
         * @param numPts The number of points to transform.
         */
        transform(
            src: ಠ_ಠ.clutz.goog.vec.Number, srcOff: number,
            dst: ಠ_ಠ.clutz.goog.vec.Number, dstOff: number,
            numPts: number): void;
        /**
         * Concatenates this transform with a translate transformation.
         * @param dx The distance to translate in the x direction.
         * @param dy The distance to translate in the y direction.
         */
        translate(dx: number, dy: number): ಠ_ಠ.clutz.goog.math.AffineTransform;
    }
}
declare module 'goog:goog.math.AffineTransform' {
    import alias = ಠ_ಠ.clutz.goog.math.AffineTransform;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math {
    /**
     * Object representing a cubic bezier curve.
     */
    class Bezier extends Bezier_Instance {
        /**
         * Constant used to approximate ellipses.
         * See: http://canvaspaint.org/blog/2006/12/ellipse/
         */
        static KAPPA: number;
    }
    class Bezier_Instance {
        private noStructuralTyping_: any;
        /**
         * Object representing a cubic bezier curve.
         * @param x0 X coordinate of the start point.
         * @param y0 Y coordinate of the start point.
         * @param x1 X coordinate of the first control point.
         * @param y1 Y coordinate of the first control point.
         * @param x2 X coordinate of the second control point.
         * @param y2 Y coordinate of the second control point.
         * @param x3 X coordinate of the end point.
         * @param y3 Y coordinate of the end point.
         */
        constructor(
            x0: number, y0: number, x1: number, y1: number, x2: number,
            y2: number, x3: number, y3: number);
        /**
         * X coordinate of the first point.
         */
        x0: number;
        /**
         * X coordinate of the first control point.
         */
        x1: number;
        /**
         * X coordinate of the second control point.
         */
        x2: number;
        /**
         * X coordinate of the end point.
         */
        x3: number;
        /**
         * Y coordinate of the first point.
         */
        y0: number;
        /**
         * Y coordinate of the first control point.
         */
        y1: number;
        /**
         * Y coordinate of the second control point.
         */
        y2: number;
        /**
         * Y coordinate of the end point.
         */
        y3: number;
        clone(): ಠ_ಠ.clutz.goog.math.Bezier;
        /**
         * Test if the given curve is exactly the same as this one.
         * @param other The other curve.
         */
        equals(other: ಠ_ಠ.clutz.goog.math.Bezier|null): boolean;
        /**
         * Modifies the curve in place to progress in the opposite direction.
         */
        flip(): void;
        /**
         * Computes the curve at a point between 0 and 1.
         * @param t The point on the curve to find.
         */
        getPoint(t: number): ಠ_ಠ.clutz.goog.math.Coordinate;
        /**
         * Computes the curve's X coordinate at a point between 0 and 1.
         * @param t The point on the curve to find.
         */
        getPointX(t: number): number;
        /**
         * Computes the curve's Y coordinate at a point between 0 and 1.
         * @param t The point on the curve to find.
         */
        getPointY(t: number): number;
        /**
         * Computes the position t of a point on the curve given its x
         * coordinate. That is, for an input xVal, finds t s.t. getPointX(t) =
         * xVal. As such, the following should always be true up to some small
         * epsilon: t ~ solvePositionFromXValue(getPointX(t)) for t in [0, 1].
         * @param xVal The x coordinate of the point to find on the curve.
         */
        solvePositionFromXValue(xVal: number): number;
        /**
         * Computes the y coordinate of a point on the curve given its x
         * coordinate.
         * @param xVal The x coordinate of the point on the curve.
         */
        solveYValueFromXValue(xVal: number): number;
        /**
         * Changes this curve in place to be the portion of itself from [s, t].
         * @param s The start of the desired portion of the curve.
         * @param t The end of the desired portion of the curve.
         */
        subdivide(s: number, t: number): void;
        /**
         * Changes this curve in place to be the portion of itself from [t, 1].
         * @param t The start of the desired portion of the curve.
         */
        subdivideLeft(t: number): void;
        /**
         * Changes this curve in place to be the portion of itself from [0, t].
         * @param t The end of the desired portion of the curve.
         */
        subdivideRight(t: number): void;
    }
}
declare module 'goog:goog.math.Bezier' {
    import alias = ಠ_ಠ.clutz.goog.math.Bezier;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math {
    /**
     * Class for representing a box. A box is specified as a top, right, bottom,
     * and left. A box is useful for representing margins and padding.
     *
     * This class assumes 'screen coordinates': larger Y coordinates are further
     * from the top of the screen.
     */
    class Box extends Box_Instance {
        /**
         * Creates a Box by bounding a collection of goog.math.Coordinate
         * objects
         * @param var_args Coordinates to be included inside the box.
         */
        static boundingBox(...var_args: (ಠ_ಠ.clutz.goog.math.Coordinate|null|
                                         undefined)[]): ಠ_ಠ.clutz.goog.math.Box;
        /**
         * Returns whether a box contains a coordinate or another box.
         * @param box A Box.
         * @param other A Coordinate or a Box.
         */
        static contains(
            box: ಠ_ಠ.clutz.goog.math.Box|null,
            other: ಠ_ಠ.clutz.goog.math.Coordinate|null|
            ಠ_ಠ.clutz.goog.math.Box): boolean;
        /**
         * Returns the distance between a coordinate and the nearest corner/side
         * of a box. Returns zero if the coordinate is inside the box.
         * @param box A Box.
         * @param coord A Coordinate.
         */
        static distance(
            box: ಠ_ಠ.clutz.goog.math.Box|null,
            coord: ಠ_ಠ.clutz.goog.math.Coordinate|null): number;
        /**
         * Compares boxes for equality.
         * @param a A Box.
         * @param b A Box.
         */
        static equals(
            a: ಠ_ಠ.clutz.goog.math.Box|null,
            b: ಠ_ಠ.clutz.goog.math.Box|null): boolean;
        /**
         * Returns whether two boxes intersect.
         * @param a A Box.
         * @param b A second Box.
         */
        static intersects(
            a: ಠ_ಠ.clutz.goog.math.Box|null,
            b: ಠ_ಠ.clutz.goog.math.Box|null): boolean;
        /**
         * Returns whether two boxes would intersect with additional padding.
         * @param a A Box.
         * @param b A second Box.
         * @param padding The additional padding.
         */
        static intersectsWithPadding(
            a: ಠ_ಠ.clutz.goog.math.Box|null, b: ಠ_ಠ.clutz.goog.math.Box|null,
            padding: number): boolean;
        /**
         * Returns the relative x position of a coordinate compared to a box.
         * Returns zero if the coordinate is inside the box.
         * @param box A Box.
         * @param coord A Coordinate.
         */
        static relativePositionX(
            box: ಠ_ಠ.clutz.goog.math.Box|null,
            coord: ಠ_ಠ.clutz.goog.math.Coordinate|null): number;
        /**
         * Returns the relative y position of a coordinate compared to a box.
         * Returns zero if the coordinate is inside the box.
         * @param box A Box.
         * @param coord A Coordinate.
         */
        static relativePositionY(
            box: ಠ_ಠ.clutz.goog.math.Box|null,
            coord: ಠ_ಠ.clutz.goog.math.Coordinate|null): number;
    }
    class Box_Instance {
        private noStructuralTyping_: any;
        /**
         * Class for representing a box. A box is specified as a top, right,
         * bottom, and left. A box is useful for representing margins and
         * padding.
         *
         * This class assumes 'screen coordinates': larger Y coordinates are
         * further from the top of the screen.
         * @param top Top.
         * @param right Right.
         * @param bottom Bottom.
         * @param left Left.
         */
        constructor(top: number, right: number, bottom: number, left: number);
        /**
         * Bottom
         */
        bottom: number;
        /**
         * Left
         */
        left: number;
        /**
         * Right
         */
        right: number;
        /**
         * Top
         */
        top: number;
        /**
         * Rounds the fields to the next larger integer values.
         */
        ceil(): ಠ_ಠ.clutz.goog.math.Box;
        /**
         * Creates a copy of the box with the same dimensions.
         */
        clone(): ಠ_ಠ.clutz.goog.math.Box;
        /**
         * Returns whether the box contains a coordinate or another box.
         * @param other A Coordinate or a Box.
         */
        contains(other: ಠ_ಠ.clutz.goog.math.Coordinate|null|
                 ಠ_ಠ.clutz.goog.math.Box): boolean;
        /**
         * Expands box with the given margins.
         * @param top Top margin or box with all margins.
         * @param opt_right Right margin.
         * @param opt_bottom Bottom margin.
         * @param opt_left Left margin.
         */
        expand(
            top: number|ಠ_ಠ.clutz.goog.math.Box|null, opt_right?: number,
            opt_bottom?: number, opt_left?: number): ಠ_ಠ.clutz.goog.math.Box;
        /**
         * Expand this box to include another box.
         * NOTE(user): This is used in code that needs to be very fast, please
         * don't add functionality to this function at the expense of speed
         * (variable arguments, accepting multiple argument types, etc).
         * @param box The box to include in this one.
         */
        expandToInclude(box: ಠ_ಠ.clutz.goog.math.Box|null): void;
        /**
         * Expand this box to include the coordinate.
         * @param coord The coordinate to be included inside the box.
         */
        expandToIncludeCoordinate(coord: ಠ_ಠ.clutz.goog.math.Coordinate): void;
        /**
         * Rounds the fields to the next smaller integer values.
         */
        floor(): ಠ_ಠ.clutz.goog.math.Box;
        getHeight(): number;
        getWidth(): number;
        /**
         * Rounds the fields to nearest integer values.
         */
        round(): ಠ_ಠ.clutz.goog.math.Box;
        /**
         * Scales this coordinate by the given scale factors. The x and y
         * dimension values are scaled by {@code sx} and {@code opt_sy}
         * respectively. If {@code opt_sy} is not given, then {@code sx} is used
         * for both x and y.
         * @param sx The scale factor to use for the x dimension.
         * @param opt_sy The scale factor to use for the y dimension.
         */
        scale(sx: number, opt_sy?: number): ಠ_ಠ.clutz.goog.math.Box;
        /**
         * Returns a nice string representing the box.
         */
        toString(): string;
        /**
         * Translates this box by the given offsets. If a {@code
         * goog.math.Coordinate} is given, then the left and right values are
         * translated by the coordinate's x value and the top and bottom values
         * are translated by the coordinate's y value.  Otherwise, {@code tx}
         * and {@code opt_ty} are used to translate the x and y dimension
         * values.
         * @param tx The value to translate the x dimension values by or the the
         * coordinate to translate this box by.
         * @param opt_ty The value to translate y dimension values by.
         */
        translate(
            tx: number|ಠ_ಠ.clutz.goog.math.Coordinate|null,
            opt_ty?: number): ಠ_ಠ.clutz.goog.math.Box;
    }
}
declare module 'goog:goog.math.Box' {
    import alias = ಠ_ಠ.clutz.goog.math.Box;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math {
    /**
     * Class for representing coordinates and positions.
     */
    class Coordinate extends Coordinate_Instance {
        /**
         * Returns the angle from the origin to a coordinate.
         * @param a A Coordinate.
         */
        static azimuth(a: ಠ_ಠ.clutz.goog.math.Coordinate): number;
        /**
         * Returns the difference between two coordinates as a new
         * goog.math.Coordinate.
         * @param a A Coordinate.
         * @param b A Coordinate.
         */
        static difference(
            a: ಠ_ಠ.clutz.goog.math.Coordinate,
            b: ಠ_ಠ.clutz.goog.math.Coordinate): ಠ_ಠ.clutz.goog.math.Coordinate;
        /**
         * Returns the distance between two coordinates.
         * @param a A Coordinate.
         * @param b A Coordinate.
         */
        static distance(
            a: ಠ_ಠ.clutz.goog.math.Coordinate,
            b: ಠ_ಠ.clutz.goog.math.Coordinate): number;
        /**
         * Compares coordinates for equality.
         * @param a A Coordinate.
         * @param b A Coordinate.
         */
        static equals(
            a: ಠ_ಠ.clutz.goog.math.Coordinate|null,
            b: ಠ_ಠ.clutz.goog.math.Coordinate|null): boolean;
        /**
         * Returns the magnitude of a coordinate.
         * @param a A Coordinate.
         */
        static magnitude(a: ಠ_ಠ.clutz.goog.math.Coordinate): number;
        /**
         * Returns the squared distance between two coordinates. Squared
         * distances can be used for comparisons when the actual value is not
         * required.
         *
         * Performance note: eliminating the square root is an optimization
         * often used in lower-level languages, but the speed difference is not
         * nearly as pronounced in JavaScript (only a few percent.)
         * @param a A Coordinate.
         * @param b A Coordinate.
         */
        static squaredDistance(
            a: ಠ_ಠ.clutz.goog.math.Coordinate,
            b: ಠ_ಠ.clutz.goog.math.Coordinate): number;
        /**
         * Returns the sum of two coordinates as a new goog.math.Coordinate.
         * @param a A Coordinate.
         * @param b A Coordinate.
         */
        static sum(
            a: ಠ_ಠ.clutz.goog.math.Coordinate,
            b: ಠ_ಠ.clutz.goog.math.Coordinate): ಠ_ಠ.clutz.goog.math.Coordinate;
    }
    class Coordinate_Instance {
        private noStructuralTyping_: any;
        /**
         * Class for representing coordinates and positions.
         * @param opt_x Left, defaults to 0.
         * @param opt_y Top, defaults to 0.
         */
        constructor(opt_x?: number, opt_y?: number);
        /**
         * X-value
         */
        x: number;
        /**
         * Y-value
         */
        y: number;
        /**
         * Rounds the x and y fields to the next larger integer values.
         */
        ceil(): ಠ_ಠ.clutz.goog.math.Coordinate;
        /**
         * Returns a new copy of the coordinate.
         */
        clone(): ಠ_ಠ.clutz.goog.math.Coordinate;
        /**
         * Returns whether the specified value is equal to this coordinate.
         * @param other Some other value.
         */
        equals(other: any): boolean;
        /**
         * Rounds the x and y fields to the next smaller integer values.
         */
        floor(): ಠ_ಠ.clutz.goog.math.Coordinate;
        /**
         * Rotates this coordinate clockwise about the origin (or, optionally,
         * the given center) by the given angle, in degrees.
         * @param degrees The angle by which to rotate this coordinate clockwise
         * about the given center, in degrees.
         * @param opt_center The center of rotation. Defaults to (0, 0) if not
         * given.
         */
        rotateDegrees(
            degrees: number, opt_center?: ಠ_ಠ.clutz.goog.math.Coordinate): void;
        /**
         * Rotates this coordinate clockwise about the origin (or, optionally,
         * the given center) by the given angle, in radians.
         * @param radians The angle by which to rotate this coordinate clockwise
         * about the given center, in radians.
         * @param opt_center The center of rotation. Defaults to (0, 0) if not
         * given.
         */
        rotateRadians(
            radians: number, opt_center?: ಠ_ಠ.clutz.goog.math.Coordinate): void;
        /**
         * Rounds the x and y fields to the nearest integer values.
         */
        round(): ಠ_ಠ.clutz.goog.math.Coordinate;
        /**
         * Scales this coordinate by the given scale factors. The x and y values
         * are scaled by {@code sx} and {@code opt_sy} respectively.  If {@code
         * opt_sy} is not given, then {@code sx} is used for both x and y.
         * @param sx The scale factor to use for the x dimension.
         * @param opt_sy The scale factor to use for the y dimension.
         */
        scale(sx: number, opt_sy?: number): ಠ_ಠ.clutz.goog.math.Coordinate;
        /**
         * Returns a nice string representing the coordinate.
         */
        toString(): string;
        /**
         * Translates this box by the given offsets. If a {@code
         * goog.math.Coordinate} is given, then the x and y values are
         * translated by the coordinate's x and y. Otherwise, x and y are
         * translated by {@code tx} and {@code opt_ty} respectively.
         * @param tx The value to translate x by or the the coordinate to
         * translate this coordinate by.
         * @param opt_ty The value to translate y by.
         */
        translate(
            tx: number|ಠ_ಠ.clutz.goog.math.Coordinate|null,
            opt_ty?: number): ಠ_ಠ.clutz.goog.math.Coordinate;
    }
}
declare module 'goog:goog.math.Coordinate' {
    import alias = ಠ_ಠ.clutz.goog.math.Coordinate;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math {
    /**
     * Class for representing coordinates and positions in 3 dimensions.
     */
    class Coordinate3 extends Coordinate3_Instance {
        /**
         * Returns the difference between two coordinates as a new
         * goog.math.Coordinate3.
         * @param a A Coordinate3.
         * @param b A Coordinate3.
         */
        static difference(
            a: ಠ_ಠ.clutz.goog.math.Coordinate3|null,
            b: ಠ_ಠ.clutz.goog.math.Coordinate3|
            null): ಠ_ಠ.clutz.goog.math.Coordinate3;
        /**
         * Returns the distance between two coordinates.
         * @param a A Coordinate3.
         * @param b A Coordinate3.
         */
        static distance(
            a: ಠ_ಠ.clutz.goog.math.Coordinate3|null,
            b: ಠ_ಠ.clutz.goog.math.Coordinate3|null): number;
        /**
         * Compares coordinates for equality.
         * @param a A Coordinate3.
         * @param b A Coordinate3.
         */
        static equals(
            a: ಠ_ಠ.clutz.goog.math.Coordinate3|null,
            b: ಠ_ಠ.clutz.goog.math.Coordinate3|null): boolean;
        /**
         * Converts a three element array into a Coordinate3 object.  If the
         * value passed in is not an array, not array-like, or not of the right
         * length, an error is thrown.
         * @param a Array of numbers to become a coordinate.
         */
        static fromArray(a: ಠ_ಠ.clutz.goog.vec.Number|
                         null): ಠ_ಠ.clutz.goog.math.Coordinate3;
        /**
         * Returns the squared distance between two coordinates. Squared
         * distances can be used for comparisons when the actual value is not
         * required.
         *
         * Performance note: eliminating the square root is an optimization
         * often used in lower-level languages, but the speed difference is not
         * nearly as pronounced in JavaScript (only a few percent.)
         * @param a A Coordinate3.
         * @param b A Coordinate3.
         */
        static squaredDistance(
            a: ಠ_ಠ.clutz.goog.math.Coordinate3|null,
            b: ಠ_ಠ.clutz.goog.math.Coordinate3|null): number;
    }
    class Coordinate3_Instance {
        private noStructuralTyping_: any;
        /**
         * Class for representing coordinates and positions in 3 dimensions.
         * @param opt_x X coordinate, defaults to 0.
         * @param opt_y Y coordinate, defaults to 0.
         * @param opt_z Z coordinate, defaults to 0.
         */
        constructor(opt_x?: number, opt_y?: number, opt_z?: number);
        /**
         * X-value
         */
        x: number;
        /**
         * Y-value
         */
        y: number;
        /**
         * Z-value
         */
        z: number;
        /**
         * Returns a new copy of the coordinate.
         */
        clone(): ಠ_ಠ.clutz.goog.math.Coordinate3;
        /**
         * Returns the contents of this coordinate as a 3 value Array.
         */
        toArray(): ಠ_ಠ.clutz.goog.vec.Number;
        /**
         * Returns a nice string representing the coordinate.
         */
        toString(): string;
    }
}
declare module 'goog:goog.math.Coordinate3' {
    import alias = ಠ_ಠ.clutz.goog.math.Coordinate3;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math {
    class ExponentialBackoff extends ExponentialBackoff_Instance {}
    class ExponentialBackoff_Instance {
        private noStructuralTyping_: any;
        constructor(
            initialValue: number, maxValue: number, opt_randomFactor?: number,
            opt_backoffFactor?: number, opt_decayFactor?: number);
        /**
         * Initiates a backoff.
         */
        backoff(): void;
        /**
         * Initiates a decay.
         */
        decay(): void;
        getBackoffCount(): number;
        getDecayCount(): number;
        getValue(): number;
        /**
         * Resets the backoff value to its initial value.
         */
        reset(): void;
    }
}
declare module 'goog:goog.math.ExponentialBackoff' {
    import alias = ಠ_ಠ.clutz.goog.math.ExponentialBackoff;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math {
    /**
     * Record for representing rectangular regions, allows compatibility between
     * things like ClientRect and goog.math.Rect.
     */
    interface IRect {
        height: number;
        left: number;
        top: number;
        width: number;
    }
}
declare module 'goog:goog.math.IRect' {
    import alias = ಠ_ಠ.clutz.goog.math.IRect;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math {
    /**
     * Constructs a two's-complement integer an array containing bits of the
     * integer in 32-bit (signed) pieces, given in little-endian order (i.e.,
     * lowest-order bits in the first piece), and the sign of -1 or 0.
     *
     * See the from* functions below for other convenient ways of constructing
     * Integers.
     *
     * The internal representation of an integer is an array of 32-bit signed
     * pieces, along with a sign (0 or -1) that indicates the contents of all
     * the other 32-bit pieces out to infinity.  We use 32-bit pieces because
     * these are the size of integers on which Javascript performs
     * bit-operations.  For operations like addition and multiplication, we
     * split each number into 16-bit pieces, which can easily be multiplied
     * within Javascript's floating-point representation without overflow or
     * change in sign.
     */
    class Integer extends Integer_Instance {
        static ONE: ಠ_ಠ.clutz.goog.math.Integer;
        static ZERO: ಠ_ಠ.clutz.goog.math.Integer;
        /**
         * Returns a Integer representing the value that comes by concatenating
         * the given entries, each is assumed to be 32 signed bits, given in
         * little-endian order (lowest order bits in the lowest index), and
         * sign-extending the highest order 32-bit value.
         * @param bits The bits of the number, in 32-bit signed pieces, in
         * little-endian order.
         */
        static fromBits(bits: ಠ_ಠ.clutz.goog.vec.Number|
                        null): ಠ_ಠ.clutz.goog.math.Integer;
        /**
         * Returns an Integer representing the given (32-bit) integer value.
         * @param value A 32-bit integer value.
         */
        static fromInt(value: number): ಠ_ಠ.clutz.goog.math.Integer;
        /**
         * Returns an Integer representing the given value, provided that it is
         * a finite number.  Otherwise, zero is returned.
         * @param value The value in question.
         */
        static fromNumber(value: number): ಠ_ಠ.clutz.goog.math.Integer;
        /**
         * Returns an Integer representation of the given string, written using
         * the given radix.
         * @param str The textual representation of the Integer.
         * @param opt_radix The radix in which the text is written.
         */
        static fromString(str: string, opt_radix?: number):
            ಠ_ಠ.clutz.goog.math.Integer;
    }
    class Integer_Instance {
        private noStructuralTyping_: any;
        /**
         * Constructs a two's-complement integer an array containing bits of the
         * integer in 32-bit (signed) pieces, given in little-endian order
         * (i.e., lowest-order bits in the first piece), and the sign of -1 or
         * 0.
         *
         * See the from* functions below for other convenient ways of
         * constructing Integers.
         *
         * The internal representation of an integer is an array of 32-bit
         * signed pieces, along with a sign (0 or -1) that indicates the
         * contents of all the other 32-bit pieces out to infinity.  We use
         * 32-bit pieces because these are the size of integers on which
         * Javascript performs bit-operations.  For operations like addition and
         * multiplication, we split each number into 16-bit pieces, which can
         * easily be multiplied within Javascript's floating-point
         * representation without overflow or change in sign.
         * @param bits Array containing the bits of the number.
         * @param sign The sign of the number: -1 for negative and 0 positive.
         */
        constructor(bits: ಠ_ಠ.clutz.goog.vec.Number|null, sign: number);
        /**
         * Returns the sum of this and the given Integer.
         * @param other The Integer to add to this.
         */
        add(other: ಠ_ಠ.clutz.goog.math.Integer|
            null): ಠ_ಠ.clutz.goog.math.Integer;
        /**
         * Returns the bitwise-AND of this Integer and the given one.
         * @param other The Integer to AND with this.
         */
        and(other: ಠ_ಠ.clutz.goog.math.Integer|
            null): ಠ_ಠ.clutz.goog.math.Integer;
        /**
         * Compares this Integer with the given one.
         * @param other Integer to compare against.
         */
        compare(other: ಠ_ಠ.clutz.goog.math.Integer|null): number;
        /**
         * Returns this Integer divided by the given one.
         * @param other The Integer to divide this by.
         */
        divide(other: ಠ_ಠ.clutz.goog.math.Integer): ಠ_ಠ.clutz.goog.math.Integer;
        equals(other: ಠ_ಠ.clutz.goog.math.Integer|null): boolean;
        /**
         * Returns the index-th 32-bit (signed) piece of the Integer according
         * to little-endian order (i.e., index 0 contains the smallest bits).
         * @param index The index in question.
         */
        getBits(index: number): number;
        /**
         * Returns the index-th 32-bit piece as an unsigned number.
         * @param index The index in question.
         */
        getBitsUnsigned(index: number): number;
        getSign(): number;
        greaterThan(other: ಠ_ಠ.clutz.goog.math.Integer|null): boolean;
        greaterThanOrEqual(other: ಠ_ಠ.clutz.goog.math.Integer|null): boolean;
        isNegative(): boolean;
        isOdd(): boolean;
        isZero(): boolean;
        lessThan(other: ಠ_ಠ.clutz.goog.math.Integer|null): boolean;
        lessThanOrEqual(other: ಠ_ಠ.clutz.goog.math.Integer|null): boolean;
        /**
         * Returns this Integer modulo the given one.
         * @param other The Integer by which to mod.
         */
        modulo(other: ಠ_ಠ.clutz.goog.math.Integer): ಠ_ಠ.clutz.goog.math.Integer;
        /**
         * Returns the product of this and the given Integer.
         * @param other The Integer to multiply against this.
         */
        multiply(other: ಠ_ಠ.clutz.goog.math.Integer|
                 null): ಠ_ಠ.clutz.goog.math.Integer;
        negate(): ಠ_ಠ.clutz.goog.math.Integer;
        not(): ಠ_ಠ.clutz.goog.math.Integer;
        notEquals(other: ಠ_ಠ.clutz.goog.math.Integer|null): boolean;
        /**
         * Returns the bitwise-OR of this Integer and the given one.
         * @param other The Integer to OR with this.
         */
        or(other: ಠ_ಠ.clutz.goog.math.Integer|
           null): ಠ_ಠ.clutz.goog.math.Integer;
        /**
         * Returns this value with bits shifted to the left by the given amount.
         * @param numBits The number of bits by which to shift.
         */
        shiftLeft(numBits: number): ಠ_ಠ.clutz.goog.math.Integer;
        /**
         * Returns this value with bits shifted to the right by the given
         * amount.
         * @param numBits The number of bits by which to shift.
         */
        shiftRight(numBits: number): ಠ_ಠ.clutz.goog.math.Integer;
        /**
         * Returns an integer with only the first numBits bits of this value,
         * sign extended from the final bit.
         * @param numBits The number of bits by which to shift.
         */
        shorten(numBits: number): ಠ_ಠ.clutz.goog.math.Integer;
        /**
         * Returns the difference of this and the given Integer.
         * @param other The Integer to subtract from this.
         */
        subtract(other: ಠ_ಠ.clutz.goog.math.Integer|
                 null): ಠ_ಠ.clutz.goog.math.Integer;
        /**
         * Returns the value, assuming it is a 32-bit integer.
         */
        toInt(): number;
        toNumber(): number;
        toString(opt_radix?: number): string;
        /**
         * Returns the bitwise-XOR of this Integer and the given one.
         * @param other The Integer to XOR with this.
         */
        xor(other: ಠ_ಠ.clutz.goog.math.Integer|
            null): ಠ_ಠ.clutz.goog.math.Integer;
    }
}
declare module 'goog:goog.math.Integer' {
    import alias = ಠ_ಠ.clutz.goog.math.Integer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math {
    /**
     * Object representing a line.
     */
    class Line extends Line_Instance {}
    class Line_Instance {
        private noStructuralTyping_: any;
        /**
         * Object representing a line.
         * @param x0 X coordinate of the start point.
         * @param y0 Y coordinate of the start point.
         * @param x1 X coordinate of the end point.
         * @param y1 Y coordinate of the end point.
         */
        constructor(x0: number, y0: number, x1: number, y1: number);
        /**
         * X coordinate of the first point.
         */
        x0: number;
        /**
         * X coordinate of the first control point.
         */
        x1: number;
        /**
         * Y coordinate of the first point.
         */
        y0: number;
        /**
         * Y coordinate of the first control point.
         */
        y1: number;
        clone(): ಠ_ಠ.clutz.goog.math.Line;
        /**
         * Tests whether the given line is exactly the same as this one.
         * @param other The other line.
         */
        equals(other: ಠ_ಠ.clutz.goog.math.Line|null): boolean;
        /**
         * Computes the point on the line closest to a given point.  Note that a
         * line in this case is defined as the infinite line going through the
         * start and end points.  To find the closest point on the line segment
         * itself see
         * {@see #getClosestSegmentPoint}.
         * @param x The x coordinate of the point, or a coordinate object.
         * @param opt_y The y coordinate of the point - required if x is a
         * number, ignored if x is a goog.math.Coordinate.
         */
        getClosestPoint(
            x: number|ಠ_ಠ.clutz.goog.math.Coordinate|null,
            opt_y?: number): ಠ_ಠ.clutz.goog.math.Coordinate;
        /**
         * Computes the point on the line segment closest to a given point.
         * @param x The x coordinate of the point, or a coordinate object.
         * @param opt_y The y coordinate of the point - required if x is a
         * number, ignored if x is a goog.math.Coordinate.
         */
        getClosestSegmentPoint(
            x: number|ಠ_ಠ.clutz.goog.math.Coordinate|null,
            opt_y?: number): ಠ_ಠ.clutz.goog.math.Coordinate;
        /**
         * Returns the point on the line segment proportional to t, where for t
         * = 0 we return the starting point and for t = 1 we return the end
         * point.  For t < 0 or t > 1 we extrapolate along the line defined by
         * the line segment.
         * @param t The interpolation parameter along the line segment.
         */
        getInterpolatedPoint(t: number): ಠ_ಠ.clutz.goog.math.Coordinate;
        getSegmentLength(): number;
        getSegmentLengthSquared(): number;
    }
}
declare module 'goog:goog.math.Line' {
    import alias = ಠ_ಠ.clutz.goog.math.Line;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math {
    /**
     * Constructs a 64-bit two's-complement integer, given its low and high
     * 32-bit values as *signed* integers.  See the from* functions below for
     * more convenient ways of constructing Longs.
     *
     * The internal representation of a long is the two given signed, 32-bit
     * values. We use 32-bit pieces because these are the size of integers on
     * which Javascript performs bit-operations.  For operations like addition
     * and multiplication, we split each number into 16-bit pieces, which can
     * easily be multiplied within Javascript's floating-point representation
     * without overflow or change in sign.
     *
     * In the algorithms below, we frequently reduce the negative case to the
     * positive case by negating the input(s) and then post-processing the
     * result. Note that we must ALWAYS check specially whether those values are
     * MIN_VALUE
     * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented
     * as a positive number, it overflows back into a negative).  Not handling
     * this case would often result in infinite recursion.
     */
    class Long extends Long_Instance {
        /**
         * Returns a Long representing the 64-bit integer that comes by
         * concatenating the given high and low bits.  Each is assumed to use 32
         * bits.
         * @param lowBits The low 32-bits.
         * @param highBits The high 32-bits.
         */
        static fromBits(lowBits: number, highBits: number):
            ಠ_ಠ.clutz.goog.math.Long;
        /**
         * Returns a Long representing the given (32-bit) integer value.
         * @param value The 32-bit integer in question.
         */
        static fromInt(value: number): ಠ_ಠ.clutz.goog.math.Long;
        /**
         * Returns a Long representing the given value.
         * NaN will be returned as zero. Infinity is converted to max value and
         * -Infinity to min value.
         * @param value The number in question.
         */
        static fromNumber(value: number): ಠ_ಠ.clutz.goog.math.Long;
        /**
         * Returns a Long representation of the given string, written using the
         * given radix.
         * @param str The textual representation of the Long.
         * @param opt_radix The radix in which the text is written.
         */
        static fromString(str: string, opt_radix?: number):
            ಠ_ಠ.clutz.goog.math.Long;
        static getMaxValue(): ಠ_ಠ.clutz.goog.math.Long;
        static getMinValue(): ಠ_ಠ.clutz.goog.math.Long;
        static getNegOne(): ಠ_ಠ.clutz.goog.math.Long;
        static getOne(): ಠ_ಠ.clutz.goog.math.Long;
        static getTwoPwr24(): ಠ_ಠ.clutz.goog.math.Long;
        static getZero(): ಠ_ಠ.clutz.goog.math.Long;
        /**
         * Returns the boolean value of whether the input string is within a
         * Long's range. Assumes an input string containing only numeric
         * characters with an optional preceding '-'.
         * @param str The textual representation of the Long.
         * @param opt_radix The radix in which the text is written.
         */
        static isStringInRange(str: string, opt_radix?: number): boolean;
    }
    class Long_Instance {
        private noStructuralTyping_: any;
        /**
         * Constructs a 64-bit two's-complement integer, given its low and high
         * 32-bit values as *signed* integers.  See the from* functions below
         * for more convenient ways of constructing Longs.
         *
         * The internal representation of a long is the two given signed, 32-bit
         * values. We use 32-bit pieces because these are the size of integers
         * on which Javascript performs bit-operations.  For operations like
         * addition and multiplication, we split each number into 16-bit pieces,
         * which can easily be multiplied within Javascript's floating-point
         * representation without overflow or change in sign.
         *
         * In the algorithms below, we frequently reduce the negative case to
         * the positive case by negating the input(s) and then post-processing
         * the result. Note that we must ALWAYS check specially whether those
         * values are MIN_VALUE
         * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be
         * represented as a positive number, it overflows back into a negative).
         * Not handling this case would often result in infinite recursion.
         * @param low The low (signed) 32 bits of the long.
         * @param high The high (signed) 32 bits of the long.
         */
        constructor(low: number, high: number);
        /**
         * Returns the sum of this and the given Long.
         * @param other Long to add to this one.
         */
        add(other: ಠ_ಠ.clutz.goog.math.Long|null): ಠ_ಠ.clutz.goog.math.Long;
        /**
         * Returns the bitwise-AND of this Long and the given one.
         * @param other The Long with which to AND.
         */
        and(other: ಠ_ಠ.clutz.goog.math.Long|null): ಠ_ಠ.clutz.goog.math.Long;
        /**
         * Compares this Long with the given one.
         * @param other Long to compare against.
         */
        compare(other: ಠ_ಠ.clutz.goog.math.Long|null): number;
        /**
         * Returns this Long divided by the given one.
         * @param other Long by which to divide.
         */
        div(other: ಠ_ಠ.clutz.goog.math.Long|null): ಠ_ಠ.clutz.goog.math.Long;
        equals(other: ಠ_ಠ.clutz.goog.math.Long|null): boolean;
        getHighBits(): number;
        getLowBits(): number;
        getLowBitsUnsigned(): number;
        getNumBitsAbs(): number;
        greaterThan(other: ಠ_ಠ.clutz.goog.math.Long|null): boolean;
        greaterThanOrEqual(other: ಠ_ಠ.clutz.goog.math.Long|null): boolean;
        isNegative(): boolean;
        isOdd(): boolean;
        isZero(): boolean;
        lessThan(other: ಠ_ಠ.clutz.goog.math.Long|null): boolean;
        lessThanOrEqual(other: ಠ_ಠ.clutz.goog.math.Long|null): boolean;
        /**
         * Returns this Long modulo the given one.
         * @param other Long by which to mod.
         */
        modulo(other: ಠ_ಠ.clutz.goog.math.Long|null): ಠ_ಠ.clutz.goog.math.Long;
        /**
         * Returns the product of this and the given long.
         * @param other Long to multiply with this.
         */
        multiply(other: ಠ_ಠ.clutz.goog.math.Long|
                 null): ಠ_ಠ.clutz.goog.math.Long;
        negate(): ಠ_ಠ.clutz.goog.math.Long;
        not(): ಠ_ಠ.clutz.goog.math.Long;
        notEquals(other: ಠ_ಠ.clutz.goog.math.Long|null): boolean;
        /**
         * Returns the bitwise-OR of this Long and the given one.
         * @param other The Long with which to OR.
         */
        or(other: ಠ_ಠ.clutz.goog.math.Long|null): ಠ_ಠ.clutz.goog.math.Long;
        /**
         * Returns this Long with bits shifted to the left by the given amount.
         * @param numBits The number of bits by which to shift.
         */
        shiftLeft(numBits: number): ಠ_ಠ.clutz.goog.math.Long;
        /**
         * Returns this Long with bits shifted to the right by the given amount.
         * The new leading bits match the current sign bit.
         * @param numBits The number of bits by which to shift.
         */
        shiftRight(numBits: number): ಠ_ಠ.clutz.goog.math.Long;
        /**
         * Returns this Long with bits shifted to the right by the given amount,
         * with zeros placed into the new leading bits.
         * @param numBits The number of bits by which to shift.
         */
        shiftRightUnsigned(numBits: number): ಠ_ಠ.clutz.goog.math.Long;
        /**
         * Returns the difference of this and the given Long.
         * @param other Long to subtract from this.
         */
        subtract(other: ಠ_ಠ.clutz.goog.math.Long|
                 null): ಠ_ಠ.clutz.goog.math.Long;
        toInt(): number;
        toNumber(): number;
        toString(opt_radix?: number): string;
        /**
         * Returns the bitwise-XOR of this Long and the given one.
         * @param other The Long with which to XOR.
         */
        xor(other: ಠ_ಠ.clutz.goog.math.Long|null): ಠ_ಠ.clutz.goog.math.Long;
    }
}
declare module 'goog:goog.math.Long' {
    import alias = ಠ_ಠ.clutz.goog.math.Long;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math {
    /**
     * Class for representing and manipulating matrices.
     *
     * The entry that lies in the i-th row and the j-th column of a matrix is
     * typically referred to as the i,j entry of the matrix.
     *
     * The m-by-n matrix A would have its entries referred to as:
     * [ a0,0   a0,1   a0,2   ...   a0,j  ...  a0,n ]
     * [ a1,0   a1,1   a1,2   ...   a1,j  ...  a1,n ]
     * [ a2,0   a2,1   a2,2   ...   a2,j  ...  a2,n ]
     * [  .      .      .            .          .   ]
     * [  .      .      .            .          .   ]
     * [  .      .      .            .          .   ]
     * [ ai,0   ai,1   ai,2   ...   ai,j  ...  ai,n ]
     * [  .      .      .            .          .   ]
     * [  .      .      .            .          .   ]
     * [  .      .      .            .          .   ]
     * [ am,0   am,1   am,2   ...   am,j  ...  am,n ]
     */
    class Matrix extends Matrix_Instance {
        /**
         * Creates a square identity matrix. i.e. for n = 3:
         * <pre>
         * [ 1 0 0 ]
         * [ 0 1 0 ]
         * [ 0 0 1 ]
         * </pre>
         * @param n The size of the square identity matrix.
         */
        static createIdentityMatrix(n: number): ಠ_ಠ.clutz.goog.math.Matrix;
        /**
         * Calls a function for each cell in a matrix.
         * @param matrix The matrix to iterate over.
         * @param fn The function to call for every element. This function takes
         * 4 arguments (value, i, j, and the matrix) and the return value is
         * irrelevant.
         * @param opt_obj The object to be used as the value of 'this' within
         * {@code fn}.
         */
        static forEach<T = any>(
            matrix: ಠ_ಠ.clutz.goog.math.Matrix|null,
            fn:
                (a: number, b: number, c: number,
                 d: ಠ_ಠ.clutz.goog.math.Matrix) => any,
            opt_obj?: T): void;
        /**
         * Tests whether an array is a valid matrix.  A valid array is an array
         * of arrays where all arrays are of the same length and all elements
         * are numbers.
         * @param arr An array to test.
         */
        static isValidArray(arr: ಠ_ಠ.clutz.goog.vec.Number[]): boolean;
        /**
         * Calls a function for every cell in a matrix and inserts the result
         * into a new matrix of equal dimensions.
         * @param matrix The matrix to iterate over.
         * @param fn The function to call for every element. This function takes
         * 4 arguments (value, i, j and the matrix) and should return a number,
         * which will be inserted into a new matrix.
         * @param opt_obj The object to be used as the value of 'this' within
         * {@code fn}.
         */
        static map<T = any>(
            matrix: ಠ_ಠ.clutz.goog.math.Matrix,
            fn:
                (a: number, b: number, c: number,
                 d: ಠ_ಠ.clutz.goog.math.Matrix) => number,
            opt_obj?: T): ಠ_ಠ.clutz.goog.math.Matrix;
    }
    class Matrix_Instance {
        private noStructuralTyping_: any;
        /**
         * Class for representing and manipulating matrices.
         *
         * The entry that lies in the i-th row and the j-th column of a matrix
         * is typically referred to as the i,j entry of the matrix.
         *
         * The m-by-n matrix A would have its entries referred to as:
         * [ a0,0   a0,1   a0,2   ...   a0,j  ...  a0,n ]
         * [ a1,0   a1,1   a1,2   ...   a1,j  ...  a1,n ]
         * [ a2,0   a2,1   a2,2   ...   a2,j  ...  a2,n ]
         * [  .      .      .            .          .   ]
         * [  .      .      .            .          .   ]
         * [  .      .      .            .          .   ]
         * [ ai,0   ai,1   ai,2   ...   ai,j  ...  ai,n ]
         * [  .      .      .            .          .   ]
         * [  .      .      .            .          .   ]
         * [  .      .      .            .          .   ]
         * [ am,0   am,1   am,2   ...   am,j  ...  am,n ]
         * @param m A matrix to copy, a 2D-array to take as a template, a size
         * object for dimensions, or the number of rows.
         * @param opt_n Number of columns of the matrix (only applicable if the
         * first argument is also numeric).
         */
        constructor(
            m: ಠ_ಠ.clutz.goog.math.Matrix|ಠ_ಠ.clutz.goog.vec.Number[]|
            ಠ_ಠ.clutz.goog.math.Size|number,
            opt_n?: number);
        /**
         * Returns a new matrix that is the sum of this and the provided matrix.
         * @param m The matrix to add to this one.
         */
        add(m: ಠ_ಠ.clutz.goog.math.Matrix|null): ಠ_ಠ.clutz.goog.math.Matrix;
        /**
         * Appends the given matrix to the right side of this matrix.
         * @param m The matrix to augment this matrix with.
         */
        appendColumns(m: ಠ_ಠ.clutz.goog.math.Matrix|
                      null): ಠ_ಠ.clutz.goog.math.Matrix;
        /**
         * Appends the given matrix to the bottom of this matrix.
         * @param m The matrix to augment this matrix with.
         */
        appendRows(m: ಠ_ಠ.clutz.goog.math.Matrix|
                   null): ಠ_ಠ.clutz.goog.math.Matrix;
        /**
         * Returns whether the given matrix equals this matrix.
         * @param m The matrix to compare to this one.
         * @param opt_tolerance The tolerance when comparing array entries.
         */
        equals(m: ಠ_ಠ.clutz.goog.math.Matrix|null, opt_tolerance?: number):
            boolean;
        /**
         * Returns the determinant of this matrix.  The determinant of a matrix
         * A is often denoted as |A| and can only be applied to a square matrix.
         */
        getDeterminant(): number;
        /**
         * Returns the inverse of this matrix if it exists or null if the matrix
         * is not invertible.
         */
        getInverse(): ಠ_ಠ.clutz.goog.math.Matrix|null;
        /**
         * Transforms this matrix into reduced row echelon form.
         */
        getReducedRowEchelonForm(): ಠ_ಠ.clutz.goog.math.Matrix;
        getSize(): ಠ_ಠ.clutz.goog.math.Size;
        /**
         * Return the transpose of this matrix.  For an m-by-n matrix, the
         * transpose is the n-by-m matrix which results from turning rows into
         * columns and columns into rows
         */
        getTranspose(): ಠ_ಠ.clutz.goog.math.Matrix;
        /**
         * Retrieves the value of a particular coordinate in the matrix or null
         * if the requested coordinates are out of range.
         * @param i The i index of the coordinate.
         * @param j The j index of the coordinate.
         */
        getValueAt(i: number, j: number): number|null;
        isSquare(): boolean;
        /**
         * Performs matrix or scalar multiplication on a matrix and returns the
         * resultant matrix.
         *
         * Matrix multiplication is defined between two matrices only if the
         * number of columns of the first matrix is the same as the number of
         * rows of the second matrix. If A is an m-by-n matrix and B is an
         * n-by-p matrix, then their product AB is an m-by-p matrix
         *
         * Scalar multiplication returns a matrix of the same size as the
         * original, each value multiplied by the given value.
         * @param m Matrix/number to multiply the matrix by.
         */
        multiply(m: ಠ_ಠ.clutz.goog.math.Matrix|null|
                 number): ಠ_ಠ.clutz.goog.math.Matrix;
        /**
         * Sets the value at a particular coordinate (if the coordinate is
         * within the bounds of the matrix).
         * @param i The i index of the coordinate.
         * @param j The j index of the coordinate.
         * @param value The new value for the coordinate.
         */
        setValueAt(i: number, j: number, value: number): void;
        /**
         * Returns a new matrix that is the difference of this and the provided
         * matrix.
         * @param m The matrix to subtract from this one.
         */
        subtract(m: ಠ_ಠ.clutz.goog.math.Matrix|
                 null): ಠ_ಠ.clutz.goog.math.Matrix;
        toArray(): ಠ_ಠ.clutz.goog.vec.Number[];
        /**
         * Returns a string representation of the matrix.  e.g.
         * <pre>
         * [ 12  5  9  1 ]
         * [  4 16  0 17 ]
         * [ 12  5  1 23 ]
         * </pre>
         */
        toString(): string;
    }
}
declare module 'goog:goog.math.Matrix' {
    import alias = ಠ_ಠ.clutz.goog.math.Matrix;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math {
    /**
     * Creates a path object. A path is a sequence of segments and may be open
     * or closed. Path uses the EVEN-ODD fill rule for determining the interior
     * of the path. A path must start with a moveTo command.
     *
     * A "simple" path does not contain any arcs and may be transformed using
     * the {@code transform} method.
     */
    class Path extends Path_Instance {
        /**
         * Creates a copy of the given path, replacing {@code arcTo} with
         * {@code arcToAsCurves}. The resulting path is simplified and can
         * be transformed.
         * @param src The path to simplify.
         */
        static createSimplifiedPath(src: ಠ_ಠ.clutz.goog.math.Path):
            ಠ_ಠ.clutz.goog.math.Path;
        /**
         * Returns the number of points for a segment type.
         * @param segment The segment type.
         */
        static getSegmentCount(segment: number): number;
    }
    class Path_Instance {
        private noStructuralTyping_: any;
        /**
         * Appends another path to the end of this path.
         * @param path The path to append.
         */
        appendPath(path: ಠ_ಠ.clutz.goog.math.Path): ಠ_ಠ.clutz.goog.math.Path;
        /**
         * Adds a path command to draw an arc centered at the point {@code (cx,
         * cy)} with radius {@code rx} along the x-axis and {@code ry} along the
         * y-axis from
         * {@code startAngle} through {@code extent} degrees. Positive rotation
         * is in the direction from positive x-axis to positive y-axis.
         * @param cx X coordinate of center of ellipse.
         * @param cy Y coordinate of center of ellipse.
         * @param rx Radius of ellipse on x axis.
         * @param ry Radius of ellipse on y axis.
         * @param fromAngle Starting angle measured in degrees from the positive
         * x-axis.
         * @param extent The span of the arc in degrees.
         * @param connect If true, the starting point of the arc is connected to
         * the current point.
         */
        arc(cx: number, cy: number, rx: number, ry: number, fromAngle: number,
            extent: number, connect: boolean): ಠ_ಠ.clutz.goog.math.Path;
        /**
         * Adds a path command to draw an arc starting at the path's current
         * point, with radius {@code rx} along the x-axis and {@code ry} along
         * the y-axis from
         * {@code startAngle} through {@code extent} degrees. Positive rotation
         * is in the direction from positive x-axis to positive y-axis.
         *
         * This method makes the path non-simple.
         * @param rx Radius of ellipse on x axis.
         * @param ry Radius of ellipse on y axis.
         * @param fromAngle Starting angle measured in degrees from the positive
         * x-axis.
         * @param extent The span of the arc in degrees.
         */
        arcTo(rx: number, ry: number, fromAngle: number, extent: number):
            ಠ_ಠ.clutz.goog.math.Path;
        /**
         * Same as {@code arcTo}, but approximates the arc using bezier curves.
         * .* As a result, this method does not affect the simplified status of
         * this path. The algorithm is adapted from {@code
         * java.awt.geom.ArcIterator}.
         * @param rx Radius of ellipse on x axis.
         * @param ry Radius of ellipse on y axis.
         * @param fromAngle Starting angle measured in degrees from the positive
         * x-axis.
         * @param extent The span of the arc in degrees.
         */
        arcToAsCurves(
            rx: number, ry: number, fromAngle: number,
            extent: number): ಠ_ಠ.clutz.goog.math.Path;
        /**
         * Clears the path.
         */
        clear(): ಠ_ಠ.clutz.goog.math.Path;
        clone(): ಠ_ಠ.clutz.goog.math.Path;
        /**
         * Adds a path command to close the path by connecting the
         * last point to the first point.
         */
        close(): ಠ_ಠ.clutz.goog.math.Path;
        /**
         * Creates a transformed copy of this path. The path is simplified
         * {@see #createSimplifiedPath} prior to transformation.
         * @param tx The transformation to perform.
         */
        createTransformedPath(tx: ಠ_ಠ.clutz.goog.math.AffineTransform):
            ಠ_ಠ.clutz.goog.math.Path;
        /**
         * Adds points to the path by drawing cubic Bezier curves. Each curve is
         * specified using 3 points (6 coordinates) - two control points and the
         * end point of the curve.
         * @param var_args The coordinates specifying each curve in sets of 6
         * points: {@code [x1, y1]} the first control point, {@code [x2, y2]}
         * the second control point and {@code [x, y]} the end point.
         */
        curveTo(...var_args: (number|undefined)[]): ಠ_ಠ.clutz.goog.math.Path;
        /**
         * Adds points to the path by drawing cubic Bezier curves. Each curve is
         * specified using 3 points (6 coordinates) - two control points and the
         * end point of the curve.
         * @param coordinates The coordinates specifying each curve in sets of 6
         * points: {@code [x1, y1]} the first control point, {@code [x2, y2]}
         * the second control point and {@code [x, y]} the end point.
         */
        curveToFromArray(coordinates: ಠ_ಠ.clutz.goog.vec.Number):
            ಠ_ಠ.clutz.goog.math.Path;
        /**
         * Iterates over the path calling the supplied callback once for each
         * path segment. The arguments to the callback function are the segment
         * type and an array of its arguments.
         *
         * The {@code LINETO} and {@code CURVETO} arrays can contain multiple
         * segments of the same type. The number of segments is the length of
         * the array divided by the segment length (2 for lines, 6 for  curves).
         *
         * As a convenience the {@code ARCTO} segment also includes the end
         * point as the last two arguments: {@code rx, ry, fromAngle, extent, x,
         * y}.
         * @param callback The function to call with each path segment.
         */
        forEachSegment(
            callback:
                (a: ಠ_ಠ.clutz.goog.math.Path.Segment,
                 b: ಠ_ಠ.clutz.goog.vec.Number) => any): void;
        /**
         * Returns the coordinates most recently added to the end of the path.
         */
        getCurrentPoint(): ಠ_ಠ.clutz.goog.vec.Number|null;
        /**
         * Returns an array of all arguments for the segments of this path
         * object, in order. The returned array is a copy; modifications are not
         * reflected in the Path object.
         */
        getSegmentArgs(): ಠ_ಠ.clutz.goog.vec.Number;
        /**
         * Returns an array of the number of times each segment type repeats in
         * this path, in order. The returned array is a copy; modifications are
         * not reflected in the Path object.
         */
        getSegmentCounts(): ಠ_ಠ.clutz.goog.vec.Number;
        /**
         * Returns an array of the segment types in this path, in the order of
         * their appearance. Adjacent segments of the same type are collapsed
         * into a single entry in the array. The returned array is a copy;
         * modifications are not reflected in the Path object.
         */
        getSegmentTypes(): ಠ_ಠ.clutz.goog.vec.Number;
        isEmpty(): boolean;
        /**
         * Returns true if this path contains no arcs. Simplified paths can be
         * created using {@code createSimplifiedPath}.
         */
        isSimple(): boolean;
        /**
         * Adds points to the path by drawing a straight line to each point.
         * @param var_args The coordinates of each destination point as x, y
         * value pairs.
         */
        lineTo(...var_args: (number|undefined)[]): ಠ_ಠ.clutz.goog.math.Path;
        /**
         * Adds points to the path by drawing a straight line to each point.
         * @param coordinates The coordinates of each destination point as x, y
         * value pairs.
         */
        lineToFromArray(coordinates: ಠ_ಠ.clutz.goog.vec.Number):
            ಠ_ಠ.clutz.goog.math.Path;
        /**
         * Adds a point to the path by moving to the specified point. Repeated
         * moveTo commands are collapsed into a single moveTo.
         * @param x X coordinate of destination point.
         * @param y Y coordinate of destination point.
         */
        moveTo(x: number, y: number): ಠ_ಠ.clutz.goog.math.Path;
        /**
         * Transforms the path. Only simple paths are transformable. Attempting
         * to transform a non-simple path will throw an error.
         * @param tx The transformation to perform.
         */
        transform(tx: ಠ_ಠ.clutz.goog.math.AffineTransform):
            ಠ_ಠ.clutz.goog.math.Path;
    }
}
declare module 'goog:goog.math.Path' {
    import alias = ಠ_ಠ.clutz.goog.math.Path;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math.Path {
    /**
     * Path segment types.
     */
    enum Segment {
        ARCTO,
        CLOSE,
        CURVETO,
        LINETO,
        MOVETO,
    }
}
declare module 'goog:goog.math.Path.Segment' {
    import alias = ಠ_ಠ.clutz.goog.math.Path.Segment;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math {
    /**
     * A number range.
     */
    class Range extends Range_Instance {
        /**
         * Given two ranges on the same dimension, this returns a range that
         * covers both ranges.
         * @param a A Range.
         * @param b A Range.
         */
        static boundingRange(
            a: ಠ_ಠ.clutz.goog.math.Range|null,
            b: ಠ_ಠ.clutz.goog.math.Range|null): ಠ_ಠ.clutz.goog.math.Range;
        /**
         * Given two ranges, returns true if the first range completely overlaps
         * the second.
         * @param a The first Range.
         * @param b The second Range.
         */
        static contains(
            a: ಠ_ಠ.clutz.goog.math.Range|null,
            b: ಠ_ಠ.clutz.goog.math.Range|null): boolean;
        /**
         * Given a range and a point, returns true if the range contains the
         * point.
         * @param range The range.
         * @param p The point.
         */
        static containsPoint(range: ಠ_ಠ.clutz.goog.math.Range|null, p: number):
            boolean;
        /**
         * Compares ranges for equality.
         * @param a A Range.
         * @param b A Range.
         */
        static equals(
            a: ಠ_ಠ.clutz.goog.math.Range|null,
            b: ಠ_ಠ.clutz.goog.math.Range|null): boolean;
        /**
         * Creates a goog.math.Range from an array of two numbers.
         */
        static fromPair(pair: ಠ_ಠ.clutz.goog.vec.Number):
            ಠ_ಠ.clutz.goog.math.Range;
        /**
         * Given two ranges on the same dimension, determines whether they
         * intersect.
         * @param a A Range.
         * @param b A Range.
         */
        static hasIntersection(
            a: ಠ_ಠ.clutz.goog.math.Range|null,
            b: ಠ_ಠ.clutz.goog.math.Range|null): boolean;
        /**
         * Given two ranges on the same dimension, this method returns the
         * intersection of those ranges.
         * @param a A Range.
         * @param b A Range.
         */
        static intersection(
            a: ಠ_ಠ.clutz.goog.math.Range|null,
            b: ಠ_ಠ.clutz.goog.math.Range|null): ಠ_ಠ.clutz.goog.math.Range|null;
    }
    class Range_Instance {
        private noStructuralTyping_: any;
        /**
         * A number range.
         * @param a One end of the range.
         * @param b The other end of the range.
         */
        constructor(a: number, b: number);
        /**
         * The highest value in the range.
         */
        end: number;
        /**
         * The lowest value in the range.
         */
        start: number;
        clone(): ಠ_ಠ.clutz.goog.math.Range;
        getLength(): number;
        /**
         * Extends this range to include the given point.
         */
        includePoint(point: number): void;
        /**
         * Extends this range to include the given range.
         */
        includeRange(range: ಠ_ಠ.clutz.goog.math.Range): void;
        /**
         * Returns a string representing the range.
         */
        toString(): string;
    }
}
declare module 'goog:goog.math.Range' {
    import alias = ಠ_ಠ.clutz.goog.math.Range;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math {
    /**
     * Constructs a new RangeSet, which can store numeric ranges.
     *
     * Ranges are treated as half-closed: that is, they are exclusive of their
     * end value [start, end).
     *
     * New ranges added to the set which overlap the values in one or more
     * existing ranges will be merged.
     */
    class RangeSet extends RangeSet_Instance {
        /**
         * Compares two sets for equality.
         * @param a A range set.
         * @param b A range set.
         */
        static equals(
            a: ಠ_ಠ.clutz.goog.math.RangeSet|null,
            b: ಠ_ಠ.clutz.goog.math.RangeSet|null): boolean;
    }
    class RangeSet_Instance {
        private noStructuralTyping_: any;
        /**
         * Returns an iterator that iterates over the ranges in the RangeSet.
         * @param opt_keys Ignored for RangeSets.
         */
        __iterator__(opt_keys?: boolean): ಠ_ಠ.clutz.goog.iter.Iterator<any>;
        /**
         * Adds a range to the set. If the new range overlaps existing values,
         * those ranges will be merged.
         * @param a The range to add.
         */
        add(a: ಠ_ಠ.clutz.goog.math.Range|null): void;
        /**
         * Removes all values in the set.
         */
        clear(): void;
        clone(): ಠ_ಠ.clutz.goog.math.RangeSet;
        /**
         * Determines whether a given range is in the set. Only succeeds if the
         * entire range is available.
         * @param a The query range.
         */
        contains(a: ಠ_ಠ.clutz.goog.math.Range|null): boolean;
        /**
         * Determines whether a given value is set in the RangeSet.
         * @param value The value to test.
         */
        containsValue(value: number): boolean;
        coveredLength(): number;
        /**
         * Subtracts the ranges of another set from this one, returning the
         * result as a new RangeSet.
         * @param set The RangeSet to subtract.
         */
        difference(set: ಠ_ಠ.clutz.goog.math.RangeSet):
            ಠ_ಠ.clutz.goog.math.RangeSet;
        getBounds(): ಠ_ಠ.clutz.goog.math.Range|null;
        /**
         * Intersects this RangeSet with another.
         * @param set The RangeSet to intersect with.
         */
        intersection(set: ಠ_ಠ.clutz.goog.math.RangeSet|
                     null): ಠ_ಠ.clutz.goog.math.RangeSet;
        /**
         * Creates an inverted slice of this set over the input range.
         * @param range The range to copy into the slice.
         */
        inverse(range: ಠ_ಠ.clutz.goog.math.Range|
                null): ಠ_ಠ.clutz.goog.math.RangeSet;
        isEmpty(): boolean;
        /**
         * Removes a range of values from the set.
         * @param a The range to remove.
         */
        remove(a: ಠ_ಠ.clutz.goog.math.Range|null): void;
        /**
         * Creates a subset of this set over the input range.
         * @param range The range to copy into the slice.
         */
        slice(range: ಠ_ಠ.clutz.goog.math.Range|
              null): ಠ_ಠ.clutz.goog.math.RangeSet;
        toString(): string;
        /**
         * Returns the union of this RangeSet with another.
         * @param set Another RangeSet.
         */
        union(set: ಠ_ಠ.clutz.goog.math.RangeSet|
              null): ಠ_ಠ.clutz.goog.math.RangeSet;
    }
}
declare module 'goog:goog.math.RangeSet' {
    import alias = ಠ_ಠ.clutz.goog.math.RangeSet;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math {
    /**
     * Class for representing rectangular regions.
     */
    class Rect extends Rect_Instance {
        /**
         * Returns a new rectangle which completely contains both input
         * rectangles.
         * @param a A rectangle.
         * @param b A rectangle.
         */
        static boundingRect(
            a: ಠ_ಠ.clutz.goog.math.IRect|null,
            b: ಠ_ಠ.clutz.goog.math.IRect|null): ಠ_ಠ.clutz.goog.math.Rect|null;
        /**
         * Creates a new Rect object with the same position and dimensions as a
         * given Box.  Note that this is only the inverse of toBox if left/top
         * are defined.
         * @param box A box.
         */
        static createFromBox(box: ಠ_ಠ.clutz.goog.math.Box|
                             null): ಠ_ಠ.clutz.goog.math.Rect;
        /**
         * Creates a new Rect object with the position and size given.
         * @param position The top-left coordinate of the Rect
         * @param size The size of the Rect
         */
        static createFromPositionAndSize(
            position: ಠ_ಠ.clutz.goog.math.Coordinate,
            size: ಠ_ಠ.clutz.goog.math.Size): ಠ_ಠ.clutz.goog.math.Rect;
        /**
         * Computes the difference regions between two rectangles. The return
         * value is an array of 0 to 4 rectangles defining the remaining regions
         * of the first rectangle after the second has been subtracted.
         * @param a A Rectangle.
         * @param b A Rectangle.
         */
        static difference(
            a: ಠ_ಠ.clutz.goog.math.Rect|null,
            b: ಠ_ಠ.clutz.goog.math.IRect|null): ಠ_ಠ.clutz.goog.math.Rect[];
        /**
         * Compares rectangles for equality.
         * @param a A Rectangle.
         * @param b A Rectangle.
         */
        static equals(
            a: ಠ_ಠ.clutz.goog.math.IRect|null,
            b: ಠ_ಠ.clutz.goog.math.IRect|null): boolean;
        /**
         * Returns the intersection of two rectangles. Two rectangles intersect
         * if they touch at all, for example, two zero width and height
         * rectangles would intersect if they had the same top and left.
         * @param a A Rectangle.
         * @param b A Rectangle.
         */
        static intersection(
            a: ಠ_ಠ.clutz.goog.math.IRect|null,
            b: ಠ_ಠ.clutz.goog.math.IRect|null): ಠ_ಠ.clutz.goog.math.Rect|null;
        /**
         * Returns whether two rectangles intersect. Two rectangles intersect if
         * they touch at all, for example, two zero width and height rectangles
         * would intersect if they had the same top and left.
         * @param a A Rectangle.
         * @param b A Rectangle.
         */
        static intersects(
            a: ಠ_ಠ.clutz.goog.math.IRect|null,
            b: ಠ_ಠ.clutz.goog.math.IRect|null): boolean;
    }
    class Rect_Instance implements ಠ_ಠ.clutz.goog.math.IRect {
        private noStructuralTyping_: any;
        /**
         * Class for representing rectangular regions.
         * @param x Left.
         * @param y Top.
         * @param w Width.
         * @param h Height.
         */
        constructor(x: number, y: number, w: number, h: number);
        height: number;
        left: number;
        top: number;
        width: number;
        /**
         * Expand this rectangle to also include the area of the given
         * rectangle.
         * @param rect The other rectangle.
         */
        boundingRect(rect: ಠ_ಠ.clutz.goog.math.IRect|null): void;
        /**
         * Rounds the fields to the next larger integer values.
         */
        ceil(): ಠ_ಠ.clutz.goog.math.Rect;
        clone(): ಠ_ಠ.clutz.goog.math.Rect;
        /**
         * Tests whether this rectangle entirely contains another rectangle or
         * coordinate.
         * @param another The rectangle or coordinate to test for containment.
         */
        contains(another: ಠ_ಠ.clutz.goog.math.IRect|null|
                 ಠ_ಠ.clutz.goog.math.Coordinate): boolean;
        /**
         * Computes the difference regions between this rectangle and {@code
         * rect}. The return value is an array of 0 to 4 rectangles defining the
         * remaining regions of this rectangle after the other has been
         * subtracted.
         * @param rect A Rectangle.
         */
        difference(rect: ಠ_ಠ.clutz.goog.math.IRect|
                   null): ಠ_ಠ.clutz.goog.math.Rect[];
        distance(point: ಠ_ಠ.clutz.goog.math.Coordinate): number;
        /**
         * Rounds the fields to the next smaller integer values.
         */
        floor(): ಠ_ಠ.clutz.goog.math.Rect;
        getBottomRight(): ಠ_ಠ.clutz.goog.math.Coordinate;
        getCenter(): ಠ_ಠ.clutz.goog.math.Coordinate;
        getSize(): ಠ_ಠ.clutz.goog.math.Size;
        getTopLeft(): ಠ_ಠ.clutz.goog.math.Coordinate;
        /**
         * Computes the intersection of this rectangle and the rectangle
         * parameter.  If there is no intersection, returns false and leaves
         * this rectangle as is.
         * @param rect A Rectangle.
         */
        intersection(rect: ಠ_ಠ.clutz.goog.math.IRect|null): boolean;
        /**
         * Returns whether a rectangle intersects this rectangle.
         * @param rect A rectangle.
         */
        intersects(rect: ಠ_ಠ.clutz.goog.math.IRect|null): boolean;
        /**
         * Rounds the fields to nearest integer values.
         */
        round(): ಠ_ಠ.clutz.goog.math.Rect;
        /**
         * Scales this rectangle by the given scale factors. The left and width
         * values are scaled by {@code sx} and the top and height values are
         * scaled by
         * {@code opt_sy}.  If {@code opt_sy} is not given, then all fields are
         * scaled by {@code sx}.
         * @param sx The scale factor to use for the x dimension.
         * @param opt_sy The scale factor to use for the y dimension.
         */
        scale(sx: number, opt_sy?: number): ಠ_ಠ.clutz.goog.math.Rect;
        squaredDistance(point: ಠ_ಠ.clutz.goog.math.Coordinate): number;
        /**
         * Returns a new Box object with the same position and dimensions as
         * this rectangle.
         */
        toBox(): ಠ_ಠ.clutz.goog.math.Box;
        /**
         * Returns a nice string representing size and dimensions of rectangle.
         */
        toString(): string;
        /**
         * Translates this rectangle by the given offsets. If a
         * {@code goog.math.Coordinate} is given, then the left and top values
         * are translated by the coordinate's x and y values. Otherwise, top and
         * left are translated by {@code tx} and {@code opt_ty} respectively.
         * @param tx The value to translate left by or the the coordinate to
         * translate this rect by.
         * @param opt_ty The value to translate top by.
         */
        translate(
            tx: number|ಠ_ಠ.clutz.goog.math.Coordinate|null,
            opt_ty?: number): ಠ_ಠ.clutz.goog.math.Rect;
    }
}
declare module 'goog:goog.math.Rect' {
    import alias = ಠ_ಠ.clutz.goog.math.Rect;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math {
    /**
     * Class for representing sizes consisting of a width and height. Undefined
     * width and height support is deprecated and results in compiler warning.
     */
    class Size extends Size_Instance {
        /**
         * Compares sizes for equality.
         * @param a A Size.
         * @param b A Size.
         */
        static equals(
            a: ಠ_ಠ.clutz.goog.math.Size|null,
            b: ಠ_ಠ.clutz.goog.math.Size|null): boolean;
    }
    class Size_Instance {
        private noStructuralTyping_: any;
        /**
         * Class for representing sizes consisting of a width and height.
         * Undefined width and height support is deprecated and results in
         * compiler warning.
         * @param width Width.
         * @param height Height.
         */
        constructor(width: number, height: number);
        /**
         * Height
         */
        height: number;
        /**
         * Width
         */
        width: number;
        area(): number;
        aspectRatio(): number;
        /**
         * Clamps the width and height parameters upward to integer values.
         */
        ceil(): ಠ_ಠ.clutz.goog.math.Size;
        clone(): ಠ_ಠ.clutz.goog.math.Size;
        fitsInside(target: ಠ_ಠ.clutz.goog.math.Size): boolean;
        /**
         * Clamps the width and height parameters downward to integer values.
         */
        floor(): ಠ_ಠ.clutz.goog.math.Size;
        getLongest(): number;
        getShortest(): number;
        isEmpty(): boolean;
        perimeter(): number;
        /**
         * Rounds the width and height parameters to integer values.
         */
        round(): ಠ_ಠ.clutz.goog.math.Size;
        /**
         * Scales this size by the given scale factors. The width and height are
         * scaled by {@code sx} and {@code opt_sy} respectively.  If {@code
         * opt_sy} is not given, then {@code sx} is used for both the width and
         * height.
         * @param sx The scale factor to use for the width.
         * @param opt_sy The scale factor to use for the height.
         */
        scale(sx: number, opt_sy?: number): ಠ_ಠ.clutz.goog.math.Size;
        /**
         * Uniformly scales the size to perfectly cover the dimensions of a
         * given size. If the size is already larger than the target, it will be
         * scaled down to the minimum size at which it still covers the entire
         * target. The original aspect ratio will be preserved.
         *
         * This function assumes that both Sizes contain strictly positive
         * dimensions.
         * @param target The target size.
         */
        scaleToCover(target: ಠ_ಠ.clutz.goog.math.Size):
            ಠ_ಠ.clutz.goog.math.Size;
        /**
         * Uniformly scales the size to fit inside the dimensions of a given
         * size. The original aspect ratio will be preserved.
         *
         * This function assumes that both Sizes contain strictly positive
         * dimensions.
         * @param target The target size.
         */
        scaleToFit(target: ಠ_ಠ.clutz.goog.math.Size): ಠ_ಠ.clutz.goog.math.Size;
        /**
         * Returns a nice string representing size.
         */
        toString(): string;
    }
}
declare module 'goog:goog.math.Size' {
    import alias = ಠ_ಠ.clutz.goog.math.Size;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math {
    /**
     * Class for a two-dimensional vector object and assorted functions useful
     * for manipulating points.
     */
    class Vec2 extends Vec2_Instance {
        /**
         * Returns the determinant of two vectors.
         * @param a The first vector.
         * @param b The second vector.
         */
        static determinant(
            a: ಠ_ಠ.clutz.goog.math.Vec2, b: ಠ_ಠ.clutz.goog.math.Vec2): number;
        /**
         * Returns the difference between two vectors as a new Vec2.
         * @param a The first vector.
         * @param b The second vector.
         */
        static difference(
            a: ಠ_ಠ.clutz.goog.math.Coordinate,
            b: ಠ_ಠ.clutz.goog.math.Coordinate): ಠ_ಠ.clutz.goog.math.Vec2;
        /**
         * Returns the distance between two vectors.
         * @param a The first vector.
         * @param b The second vector.
         */
        static distance(
            a: ಠ_ಠ.clutz.goog.math.Coordinate,
            b: ಠ_ಠ.clutz.goog.math.Coordinate): number;
        /**
         * Returns the dot-product of two vectors.
         * @param a The first vector.
         * @param b The second vector.
         */
        static dot(
            a: ಠ_ಠ.clutz.goog.math.Coordinate,
            b: ಠ_ಠ.clutz.goog.math.Coordinate): number;
        /**
         * Compares vectors for equality.
         * @param a The first vector.
         * @param b The second vector.
         */
        static equals(
            a: ಠ_ಠ.clutz.goog.math.Coordinate,
            b: ಠ_ಠ.clutz.goog.math.Coordinate): boolean;
        /**
         * Returns a new Vec2 object from a given coordinate.
         * @param a The coordinate.
         */
        static fromCoordinate(a: ಠ_ಠ.clutz.goog.math.Coordinate):
            ಠ_ಠ.clutz.goog.math.Vec2;
        /**
         * Returns a new Vec2 that is the linear interpolant between vectors a
         * and b at scale-value x.
         * @param a Vector a.
         * @param b Vector b.
         * @param x The proportion between a and b.
         */
        static lerp(
            a: ಠ_ಠ.clutz.goog.math.Coordinate,
            b: ಠ_ಠ.clutz.goog.math.Coordinate,
            x: number): ಠ_ಠ.clutz.goog.math.Vec2;
        static random(): ಠ_ಠ.clutz.goog.math.Vec2;
        static randomUnit(): ಠ_ಠ.clutz.goog.math.Vec2;
        /**
         * Returns a new Vec2 that is a copy of the vector a, but rescaled by a
         * factors sx and sy in the x and y directions. If only sx is specified,
         * then y is scaled by the same factor as x.
         * @param a Vector a.
         * @param sx X scale factor.
         * @param sy Y scale factor (optional).
         */
        static rescaled(
            a: ಠ_ಠ.clutz.goog.math.Coordinate, sx: number,
            sy?: number): ಠ_ಠ.clutz.goog.math.Vec2;
        /**
         * Rotates a vector by a given angle, specified in radians, relative to
         * a given axis rotation point. The returned vector is a newly created
         * instance - no in-place changes are done.
         * @param v A vector.
         * @param axisPoint The rotation axis point.
         * @param angle The angle, in radians.
         */
        static rotateAroundPoint(
            v: ಠ_ಠ.clutz.goog.math.Vec2, axisPoint: ಠ_ಠ.clutz.goog.math.Vec2,
            angle: number): ಠ_ಠ.clutz.goog.math.Vec2;
        /**
         * Returns the squared distance between two vectors.
         * @param a The first vector.
         * @param b The second vector.
         */
        static squaredDistance(
            a: ಠ_ಠ.clutz.goog.math.Coordinate,
            b: ಠ_ಠ.clutz.goog.math.Coordinate): number;
        /**
         * Returns the sum of two vectors as a new Vec2.
         * @param a The first vector.
         * @param b The second vector.
         */
        static sum(
            a: ಠ_ಠ.clutz.goog.math.Coordinate,
            b: ಠ_ಠ.clutz.goog.math.Coordinate): ಠ_ಠ.clutz.goog.math.Vec2;
    }
    class Vec2_Instance extends ಠ_ಠ.clutz.goog.math.Coordinate_Instance {
        /**
         * Class for a two-dimensional vector object and assorted functions
         * useful for manipulating points.
         * @param x The x coordinate for the vector.
         * @param y The y coordinate for the vector.
         */
        constructor(x: number, y: number);
        /**
         * X-value
         */
        x: number;
        /**
         * Y-value
         */
        y: number;
        /**
         * Adds another vector to this vector in-place.
         * @param b The vector to add.
         */
        add(b: ಠ_ಠ.clutz.goog.math.Coordinate): ಠ_ಠ.clutz.goog.math.Vec2;
        clone(): ಠ_ಠ.clutz.goog.math.Vec2;
        equals(b: any): boolean;
        /**
         * Reverses the sign of the vector. Equivalent to scaling the vector by
         * -1.
         */
        invert(): ಠ_ಠ.clutz.goog.math.Vec2;
        /**
         * Returns the magnitude of the vector measured from the origin.
         */
        magnitude(): number;
        /**
         * Normalizes the current vector to have a magnitude of 1.
         */
        normalize(): ಠ_ಠ.clutz.goog.math.Vec2;
        /**
         * Rotates this vector in-place by a given angle, specified in radians.
         * @param angle The angle, in radians.
         */
        rotate(angle: number): ಠ_ಠ.clutz.goog.math.Vec2;
        scale(a: number, b?: number): ಠ_ಠ.clutz.goog.math.Vec2;
        /**
         * Returns the squared magnitude of the vector measured from the origin.
         * NOTE(brenneman): Leaving out the square root is not a significant
         * optimization in JavaScript.
         */
        squaredMagnitude(): number;
        /**
         * Subtracts another vector from this vector in-place.
         * @param b The vector to subtract.
         */
        subtract(b: ಠ_ಠ.clutz.goog.math.Coordinate): ಠ_ಠ.clutz.goog.math.Vec2;
    }
}
declare module 'goog:goog.math.Vec2' {
    import alias = ಠ_ಠ.clutz.goog.math.Vec2;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math {
    /**
     * Class for a three-dimensional vector object and assorted functions useful
     * for manipulation.
     *
     * Inherits from goog.math.Coordinate3 so that a Vec3 may be passed in to
     * any function that requires a Coordinate.
     */
    class Vec3 extends Vec3_Instance {
        /**
         * Returns the cross-product of two vectors.
         * @param a The first vector.
         * @param b The second vector.
         */
        static cross(
            a: ಠ_ಠ.clutz.goog.math.Vec3|null,
            b: ಠ_ಠ.clutz.goog.math.Vec3|null): ಠ_ಠ.clutz.goog.math.Vec3;
        /**
         * Returns the difference of two vectors as a new Vec3.
         * @param a The first vector.
         * @param b The second vector.
         */
        static difference(
            a: ಠ_ಠ.clutz.goog.math.Vec3|null,
            b: ಠ_ಠ.clutz.goog.math.Vec3|null): ಠ_ಠ.clutz.goog.math.Vec3;
        /**
         * Returns the distance between two vectors.
         * @param a The first vector.
         * @param b The second vector.
         */
        static distance(
            a: ಠ_ಠ.clutz.goog.math.Vec3|null,
            b: ಠ_ಠ.clutz.goog.math.Vec3|null): number;
        /**
         * Returns the dot-product of two vectors.
         * @param a The first vector.
         * @param b The second vector.
         */
        static dot(
            a: ಠ_ಠ.clutz.goog.math.Vec3|null,
            b: ಠ_ಠ.clutz.goog.math.Vec3|null): number;
        /**
         * Compares vectors for equality.
         * @param a The first vector.
         * @param b The second vector.
         */
        static equals(
            a: ಠ_ಠ.clutz.goog.math.Vec3|null,
            b: ಠ_ಠ.clutz.goog.math.Vec3|null): boolean;
        /**
         * Returns a new Vec3 object from a given coordinate.
         * @param a The coordinate.
         */
        static fromCoordinate3(a: ಠ_ಠ.clutz.goog.math.Coordinate3|
                               null): ಠ_ಠ.clutz.goog.math.Vec3;
        /**
         * Returns a new Vec3 that is the linear interpolant between vectors a
         * and b at scale-value x.
         * @param a Vector a.
         * @param b Vector b.
         * @param x The proportion between a and b.
         */
        static lerp(
            a: ಠ_ಠ.clutz.goog.math.Vec3|null, b: ಠ_ಠ.clutz.goog.math.Vec3|null,
            x: number): ಠ_ಠ.clutz.goog.math.Vec3;
        /**
         * Generates a random vector inside the unit sphere.
         */
        static random(): ಠ_ಠ.clutz.goog.math.Vec3;
        /**
         * Generates a random unit vector.
         *
         * http://mathworld.wolfram.com/SpherePointPicking.html
         * Using (6), (7), and (8) to generate coordinates.
         */
        static randomUnit(): ಠ_ಠ.clutz.goog.math.Vec3;
        /**
         * Returns a new Vec3 that is a copy of the vector a, but rescaled by a
         * factor s in all dimensions.
         * @param a Vector a.
         * @param s Scale factor.
         */
        static rescaled(a: ಠ_ಠ.clutz.goog.math.Vec3, s: number):
            ಠ_ಠ.clutz.goog.math.Vec3;
        /**
         * Returns the squared distance between two vectors.
         * @param a The first vector.
         * @param b The second vector.
         */
        static squaredDistance(
            a: ಠ_ಠ.clutz.goog.math.Vec3|null,
            b: ಠ_ಠ.clutz.goog.math.Vec3|null): number;
        /**
         * Returns the sum of two vectors as a new Vec3.
         * @param a The first vector.
         * @param b The second vector.
         */
        static sum(
            a: ಠ_ಠ.clutz.goog.math.Vec3|null,
            b: ಠ_ಠ.clutz.goog.math.Vec3|null): ಠ_ಠ.clutz.goog.math.Vec3;
    }
    class Vec3_Instance extends ಠ_ಠ.clutz.goog.math.Coordinate3_Instance {
        /**
         * Class for a three-dimensional vector object and assorted functions
         * useful for manipulation.
         *
         * Inherits from goog.math.Coordinate3 so that a Vec3 may be passed in
         * to any function that requires a Coordinate.
         * @param x The x value for the vector.
         * @param y The y value for the vector.
         * @param z The z value for the vector.
         */
        constructor(x: number, y: number, z: number);
        /**
         * X-value
         */
        x: number;
        /**
         * Y-value
         */
        y: number;
        /**
         * Z-value
         */
        z: number;
        /**
         * Adds another vector to this vector in-place.
         * @param b The vector to add.
         */
        add(b: ಠ_ಠ.clutz.goog.math.Vec3|null): ಠ_ಠ.clutz.goog.math.Vec3;
        /**
         * Creates a new copy of this Vec3.
         */
        clone(): ಠ_ಠ.clutz.goog.math.Vec3;
        /**
         * Compares this vector with another for equality.
         * @param b The other vector.
         */
        equals(b: ಠ_ಠ.clutz.goog.math.Vec3|null): boolean;
        /**
         * Reverses the sign of the vector. Equivalent to scaling the vector by
         * -1.
         */
        invert(): ಠ_ಠ.clutz.goog.math.Vec3;
        /**
         * Returns the magnitude of the vector measured from the origin.
         */
        magnitude(): number;
        /**
         * Normalizes the current vector to have a magnitude of 1.
         */
        normalize(): ಠ_ಠ.clutz.goog.math.Vec3;
        /**
         * Scales the current vector by a constant.
         * @param s The scale factor.
         */
        scale(s: number): ಠ_ಠ.clutz.goog.math.Vec3;
        /**
         * Returns the squared magnitude of the vector measured from the origin.
         * NOTE(brenneman): Leaving out the square root is not a significant
         * optimization in JavaScript.
         */
        squaredMagnitude(): number;
        /**
         * Subtracts another vector from this vector in-place.
         * @param b The vector to subtract.
         */
        subtract(b: ಠ_ಠ.clutz.goog.math.Vec3|null): ಠ_ಠ.clutz.goog.math.Vec3;
    }
}
declare module 'goog:goog.math.Vec3' {
    import alias = ಠ_ಠ.clutz.goog.math.Vec3;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math.interpolator {
    /**
     * An interface for one dimensional data interpolation.
     */
    interface Interpolator1 {
        /**
         * Computes the inverse interpolator. That is, it returns invInterp s.t.
         * this.interpolate(invInterp.interpolate(t))) = t. Note that the
         * inverse interpolator is only well defined if the data being
         * interpolated is 'invertible', i.e. it represents a bijective
         * function. In addition, the returned interpolator is only guaranteed
         * to give the exact inverse at the input data passed in getData. If
         * 'this' has no data, the returned Interpolator will be empty as well.
         */
        getInverse(): ಠ_ಠ.clutz.goog.math.interpolator.Interpolator1;
        /**
         * Computes the interpolated value at abscissa x. If x is outside the
         * range of the data points passed in setData, the value is
         * extrapolated.
         * @param x The abscissa to sample at.
         */
        interpolate(a: number): number;
        /**
         * Sets the data to be interpolated. Note that the data points are
         * expected to be sorted according to their abscissa values and not have
         * duplicate values. E.g. calling setData([0, 0, 1], [1, 1, 3]) may give
         * undefined results, the correct call should be setData([0, 1], [1,
         * 3]). Calling setData multiple times does not merge the data samples.
         * The last call to setData is the one used when computing the
         * interpolation.
         * @param x The abscissa of the data points.
         * @param y The ordinate of the data points.
         */
        setData(a: ಠ_ಠ.clutz.goog.vec.Number, b: ಠ_ಠ.clutz.goog.vec.Number):
            any;
    }
}
declare module 'goog:goog.math.interpolator.Interpolator1' {
    import alias = ಠ_ಠ.clutz.goog.math.interpolator.Interpolator1;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math.interpolator {
    /**
     * A one dimensional linear interpolator.
     */
    class Linear1 extends Linear1_Instance {}
    class Linear1_Instance implements
        ಠ_ಠ.clutz.goog.math.interpolator.Interpolator1 {
        private noStructuralTyping_: any;
        getInverse(): ಠ_ಠ.clutz.goog.math.interpolator.Interpolator1;
        interpolate(x: number): number;
        setData(x: ಠ_ಠ.clutz.goog.vec.Number, y: ಠ_ಠ.clutz.goog.vec.Number):
            any;
    }
}
declare module 'goog:goog.math.interpolator.Linear1' {
    import alias = ಠ_ಠ.clutz.goog.math.interpolator.Linear1;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math.interpolator {
    /**
     * A one dimensional monotone cubic spline interpolator.
     */
    class Pchip1 extends Pchip1_Instance {}
    class Pchip1_Instance extends
        ಠ_ಠ.clutz.goog.math.interpolator.Spline1_Instance {
        computeDerivatives(
            dx: ಠ_ಠ.clutz.goog.vec.Number|null,
            slope: ಠ_ಠ.clutz.goog.vec.Number|null): ಠ_ಠ.clutz.goog.vec.Number;
    }
}
declare module 'goog:goog.math.interpolator.Pchip1' {
    import alias = ಠ_ಠ.clutz.goog.math.interpolator.Pchip1;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math.interpolator {
    /**
     * A one dimensional cubic spline interpolator with natural boundary
     * conditions.
     */
    class Spline1 extends Spline1_Instance {}
    class Spline1_Instance implements
        ಠ_ಠ.clutz.goog.math.interpolator.Interpolator1 {
        private noStructuralTyping_: any;
        /**
         * Computes the derivative at each point of the spline such that
         * the curve is C2. It uses not-a-knot boundary conditions.
         * @param dx The spacing between consecutive data points.
         * @param slope The slopes between consecutive data points.
         */
        computeDerivatives(
            dx: ಠ_ಠ.clutz.goog.vec.Number|null,
            slope: ಠ_ಠ.clutz.goog.vec.Number|null): ಠ_ಠ.clutz.goog.vec.Number;
        /**
         * Note that the inverse of a cubic spline is not a cubic spline in
         * general. As a result the inverse implementation is only approximate.
         * In particular, it only guarantees the exact inverse at the original
         * input data points passed to setData.
         */
        getInverse(): ಠ_ಠ.clutz.goog.math.interpolator.Interpolator1;
        interpolate(x: number): number;
        setData(x: ಠ_ಠ.clutz.goog.vec.Number, y: ಠ_ಠ.clutz.goog.vec.Number):
            any;
    }
}
declare module 'goog:goog.math.interpolator.Spline1' {
    import alias = ಠ_ಠ.clutz.goog.math.interpolator.Spline1;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.math.paths {
    /**
     * Defines an arrow.
     * @param a Point A.
     * @param b Point B.
     * @param aHead The size of the arrow head at point A. 0 omits the head.
     * @param bHead The size of the arrow head at point B. 0 omits the head.
     */
    function createArrow(
        a: ಠ_ಠ.clutz.goog.math.Coordinate|null,
        b: ಠ_ಠ.clutz.goog.math.Coordinate|null, aHead: number|null,
        bHead: number|null): ಠ_ಠ.clutz.goog.math.Path;
    /**
     * Defines a regular n-gon by specifing the center, a vertex, and the total
     * number of vertices.
     * @param center The center point.
     * @param vertex The vertex, which implicitly defines a radius as well.
     * @param n The number of vertices.
     */
    function createRegularNGon(
        center: ಠ_ಠ.clutz.goog.math.Coordinate|null,
        vertex: ಠ_ಠ.clutz.goog.math.Coordinate|null,
        n: number): ಠ_ಠ.clutz.goog.math.Path;
}
declare module 'goog:goog.math.paths' {
    import alias = ಠ_ಠ.clutz.goog.math.paths;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.math.tdma {
    /**
     * Solves a linear system where the matrix is square tri-diagonal. That is,
     * given a system of equations:
     *
     * A * result = vecRight,
     *
     * this class computes result = inv(A) * vecRight, where A has the special
     * form of a tri-diagonal matrix:
     *
     * |dia(0) sup(0)   0    0     ...   0|
     * |sub(0) dia(1) sup(1) 0     ...   0|
     * A =|                ...               |
     * |0 ... 0 sub(n-2) dia(n-1) sup(n-1)|
     * |0 ... 0    0     sub(n-1)   dia(n)|
     * @param subDiag The sub diagonal of the matrix.
     * @param mainDiag The main diagonal of the matrix.
     * @param supDiag The super diagonal of the matrix.
     * @param vecRight The right vector of the system of equations.
     * @param opt_result The optional array to store the result.
     */
    function solve(
        subDiag: ಠ_ಠ.clutz.goog.vec.Number, mainDiag: ಠ_ಠ.clutz.goog.vec.Number,
        supDiag: ಠ_ಠ.clutz.goog.vec.Number, vecRight: ಠ_ಠ.clutz.goog.vec.Number,
        opt_result?: ಠ_ಠ.clutz.goog.vec.Number|null): ಠ_ಠ.clutz.goog.vec.Number;
}
declare module 'goog:goog.math.tdma' {
    import alias = ಠ_ಠ.clutz.goog.math.tdma;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog {
    /**
     * Decorator around functions that caches the inner function's return
     * values.
     *
     * To cache parameterless functions, see goog.functions.cacheReturnValue.
     * @param f The function to wrap. Its return value may only depend on its
     * arguments and 'this' context. There may be further restrictions on the
     * arguments depending on the capabilities of the serializer used.
     * @param opt_serializer A function to serialize f's arguments. It must have
     * the same signature as goog.memoize.simpleSerializer. It defaults to that
     * function.
     */
    function memoize(
        f: (...a: any[]) => any,
        opt_serializer?: (a: number, b: GlobalObject|null) =>
            string): (...a: any[]) => any;
}
declare module 'goog:goog.memoize' {
    import alias = ಠ_ಠ.clutz.goog.memoize;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.messaging {
    /**
     * Creates a bidirectional pipe between two message channels.
     * @param channel1 The first channel.
     * @param channel2 The second channel.
     */
    function pipe(
        channel1: ಠ_ಠ.clutz.goog.messaging.MessageChannel|null,
        channel2: ಠ_ಠ.clutz.goog.messaging.MessageChannel|null): void;
}
declare module 'goog:goog.messaging' {
    import alias = ಠ_ಠ.clutz.goog.messaging;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.messaging {
    /**
     * Creates an abstract message channel.
     */
    class AbstractChannel extends AbstractChannel_Instance {}
    class AbstractChannel_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance
        implements ಠ_ಠ.clutz.goog.messaging.MessageChannel {
        /**
         * Immediately calls opt_connectCb if given, and is otherwise a no-op.
         * If subclasses have configuration that needs to happen before the
         * channel is connected, they should override this and {@link
         * #isConnected}.
         */
        connect(opt_connectCb?: (...a: any[]) => any): void;
        /**
         * Converts the message payload into the format expected by the
         * registered service (either JSON or string).
         * @param serviceName The name of the service receiving the message.
         * @param payload The contents of the message.
         * @param objectPayload Whether the service expects an object or a plain
         * string.
         */
        decodePayload(
            serviceName: string, payload: string|GlobalObject,
            objectPayload: boolean): string|GlobalObject|null;
        /**
         * Delivers a message to the appropriate service. This is meant to be
         * called by subclasses when they receive messages.
         *
         * This method takes into account both explicitly-registered and default
         * services, as well as making sure that JSON payloads are decoded when
         * necessary. If the subclass is capable of passing objects as payloads,
         * those objects can be passed in to this method directly. Otherwise,
         * the (potentially JSON-encoded) strings should be passed in.
         * @param serviceName The name of the service receiving the message.
         * @param payload The contents of the message.
         */
        deliver(serviceName: string, payload: string|GlobalObject): void;
        disposeInternal(): void;
        /**
         * Find the service object for a given service name. If there's no
         * service explicitly registered, but there is a default service, a
         * service object is constructed for it.
         * @param serviceName The name of the service receiving the message.
         * @param payload The contents of the message.
         */
        getService(serviceName: string, payload: string|GlobalObject): {
            callback: (a: string | GlobalObject) => any,
            objectPayload: boolean
        }|null;
        /**
         * Always returns true. If subclasses have configuration that needs to
         * happen before the channel is connected, they should override this and
         * {@link #connect}.
         */
        isConnected(): boolean;
        /**
         * Logger for this class.
         */
        logger: ಠ_ಠ.clutz.goog.debug.Logger|null;
        registerDefaultService(
            callback: (a: string, b: string|GlobalObject) => any): void;
        registerService(
            serviceName: string, callback: (a: string|GlobalObject) => any,
            opt_objectPayload?: boolean): void;
        send(...a: any[]): any;
    }
}
declare module 'goog:goog.messaging.AbstractChannel' {
    import alias = ಠ_ಠ.clutz.goog.messaging.AbstractChannel;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.messaging {
    /**
     * Creates a new BufferedChannel, which operates like its underlying channel
     * except that it buffers calls to send until it receives a message from its
     * peer claiming that the peer is ready to receive.  The peer is also
     * expected to be a BufferedChannel, though this is not enforced.
     */
    class BufferedChannel extends BufferedChannel_Instance {}
    class BufferedChannel_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance
        implements ಠ_ಠ.clutz.goog.messaging.MessageChannel {
        /**
         * Creates a new BufferedChannel, which operates like its underlying
         * channel except that it buffers calls to send until it receives a
         * message from its peer claiming that the peer is ready to receive.
         * The peer is also expected to be a BufferedChannel, though this is not
         * enforced.
         * @param messageChannel The MessageChannel we're wrapping.
         * @param opt_interval Polling interval for sending ready notifications
         * to peer, in ms.  Default is 50.
         */
        constructor(
            messageChannel: ಠ_ಠ.clutz.goog.messaging.MessageChannel,
            opt_interval?: number);
        connect(opt_connectCb?: (...a: any[]) => any): void;
        disposeInternal(): void;
        isConnected(): boolean;
        isPeerReady(): boolean;
        registerDefaultService(
            callback: (a: string, b: string|GlobalObject) => any): void;
        registerService(
            serviceName: string, callback: (a: string|GlobalObject) => any,
            opt_objectPayload?: boolean): void;
        /**
         * Send a message over the channel.  If the peer is not ready, the
         * message will be buffered and sent once we've received a ready message
         * from our peer.
         * @param serviceName The name of the service this message should be
         * delivered to.
         * @param payload The value of the message. If this is an Object, it is
         * serialized to JSON before sending.  It's the responsibility of
         * implementors of this class to perform the serialization.
         */
        send(serviceName: string, payload: string|GlobalObject): void;
    }
}
declare module 'goog:goog.messaging.BufferedChannel' {
    import alias = ಠ_ಠ.clutz.goog.messaging.BufferedChannel;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.messaging {
    /**
     * Creates a new DeferredChannel, which wraps a deferred MessageChannel and
     * enqueues messages to be sent once the wrapped channel is resolved.
     */
    class DeferredChannel extends DeferredChannel_Instance {}
    class DeferredChannel_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance
        implements ಠ_ಠ.clutz.goog.messaging.MessageChannel {
        /**
         * Creates a new DeferredChannel, which wraps a deferred MessageChannel
         * and enqueues messages to be sent once the wrapped channel is
         * resolved.
         * @param deferredChannel The underlying deferred MessageChannel.
         */
        constructor(deferredChannel: ಠ_ಠ.clutz.goog.async
                        .Deferred<ಠ_ಠ.clutz.goog.messaging.MessageChannel>);
        /**
         * Cancels the wrapped Deferred.
         */
        cancel(): void;
        connect(opt_connectCb?: (...a: any[]) => any): void;
        disposeInternal(): void;
        isConnected(): boolean;
        registerDefaultService(
            callback: (a: string, b: string|GlobalObject) => any): void;
        registerService(
            serviceName: string, callback: (a: string|GlobalObject) => any,
            opt_objectPayload?: boolean): void;
        send(serviceName: string, payload: string|GlobalObject): void;
    }
}
declare module 'goog:goog.messaging.DeferredChannel' {
    import alias = ಠ_ಠ.clutz.goog.messaging.DeferredChannel;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.messaging {
    /**
     * Creates a logger client that sends messages along a message channel for
     * the remote end to log. The remote end of the channel should use a
     * {goog.messaging.LoggerServer} with the same service name.
     */
    class LoggerClient extends LoggerClient_Instance {}
    class LoggerClient_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance {
        /**
         * Creates a logger client that sends messages along a message channel
         * for the remote end to log. The remote end of the channel should use a
         * {goog.messaging.LoggerServer} with the same service name.
         * @param channel The channel that on which to send the log messages.
         * @param serviceName The name of the logging service to use.
         */
        constructor(
            channel: ಠ_ಠ.clutz.goog.messaging.MessageChannel,
            serviceName: string);
        disposeInternal(): void;
    }
}
declare module 'goog:goog.messaging.LoggerClient' {
    import alias = ಠ_ಠ.clutz.goog.messaging.LoggerClient;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.messaging {
    /**
     * Creates a logger server that logs messages on behalf of the remote end of
     * a message channel. The remote end of the channel should use a
     * {goog.messaging.LoggerClient} with the same service name.
     */
    class LoggerServer extends LoggerServer_Instance {}
    class LoggerServer_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance {
        /**
         * Creates a logger server that logs messages on behalf of the remote
         * end of a message channel. The remote end of the channel should use a
         * {goog.messaging.LoggerClient} with the same service name.
         * @param channel The channel that is sending the log messages.
         * @param serviceName The name of the logging service to listen for.
         * @param opt_channelName The name of this channel. Used to help
         * distinguish this client's messages.
         */
        constructor(
            channel: ಠ_ಠ.clutz.goog.messaging.MessageChannel,
            serviceName: string, opt_channelName?: string);
        disposeInternal(): void;
    }
}
declare module 'goog:goog.messaging.LoggerServer' {
    import alias = ಠ_ಠ.clutz.goog.messaging.LoggerServer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.messaging {
    interface MessageChannel {
        /**
         * Initiates the channel connection. When this method is called, all the
         * information needed to connect the channel has to be available.
         *
         * Implementers should only require this method to be called if the
         * channel needs to be configured in some way between when it's created
         * and when it becomes active. Otherwise, the channel should be
         * immediately active and this method should do nothing but immediately
         * call opt_connectCb.
         * @param opt_connectCb Called when the channel has been connected and
         * is ready to use.
         */
        connect(opt_connectCb?: (...a: any[]) => any): void;
        /**
         * Gets whether the channel is connected.
         *
         * If {@link #connect} is not required for this class, this should
         * always return true. Otherwise, this should return true by the time
         * the callback passed to
         * {@link #connect} has been called and always after that.
         */
        isConnected(): boolean;
        /**
         * Registers a service to be called when a message is received that
         * doesn't match any other services.
         * @param callback The callback to process the incoming messages. Passed
         * the service name and the payload. Since some channels can pass
         * objects natively, the payload may be either an object or a string.
         */
        registerDefaultService(
            callback: (a: string, b: string|GlobalObject) => any): void;
        /**
         * Registers a service to be called when a message is received.
         *
         * Implementers shouldn't impose any restrictions on the service names
         * that may be registered. If some services are needed as control codes,
         * {@link goog.messaging.MultiMessageChannel} can be used to safely
         * split the channel into "public" and "control" virtual channels.
         * @param serviceName The name of the service.
         * @param callback The callback to process the incoming messages. Passed
         * the payload. If opt_objectPayload is set, the payload is decoded and
         * passed as an object.
         * @param opt_objectPayload If true, incoming messages for this service
         * are expected to contain an object, and will be deserialized from a
         * string automatically if necessary. It's the responsibility of
         * implementors of this class to perform the deserialization.
         */
        registerService(
            serviceName: string, callback: (a: string|GlobalObject) => any,
            opt_objectPayload?: boolean): void;
        /**
         * Sends a message over the channel.
         * @param serviceName The name of the service this message should be
         * delivered to.
         * @param payload The value of the message. If this is an Object, it is
         * serialized to a string before sending if necessary. It's the
         * responsibility of implementors of this class to perform the
         * serialization.
         */
        send(serviceName: string, payload: string|GlobalObject): void;
    }
}
declare module 'goog:goog.messaging.MessageChannel' {
    import alias = ಠ_ಠ.clutz.goog.messaging.MessageChannel;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.messaging {
    /**
     * Creates a new MultiChannel wrapping a single MessageChannel. The
     * underlying channel shouldn't have any other listeners registered, but it
     * should be connected.
     *
     * Note that the other side of the channel should also be connected to a
     * MultiChannel with the same number of virtual channels.
     */
    class MultiChannel extends MultiChannel_Instance {}
    class MultiChannel_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance {
        /**
         * Creates a new MultiChannel wrapping a single MessageChannel. The
         * underlying channel shouldn't have any other listeners registered, but
         * it should be connected.
         *
         * Note that the other side of the channel should also be connected to a
         * MultiChannel with the same number of virtual channels.
         * @param underlyingChannel The underlying channel to use as transport
         * for the virtual channels.
         */
        constructor(underlyingChannel: ಠ_ಠ.clutz.goog.messaging.MessageChannel|
                    null);
        /**
         * Creates a new virtual channel that will communicate across the
         * underlying channel.
         * @param name The name of the virtual channel. Must be unique for this
         * MultiChannel. Cannot contain colons.
         */
        createVirtualChannel(name: string):
            ಠ_ಠ.clutz.goog.messaging.MultiChannel.VirtualChannel;
        disposeInternal(): void;
    }
}
declare module 'goog:goog.messaging.MultiChannel' {
    import alias = ಠ_ಠ.clutz.goog.messaging.MultiChannel;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.messaging.MultiChannel {
    /**
     * A message channel that proxies its messages over another underlying
     * channel.
     */
    class VirtualChannel extends VirtualChannel_Instance {}
    class VirtualChannel_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance
        implements ಠ_ಠ.clutz.goog.messaging.MessageChannel {
        /**
         * A message channel that proxies its messages over another underlying
         * channel.
         * @param parent The MultiChannel which created this channel, and which
         * contains the underlying MessageChannel that's used as the transport.
         * @param name The name of this virtual channel. Unique among the
         * virtual channels in parent.
         */
        constructor(
            parent: ಠ_ಠ.clutz.goog.messaging.MultiChannel|null, name: string);
        /**
         * This is a no-op, since the underlying channel is expected to already
         * be initialized when it's passed in.
         */
        connect(opt_connectCb?: (...a: any[]) => any): void;
        disposeInternal(): void;
        /**
         * This always returns true, since the underlying channel is expected to
         * already be initialized when it's passed in.
         */
        isConnected(): boolean;
        registerDefaultService(
            callback: (a: string, b: string|GlobalObject) => any): void;
        registerService(
            serviceName: string, callback: (a: string|GlobalObject) => any,
            opt_objectPayload?: boolean): void;
        send(serviceName: string, payload: string|GlobalObject): void;
    }
}
declare module 'goog:goog.messaging.MultiChannel.VirtualChannel' {
    import alias = ಠ_ಠ.clutz.goog.messaging.MultiChannel.VirtualChannel;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.messaging {
    /**
     * The leaf node of a network.
     */
    class PortCaller extends PortCaller_Instance {}
    class PortCaller_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance
        implements ಠ_ಠ.clutz.goog.messaging.PortNetwork {
        /**
         * The leaf node of a network.
         * @param operatorPort The channel for communicating with the operator.
         * The other side of this channel should be passed to {@link
         * goog.messaging.PortOperator#addPort}. Must be either a {@link
         * goog.messaging.PortChannel} or a decorator wrapping a PortChannel; in
         * particular, it must be able to send and receive {@link MessagePort}s.
         */
        constructor(operatorPort: ಠ_ಠ.clutz.goog.messaging.MessageChannel);
        dial(name: string): ಠ_ಠ.clutz.goog.messaging.MessageChannel|null;
        disposeInternal(): void;
    }
}
declare module 'goog:goog.messaging.PortCaller' {
    import alias = ಠ_ಠ.clutz.goog.messaging.PortCaller;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.messaging {
    /**
     * A wrapper for several types of HTML5 message-passing entities
     * ({@link MessagePort}s and {@link WebWorker}s). This class implements the
     * {@link goog.messaging.MessageChannel} interface.
     *
     * This class can be used in conjunction with other communication on the
     * port. It sets {@link goog.messaging.PortChannel.FLAG} to true on all
     * messages it sends.
     */
    class PortChannel extends PortChannel_Instance {
        /**
         * The flag added to messages that are sent by a PortChannel, and are
         * meant to be handled by one on the other side.
         */
        static FLAG: string;
        /**
         * Create a PortChannel that communicates with a window embedded in the
         * current page (e.g. an iframe contentWindow). The code within the
         * window should call
         * {@link forGlobalWindow} to establish the connection.
         *
         * It's possible to use this channel in conjunction with other messages
         * to the embedded window. However, only one PortChannel should be used
         * for a given window at a time.
         * @param peerWindow The window object to communicate with.
         * @param peerOrigin The expected origin of the window. See
         * http://dev.w3.org/html5/postmsg/#dom-window-postmessage.
         * @param opt_timer The timer that regulates how often the initial
         * connection message is attempted. This will be automatically disposed
         * once the connection is established, or when the connection is
         * cancelled.
         */
        static forEmbeddedWindow(
            peerWindow: Window, peerOrigin: string,
            opt_timer?: ಠ_ಠ.clutz.goog.Timer|
            null): ಠ_ಠ.clutz.goog.messaging.DeferredChannel;
        /**
         * Create a PortChannel that communicates with the document in which
         * this window is embedded (e.g. within an iframe). The enclosing
         * document should call
         * {@link forEmbeddedWindow} to establish the connection.
         *
         * It's possible to use this channel in conjunction with other messages
         * posted to the global window. However, only one PortChannel should be
         * used for the global window at a time.
         * @param peerOrigin The expected origin of the enclosing document. See
         * http://dev.w3.org/html5/postmsg/#dom-window-postmessage.
         */
        static forGlobalWindow(peerOrigin: string):
            ಠ_ಠ.clutz.goog.messaging.MessageChannel;
    }
    class PortChannel_Instance extends
        ಠ_ಠ.clutz.goog.messaging.AbstractChannel_Instance {
        /**
         * A wrapper for several types of HTML5 message-passing entities
         * ({@link MessagePort}s and {@link WebWorker}s). This class implements
         * the
         * {@link goog.messaging.MessageChannel} interface.
         *
         * This class can be used in conjunction with other communication on the
         * port. It sets {@link goog.messaging.PortChannel.FLAG} to true on all
         * messages it sends.
         * @param underlyingPort The message-passing entity to wrap. If this is
         * a {@link MessagePort}, it should be started. The remote end should
         * also be wrapped in a PortChannel. This will be disposed along with
         * the PortChannel; this means terminating it if it's a worker or
         * removing it from the DOM if it's an iframe.
         */
        constructor(underlyingPort: MessagePort|ಠ_ಠ.clutz.WebWorker);
        disposeInternal(): void;
        /**
         * Logger for this class.
         */
        logger: ಠ_ಠ.clutz.goog.debug.Logger|null;
        /**
         * Sends a message over the channel.
         *
         * As an addition to the basic MessageChannel send API, PortChannels can
         * send objects that contain MessagePorts. Note that only plain Objects
         * and Arrays, not their subclasses, can contain MessagePorts.
         *
         * As per {@link http://www.w3.org/TR/html5/comms.html#clone-a-port},
         * once a port is copied to be sent across a channel, the original port
         * will cease being able to send or receive messages.
         * @param serviceName The name of the service this message should be
         * delivered to.
         * @param payload The value of the message. May contain MessagePorts or
         * be a MessagePort.
         */
        send(serviceName: string, payload: string|GlobalObject|MessagePort):
            void;
    }
}
declare module 'goog:goog.messaging.PortChannel' {
    import alias = ಠ_ಠ.clutz.goog.messaging.PortChannel;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.messaging {
    interface PortNetwork {
        /**
         * Returns a message channel that communicates with the named context.
         * If no such port exists, an error will either be thrown immediately or
         * after a round trip with the operator, depending on whether this pool
         * is the operator or a caller.
         *
         * If context A calls dial('B') and context B calls dial('A'), the two
         * ports returned will be connected to one another.
         * @param name The name of the context to get.
         */
        dial(name: string): ಠ_ಠ.clutz.goog.messaging.MessageChannel|null;
    }
}
declare namespace ಠ_ಠ.clutz.goog.messaging.PortNetwork {
    var GRANT_CONNECTION_SERVICE: string;
    var REQUEST_CONNECTION_SERVICE: string;
}
declare module 'goog:goog.messaging.PortNetwork' {
    import alias = ಠ_ಠ.clutz.goog.messaging.PortNetwork;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.messaging {
    /**
     * The central node of a PortNetwork.
     */
    class PortOperator extends PortOperator_Instance {}
    class PortOperator_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance
        implements ಠ_ಠ.clutz.goog.messaging.PortNetwork {
        /**
         * The central node of a PortNetwork.
         * @param name The name of this node.
         */
        constructor(name: string);
        /**
         * Adds a caller to the network with the given name. This port should
         * have no services registered on it. It will be disposed along with the
         * PortOperator.
         * @param name The name of the port to add.
         * @param port The port to add. Must be either a {@link
         * goog.messaging.PortChannel} or a decorator wrapping a PortChannel; in
         * particular, it must be able to send and receive {@link MessagePort}s.
         */
        addPort(name: string, port: ಠ_ಠ.clutz.goog.messaging.MessageChannel):
            void;
        dial(name: string): ಠ_ಠ.clutz.goog.messaging.MessageChannel|null;
        disposeInternal(): void;
    }
}
declare module 'goog:goog.messaging.PortOperator' {
    import alias = ಠ_ಠ.clutz.goog.messaging.PortOperator;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.messaging {
    /**
     * Creates a new RespondingChannel wrapping a single MessageChannel.
     */
    class RespondingChannel extends RespondingChannel_Instance {}
    class RespondingChannel_Instance extends
        ಠ_ಠ.clutz.goog.Disposable_Instance {
        /**
         * Creates a new RespondingChannel wrapping a single MessageChannel.
         * @param messageChannel The messageChannel to to wrap and allow for
         * responses. This channel must not have any existing services
         * registered. All service registration must be done through the {@link
         * RespondingChannel#registerService} api instead. The other end of
         * channel must also be a RespondingChannel.
         */
        constructor(messageChannel: ಠ_ಠ.clutz.goog.messaging.MessageChannel|
                    null);
        disposeInternal(): void;
        /**
         * Registers a service to be called when a message is received.
         * @param serviceName The name of the service.
         * @param callback The callback to process the incoming messages. Passed
         * the payload.
         */
        registerService(
            serviceName: string, callback: (a: GlobalObject) => any): void;
        /**
         * Sends a message over the channel.
         * @param serviceName The name of the service this message should be
         * delivered to.
         * @param payload The value of the message. If this is an Object, it is
         * serialized to a string before sending if necessary.
         * @param callback The callback invoked with the result of the service
         * call.
         */
        send(
            serviceName: string, payload: string|GlobalObject,
            callback: (a: GlobalObject|null) => any): void;
    }
}
declare module 'goog:goog.messaging.RespondingChannel' {
    import alias = ಠ_ಠ.clutz.goog.messaging.RespondingChannel;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog {
    function module(a: string): void;
}
declare module 'goog:goog.module' {
    import alias = ಠ_ಠ.clutz.goog.module;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.module {
    /**
     * An interface that loads JavaScript modules.
     */
    interface AbstractModuleLoader {
        /**
         * Loads a list of JavaScript modules.
         * @param ids The module ids in dependency order.
         * @param moduleInfoMap A mapping from module id to ModuleInfo object.
         * @param opt_successFn The callback if module loading is a success.
         * @param opt_errorFn The callback if module loading is an error.
         * @param opt_timeoutFn The callback if module loading times out.
         * @param opt_forceReload Whether to bypass cache while loading the
         * module.
         */
        loadModules(
            ids: string[]|null,
            moduleInfoMap: {[key: string]: ಠ_ಠ.clutz.goog.module.ModuleInfo},
            opt_successFn?: (() => any)|null,
            opt_errorFn?: ((a: number | null) => any)|null,
            opt_timeoutFn?: (() => any)|null, opt_forceReload?: boolean): void;
        /**
         * Pre-fetches a JavaScript module.
         * @param id The module id.
         * @param moduleInfo The module info.
         */
        prefetchModule(
            id: string, moduleInfo: ಠ_ಠ.clutz.goog.module.ModuleInfo): void;
    }
}
declare module 'goog:goog.module.AbstractModuleLoader' {
    import alias = ಠ_ಠ.clutz.goog.module.AbstractModuleLoader;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.module {
    /**
     * A basic module object that represents a module of Javascript code that
     * can be dynamically loaded.
     */
    class BaseModule extends BaseModule_Instance {}
    class BaseModule_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance {
        /**
         * Performs any load-time initialization that the module requires.
         * @param context The module context.
         */
        initialize(context: GlobalObject|null): void;
    }
}
declare module 'goog:goog.module.BaseModule' {
    import alias = ಠ_ಠ.clutz.goog.module.BaseModule;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.module {
    /**
     * The dynamic loading functionality is defined as a class. The class
     * will be used as singleton. There is, however, a two step
     * initialization procedure because parameters need to be passed to
     * the goog.module.Loader instance.
     */
    class Loader extends Loader_Instance {
        /**
         * The globally exported name of the load callback. Matches the
         * definition in the js_module_binary() BUILD rule.
         */
        static LOAD_CALLBACK: string;
        static getInstance(): ಠ_ಠ.clutz.goog.module.Loader;
        /**
         * Wrapper of init() so that we only need to export this single
         * identifier instead of three. See method goog.module.Loader.init() for
         * explanation of param.
         * @param urlBase The URL of the base library.
         * @param opt_urlFunction Function that creates the URL for the module
         * file. It will be passed the base URL for module files and the module
         * name and should return the fully-formed URL to the module file to
         * load.
         */
        static init(urlBase: string, opt_urlFunction?: (...a: any[]) => any):
            void;
        static instance_: ಠ_ಠ.clutz.goog.module.Loader;
        /**
         * Produces a function that delegates all its arguments to a
         * dynamically loaded function. This is used to export dynamically
         * loaded functions.
         * @param module The module to load from.
         * @param symbol The ID of the symbol to load from the module. This
         * symbol must resolve to a function.
         */
        static loaderCall(module: string, symbol: number|string):
            (...a: any[]) => any;
        /**
         * Wrapper of goog.module.Loader.provide() for use in modules
         * See method goog.module.Loader.provide() for explanation of params.
         * @param module The name of the module. Cf. parameter module of method
         * require().
         * @param opt_symbol The symbol being defined, or nothing when all
         * symbols of the module are defined. Cf. parameter symbol of method
         * require().
         * @param opt_object The object bound to the symbol, or nothing when all
         * symbols of the module are defined.
         */
        static provide(
            module: string, opt_symbol?: number|string,
            opt_object?: GlobalObject|null): void;
        /**
         * Wrapper of goog.module.Loader.require() for use in modules.
         * See method goog.module.Loader.require() for
         * explanation of params.
         * @param module The name of the module. Usually, the value is defined
         * as a constant whose name starts with MOD_.
         * @param symbol The ID of the symbol. Usually, the value is defined as
         * a constant whose name starts with SYM_.
         * @param callback This function will be called with the resolved symbol
         * as the argument once the module is loaded.
         */
        static require(
            module: string, symbol: number|string,
            callback: (...a: any[]) => any): void;
    }
    class Loader_Instance {
        private noStructuralTyping_: any;
        /**
         * Initializes the Loader to be fully functional. Also executes load
         * requests that were received before initialization. Must be called
         * exactly once, with the URL of the base library. Module URLs are
         * derived from the URL of the base library by inserting the module
         * name, preceded by a period, before the .js prefix of the base URL.
         * @param baseUrl The URL of the base library.
         * @param opt_urlFunction Function that creates the URL for the module
         * file. It will be passed the base URL for module files and the module
         * name and should return the fully-formed URL to the module file to
         * load.
         */
        init(baseUrl: string, opt_urlFunction?: (...a: any[]) => any): void;
        /**
         * Registers a symbol in a loaded module. When called without symbol,
         * registers the module to be fully loaded and executes all callbacks
         * from pending require() callbacks for this module.
         * @param module The name of the module. Cf. parameter module of method
         * require().
         * @param opt_symbol The symbol being defined, or nothing when all
         * symbols of the module are defined. Cf. parameter symbol of method
         * require().
         * @param opt_object The object bound to the symbol, or nothing when all
         * symbols of the module are defined.
         */
        provide(
            module: string, opt_symbol?: number|string,
            opt_object?: GlobalObject|null): void;
        /**
         * Requests the loading of a symbol from a module. When the module is
         * loaded, the requested symbol will be passed as argument to the
         * function callback.
         * @param module The name of the module. Usually, the value is defined
         * as a constant whose name starts with MOD_.
         * @param symbol The ID of the symbol. Usually, the value is defined as
         * a constant whose name starts with SYM_.
         * @param callback This function will be called with the resolved symbol
         * as the argument once the module is loaded.
         */
        require(
            module: string, symbol: number|string,
            callback: (...a: any[]) => any): void;
    }
}
declare module 'goog:goog.module.Loader' {
    import alias = ಠ_ಠ.clutz.goog.module.Loader;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.module {
    /**
     * A ModuleInfo object is used by the ModuleManager to hold information
     * about a module of js code that may or may not yet be loaded into the
     * environment.
     */
    class ModuleInfo extends ModuleInfo_Instance {}
    class ModuleInfo_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance {
        /**
         * A ModuleInfo object is used by the ModuleManager to hold information
         * about a module of js code that may or may not yet be loaded into the
         * environment.
         * @param deps Ids of the modules that must be loaded before this one.
         * The ids must be in dependency order (i.e. if the ith module depends
         * on the jth module, then i > j).
         * @param id The module's ID.
         */
        constructor(deps: string[]|null, id: string);
        disposeInternal(): void;
        /**
         * Gets the dependencies of this module.
         */
        getDependencies(): string[]|null;
        /**
         * Gets the ID of this module.
         */
        getId(): string;
        /**
         * Gets the module.
         */
        getModule(): ಠ_ಠ.clutz.goog.module.BaseModule|null;
        /**
         * Gets the uris of this module.
         */
        getUris(): ಠ_ಠ.clutz.goog.html.TrustedResourceUrl[];
        /**
         * Determines whether the module has been loaded.
         */
        isLoaded(): boolean;
        /**
         * Calls the error callbacks for the module.
         * @param cause What caused the error.
         */
        onError(cause: ಠ_ಠ.clutz.goog.module.ModuleManager.FailureType): void;
        /**
         * Sets this module as loaded.
         * @param contextProvider A function that provides the module context.
         */
        onLoad(contextProvider: () => GlobalObject | null): boolean;
        /**
         * Registers a function that should be called after the module is
         * loaded.
         * @param fn A callback function that takes a single argument which is
         * the module context.
         * @param opt_handler Optional handler under whose scope to execute the
         * callback.
         */
        registerCallback(
            fn: (...a: any[]) => any, opt_handler?: GlobalObject|null):
            ಠ_ಠ.clutz.goog.module.ModuleLoadCallback;
        /**
         * Registers a function that should be called after the module is
         * loaded. These early callbacks are called after {@link
         * Module#initialize} is called but before the other callbacks are
         * called.
         * @param fn A callback function that takes a single argument which is
         * the module context.
         * @param opt_handler Optional handler under whose scope to execute the
         * callback.
         */
        registerEarlyCallback(
            fn: (...a: any[]) => any, opt_handler?: GlobalObject|null):
            ಠ_ಠ.clutz.goog.module.ModuleLoadCallback;
        /**
         * Registers a function that should be called if the module load fails.
         * @param fn A callback function that takes a single argument which is
         * the failure type.
         * @param opt_handler Optional handler under whose scope to execute the
         * callback.
         */
        registerErrback(
            fn: (...a: any[]) => any, opt_handler?: GlobalObject|null):
            ಠ_ಠ.clutz.goog.module.ModuleLoadCallback;
        /**
         * Sets the constructor to use to instantiate the module object after
         * the module code is loaded.
         * @param constructor The constructor of a goog.module.BaseModule
         * subclass.
         */
        setModuleConstructor(constructor: (...a: any[]) => any): void;
        /**
         * Sets the uris of this module.
         * @param uris Uris for this module's code.
         */
        setTrustedUris(uris: ಠ_ಠ.clutz.goog.html.TrustedResourceUrl[]): void;
    }
}
declare module 'goog:goog.module.ModuleInfo' {
    import alias = ಠ_ಠ.clutz.goog.module.ModuleInfo;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.module {
    /**
     * Class used to encapsulate the callbacks to be called when a module loads.
     */
    class ModuleLoadCallback extends ModuleLoadCallback_Instance {}
    class ModuleLoadCallback_Instance {
        private noStructuralTyping_: any;
        /**
         * Class used to encapsulate the callbacks to be called when a module
         * loads.
         * @param fn Callback function.
         * @param opt_handler Optional handler under whose scope to execute the
         * callback.
         */
        constructor(fn: (...a: any[]) => any, opt_handler?: GlobalObject|null);
        /**
         * Abort the callback, but not the actual module load.
         */
        abort(): void;
        /**
         * Completes the operation and calls the callback function if
         * appropriate.
         * @param context The module context.
         */
        execute(context: any): void;
    }
}
declare module 'goog:goog.module.ModuleLoadCallback' {
    import alias = ಠ_ಠ.clutz.goog.module.ModuleLoadCallback;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.module {
    /**
     * A class that loads Javascript modules.
     */
    class ModuleLoader extends ModuleLoader_Instance {
        /**
         * Events dispatched by the ModuleLoader.
         */
        static EventType: GlobalObject;
        static supportsSourceUrlDebugger(): boolean;
        static supportsSourceUrlStackTraces(): boolean;
    }
    class ModuleLoader_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance implements
            ಠ_ಠ.clutz.goog.module.AbstractModuleLoader {
        disposeInternal(): void;
        /**
         * Gets the debug mode for the loader.
         */
        getDebugMode(): boolean;
        loadModules(
            ids: string[]|null,
            moduleInfoMap: {[key: string]: ಠ_ಠ.clutz.goog.module.ModuleInfo},
            opt_successFn?: (() => any)|null,
            opt_errorFn?: ((a: number | null) => any)|null,
            opt_timeoutFn?: (() => any)|null, opt_forceReload?: boolean): void;
        /**
         * A logger.
         */
        logger: ಠ_ಠ.clutz.goog.debug.Logger|null;
        prefetchModule(
            id: string, moduleInfo: ಠ_ಠ.clutz.goog.module.ModuleInfo): void;
        /**
         * Sets the debug mode for the loader.
         * @param debugMode Whether the debug mode is enabled.
         */
        setDebugMode(debugMode: boolean): void;
        /**
         * When enabled, we will add a sourceURL comment to the end of all
         * scripts to mark their origin.
         *
         * On WebKit, stack traces will reflect the sourceURL comment, so this
         * is useful for debugging webkit stack traces in production.
         *
         * Notice that in debug mode, we will use source url injection + eval
         * rather then appending script nodes to the DOM, because the scripts
         * will load far faster.  (Appending script nodes is very slow, because
         * we can't parallelize the downloading and evaling of the script).
         *
         * The cost of appending sourceURL information is negligible when
         * compared to the cost of evaling the script. Almost all clients will
         * want this on.
         *
         * TODO(nicksantos): Turn this on by default. We may want to turn this
         * off for clients that inject their own sourceURL.
         * @param enabled Whether source url injection is enabled.
         */
        setSourceUrlInjection(enabled: boolean): void;
    }
}
declare namespace ಠ_ಠ.clutz.goog.module.ModuleLoader {
    class EvaluateCodeEvent extends EvaluateCodeEvent_Instance {}
    class EvaluateCodeEvent_Instance extends
        ಠ_ಠ.clutz.goog.events.Event_Instance {
        constructor(moduleIds: string[]|null);
        moduleIds: string[]|null;
    }
    class LoadStatus extends LoadStatus_Instance {}
    class LoadStatus_Instance {
        private noStructuralTyping_: any;
        /**
         * Error callback.
         */
        errorFn: ((a: number | null) => any)|null;
        /**
         * Whether loadModules was called for the set of modules referred by
         * this status.
         */
        loadRequested: boolean;
        /**
         * The request uris.
         */
        requestUris: string[]|null;
        /**
         * The response texts.
         */
        responseTexts: string[]|null;
        /**
         * Success callback.
         */
        successFn: (() => any)|null;
    }
    class RequestErrorEvent extends RequestErrorEvent_Instance {}
    class RequestErrorEvent_Instance extends
        ಠ_ಠ.clutz.goog.events.Event_Instance {
        constructor(moduleIds: string[]|null, opt_error?: GlobalError);
        error: GlobalError|null;
        moduleIds: string[]|null;
    }
    class RequestSuccessEvent extends RequestSuccessEvent_Instance {}
    class RequestSuccessEvent_Instance extends
        ಠ_ಠ.clutz.goog.events.Event_Instance {
        constructor(moduleIds: string[]|null);
        moduleIds: string[]|null;
    }
}
declare module 'goog:goog.module.ModuleLoader' {
    import alias = ಠ_ಠ.clutz.goog.module.ModuleLoader;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.module {
    /**
     * The ModuleManager keeps track of all modules in the environment.
     * Since modules may not have their code loaded, we must keep track of them.
     */
    class ModuleManager extends ModuleManager_Instance {
        /**
         * A non-HTTP status code indicating a corruption in loaded module.
         * This should be used by a ModuleLoader as a replacement for the HTTP
         * code given to the error handler function to indicated that the module
         * was corrupted. This will set the forceReload flag on the loadModules
         * method when retrying module loading.
         */
        static CORRUPT_RESPONSE_STATUS_CODE: number;
        static getInstance(): ಠ_ಠ.clutz.goog.module.ModuleManager;
        static instance_: ಠ_ಠ.clutz.goog.module.ModuleManager;
    }
    class ModuleManager_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance {
        /**
         * Method called just after module code is loaded
         * @param id Identifier of the module.
         */
        afterLoadModuleCode(id: string): void;
        /**
         * Method called just before a module code is loaded.
         * @param id Identifier of the module.
         */
        beforeLoadModuleCode(id: string): void;
        disposeInternal(): void;
        /**
         * Requests that a function be called once a particular module is
         * loaded. Client code can use this method to safely call into modules
         * that may not yet be loaded. For consistency, this method always calls
         * the function asynchronously -- even if the module is already loaded.
         * Initiates loading of the module if necessary, unless opt_noLoad is
         * true.
         * @param moduleId A module id.
         * @param fn Function to execute when the module has loaded.
         * @param opt_handler Optional handler under whose scope to execute the
         * callback.
         * @param opt_noLoad TRUE iff not to initiate loading of the module.
         * @param opt_userInitiated TRUE iff the loading of the module was user
         * initiated.
         * @param opt_preferSynchronous TRUE iff the function should be executed
         * synchronously if the module has already been loaded.
         */
        execOnLoad(
            moduleId: string, fn: (...a: any[]) => any,
            opt_handler?: GlobalObject|null, opt_noLoad?: boolean,
            opt_userInitiated?: boolean, opt_preferSynchronous?: boolean):
            ಠ_ಠ.clutz.goog.module.ModuleLoadCallback;
        /**
         * Gets the application-specific module loader.
         */
        getLoader(): ಠ_ಠ.clutz.goog.module.AbstractModuleLoader|null;
        /**
         * Gets the module context to use to initialize the module.
         */
        getModuleContext(): GlobalObject|null;
        /**
         * Gets a module info object by id.
         * @param id A module identifier.
         */
        getModuleInfo(id: string): ಠ_ಠ.clutz.goog.module.ModuleInfo;
        /**
         * Determines if the ModuleManager is active
         */
        isActive(): boolean;
        /**
         * Gets whether a module is currently loading or in the queue, waiting
         * to be loaded.
         * @param id A module id.
         */
        isModuleLoading(id: string): boolean;
        /**
         * Determines if the ModuleManager is user active
         */
        isUserActive(): boolean;
        /**
         * Loads a module, returning a goog.async.Deferred for keeping track of
         * the result.
         * @param moduleId A module id.
         * @param opt_userInitiated If the load is a result of a user action.
         */
        load(moduleId: string, opt_userInitiated?: boolean):
            ಠ_ಠ.clutz.goog.async.Deferred<any>|null;
        /**
         * Loads a list of modules, returning a goog.async.Deferred for keeping
         * track of the result.
         * @param moduleIds A list of module ids.
         * @param opt_userInitiated If the load is a result of a user action.
         */
        loadMultiple(moduleIds: string[]|null, opt_userInitiated?: boolean):
            {[key: string]: ಠ_ಠ.clutz.goog.async.Deferred<any>};
        /**
         * Prefetches a JavaScript module and its dependencies, which means that
         * the module will be downloaded, but not evaluated. To complete the
         * module load, the caller should also call load or execOnLoad after
         * prefetching the module.
         * @param id The id of the module to prefetch.
         */
        prefetchModule(id: string): void;
        /**
         * Preloads a module after a short delay.
         * @param id The id of the module to preload.
         * @param opt_timeout The number of ms to wait before adding the module
         * id to the loading queue (defaults to 0 ms). Note that the module will
         * be loaded asynchronously regardless of the value of this parameter.
         */
        preloadModule(id: string, opt_timeout?: number):
            ಠ_ಠ.clutz.goog.async.Deferred<any>;
        /**
         * The function to call if the module manager is in error.
         * @param types The callback type.
         * @param fn The function to register as a callback.
         */
        registerCallback(
            types: ಠ_ಠ.clutz.goog.module.ModuleManager.CallbackType|
            ಠ_ಠ.clutz.goog.module.ModuleManager.CallbackType[]|null,
            fn: (...a: any[]) => any): void;
        /**
         * Register an initialization callback for the currently loading module.
         * This should only be called by script that is executed during the
         * evaluation of a module's javascript. This is almost equivalent to
         * calling the function inline, but ensures that all the code from the
         * currently loading module has been loaded. This makes it cleaner and
         * more robust than calling the function inline.
         *
         * If this function is called from the base module (the one that
         * contains the module manager code), the callback is held until
         * #setAllModuleInfo is called, or until #setModuleContext is called,
         * whichever happens first.
         * @param fn A callback function that takes a single argument which is
         * the module context.
         * @param opt_handler Optional handler under whose scope to execute the
         * callback.
         */
        registerInitializationCallback(
            fn: (...a: any[]) => any, opt_handler?: GlobalObject|null): void;
        /**
         * Register a late initialization callback for the currently loading
         * module. Callbacks registered via this function are executed similar
         * to
         * {@see registerInitializationCallback}, but they are fired after all
         * initialization callbacks are called.
         * @param fn A callback function that takes a single argument which is
         * the module context.
         * @param opt_handler Optional handler under whose scope to execute the
         * callback.
         */
        registerLateInitializationCallback(
            fn: (...a: any[]) => any, opt_handler?: GlobalObject|null): void;
        /**
         * Sets the module info for all modules. Should only be called once.
         * @param infoMap An object that contains a mapping from module id
         * (String) to list of required module ids (Array).
         */
        setAllModuleInfo(
            infoMap:
                {[/* warning: coerced from ? */ key: string]: string[] | null}|
            null): void;
        /**
         * Sets the module info for all modules. Should only be called once.
         * Also marks modules that are currently being loaded.
         * @param opt_info A string representation of the module dependency
         * graph, in the form: module1:dep1,dep2/module2:dep1,dep2 etc. Where
         * depX is the base-36 encoded position of the dep in the module list.
         * @param opt_loadingModuleIds A list of moduleIds that are currently
         * being loaded.
         */
        setAllModuleInfoString(
            opt_info?: string, opt_loadingModuleIds?: string[]|null): void;
        /**
         * Sets the batch mode as enabled or disabled for the module manager.
         * @param enabled Whether the batch mode is to be enabled or not.
         */
        setBatchModeEnabled(enabled: boolean): void;
        /**
         * Sets the concurrent loading mode as enabled or disabled for the
         * module manager. Requires a moduleloader implementation that supports
         * concurrent
         * loads. The default {@see goog.module.ModuleLoader} does not.
         */
        setConcurrentLoadingEnabled(enabled: boolean): void;
        /**
         * Records that a module was loaded. Also initiates loading the next
         * module if any module requests are queued. This method is called by
         * code that is generated and appended to each dynamic module's code at
         * compilation time.
         * @param id A module id.
         */
        setLoaded(id: string): void;
        /**
         * Sets the application-specific module loader.
         * @param loader An object that has a loadModules(ids, moduleInfoMap,
         * opt_successFn, opt_errFn, opt_timeoutFn, opt_forceReload) method.
         */
        setLoader(loader: ಠ_ಠ.clutz.goog.module.AbstractModuleLoader|
                  null): void;
        /**
         * Sets the constructor to use for the module object for the currently
         * loading module. The constructor should derive from
         * {@see goog.module.BaseModule}.
         * @param fn The constructor function.
         */
        setModuleConstructor(fn: (...a: any[]) => any): void;
        /**
         * Sets the module context to use to initialize the module.
         * @param context The context.
         */
        setModuleContext(context: GlobalObject|null): void;
        /**
         * Sets the module uris.
         * @param moduleUriMap The map of id/uris pairs for each module.
         */
        setModuleTrustedUris(
            moduleUriMap:
                {[key: string]: ಠ_ಠ.clutz.goog.html.TrustedResourceUrl[]}):
            void;
    }
}
declare module 'goog:goog.module.ModuleManager' {
    import alias = ಠ_ಠ.clutz.goog.module.ModuleManager;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.module.ModuleManager {
    /**
     * The type of callbacks that can be registered with the module manager,.
     */
    type CallbackType = string&{clutzEnumBrand: never};
    var CallbackType: {
        ACTIVE: CallbackType,
        ERROR: CallbackType,
        IDLE: CallbackType,
        USER_ACTIVE: CallbackType,
        USER_IDLE: CallbackType,
    };
}
declare module 'goog:goog.module.ModuleManager.CallbackType' {
    import alias = ಠ_ಠ.clutz.goog.module.ModuleManager.CallbackType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.module.ModuleManager {
    /**
     * The possible reasons for a module load failure callback being fired.
     */
    enum FailureType {
        CONSECUTIVE_FAILURES,
        INIT_ERROR,
        OLD_CODE_GONE,
        TIMEOUT,
        UNAUTHORIZED,
    }
}
declare module 'goog:goog.module.ModuleManager.FailureType' {
    import alias = ಠ_ಠ.clutz.goog.module.ModuleManager.FailureType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
    /**
     * Encapsulates the logic for a single BrowserChannel.
     */
    class BrowserChannel extends BrowserChannel_Instance {
        /**
         * Maximum number of attempts to connect to the server for back channel
         * requests.
         */
        static BACK_CHANNEL_MAX_RETRIES: number;
        /**
         * The timeout in milliseconds for a forward channel request.
         */
        static FORWARD_CHANNEL_RETRY_TIMEOUT: number;
        /**
         * When retrying for an inactive channel, we will multiply the total
         * delay by this number.
         */
        static INACTIVE_CHANNEL_RETRY_FACTOR: number;
        /**
         * The latest protocol version that this class supports. We request this
         * version from the server when opening the connection. Should match
         * com.google.net.browserchannel.BrowserChannel.LATEST_CHANNEL_VERSION.
         */
        static LATEST_CHANNEL_VERSION: number;
        /**
         * A guess at a cutoff at which to no longer assume the backchannel is
         * dead when we are slow to receive data. Number in bytes.
         *
         * Assumption: The worst bandwidth we work on is 50 kilobits/sec
         * 50kbits/sec * (1 byte / 8 bits) * 6 sec dead backchannel timeout
         */
        static OUTSTANDING_DATA_BACKCHANNEL_RETRY_CUTOFF: number;
        /**
         * A number in MS of how long we guess the maxmium amount of time a
         * round trip to the server should take. In the future this could be
         * substituted with a real measurement of the RTT.
         */
        static RTT_ESTIMATE: number;
        /**
         * Instantiates a ChannelRequest with the given parameters. Overidden in
         * tests.
         * @param channel The BrowserChannel that owns this request.
         * @param channelDebug A ChannelDebug to use for logging.
         * @param opt_sessionId The session id for the channel.
         * @param opt_requestId The request id for this request.
         * @param opt_retryId The retry id for this request.
         */
        static createChannelRequest(
            channel: ಠ_ಠ.clutz.goog.net.BrowserChannel|null|
            ಠ_ಠ.clutz.goog.net.BrowserTestChannel,
            channelDebug: ಠ_ಠ.clutz.goog.net.ChannelDebug|null,
            opt_sessionId?: string, opt_requestId?: string|number,
            opt_retryId?: number): ಠ_ಠ.clutz.goog.net.ChannelRequest;
        /**
         * Returns the singleton event target for stat events.
         */
        static getStatEventTarget(): ಠ_ಠ.clutz.goog.events.EventTarget|null;
        /**
         * Helper function to call the stat event callback.
         * @param stat The stat.
         */
        static notifyStatEvent(stat: ಠ_ಠ.clutz.goog.net.BrowserChannel.Stat):
            void;
        /**
         * Helper function to notify listeners about POST request performance.
         * @param size Number of characters in the POST data.
         * @param rtt The amount of time from POST start to response.
         * @param retries The number of times the POST had to be retried.
         */
        static notifyTimingEvent(size: number, rtt: number, retries: number):
            void;
        /**
         * Helper function to call the end hook
         */
        static onEndExecution(): void;
        /**
         * Helper function to call the start hook
         */
        static onStartExecution(): void;
        /**
         * Allows the application to set an execution hooks for when
         * BrowserChannel stops processing requests. This is useful to track
         * timing or logging special information. The function takes no
         * parameters and return void.
         * @param endHook The function for the end hook.
         */
        static setEndThreadExecutionHook(endHook: (...a: any[]) => any): void;
        /**
         * Allows the application to set an execution hooks for when
         * BrowserChannel starts processing requests. This is useful to track
         * timing or logging special information. The function takes no
         * parameters and return void.
         * @param startHook The function for the start hook.
         */
        static setStartThreadExecutionHook(startHook: (...a: any[]) => any):
            void;
        /**
         * Wrapper around SafeTimeout which calls the start and end execution
         * hooks with a try...finally block.
         * @param fn The callback function.
         * @param ms The time in MS for the timer.
         */
        static setTimeout(fn: (...a: any[]) => any, ms: number): number;
    }
    class BrowserChannel_Instance {
        private noStructuralTyping_: any;
        /**
         * Encapsulates the logic for a single BrowserChannel.
         * @param opt_clientVersion An application-specific version number that
         * is sent to the server when connected.
         * @param opt_firstTestResults Previously determined results of the
         * first browser channel test.
         * @param opt_secondTestResults Previously determined results of the
         * second browser channel test.
         * @param opt_asyncTest Whether to perform the test requests
         * asynchronously. While the test is performed, we'll assume the worst
         * (connection is buffered), in order to avoid delaying the connection
         * until the test is performed.
         */
        constructor(
            opt_clientVersion?: string, opt_firstTestResults?: string[]|null,
            opt_secondTestResults?: boolean, opt_asyncTest?: boolean);
        allowChunkedMode_: boolean;
        allowHostPrefix_: boolean;
        /**
         * Starts the channel. This initiates connections to the server.
         * @param testPath The path for the test connection.
         * @param channelPath The path for the channel connection.
         * @param opt_extraParams Extra parameter keys and values to add to the
         * requests.
         * @param opt_oldSessionId Session ID from a previous session.
         * @param opt_oldArrayId The last array ID from a previous session.
         */
        connect(
            testPath: string, channelPath: string,
            opt_extraParams?: GlobalObject|null, opt_oldSessionId?: string,
            opt_oldArrayId?: number): void;
        /**
         * Decides which host prefix should be used, if any.  If there is a
         * handler, allows the handler to validate a host prefix provided by the
         * server, and optionally override it.
         * @param serverHostPrefix The host prefix provided by the server.
         */
        correctHostPrefix(serverHostPrefix: string|null): string|null;
        /**
         * Creates a data Uri applying logic for secondary hostprefix, port
         * overrides, and versioning.
         * @param hostPrefix The host prefix.
         * @param path The path on the host (may be absolute or relative).
         * @param opt_overridePort Optional override port.
         */
        createDataUri(
            hostPrefix: string|null, path: string,
            opt_overridePort?: number): ಠ_ಠ.clutz.goog.Uri;
        /**
         * Called when BC needs to create an XhrIo object.  Override in a
         * subclass if you need to customize the behavior, for example to enable
         * the creation of XHR's capable of calling a secondary domain. Will
         * also allow calling a secondary domain if withCredentials (CORS) is
         * enabled.
         * @param hostPrefix The host prefix, if we need an XhrIo object capable
         * of calling a secondary domain.
         */
        createXhrIo(hostPrefix: string|null): ಠ_ಠ.clutz.goog.net.XhrIo;
        /**
         * Disconnects and closes the channel.
         */
        disconnect(): void;
        /**
         * Returns whether chunked mode is allowed. In certain debugging
         * situations, it's useful for the application to have a way to disable
         * chunked mode for a user.
         */
        getAllowChunkedMode(): boolean;
        /**
         * Returns whether the channel allows the use of a subdomain. There may
         * be cases where this isn't allowed.
         */
        getAllowHostPrefix(): boolean;
        getBackChannelMaxRetries(): number;
        /**
         * Gets the Uri used for the connection that receives data from the
         * server.
         * @param hostPrefix The host prefix.
         * @param path The path on the host.
         */
        getBackChannelUri(hostPrefix: string|null, path: string):
            ಠ_ಠ.clutz.goog.Uri;
        /**
         * Returns the browserchannel logger.
         */
        getChannelDebug(): ಠ_ಠ.clutz.goog.net.ChannelDebug;
        /**
         * Returns the extra HTTP headers to add to all the requests sent to the
         * server.
         */
        getExtraHeaders(): GlobalObject|null;
        /**
         * Gets the results for the first browser channel test
         */
        getFirstTestResults(): string[]|null;
        getForwardChannelMaxRetries(): number;
        /**
         * Gets the Uri used for the connection that sends data to the server.
         * @param path The path on the host.
         */
        getForwardChannelUri(path: string): ಠ_ಠ.clutz.goog.Uri;
        /**
         * Returns the handler used for channel callback events.
         */
        getHandler(): ಠ_ಠ.clutz.goog.net.BrowserChannel.Handler|null;
        getLastArrayId(): number;
        /**
         * Return the last status code received for a request.
         */
        getLastStatusCode(): number;
        /**
         * Gets the results for the second browser channel test
         */
        getSecondTestResults(): boolean|null;
        /**
         * Returns the session id of the channel. Only available after the
         * channel has been opened.
         */
        getSessionId(): string;
        /**
         * Returns the browser channel state.
         */
        getState(): ಠ_ಠ.clutz.goog.net.BrowserChannel.State;
        /**
         * Returns whether there are outstanding requests servicing the channel.
         */
        hasOutstandingRequests(): boolean;
        /**
         * Gets whether this channel is currently active. This is used to
         * determine the length of time to wait before retrying. This call
         * delegates to the handler.
         */
        isActive(): boolean;
        /**
         * Returns whether the channel is buffered or not. This state is valid
         * for querying only after the test connection has completed. This may
         * be queried in the goog.net.BrowserChannel.okToMakeRequest() callback.
         * A channel may be buffered if the test connection determines that
         * a chunked response could not be sent down within a suitable time.
         */
        isBuffered(): boolean;
        /**
         * Returns whether the channel is closed
         */
        isClosed(): boolean;
        /**
         * Notify the channel that a particular fine grained network event has
         * occurred. Should be considered package-private.
         * @param reachabilityType The reachability event type.
         */
        notifyServerReachabilityEvent(
            reachabilityType:
                ಠ_ಠ.clutz.goog.net.BrowserChannel.ServerReachability): void;
        /**
         * Callback from ChannelRequest that indicates a request has completed.
         * @param request The request object.
         */
        onRequestComplete(request: ಠ_ಠ.clutz.goog.net.ChannelRequest|
                          null): void;
        /**
         * Callback from ChannelRequest for when new data is received
         * @param request The request object.
         * @param responseText The text of the response.
         */
        onRequestData(
            request: ಠ_ಠ.clutz.goog.net.ChannelRequest|null,
            responseText: string): void;
        /**
         * Sends a request to the server. The format of the request is a Map
         * data structure of key/value pairs. These maps are then encoded in a
         * format suitable for the wire and then reconstituted as a Map data
         * structure that the server can process.
         * @param map The map to send.
         * @param opt_context The context associated with the map.
         */
        sendMap(map: GlobalObject|null, opt_context?: GlobalObject|null): void;
        /**
         * Sets whether chunked mode is allowed. In certain debugging
         * situations, it's useful for the application to have a way to disable
         * chunked mode for a user.
         * @param allowChunkedMode Whether chunked mode is allowed.
         */
        setAllowChunkedMode(allowChunkedMode: boolean): void;
        /**
         * Sets whether the channel allows the use of a subdomain. There may be
         * cases where this isn't allowed, for example, logging in with
         * troutboard where using a subdomain causes Apache to force the user to
         * authenticate twice.
         * @param allowHostPrefix Whether a host prefix is allowed.
         */
        setAllowHostPrefix(allowHostPrefix: boolean): void;
        /**
         * Set the browserchannel logger.
         * TODO(user): Add interface for channel loggers or remove this
         * function.
         * @param channelDebug The channel debug object.
         */
        setChannelDebug(channelDebug: ಠ_ಠ.clutz.goog.net.ChannelDebug|
                        null): void;
        /**
         * Sets extra HTTP headers to add to all the requests sent to the
         * server.
         * @param extraHeaders The HTTP headers, or null.
         */
        setExtraHeaders(extraHeaders: GlobalObject|null): void;
        /**
         * When set to true, this changes the behavior of the forward channel so
         * it will not retry requests; it will fail after one network failure,
         * and if there was already one network failure, the request will fail
         * immediately.
         * @param failFast Whether or not to fail fast.
         */
        setFailFast(failFast: boolean): void;
        /**
         * Sets the maximum number of attempts to connect to the server for
         * forward channel requests.
         * @param retries The maximum number of attempts.
         */
        setForwardChannelMaxRetries(retries: number): void;
        /**
         * Sets the timeout for a forward channel request.
         * @param timeoutMs The timeout in milliseconds.
         */
        setForwardChannelRequestTimeout(timeoutMs: number): void;
        /**
         * Sets the handler used for channel callback events.
         * @param handler The handler to set.
         */
        setHandler(handler: ಠ_ಠ.clutz.goog.net.BrowserChannel.Handler|
                   null): void;
        /**
         * Sets a new parser for the response payload.
         * @param parser Parser.
         */
        setParser(parser: ಠ_ಠ.clutz.goog.string.Parser): void;
        /**
         * Sets the throttle for handling onreadystatechange events for the
         * request.
         * @param throttle The throttle in ms.  A value of zero indicates no
         * throttle.
         */
        setReadyStateChangeThrottle(throttle: number): void;
        setRetryDelay(baseDelayMs: number, delaySeedMs: number): void;
        /**
         * Sets whether cross origin requests are supported for the browser
         * channel.
         *
         * Setting this allows the creation of requests to secondary domains and
         * sends XHRs with the CORS withCredentials bit set to true.
         *
         * In order for cross-origin requests to work, the server will also need
         * to set CORS response headers as per:
         * https://developer.mozilla.org/en-US/docs/HTTP_access_control
         *
         * See {@link goog.net.XhrIo#setWithCredentials}.
         * @param supportCrossDomain Whether cross domain XHRs are supported.
         */
        setSupportsCrossDomainXhrs(supportCrossDomain: boolean): void;
        /**
         * Determines whether to use a secondary domain when the server gives us
         * a host prefix. This allows us to work around browser per-domain
         * connection limits.
         *
         * Currently, we  use secondary domains when using Trident's
         * ActiveXObject, because it supports cross-domain requests out of the
         * box.  Note that in IE10 we no longer use ActiveX since it's not
         * supported in Metro mode and IE10 supports XHR streaming.
         *
         * If you need to use secondary domains on other browsers and IE10,
         * you have two choices:
         * 1) If you only care about browsers that support CORS
         * (https://developer.mozilla.org/en-US/docs/HTTP_access_control), you
         * can use {@link #setSupportsCrossDomainXhrs} and set the appropriate
         * CORS response headers on the server.
         * 2) Or, override this method in a subclass, and make sure that those
         * browsers use some messaging mechanism that works cross-domain (e.g
         * iframes and window.postMessage).
         */
        shouldUseSecondaryDomains(): boolean;
        /**
         * Callback from BrowserTestChannel for when the channel is blocked.
         * @param testChannel The BrowserTestChannel.
         */
        testConnectionBlocked(testChannel:
                                  ಠ_ಠ.clutz.goog.net.BrowserTestChannel|
                              null): void;
        /**
         * Callback from BrowserTestChannel for when the channel has an error.
         * @param testChannel The BrowserTestChannel.
         * @param errorCode The error code of the failure.
         */
        testConnectionFailure(
            testChannel: ಠ_ಠ.clutz.goog.net.BrowserTestChannel|null,
            errorCode: ಠ_ಠ.clutz.goog.net.ChannelRequest.Error): void;
        /**
         * Callback from BrowserTestChannel for when the channel is finished.
         * @param testChannel The BrowserTestChannel.
         * @param useChunked Whether we can chunk responses.
         */
        testConnectionFinished(
            testChannel: ಠ_ಠ.clutz.goog.net.BrowserTestChannel|null,
            useChunked: boolean): void;
    }
}
declare module 'goog:goog.net.BrowserChannel' {
    import alias = ಠ_ಠ.clutz.goog.net.BrowserChannel;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.BrowserChannel {
    /**
     * Enum type for identifying a BrowserChannel error.
     */
    enum Error {
        ACTIVE_X_BLOCKED,
        BAD_DATA,
        BAD_RESPONSE,
        BLOCKED,
        LOGGED_OUT,
        NETWORK,
        NO_DATA,
        OK,
        REQUEST_FAILED,
        STOP,
        UNKNOWN_SESSION_ID,
    }
}
declare module 'goog:goog.net.BrowserChannel.Error' {
    import alias = ಠ_ಠ.clutz.goog.net.BrowserChannel.Error;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.BrowserChannel.Event {
    var /**
         * The type of event that occurs every time some information about how
         * reachable the server is is discovered.
         */
            SERVER_REACHABILITY_EVENT: string;
    var /**
         * Stat Event that fires when things of interest happen that may be
         * useful for applications to know about for stats or debugging
         * purposes. This event fires on the EventTarget returned by
         * getStatEventTarget.
         */
            STAT_EVENT: string;
    var /**
         * An event that fires when POST requests complete successfully,
         * indicating the size of the POST and the round trip time. This event
         * fires on the EventTarget returned by getStatEventTarget.
         */
            TIMING_EVENT: string;
}
declare module 'goog:goog.net.BrowserChannel.Event' {
    import alias = ಠ_ಠ.clutz.goog.net.BrowserChannel.Event;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.BrowserChannel {
    /**
     * Abstract base class for the browser channel handler
     */
    class Handler extends Handler_Instance {}
    class Handler_Instance {
        private noStructuralTyping_: any;
        /**
         * Called by the channel if enumeration of the map throws an exception.
         * @param browserChannel The browser channel.
         * @param map The map that can't be enumerated.
         */
        badMapError(
            browserChannel: ಠ_ಠ.clutz.goog.net.BrowserChannel|null,
            map: GlobalObject|null): void;
        /**
         * Indicates the BrowserChannel is closed. Also notifies about which
         * maps, if any, that may not have been delivered to the server.
         * @param browserChannel The browser channel.
         * @param opt_pendingMaps The array of pending maps, which may or may
         * not have been delivered to the server.
         * @param opt_undeliveredMaps The array of undelivered maps, which have
         * definitely not been delivered to the server.
         */
        channelClosed(
            browserChannel: ಠ_ಠ.clutz.goog.net.BrowserChannel|null,
            opt_pendingMaps?:
                (ಠ_ಠ.clutz.goog.net.BrowserChannel.QueuedMap|null)[]|null,
            opt_undeliveredMaps?: (ಠ_ಠ.clutz.goog.net.BrowserChannel.QueuedMap|
                                   null)[]|null): void;
        /**
         * Indicates an error occurred on the BrowserChannel.
         * @param browserChannel The browser channel.
         * @param error The error code.
         */
        channelError(
            browserChannel: ಠ_ಠ.clutz.goog.net.BrowserChannel|null,
            error: ಠ_ಠ.clutz.goog.net.BrowserChannel.Error): void;
        /**
         * New input is available for the application to process.
         * @param browserChannel The browser channel.
         * @param array The data array.
         */
        channelHandleArray(
            browserChannel: ಠ_ಠ.clutz.goog.net.BrowserChannel|null,
            array: any[]|null): void;
        /**
         * Callback handler for when a batch of response arrays is received from
         * the server.
         */
        channelHandleMultipleArrays:
            ((a: ಠ_ಠ.clutz.goog.net.BrowserChannel, b: any[][]) => any)|null;
        /**
         * Indicates the BrowserChannel has successfully negotiated with the
         * server and can now send and receive data.
         * @param browserChannel The browser channel.
         */
        channelOpened(browserChannel: ಠ_ಠ.clutz.goog.net.BrowserChannel|
                      null): void;
        /**
         * Indicates maps were successfully sent on the BrowserChannel.
         * @param browserChannel The browser channel.
         * @param deliveredMaps The array of maps that have been delivered to
         * the server. This is a direct reference to the internal BrowserChannel
         * array, so a copy should be made if the caller desires a reference to
         * the data.
         */
        channelSuccess(
            browserChannel: ಠ_ಠ.clutz.goog.net.BrowserChannel|null,
            deliveredMaps: (ಠ_ಠ.clutz.goog.net.BrowserChannel.QueuedMap|null)[]|
            null): void;
        /**
         * Allows the handler to override a host prefix provided by the server.
         * Will be called whenever the channel has received such a prefix and is
         * considering its use.
         * @param serverHostPrefix The host prefix provided by the server.
         */
        correctHostPrefix(serverHostPrefix: string|null): string|null;
        /**
         * Gets any parameters that should be added at the time another
         * connection is made to the server.
         * @param browserChannel The browser channel.
         */
        getAdditionalParams(browserChannel: ಠ_ಠ.clutz.goog.net.BrowserChannel|
                            null): GlobalObject;
        /**
         * Gets the URI of an image that can be used to test network
         * connectivity.
         * @param browserChannel The browser channel.
         */
        getNetworkTestImageUri(browserChannel:
                                   ಠ_ಠ.clutz.goog.net.BrowserChannel|
                               null): ಠ_ಠ.clutz.goog.Uri|null;
        /**
         * Gets whether this channel is currently active. This is used to
         * determine the length of time to wait before retrying.
         * @param browserChannel The browser channel.
         */
        isActive(browserChannel: ಠ_ಠ.clutz.goog.net.BrowserChannel|
                 null): boolean;
        /**
         * Whether it's okay to make a request to the server. A handler can
         * return false if the channel should fail. For example, if the user has
         * logged out, the handler may want all requests to fail immediately.
         * @param browserChannel The browser channel.
         */
        okToMakeRequest(browserChannel: ಠ_ಠ.clutz.goog.net.BrowserChannel|
                        null): ಠ_ಠ.clutz.goog.net.BrowserChannel.Error;
    }
}
declare module 'goog:goog.net.BrowserChannel.Handler' {
    import alias = ಠ_ಠ.clutz.goog.net.BrowserChannel.Handler;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.BrowserChannel.LogSaver {
    /**
     * Adds a log record.
     * @param logRecord the LogRecord.
     */
    function addLogRecord(logRecord: ಠ_ಠ.clutz.goog.debug.LogRecord|null): void;
    /**
     * Clears the buffer
     */
    function clearBuffer(): void;
    /**
     * Returns the log as a single string.
     */
    function getBuffer(): string;
    /**
     * Returns whether the LogSaver is enabled.
     */
    function isEnabled(): boolean;
    /**
     * Enables of disables the LogSaver.
     * @param enable Whether to enable or disable saving.
     */
    function setEnabled(enable: boolean): void;
}
declare module 'goog:goog.net.BrowserChannel.LogSaver' {
    import alias = ಠ_ಠ.clutz.goog.net.BrowserChannel.LogSaver;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.BrowserChannel {
    /**
     * Simple container class for a (mapId, map) pair.
     */
    class QueuedMap extends QueuedMap_Instance {}
    class QueuedMap_Instance {
        private noStructuralTyping_: any;
        /**
         * Simple container class for a (mapId, map) pair.
         * @param mapId The id for this map.
         * @param map The map itself.
         * @param opt_context The context associated with the map.
         */
        constructor(
            mapId: number, map: GlobalObject|null,
            opt_context?: GlobalObject|null);
        /**
         * The context for the map.
         */
        context: GlobalObject|null;
        /**
         * The map itself.
         */
        map: GlobalObject|null;
        /**
         * The id for this map.
         */
        mapId: number;
    }
}
declare module 'goog:goog.net.BrowserChannel.QueuedMap' {
    import alias = ಠ_ಠ.clutz.goog.net.BrowserChannel.QueuedMap;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.BrowserChannel {
    /**
     * Types of events which reveal information about the reachability of the
     * server.
     */
    enum ServerReachability {
        BACK_CHANNEL_ACTIVITY,
        REQUEST_FAILED,
        REQUEST_MADE,
        REQUEST_SUCCEEDED,
    }
}
declare module 'goog:goog.net.BrowserChannel.ServerReachability' {
    import alias = ಠ_ಠ.clutz.goog.net.BrowserChannel.ServerReachability;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.BrowserChannel {
    /**
     * Event class for goog.net.BrowserChannel.Event.SERVER_REACHABILITY_EVENT.
     */
    class ServerReachabilityEvent extends ServerReachabilityEvent_Instance {}
    class ServerReachabilityEvent_Instance extends
        ಠ_ಠ.clutz.goog.events.Event_Instance {
        /**
         * Event class for
         * goog.net.BrowserChannel.Event.SERVER_REACHABILITY_EVENT.
         * @param target The stat event target for the browser channel.
         * @param reachabilityType The reachability event type.
         */
        constructor(
            target: ಠ_ಠ.clutz.goog.events.EventTarget|null,
            reachabilityType:
                ಠ_ಠ.clutz.goog.net.BrowserChannel.ServerReachability);
        reachabilityType: ಠ_ಠ.clutz.goog.net.BrowserChannel.ServerReachability;
    }
}
declare module 'goog:goog.net.BrowserChannel.ServerReachabilityEvent' {
    import alias = ಠ_ಠ.clutz.goog.net.BrowserChannel.ServerReachabilityEvent;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.BrowserChannel {
    /**
     * Enum that identifies events for statistics that are interesting to track.
     * TODO(user) - Change name not to use Event or use EventTarget
     */
    enum Stat {
        ACTIVE_X_BLOCKED,
        BACKCHANNEL_DEAD,
        BACKCHANNEL_MISSING,
        BROWSER_OFFLINE,
        CHANNEL_BLOCKED,
        CONNECT_ATTEMPT,
        ERROR_NETWORK,
        ERROR_OTHER,
        NOPROXY,
        PROXY,
        REQUEST_BAD_DATA,
        REQUEST_BAD_STATUS,
        REQUEST_INCOMPLETE_DATA,
        REQUEST_NO_DATA,
        REQUEST_TIMEOUT,
        REQUEST_UNKNOWN_SESSION_ID,
        TEST_STAGE_ONE_FAILED,
        TEST_STAGE_ONE_START,
        TEST_STAGE_TWO_DATA_BOTH,
        TEST_STAGE_TWO_DATA_ONE,
        TEST_STAGE_TWO_DATA_TWO,
        TEST_STAGE_TWO_FAILED,
        TEST_STAGE_TWO_START,
    }
}
declare module 'goog:goog.net.BrowserChannel.Stat' {
    import alias = ಠ_ಠ.clutz.goog.net.BrowserChannel.Stat;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.BrowserChannel {
    /**
     * Event class for goog.net.BrowserChannel.Event.STAT_EVENT
     */
    class StatEvent extends StatEvent_Instance {}
    class StatEvent_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
        /**
         * Event class for goog.net.BrowserChannel.Event.STAT_EVENT
         * @param eventTarget The stat event target for the browser channel.
         * @param stat The stat.
         */
        constructor(
            eventTarget: ಠ_ಠ.clutz.goog.events.EventTarget|null,
            stat: ಠ_ಠ.clutz.goog.net.BrowserChannel.Stat);
        /**
         * The stat
         */
        stat: ಠ_ಠ.clutz.goog.net.BrowserChannel.Stat;
    }
}
declare module 'goog:goog.net.BrowserChannel.StatEvent' {
    import alias = ಠ_ಠ.clutz.goog.net.BrowserChannel.StatEvent;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.BrowserChannel {
    /**
     * Enum type for the browser channel state machine.
     */
    enum State {
        CLOSED,
        INIT,
        OPENED,
        OPENING,
    }
}
declare module 'goog:goog.net.BrowserChannel.State' {
    import alias = ಠ_ಠ.clutz.goog.net.BrowserChannel.State;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.BrowserChannel {
    /**
     * Event class for goog.net.BrowserChannel.Event.TIMING_EVENT
     */
    class TimingEvent extends TimingEvent_Instance {}
    class TimingEvent_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
        /**
         * Event class for goog.net.BrowserChannel.Event.TIMING_EVENT
         * @param target The stat event target for the browser channel.
         * @param size The number of characters in the POST data.
         * @param rtt The total round trip time from POST to response in MS.
         * @param retries The number of times the POST had to be retried.
         */
        constructor(
            target: ಠ_ಠ.clutz.goog.events.EventTarget|null, size: number,
            rtt: number, retries: number);
        retries: number;
        rtt: number;
        size: number;
    }
}
declare module 'goog:goog.net.BrowserChannel.TimingEvent' {
    import alias = ಠ_ಠ.clutz.goog.net.BrowserChannel.TimingEvent;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
    /**
     * Encapsulates the logic for a single BrowserTestChannel.
     */
    class BrowserTestChannel extends BrowserTestChannel_Instance {}
    class BrowserTestChannel_Instance {
        private noStructuralTyping_: any;
        /**
         * Encapsulates the logic for a single BrowserTestChannel.
         * @param channel The BrowserChannel that owns this test channel.
         * @param channelDebug A ChannelDebug to use for logging.
         */
        constructor(
            channel: ಠ_ಠ.clutz.goog.net.BrowserChannel|null,
            channelDebug: ಠ_ಠ.clutz.goog.net.ChannelDebug|null);
        /**
         * Aborts the test channel.
         */
        abort(): void;
        /**
         * Starts the test channel. This initiates connections to the server.
         * @param path The relative uri for the test connection.
         */
        connect(path: string): void;
        /**
         * Factory method for XhrIo objects.
         * @param hostPrefix The host prefix, if we need an XhrIo object capable
         * of calling a secondary domain.
         */
        createXhrIo(hostPrefix: string|null): ಠ_ಠ.clutz.goog.net.XhrIo;
        /**
         * Returns the last status code received for a request.
         */
        getLastStatusCode(): number;
        /**
         * Gets whether this channel is currently active. This is used to
         * determine the length of time to wait before retrying.
         * @param browserChannel The browser channel.
         */
        isActive(browserChannel: ಠ_ಠ.clutz.goog.net.BrowserChannel|
                 null): boolean;
        /**
         * Returns whether the test channel is closed. The ChannelRequest object
         * expects this method to be implemented on its handler.
         */
        isClosed(): boolean;
        /**
         * Notifies the channel of a fine grained network event.
         * @param reachabilityType The reachability event type.
         */
        notifyServerReachabilityEvent(
            reachabilityType:
                ಠ_ಠ.clutz.goog.net.BrowserChannel.ServerReachability): void;
        /**
         * Callback from ChannelRequest that indicates a request has completed.
         * @param req The request object.
         */
        onRequestComplete(req: ಠ_ಠ.clutz.goog.net.ChannelRequest|null): void;
        /**
         * Callback from ChannelRequest for when new data is received
         * @param req The request object.
         * @param responseText The text of the response.
         */
        onRequestData(
            req: ಠ_ಠ.clutz.goog.net.ChannelRequest|null,
            responseText: string): void;
        /**
         * Sets extra HTTP headers to add to all the requests sent to the
         * server.
         * @param extraHeaders The HTTP headers.
         */
        setExtraHeaders(extraHeaders: GlobalObject|null): void;
        /**
         * Sets a new parser for the response payload.
         * @param parser Parser.
         */
        setParser(parser: ಠ_ಠ.clutz.goog.string.Parser): void;
        shouldUseSecondaryDomains(): boolean;
    }
}
declare module 'goog:goog.net.BrowserTestChannel' {
    import alias = ಠ_ಠ.clutz.goog.net.BrowserTestChannel;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
    /**
     * Class used to load multiple URIs.
     */
    class BulkLoader extends BulkLoader_Instance {}
    class BulkLoader_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * Class used to load multiple URIs.
         * @param uris The URIs to load.
         */
        constructor(uris: (string|ಠ_ಠ.clutz.goog.Uri|null)[]|null);
        disposeInternal(): void;
        /**
         * Gets the request Uris.
         */
        getRequestUris(): string[]|null;
        /**
         * Gets the response texts, in order.
         */
        getResponseTexts(): string[]|null;
        /**
         * Starts the process of loading the URIs.
         */
        load(): void;
    }
}
declare module 'goog:goog.net.BulkLoader' {
    import alias = ಠ_ಠ.clutz.goog.net.BulkLoader;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
    /**
     * Helper class used to load multiple URIs.
     */
    class BulkLoaderHelper extends BulkLoaderHelper_Instance {}
    class BulkLoaderHelper_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance {
        /**
         * Helper class used to load multiple URIs.
         * @param uris The URIs to load.
         */
        constructor(uris: (string|ಠ_ಠ.clutz.goog.Uri|null)[]|null);
        disposeInternal(): void;
        /**
         * Gets the response texts.
         */
        getResponseTexts(): string[]|null;
        /**
         * Gets the URI by id.
         * @param id The id.
         */
        getUri(id: number): string|ಠ_ಠ.clutz.goog.Uri|null;
        /**
         * Gets the URIs.
         */
        getUris(): (string|ಠ_ಠ.clutz.goog.Uri|null)[]|null;
        /**
         * Determines if the load of the URIs is complete.
         */
        isLoadComplete(): boolean;
        /**
         * Sets the response text by id.
         * @param id The id.
         * @param responseText The response texts.
         */
        setResponseText(id: number, responseText: string): void;
    }
}
declare module 'goog:goog.net.BulkLoaderHelper' {
    import alias = ಠ_ಠ.clutz.goog.net.BulkLoaderHelper;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
    /**
     * Logs and keeps a buffer of debugging info for the Channel.
     */
    class ChannelDebug extends ChannelDebug_Instance {
        /**
         * The normal response for forward channel requests.
         * Used only before version 8 of the protocol.
         */
        static MAGIC_RESPONSE_COOKIE: string;
    }
    class ChannelDebug_Instance {
        private noStructuralTyping_: any;
        /**
         * Logs that the browser went offline during the lifetime of a request.
         * @param url The URL being requested.
         */
        browserOfflineResponse(url: ಠ_ಠ.clutz.goog.Uri|null): void;
        /**
         * Logs a debug message.
         * @param text The message.
         */
        debug(text: string): void;
        /**
         * Logs an exception
         * @param e The error or error event.
         * @param opt_msg The optional message, defaults to 'Exception'.
         */
        dumpException(e: GlobalError|null, opt_msg?: string): void;
        /**
         * Gets the logger used by this ChannelDebug.
         */
        getLogger(): ಠ_ಠ.clutz.goog.debug.Logger|null;
        /**
         * Logs an info message.
         * @param text The message.
         */
        info(text: string): void;
        /**
         * Logs a severe message.
         * @param text The message.
         */
        severe(text: string): void;
        /**
         * Logs a request timeout.
         * @param uri The uri that timed out.
         */
        timeoutResponse(uri: ಠ_ಠ.clutz.goog.Uri|null): void;
        /**
         * Logs a Trident ActiveX request.
         * @param verb The request type (GET/POST).
         * @param uri The request destination.
         * @param id The request id.
         * @param attempt Which attempt # the request was.
         */
        tridentChannelRequest(
            verb: string, uri: ಠ_ಠ.clutz.goog.Uri|null,
            id: string|number|undefined, attempt: number): void;
        /**
         * Logs the done response received from a Trident ActiveX request.
         * @param id The request id.
         * @param successful Whether the request was successful.
         */
        tridentChannelResponseDone(
            id: string|number|undefined, successful: boolean): void;
        /**
         * Logs the response text received from a Trident ActiveX request.
         * @param id The request id.
         * @param responseText The response text.
         */
        tridentChannelResponseText(
            id: string|number|undefined, responseText: string): void;
        /**
         * Logs a warning message.
         * @param text The message.
         */
        warning(text: string): void;
        /**
         * Logs an XmlHttp request..
         * @param verb The request type (GET/POST).
         * @param uri The request destination.
         * @param id The request id.
         * @param attempt Which attempt # the request was.
         * @param postData The data posted in the request.
         */
        xmlHttpChannelRequest(
            verb: string, uri: ಠ_ಠ.clutz.goog.Uri|null,
            id: string|number|undefined, attempt: number,
            postData: string|null): void;
        /**
         * Logs the meta data received from an XmlHttp request.
         * @param verb The request type (GET/POST).
         * @param uri The request destination.
         * @param id The request id.
         * @param attempt Which attempt # the request was.
         * @param readyState The ready state.
         * @param statusCode The HTTP status code.
         */
        xmlHttpChannelResponseMetaData(
            verb: string, uri: ಠ_ಠ.clutz.goog.Uri|null,
            id: string|number|undefined, attempt: number,
            readyState: ಠ_ಠ.clutz.goog.net.XmlHttp.ReadyState,
            statusCode: number): void;
        /**
         * Logs the response data received from an XmlHttp request.
         * @param id The request id.
         * @param responseText The response text.
         * @param opt_desc Optional request description.
         */
        xmlHttpChannelResponseText(
            id: string|number|undefined, responseText: string|null,
            opt_desc?: string|null): void;
    }
}
declare module 'goog:goog.net.ChannelDebug' {
    import alias = ಠ_ಠ.clutz.goog.net.ChannelDebug;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
    /**
     * Creates a ChannelRequest object which encapsulates a request to the
     * server. A new ChannelRequest is created for each request to the server.
     */
    class ChannelRequest extends ChannelRequest_Instance {
        /**
         * How often to poll (in MS) for changes to responseText in browsers
         * that don't fire onreadystatechange during incremental loading of
         * responseText.
         */
        static POLLING_INTERVAL_MS: number;
        /**
         * Default timeout in MS for a request. The server must return data
         * within this time limit for the request to not timeout.
         */
        static TIMEOUT_MS: number;
        /**
         * Returns a useful error string for debugging based on the specified
         * error code.
         * @param errorCode The error code.
         * @param statusCode The HTTP status code.
         */
        static errorStringFromCode(
            errorCode: ಠ_ಠ.clutz.goog.net.ChannelRequest.Error,
            statusCode: number): string;
        /**
         * Returns whether XHR streaming is supported on this browser.
         *
         * If XHR streaming is not supported, we will try to use an
         * ActiveXObject to create a Forever IFrame.
         */
        static supportsXhrStreaming(): boolean;
    }
    class ChannelRequest_Instance {
        private noStructuralTyping_: any;
        /**
         * Creates a ChannelRequest object which encapsulates a request to the
         * server. A new ChannelRequest is created for each request to the
         * server.
         * @param channel The BrowserChannel that owns this request.
         * @param channelDebug A ChannelDebug to use for logging.
         * @param opt_sessionId The session id for the channel.
         * @param opt_requestId The request id for this request.
         * @param opt_retryId The retry id for this request.
         */
        constructor(
            channel: ಠ_ಠ.clutz.goog.net.BrowserChannel|null|
            ಠ_ಠ.clutz.goog.net.BrowserTestChannel,
            channelDebug: ಠ_ಠ.clutz.goog.net.ChannelDebug|null,
            opt_sessionId?: string, opt_requestId?: string|number,
            opt_retryId?: number);
        /**
         * Cancels the request no matter what the underlying transport is.
         */
        cancel(): void;
        /**
         * If the request was not successful, returns the reason.
         */
        getLastError(): ಠ_ಠ.clutz.goog.net.ChannelRequest.Error|null;
        /**
         * Returns the status code of the last request.
         */
        getLastStatusCode(): number;
        /**
         * Returns the data for a post, if this request is a post.
         */
        getPostData(): string|null;
        /**
         * Returns the request id for this request. Each request has a unique
         * request id and the request IDs are a sequential increasing count.
         */
        getRequestId(): string|number|undefined;
        /**
         * Returns the time that the request started, if it has started.
         */
        getRequestStartTime(): number|null;
        /**
         * Returns the session id for this channel.
         */
        getSessionId(): string|undefined;
        /**
         * Indicates whether the request was successful. Only valid after the
         * handler is called to indicate completion of the request.
         */
        getSuccess(): boolean;
        /**
         * Uses an IMG tag to send an HTTP get to the server. This is only
         * currently used to terminate the connection, as an IMG tag is the most
         * reliable way to send something to the server while the page is
         * getting torn down.
         * @param uri The uri to send a request to.
         */
        sendUsingImgTag(uri: ಠ_ಠ.clutz.goog.Uri|null): void;
        /**
         * Sets extra HTTP headers to add to all the requests sent to the
         * server.
         * @param extraHeaders The HTTP headers.
         */
        setExtraHeaders(extraHeaders: GlobalObject|null): void;
        /**
         * Sets the throttle for handling onreadystatechange events for the
         * request.
         * @param throttle The throttle in ms.  A value of zero indicates no
         * throttle.
         */
        setReadyStateChangeThrottle(throttle: number): void;
        /**
         * Sets the timeout for a request
         * @param timeout The timeout in MS for when we fail the request.
         */
        setTimeout(timeout: number): void;
        /**
         * Uses the Trident htmlfile ActiveX control to send a GET request in
         * IE. This is the innovation discovered that lets us get intermediate
         * results in Internet Explorer.  Thanks to http://go/kev
         * @param uri The uri to request from.
         * @param usingSecondaryDomain Whether to use a secondary domain.
         */
        tridentGet(uri: ಠ_ಠ.clutz.goog.Uri|null, usingSecondaryDomain: boolean):
            void;
        /**
         * Uses XMLHTTP to send an HTTP GET to the server.
         * @param uri The uri of the request.
         * @param decodeChunks Whether to the result is expected to be encoded
         * for chunking and thus requires decoding.
         * @param hostPrefix The host prefix, if we might be using a secondary
         * domain.  Note that it should also be in the URL, adding this won't
         * cause it to be added to the URL.
         * @param opt_noClose Whether to request that the tcp/ip connection
         * should be closed.
         */
        xmlHttpGet(
            uri: ಠ_ಠ.clutz.goog.Uri|null, decodeChunks: boolean,
            hostPrefix: string|null, opt_noClose?: boolean): void;
        /**
         * Uses XMLHTTP to send an HTTP POST to the server.
         * @param uri The uri of the request.
         * @param postData The data for the post body.
         * @param decodeChunks Whether to the result is expected to be encoded
         * for chunking and thus requires decoding.
         */
        xmlHttpPost(
            uri: ಠ_ಠ.clutz.goog.Uri|null, postData: string,
            decodeChunks: boolean): void;
    }
}
declare module 'goog:goog.net.ChannelRequest' {
    import alias = ಠ_ಠ.clutz.goog.net.ChannelRequest;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.ChannelRequest {
    /**
     * Enum type for identifying a ChannelRequest error.
     */
    enum Error {
        ACTIVE_X_BLOCKED,
        BAD_DATA,
        BROWSER_OFFLINE,
        HANDLER_EXCEPTION,
        NO_DATA,
        STATUS,
        TIMEOUT,
        UNKNOWN_SESSION_ID,
    }
}
declare module 'goog:goog.net.ChannelRequest.Error' {
    import alias = ಠ_ಠ.clutz.goog.net.ChannelRequest.Error;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
    /**
     * A class for handling browser cookies.
     */
    class Cookies extends Cookies_Instance {
        /**
         * Static constant for the size of cookies. Per the spec, there's a 4K
         * limit to the size of a cookie. To make sure users can't break this
         * limit, we should truncate long cookies at 3950 bytes, to be extra
         * careful with dumb browsers/proxies that interpret 4K as 4000 rather
         * than 4096.
         */
        static MAX_COOKIE_LENGTH: number;
        /**
         * Getter for the static instance of goog.net.Cookies.
         */
        static getInstance(): ಠ_ಠ.clutz.goog.net.Cookies;
    }
    class Cookies_Instance {
        private noStructuralTyping_: any;
        /**
         * A class for handling browser cookies.
         * @param context The context document to get/set cookies on.
         */
        constructor(context: Document|null);
        /**
         * Removes all cookies for this document.  Note that this will only
         * remove cookies from the current path and domain.  If there are
         * cookies set using a subpath and/or another domain these will still be
         * there.
         */
        clear(): void;
        /**
         * Returns whether there is a cookie with the given name.
         * @param key The name of the cookie to test for.
         */
        containsKey(key: string): boolean;
        /**
         * Returns whether there is a cookie with the given value. (This is an
         * O(n) operation.)
         * @param value The value to check for.
         */
        containsValue(value: string): boolean;
        /**
         * Returns the value for the first cookie with the given name.
         * @param name The name of the cookie to get.
         * @param opt_default If not found this is returned instead.
         */
        get(name: string, opt_default?: string): string|undefined;
        getCount(): number;
        /**
         * Gets the names for all the cookies.
         */
        getKeys(): string[]|null;
        /**
         * Gets the values for all the cookies.
         */
        getValues(): string[]|null;
        isEmpty(): boolean;
        /**
         * Returns true if cookies are enabled.
         */
        isEnabled(): boolean;
        /**
         * We do not allow '=', ';', or white space in the name.
         *
         * NOTE: The following are allowed by this method, but should be avoided
         * for cookies handled by the server.
         * - any name starting with '$'
         * - 'Comment'
         * - 'Domain'
         * - 'Expires'
         * - 'Max-Age'
         * - 'Path'
         * - 'Secure'
         * - 'Version'
         * @param name Cookie name.
         */
        isValidName(name: string): boolean;
        /**
         * We do not allow ';' or line break in the value.
         *
         * Spec does not mention any illegal characters, but in practice
         * semi-colons break parsing and line breaks truncate the name.
         * @param value Cookie value.
         */
        isValidValue(value: string): boolean;
        /**
         * Removes and expires a cookie.
         * @param name The cookie name.
         * @param opt_path The path of the cookie, or null to expire a cookie
         * set at the full request path. If not provided, the default is '/'
         * (i.e. path=/).
         * @param opt_domain The domain of the cookie, or null to expire a
         * cookie set at the full request host name. If not provided, the
         * default is null (i.e. cookie at full request host name).
         */
        remove(name: string, opt_path?: string, opt_domain?: string): boolean;
        /**
         * Sets a cookie.  The max_age can be -1 to set a session cookie. To
         * remove and expire cookies, use remove() instead.
         *
         * Neither the {@code name} nor the {@code value} are encoded in any
         * way. It is up to the callers of {@code get} and {@code set} (as well
         * as all the other methods) to handle any possible encoding and
         * decoding.
         * @param name The cookie name.
         * @param value The cookie value.
         * @param opt_maxAge The max age in seconds (from now). Use -1 to set a
         * session cookie. If not provided, the default is -1 (i.e. set a
         * session cookie).
         * @param opt_path The path of the cookie. If not present then this uses
         * the full request path.
         * @param opt_domain The domain of the cookie, or null to not specify a
         * domain attribute (browser will use the full request host name). If
         * not provided, the default is null (i.e. let browser use full request
         * host name).
         * @param opt_secure Whether the cookie should only be sent over a
         * secure channel.
         */
        set(name: string, value: string, opt_maxAge?: number,
            opt_path?: string|null, opt_domain?: string|null,
            opt_secure?: boolean): void;
    }
}
declare module 'goog:goog.net.Cookies' {
    import alias = ಠ_ಠ.clutz.goog.net.Cookies;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
    /**
     * A factory of XML http request objects that supports cross domain
     * requests. This class should be instantiated and passed as the parameter
     * of a goog.net.XhrIo constructor to allow cross-domain requests in every
     * browser.
     */
    class CorsXmlHttpFactory extends CorsXmlHttpFactory_Instance {}
    class CorsXmlHttpFactory_Instance extends
        ಠ_ಠ.clutz.goog.net.XmlHttpFactory_Instance {
        createInstance(): ಠ_ಠ.clutz.goog.net.XhrLike|XMLHttpRequest;
        internalGetOptions(): GlobalObject|null;
    }
}
declare module 'goog:goog.net.CorsXmlHttpFactory' {
    import alias = ಠ_ಠ.clutz.goog.net.CorsXmlHttpFactory;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
    /**
     * Creates a new instance of cross domain RPC.
     */
    class CrossDomainRpc extends CrossDomainRpc_Instance {
        /**
         * Header prefix.
         */
        static HEADER: string;
        /**
         * Parameter prefix.
         */
        static PARAM: string;
        /**
         * Parameter to echo prefix.
         */
        static PARAM_ECHO: string;
        /**
         * Parameter to echo: dummy resource URI
         */
        static PARAM_ECHO_DUMMY_URI: string;
        /**
         * Parameter to echo: request id
         */
        static PARAM_ECHO_REQUEST_ID: string;
        static debugMode_: boolean;
        static dummyResourceUri_: string;
        /**
         * Sends a request across domain.
         * @param uri Uri to make request to.
         * @param opt_continuation Continuation function to be called when
         * request is completed.  Takes one argument of an event object whose
         * target has the following properties: "status" is the HTTP response
         * status code, "responseText" is the response text, and "headers" is an
         * object with all response headers.  The event target's
         * getResponseJson() method returns a JavaScript object evaluated from
         * the JSON response or undefined if response is not JSON.
         * @param opt_method Method of request. Default is POST.
         * @param opt_params Parameters. Each property is turned into a request
         * parameter.
         * @param opt_headers Map of headers of the request.
         */
        static send(
            uri: string, opt_continuation?: (...a: any[]) => any,
            opt_method?: string, opt_params?: GlobalObject|null,
            opt_headers?: GlobalObject|null): void;
        /**
         * Makes response available for grandparent (requester)'s
         * receiveResponse call to pick up by creating a series of iframes
         * pointed to the dummy URI with a payload (value after either ? or #)
         * carrying a chunk of response data and a response info iframe that
         * tells the grandparent (requester) the readiness of response.
         * @param data Response data (string or JSON string).
         * @param isDataJson true if data is a JSON string; false if just a
         * string.
         * @param echo Parameters to echo back "xdpe:request-id": Server that
         * produces the response needs to copy it here to support multiple
         * current XD requests on the same page. "xdpe:dummy-uri": URI to a
         * dummy resource that response iframes point to to gain the domain of
         * the client.  This can be an image (IE) or a CSS file (FF) found on
         * the requester's page. Server should copy value from request parameter
         * "xdpe:dummy-uri".
         * @param status HTTP response status code.
         * @param headers Response headers in JSON format.
         */
        static sendResponse(
            data: string, isDataJson: boolean, echo: GlobalObject|null,
            status: number, headers: string): void;
        /**
         * Sets debug mode to true or false.  When debug mode is on, response
         * iframes are visible and left behind after their use is finished.
         * @param flag Flag to indicate intention to turn debug model on (true)
         * or off (false).
         */
        static setDebugMode(flag: boolean): void;
        /**
         * Sets the URI for a dummy resource on caller's domain.  This function
         * is used for specifying a particular resource to use rather than
         * relying on auto detection.
         * @param dummyResourceUri URI to dummy resource on the same domain of
         * caller's page.
         */
        static setDummyResourceUri(dummyResourceUri: string): void;
        /**
         * Sets whether a fallback dummy resource ("/robots.txt" on Firefox and
         * Safari and current page on IE) should be used when a suitable dummy
         * resource is not available.
         * @param useFallBack Whether to use fallback or not.
         */
        static setUseFallBackDummyResource(useFallBack: boolean): void;
    }
    class CrossDomainRpc_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * Gets a response header.
         * @param name Name of response header.
         */
        getResponseHeader(name: string): string|undefined;
        /**
         * If response is JSON, evaluates it to a JavaScript object and
         * returns it; otherwise returns undefined.
         */
        getResponseJson(): GlobalObject|null|undefined;
        isSuccess(): boolean;
        /**
         * Removes request iframe used.
         */
        reset(): void;
        responseHeaders: GlobalObject|null;
        responseText: string;
        /**
         * Sends a request across domain.
         * @param uri Uri to make request to.
         * @param opt_method Method of request, 'GET' or 'POST' (uppercase).
         * Default is 'POST'.
         * @param opt_params Parameters. Each property is turned into a request
         * parameter.
         * @param opt_headers Map of headers of the request.
         */
        sendRequest(
            uri: string, opt_method?: string, opt_params?: GlobalObject|null,
            opt_headers?: GlobalObject|null): void;
        status: number;
        timeWaitedAfterResponseReady_: number;
    }
}
declare module 'goog:goog.net.CrossDomainRpc' {
    import alias = ಠ_ಠ.clutz.goog.net.CrossDomainRpc;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
    /**
     * Default factory to use when creating xhr objects.  You probably shouldn't
     * be instantiating this directly, but rather using it via goog.net.XmlHttp.
     */
    class DefaultXmlHttpFactory extends DefaultXmlHttpFactory_Instance {}
    class DefaultXmlHttpFactory_Instance extends
        ಠ_ಠ.clutz.goog.net.XmlHttpFactory_Instance {
        createInstance(): ಠ_ಠ.clutz.goog.net.XhrLike|XMLHttpRequest;
        internalGetOptions(): GlobalObject|null;
    }
}
declare module 'goog:goog.net.DefaultXmlHttpFactory' {
    import alias = ಠ_ಠ.clutz.goog.net.DefaultXmlHttpFactory;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
    /**
     * Error codes
     */
    enum ErrorCode {
        ABORT,
        ACCESS_DENIED,
        CUSTOM_ERROR,
        EXCEPTION,
        FF_SILENT_ERROR,
        FILE_NOT_FOUND,
        HTTP_ERROR,
        NO_ERROR,
        OFFLINE,
        TIMEOUT,
    }
}
declare module 'goog:goog.net.ErrorCode' {
    import alias = ಠ_ಠ.clutz.goog.net.ErrorCode;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
    /**
     * Event names for network events
     */
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        ABORT: EventType,
        COMPLETE: EventType,
        DOWNLOAD_PROGRESS: EventType,
        ERROR: EventType,
        INCREMENTAL_DATA: EventType,
        PROGRESS: EventType,
        READY: EventType,
        READY_STATE_CHANGE: EventType,
        SUCCESS: EventType,
        TIMEOUT: EventType,
        UPLOAD_PROGRESS: EventType,
    };
}
declare module 'goog:goog.net.EventType' {
    import alias = ಠ_ಠ.clutz.goog.net.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
    /**
     * FetchXmlHttp object constructor.
     */
    class FetchXmlHttp extends FetchXmlHttp_Instance {}
    class FetchXmlHttp_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance implements
            ಠ_ಠ.clutz.goog.net.XhrLike {
        /**
         * FetchXmlHttp object constructor.
         */
        constructor(worker: WorkerGlobalScope);
        /**
         * Method to call when the state changes.
         */
        onreadystatechange: (() => any)|null;
        /**
         * Request state.
         */
        readyState: ಠ_ಠ.clutz.goog.net.FetchXmlHttp.RequestState;
        /**
         * Content of the response.
         */
        responseText: string;
        /**
         * Document response entity body.
         * NOTE: This is always null and not supported by this class.
         */
        responseXML: null;
        /**
         * HTTP status.
         */
        status: number;
        /**
         * HTTP status string.
         */
        statusText: string;
        abort(): void;
        getAllResponseHeaders(): string;
        getResponseHeader(header: string): string;
        open(
            method: string, url: string, opt_async?: boolean|null,
            a?: string|null, b?: string|null): void;
        send(opt_data?: ArrayBuffer|null|ArrayBufferView|Blob|Document|FormData|
             string): void;
        setCacheMode(cacheMode: RequestCache): void;
        setCredentialsMode(credentialsMode: RequestCredentials): void;
        setRequestHeader(header: string, value: string): void;
    }
}
declare namespace ಠ_ಠ.clutz.goog.net.FetchXmlHttp {
    enum RequestState {
        DONE,
        HEADER_RECEIVED,
        LOADING,
        OPENED,
        UNSENT,
    }
}
declare module 'goog:goog.net.FetchXmlHttp' {
    import alias = ಠ_ಠ.clutz.goog.net.FetchXmlHttp;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
    /**
     * Factory for creating Xhr objects that uses the native fetch() method.
     * https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API
     * Note that this factory is intended for use in Service Worker only.
     */
    class FetchXmlHttpFactory extends FetchXmlHttpFactory_Instance {}
    class FetchXmlHttpFactory_Instance extends
        ಠ_ಠ.clutz.goog.net.XmlHttpFactory_Instance {
        /**
         * Factory for creating Xhr objects that uses the native fetch() method.
         * https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API
         * Note that this factory is intended for use in Service Worker only.
         * @param worker The Service Worker global scope.
         */
        constructor(worker: WorkerGlobalScope);
        createInstance(): ಠ_ಠ.clutz.goog.net.XhrLike|XMLHttpRequest;
        setCacheMode(cacheMode: RequestCache): void;
        setCredentialsMode(credentialsMode: RequestCredentials): void;
    }
}
declare module 'goog:goog.net.FetchXmlHttpFactory' {
    import alias = ಠ_ಠ.clutz.goog.net.FetchXmlHttpFactory;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
    /**
     * HTTP Status Codes defined in RFC 2616 and RFC 6585.
     */
    enum HttpStatus {
        ACCEPTED,
        BAD_GATEWAY,
        BAD_REQUEST,
        CONFLICT,
        CONTINUE,
        CREATED,
        EXPECTATION_FAILED,
        FORBIDDEN,
        FOUND,
        GATEWAY_TIMEOUT,
        GONE,
        HTTP_VERSION_NOT_SUPPORTED,
        INTERNAL_SERVER_ERROR,
        LENGTH_REQUIRED,
        METHOD_NOT_ALLOWED,
        MOVED_PERMANENTLY,
        MULTIPLE_CHOICES,
        NETWORK_AUTHENTICATION_REQUIRED,
        NON_AUTHORITATIVE_INFORMATION,
        NOT_ACCEPTABLE,
        NOT_FOUND,
        NOT_IMPLEMENTED,
        NOT_MODIFIED,
        NO_CONTENT,
        OK,
        PARTIAL_CONTENT,
        PAYMENT_REQUIRED,
        PRECONDITION_FAILED,
        PRECONDITION_REQUIRED,
        PROXY_AUTHENTICATION_REQUIRED,
        QUIRK_IE_NO_CONTENT,
        REQUEST_ENTITY_TOO_LARGE,
        REQUEST_HEADER_FIELDS_TOO_LARGE,
        REQUEST_RANGE_NOT_SATISFIABLE,
        REQUEST_TIMEOUT,
        REQUEST_URI_TOO_LONG,
        RESET_CONTENT,
        SEE_OTHER,
        SERVICE_UNAVAILABLE,
        SWITCHING_PROTOCOLS,
        TEMPORARY_REDIRECT,
        TOO_MANY_REQUESTS,
        UNAUTHORIZED,
        UNSUPPORTED_MEDIA_TYPE,
        USE_PROXY,
    }
}
declare module 'goog:goog.net.HttpStatus' {
    import alias = ಠ_ಠ.clutz.goog.net.HttpStatus;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
    /**
     * HTTP Status Code Names defined in RFC 2616 and RFC 6585.
     */
    var HttpStatusName: {[key: number]: string};
}
declare module 'goog:goog.net.HttpStatusName' {
    import alias = ಠ_ಠ.clutz.goog.net.HttpStatusName;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
    /**
     * An adapter around Internet Explorer's XDomainRequest object that makes it
     * look like a standard XMLHttpRequest. This can be used instead of
     * XMLHttpRequest to support CORS.
     */
    class IeCorsXhrAdapter extends IeCorsXhrAdapter_Instance {}
    class IeCorsXhrAdapter_Instance implements ಠ_ಠ.clutz.goog.net.XhrLike {
        private noStructuralTyping_: any;
        /**
         * The simulated ready state change callback function.
         */
        onreadystatechange(...a: any[]): any;
        /**
         * The simulated ready state.
         */
        readyState: number;
        /**
         * The simulated response text parameter.
         */
        responseText: string;
        responseXML: null;
        /**
         * The simulated status code
         */
        status: number;
        statusText: string;
        abort(): void;
        /**
         * Returns the response headers from the server. This implemntation only
         * returns the 'content-type' header.
         */
        getAllResponseHeaders(): string;
        /**
         * Returns the value of the response header identified by key. This
         * implementation only supports the 'content-type' header.
         * @param key The request header to fetch. If this parameter is set to
         * 'content-type' (case-insensitive), this function returns the value of
         * the 'content-type' request header. If this parameter is set to any
         * other value, this function always returns an empty string.
         */
        getResponseHeader(key: string): string;
        /**
         * Opens a connection to the provided URL.
         * @param method The HTTP method to use. Valid methods include GET and
         * POST.
         * @param url The URL to contact. The authority of this URL must match
         * the authority of the current page's URL (e.g. http or https).
         * @param opt_async Whether the request is asynchronous, defaulting to
         * true. XDomainRequest does not support syncronous requests, so setting
         * it to false will actually raise an exception.
         */
        open(
            method: string, url: string, opt_async?: boolean|null,
            a?: string|null, b?: string|null): void;
        /**
         * Sends the request to the remote server. Before calling this function,
         * always call {@link open}.
         * @param opt_content The content to send as POSTDATA, if any. Only
         * string data is supported by this implementation.
         */
        send(opt_content?: ArrayBuffer|null|ArrayBufferView|Blob|Document|
             FormData|string): void;
        /**
         * Sets a request header to send to the remote server. Because this
         * implementation does not support request headers, this function does
         * nothing.
         * @param key The name of the HTTP header to set. Ignored.
         * @param value The value to set for the HTTP header. Ignored.
         */
        setRequestHeader(key: string, value: string): void;
    }
}
declare module 'goog:goog.net.IeCorsXhrAdapter' {
    import alias = ಠ_ಠ.clutz.goog.net.IeCorsXhrAdapter;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
    /**
     * Class for managing requests via iFrames.
     */
    class IframeIo extends IframeIo_Instance {
        /**
         * Prefix for frame names
         */
        static FRAME_NAME_PREFIX: string;
        /**
         * The number of milliseconds after a request is completed to dispose
         * the iframes.  This can be done lazily so we wait long enough for any
         * processing that occurred as a result of the response to finish.
         */
        static IFRAME_DISPOSE_DELAY_MS: number;
        /**
         * Suffix that is added to inner frames used for sending requests in
         * non-IE browsers
         */
        static INNER_FRAME_SUFFIX: string;
        /**
         * Find an iframe by name (assumes the context is goog.global since that
         * is where IframeIo's iframes are kept).
         * @param fname The name to find.
         */
        static getIframeByName(fname: string): HTMLIFrameElement|null;
        /**
         * Find an instance of the IframeIo object by name.
         * @param fname The name to find.
         */
        static getInstanceByName(fname: string): ಠ_ಠ.clutz.goog.net.IframeIo
            |null;
        /**
         * Handles incremental data and routes it to the correct iframeIo
         * instance. The HTML page requested by the IframeIo instance should
         * contain script blocks that call an externed reference to this method.
         * @param win The window object.
         * @param data The data object.
         */
        static handleIncrementalData(win: Window|null, data: GlobalObject|null):
            void;
        /**
         * Static send that creates a short lived instance of IframeIo to send
         * the request.
         * @param uri Uri of the request, it is up the caller to manage query
         * string params.
         * @param opt_callback Event handler for when request is completed.
         * @param opt_method Default is GET, POST uses a form to submit the
         * request.
         * @param opt_noCache Append a timestamp to the request to avoid
         * caching.
         * @param opt_data Map of key-value pairs that will be posted to the
         * server via the iframe's form.
         */
        static send(
            uri: ಠ_ಠ.clutz.goog.Uri|null|string,
            opt_callback?: (...a: any[]) => any, opt_method?: string,
            opt_noCache?: boolean, opt_data?: GlobalObject|null): void;
    }
    class IframeIo_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * Abort the current Iframe request
         * @param opt_failureCode Optional error code to use - defaults to
         * ABORT.
         */
        abort(opt_failureCode?: ಠ_ಠ.clutz.goog.net.ErrorCode): void;
        disposeInternal(): void;
        /**
         * Gets the callback function used to check if a loaded IFrame is in an
         * error state.
         */
        getErrorChecker(): (...a: any[]) => any;
        /**
         * Gets the last custom error.
         */
        getLastCustomError(): GlobalObject|null;
        /**
         * Gets the last error message.
         */
        getLastError(): string;
        /**
         * Gets the last error code.
         */
        getLastErrorCode(): ಠ_ಠ.clutz.goog.net.ErrorCode;
        /**
         * Get the uri of the last request.
         */
        getLastUri(): ಠ_ಠ.clutz.goog.Uri|null;
        getRequestIframe(): HTMLIFrameElement|null;
        /**
         * Returns the last response html (i.e. the innerHtml of the iframe).
         */
        getResponseHtml(): string|null;
        /**
         * Parses the content as JSON. This is a legacy method for browsers
         * without JSON.parse or for responses that are not valid JSON (e.g.
         * containing NaN). Use JSON.parse(this.getResponseText()) in the other
         * cases.
         */
        getResponseJson(): GlobalObject|null;
        /**
         * Returns the last response text (i.e. the text content of the iframe).
         * Assumes plain text!
         */
        getResponseText(): string|null;
        /**
         * Returns the document object from the last request.  Not truly XML,
         * but used to mirror the XhrIo interface.
         */
        getResponseXml(): HTMLDocument|null;
        isActive(): boolean;
        isComplete(): boolean;
        isIgnoringResponse(): boolean;
        isSuccess(): boolean;
        /**
         * Sends a request via an iframe.
         *
         * A HTML form is used and submitted to the iframe, this simplifies the
         * difference between GET and POST requests. The iframe needs to be
         * created and destroyed for each request otherwise the request will
         * contribute to the history stack.
         *
         * sendFromForm does some clever trickery (thanks jlim) in non-IE
         * browsers to stop a history entry being added for POST requests.
         * @param uri Uri of the request.
         * @param opt_method Default is GET, POST uses a form to submit the
         * request.
         * @param opt_noCache Append a timestamp to the request to avoid
         * caching.
         * @param opt_data Map of key-value pairs.
         */
        send(
            uri: ಠ_ಠ.clutz.goog.Uri|null|string, opt_method?: string,
            opt_noCache?: boolean, opt_data?: GlobalObject|null): void;
        /**
         * Sends the data stored in an existing form to the server. The HTTP
         * method should be specified on the form, the action can also be
         * specified but can be overridden by the optional URI param.
         *
         * This can be used in conjunction will a file-upload input to upload a
         * file in the background without affecting history.
         *
         * Example form:
         * <pre>
         * &lt;form action="/server/" enctype="multipart/form-data"
         * method="POST"&gt; &lt;input name="userfile" type="file"&gt;
         * &lt;/form&gt;
         * </pre>
         * @param form Form element used to send the request to the server.
         * @param opt_uri Uri to set for the destination of the request, by
         * default the uri will come from the form.
         * @param opt_noCache Append a timestamp to the request to avoid
         * caching.
         */
        sendFromForm(
            form: HTMLFormElement|null, opt_uri?: string,
            opt_noCache?: boolean): void;
        /**
         * Sets the callback function used to check if a loaded IFrame is in an
         * error state.
         * @param fn Callback that expects a document object as it's single
         * argument.
         */
        setErrorChecker(fn: (...a: any[]) => any): void;
        /**
         * Sets whether to ignore the response from the server by not adding any
         * event handlers to fire when the iframe loads. This is necessary when
         * using IframeIo to submit to a server on another domain, to avoid
         * same-origin violations when trying to access the response. If this is
         * set to true, the IframeIo instance will be a single-use instance that
         * is only usable for one request.  It will only clean up its resources
         * (iframes and forms) when it is disposed.
         * @param ignore Whether to ignore the server response.
         */
        setIgnoreResponse(ignore: boolean): void;
    }
}
declare module 'goog:goog.net.IframeIo' {
    import alias = ಠ_ಠ.clutz.goog.net.IframeIo;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.IframeIo {
    /**
     * Class for representing incremental data events.
     */
    class IncrementalDataEvent extends IncrementalDataEvent_Instance {}
    class IncrementalDataEvent_Instance extends
        ಠ_ಠ.clutz.goog.events.Event_Instance {
        /**
         * Class for representing incremental data events.
         * @param data The data associated with the event.
         */
        constructor(data: GlobalObject|null);
        /**
         * The data associated with the event.
         */
        data: GlobalObject|null;
    }
}
declare module 'goog:goog.net.IframeIo.IncrementalDataEvent' {
    import alias = ಠ_ಠ.clutz.goog.net.IframeIo.IncrementalDataEvent;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
    /**
     * The correct way to determine whether a same-domain iframe has completed
     * loading is different in IE and Firefox.  This class abstracts above these
     * differences, providing a consistent interface for:
     * <ol>
     * <li> Determing if an iframe is currently loaded
     * <li> Listening for an iframe that is not currently loaded, to finish
     * loading
     * </ol>
     */
    class IframeLoadMonitor extends IframeLoadMonitor_Instance {
        /**
         * Event type dispatched by a goog.net.IframeLoadMonitor when it
         * internal iframe finishes loading for the first time after
         * construction of the goog.net.IframeLoadMonitor
         */
        static LOAD_EVENT: string;
    }
    class IframeLoadMonitor_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * The correct way to determine whether a same-domain iframe has
         * completed loading is different in IE and Firefox.  This class
         * abstracts above these differences, providing a consistent interface
         * for: <ol> <li> Determing if an iframe is currently loaded <li>
         * Listening for an iframe that is not currently loaded, to finish
         * loading
         * </ol>
         * @param iframe An iframe.
         * @param opt_hasContent Whether to wait for the loaded iframe to have
         * content in its document body.
         */
        constructor(iframe: HTMLIFrameElement|null, opt_hasContent?: boolean);
        intervalId_: any;
        disposeInternal(): void;
        /**
         * Returns the iframe whose load state this IframeLoader monitors.
         */
        getIframe(): HTMLIFrameElement|null;
        /**
         * Returns whether or not the iframe is loaded.
         */
        isLoaded(): boolean;
    }
}
declare module 'goog:goog.net.IframeLoadMonitor' {
    import alias = ಠ_ಠ.clutz.goog.net.IframeLoadMonitor;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
    /**
     * Image loader utility class.  Raises a {@link goog.events.EventType.LOAD}
     * event for each image loaded, with an {@link Image} object as the target
     * of the event, normalized to have {@code naturalHeight} and {@code
     * naturalWidth} attributes.
     *
     * To use this class, run:
     *
     * <pre>
     * var imageLoader = new goog.net.ImageLoader();
     * goog.events.listen(imageLoader, goog.net.EventType.COMPLETE,
     * function(e) { ... });
     * imageLoader.addImage("image_id", "http://path/to/image.gif");
     * imageLoader.start();
     * </pre>
     *
     * The start() method must be called to start image loading.  Images can be
     * added and removed after loading has started, but only those images added
     * before start() was called will be loaded until start() is called again.
     * A goog.net.EventType.COMPLETE event will be dispatched only once all
     * outstanding images have completed uploading.
     */
    class ImageLoader extends ImageLoader_Instance {}
    class ImageLoader_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * Image loader utility class.  Raises a {@link
         * goog.events.EventType.LOAD} event for each image loaded, with an
         * {@link Image} object as the target of the event, normalized to have
         * {@code naturalHeight} and {@code naturalWidth} attributes.
         *
         * To use this class, run:
         *
         * <pre>
         * var imageLoader = new goog.net.ImageLoader();
         * goog.events.listen(imageLoader, goog.net.EventType.COMPLETE,
         * function(e) { ... });
         * imageLoader.addImage("image_id", "http://path/to/image.gif");
         * imageLoader.start();
         * </pre>
         *
         * The start() method must be called to start image loading.  Images can
         * be added and removed after loading has started, but only those images
         * added before start() was called will be loaded until start() is
         * called again. A goog.net.EventType.COMPLETE event will be dispatched
         * only once all outstanding images have completed uploading.
         * @param opt_parent An optional parent element whose document object
         * should be used to load images.
         */
        constructor(opt_parent?: GlobalElement|null);
        /**
         * Adds an image to the image loader, and associates it with the given
         * ID string.  If an image with that ID already exists, it is silently
         * replaced. When the image in question is loaded, the target of the
         * LOAD event will be an {@code Image} object with {@code id} and {@code
         * src} attributes based on these arguments.
         * @param id The ID of the image to load.
         * @param image Either the source URL of the image or the HTML image
         * element itself (or any object with a {@code src} property, really).
         * @param opt_corsRequestType The type of CORS request to use, if any.
         */
        addImage(
            id: string, image: string|Image|null,
            opt_corsRequestType?:
                ಠ_ಠ.clutz.goog.net.ImageLoader.CorsRequestType): void;
        disposeInternal(): void;
        /**
         * Removes the image associated with the given ID string from the image
         * loader. If the image was previously loading, removes any listeners
         * for its events and dispatches a COMPLETE event if all remaining
         * images have now completed.
         * @param id The ID of the image to remove.
         */
        removeImage(id: string): void;
        /**
         * Starts loading all images in the image loader in parallel.  Raises a
         * LOAD event each time an image finishes loading, and a COMPLETE event
         * after all images have finished loading.
         */
        start(): void;
    }
}
declare namespace ಠ_ಠ.clutz.goog.net.ImageLoader {
    type CorsRequestType = string&{clutzEnumBrand: never};
    var CorsRequestType: {
        ANONYMOUS: CorsRequestType,
        USE_CREDENTIALS: CorsRequestType,
    };
}
declare module 'goog:goog.net.ImageLoader' {
    import alias = ಠ_ಠ.clutz.goog.net.ImageLoader;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
    /**
     * Abstract class defining an IP Address.
     *
     * Please use goog.net.IpAddress static methods or
     * goog.net.Ipv4Address/Ipv6Address classes.
     */
    class IpAddress extends IpAddress_Instance {
        /**
         * Parses an IP Address in a string.
         * If the string is malformed, the function will simply return null
         * instead of raising an exception.
         * @param address The IP Address.
         */
        static fromString(address: string): ಠ_ಠ.clutz.goog.net.IpAddress|null;
        /**
         * Tries to parse a string represented as a host portion of an URI.
         * See RFC 3986 for more details on IPv6 addresses inside URI.
         * If the string is malformed, the function will simply return null
         * instead of raising an exception.
         * @param address A RFC 3986 encoded IP address.
         */
        static fromUriString(address: string): ಠ_ಠ.clutz.goog.net.IpAddress
            |null;
    }
    class IpAddress_Instance {
        private noStructuralTyping_: any;
        /**
         * Abstract class defining an IP Address.
         *
         * Please use goog.net.IpAddress static methods or
         * goog.net.Ipv4Address/Ipv6Address classes.
         * @param address The Ip Address.
         * @param version The version number (4, 6).
         */
        constructor(address: ಠ_ಠ.clutz.goog.math.Integer, version: number);
        equals(other: ಠ_ಠ.clutz.goog.net.IpAddress): boolean;
        getVersion(): number;
        isLinkLocal(): boolean;
        isSiteLocal(): boolean;
        toInteger(): ಠ_ಠ.clutz.goog.math.Integer;
        toString(): string;
        toUriString(): string;
    }
}
declare module 'goog:goog.net.IpAddress' {
    import alias = ಠ_ಠ.clutz.goog.net.IpAddress;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
    /**
     * Takes a string or a number and returns a IPv4 Address.
     *
     * This constructor accepts strings and instance of goog.math.Integer.
     * If you pass a goog.math.Integer, make sure that its sign is set to
     * positive.
     */
    class Ipv4Address extends Ipv4Address_Instance {
        /**
         * The Maximum length for a netmask (aka, the number of bits for IPv4).
         */
        static MAX_NETMASK_LENGTH: number;
    }
    class Ipv4Address_Instance extends ಠ_ಠ.clutz.goog.net.IpAddress_Instance {
        /**
         * Takes a string or a number and returns a IPv4 Address.
         *
         * This constructor accepts strings and instance of goog.math.Integer.
         * If you pass a goog.math.Integer, make sure that its sign is set to
         * positive.
         * @param address The address to store.
         */
        constructor(address: string|ಠ_ಠ.clutz.goog.math.Integer);
        isLinkLocal(): boolean;
        isSiteLocal(): boolean;
        toString(): string;
        toUriString(): string;
    }
}
declare module 'goog:goog.net.Ipv4Address' {
    import alias = ಠ_ಠ.clutz.goog.net.Ipv4Address;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
    /**
     * Takes a string or a number and returns an IPv6 Address.
     *
     * This constructor accepts strings and instance of goog.math.Integer.
     * If you pass a goog.math.Integer, make sure that its sign is set to
     * positive.
     */
    class Ipv6Address extends Ipv6Address_Instance {
        /**
         * The Maximum length for a netmask (aka, the number of bits for IPv6).
         */
        static MAX_NETMASK_LENGTH: number;
    }
    class Ipv6Address_Instance extends ಠ_ಠ.clutz.goog.net.IpAddress_Instance {
        /**
         * Takes a string or a number and returns an IPv6 Address.
         *
         * This constructor accepts strings and instance of goog.math.Integer.
         * If you pass a goog.math.Integer, make sure that its sign is set to
         * positive.
         * @param address The address to store.
         */
        constructor(address: string|ಠ_ಠ.clutz.goog.math.Integer);
        /**
         * Will return the mapped IPv4 address in this IPv6 address.
         */
        getMappedIpv4Address(): ಠ_ಠ.clutz.goog.net.Ipv4Address|null;
        isLinkLocal(): boolean;
        isMappedIpv4Address(): boolean;
        isSiteLocal(): boolean;
        toString(): string;
        toUriString(): string;
    }
}
declare module 'goog:goog.net.Ipv6Address' {
    import alias = ಠ_ಠ.clutz.goog.net.Ipv6Address;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
    /**
     * Creates a new cross domain channel that sends data to the specified
     * host URL. By default, if no reply arrives within 5s, the channel
     * assumes the call failed to complete successfully.
     */
    class Jsonp extends Jsonp_Instance {
        /**
         * The prefix for the callback name which will be stored on goog.global.
         */
        static CALLBACKS: string;
    }
    class Jsonp_Instance {
        private noStructuralTyping_: any;
        /**
         * Creates a new cross domain channel that sends data to the specified
         * host URL. By default, if no reply arrives within 5s, the channel
         * assumes the call failed to complete successfully.
         * @param uri The Uri of the server side code that receives data posted
         * through this channel (e.g., "http://maps.google.com/maps/geo").
         * @param opt_callbackParamName The parameter name that is used to
         * specify the callback. Defaults to "callback".
         */
        constructor(
            uri: ಠ_ಠ.clutz.goog.html.TrustedResourceUrl,
            opt_callbackParamName?: string);
        /**
         * Cancels a given request. The request must be exactly the object
         * returned by the send method.
         * @param request The request object returned by the send method.
         */
        cancel(request: GlobalObject|null): void;
        /**
         * Returns the current timeout value, in milliseconds.
         */
        getRequestTimeout(): number;
        /**
         * Sends the given payload to the URL specified at the construction
         * time. The reply is delivered to the given replyCallback. If the
         * errorCallback is specified and the reply does not arrive within the
         * timeout period set on this channel, the errorCallback is invoked
         * with the original payload.
         *
         * If no reply callback is specified, then the response is expected to
         * consist of calls to globally registered functions. No &callback=
         * URL parameter will be sent in the request, and the script element
         * will be cleaned up after the timeout.
         * @param opt_payload Name-value pairs.  If given, these will be added
         * as parameters to the supplied URI as GET parameters to the given
         * server URI.
         * @param opt_replyCallback A function expecting one argument, called
         * when the reply arrives, with the response data.
         * @param opt_errorCallback A function expecting one argument, called on
         * timeout, with the payload (if given), otherwise null.
         * @param opt_callbackParamValue Value to be used as the parameter value
         * for the callback parameter (callbackParamName). To be used when the
         * value needs to be fixed by the client for a particular request, to
         * make use of the cached responses for the request. NOTE: If multiple
         * requests are made with the same opt_callbackParamValue, only the last
         * call will work whenever the response comes back.
         */
        send(
            opt_payload?: GlobalObject|null,
            opt_replyCallback?: (...a: any[]) => any,
            opt_errorCallback?: (...a: any[]) => any,
            opt_callbackParamValue?: string): GlobalObject;
        /**
         * Sets the nonce value for CSP. This nonce value will be added to any
         * created script elements and must match the nonce provided in the
         * Content-Security-Policy header sent by the server for the callback to
         * pass CSP enforcement.
         * @param nonce The CSP nonce value.
         */
        setNonce(nonce: string): void;
        /**
         * Sets the length of time, in milliseconds, this channel is prepared
         * to wait for for a request to complete. If the call is not competed
         * within the set time span, it is assumed to have failed. To wait
         * indefinitely for a request to complete set the timout to a negative
         * number.
         * @param timeout The length of time before calls are interrupted.
         */
        setRequestTimeout(timeout: number): void;
    }
}
declare module 'goog:goog.net.Jsonp' {
    import alias = ಠ_ಠ.clutz.goog.net.Jsonp;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
    /**
     * Provides a wrapper around IframeLoadMonitor, to allow the caller to wait
     * for multiple iframes to load.
     */
    class MultiIframeLoadMonitor extends MultiIframeLoadMonitor_Instance {}
    class MultiIframeLoadMonitor_Instance {
        private noStructuralTyping_: any;
        /**
         * Provides a wrapper around IframeLoadMonitor, to allow the caller to
         * wait for multiple iframes to load.
         * @param iframes Array of iframe elements to wait until they are
         * loaded.
         * @param callback The callback to invoke once the frames have loaded.
         * @param opt_hasContent true if the monitor should wait until the
         * iframes have content (body.firstChild != null).
         */
        constructor(
            iframes: (HTMLIFrameElement|null)[]|null, callback: () => void,
            opt_hasContent?: boolean);
        /**
         * Handles a pending iframe load monitor load event.
         * @param e The goog.net.IframeLoadMonitor.LOAD_EVENT event.
         */
        handleEvent(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Stops monitoring the iframes, cleaning up any associated resources.
         * In general, the object cleans up its own resources before invoking
         * the callback, so this API should only be used if the caller wants to
         * stop the monitoring before the iframes are loaded (for example, if
         * the caller is implementing a timeout).
         */
        stopMonitoring(): void;
    }
}
declare module 'goog:goog.net.MultiIframeLoadMonitor' {
    import alias = ಠ_ಠ.clutz.goog.net.MultiIframeLoadMonitor;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
    /**
     * Base class for network status information providers.
     */
    interface NetworkStatusMonitor extends ಠ_ಠ.clutz.goog.events.Listenable {
        isOnline(): boolean;
    }
}
declare namespace ಠ_ಠ.clutz.goog.net.NetworkStatusMonitor {
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        OFFLINE: EventType,
        ONLINE: EventType,
    };
}
declare module 'goog:goog.net.NetworkStatusMonitor' {
    import alias = ಠ_ಠ.clutz.goog.net.NetworkStatusMonitor;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
    /**
     * Creates an instance of goog.net.NetworkTester which can be used to test
     * for internet connectivity by seeing if an image can be loaded from
     * google.com. It can also be tested with other URLs.
     */
    class NetworkTester extends NetworkTester_Instance {
        /**
         * Default timeout
         */
        static DEFAULT_TIMEOUT_MS: number;
    }
    class NetworkTester_Instance {
        private noStructuralTyping_: any;
        /**
         * Creates an instance of goog.net.NetworkTester which can be used to
         * test for internet connectivity by seeing if an image can be loaded
         * from google.com. It can also be tested with other URLs.
         * @param callback Callback that is called when the test completes. The
         * callback takes a single boolean parameter. True indicates the URL was
         * reachable, false indicates it wasn't.
         * @param opt_handler Handler object for the callback.
         * @param opt_uri URI to use for testing.
         */
        constructor(
            callback: (...a: any[]) => any, opt_handler?: GlobalObject|null,
            opt_uri?: ಠ_ಠ.clutz.goog.Uri|null);
        /**
         * Returns the current attempt count.
         */
        getAttemptCount(): number;
        /**
         * Returns the numer of retries to attempt.
         */
        getNumRetries(): number;
        /**
         * Returns the pause between retries in milliseconds.
         */
        getPauseBetweenRetries(): number;
        /**
         * Returns the timeout in milliseconds.
         */
        getTimeout(): number;
        /**
         * Returns the uri to use for the test.
         */
        getUri(): ಠ_ಠ.clutz.goog.Uri|null;
        /**
         * Returns whether the tester is currently running.
         */
        isRunning(): boolean;
        /**
         * Handles a successful or failed result.
         * @param succeeded Whether the image load succeeded.
         */
        onResult(succeeded: boolean): void;
        /**
         * Sets the timeout in milliseconds.
         * @param retries Number of retries to attempt.
         */
        setNumRetries(retries: number): void;
        /**
         * Sets the pause between retries in milliseconds.
         * @param pauseMs Pause between retries in milliseconds.
         */
        setPauseBetweenRetries(pauseMs: number): void;
        /**
         * Sets the timeout in milliseconds.
         * @param timeoutMs Timeout in milliseconds.
         */
        setTimeout(timeoutMs: number): void;
        /**
         * Sets the uri to use for the test.
         * @param uri The uri for the test.
         */
        setUri(uri: ಠ_ಠ.clutz.goog.Uri|null): void;
        /**
         * Starts the process of testing the network.
         */
        start(): void;
        /**
         * Stops the testing of the network. This is a noop if not running.
         */
        stop(): void;
    }
}
declare module 'goog:goog.net.NetworkTester' {
    import alias = ಠ_ಠ.clutz.goog.net.NetworkTester;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
    /**
     * A WebChannel represents a logical bi-directional channel over which the
     * client communicates with a remote server that holds the other endpoint
     * of the channel. A WebChannel is always created in the context of a shared
     * {@link WebChannelTransport} instance. It is up to the underlying
     * client-side and server-side implementations to decide how or when
     * multiplexing is to be enabled.
     */
    interface WebChannel extends GlobalEventTarget {
        /**
         * Close the WebChannel.
         *
         * This is a full close (shutdown) with no guarantee of FIFO delivery in
         * respect to any in-flight messages sent to the server.
         *
         * If you need such a guarantee, see the Half the halfClose() method.
         */
        close(...a: any[]): any;
        getRuntimeProperties(): ಠ_ಠ.clutz.goog.net.WebChannel.RuntimeProperties;
        /**
         * Half-close the WebChannel.
         *
         * Half-close semantics:
         * 1. delivered as a regular message in FIFO programming order
         * 2. the server is expected to return a half-close too (with or without
         * application involved), which will trigger a full close (shutdown)
         * on the client side
         * 3. for now, the half-close event defined for server-initiated
         * half-close is not exposed to the client application
         * 4. a client-side half-close may be triggered internally when the
         * client receives a half-close from the server; and the client is
         * expected to do a full close after the half-close is acked and
         * delivered on the server-side.
         * 5. Full close is always a forced one. See the close() method.
         *
         * New messages sent after halfClose() will be dropped.
         */
        halfClose(...a: any[]): any;
        /**
         * Open the WebChannel against the URI specified in the constructor.
         */
        open(...a: any[]): any;
        /**
         * Sends a message to the server that maintains the other end point of
         * the WebChannel.
         *
         * O-RTT behavior:
         * 1. messages sent before open() is called will always be delivered as
         * part of the handshake, i.e. with 0-RTT
         * 2. messages sent after open() is called but before the OPEN event
         * is received will be delivered as part of the handshake if
         * send() is called from the same execution context as open().
         * 3. otherwise, those messages will be buffered till the handshake
         * is completed (which will fire the OPEN event).
         * @param message The message to send.
         */
        send(a: ArrayBuffer|Blob|{[key: string]: GlobalObject | string}|any[]|
             string): any;
    }
}
declare namespace ಠ_ಠ.clutz.goog.net.WebChannel {
    class ErrorEvent extends ErrorEvent_Instance {}
    class ErrorEvent_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
        /**
         * The event interface for the ERROR event.
         */
        constructor();
        /**
         * The error status.
         */
        status: ಠ_ಠ.clutz.goog.net.WebChannel.ErrorStatus;
    }
    enum ErrorStatus {
        NETWORK_ERROR,
        OK,
        SERVER_ERROR,
    }
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        CLOSE: EventType,
        ERROR: EventType,
        MESSAGE: EventType,
        OPEN: EventType,
    };
    type MessageData =
        ArrayBuffer|Blob|{[key: string]: GlobalObject | string}|any[]|string;
    class MessageEvent extends MessageEvent_Instance {}
    class MessageEvent_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
        /**
         * The event interface for the MESSAGE event.
         */
        constructor();
        /**
         * The content of the message received from the server.
         */
        data: ArrayBuffer|Blob|{[key: string]: GlobalObject | string}|any[]|
            string;
        /**
         * The metadata key when the MESSAGE event represents a metadata
         * message.
         */
        metadataKey?: string;
    }
    type Options = {
        backgroundChannelTest?: boolean,
        clientProfile?: string,
        clientProtocolHeaderRequired?: boolean,
        concurrentRequestLimit?: number,
        disableRedact?: boolean,
        fastHandshake?: boolean,
        httpHeadersOverwriteParam?: string,
        httpSessionIdParam?: string,
        initMessageHeaders?: {[key: string]: string},
        messageContentType?: string,
        messageHeaders?: {[key: string]: string},
        messageUrlParams?: {[key: string]: string},
        sendRawJson?: boolean,
        supportsCrossDomainXhr?: boolean,
        testUrl?: string
    };
    interface RuntimeProperties {
        /**
         * This method is used by the application to generate an ack-commit
         * response for the given commitId. Commit protocol spec:
         * https://github.com/bidiweb/webchannel/blob/master/commit.md
         * @param commitId The commitId which denotes the commit request from
         * the server that needs be ack'ed.
         */
        ackCommit(a: GlobalObject): any;
        /**
         * This method generates an in-band commit request to the server, which
         * will ack the commit request as soon as all messages sent prior to
         * this commit request have been committed by the application.
         *
         * Committing a message has a stronger semantics than delivering a
         * message to the application. Detail spec:
         * https://github.com/bidiweb/webchannel/blob/master/commit.md
         *
         * Timeout or cancellation is not supported and the application may have
         * to abort the channel if the commit-ack fails to arrive in time.
         * @param callback The callback will be invoked once an ack has been
         * received for the current commit or any newly issued commit.
         */
        commit(a: () => any): any;
        getConcurrentRequestLimit(): number;
        /**
         * For applications to query the current HTTP session id, sent by the
         * server during the initial handshake.
         */
        getHttpSessionId(): string|null;
        getLastStatusCode(): number;
        /**
         * This method may be used by the application to recover from a peer
         * failure or to enable sender-initiated flow-control.
         *
         * Detail spec:
         * https://github.com/bidiweb/webchannel/blob/master/commit.md
         */
        getNonAckedMessageCount(): number;
        getPendingRequestCount(): number;
        /**
         * For applications that need support multiple channels (e.g. from
         * different tabs) to the same origin, use this method to decide if SPDY
         * is enabled and therefore it is safe to open multiple channels.
         *
         * If SPDY is disabled, the application may choose to limit the number
         * of active channels to one or use other means such as sub-domains to
         * work around the browser connection limit.
         */
        isSpdyEnabled(): boolean;
        /**
         * A low water-mark message count to notify the application when the
         * flow-control condition is cleared, that is, when the application is
         * able to send more messages.
         *
         * We expect the application to configure a high water-mark message
         * count, which is checked via getNonAckedMessageCount(). When the high
         * water-mark is exceeded, the application should install a callback via
         * this method to be notified when to start to send new messages.
         * @param count The low water-mark count. It is an error to pass a
         * non-positive value.
         * @param callback The call back to notify the application when
         * NonAckedMessageCount is below the specified low water-mark count. Any
         * previously registered callback is cleared. This new callback will be
         * cleared once it has been fired, or when the channel is closed or
         * aborted.
         */
        notifyNonAckedMessageCount(a: number, b: () => any): any;
        /**
         * This method registers a callback to handle the commit request sent
         * by the server. Commit protocol spec:
         * https://github.com/bidiweb/webchannel/blob/master/commit.md
         * @param callback The callback will take an opaque commitId which needs
         * be passed back to the server when an ack-commit response is generated
         * by the client application, via ackCommit().
         */
        onCommit(a: (a: GlobalObject) => any): any;
    }
    var X_CLIENT_PROTOCOL: string;
    var X_CLIENT_PROTOCOL_WEB_CHANNEL: string;
    var X_CLIENT_WIRE_PROTOCOL: string;
    var X_HTTP_SESSION_ID: string;
    var X_WEBCHANNEL_CLIENT_PROFILE: string;
    var X_WEBCHANNEL_CONTENT_TYPE: string;
}
declare module 'goog:goog.net.WebChannel' {
    import alias = ಠ_ಠ.clutz.goog.net.WebChannel;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
    /**
     * A WebChannelTransport instance represents a shared context of logical
     * connectivity between a browser client and a remote origin.
     *
     * Over a single WebChannelTransport instance, multiple WebChannels may be
     * created against different URLs, which may all share the same
     * underlying connectivity (i.e. TCP connection) whenever possible.
     *
     * When multi-domains are supported, such as CORS, multiple origins may be
     * supported over a single WebChannelTransport instance at the same time.
     *
     * Sharing between different window contexts such as tabs is not addressed
     * by WebChannelTransport. Applications may choose HTML5 shared workers
     * or other techniques to access the same transport instance
     * across different window contexts.
     */
    interface WebChannelTransport {
        /**
         * Create a new WebChannel instance.
         *
         * The new WebChannel is to be opened against the server-side resource
         * as specified by the given URL. See {@link goog.net.WebChannel} for
         * detailed semantics.
         * @param url The URL path for the new WebChannel instance.
         * @param opt_options Configuration for the new WebChannel instance. The
         * configuration object is reusable after the new channel instance is
         * created.
         */
        createWebChannel(a: string, b?: ಠ_ಠ.clutz.goog.net.WebChannel.Options):
            ಠ_ಠ.clutz.goog.net.WebChannel;
    }
}
declare namespace ಠ_ಠ.clutz.goog.net.WebChannelTransport {
    var CLIENT_VERSION: number;
}
declare module 'goog:goog.net.WebChannelTransport' {
    import alias = ಠ_ಠ.clutz.goog.net.WebChannelTransport;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
    /**
     * Class encapsulating the logic for using a WebSocket.
     */
    class WebSocket extends WebSocket_Instance {
        /**
         * Installs exception protection for all entry points introduced by
         * goog.net.WebSocket instances which are not protected by
         * {@link goog.debug.ErrorHandler#protectWindowSetTimeout},
         * {@link goog.debug.ErrorHandler#protectWindowSetInterval}, or
         * {@link goog.events.protectBrowserEventEntryPoint}.
         * @param errorHandler Error handler with which to protect the entry
         * points.
         */
        static protectEntryPoints(errorHandler:
                                      ಠ_ಠ.clutz.goog.debug.ErrorHandler): void;
    }
    class WebSocket_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * Class encapsulating the logic for using a WebSocket.
         * @param opt_params Parameters describing behavior of the WebSocket.
         * The boolean 'true' is equivalent to setting Options.autoReconnect to
         * be true.
         */
        constructor(
            opt_params?: boolean|ಠ_ಠ.clutz.goog.net.WebSocket.Options,
            opt_getNextReconnect?: (a: number) => number);
        /**
         * Closes the web socket connection.
         */
        close(): void;
        disposeInternal(): void;
        /**
         * Gets the number of bytes of data that have been queued using calls to
         * send() but not yet transmitted to the network.
         */
        getBufferedAmount(): number;
        /**
         * Checks to see if the web socket is open or not.
         */
        isOpen(): boolean;
        /**
         * Creates and opens the actual WebSocket.  Only call this after
         * attaching the appropriate listeners to this object.  If listeners
         * aren't registered, then the {@code
         * goog.net.WebSocket.EventType.OPENED} event might be missed.
         * @param url The URL to which to connect.
         * @param opt_protocol The subprotocol to use.  The connection will only
         * be established if the server reports that it has selected this
         * subprotocol. The subprotocol name must all be a non-empty ASCII
         * string with no control characters and no spaces in them (i.e. only
         * characters in the range U+0021 to U+007E).
         */
        open(url: string, opt_protocol?: string): void;
        /**
         * Sends the message over the web socket.
         * @param message The message to send.
         */
        send(message: string|ArrayBuffer|ArrayBufferView): void;
    }
}
declare namespace ಠ_ಠ.clutz.goog.net.WebSocket {
    type BinaryType = string&{clutzEnumBrand: never};
    var BinaryType: {
        ARRAY_BUFFER: BinaryType,
        BLOB: BinaryType,
    };
    interface Options {
        /**
         * True if the web socket should automatically reconnect or not.  This
         * is true by default.
         */
        autoReconnect?: boolean;
        /**
         * Specifies the type of incoming binary messages, either Blob or
         * ArrayBuffer.
         */
        binaryType?: ಠ_ಠ.clutz.goog.net.WebSocket.BinaryType;
        /**
         * A function for obtaining the time until the next reconnect attempt.
         * Given the reconnect attempt count (which is a positive integer), the
         * function should return a positive integer representing the
         * milliseconds to the next reconnect attempt.  The default function
         * used is an exponential back-off. Note that this function is never
         * called if auto reconnect is disabled.
         */
        getNextReconnect?: (a: number) => number;
    }
}
declare module 'goog:goog.net.WebSocket' {
    import alias = ಠ_ಠ.clutz.goog.net.WebSocket;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.WebSocket {
    /**
     * Object representing an error event. This is fired whenever an error
     * occurs on the web socket.
     */
    class ErrorEvent extends ErrorEvent_Instance {}
    class ErrorEvent_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
        /**
         * Object representing an error event. This is fired whenever an error
         * occurs on the web socket.
         * @param data The error data.
         */
        constructor(data: string);
        /**
         * The error data coming from the web socket.
         */
        data: string;
    }
}
declare module 'goog:goog.net.WebSocket.ErrorEvent' {
    import alias = ಠ_ಠ.clutz.goog.net.WebSocket.ErrorEvent;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.WebSocket {
    /**
     * The events fired by the web socket.
     */
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        CLOSED: EventType,
        ERROR: EventType,
        MESSAGE: EventType,
        OPENED: EventType,
    };
}
declare module 'goog:goog.net.WebSocket.EventType' {
    import alias = ಠ_ಠ.clutz.goog.net.WebSocket.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.WebSocket {
    /**
     * Object representing a new incoming message event.
     */
    class MessageEvent extends MessageEvent_Instance {}
    class MessageEvent_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
        /**
         * Object representing a new incoming message event.
         * @param message The raw message coming from the web socket.
         */
        constructor(message: string);
        /**
         * The new message from the web socket.
         */
        message: string;
    }
}
declare module 'goog:goog.net.WebSocket.MessageEvent' {
    import alias = ಠ_ಠ.clutz.goog.net.WebSocket.MessageEvent;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
    /**
     * An xhr factory subclass which can be constructed using two factory
     * methods. This exists partly to allow the preservation of
     * goog.net.XmlHttp.setFactory() with an unchanged signature.
     */
    class WrapperXmlHttpFactory extends WrapperXmlHttpFactory_Instance {}
    class WrapperXmlHttpFactory_Instance extends
        ಠ_ಠ.clutz.goog.net.XmlHttpFactory_Instance {
        /**
         * An xhr factory subclass which can be constructed using two factory
         * methods. This exists partly to allow the preservation of
         * goog.net.XmlHttp.setFactory() with an unchanged signature.
         * @param xhrFactory A function which returns a new XHR object.
         * @param optionsFactory A function which returns the options associated
         * with xhr objects from this factory.
         */
        constructor(
            xhrFactory: () => ಠ_ಠ.clutz.goog.net.XhrLike | XMLHttpRequest,
            optionsFactory: () => GlobalObject);
        createInstance(): ಠ_ಠ.clutz.goog.net.XhrLike|XMLHttpRequest;
        getOptions(): GlobalObject|null;
    }
}
declare module 'goog:goog.net.WrapperXmlHttpFactory' {
    import alias = ಠ_ಠ.clutz.goog.net.WrapperXmlHttpFactory;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
    /**
     * Basic class for handling XMLHttpRequests.
     */
    class XhrIo extends XhrIo_Instance {
        /**
         * The Content-Transfer-Encoding HTTP header name
         */
        static CONTENT_TRANSFER_ENCODING: string;
        /**
         * The Content-Type HTTP header name
         */
        static CONTENT_TYPE_HEADER: string;
        /**
         * The Content-Type HTTP header value for a url-encoded form
         */
        static FORM_CONTENT_TYPE: string;
        /**
         * The pattern matching the 'http' and 'https' URI schemes
         */
        static HTTP_SCHEME_PATTERN: RegExp;
        /**
         * The methods that typically come along with form data.  We set
         * different headers depending on whether the HTTP action is one of
         * these.
         */
        static METHODS_WITH_FORM_DATA: string[];
        /**
         * Disposes all non-disposed instances of goog.net.XhrIo created by
         * {@link goog.net.XhrIo.send}.
         * {@link goog.net.XhrIo.send} cleans up the goog.net.XhrIo instance
         * it creates when the request completes or fails.  However, if
         * the request never completes, then the goog.net.XhrIo is not disposed.
         * This can occur if the window is unloaded before the request
         * completes. We could have {@link goog.net.XhrIo.send} return the
         * goog.net.XhrIo it creates and make the client of {@link
         * goog.net.XhrIo.send} be responsible for disposing it in this case.
         * However, this makes things significantly more complicated for the
         * client, and the whole point of {@link goog.net.XhrIo.send} is that
         * it's simple and easy to use. Clients of {@link goog.net.XhrIo.send}
         * should call
         * {@link goog.net.XhrIo.cleanup} when doing final
         * cleanup on window unload.
         */
        static cleanup(): void;
        /**
         * Installs exception protection for all entry point introduced by
         * goog.net.XhrIo instances which are not protected by
         * {@link goog.debug.ErrorHandler#protectWindowSetTimeout},
         * {@link goog.debug.ErrorHandler#protectWindowSetInterval}, or
         * {@link goog.events.protectBrowserEventEntryPoint}.
         * @param errorHandler Error handler with which to protect the entry
         * point(s).
         */
        static protectEntryPoints(errorHandler:
                                      ಠ_ಠ.clutz.goog.debug.ErrorHandler|
                                  null): void;
        /**
         * Static send that creates a short lived instance of XhrIo to send the
         * request.
         * @param url Uri to make request to.
         * @param opt_callback Callback function for when request is complete.
         * @param opt_method Send method, default: GET.
         * @param opt_content Body data.
         * @param opt_headers Map of headers to add to the request.
         * @param opt_timeoutInterval Number of milliseconds after which an
         * incomplete request will be aborted; 0 means no timeout is set.
         * @param opt_withCredentials Whether to send credentials with the
         * request. Default to false. See {@link
         * goog.net.XhrIo#setWithCredentials}.
         */
        static send(
            url: string|ಠ_ಠ.clutz.goog.Uri|null,
            opt_callback?: ((a?: any) => any)|null, opt_method?: string,
            opt_content?: ArrayBuffer|null|ArrayBufferView|Blob|Document|
            FormData|string,
            opt_headers?: GlobalObject|null, opt_timeoutInterval?: number,
            opt_withCredentials?: boolean): ಠ_ಠ.clutz.goog.net.XhrIo;
    }
    class XhrIo_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * Basic class for handling XMLHttpRequests.
         * @param opt_xmlHttpFactory Factory to use when creating XMLHttpRequest
         * objects.
         */
        constructor(opt_xmlHttpFactory?: ಠ_ಠ.clutz.goog.net.XmlHttpFactory|
                    null);
        /**
         * Map of default headers to add to every request, use:
         * XhrIo.headers.set(name, value)
         */
        headers: ಠ_ಠ.clutz.goog.structs.Map<any, any>;
        /**
         * Abort the current XMLHttpRequest
         * @param opt_failureCode Optional error code to use - defaults to
         * ABORT.
         */
        abort(opt_failureCode?: ಠ_ಠ.clutz.goog.net.ErrorCode): void;
        /**
         * Creates a new XHR object.
         */
        createXhr(): ಠ_ಠ.clutz.goog.net.XhrLike|XMLHttpRequest;
        /**
         * Nullifies all callbacks to reduce risks of leaks.
         */
        disposeInternal(): void;
        /**
         * Gets the text of all the headers in the response.
         * Will only return correct result when called from the context of a
         * callback and the request has completed.
         */
        getAllResponseHeaders(): string;
        /**
         * Gets the text of all the headers in the response. As opposed to
         * {@link #getAllResponseHeaders}, this method does not require that the
         * request has completed.
         */
        getAllStreamingResponseHeaders(): string;
        /**
         * Get the last error message
         */
        getLastError(): string;
        /**
         * Get the last error message
         */
        getLastErrorCode(): ಠ_ಠ.clutz.goog.net.ErrorCode;
        /**
         * Get the last Uri that was requested
         */
        getLastUri(): string;
        /**
         * Gets whether progress events are enabled.
         */
        getProgressEventsEnabled(): boolean;
        /**
         * Get the readystate from the Xhr object
         * Will only return correct result when called from the context of a
         * callback
         */
        getReadyState(): ಠ_ಠ.clutz.goog.net.XmlHttp.ReadyState;
        /**
         * Get the response as the type specificed by {@link #setResponseType}.
         * At time of writing, this is only directly supported in very recent
         * versions of WebKit (10.0.612.1 dev and later). If the field is not
         * supported directly, we will try to emulate it.
         *
         * Emulating the response means following the rules laid out at
         * http://www.w3.org/TR/XMLHttpRequest/#the-response-attribute
         *
         * On browsers with no support for this (Chrome < 10, Firefox < 4, etc),
         * only response types of DEFAULT or TEXT may be used, and the response
         * returned will be the text response.
         *
         * On browsers with Mozilla's draft support for array buffers (Firefox
         * 4, 5), only response types of DEFAULT, TEXT, and ARRAY_BUFFER may be
         * used, and the response returned will be either the text response or
         * the Mozilla implementation of the array buffer response.
         *
         * On browsers will full support, any valid response type supported by
         * the browser may be used, and the response provided by the browser
         * will be returned.
         */
        getResponse(): any;
        /**
         * Get the response body from the Xhr object. This property is only
         * available in IE since version 7 according to MSDN:
         * http://msdn.microsoft.com/en-us/library/ie/ms534368(v=vs.85).aspx
         * Will only return correct result when called from the context of a
         * callback.
         *
         * One option is to construct a VBArray from the returned object and
         * convert it to a JavaScript array using the toArray method:
         * {@code (new window['VBArray'](xhrIo.getResponseBody())).toArray()}
         * This will result in an array of numbers in the range of [0..255]
         *
         * Another option is to use the VBScript CStr method to convert it into
         * a string as outlined in http://stackoverflow.com/questions/1919972
         */
        getResponseBody(): GlobalObject|null;
        /**
         * Get the value of the response-header with the given name from the Xhr
         * object Will only return correct result when called from the context
         * of a callback and the request has completed
         * @param key The name of the response-header to retrieve.
         */
        getResponseHeader(key: string): string|undefined;
        /**
         * Returns all response headers as a key-value map.
         * Multiple values for the same header key can be combined into one,
         * separated by a comma and a space.
         * Note that the native getResponseHeader method for retrieving a single
         * header does a case insensitive match on the header name. This method
         * does not include any case normalization logic, it will just return a
         * key-value representation of the headers. See:
         * http://www.w3.org/TR/XMLHttpRequest/#the-getresponseheader()-method
         */
        getResponseHeaders(): {[key: string]: string};
        /**
         * Get the response and evaluates it as JSON from the Xhr object
         * Will only return correct result when called from the context of a
         * callback
         * @param opt_xssiPrefix Optional XSSI prefix string to use for
         * stripping of the response before parsing. This needs to be set only
         * if your backend server prepends the same prefix string to the JSON
         * response.
         */
        getResponseJson(opt_xssiPrefix?: string): GlobalObject|null|undefined;
        /**
         * Get the response text from the Xhr object
         * Will only return correct result when called from the context of a
         * callback.
         */
        getResponseText(): string;
        /**
         * Gets the desired type for the response.
         */
        getResponseType(): ಠ_ಠ.clutz.goog.net.XhrIo.ResponseType;
        /**
         * Get the response XML from the Xhr object
         * Will only return correct result when called from the context of a
         * callback.
         */
        getResponseXml(): Document|null;
        /**
         * Get the status from the Xhr object
         * Will only return correct result when called from the context of a
         * callback
         */
        getStatus(): number;
        /**
         * Get the status text from the Xhr object
         * Will only return correct result when called from the context of a
         * callback
         */
        getStatusText(): string;
        /**
         * Get the value of the response-header with the given name from the Xhr
         * object. As opposed to {@link #getResponseHeader}, this method does
         * not require that the request has completed.
         * @param key The name of the response-header to retrieve.
         */
        getStreamingResponseHeader(key: string): string|null;
        /**
         * Returns the number of milliseconds after which an incomplete request
         * will be aborted, or 0 if no timeout is set.
         */
        getTimeoutInterval(): number;
        /**
         * Gets whether a "credentialed" request is to be sent.
         */
        getWithCredentials(): boolean;
        isActive(): boolean;
        isComplete(): boolean;
        isSuccess(): boolean;
        /**
         * Instance send that actually uses XMLHttpRequest to make a server
         * call.
         * @param url Uri to make request to.
         * @param opt_method Send method, default: GET.
         * @param opt_content Body data.
         * @param opt_headers Map of headers to add to the request.
         */
        send(
            url: string|ಠ_ಠ.clutz.goog.Uri|null, opt_method?: string,
            opt_content?: ArrayBuffer|null|ArrayBufferView|Blob|Document|
            FormData|string,
            opt_headers?: GlobalObject|null): void;
        /**
         * Sets whether progress events are enabled for this request. Note
         * that progress events require pre-flight OPTIONS request handling
         * for CORS requests, and may cause trouble with older browsers. See
         * progressEventsEnabled_ for details.
         * @param enabled Whether progress events should be enabled.
         */
        setProgressEventsEnabled(enabled: boolean): void;
        /**
         * Sets the desired type for the response. At time of writing, this is
         * only supported in very recent versions of WebKit (10.0.612.1 dev and
         * later).
         *
         * If this is used, the response may only be accessed via {@link
         * #getResponse}.
         * @param type The desired type for the response.
         */
        setResponseType(type: ಠ_ಠ.clutz.goog.net.XhrIo.ResponseType): void;
        /**
         * Sets the number of milliseconds after which an incomplete request
         * will be aborted and a {@link goog.net.EventType.TIMEOUT} event
         * raised; 0 means no timeout is set.
         * @param ms Timeout interval in milliseconds; 0 means none.
         */
        setTimeoutInterval(ms: number): void;
        /**
         * Sets whether a "credentialed" request that is aware of cookie and
         * authentication information should be made. This option is only
         * supported by browsers that support HTTP Access Control. As of this
         * writing, this option is not supported in IE.
         * @param withCredentials Whether this should be a "credentialed"
         * request.
         */
        setWithCredentials(withCredentials: boolean): void;
    }
}
declare module 'goog:goog.net.XhrIo' {
    import alias = ಠ_ಠ.clutz.goog.net.XhrIo;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.XhrIo {
    /**
     * Response types that may be requested for XMLHttpRequests.
     */
    type ResponseType = string&{clutzEnumBrand: never};
    var ResponseType: {
        ARRAY_BUFFER: ResponseType,
        BLOB: ResponseType,
        DEFAULT: ResponseType,
        DOCUMENT: ResponseType,
        TEXT: ResponseType,
    };
}
declare module 'goog:goog.net.XhrIo.ResponseType' {
    import alias = ಠ_ಠ.clutz.goog.net.XhrIo.ResponseType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
    /**
     * A pool of XhrIo objects.
     */
    class XhrIoPool extends XhrIoPool_Instance {}
    class XhrIoPool_Instance extends ಠ_ಠ.clutz.goog.structs.PriorityPool<any> {
        /**
         * A pool of XhrIo objects.
         * @param opt_headers Map of default headers to add to every request.
         * @param opt_minCount Minimum number of objects (Default: 0).
         * @param opt_maxCount Maximum number of objects (Default: 10).
         * @param opt_withCredentials Add credentials to every request (Default:
         * false).
         */
        constructor(
            opt_headers?: ಠ_ಠ.clutz.goog.structs.Map<any, any>|null,
            opt_minCount?: number, opt_maxCount?: number,
            opt_withCredentials?: boolean);
        /**
         * Creates an instance of an XhrIo object to use in the pool.
         */
        createObject(): ಠ_ಠ.clutz.goog.net.XhrIo;
        /**
         * Determine if an object has become unusable and should not be used.
         * @param obj The object to test.
         */
        objectCanBeReused(obj: GlobalObject|null): boolean;
    }
}
declare module 'goog:goog.net.XhrIoPool' {
    import alias = ಠ_ಠ.clutz.goog.net.XhrIoPool;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
    /**
     * Interface for the common parts of XMLHttpRequest.
     *
     * Mostly copied from externs/w3c_xml.js.
     */
    interface XhrLike {
        abort(): void;
        getAllResponseHeaders(): string;
        getResponseHeader(header: string): string;
        onreadystatechange?: (() => any)|null;
        open(
            method: string, url: string, opt_async?: boolean|null,
            opt_user?: string|null, opt_password?: string|null): void;
        readyState: number;
        responseText: string;
        responseXML: Document|null;
        send(opt_data?: ArrayBuffer|null|ArrayBufferView|Blob|Document|FormData|
             string): void;
        setRequestHeader(header: string, value: string): void;
        status: number;
        statusText: string;
    }
}
declare namespace ಠ_ಠ.clutz.goog.net.XhrLike {
    type OrNative = ಠ_ಠ.clutz.goog.net.XhrLike|XMLHttpRequest;
}
declare module 'goog:goog.net.XhrLike' {
    import alias = ಠ_ಠ.clutz.goog.net.XhrLike;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
    /**
     * A manager of an XhrIoPool.
     */
    class XhrManager extends XhrManager_Instance {}
    class XhrManager_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * A manager of an XhrIoPool.
         * @param opt_maxRetries Max. number of retries (Default: 1).
         * @param opt_headers Map of default headers to add to every request.
         * @param opt_minCount Min. number of objects (Default: 0).
         * @param opt_maxCount Max. number of objects (Default: 10).
         * @param opt_timeoutInterval Timeout (in ms) before aborting an attempt
         * (Default: 0ms).
         * @param opt_withCredentials Add credentials to every request (Default:
         * false).
         */
        constructor(
            opt_maxRetries?: number,
            opt_headers?: ಠ_ಠ.clutz.goog.structs.Map<any, any>|null,
            opt_minCount?: number, opt_maxCount?: number,
            opt_timeoutInterval?: number, opt_withCredentials?: boolean);
        /**
         * Aborts the request associated with id.
         * @param id The id of the request to abort.
         * @param opt_force If true, remove the id now so it can be reused. No
         * events are fired and the callback is not called when forced.
         */
        abort(id: string, opt_force?: boolean): void;
        disposeInternal(): void;
        /**
         * Returns the number of requests either in flight, or waiting to be
         * sent. The count will include the current request if used within a
         * COMPLETE event handler or callback.
         */
        getOutstandingCount(): number;
        /**
         * Returns an array of request ids that are either in flight, or waiting
         * to be sent. The id of the current request will be included if used
         * within a COMPLETE event handler or callback.
         */
        getOutstandingRequestIds(): string[];
        /**
         * Registers the given request to be sent. Throws an error if a request
         * already exists with the given ID.
         * NOTE: It is not sent immediately. It is buffered and will be sent
         * when an XhrIo object becomes available, taking into account the
         * request's priority. Note also that requests of equal priority are
         * sent in an implementation specific order - to get FIFO queue
         * semantics use a monotonically increasing priority for successive
         * requests.
         * @param id The id of the request.
         * @param url Uri to make the request to.
         * @param opt_method Send method, default: GET.
         * @param opt_content Post data.
         * @param opt_headers Map of headers to add to the request.
         * @param opt_priority The priority of the request. A smaller value
         * means a higher priority.
         * @param opt_callback Callback function for when request is complete.
         * The only param is the event object from the COMPLETE event.
         * @param opt_maxRetries The maximum number of times the request should
         * be retried.
         * @param opt_responseType The response type of this request; defaults
         * to goog.net.XhrIo.ResponseType.DEFAULT.
         * @param opt_withCredentials Add credentials to this request, default:
         * false.
         */
        send(
            id: string, url: string, opt_method?: string,
            opt_content?: ArrayBuffer|null|ArrayBufferView|Blob|Document|
            FormData|string,
            opt_headers?: GlobalObject|null, opt_priority?: number,
            opt_callback?: (...a: any[]) => any, opt_maxRetries?: number,
            opt_responseType?: ಠ_ಠ.clutz.goog.net.XhrIo.ResponseType,
            opt_withCredentials?: boolean):
            ಠ_ಠ.clutz.goog.net.XhrManager.Request;
        /**
         * Sets the number of milliseconds after which an incomplete request
         * will be aborted. Zero means no timeout is set.
         * @param ms Timeout interval in milliseconds; 0 means none.
         */
        setTimeoutInterval(ms: number): void;
    }
}
declare module 'goog:goog.net.XhrManager' {
    import alias = ಠ_ಠ.clutz.goog.net.XhrManager;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.XhrManager {
    /**
     * An event dispatched by XhrManager.
     */
    class Event extends Event_Instance {}
    class Event_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
        /**
         * An event dispatched by XhrManager.
         * @param type Event Type.
         * @param target Reference to the object that is the target of this
         * event.
         * @param id The id of the request this event is for.
         * @param xhrIo The XhrIo object of the request.
         */
        constructor(
            type: ಠ_ಠ.clutz.goog.net.EventType,
            target: ಠ_ಠ.clutz.goog.net.XhrManager|null, id: string,
            xhrIo: ಠ_ಠ.clutz.goog.net.XhrIo|null);
        /**
         * The id of the request this event is for.
         */
        id: string;
        /**
         * The XhrIo object of the request.
         */
        xhrIo: ಠ_ಠ.clutz.goog.net.XhrIo|null;
    }
}
declare module 'goog:goog.net.XhrManager.Event' {
    import alias = ಠ_ಠ.clutz.goog.net.XhrManager.Event;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.XhrManager {
    /**
     * An encapsulation of everything needed to make a Xhr request.
     * NOTE: This is used internal to the XhrManager.
     */
    class Request extends Request_Instance {}
    class Request_Instance {
        private noStructuralTyping_: any;
        /**
         * An encapsulation of everything needed to make a Xhr request.
         * NOTE: This is used internal to the XhrManager.
         * @param url Uri to make the request too.
         * @param xhrEventCallback Callback attached to the events of the XhrIo
         * object of the request.
         * @param opt_method Send method, default: GET.
         * @param opt_content Post data.
         * @param opt_headers Map of headers to add to the request.
         * @param opt_callback Callback function for when request is complete.
         * NOTE: Only 1 callback supported across all events.
         * @param opt_maxRetries The maximum number of times the request should
         * be retried (Default: 1).
         * @param opt_responseType The response type of this request; defaults
         * to goog.net.XhrIo.ResponseType.DEFAULT.
         * @param opt_withCredentials Add credentials to this request, default:
         * false.
         */
        constructor(
            url: string, xhrEventCallback: (...a: any[]) => any,
            opt_method?: string,
            opt_content?: ArrayBuffer|null|ArrayBufferView|Blob|Document|
            FormData|string,
            opt_headers?: GlobalObject|null,
            opt_callback?: (...a: any[]) => any, opt_maxRetries?: number,
            opt_responseType?: ಠ_ಠ.clutz.goog.net.XhrIo.ResponseType,
            opt_withCredentials?: boolean);
        /**
         * The XhrIo instance handling this request. Set in handleAvailableXhr.
         */
        xhrIo: ಠ_ಠ.clutz.goog.net.XhrIo|null;
        /**
         * Gets the aborted status.
         */
        getAborted(): boolean;
        /**
         * Gets the number of attempts so far.
         */
        getAttemptCount(): number;
        /**
         * Gets the callback for when the request is complete.
         */
        getCompleteCallback(): ((...a: any[]) => any)|undefined;
        /**
         * Gets the completed status.
         */
        getCompleted(): boolean;
        /**
         * Gets the post data.
         */
        getContent(): ArrayBuffer|null|ArrayBufferView|Blob|Document|FormData
            |string|undefined;
        /**
         * Gets the map of headers.
         */
        getHeaders(): GlobalObject|null;
        /**
         * Gets the maximum number of times the request should be retried.
         */
        getMaxRetries(): number;
        /**
         * Gets the send method.
         */
        getMethod(): string;
        /**
         * Gets the response type that will be set on this request's XhrIo when
         * it's available.
         */
        getResponseType(): ಠ_ಠ.clutz.goog.net.XhrIo.ResponseType;
        /**
         * Gets the uri.
         */
        getUrl(): string;
        /**
         * Gets the withCredentials flag.
         */
        getWithCredentials(): boolean;
        /**
         * Gets the callback attached to the events of the XhrIo object.
         */
        getXhrEventCallback(): (...a: any[]) => any;
        /**
         * Returns whether the request has reached the maximum number of
         * retries.
         */
        hasReachedMaxRetries(): boolean;
        /**
         * Increases the number of attempts so far.
         */
        increaseAttemptCount(): void;
        /**
         * Sets the aborted status.
         * @param aborted True if the request was aborted, otherwise False.
         */
        setAborted(aborted: boolean): void;
        /**
         * Sets the completed status.
         * @param complete The completed status.
         */
        setCompleted(complete: boolean): void;
    }
}
declare module 'goog:goog.net.XhrManager.Request' {
    import alias = ಠ_ಠ.clutz.goog.net.XhrManager.Request;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
    /**
     * Static class for creating XMLHttpRequest objects.
     */
    function XmlHttp(): ಠ_ಠ.clutz.goog.net.XhrLike|XMLHttpRequest;
}
declare module 'goog:goog.net.XmlHttp' {
    import alias = ಠ_ಠ.clutz.goog.net.XmlHttp;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.XmlHttp {
    /**
     * Type of options that an XmlHttp object can have.
     */
    enum OptionType {
        LOCAL_REQUEST_ERROR,
        USE_NULL_FUNCTION,
    }
}
declare module 'goog:goog.net.XmlHttp.OptionType' {
    import alias = ಠ_ಠ.clutz.goog.net.XmlHttp.OptionType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.XmlHttp {
    /**
     * Status constants for XMLHTTP, matches:
     * https://msdn.microsoft.com/en-us/library/ms534361(v=vs.85).aspx
     */
    enum ReadyState {
        COMPLETE,
        INTERACTIVE,
        LOADED,
        LOADING,
        UNINITIALIZED,
    }
}
declare module 'goog:goog.net.XmlHttp.ReadyState' {
    import alias = ಠ_ಠ.clutz.goog.net.XmlHttp.ReadyState;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.XmlHttpDefines {
    var ASSUME_NATIVE_XHR: boolean;
}
declare module 'goog:goog.net.XmlHttpDefines' {
    import alias = ಠ_ಠ.clutz.goog.net.XmlHttpDefines;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
    /**
     * Abstract base class for an XmlHttpRequest factory.
     */
    class XmlHttpFactory extends XmlHttpFactory_Instance {}
    class XmlHttpFactory_Instance {
        private noStructuralTyping_: any;
        createInstance(): ಠ_ಠ.clutz.goog.net.XhrLike|XMLHttpRequest;
        getOptions(): GlobalObject|null;
        /**
         * Override this method in subclasses to preserve the caching offered by
         * getOptions().
         */
        internalGetOptions(): GlobalObject|null;
    }
}
declare module 'goog:goog.net.XmlHttpFactory' {
    import alias = ಠ_ಠ.clutz.goog.net.XmlHttpFactory;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
    /**
     * A static default instance.
     */
    var cookies: ಠ_ಠ.clutz.goog.net.Cookies;
}
declare module 'goog:goog.net.cookies' {
    import alias = ಠ_ಠ.clutz.goog.net.cookies;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net {
    /**
     * Create a new WebChannelTransport instance using the default
     * implementation. Throws an error message if no default transport available
     * in the current environment.
     */
    function createWebChannelTransport():
        ಠ_ಠ.clutz.goog.net.WebChannelTransport;
}
declare module 'goog:goog.net.createWebChannelTransport' {
    import alias = ಠ_ಠ.clutz.goog.net.createWebChannelTransport;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.jsloader {
    /**
     * The default length of time, in milliseconds, we are prepared to wait for
     * a load request to complete.
     */
    var DEFAULT_TIMEOUT: number;
    /**
     * Loads and evaluates a JavaScript file.
     * When the script loads, a user callback is called.
     * It is the client's responsibility to verify that the script ran
     * successfully.
     * @param trustedUri The URI of the JavaScript.
     * @param opt_options Optional parameters. See goog.net.jsloader.Options
     * documentation for details.
     */
    function safeLoad(
        trustedUri: ಠ_ಠ.clutz.goog.html.TrustedResourceUrl,
        opt_options?: ಠ_ಠ.clutz.goog.net.jsloader.Options):
        ಠ_ಠ.clutz.goog.async.Deferred<any>;
    /**
     * Loads a JavaScript file and verifies it was evaluated successfully, using
     * a verification object. The verification object is set by the loaded
     * JavaScript at the end of the script. We verify this object was set and
     * return its value in the success callback. If the object is not defined we
     * trigger an error callback.
     * @param trustedUri The URI of the JavaScript.
     * @param verificationObjName The name of the verification object that the
     * loaded script should set.
     * @param options Optional parameters. See goog.net.jsloader.Options
     * documentation for details.
     */
    function safeLoadAndVerify(
        trustedUri: ಠ_ಠ.clutz.goog.html.TrustedResourceUrl,
        verificationObjName: string,
        options: ಠ_ಠ.clutz.goog.net.jsloader.Options):
        ಠ_ಠ.clutz.goog.async.Deferred<any>;
    /**
     * Loads and evaluates the JavaScript files at the specified URIs,
     * guaranteeing the order of script loads.
     *
     * Because we have to load the scripts in serial (load script 1, exec script
     * 1, load script 2, exec script 2, and so on), this will be slower than
     * doing the network fetches in parallel.
     *
     * If you need to load a large number of scripts but dependency order
     * doesn't matter, you should just call goog.net.jsloader.safeLoad N times.
     *
     * If you need to load a large number of scripts on the same domain,
     * you may want to use goog.module.ModuleLoader.
     * @param trustedUris The URIs to load.
     * @param opt_options Optional parameters. See goog.net.jsloader.options
     * documentation for details.
     */
    function safeLoadMany(
        trustedUris: ಠ_ಠ.clutz.goog.html.TrustedResourceUrl[]|null,
        opt_options?: ಠ_ಠ.clutz.goog.net.jsloader.Options):
        ಠ_ಠ.clutz.goog.async.Deferred;
}
declare module 'goog:goog.net.jsloader' {
    import alias = ಠ_ಠ.clutz.goog.net.jsloader;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.jsloader {
    /**
     * A jsloader error.
     */
    class Error extends Error_Instance {}
    class Error_Instance extends ಠ_ಠ.clutz.goog.debug.Error_Instance {
        /**
         * A jsloader error.
         * @param code The error code.
         * @param opt_message Additional message.
         */
        constructor(
            code: ಠ_ಠ.clutz.goog.net.jsloader.ErrorCode, opt_message?: string);
        /**
         * The code for this error.
         */
        code: ಠ_ಠ.clutz.goog.net.jsloader.ErrorCode;
    }
}
declare module 'goog:goog.net.jsloader.Error' {
    import alias = ಠ_ಠ.clutz.goog.net.jsloader.Error;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.jsloader {
    /**
     * Possible error codes for jsloader.
     */
    enum ErrorCode {
        LOAD_ERROR,
        TIMEOUT,
        VERIFY_ERROR,
        VERIFY_OBJECT_ALREADY_EXISTS,
    }
}
declare module 'goog:goog.net.jsloader.ErrorCode' {
    import alias = ಠ_ಠ.clutz.goog.net.jsloader.ErrorCode;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.jsloader {
    /**
     * Optional parameters for goog.net.jsloader.send.
     * timeout: The length of time, in milliseconds, we are prepared to wait
     * for a load request to complete, or 0 or negative for no timeout. Default
     * is 5 seconds.
     * document: The HTML document under which to load the JavaScript. Default
     * is the current document. cleanupWhenDone: If true clean up the script tag
     * after script completes to load. This is important if you just want to
     * read data from the JavaScript and then throw it away. Default is false.
     * attributes: Additional attributes to set on the script tag.
     */
    type Options = {
        attributes?: {[key: string]: string},
        cleanupWhenDone?: boolean,
        document?: HTMLDocument | null,
        timeout?: number
    };
}
declare module 'goog:goog.net.jsloader.Options' {
    import alias = ಠ_ಠ.clutz.goog.net.jsloader.Options;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.module$exports$goog$net$rpc$HttpCors {
    /**
     * The default URL parameter name to overwrite http headers with a URL param
     * to avoid CORS preflight.
     *
     * See https://github.com/whatwg/fetch/issues/210#issue-129531743 for the
     * spec.
     */
    var HTTP_HEADERS_PARAM_NAME: string;
    /**
     * The default URL parameter name to overwrite http method with a URL param
     * to avoid CORS preflight.
     *
     * See https://github.com/whatwg/fetch/issues/210#issue-129531743 for the
     * spec.
     */
    var HTTP_METHOD_PARAM_NAME: string;
    /**
     * Generates the URL-encoded URL parameter value with custom headers encoded
     * as HTTP/1.1 headers block.
     * @param headers The custom headers.
     */
    function generateEncodedHttpHeadersOverwriteParam(
        headers: {[key: string]: string}): string;
    /**
     * Generates the URL parameter value with custom headers encoded as
     * HTTP/1.1 headers block.
     * @param headers The custom headers.
     */
    function generateHttpHeadersOverwriteParam(
        headers: {[key: string]: string}): string;
    /**
     * Sets custom HTTP headers via an overwrite URL param.
     * @param url The URI object or a string path.
     * @param urlParam The URL param name.
     * @param extraHeaders The HTTP headers.
     */
    function setHttpHeadersWithOverwriteParam(
        url: ಠ_ಠ.clutz.goog.Uri|string, urlParam: string,
        extraHeaders: {[key: string]: string}): ಠ_ಠ.clutz.goog.Uri|string;
}
declare module 'goog:goog.net.rpc.HttpCors' {
    import alias = ಠ_ಠ.clutz.module$exports$goog$net$rpc$HttpCors;
    export = alias;
}
declare namespace ಠ_ಠ.clutz {
    /**
     * The default base64-encoded Protobuf stream parser.
     */
    class module$exports$goog$net$streams$Base64PbStreamParser extends
        module$exports$goog$net$streams$Base64PbStreamParser_Instance {}
    class module$exports$goog$net$streams$Base64PbStreamParser_Instance
        implements ಠ_ಠ.clutz.goog.net.streams.StreamParser {
        private noStructuralTyping_: any;
        getErrorMessage(): string|null;
        isInputValid(): boolean;
        parse(input: string|ArrayBuffer|
              ಠ_ಠ.clutz.goog.vec.Number): (string|GlobalObject)[]|null;
    }
}
declare module 'goog:goog.net.streams.Base64PbStreamParser' {
    import alias = ಠ_ಠ.clutz.module$exports$goog$net$streams$Base64PbStreamParser;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.streams {
    /**
     * Base64 stream decoder.
     */
    class Base64StreamDecoder extends Base64StreamDecoder_Instance {}
    class Base64StreamDecoder_Instance {
        private noStructuralTyping_: any;
        /**
         * Decodes the input stream.
         * @param input The next part of input stream
         */
        decode(input: string): ಠ_ಠ.clutz.goog.vec.Number|null;
        /**
         * Checks if the decoder has aborted due to invalid input.
         */
        isInputValid(): boolean;
    }
}
declare module 'goog:goog.net.streams.Base64StreamDecoder' {
    import alias = ಠ_ಠ.clutz.goog.net.streams.Base64StreamDecoder;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.streams {
    /**
     * The default JSON stream parser.
     */
    class JsonStreamParser extends JsonStreamParser_Instance {}
    class JsonStreamParser_Instance implements
        ಠ_ಠ.clutz.goog.net.streams.StreamParser {
        private noStructuralTyping_: any;
        /**
         * The default JSON stream parser.
         * @param opt_options Configuration for the new JsonStreamParser
         * instance.
         */
        constructor(opt_options?:
                        ಠ_ಠ.clutz.goog.net.streams.JsonStreamParser.Options);
        done(): boolean;
        getErrorMessage(): string|null;
        /**
         * Get the part of input that is after the end of the stream. Call this
         * only when {@code this.done()} is true.
         */
        getExtraInput(): string;
        isInputValid(): boolean;
        parse(input: string|ArrayBuffer|
              ಠ_ಠ.clutz.goog.vec.Number): (string|GlobalObject)[]|null;
    }
}
declare module 'goog:goog.net.streams.JsonStreamParser' {
    import alias = ಠ_ಠ.clutz.goog.net.streams.JsonStreamParser;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.streams.JsonStreamParser {
    /**
     * Configuration spec for newly created JSON stream parser:
     *
     * allowCompactJsonArrayFormat: ignored.
     *
     * deliverMessageAsRawString: whether to deliver the raw message string
     * without decoding into JS object. Semantically insignificant whitespaces
     * in the input may be kept or ignored.
     */
    type Options = {
        allowCompactJsonArrayFormat?: boolean,
        deliverMessageAsRawString?: boolean
    };
}
declare module 'goog:goog.net.streams.JsonStreamParser.Options' {
    import alias = ಠ_ಠ.clutz.goog.net.streams.JsonStreamParser.Options;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.streams {
    /**
     * This interface represents a readable stream.
     */
    interface NodeReadableStream {
        /**
         * Register a callback to handle I/O events. This is an alias to on().
         * @param eventType The event type
         * @param callback The call back to handle the event with an optional
         * input object
         */
        addListener(a: string, b: (a?: GlobalObject) => any):
            ಠ_ಠ.clutz.goog.net.streams.NodeReadableStream|null;
        /**
         * Register a callback to handle I/O events.
         *
         * See https://iojs.org/api/events.html
         *
         * Note that under the object mode, an event of DATA will deliver a
         * message of 1) JSON compliant JS object, including arrays; or 2) an
         * ArrayBuffer.
         *
         * Ordering: messages will be delivered to callbacks in their
         * registration order. There is no ordering between on() and once()
         * callbacks.
         *
         * Exceptions from callbacks will be caught and ignored.
         * @param eventType The event type
         * @param callback The call back to handle the event with an optional
         * input object
         */
        on(a: string, b: (a?: GlobalObject) => any):
            ಠ_ಠ.clutz.goog.net.streams.NodeReadableStream|null;
        /**
         * Register a one-time callback to handle I/O events.
         * @param eventType The event type
         * @param callback The call back to handle the event with an optional
         * input object
         */
        once(a: string, b: (a?: GlobalObject) => any):
            ಠ_ಠ.clutz.goog.net.streams.NodeReadableStream|null;
        /**
         * Unregister an existing callback, including one-time callbacks.
         * @param eventType The event type
         * @param callback The call back to unregister
         */
        removeListener(a: string, b: (a?: GlobalObject) => any):
            ಠ_ಠ.clutz.goog.net.streams.NodeReadableStream|null;
    }
}
declare namespace ಠ_ಠ.clutz.goog.net.streams.NodeReadableStream {
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        CLOSE: EventType,
        DATA: EventType,
        END: EventType,
        ERROR: EventType,
        READABLE: EventType,
    };
}
declare module 'goog:goog.net.streams.NodeReadableStream' {
    import alias = ಠ_ಠ.clutz.goog.net.streams.NodeReadableStream;
    export default alias;
}
declare namespace ಠ_ಠ.clutz {
    /**
     * A stream parser of StreamBody message in Protobuf-JSON format.
     */
    class module$exports$goog$net$streams$PbJsonStreamParser extends
        module$exports$goog$net$streams$PbJsonStreamParser_Instance {}
    class module$exports$goog$net$streams$PbJsonStreamParser_Instance implements
        ಠ_ಠ.clutz.goog.net.streams.StreamParser {
        private noStructuralTyping_: any;
        getErrorMessage(): string|null;
        isInputValid(): boolean;
        parse(input: string|ArrayBuffer|
              ಠ_ಠ.clutz.goog.vec.Number): (string|GlobalObject)[]|null;
    }
}
declare module 'goog:goog.net.streams.PbJsonStreamParser' {
    import alias = ಠ_ಠ.clutz.module$exports$goog$net$streams$PbJsonStreamParser;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.streams {
    /**
     * The default Protobuf stream parser.
     */
    class PbStreamParser extends PbStreamParser_Instance {}
    class PbStreamParser_Instance implements
        ಠ_ಠ.clutz.goog.net.streams.StreamParser {
        private noStructuralTyping_: any;
        getErrorMessage(): string|null;
        isInputValid(): boolean;
        parse(input: string|ArrayBuffer|
              ಠ_ಠ.clutz.goog.vec.Number): (string|GlobalObject)[]|null;
    }
}
declare module 'goog:goog.net.streams.PbStreamParser' {
    import alias = ಠ_ಠ.clutz.goog.net.streams.PbStreamParser;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.streams {
    /**
     * This interface represents a stream parser.
     */
    interface StreamParser {
        /**
         * Checks the error message.
         */
        getErrorMessage(): string|null;
        /**
         * Checks if the parser is aborted due to invalid input.
         */
        isInputValid(): boolean;
        /**
         * Parse the new input.
         *
         * Note that there is no Parser state to indicate the end of a stream.
         * @param input The input data
         */
        parse(a: string|ArrayBuffer|
              ಠ_ಠ.clutz.goog.vec.Number): (string|GlobalObject)[]|null;
    }
}
declare module 'goog:goog.net.streams.StreamParser' {
    import alias = ಠ_ಠ.clutz.goog.net.streams.StreamParser;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.streams {
    /**
     * The XhrNodeReadableStream class.
     */
    class XhrNodeReadableStream extends XhrNodeReadableStream_Instance {}
    class XhrNodeReadableStream_Instance implements
        ಠ_ಠ.clutz.goog.net.streams.NodeReadableStream {
        private noStructuralTyping_: any;
        /**
         * The XhrNodeReadableStream class.
         * @param xhrReader The XhrStreamReader object that handles the events
         * of the underlying Xhr.
         */
        constructor(xhrReader: ಠ_ಠ.clutz.goog.net.streams.XhrStreamReader);
        addListener(eventType: string, callback: (a?: GlobalObject) => any):
            ಠ_ಠ.clutz.goog.net.streams.NodeReadableStream|null;
        on(eventType: string, callback: (a?: GlobalObject) => any):
            ಠ_ಠ.clutz.goog.net.streams.NodeReadableStream|null;
        once(eventType: string, callback: (a?: GlobalObject) => any):
            ಠ_ಠ.clutz.goog.net.streams.NodeReadableStream|null;
        removeListener(eventType: string, callback: (a?: GlobalObject) => any):
            ಠ_ಠ.clutz.goog.net.streams.NodeReadableStream|null;
    }
}
declare module 'goog:goog.net.streams.XhrNodeReadableStream' {
    import alias = ಠ_ಠ.clutz.goog.net.streams.XhrNodeReadableStream;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.streams {
    /**
     * The XhrStreamReader class.
     *
     * The caller must check isStreamingSupported() first.
     */
    class XhrStreamReader extends XhrStreamReader_Instance {
        /**
         * Returns whether response streaming is supported on this browser.
         */
        static isStreamingSupported(): boolean;
    }
    class XhrStreamReader_Instance {
        private noStructuralTyping_: any;
        /**
         * The XhrStreamReader class.
         *
         * The caller must check isStreamingSupported() first.
         * @param xhr The XhrIo object with its response body to be handled by
         * NodeReadableStream.
         */
        constructor(xhr: ಠ_ಠ.clutz.goog.net.XhrIo);
        /**
         * Gets the current stream status.
         */
        getStatus(): ಠ_ಠ.clutz.goog.net.streams.XhrStreamReader.Status;
        /**
         * Returns the XHR request object.
         */
        getXhr(): ಠ_ಠ.clutz.goog.net.XhrIo|null;
        /**
         * Sets the data handler.
         * @param handler The handler for new data.
         */
        setDataHandler(handler: (a: GlobalObject[]) => any): void;
        /**
         * Sets the status handler.
         * @param handler The handler for any status change.
         */
        setStatusHandler(handler: () => any): void;
    }
}
declare namespace ಠ_ಠ.clutz.goog.net.streams.XhrStreamReader {
    enum Status {
        ACTIVE,
        BAD_DATA,
        CANCELLED,
        HANDLER_EXCEPTION,
        INIT,
        NO_DATA,
        SUCCESS,
        TIMEOUT,
        XHR_ERROR,
    }
}
declare module 'goog:goog.net.streams.XhrStreamReader' {
    import alias = ಠ_ಠ.clutz.goog.net.streams.XhrStreamReader;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.streams {
    /**
     * Creates a new NodeReadableStream object using goog.net.xhrio as the
     * underlying HTTP request.
     *
     * The XhrIo object should not have been sent to the network via its send()
     * method. NodeReadableStream callbacks are expected to be registered before
     * XhrIo.send() is invoked. The behavior of the stream is undefined if
     * otherwise. After send() is called, the lifecycle events are expected to
     * be handled directly via the stream API.
     *
     * If a binary response (e.g. protobuf) is expected, the caller should
     * configure the xhrIo by
     * setResponseType(goog.net.XhrIo.ResponseType.ARRAY_BUFFER) before
     * xhrIo.send() is invoked.
     *
     * States specific to the xhr may be accessed before or after send() is
     * called as long as those operations are safe, e.g. configuring headers and
     * options.
     *
     * Timeout (deadlines), cancellation (abort) should be applied to
     * XhrIo directly and the stream object will respect any life cycle events
     * trigger by those actions.
     *
     * Note for the release pkg:
     * "--define goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR=true"
     * disable asserts
     * @param xhr The XhrIo object with its response body to be handled by
     * NodeReadableStream.
     */
    function createXhrNodeReadableStream(xhr: ಠ_ಠ.clutz.goog.net.XhrIo):
        ಠ_ಠ.clutz.goog.net.streams.NodeReadableStream|null;
}
declare module 'goog:goog.net.streams.createXhrNodeReadableStream' {
    import alias = ಠ_ಠ.clutz.goog.net.streams.createXhrNodeReadableStream;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.module$exports$goog$net$streams$utils {
    /**
     * Returns whether a character is whitespace in the context of parsing JSON
     * stream.
     *
     * TODO(user): 0xa0 for IE?
     * @param c The char to check
     */
    function isJsonWhitespace(c: string): boolean;
}
declare module 'goog:goog.net.streams.utils' {
    import alias = ಠ_ಠ.clutz.module$exports$goog$net$streams$utils;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.tmpnetwork {
    /**
     * Default timeout to allow for google.com pings.
     */
    var GOOGLECOM_TIMEOUT: number;
    var TEST_URL: string;
    /**
     * Pings the network to check if an error is a server error or user's
     * network error.
     * @param callback The function to call back with results.
     * @param opt_imageUri The URI of an image to use for the network test. You
     * *must* provide an image URI; the default behavior is provided for
     * compatibility with existing code, but the search team does not want
     * people using images served off of google.com for this purpose. The
     * default will go away when all usages have been changed.
     */
    function testGoogleCom(
        callback: (...a: any[]) => any,
        opt_imageUri?: ಠ_ಠ.clutz.goog.Uri | null): void;
    /**
     * Test loading the given image.
     * @param url URL to the iamge.
     * @param timeout Milliseconds before giving up.
     * @param callback Function to call with results.
     */
    function testLoadImage(
        url: string, timeout: number, callback: (...a: any[]) => any): void;
    /**
     * Test loading the given image, retrying if necessary.
     * @param url URL to the iamge.
     * @param timeout Milliseconds before giving up.
     * @param callback Function to call with results.
     * @param retries The number of times to retry.
     * @param opt_pauseBetweenRetriesMS Optional number of milliseconds between
     * retries - defaults to 0.
     */
    function testLoadImageWithRetries(
        url: string, timeout: number, callback: (...a: any[]) => any,
        retries: number, opt_pauseBetweenRetriesMS?: number): void;
}
declare module 'goog:goog.net.tmpnetwork' {
    import alias = ಠ_ಠ.clutz.goog.net.tmpnetwork;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.xpc {
    /**
     * Transport signaling message: setup.
     */
    var SETUP: string;
    /**
     * Transport signaling message: setup acknowledgement.
     */
    var SETUP_ACK_: string;
    /**
     * Transport signaling message: setup acknowledgement.
     */
    var SETUP_ACK_NTPV2: string;
    /**
     * Transport signaling message: setup for native transport protocol v2.
     */
    var SETUP_NTPV2: string;
    /**
     * The name of the transport service (used for internal signalling).
     */
    var TRANSPORT_SERVICE_: string;
    /**
     * Object holding active channels.
     */
    var channels:
        {[key: string]: ಠ_ಠ.clutz.goog.net.xpc.CrossPageChannel | null}|null;
    /**
     * Returns a random string.
     * @param length How many characters the string shall contain.
     * @param opt_characters The characters used.
     */
    function getRandomString(length: number, opt_characters?: string): string;
    /**
     * The logger.
     */
    var logger: ಠ_ಠ.clutz.goog.debug.Logger|null;
}
declare module 'goog:goog.net.xpc' {
    import alias = ಠ_ಠ.clutz.goog.net.xpc;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.xpc.CfgFields {
    /**
     * Authorization token. If set, NIX will use this authorization token
     * to validate the setup.
     */
    var AUTH_TOKEN: string;
    /**
     * Channel name identifier.
     * Both peers have to be initialized with
     * the same channel name.  If not present, a channel name is
     * generated (which then has to transferred to the peer somehow).
     */
    var CHANNEL_NAME: string;
    /**
     * Whether the direct transport runs in synchronous mode. The default is to
     * emulate the other transports and run asyncronously but there are some
     * circumstances where syncronous calls are required. If this property is
     * set to true, the transport will send the messages synchronously.
     */
    var DIRECT_TRANSPORT_SYNC_MODE: string;
    /**
     * Ifame-ID identifier.
     * The id of the iframe element the peer-document lives in.
     */
    var IFRAME_ID: string;
    /**
     * Local poll URI identifier (IframePollingTransport-specific).
     * The URI  (can't contain a fragment identifier)which is polled
     * to receive data from the peer.
     */
    var LOCAL_POLL_URI: string;
    /**
     * Local relay URI identifier (IframeRelayTransport-specific).
     * The URI (can't contain a fragment identifier) used by the peer to
     * relay data through.
     */
    var LOCAL_RELAY_URI: string;
    /**
     * Which version of the native transport startup protocol should be used,
     * the default being '2'.  Version 1 had various timing vulnerabilities,
     * which had to be compensated for by introducing delays, and is deprecated.
     * V1 and V2 are broadly compatible, although the more robust timing and
     * lack of delays is not gained unless both sides are using V2.  The only
     * unsupported case of cross-protocol interoperation is where a connection
     * starts out with V2 at both ends, and one of the ends reconnects as a V1.
     * All other initial startup and reconnection scenarios are supported.
     */
    var NATIVE_TRANSPORT_PROTOCOL_VERSION: string;
    /**
     * Usually both frames using a connection initially send a SETUP message to
     * each other, and each responds with a SETUP_ACK.  A frame marks itself
     * connected when it receives that SETUP_ACK.  If this parameter is true
     * however, the channel it is passed to will not send a SETUP, but rather
     * will wait for one from its peer and mark itself connected when that
     * arrives. Peer iframes created using such a channel will send SETUP
     * however, and will wait for SETUP_ACK before marking themselves connected.
     * The goal is to cope with a situation where the availability of the URL
     * for the peer frame cannot be relied on, eg when the application is
     * offline.  Without this setting, the primary frame will attempt to send
     * its SETUP message every 100ms, forever.  This floods the javascript
     * console with uncatchable security warnings, and fruitlessly burns CPU.
     * There is one scenario this mode will not support, and that is
     * reconnection by the outer frame, ie the creation of a new channel object
     * to connect to a peer iframe which was already communicating with a
     * previous channel object of the same name.  If that behavior is needed,
     * this mode should not be used.  Reconnection by inner frames is supported
     * in this mode however.
     */
    var ONE_SIDED_HANDSHAKE: string;
    /**
     * The hostname of the peer window, including protocol, domain, and port
     * (if specified). Used for security sensitive applications that make
     * use of NativeMessagingTransport (i.e. most applications).
     */
    var PEER_HOSTNAME: string;
    /**
     * Local poll URI identifier (IframePollingTransport-specific).
     * The URI (can't contain a fragment identifier) used to send data
     * to the peer.
     */
    var PEER_POLL_URI: string;
    /**
     * Peer relay URI identifier (IframeRelayTransport-specific).
     * The URI (can't contain a fragment identifier) used to relay data
     * to the peer.
     */
    var PEER_RELAY_URI: string;
    /**
     * The URI of the peer page.
     */
    var PEER_URI: string;
    /**
     * Remote party's authorization token. If set, NIX will validate this
     * authorization token against that sent by the other party.
     */
    var REMOTE_AUTH_TOKEN: string;
    /**
     * The frame role (inner or outer). Used to explicitly indicate the role for
     * each peer whenever the role cannot be reliably determined (e.g. the two
     * peer windows are not parent/child frames). If unspecified, the role will
     * be dynamically determined, assuming a parent/child frame setup.
     */
    var ROLE: string;
    /**
     * Transport type identifier.
     * The transport type to use. Possible values are entries from
     * goog.net.xpc.TransportTypes. If not present, the transport is
     * determined automatically based on the useragent's capabilities.
     */
    var TRANSPORT: string;
}
declare module 'goog:goog.net.xpc.CfgFields' {
    import alias = ಠ_ಠ.clutz.goog.net.xpc.CfgFields;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.xpc {
    enum ChannelStates {
        CLOSED,
        CONNECTED,
        NOT_CONNECTED,
    }
}
declare module 'goog:goog.net.xpc.ChannelStates' {
    import alias = ಠ_ಠ.clutz.goog.net.xpc.ChannelStates;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.xpc {
    /**
     * A communication channel between two documents from different domains.
     * Provides asynchronous messaging.
     */
    class CrossPageChannel extends CrossPageChannel_Instance {}
    class CrossPageChannel_Instance extends
        ಠ_ಠ.clutz.goog.messaging.AbstractChannel_Instance {
        /**
         * A communication channel between two documents from different domains.
         * Provides asynchronous messaging.
         * @param cfg Channel configuration object.
         * @param opt_domHelper The optional dom helper to use for looking up
         * elements in the dom.
         */
        constructor(
            cfg: GlobalObject|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * The name of the channel. Please use
         * <code>updateChannelNameAndCatalog</code> to change this from the
         * transports vs changing the property directly.
         */
        name: string;
        /**
         * Closes the channel.
         */
        close(): void;
        /**
         * Initiates connecting the channel. When this method is called, all the
         * information needed to connect the channel has to be available.
         * @param opt_connectCb The function to be called when the channel has
         * been connected and is ready to be used.
         */
        connect(opt_connectCb?: (...a: any[]) => any): void;
        /**
         * Creates the iframe containing the peer page in a specified parent
         * element. This method does not connect the channel, connect() still
         * has to be called separately.
         * @param parentElm The container element the iframe is appended to.
         * @param opt_configureIframeCb If present, this function gets called
         * with the iframe element as parameter to allow setting properties on
         * it before it gets added to the DOM. If absent, the iframe's width and
         * height are set to '100%'.
         * @param opt_addCfgParam Whether to add the peer configuration as URL
         * parameter (default: true).
         */
        createPeerIframe(
            parentElm: GlobalElement,
            opt_configureIframeCb?: (...a: any[]) => any,
            opt_addCfgParam?: boolean): HTMLIFrameElement;
        disposeInternal(): void;
        /**
         * Returns the configuration object for this channel.
         * Package private. Do not call from outside goog.net.xpc.
         */
        getConfig(): GlobalObject|null;
        /**
         * Returns a reference to the iframe-element.
         * Package private. Do not call from outside goog.net.xpc.
         */
        getIframeElement(): HTMLIFrameElement|null;
        getPeerConfiguration(): GlobalObject;
        /**
         * Returns the peer URI, with an optional URL parameter for configuring
         * the peer window.
         * @param opt_addCfgParam Whether to add the peer configuration as URL
         * parameter (default: true).
         */
        getPeerUri(opt_addCfgParam?: boolean): ಠ_ಠ.clutz.goog.Uri;
        /**
         * Returns the window object the foreign document resides in.
         */
        getPeerWindowObject(): GlobalObject|null;
        /**
         * Returns the role of this channel (either inner or outer).
         */
        getRole(): number;
        /**
         * Returns the tranport name in use for this channel.
         */
        getTransportName(): string;
        /**
         * Returns the transport type in use for this channel.
         */
        getTransportType(): number;
        isConnected(): boolean;
        /**
         * Returns whether an incoming message with the given origin is
         * acceptable. If an incoming request comes with a specified (non-empty)
         * origin, and the PEER_HOSTNAME config parameter has also been
         * provided, the two must match, or the message is unacceptable.
         * @param opt_origin The origin associated with the incoming message.
         */
        isMessageOriginAcceptable(opt_origin?: string): boolean;
        /**
         * Determines whether the peer window is available (e.g. not closed).
         */
        isPeerAvailable(): boolean;
        /**
         * Package-private.
         * Called by the transport when the channel is connected.
         * @param opt_delay Delay this number of milliseconds before calling the
         * connection callback. Usage is discouraged, but can be used to paper
         * over timing vulnerabilities when there is no alternative.
         */
        notifyConnected(opt_delay?: number): void;
        /**
         * Called by the transport in case of an unrecoverable failure.
         * Package private. Do not call from outside goog.net.xpc.
         */
        notifyTransportError(): void;
        send(serviceName: string, payload: string|GlobalObject): void;
        /**
         * Sets the window object the foreign document resides in.
         * @param peerWindowObject The window object of the peer.
         */
        setPeerWindowObject(peerWindowObject: GlobalObject|null): void;
        /**
         * Sets the channel name. Note, this doesn't establish a unique channel
         * to communicate on.
         * @param name The new channel name.
         */
        updateChannelNameAndCatalog(name: string): void;
        /**
         * Delivers messages to the appropriate service-handler. Named
         * xpcDeliver to avoid name conflict with {@code deliver} function in
         * superclass goog.messaging.AbstractChannel.
         * @param serviceName The name of the port.
         * @param payload The payload.
         * @param opt_origin An optional origin for the message, where the
         * underlying transport makes that available.  If this is specified, and
         * the PEER_HOSTNAME parameter was provided, they must match or the
         * message will be rejected.
         */
        xpcDeliver(serviceName: string, payload: string, opt_origin?: string):
            void;
    }
}
declare module 'goog:goog.net.xpc.CrossPageChannel' {
    import alias = ಠ_ಠ.clutz.goog.net.xpc.CrossPageChannel;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.xpc {
    /**
     * The role of the peer.
     */
    enum CrossPageChannelRole {
        INNER,
        OUTER,
    }
}
declare module 'goog:goog.net.xpc.CrossPageChannelRole' {
    import alias = ಠ_ಠ.clutz.goog.net.xpc.CrossPageChannelRole;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.xpc {
    /**
     * A direct window to window method transport.
     *
     * If the windows are in the same security context, this transport calls
     * directly into the other window without using any additional mechanism.
     * This is mainly used in scenarios where you want to optionally use a cross
     * domain transport in cross security context situations, or optionally use
     * a direct transport in same security context situations.
     *
     * Note: Global properties are exported by using this transport. One to
     * communicate with the other window by, currently
     * crosswindowmessaging.channel, and by using goog.getUid on window,
     * currently closure_uid_[0-9]+.
     */
    class DirectTransport extends DirectTransport_Instance {
        static isSupported(peerWindow: Window): boolean;
    }
    class DirectTransport_Instance extends
        ಠ_ಠ.clutz.goog.net.xpc.Transport_Instance {
        /**
         * A direct window to window method transport.
         *
         * If the windows are in the same security context, this transport calls
         * directly into the other window without using any additional
         * mechanism. This is mainly used in scenarios where you want to
         * optionally use a cross domain transport in cross security context
         * situations, or optionally use a direct transport in same security
         * context situations.
         *
         * Note: Global properties are exported by using this transport. One to
         * communicate with the other window by, currently
         * crosswindowmessaging.channel, and by using goog.getUid on window,
         * currently closure_uid_[0-9]+.
         * @param channel The channel this transport belongs to.
         * @param opt_domHelper The dom helper to use for finding the correct
         * window/document. If omitted, uses the current document.
         */
        constructor(
            channel: ಠ_ಠ.clutz.goog.net.xpc.CrossPageChannel,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        connect(): void;
        disposeInternal(): void;
        /**
         * Prepares to send a message.
         * @param service The name of the service the message is to be delivered
         * to.
         * @param payload The message content.
         */
        send(service: string, payload: string): any;
        /**
         * Handles transport service messages.
         * @param payload The message content.
         */
        transportServiceHandler(payload: string): any;
        /**
         * The transport type.
         */
        transportType: number;
    }
}
declare namespace ಠ_ಠ.clutz.goog.net.xpc.DirectTransport {
    class Message_ extends Message__Instance {
        /**
         * Creates a Message_ from a literal object.
         * @param literal The literal to convert to Message.
         */
        static fromLiteral(literal: GlobalObject):
            ಠ_ಠ.clutz.goog.net.xpc.DirectTransport.Message_;
    }
    class Message__Instance {
        private noStructuralTyping_: any;
        /**
         * The name of the channel.
         */
        channelName: string;
        /**
         * The payload.
         */
        payload: string;
        /**
         * The service on the channel.
         */
        service: string;
        /**
         * Converts a message to a literal object.
         */
        toLiteral(): GlobalObject;
    }
}
declare module 'goog:goog.net.xpc.DirectTransport' {
    import alias = ಠ_ಠ.clutz.goog.net.xpc.DirectTransport;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.xpc {
    /**
     * Frame-element method transport.
     *
     * Firefox allows a document within an iframe to call methods on the
     * iframe-element added by the containing document.
     * NOTE(user): Tested in all FF versions starting from 1.0
     */
    class FrameElementMethodTransport extends
        FrameElementMethodTransport_Instance {}
    class FrameElementMethodTransport_Instance extends
        ಠ_ಠ.clutz.goog.net.xpc.Transport_Instance {
        /**
         * Frame-element method transport.
         *
         * Firefox allows a document within an iframe to call methods on the
         * iframe-element added by the containing document.
         * NOTE(user): Tested in all FF versions starting from 1.0
         * @param channel The channel this transport belongs to.
         * @param opt_domHelper The dom helper to use for finding the correct
         * window.
         */
        constructor(
            channel: ಠ_ಠ.clutz.goog.net.xpc.CrossPageChannel|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        iframeElm_: any;
        outgoing_: any;
        /**
         * Connect this transport.
         */
        connect(): void;
        disposeInternal(): void;
        /**
         * Send a message
         * @param service The name off the service the message is to be
         * delivered to.
         * @param payload The message content.
         */
        send(service: string, payload: string): any;
        /**
         * Handles transport service messages.
         * @param payload The message content.
         */
        transportServiceHandler(payload: string): any;
        /**
         * The transport type.
         */
        transportType: number;
    }
}
declare module 'goog:goog.net.xpc.FrameElementMethodTransport' {
    import alias = ಠ_ಠ.clutz.goog.net.xpc.FrameElementMethodTransport;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.xpc {
    /**
     * Iframe polling transport. Uses hidden iframes to transfer data
     * in the fragment identifier of the URL. The peer polls the iframe's
     * location for changes. Unfortunately, in Safari this screws up the
     * history, because Safari doesn't allow to call location.replace() on a
     * window containing a document from a different domain (last version
     * tested: 2.0.4).
     */
    class IframePollingTransport extends IframePollingTransport_Instance {
        /**
         * The string used to prefix all iframe names and IDs.
         */
        static IFRAME_PREFIX: string;
        static lastActivity_: number;
        static rcvTimer_: any;
    }
    class IframePollingTransport_Instance extends
        ಠ_ಠ.clutz.goog.net.xpc.Transport_Instance {
        /**
         * Iframe polling transport. Uses hidden iframes to transfer data
         * in the fragment identifier of the URL. The peer polls the iframe's
         * location for changes. Unfortunately, in Safari this screws up the
         * history, because Safari doesn't allow to call location.replace() on a
         * window containing a document from a different domain (last version
         * tested: 2.0.4).
         * @param channel The channel this transport belongs to.
         * @param opt_domHelper The dom helper to use for finding the correct
         * window.
         */
        constructor(
            channel: ಠ_ಠ.clutz.goog.net.xpc.CrossPageChannel|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        ackIframeElm_: any;
        ackWinObj_: any;
        deliveryQueue_: any;
        msgIframeElm_: any;
        msgReceiver_: any;
        msgSender_: any;
        msgWinObj_: any;
        parts_: any;
        rcvdConnectionSetupAck_: any;
        sentConnectionSetupAck_: any;
        /**
         * Connects this transport.
         */
        connect(): void;
        disposeInternal(): void;
        /**
         * Determines whether the channel is still available. The channel is
         * unavailable if the transport was disposed or the peer is no longer
         * available.
         */
        isChannelAvailable(): boolean;
        /**
         * Process an incoming acknowdedgement.
         * @param msgStr The incoming ack string to process.
         */
        processIncomingAck(msgStr: string): void;
        /**
         * Processes an incoming message.
         * @param raw The complete received string.
         */
        processIncomingMsg(raw: string): void;
        /**
         * Sends a message. Splits it in multiple frames if too long (exceeds
         * IE's URL-length maximum. Wireformat:
         * `<seq>[,<frame_no>/<#frames>]|<frame_content>`
         * @param service Name of service this the message has to be delivered.
         * @param payload The message content.
         */
        send(service: string, payload: string): any;
        /**
         * The transport type.
         */
        transportType: number;
    }
}
declare module 'goog:goog.net.xpc.IframePollingTransport' {
    import alias = ಠ_ಠ.clutz.goog.net.xpc.IframePollingTransport;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.xpc.IframePollingTransport {
    /**
     * goog.net.xpc.IframePollingTransport.Receiver
     */
    class Receiver extends Receiver_Instance {}
    class Receiver_Instance {
        private noStructuralTyping_: any;
        /**
         * goog.net.xpc.IframePollingTransport.Receiver
         * @param transport The transport to receive from.
         * @param windowObj The window-object to poll for location-changes.
         * @param callback The callback-function to be called when location has
         * changed.
         */
        constructor(
            transport: ಠ_ಠ.clutz.goog.net.xpc.IframePollingTransport|null,
            windowObj: GlobalObject|null, callback: (...a: any[]) => any);
        cb_(...a: any[]): any;
        currentLoc_: any;
        rcvFrame_: GlobalObject|null;
        /**
         * Polls the location of the receiver-frame for changes.
         */
        receive(): boolean;
    }
}
declare module 'goog:goog.net.xpc.IframePollingTransport.Receiver' {
    import alias = ಠ_ಠ.clutz.goog.net.xpc.IframePollingTransport.Receiver;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.xpc.IframePollingTransport {
    /**
     * goog.net.xpc.IframePollingTransport.Sender
     *
     * Utility class to send message-parts to a document from a different
     * origin.
     */
    class Sender extends Sender_Instance {}
    class Sender_Instance {
        private noStructuralTyping_: any;
        /**
         * goog.net.xpc.IframePollingTransport.Sender
         *
         * Utility class to send message-parts to a document from a different
         * origin.
         * @param url The url the other document will use for polling. Must be
         * an http:// or https:// URL.
         * @param windowObj The frame used for sending information to.
         */
        constructor(url: string, windowObj: GlobalObject|null);
        /**
         * Sends a message-part (frame) to the peer.
         * The message-part is encoded and put in the fragment identifier
         * of the URL used for sending (and belongs to the origin/domain of the
         * peer).
         * @param payload The message to send.
         */
        send(payload: string): void;
    }
}
declare module 'goog:goog.net.xpc.IframePollingTransport.Sender' {
    import alias = ಠ_ಠ.clutz.goog.net.xpc.IframePollingTransport.Sender;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.xpc {
    /**
     * Iframe relay transport. Creates hidden iframes containing a document
     * from the peer's origin. Data is transferred in the fragment identifier.
     * Therefore the document loaded in the iframes can be served from the
     * browser's cache.
     */
    class IframeRelayTransport extends IframeRelayTransport_Instance {}
    class IframeRelayTransport_Instance extends
        ಠ_ಠ.clutz.goog.net.xpc.Transport_Instance {
        /**
         * Iframe relay transport. Creates hidden iframes containing a document
         * from the peer's origin. Data is transferred in the fragment
         * identifier. Therefore the document loaded in the iframes can be
         * served from the browser's cache.
         * @param channel The channel this transport belongs to.
         * @param opt_domHelper The dom helper to use for finding the correct
         * window.
         */
        constructor(
            channel: ಠ_ಠ.clutz.goog.net.xpc.CrossPageChannel|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * Connects this transport.
         */
        connect(): void;
        disposeInternal(): void;
        /**
         * Sends a message.
         * @param service Name of service this the message has to be delivered.
         * @param payload The message content.
         */
        send(service: string, payload: string): any;
        /**
         * Handles transport service messages (internal signalling).
         * @param payload The message content.
         */
        transportServiceHandler(payload: string): any;
        /**
         * The transport type.
         */
        transportType: number;
    }
}
declare namespace ಠ_ಠ.clutz.goog.net.xpc.IframeRelayTransport {
    type FragmentInfo = {
        expected: number,
        fragments: string[],
        received: number
    };
}
declare module 'goog:goog.net.xpc.IframeRelayTransport' {
    import alias = ಠ_ಠ.clutz.goog.net.xpc.IframeRelayTransport;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.xpc {
    /**
     * The native messaging transport
     *
     * Uses document.postMessage() to send messages to other documents.
     * Receiving is done by listening on 'message'-events on the document.
     */
    class NativeMessagingTransport extends NativeMessagingTransport_Instance {}
    class NativeMessagingTransport_Instance extends
        ಠ_ಠ.clutz.goog.net.xpc.Transport_Instance {
        /**
         * The native messaging transport
         *
         * Uses document.postMessage() to send messages to other documents.
         * Receiving is done by listening on 'message'-events on the document.
         * @param channel The channel this transport belongs to.
         * @param peerHostname The hostname (protocol, domain, and port) of the
         * peer.
         * @param opt_domHelper The dom helper to use for finding the correct
         * window/document.
         * @param opt_oneSidedHandshake If this is true, only the outer
         * transport sends a SETUP message and expects a SETUP_ACK.  The inner
         * transport goes connected when it receives the SETUP.
         * @param opt_protocolVersion Which version of its setup protocol the
         * transport should use.  The default is '2'.
         */
        constructor(
            channel: ಠ_ಠ.clutz.goog.net.xpc.CrossPageChannel|null,
            peerHostname: string,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null,
            opt_oneSidedHandshake?: boolean, opt_protocolVersion?: number);
        /**
         * Connects this transport.
         */
        connect(): void;
        disposeInternal(): void;
        /**
         * Sends a message.
         * @param service The name off the service the message is to be
         * delivered to.
         * @param payload The message content.
         */
        send(service: string, payload: string): any;
        /**
         * Handles transport service messages.
         * @param payload The message content.
         */
        transportServiceHandler(payload: string): any;
        /**
         * The transport type.
         */
        transportType: number;
    }
}
declare module 'goog:goog.net.xpc.NativeMessagingTransport' {
    import alias = ಠ_ಠ.clutz.goog.net.xpc.NativeMessagingTransport;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.xpc {
    /**
     * NIX method transport.
     *
     * NOTE(user): NIX method tested in all IE versions starting from 6.0.
     */
    class NixTransport extends NixTransport_Instance {
        /**
         * The name of the create channel method used by the wrapper class
         * when calling the transport.
         */
        static NIX_CREATE_CHANNEL: string;
        /**
         * Global name of the GetWrapper VBScript function. This
         * constant is used by JavaScript to call this function.
         * Note that this function will be stored in the *global*
         * namespace (i.e. window in browsers).
         */
        static NIX_GET_WRAPPER: string;
        /**
         * The name of the handle message method used by the wrapper class
         * when calling the transport.
         */
        static NIX_HANDLE_MESSAGE: string;
        /**
         * A "unique" identifier that is stored in the wrapper
         * class so that the wrapper can be distinguished from
         * other objects easily.
         */
        static NIX_ID_FIELD: string;
        /**
         * Global name of the Wrapper VBScript class.
         * Note that this class will be stored in the *global*
         * namespace (i.e. window in browsers).
         */
        static NIX_WRAPPER: string;
        /**
         * Determines if the installed version of IE supports accessing
         * window.opener after it has been set to a non-Window/null value. NIX
         * relies on this being possible.
         */
        static isNixSupported(): boolean;
    }
    class NixTransport_Instance extends
        ಠ_ಠ.clutz.goog.net.xpc.Transport_Instance {
        /**
         * NIX method transport.
         *
         * NOTE(user): NIX method tested in all IE versions starting from 6.0.
         * @param channel The channel this transport belongs to.
         * @param opt_domHelper The dom helper to use for finding the correct
         * window.
         */
        constructor(
            channel: ಠ_ಠ.clutz.goog.net.xpc.CrossPageChannel|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * Connect this transport.
         */
        connect(): void;
        disposeInternal(): void;
        /**
         * Sends a message.
         * @param service The name of the service the message is to be delivered
         * to.
         * @param payload The message content.
         */
        send(service: string, payload: string): any;
        /**
         * The transport type.
         */
        transportType: number;
    }
}
declare module 'goog:goog.net.xpc.NixTransport' {
    import alias = ಠ_ಠ.clutz.goog.net.xpc.NixTransport;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.xpc {
    /**
     * The base class for transports.
     */
    class Transport extends Transport_Instance {}
    class Transport_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance {
        /**
         * The base class for transports.
         * @param opt_domHelper The dom helper to use for finding the window
         * objects.
         */
        constructor(opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * Connects this transport.
         * The transport implementation is expected to call
         * CrossPageChannel.prototype.notifyConnected when the channel is ready
         * to be used.
         */
        connect(): void;
        /**
         * Return the transport name.
         */
        getName(): string;
        getType(): number;
        /**
         * Returns the window associated with this transport instance.
         */
        getWindow(): Window;
        /**
         * Sends a message.
         * @param service The name off the service the message is to be
         * delivered to.
         * @param payload The message content.
         */
        send(a: string, b: string): any;
        /**
         * Handles transport service messages (internal signalling).
         * @param payload The message content.
         */
        transportServiceHandler(a: string): any;
        /**
         * The transport type.
         */
        transportType: number;
    }
}
declare module 'goog:goog.net.xpc.Transport' {
    import alias = ಠ_ಠ.clutz.goog.net.xpc.Transport;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.xpc {
    /**
     * Enum containing transport names. These need to correspond to the
     * transport class names for createTransport_() to work.
     */
    var TransportNames: {[key: string]: string};
}
declare module 'goog:goog.net.xpc.TransportNames' {
    import alias = ಠ_ಠ.clutz.goog.net.xpc.TransportNames;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.xpc {
    /**
     * Enum used to identify transport types.
     */
    enum TransportTypes {
        DIRECT,
        FLASH,
        FRAME_ELEMENT_METHOD,
        IFRAME_POLLING,
        IFRAME_RELAY,
        NATIVE_MESSAGING,
        NIX,
    }
}
declare module 'goog:goog.net.xpc.TransportTypes' {
    import alias = ಠ_ಠ.clutz.goog.net.xpc.TransportTypes;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.xpc {
    /**
     * Config properties that need to be URL sanitized.
     */
    var UriCfgFields: string[]|null;
}
declare module 'goog:goog.net.xpc.UriCfgFields' {
    import alias = ಠ_ಠ.clutz.goog.net.xpc.UriCfgFields;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.net.xpc {
    var relay: GlobalObject;
}
declare module 'goog:goog.net.xpc.relay' {
    import alias = ಠ_ಠ.clutz.goog.net.xpc.relay;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.object {
    /**
     * Adds a key-value pair to the object. Throws an exception if the key is
     * already in use. Use set if you want to change an existing pair.
     * @param obj The object to which to add the key-value pair.
     * @param key The key to add.
     * @param val The value to add.
     */
    function add<K = any, V = any>(
        obj: {[/* warning: coerced from K */ key: string]: V} | null,
        key: string, val: V): void;
    /**
     * Removes all key value pairs from the object/map/hash.
     * @param obj The object to clear.
     */
    function clear(obj: GlobalObject|null): void;
    /**
     * Returns a shallow clone of the object.
     * @param obj Object to clone.
     */
    function clone<K = any, V = any>(
        obj: {[/* warning: coerced from K */ key: string]: V} |
        null): {[/* warning: coerced from K */ key: string]: V};
    /**
     * Whether the object/hash/map contains the given object as a value.
     * An alias for goog.object.containsValue(obj, val).
     * @param obj The object in which to look for val.
     * @param val The object for which to check.
     */
    function contains<K = any, V = any>(
        obj: {[/* warning: coerced from K */ key: string]: V} | null,
        val: V): boolean;
    /**
     * Whether the object/map/hash contains the given key.
     * @param obj The object in which to look for key.
     * @param key The key for which to check.
     */
    function containsKey(obj: GlobalObject|null, key: any): boolean;
    /**
     * Whether the object/map/hash contains the given value. This is O(n).
     * @param obj The object in which to look for val.
     * @param val The value for which to check.
     */
    function containsValue<K = any, V = any>(
        obj: {[/* warning: coerced from K */ key: string]: V} | null,
        val: V): boolean;
    /**
     * Creates a new object built from the key-value pairs provided as
     * arguments.
     * @param var_args If only one argument is provided and it is an array then
     * this is used as the arguments, otherwise even arguments are used as the
     * property names and odd arguments are used as the property values.
     */
    function create(...var_args: any[]): GlobalObject;
    /**
     * Creates an immutable view of the underlying object, if the browser
     * supports immutable objects.
     *
     * In default mode, writes to this view will fail silently. In strict mode,
     * they will throw an error.
     * @param obj An object.
     */
    function createImmutableView<K = any, V = any>(
        obj: {[/* warning: coerced from K */ key: string]: V}):
        {[/* warning: coerced from K */ key: string]: V};
    /**
     * Creates a new object where the property names come from the arguments but
     * the value is always set to true
     * @param var_args If only one argument is provided and it is an array then
     * this is used as the arguments, otherwise the arguments are used as the
     * property names.
     */
    function createSet(...var_args: any[]): GlobalObject;
    /**
     * Compares two objects for equality using === on the values.
     */
    function equals<K = any, V = any>(
        a: {[/* warning: coerced from K */ key: string]: V},
        b: {[/* warning: coerced from K */ key: string]: V}): boolean;
    /**
     * Calls a function for each element in an object/map/hash. If
     * all calls return true, returns true. If any call returns false, returns
     * false at this point and does not continue to check the remaining
     * elements.
     * @param obj The object to check.
     * @param f The function to call for every element. This function takes 3
     * arguments (the value, the key and the object) and should return a
     * boolean.
     * @param opt_obj This is used as the 'this' object within f.
     */
    function every<T = any, K = any, V = any>(
        obj: {[/* warning: coerced from K */ key: string]: V} | null,
        f: ((a: V, b: any,
             c: {[/* warning: coerced from K */ key: string]: V} | null) =>
                boolean) |
            null,
        opt_obj?: T): boolean;
    /**
     * Extends an object with another object.
     * This operates 'in-place'; it does not create a new Object.
     *
     * Example:
     * var o = {};
     * goog.object.extend(o, {a: 0, b: 1});
     * o; // {a: 0, b: 1}
     * goog.object.extend(o, {b: 2, c: 3});
     * o; // {a: 0, b: 2, c: 3}
     * @param target The object to modify. Existing properties will be
     * overwritten if they are also present in one of the objects in {@code
     * var_args}.
     * @param var_args The objects from which values will be copied.
     */
    function extend(
        target: GlobalObject|null,
        ...var_args: (GlobalObject|null|undefined)[]): void;
    /**
     * Calls a function for each element in an object/map/hash. If that call
     * returns true, adds the element to a new object.
     * @param obj The object over which to iterate.
     * @param f The function to call for every element. This function takes 3
     * arguments (the value, the key and the object) and should return a
     * boolean. If the return value is true the element is added to the result
     * object. If it is false the element is not included.
     * @param opt_obj This is used as the 'this' object within f.
     */
    function filter<T = any, K = any, V = any>(
        obj: {[/* warning: coerced from K */ key: string]: V} | null,
        f: (a: V, b: any, c: {[/* warning: coerced from K */ key: string]:
                                  V}|null) => boolean,
        opt_obj?: T): {[/* warning: coerced from K */ key: string]: V};
    /**
     * Searches an object for an element that satisfies the given condition and
     * returns its key.
     * @param obj The object to search in.
     * @param f The function to call for every element. Takes 3 arguments (the
     * value, the key and the object) and should return a boolean.
     * @param opt_this An optional "this" context for the function.
     */
    function findKey<T = any, K = any, V = any>(
        obj: {[/* warning: coerced from K */ key: string]: V} | null,
        f: (a: V, b: string,
            c: {[/* warning: coerced from K */ key: string]: V}|null) =>
            boolean,
        opt_this?: T): string|undefined;
    /**
     * Searches an object for an element that satisfies the given condition and
     * returns its value.
     * @param obj The object to search in.
     * @param f The function to call for every element. Takes 3 arguments (the
     * value, the key and the object) and should return a boolean.
     * @param opt_this An optional "this" context for the function.
     */
    function findValue<T = any, K = any, V = any>(
        obj: {[/* warning: coerced from K */ key: string]: V} | null,
        f: (a: V, b: string,
            c: {[/* warning: coerced from K */ key: string]: V}|null) =>
            boolean,
        opt_this?: T): V;
    /**
     * Calls a function for each element in an object/map/hash.
     * @param obj The object over which to iterate.
     * @param f The function to call for every element. This function takes 3
     * arguments (the value, the key and the object) and the return value is
     * ignored.
     * @param opt_obj This is used as the 'this' object within f.
     */
    function forEach<T = any, K = any, V = any>(
        obj: {[/* warning: coerced from K */ key: string]: V} | null,
        f: (a: V, b: any,
            c: {[/* warning: coerced from K */ key: string]: V}|null) => any,
        opt_obj?: T): void;
    /**
     * Returns the value for the given key.
     * @param obj The object from which to get the value.
     * @param key The key for which to get the value.
     * @param opt_val The value to return if no item is found for the given key
     * (default is undefined).
     */
    function get<K = any, V = any, R = any>(
        obj: {[/* warning: coerced from K */ key: string]: V} | null,
        key: string, opt_val?: R): V|R|undefined;
    /**
     * Get all properties names on a given Object regardless of enumerability.
     *
     * <p> If the browser does not support {@code Object.getOwnPropertyNames}
     * nor
     * {@code Object.getPrototypeOf} then this is equivalent to using {@code
     * goog.object.getKeys}
     * @param obj The object to get the properties of.
     * @param opt_includeObjectPrototype Whether properties defined on {@code
     * Object.prototype} should be included in the result.
     * @param opt_includeFunctionPrototype Whether properties defined on {@code
     * Function.prototype} should be included in the result.
     */
    function getAllPropertyNames(
        obj: GlobalObject|null, opt_includeObjectPrototype?: boolean,
        opt_includeFunctionPrototype?: boolean): string[];
    /**
     * Returns one key from the object map, if any exists.
     * For map literals the returned key will be the first one in most of the
     * browsers (a know exception is Konqueror).
     * @param obj The object to pick a key from.
     */
    function getAnyKey(obj: GlobalObject|null): string|undefined;
    /**
     * Returns one value from the object map, if any exists.
     * For map literals the returned value will be the first one in most of the
     * browsers (a know exception is Konqueror).
     * @param obj The object to pick a value from.
     */
    function getAnyValue<K = any, V = any>(
        obj: {[/* warning: coerced from K */ key: string]: V} | null): V|
        undefined;
    /**
     * Returns the number of key-value pairs in the object map.
     * @param obj The object for which to get the number of key-value pairs.
     */
    function getCount(obj: GlobalObject|null): number;
    /**
     * Returns the keys of the object/map/hash.
     * @param obj The object from which to get the keys.
     */
    function getKeys(obj: GlobalObject|null): string[];
    /**
     * Get a value from an object multiple levels deep.  This is useful for
     * pulling values from deeply nested objects, such as JSON responses.
     * Example usage: getValueByKeys(jsonObj, 'foo', 'entries', 3)
     * @param obj An object to get the value from.  Can be array-like.
     * @param var_args A number of keys (as strings, or numbers, for array-like
     * objects).  Can also be specified as a single array of keys.
     */
    function getValueByKeys(
        obj: GlobalObject,
        ...var_args: (string|number|ArrayLike<number|string>|undefined)[]): any;
    /**
     * Returns the values of the object/map/hash.
     * @param obj The object from which to get the values.
     */
    function getValues<K = any, V = any>(
        obj: {[/* warning: coerced from K */ key: string]: V} | null): V[];
    /**
     * Whether two values are not observably distinguishable. This
     * correctly detects that 0 is not the same as -0 and two NaNs are
     * practically equivalent.
     *
     * The implementation is as suggested by harmony:egal proposal.
     * @param v The first value to compare.
     * @param v2 The second value to compare.
     */
    function is(v: any, v2: any): boolean;
    /**
     * Whether the object/map/hash is empty.
     * @param obj The object to test.
     */
    function isEmpty(obj: GlobalObject|null): boolean;
    function isImmutableView(obj: GlobalObject): boolean;
    /**
     * For every element in an object/map/hash calls a function and inserts the
     * result into a new object.
     * @param obj The object over which to iterate.
     * @param f The function to call for every element. This function takes 3
     * arguments (the value, the key and the object) and should return
     * something. The result will be inserted into a new object.
     * @param opt_obj This is used as the 'this' object within f.
     */
    function map<T = any, K = any, V = any, R = any>(
        obj: {[/* warning: coerced from K */ key: string]: V} | null,
        f: (a: V, b: any,
            c: {[/* warning: coerced from K */ key: string]: V}|null) => R,
        opt_obj?: T): {[/* warning: coerced from K */ key: string]: R};
    /**
     * Removes a key-value pair based on the key.
     * @param obj The object from which to remove the key.
     * @param key The key to remove.
     */
    function remove(obj: GlobalObject|null, key: any): boolean;
    /**
     * Adds a key-value pair to the object/map/hash.
     * @param obj The object to which to add the key-value pair.
     * @param key The key to add.
     * @param value The value to add.
     */
    function set<K = any, V = any>(
        obj: {[/* warning: coerced from K */ key: string]: V} | null,
        key: string, value: V): void;
    /**
     * Adds a key-value pair to the object/map/hash if it doesn't exist yet.
     * @param obj The object to which to add the key-value pair.
     * @param key The key to add.
     * @param value The value to add if the key wasn't present.
     */
    function setIfUndefined<K = any, V = any>(
        obj: {[/* warning: coerced from K */ key: string]: V} | null,
        key: string, value: V): V;
    /**
     * Sets a key and value to an object if the key is not set. The value will
     * be the return value of the given function. If the key already exists, the
     * object will not be changed and the function will not be called (the
     * function will be lazily evaluated -- only called if necessary).
     *
     * This function is particularly useful for use with a map used a as a
     * cache.
     * @param obj The object to which to add the key-value pair.
     * @param key The key to add.
     * @param f The value to add if the key wasn't present.
     */
    function setWithReturnValueIfNotSet<K = any, V = any>(
        obj: {[/* warning: coerced from K */ key: string]: V}, key: string,
        f: () => V): V;
    /**
     * Calls a function for each element in an object/map/hash. If any
     * call returns true, returns true (without checking the rest). If
     * all calls return false, returns false.
     * @param obj The object to check.
     * @param f The function to call for every element. This function takes 3
     * arguments (the value, the key and the object) and should return a
     * boolean.
     * @param opt_obj This is used as the 'this' object within f.
     */
    function some<T = any, K = any, V = any>(
        obj: {[/* warning: coerced from K */ key: string]: V} | null,
        f: (a: V, b: any, c: {[/* warning: coerced from K */ key: string]:
                                  V}|null) => boolean,
        opt_obj?: T): boolean;
    /**
     * Returns a new object in which all the keys and values are interchanged
     * (keys become values and values become keys). If multiple keys map to the
     * same value, the chosen transposed value is implementation-dependent.
     * @param obj The object to transpose.
     */
    function transpose(obj: GlobalObject|null): GlobalObject;
    /**
     * Clones a value. The input may be an Object, Array, or basic type. Objects
     * and arrays will be cloned recursively.
     *
     * WARNINGS:
     * <code>goog.object.unsafeClone</code> does not detect reference loops.
     * Objects that refer to themselves will cause infinite recursion.
     *
     * <code>goog.object.unsafeClone</code> is unaware of unique identifiers,
     * and copies UIDs created by <code>getUid</code> into cloned results.
     * @param obj The value to clone.
     */
    function unsafeClone<T = any>(obj: T): T;
}
declare module 'goog:goog.object' {
    import alias = ಠ_ಠ.clutz.goog.object;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.positioning {
    /**
     * Returns the corner opposite the given one horizontally and vertically.
     * @param corner The popup corner used to flip.
     */
    function flipCorner(corner: ಠ_ಠ.clutz.goog.positioning.Corner):
        ಠ_ಠ.clutz.goog.positioning.Corner;
    /**
     * Returns the corner opposite the given one horizontally.
     * @param corner The popup corner used to flip.
     */
    function flipCornerHorizontal(corner: ಠ_ಠ.clutz.goog.positioning.Corner):
        ಠ_ಠ.clutz.goog.positioning.Corner;
    /**
     * Returns the corner opposite the given one vertically.
     * @param corner The popup corner used to flip.
     */
    function flipCornerVertical(corner: ಠ_ಠ.clutz.goog.positioning.Corner):
        ಠ_ಠ.clutz.goog.positioning.Corner;
    /**
     * Returns an absolute corner (top/bottom left/right) given an absolute
     * or relative (top/bottom start/end) corner and the direction of an
     * element. Absolute corners remain unchanged.
     * @param element DOM element to test for RTL direction.
     * @param corner The popup corner used for positioning.
     */
    function getEffectiveCorner(
        element: GlobalElement|null, corner: ಠ_ಠ.clutz.goog.positioning.Corner):
        ಠ_ಠ.clutz.goog.positioning.Corner;
    /**
     * Calculates the page offset of the given element's
     * offsetParent. This value can be used to translate any x- and
     * y-offset relative to the page to an offset relative to the
     * offsetParent, which can then be used directly with as position
     * coordinate for {@code positionWithCoordinate}.
     * @param movableElement The element to calculate.
     */
    function getOffsetParentPageOffset(movableElement: GlobalElement):
        ಠ_ಠ.clutz.goog.math.Coordinate;
    /**
     * Computes the position for an element to be placed on-screen at the
     * specified coordinates. Returns an object containing both the resulting
     * rectangle, and the overflow status bitmap.
     * @param absolutePos The coordinate to position the element at.
     * @param elementSize The size of the element to be positioned.
     * @param elementCorner The corner of the movableElement that that should be
     * positioned.
     * @param opt_margin A margin specified in pixels. After the normal
     * positioning algorithm is applied and any offset, the margin is then
     * applied. Positive coordinates move the popup away from the spot it was
     * positioned towards its center. Negative coordinates move it towards the
     * spot it was positioned away from its center.
     * @param opt_viewport Box object describing the dimensions of the viewport.
     * Required if opt_overflow is specified.
     * @param opt_overflow Overflow handling mode. Defaults to IGNORE if not specified, {@see goog.positioning.Overflow}.
     */
    function getPositionAtCoordinate(
        absolutePos: ಠ_ಠ.clutz.goog.math.Coordinate,
        elementSize: ಠ_ಠ.clutz.goog.math.Size,
        elementCorner: ಠ_ಠ.clutz.goog.positioning.Corner,
        opt_margin?: ಠ_ಠ.clutz.goog.math.Box|null,
        opt_viewport?: ಠ_ಠ.clutz.goog.math.Box|null,
        opt_overflow?: number|null): {
        rect: ಠ_ಠ.clutz.goog.math.Rect,
        status: ಠ_ಠ.clutz.goog.positioning.OverflowStatus
    };
    /**
     * Positions a movable element relative to an anchor element. The caller
     * specifies the corners that should touch. This functions then moves the
     * movable element accordingly.
     * @param anchorElement The element that is the anchor for where the movable
     * element should position itself.
     * @param anchorElementCorner The corner of the anchorElement for
     * positioning the movable element.
     * @param movableElement The element to move.
     * @param movableElementCorner The corner of the movableElement that that
     * should be positioned adjacent to the anchor element.
     * @param opt_offset An offset specified in pixels. After the normal
     * positioning algorithm is applied, the offset is then applied. Positive
     * coordinates move the popup closer to the center of the anchor element.
     * Negative coordinates move the popup away from the center of the anchor
     * element.
     * @param opt_margin A margin specified in pixels. After the normal
     * positioning algorithm is applied and any offset, the margin is then
     * applied. Positive coordinates move the popup away from the spot it was
     * positioned towards its center. Negative coordinates move it towards the
     * spot it was positioned away from its center.
     * @param opt_overflow Overflow handling mode. Defaults to IGNORE if not specified. Bitmap, {@see goog.positioning.Overflow}.
     * @param opt_preferredSize The preferred size of the movableElement.
     * @param opt_viewport Box object describing the dimensions of the viewport.
     * The viewport is specified relative to offsetParent of {@code
     * movableElement}. In other words, the viewport can be thought of as
     * describing a "position: absolute" element contained in the offsetParent.
     * It defaults to visible area of nearest scrollable ancestor of {@code
     * movableElement} (see {@code goog.style.getVisibleRectForElement}).
     */
    function positionAtAnchor(
        anchorElement: GlobalElement|null,
        anchorElementCorner: ಠ_ಠ.clutz.goog.positioning.Corner,
        movableElement: GlobalElement|null,
        movableElementCorner: ಠ_ಠ.clutz.goog.positioning.Corner,
        opt_offset?: ಠ_ಠ.clutz.goog.math.Coordinate|null,
        opt_margin?: ಠ_ಠ.clutz.goog.math.Box|null, opt_overflow?: number|null,
        opt_preferredSize?: ಠ_ಠ.clutz.goog.math.Size|null,
        opt_viewport?: ಠ_ಠ.clutz.goog.math.Box|
        null): ಠ_ಠ.clutz.goog.positioning.OverflowStatus;
    /**
     * Positions the specified corner of the movable element at the
     * specified coordinate.
     * @param absolutePos The coordinate to position the element at.
     * @param movableElement The element to be positioned.
     * @param movableElementCorner The corner of the movableElement that that
     * should be positioned.
     * @param opt_margin A margin specified in pixels. After the normal
     * positioning algorithm is applied and any offset, the margin is then
     * applied. Positive coordinates move the popup away from the spot it was
     * positioned towards its center. Negative coordinates move it towards the
     * spot it was positioned away from its center.
     * @param opt_viewport Box object describing the dimensions of the viewport.
     * Required if opt_overflow is specified.
     * @param opt_overflow Overflow handling mode. Defaults to IGNORE if not specified, {@see goog.positioning.Overflow}.
     * @param opt_preferredSize The preferred size of the movableElement.
     * Defaults to the current size.
     */
    function positionAtCoordinate(
        absolutePos: ಠ_ಠ.clutz.goog.math.Coordinate|null,
        movableElement: GlobalElement|null,
        movableElementCorner: ಠ_ಠ.clutz.goog.positioning.Corner,
        opt_margin?: ಠ_ಠ.clutz.goog.math.Box|null,
        opt_viewport?: ಠ_ಠ.clutz.goog.math.Box|null, opt_overflow?: number|null,
        opt_preferredSize?: ಠ_ಠ.clutz.goog.math.Size|
        null): ಠ_ಠ.clutz.goog.positioning.OverflowStatus;
}
declare module 'goog:goog.positioning' {
    import alias = ಠ_ಠ.clutz.goog.positioning;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.positioning {
    /**
     * Encapsulates a popup position where the popup absolutely positioned by
     * setting the left/top style elements directly to the specified values.
     * The position is generally relative to the element's offsetParent.
     * Normally, this is the document body, but can be another element if the
     * popup element is scoped by an element with relative position.
     */
    class AbsolutePosition extends AbsolutePosition_Instance {}
    class AbsolutePosition_Instance extends
        ಠ_ಠ.clutz.goog.positioning.AbstractPosition_Instance {
        /**
         * Encapsulates a popup position where the popup absolutely positioned
         * by setting the left/top style elements directly to the specified
         * values. The position is generally relative to the element's
         * offsetParent. Normally, this is the document body, but can be another
         * element if the popup element is scoped by an element with relative
         * position.
         * @param arg1 Left position or coordinate.
         * @param opt_arg2 Top position.
         */
        constructor(
            arg1: number|ಠ_ಠ.clutz.goog.math.Coordinate, opt_arg2?: number);
        /**
         * Coordinate to position popup at.
         */
        coordinate: ಠ_ಠ.clutz.goog.math.Coordinate|null;
        /**
         * Repositions the popup according to the current state.
         * @param movableElement The DOM element to position.
         * @param movableCorner The corner of the movable element that should be
         * positioned at the specified position.
         * @param opt_margin A margin specified in pixels.
         * @param opt_preferredSize Preferred size of the movableElement.
         */
        reposition(
            movableElement: GlobalElement|null,
            movableCorner: ಠ_ಠ.clutz.goog.positioning.Corner,
            opt_margin?: ಠ_ಠ.clutz.goog.math.Box|null,
            opt_preferredSize?: ಠ_ಠ.clutz.goog.math.Size|null): void;
    }
}
declare module 'goog:goog.positioning.AbsolutePosition' {
    import alias = ಠ_ಠ.clutz.goog.positioning.AbsolutePosition;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.positioning {
    /**
     * Abstract position object. Encapsulates position and overflow handling.
     */
    class AbstractPosition extends AbstractPosition_Instance {}
    class AbstractPosition_Instance {
        private noStructuralTyping_: any;
        /**
         * Repositions the element. Abstract method, should be overloaded.
         * @param movableElement Element to position.
         * @param corner Corner of the movable element that should be positioned
         * adjacent to the anchored element.
         * @param opt_margin A margin specified in pixels.
         * @param opt_preferredSize PreferredSize of the movableElement.
         */
        reposition(
            movableElement: GlobalElement|null,
            corner: ಠ_ಠ.clutz.goog.positioning.Corner,
            opt_margin?: ಠ_ಠ.clutz.goog.math.Box|null,
            opt_preferredSize?: ಠ_ಠ.clutz.goog.math.Size|null): void;
    }
}
declare module 'goog:goog.positioning.AbstractPosition' {
    import alias = ಠ_ಠ.clutz.goog.positioning.AbstractPosition;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.positioning {
    /**
     * Encapsulates a popup position where the popup is anchored at a corner of
     * an element.
     *
     * When using AnchoredPosition, it is recommended that the popup element
     * specified in the Popup constructor or Popup.setElement be absolutely
     * positioned.
     */
    class AnchoredPosition extends AnchoredPosition_Instance {}
    class AnchoredPosition_Instance extends
        ಠ_ಠ.clutz.goog.positioning.AbstractPosition_Instance {
        /**
         * Encapsulates a popup position where the popup is anchored at a corner
         * of an element.
         *
         * When using AnchoredPosition, it is recommended that the popup element
         * specified in the Popup constructor or Popup.setElement be absolutely
         * positioned.
         * @param anchorElement Element the movable element should be anchored
         * against.
         * @param corner Corner of anchored element the movable element should
         * be positioned at.
         * @param opt_overflow Overflow handling mode. Defaults to IGNORE if not specified. Bitmap, {@see goog.positioning.Overflow}.
         */
        constructor(
            anchorElement: GlobalElement|null,
            corner: ಠ_ಠ.clutz.goog.positioning.Corner, opt_overflow?: number);
        /**
         * Corner of anchored element the movable element should be positioned
         * at.
         */
        corner: ಠ_ಠ.clutz.goog.positioning.Corner;
        /**
         * Element the movable element should be anchored against.
         */
        element: GlobalElement|null;
        /**
         * Repositions the movable element.
         * @param movableElement Element to position.
         * @param movableCorner Corner of the movable element that should be
         * positioned adjacent to the anchored element.
         * @param opt_margin A margin specifin pixels.
         * @param opt_preferredSize PreferredSize of the movableElement (unused
         * in this class).
         */
        reposition(
            movableElement: GlobalElement|null,
            movableCorner: ಠ_ಠ.clutz.goog.positioning.Corner,
            opt_margin?: ಠ_ಠ.clutz.goog.math.Box|null,
            opt_preferredSize?: ಠ_ಠ.clutz.goog.math.Size|null): void;
    }
}
declare module 'goog:goog.positioning.AnchoredPosition' {
    import alias = ಠ_ಠ.clutz.goog.positioning.AnchoredPosition;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.positioning {
    /**
     * Encapsulates a popup position where the popup is anchored at a corner of
     * an element. The corners are swapped if dictated by the viewport. For
     * instance if a popup is anchored with its top left corner to the bottom
     * left corner of the anchor the popup is either displayed below the anchor
     * (as specified) or above it if there's not enough room to display it
     * below.
     *
     * When using this positioning object it's recommended that the movable
     * element be absolutely positioned.
     */
    class AnchoredViewportPosition extends AnchoredViewportPosition_Instance {}
    class AnchoredViewportPosition_Instance extends
        ಠ_ಠ.clutz.goog.positioning.AnchoredPosition_Instance {
        /**
         * Encapsulates a popup position where the popup is anchored at a corner
         * of an element. The corners are swapped if dictated by the viewport.
         * For instance if a popup is anchored with its top left corner to the
         * bottom left corner of the anchor the popup is either displayed below
         * the anchor (as specified) or above it if there's not enough room to
         * display it below.
         *
         * When using this positioning object it's recommended that the movable
         * element be absolutely positioned.
         * @param anchorElement Element the movable element should be anchored
         * against.
         * @param corner Corner of anchored element the movable element should
         * be positioned at.
         * @param opt_adjust Whether the positioning should be adjusted until
         * the element fits inside the viewport even if that means that the
         * anchored corners are ignored.
         * @param opt_overflowConstraint Box object describing the dimensions in
         * which the movable element could be shown.
         */
        constructor(
            anchorElement: GlobalElement|null,
            corner: ಠ_ಠ.clutz.goog.positioning.Corner, opt_adjust?: boolean,
            opt_overflowConstraint?: ಠ_ಠ.clutz.goog.math.Box|null);
        /**
         * Adjusts the corner if X or Y positioning failed.
         * @param status The status of the last positionAtAnchor call.
         * @param corner The corner to adjust.
         */
        adjustCorner(status: number, corner: ಠ_ಠ.clutz.goog.positioning.Corner):
            ಠ_ಠ.clutz.goog.positioning.Corner;
        getLastResortOverflow(): number;
        getOverflowConstraint(): ಠ_ಠ.clutz.goog.math.Box|null|undefined;
        /**
         * Repositions the movable element.
         * @param movableElement Element to position.
         * @param movableCorner Corner of the movable element that should be
         * positioned adjacent to the anchored element.
         * @param opt_margin A margin specified in pixels.
         * @param opt_preferredSize The preferred size of the movableElement.
         */
        reposition(
            movableElement: GlobalElement|null,
            movableCorner: ಠ_ಠ.clutz.goog.positioning.Corner,
            opt_margin?: ಠ_ಠ.clutz.goog.math.Box|null,
            opt_preferredSize?: ಠ_ಠ.clutz.goog.math.Size|null): void;
        setLastResortOverflow(lastResortOverflow: number): void;
        setOverflowConstraint(overflowConstraint: ಠ_ಠ.clutz.goog.math.Box|null|
                              undefined): void;
    }
}
declare module 'goog:goog.positioning.AnchoredViewportPosition' {
    import alias = ಠ_ಠ.clutz.goog.positioning.AnchoredViewportPosition;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.positioning {
    /**
     * Encapsulates a popup position where the popup is positioned relative to
     * the window (client) coordinates. This calculates the correct position to
     * use even if the element is relatively positioned to some other element.
     * This is for trying to position an element at the spot of the mouse cursor
     * in a MOUSEMOVE event. Just use the event.clientX and event.clientY as the
     * parameters.
     */
    class ClientPosition extends ClientPosition_Instance {}
    class ClientPosition_Instance extends
        ಠ_ಠ.clutz.goog.positioning.AbstractPosition_Instance {
        /**
         * Encapsulates a popup position where the popup is positioned relative
         * to the window (client) coordinates. This calculates the correct
         * position to use even if the element is relatively positioned to some
         * other element. This is for trying to position an element at the spot
         * of the mouse cursor in a MOUSEMOVE event. Just use the event.clientX
         * and event.clientY as the parameters.
         * @param arg1 Left position or coordinate.
         * @param opt_arg2 Top position.
         */
        constructor(
            arg1: number|ಠ_ಠ.clutz.goog.math.Coordinate|null,
            opt_arg2?: number);
        /**
         * Coordinate to position popup at.
         */
        coordinate: ಠ_ಠ.clutz.goog.math.Coordinate|null;
        /**
         * Repositions the popup according to the current state
         * @param movableElement The DOM element of the popup.
         * @param movableElementCorner The corner of the popup element that that
         * should be positioned adjacent to the anchorElement.  One of the
         * goog.positioning.Corner constants.
         * @param opt_margin A margin specified in pixels.
         * @param opt_preferredSize Preferred size of the element.
         */
        reposition(
            movableElement: GlobalElement|null,
            movableElementCorner: ಠ_ಠ.clutz.goog.positioning.Corner,
            opt_margin?: ಠ_ಠ.clutz.goog.math.Box|null,
            opt_preferredSize?: ಠ_ಠ.clutz.goog.math.Size|null): void;
    }
}
declare module 'goog:goog.positioning.ClientPosition' {
    import alias = ಠ_ಠ.clutz.goog.positioning.ClientPosition;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.positioning {
    /**
     * Enum for representing an element corner for positioning the popup.
     *
     * The START constants map to LEFT if element directionality is left
     * to right and RIGHT if the directionality is right to left.
     * Likewise END maps to RIGHT or LEFT depending on the directionality.
     */
    enum Corner {
        BOTTOM_CENTER,
        BOTTOM_END,
        BOTTOM_LEFT,
        BOTTOM_RIGHT,
        BOTTOM_START,
        TOP_CENTER,
        TOP_END,
        TOP_LEFT,
        TOP_RIGHT,
        TOP_START,
    }
}
declare module 'goog:goog.positioning.Corner' {
    import alias = ಠ_ಠ.clutz.goog.positioning.Corner;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.positioning {
    /**
     * Enum for bits in the {@see goog.positioning.Corner) bitmap.
     */
    enum CornerBit {
        BOTTOM,
        CENTER,
        FLIP_RTL,
        RIGHT,
    }
}
declare module 'goog:goog.positioning.CornerBit' {
    import alias = ಠ_ಠ.clutz.goog.positioning.CornerBit;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.positioning {
    /**
     * Encapsulates a popup position where the popup is anchored at a corner of
     * an element.  The positioning behavior changes based on the values of
     * opt_adjust and opt_resize.
     *
     * When using this positioning object it's recommended that the movable
     * element be absolutely positioned.
     */
    class MenuAnchoredPosition extends MenuAnchoredPosition_Instance {}
    class MenuAnchoredPosition_Instance extends
        ಠ_ಠ.clutz.goog.positioning.AnchoredViewportPosition_Instance {
        /**
         * Encapsulates a popup position where the popup is anchored at a corner
         * of an element.  The positioning behavior changes based on the values
         * of opt_adjust and opt_resize.
         *
         * When using this positioning object it's recommended that the movable
         * element be absolutely positioned.
         * @param anchorElement Element the movable element should be anchored
         * against.
         * @param corner Corner of anchored element the movable element should
         * be positioned at.
         * @param opt_adjust Whether the positioning should be adjusted until
         * the element fits inside the viewport even if that means that the
         * anchored corners are ignored.
         * @param opt_resize Whether the positioning should be adjusted until
         * the element fits inside the viewport on the X axis and its height is
         * resized so if fits in the viewport. This take precedence over
         * opt_adjust.
         */
        constructor(
            anchorElement: GlobalElement|null,
            corner: ಠ_ಠ.clutz.goog.positioning.Corner, opt_adjust?: boolean,
            opt_resize?: boolean);
    }
}
declare module 'goog:goog.positioning.MenuAnchoredPosition' {
    import alias = ಠ_ಠ.clutz.goog.positioning.MenuAnchoredPosition;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.positioning {
    /**
     * Enum for representing position handling in cases where the element would
     * be positioned outside the viewport.
     */
    enum Overflow {
        ADJUST_X,
        ADJUST_X_EXCEPT_OFFSCREEN,
        ADJUST_Y,
        ADJUST_Y_EXCEPT_OFFSCREEN,
        FAIL_X,
        FAIL_Y,
        IGNORE,
        RESIZE_HEIGHT,
        RESIZE_WIDTH,
    }
}
declare module 'goog:goog.positioning.Overflow' {
    import alias = ಠ_ಠ.clutz.goog.positioning.Overflow;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.positioning {
    /**
     * Enum for representing the outcome of a positioning call.
     */
    enum OverflowStatus {
        ADJUSTED_X,
        ADJUSTED_Y,
        FAILED_BOTTOM,
        FAILED_LEFT,
        FAILED_OUTSIDE_VIEWPORT,
        FAILED_RIGHT,
        FAILED_TOP,
        HEIGHT_ADJUSTED,
        NONE,
        WIDTH_ADJUSTED,
    }
}
declare module 'goog:goog.positioning.OverflowStatus' {
    import alias = ಠ_ಠ.clutz.goog.positioning.OverflowStatus;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.positioning {
    /**
     * Encapsulates a popup position where the popup is positioned relative to
     * the window (client) coordinates, and made to stay within the viewport.
     */
    class ViewportClientPosition extends ViewportClientPosition_Instance {}
    class ViewportClientPosition_Instance extends
        ಠ_ಠ.clutz.goog.positioning.ClientPosition_Instance {
        /**
         * Encapsulates a popup position where the popup is positioned relative
         * to the window (client) coordinates, and made to stay within the
         * viewport.
         * @param arg1 Left position or coordinate.
         * @param opt_arg2 Top position if arg1 is a number representing the
         * left position, ignored otherwise.
         */
        constructor(
            arg1: number|ಠ_ಠ.clutz.goog.math.Coordinate|null,
            opt_arg2?: number);
        /**
         * Repositions the popup according to the current state.
         * @param element The DOM element of the popup.
         * @param popupCorner The corner of the popup element that that should
         * be positioned adjacent to the anchorElement. One of the
         * goog.positioning.Corner constants.
         * @param opt_margin A margin specified in pixels.
         * @param opt_preferredSize Preferred size fo the element.
         */
        reposition(
            element: GlobalElement|null,
            popupCorner: ಠ_ಠ.clutz.goog.positioning.Corner,
            opt_margin?: ಠ_ಠ.clutz.goog.math.Box|null,
            opt_preferredSize?: ಠ_ಠ.clutz.goog.math.Size|null): void;
        /**
         * Set the last-resort overflow strategy, if the popup fails to fit.
         * @param overflow A bitmask of goog.positioning.Overflow strategies.
         */
        setLastResortOverflow(overflow: number): void;
    }
}
declare module 'goog:goog.positioning.ViewportClientPosition' {
    import alias = ಠ_ಠ.clutz.goog.positioning.ViewportClientPosition;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.positioning {
    /**
     * Encapsulates a popup position where the popup is positioned according to
     * coordinates relative to the  element's viewport (page). This calculates
     * the correct position to use even if the element is relatively positioned
     * to some other element.
     */
    class ViewportPosition extends ViewportPosition_Instance {}
    class ViewportPosition_Instance extends
        ಠ_ಠ.clutz.goog.positioning.AbstractPosition_Instance {
        /**
         * Encapsulates a popup position where the popup is positioned according
         * to coordinates relative to the  element's viewport (page). This
         * calculates the correct position to use even if the element is
         * relatively positioned to some other element.
         * @param arg1 Left position or coordinate.
         * @param opt_arg2 Top position.
         */
        constructor(
            arg1: number|ಠ_ಠ.clutz.goog.math.Coordinate|null,
            opt_arg2?: number);
        coordinate: ಠ_ಠ.clutz.goog.math.Coordinate;
        /**
         * Repositions the popup according to the current state
         * @param element The DOM element of the popup.
         * @param popupCorner The corner of the popup element that that should
         * be positioned adjacent to the anchorElement.
         * @param opt_margin A margin specified in pixels.
         * @param opt_preferredSize Preferred size of the element.
         */
        reposition(
            element: GlobalElement|null,
            popupCorner: ಠ_ಠ.clutz.goog.positioning.Corner,
            opt_margin?: ಠ_ಠ.clutz.goog.math.Box|null,
            opt_preferredSize?: ಠ_ಠ.clutz.goog.math.Size|null): void;
    }
}
declare module 'goog:goog.positioning.ViewportPosition' {
    import alias = ಠ_ಠ.clutz.goog.positioning.ViewportPosition;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.promise {
    /**
     * Resolver interface for promises. The resolver is a convenience interface
     * that bundles the promise and its associated resolve and reject functions
     * together, for cases where the resolver needs to be persisted internally.
     */
    interface Resolver<TYPE = any> {
        /**
         * The promise that created this resolver.
         */
        promise: ಠ_ಠ.clutz.goog.Promise<any, any>;
        /**
         * Rejects this resolver with the specified reason.
         */
        reject(a?: any): void;
        /**
         * Resolves this resolver with the specified value.
         */
        resolve(a?: TYPE|null|{then: any}): any;
    }
}
declare module 'goog:goog.promise.Resolver' {
    import alias = ಠ_ಠ.clutz.goog.promise.Resolver;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.proto {
    /**
     * Serializes an object or a value to a protocol buffer string.
     * @param object The object to serialize.
     */
    function serialize(object: GlobalObject|null): string;
}
declare module 'goog:goog.proto' {
    import alias = ಠ_ಠ.clutz.goog.proto;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.proto {
    /**
     * Object that can serialize objects or values to a protocol buffer string.
     */
    class Serializer extends Serializer_Instance {}
    class Serializer_Instance extends ಠ_ಠ.clutz.goog.json.Serializer_Instance {
        /**
         * Object that can serialize objects or values to a protocol buffer
         * string.
         */
        constructor();
        /**
         * Serializes an array to a protocol buffer string. This overrides the
         * JSON method to don't output trailing null or undefined.
         * @param arr The array to serialize.
         * @param sb Array used as a string builder.
         */
        serializeArray(
            arr: ಠ_ಠ.clutz.goog.uri.utils.QueryArray|null,
            sb: string[]|null): void;
    }
}
declare module 'goog:goog.proto.Serializer' {
    import alias = ಠ_ಠ.clutz.goog.proto.Serializer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.proto2 {
    /**
     * A class which describes a Protocol Buffer 2 Message.
     */
    class Descriptor extends Descriptor_Instance {}
    class Descriptor_Instance {
        private noStructuralTyping_: any;
        /**
         * A class which describes a Protocol Buffer 2 Message.
         * @param messageType Constructor for the message class that this
         * descriptor describes.
         * @param metadata The metadata about the message that will be used to
         * construct this descriptor.
         * @param fields The fields of the message described by this descriptor.
         */
        constructor(
            messageType: {new(): ಠ_ಠ.clutz.goog.proto2.Message},
            metadata: ಠ_ಠ.clutz.goog.proto2.Metadata,
            fields: ಠ_ಠ.clutz.goog.proto2.FieldDescriptor[]|null);
        /**
         * Creates an instance of the message type that this descriptor
         * describes.
         */
        createMessageInstance(): ಠ_ಠ.clutz.goog.proto2.Message;
        /**
         * Returns the field matching the given name, if any. Note that
         * this method searches over the *original* name of the field,
         * not the camelCase version.
         * @param name The field name for which to search.
         */
        findFieldByName(name: string): ಠ_ಠ.clutz.goog.proto2.FieldDescriptor
            |null;
        /**
         * Returns the field matching the given tag number, if any.
         * @param tag The field tag number for which to search.
         */
        findFieldByTag(tag: number|
                       string): ಠ_ಠ.clutz.goog.proto2.FieldDescriptor|null;
        /**
         * Returns the descriptor of the containing message type or null if
         * none.
         */
        getContainingType(): ಠ_ಠ.clutz.goog.proto2.Descriptor|null;
        /**
         * Returns the fields in the message described by this descriptor
         * ordered by tag.
         */
        getFields(): ಠ_ಠ.clutz.goog.proto2.FieldDescriptor[];
        /**
         * Returns the fields in the message as a key/value map, where the key
         * is the tag number of the field. DO NOT MODIFY THE RETURNED OBJECT. We
         * return the actual, internal, fields map for performance reasons, and
         * changing the map can result in undefined behavior of this library.
         */
        getFieldsMap(): {[key: number]: ಠ_ಠ.clutz.goog.proto2.FieldDescriptor};
        /**
         * Returns the full name of the message, if any.
         */
        getFullName(): string|null;
        /**
         * Returns the name of the message, if any.
         */
        getName(): string|null;
    }
}
declare module 'goog:goog.proto2.Descriptor' {
    import alias = ಠ_ಠ.clutz.goog.proto2.Descriptor;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.proto2 {
    /**
     * A class which describes a field in a Protocol Buffer 2 Message.
     */
    class FieldDescriptor extends FieldDescriptor_Instance {}
    class FieldDescriptor_Instance {
        private noStructuralTyping_: any;
        /**
         * A class which describes a field in a Protocol Buffer 2 Message.
         * @param messageType Constructor for the message class to which the
         * field described by this class belongs.
         * @param tag The field's tag index.
         * @param metadata The metadata about this field that will be used to
         * construct this descriptor.
         */
        constructor(
            messageType: {new(): ಠ_ಠ.clutz.goog.proto2.Message},
            tag: number|string, metadata: GlobalObject|null);
        /**
         * Returns true if simple conversions between numbers and strings are
         * permitted during deserialization for this field.
         */
        deserializationConversionPermitted(): boolean;
        /**
         * Returns the descriptor describing the message that defined this
         * field.
         */
        getContainingType(): ಠ_ಠ.clutz.goog.proto2.Descriptor;
        /**
         * Returns the default value of this field.
         */
        getDefaultValue(): any;
        /**
         * Returns the descriptor of the message type of this field. Only valid
         * for fields of type GROUP and MESSAGE.
         */
        getFieldMessageType(): ಠ_ಠ.clutz.goog.proto2.Descriptor;
        /**
         * Returns the field type of the field described by this descriptor.
         */
        getFieldType(): ಠ_ಠ.clutz.goog.proto2.FieldDescriptor.FieldType;
        /**
         * Returns the name of the field that this descriptor represents.
         */
        getName(): string;
        /**
         * Returns the native (i.e. ECMAScript) type of the field described by
         * this descriptor.
         */
        getNativeType(): GlobalObject|null;
        /**
         * Returns the tag of the field that this descriptor represents.
         */
        getTag(): number;
        isCompositeType(): boolean;
        /**
         * Returns whether the field described by this descriptor is optional.
         */
        isOptional(): boolean;
        /**
         * Returns whether the field described by this descriptor is packed.
         */
        isPacked(): boolean;
        /**
         * Returns whether the field described by this descriptor is repeating.
         */
        isRepeated(): boolean;
        /**
         * Returns whether the field described by this descriptor is required.
         */
        isRequired(): boolean;
    }
}
declare namespace ಠ_ಠ.clutz.goog.proto2.FieldDescriptor {
    enum FieldType {
        BOOL,
        BYTES,
        DOUBLE,
        ENUM,
        FIXED32,
        FIXED64,
        FLOAT,
        GROUP,
        INT32,
        INT64,
        MESSAGE,
        SFIXED32,
        SFIXED64,
        SINT32,
        SINT64,
        STRING,
        UINT32,
        UINT64,
    }
}
declare module 'goog:goog.proto2.FieldDescriptor' {
    import alias = ಠ_ಠ.clutz.goog.proto2.FieldDescriptor;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.proto2 {
    /**
     * Base class for all lazy deserializers.
     */
    class LazyDeserializer extends LazyDeserializer_Instance {}
    class LazyDeserializer_Instance extends
        ಠ_ಠ.clutz.goog.proto2.Serializer_Instance {
        deserialize(
            descriptor: ಠ_ಠ.clutz.goog.proto2.Descriptor|null,
            data: any): ಠ_ಠ.clutz.goog.proto2.Message;
        /**
         * Deserializes a message field from the expected format and places the
         * data in the given message
         * @param message The message in which to place the information.
         * @param field The field for which to set the message value.
         * @param data The serialized data for the field.
         */
        deserializeField(
            a: ಠ_ಠ.clutz.goog.proto2.Message|null,
            b: ಠ_ಠ.clutz.goog.proto2.FieldDescriptor|null, c: any): any;
        deserializeTo(message: ಠ_ಠ.clutz.goog.proto2.Message|null, data: any):
            any;
    }
}
declare module 'goog:goog.proto2.LazyDeserializer' {
    import alias = ಠ_ಠ.clutz.goog.proto2.LazyDeserializer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.proto2 {
    /**
     * Abstract base class for all Protocol Buffer 2 messages. It will be
     * subclassed in the code generated by the Protocol Compiler. Any other
     * subclasses are prohibited.
     */
    class Message extends Message_Instance {
        /**
         * Creates the metadata descriptor representing the definition of this
         * message.
         * @param messageType Constructor for the message type to which this
         * metadata applies.
         * @param metadataObj The object containing the metadata.
         */
        static createDescriptor(
            messageType: {new(): ಠ_ಠ.clutz.goog.proto2.Message},
            metadataObj: GlobalObject): ಠ_ಠ.clutz.goog.proto2.Descriptor;
    }
    class Message_Instance {
        private noStructuralTyping_: any;
        /**
         * Adds the given value to the field specified by the
         * given field descriptor. Note that the field must be repeated.
         * @param field The field in which to add the the value.
         * @param value The new value to add to the field.
         */
        add(field: ಠ_ಠ.clutz.goog.proto2.FieldDescriptor|null,
            value: any): void;
        /**
         * Adds the value to the *repeating* field indicated by the given tag.
         *
         * GENERATED CODE USE ONLY. Basis of the add{Field} methods.
         * @param tag The field's tag index.
         * @param value The value to add.
         */
        add$Value(tag: number, value: any): void;
        /**
         * Gets the values at the field indicated by the given tag.
         *
         * GENERATED CODE USE ONLY. Basis of the {field}Array methods.
         * @param tag The field's tag index.
         */
        array$Values(tag: number): any[];
        /**
         * Returns the array of values found for the given repeated field.
         * @param field The field for which to return the values.
         */
        arrayOf(field: ಠ_ಠ.clutz.goog.proto2.FieldDescriptor|null): any[];
        /**
         * Clears the field specified.
         * @param field The field to clear.
         */
        clear(field: ಠ_ಠ.clutz.goog.proto2.FieldDescriptor|null): void;
        /**
         * Clears the field specified by tag.
         *
         * GENERATED CODE USE ONLY. Basis of the clear{Field} methods.
         * @param tag The tag of the field to clear.
         */
        clear$Field(tag: number): void;
        clone(): ಠ_ಠ.clutz.goog.proto2.Message;
        /**
         * Recursively copies the known fields from the given message to this
         * message. Removes the fields which are not present in the source
         * message.
         * @param message The source message.
         */
        copyFrom(message: ಠ_ಠ.clutz.goog.proto2.Message): void;
        /**
         * Returns the number of values stored in the field by the given tag.
         *
         * GENERATED CODE USE ONLY. Basis of the {field}Count methods.
         * @param tag The tag.
         */
        count$Values(tag: number): number;
        /**
         * Returns the number of values stored in the given field.
         * @param field The field for which to count the number of values.
         */
        countOf(field: ಠ_ಠ.clutz.goog.proto2.FieldDescriptor|null): number;
        /**
         * Compares this message with another one ignoring the unknown fields.
         * @param other The other message.
         */
        equals(other?: any): boolean;
        /**
         * Iterates over all the unknown fields in the message.
         * @param callback A callback method which gets invoked for each unknown
         * field.
         * @param opt_scope The scope under which to execute the callback. If
         * not given, the current message will be used.
         */
        forEachUnknown<T = any>(
            callback: (a: number, b: any) => any, opt_scope?: T): void;
        /**
         * Returns the value stored at the field specified by the
         * given field descriptor.
         * @param field The field for which to get the value.
         * @param opt_index If the field is repeated, the index to use when
         * looking up the value.
         */
        get(field: ಠ_ಠ.clutz.goog.proto2.FieldDescriptor|null,
            opt_index?: number): any;
        /**
         * Gets the value at the field indicated by the given tag.
         *
         * GENERATED CODE USE ONLY. Basis of the get{Field} methods.
         * @param tag The field's tag index.
         * @param opt_index If the field is a repeated field, the index at which
         * to get the value.
         */
        get$Value(tag: number, opt_index?: number): any;
        /**
         * Gets the value at the field indicated by the given tag or the default
         * value if none.
         *
         * GENERATED CODE USE ONLY. Basis of the get{Field} methods.
         * @param tag The field's tag index.
         * @param opt_index If the field is a repeated field, the index at which
         * to get the value.
         */
        get$ValueOrDefault(tag: number, opt_index?: number): any;
        /**
         * Returns the descriptor which describes the current message.
         *
         * This only works if we assume people never subclass protobufs.
         */
        getDescriptor(): ಠ_ಠ.clutz.goog.proto2.Descriptor;
        /**
         * Returns the value stored at the field specified by the
         * given field descriptor or the default value if none exists.
         * @param field The field for which to get the value.
         * @param opt_index If the field is repeated, the index to use when
         * looking up the value.
         */
        getOrDefault(
            field: ಠ_ಠ.clutz.goog.proto2.FieldDescriptor|null,
            opt_index?: number): any;
        /**
         * Returns whether there is a value stored at the field specified by the
         * given field descriptor.
         * @param field The field for which to check if there is a value.
         */
        has(field: ಠ_ಠ.clutz.goog.proto2.FieldDescriptor|null): boolean;
        /**
         * Returns the whether or not the field indicated by the given tag
         * has a value.
         *
         * GENERATED CODE USE ONLY. Basis of the has{Field} methods.
         * @param tag The tag.
         */
        has$Value(tag: number): boolean;
        /**
         * Fills in the protocol buffer with default values. Any fields that are
         * already set will not be overridden.
         * @param simpleFieldsToo If true, all fields will be initialized; if
         * false, only the nested messages and groups.
         */
        initDefaults(simpleFieldsToo: boolean): void;
        /**
         * Initializes the message with a lazy deserializer and its associated
         * data. This method should be called by internal methods ONLY.
         * @param deserializer The lazy deserializer to use to decode the data
         * on the fly.
         * @param data The data to decode/deserialize.
         */
        initializeForLazyDeserializer(
            deserializer: ಠ_ಠ.clutz.goog.proto2.LazyDeserializer|null,
            data: any): void;
        /**
         * Merges the given message into this message.
         *
         * Singular fields will be overwritten, except for embedded messages
         * which will be merged. Repeated fields will be concatenated.
         * @param message The source message.
         */
        mergeFrom(message: ಠ_ಠ.clutz.goog.proto2.Message): void;
        /**
         * Stores the given value to the field specified by the
         * given field descriptor. Note that the field must not be repeated.
         * @param field The field for which to set the value.
         * @param value The new value for the field.
         */
        set(field: ಠ_ಠ.clutz.goog.proto2.FieldDescriptor|null,
            value: any): void;
        /**
         * Sets the value of the *non-repeating* field indicated by the given
         * tag.
         *
         * GENERATED CODE USE ONLY. Basis of the set{Field} methods.
         * @param tag The field's tag index.
         * @param value The field's value.
         */
        set$Value(tag: number, value: any): void;
        /**
         * Sets the value of an unknown field, by tag.
         * @param tag The tag of an unknown field (must be >= 1).
         * @param value The value for that unknown field.
         */
        setUnknown(tag: number, value: any): void;
    }
}
declare namespace ಠ_ಠ.clutz.goog.proto2.Message {
    enum FieldType {
        BOOL,
        BYTES,
        DOUBLE,
        ENUM,
        FIXED32,
        FIXED64,
        FLOAT,
        GROUP,
        INT32,
        INT64,
        MESSAGE,
        SFIXED32,
        SFIXED64,
        SINT32,
        SINT64,
        STRING,
        UINT32,
        UINT64,
    }
}
declare module 'goog:goog.proto2.Message' {
    import alias = ಠ_ಠ.clutz.goog.proto2.Message;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.proto2 {
    type Metadata = {
        containingType?: ಠ_ಠ.clutz.goog.proto2.Message | null,
        fullName?: string,
        name?: string
    };
}
declare module 'goog:goog.proto2.Metadata' {
    import alias = ಠ_ಠ.clutz.goog.proto2.Metadata;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.proto2 {
    /**
     * ObjectSerializer, a serializer which turns Messages into simplified
     * ECMAScript objects.
     */
    class ObjectSerializer extends ObjectSerializer_Instance {}
    class ObjectSerializer_Instance extends
        ಠ_ಠ.clutz.goog.proto2.Serializer_Instance {
        /**
         * ObjectSerializer, a serializer which turns Messages into simplified
         * ECMAScript objects.
         * @param opt_keyOption If specified, which key option to use when
         * serializing/deserializing.
         * @param opt_serializeBooleanAsNumber If specified and true, the
         * serializer will convert boolean values to 0/1 representation.
         */
        constructor(
            opt_keyOption?: ಠ_ಠ.clutz.goog.proto2.ObjectSerializer.KeyOption,
            opt_serializeBooleanAsNumber?: boolean);
        keyOption_?: ಠ_ಠ.clutz.goog.proto2.ObjectSerializer.KeyOption;
        serializeBooleanAsNumber_?: boolean;
        /**
         * Deserializes a message from an object and places the
         * data in the message.
         * @param message The message in which to place the information.
         * @param data The data of the message.
         */
        deserializeTo(message: ಠ_ಠ.clutz.goog.proto2.Message|null, data: any):
            any;
        getDeserializedValue(
            field: ಠ_ಠ.clutz.goog.proto2.FieldDescriptor|null, value: any): any;
        getSerializedValue(
            field: ಠ_ಠ.clutz.goog.proto2.FieldDescriptor|null, value: any): any;
        /**
         * Serializes a message to an object.
         * @param message The message to be serialized.
         */
        serialize(message: ಠ_ಠ.clutz.goog.proto2.Message|null): GlobalObject;
    }
}
declare namespace ಠ_ಠ.clutz.goog.proto2.ObjectSerializer {
    enum KeyOption {
        CAMEL_CASE_NAME,
        NAME,
        TAG,
    }
}
declare module 'goog:goog.proto2.ObjectSerializer' {
    import alias = ಠ_ಠ.clutz.goog.proto2.ObjectSerializer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.proto2 {
    /**
     * PB-Lite serializer.
     */
    class PbLiteSerializer extends PbLiteSerializer_Instance {}
    class PbLiteSerializer_Instance extends
        ಠ_ಠ.clutz.goog.proto2.LazyDeserializer_Instance {
        deserialize(
            descriptor: ಠ_ಠ.clutz.goog.proto2.Descriptor|null,
            data: any): ಠ_ಠ.clutz.goog.proto2.Message;
        deserializeField(
            message: ಠ_ಠ.clutz.goog.proto2.Message|null,
            field: ಠ_ಠ.clutz.goog.proto2.FieldDescriptor|null, value: any): any;
        getDeserializedValue(
            field: ಠ_ಠ.clutz.goog.proto2.FieldDescriptor|null, value: any): any;
        getSerializedValue(
            field: ಠ_ಠ.clutz.goog.proto2.FieldDescriptor|null, value: any): any;
        /**
         * Serializes a message to a PB-Lite object.
         * @param message The message to be serialized.
         */
        serialize(message: ಠ_ಠ.clutz.goog.proto2.Message|null): any[];
        /**
         * By default, the proto tag with id 1 will have index 1 in the
         * serialized array.
         *
         * If the serializer is set to use zero-indexing, the tag with id 1 will
         * have index 0.
         * @param zeroIndexing Whether this serializer should deal with
         * 0-indexed protos.
         */
        setZeroIndexed(zeroIndexing: boolean): void;
    }
}
declare module 'goog:goog.proto2.PbLiteSerializer' {
    import alias = ಠ_ಠ.clutz.goog.proto2.PbLiteSerializer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.proto2 {
    /**
     * Abstract base class for PB2 serializers. A serializer is a class which
     * implements the serialization and deserialization of a Protocol Buffer
     * Message to/from a specific format.
     */
    class Serializer extends Serializer_Instance {
        static DECODE_SYMBOLIC_ENUMS: boolean;
        static INTEGER_REGEX: RegExp;
    }
    class Serializer_Instance {
        private noStructuralTyping_: any;
        /**
         * Deserializes a message from the expected format.
         * @param descriptor The descriptor of the message to be created.
         * @param data The data of the message.
         */
        deserialize(
            descriptor: ಠ_ಠ.clutz.goog.proto2.Descriptor|null,
            data: any): ಠ_ಠ.clutz.goog.proto2.Message;
        /**
         * Deserializes a message from the expected format and places the
         * data in the message.
         * @param message The message in which to place the information.
         * @param data The data of the message.
         */
        deserializeTo(a: ಠ_ಠ.clutz.goog.proto2.Message|null, b: any): any;
        /**
         * Returns the deserialized form of the given value for the given field
         * if the field is a Message or Group and returns the value, converted
         * or unchanged, for primitive field types otherwise.
         * @param field The field from which this value came.
         * @param value The value of the field.
         */
        getDeserializedValue(
            field: ಠ_ಠ.clutz.goog.proto2.FieldDescriptor|null, value: any): any;
        /**
         * Returns the serialized form of the given value for the given field if
         * the field is a Message or Group and returns the value unchanged
         * otherwise, except for Infinity, -Infinity and NaN numerical values
         * which are converted to string representation.
         * @param field The field from which this value came.
         * @param value The value of the field.
         */
        getSerializedValue(
            field: ಠ_ಠ.clutz.goog.proto2.FieldDescriptor|null, value: any): any;
        /**
         * Serializes a message to the expected format.
         * @param message The message to be serialized.
         */
        serialize(a: ಠ_ಠ.clutz.goog.proto2.Message|null): any;
    }
}
declare module 'goog:goog.proto2.Serializer' {
    import alias = ಠ_ಠ.clutz.goog.proto2.Serializer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.proto2 {
    /**
     * TextFormatSerializer, a serializer which turns Messages into the human
     * readable text format.
     */
    class TextFormatSerializer extends TextFormatSerializer_Instance {}
    class TextFormatSerializer_Instance extends
        ಠ_ಠ.clutz.goog.proto2.Serializer_Instance {
        /**
         * TextFormatSerializer, a serializer which turns Messages into the
         * human readable text format.
         * @param opt_ignoreMissingFields If true, then fields that cannot be
         * found on the proto when parsing the text format will be ignored.
         * @param opt_useEnumValues If true, serialization code for enums will
         * use enum integer values instead of human-readable symbolic names.
         */
        constructor(
            opt_ignoreMissingFields?: boolean, opt_useEnumValues?: boolean);
        /**
         * Deserializes a message from text format and places the data in the
         * message.
         * @param message The message in which to place the information.
         * @param data The text format data.
         */
        deserializeTo(message: ಠ_ಠ.clutz.goog.proto2.Message|null, data: any):
            string|null;
        /**
         * Serializes a message to a string.
         * @param message The message to be serialized.
         */
        serialize(message: ಠ_ಠ.clutz.goog.proto2.Message|null): string;
    }
}
declare namespace ಠ_ಠ.clutz.goog.proto2.TextFormatSerializer {
    class Parser extends Parser_Instance {}
    class Parser_Instance {
        private noStructuralTyping_: any;
        getError(): string|null;
        /**
         * Parses the given data, filling the message as it goes.
         * @param message The message to fill.
         * @param data The text format data.
         * @param opt_ignoreMissingFields If true, fields missing in the proto
         * will be ignored.
         */
        parse(
            message: ಠ_ಠ.clutz.goog.proto2.Message|null, data: string,
            opt_ignoreMissingFields?: boolean): boolean;
    }
    class Printer_ extends Printer__Instance {}
    class Printer__Instance {
        private noStructuralTyping_: any;
        /**
         * Appends the given value to the printer.
         * @param value The value to append.
         */
        append(value: any): void;
        /**
         * Appends a newline to the printer.
         */
        appendLine(): void;
        /**
         * Decreases the indentation in the printer.
         */
        dedent(): void;
        /**
         * Increases the indentation in the printer.
         */
        indent(): void;
        toString(): string;
    }
    class Tokenizer_ extends Tokenizer__Instance {}
    class Tokenizer__Instance {
        private noStructuralTyping_: any;
        getCurrent():
            ಠ_ಠ.clutz.goog.proto2.TextFormatSerializer.Tokenizer_.Token;
        /**
         * Advances to the next token.
         */
        next(): boolean;
    }
}
declare module 'goog:goog.proto2.TextFormatSerializer' {
    import alias = ಠ_ಠ.clutz.goog.proto2.TextFormatSerializer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.proto2.Util {
    var PBCHECK: boolean;
    /**
     * Asserts that the given condition is true, if and only if the PBCHECK
     * flag is on.
     * @param condition The condition to check.
     * @param opt_message Error message in case of failure.
     */
    function assert(condition: any, opt_message?: string): void;
    /**
     * Returns true if debug assertions (checks) are on.
     */
    function conductChecks(): boolean;
}
declare module 'goog:goog.proto2.Util' {
    import alias = ಠ_ಠ.clutz.goog.proto2.Util;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.pubsub {
    /**
     * Topic-based publish/subscribe channel.  Maintains a map of topics to
     * subscriptions.  When a message is published to a topic, all functions
     * subscribed to that topic are invoked in the order they were added.
     * Uncaught errors abort publishing.
     *
     * Topics may be identified by any nonempty string, <strong>except</strong>
     * strings corresponding to native Object properties, e.g. "constructor",
     * "toString", "hasOwnProperty", etc.
     */
    class PubSub extends PubSub_Instance {}
    class PubSub_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance {
        /**
         * Topic-based publish/subscribe channel.  Maintains a map of topics to
         * subscriptions.  When a message is published to a topic, all functions
         * subscribed to that topic are invoked in the order they were added.
         * Uncaught errors abort publishing.
         *
         * Topics may be identified by any nonempty string,
         * <strong>except</strong> strings corresponding to native Object
         * properties, e.g. "constructor", "toString", "hasOwnProperty", etc.
         * @param opt_async Enable asynchronous behavior.  Recommended for new
         * code.  See notes on the publish() method.
         */
        constructor(opt_async?: boolean);
        /**
         * Clears the subscription list for a topic, or all topics if
         * unspecified.
         * @param opt_topic Topic to clear (all topics if unspecified).
         */
        clear(opt_topic?: string): void;
        disposeInternal(): void;
        /**
         * Returns the number of subscriptions to the given topic (or all topics
         * if unspecified). This number will not change while publishing any
         * messages.
         * @param opt_topic The topic (all topics if unspecified).
         */
        getCount(opt_topic?: string): number;
        /**
         * Publishes a message to a topic.  Calls functions subscribed to the
         * topic in the order in which they were added, passing all arguments
         * along.
         *
         * If this object was created with async=true, subscribed functions are
         * called via goog.async.run().  Otherwise, the functions are called
         * directly, and if any of them throw an uncaught error, publishing is
         * aborted.
         * @param topic Topic to publish to.
         * @param var_args Arguments that are applied to each subscription
         * function.
         */
        publish(topic: string, ...var_args: any[]): boolean;
        /**
         * Subscribes a function to a topic.  The function is invoked as a
         * method on the given {@code opt_context} object, or in the global
         * scope if no context is specified.  Subscribing the same function to
         * the same topic multiple times will result in multiple function
         * invocations while publishing. Returns a subscription key that can be
         * used to unsubscribe the function from the topic via {@link
         * #unsubscribeByKey}.
         * @param topic Topic to subscribe to.
         * @param fn Function to be invoked when a message is published to the
         * given topic.
         * @param opt_context Object in whose context the function is to be
         * called (the global scope if none).
         */
        subscribe(
            topic: string, fn: (...a: any[]) => any,
            opt_context?: GlobalObject|null): number;
        /**
         * Subscribes a single-use function to a topic.  The function is invoked
         * as a method on the given {@code opt_context} object, or in the global
         * scope if no context is specified, and is then unsubscribed.  Returns
         * a subscription key that can be used to unsubscribe the function from
         * the topic via
         * {@link #unsubscribeByKey}.
         * @param topic Topic to subscribe to.
         * @param fn Function to be invoked once and then unsubscribed when a
         * message is published to the given topic.
         * @param opt_context Object in whose context the function is to be
         * called (the global scope if none).
         */
        subscribeOnce(
            topic: string, fn: (...a: any[]) => any,
            opt_context?: GlobalObject|null): number;
        /**
         * Unsubscribes a function from a topic.  Only deletes the first match
         * found. Returns a Boolean indicating whether a subscription was
         * removed.
         * @param topic Topic to unsubscribe from.
         * @param fn Function to unsubscribe.
         * @param opt_context Object in whose context the function was to be
         * called (the global scope if none).
         */
        unsubscribe(
            topic: string, fn: (...a: any[]) => any,
            opt_context?: GlobalObject|null): boolean;
        /**
         * Removes a subscription based on the key returned by {@link
         * #subscribe}. No-op if no matching subscription is found.  Returns a
         * Boolean indicating whether a subscription was removed.
         * @param key Subscription key.
         */
        unsubscribeByKey(key: number): boolean;
    }
}
declare module 'goog:goog.pubsub.PubSub' {
    import alias = ಠ_ಠ.clutz.goog.pubsub.PubSub;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.pubsub {
    /**
     * A templated class that is used to register {@code goog.pubsub.PubSub}
     * subscribers.
     *
     * Typical usage for a publisher:
     * <code>
     * /** @type {!goog.pubsub.TopicId<!zorg.State>}
     * zorg.TopicId.STATE_CHANGE = new goog.pubsub.TopicId(
     * goog.events.getUniqueId('state-change'));
     *
     * // Compiler enforces that these types are correct.
     * pubSub.publish(zorg.TopicId.STATE_CHANGE, zorg.State.STARTED);
     * </code>
     *
     * Typical usage for a subscriber:
     * <code>
     * // Compiler enforces the callback parameter type.
     * pubSub.subscribe(zorg.TopicId.STATE_CHANGE, function(state) {
     * if (state == zorg.State.STARTED) {
     * // Handle STARTED state.
     * }
     * });
     * </code>
     */
    class TopicId<PAYLOAD = any> extends TopicId_Instance<PAYLOAD> {}
    class TopicId_Instance<PAYLOAD = any> {
        private noStructuralTyping_: any;
        /**
         * A templated class that is used to register {@code goog.pubsub.PubSub}
         * subscribers.
         *
         * Typical usage for a publisher:
         * <code>
         * /** @type {!goog.pubsub.TopicId<!zorg.State>}
         * zorg.TopicId.STATE_CHANGE = new goog.pubsub.TopicId(
         * goog.events.getUniqueId('state-change'));
         *
         * // Compiler enforces that these types are correct.
         * pubSub.publish(zorg.TopicId.STATE_CHANGE, zorg.State.STARTED);
         * </code>
         *
         * Typical usage for a subscriber:
         * <code>
         * // Compiler enforces the callback parameter type.
         * pubSub.subscribe(zorg.TopicId.STATE_CHANGE, function(state) {
         * if (state == zorg.State.STARTED) {
         * // Handle STARTED state.
         * }
         * });
         * </code>
         */
        constructor(topicId: string);
        toString(): any;
    }
}
declare module 'goog:goog.pubsub.TopicId' {
    import alias = ಠ_ಠ.clutz.goog.pubsub.TopicId;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.pubsub {
    /**
     * This object is a temporary shim that provides goog.pubsub.TopicId support
     * for goog.pubsub.PubSub.  See b/12477087 for more info.
     */
    class TypedPubSub extends TypedPubSub_Instance {}
    class TypedPubSub_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance {
        /**
         * This object is a temporary shim that provides goog.pubsub.TopicId
         * support for goog.pubsub.PubSub.  See b/12477087 for more info.
         * @param opt_async Enable asynchronous behavior.  Recommended for new
         * code.  See notes on {@code goog.pubsub.PubSub.publish}.
         */
        constructor(opt_async?: boolean);
        pubSub_: ಠ_ಠ.clutz.goog.pubsub.PubSub;
        /**
         * See {@code goog.pubsub.PubSub.clear}.
         * @param opt_topic Topic to clear (all topics if unspecified).
         */
        clear<PAYLOAD = any>(opt_topic?:
                                 ಠ_ಠ.clutz.goog.pubsub.TopicId<PAYLOAD>): void;
        /**
         * See {@code goog.pubsub.PubSub.getCount}.
         * @param opt_topic The topic (all topics if unspecified).
         */
        getCount<PAYLOAD = any>(
            opt_topic?: ಠ_ಠ.clutz.goog.pubsub.TopicId<PAYLOAD>): number;
        /**
         * See {@code goog.pubsub.PubSub.publish}.
         * @param topic Topic to publish to.
         * @param payload Payload passed to each subscription function.
         */
        publish<PAYLOAD = any>(
            topic: ಠ_ಠ.clutz.goog.pubsub.TopicId<PAYLOAD>,
            payload: PAYLOAD): boolean;
        /**
         * See {@code goog.pubsub.PubSub.subscribe}.
         * @param topic Topic to subscribe to.
         * @param fn Function to be invoked when a message is published to the
         * given topic.
         * @param opt_context Object in whose context the function is to be
         * called (the global scope if none).
         */
        subscribe<PAYLOAD = any, CONTEXT = any>(
            topic: ಠ_ಠ.clutz.goog.pubsub.TopicId<PAYLOAD>,
            fn: (a: PAYLOAD) => any, opt_context?: CONTEXT): number;
        /**
         * See {@code goog.pubsub.PubSub.subscribeOnce}.
         * @param topic Topic to subscribe to.
         * @param fn Function to be invoked once and then unsubscribed when a
         * message is published to the given topic.
         * @param opt_context Object in whose context the function is to be
         * called (the global scope if none).
         */
        subscribeOnce<PAYLOAD = any, CONTEXT = any>(
            topic: ಠ_ಠ.clutz.goog.pubsub.TopicId<PAYLOAD>,
            fn: (a: PAYLOAD) => any, opt_context?: CONTEXT): number;
        /**
         * See {@code goog.pubsub.PubSub.unsubscribe}.
         * @param topic Topic to unsubscribe from.
         * @param fn Function to unsubscribe.
         * @param opt_context Object in whose context the function was to be
         * called (the global scope if none).
         */
        unsubscribe<PAYLOAD = any, CONTEXT = any>(
            topic: ಠ_ಠ.clutz.goog.pubsub.TopicId<PAYLOAD>,
            fn: (a: PAYLOAD) => any, opt_context?: CONTEXT): boolean;
        /**
         * See {@code goog.pubsub.PubSub.unsubscribeByKey}.
         * @param key Subscription key.
         */
        unsubscribeByKey(key: number): boolean;
    }
}
declare module 'goog:goog.pubsub.TypedPubSub' {
    import alias = ಠ_ಠ.clutz.goog.pubsub.TypedPubSub;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.reflect {
    /**
     * Retrieves a value from a cache given a key. The compiler provides special
     * consideration for this call such that it is generally considered
     * side-effect free. However, if the {@code opt_keyFn} or {@code valueFn}
     * have side-effects then the entire call is considered to have
     * side-effects.
     *
     * Conventionally storing the value on the cache would be considered a
     * side-effect and preclude unused calls from being pruned, ie. even if
     * the value was never used, it would still always be stored in the cache.
     *
     * Providing a side-effect free {@code valueFn} and {@code opt_keyFn}
     * allows unused calls to {@code goog.reflect.cache} to be pruned.
     * @param cacheObj The object that contains the cached values.
     * @param key The key to lookup in the cache. If it is not string or number
     * then a {@code opt_keyFn} should be provided. The key is also used as the
     * parameter to the {@code valueFn}.
     * @param valueFn The value provider to use to calculate the value to store
     * in the cache. This function should be side-effect free to take advantage
     * of the optimization.
     * @param opt_keyFn The key provider to determine the cache map key. This
     * should be used if the given key is not a string or number. If not
     * provided then the given key is used. This function should be side-effect
     * free to take advantage of the optimization.
     */
    function cache<K = any, V = any>(
        cacheObj: {[/* warning: coerced from K */ key: string]: V}, key: any,
        valueFn: (a?: any) => V, opt_keyFn?: (a?: any) => K): V;
    /**
     * Check if a property can be accessed without throwing an exception.
     * @param obj The owner of the property.
     * @param prop The property name.
     */
    function canAccessProperty(obj: GlobalObject|null, prop: string): boolean;
    /**
     * Syntax for object literal casts.
     * @param type Type to cast to.
     * @param object Object literal to cast.
     */
    function object(type: (...a: any[]) => any, object: GlobalObject | null):
        GlobalObject|null;
    /**
     * Syntax for renaming property strings.
     * @param prop Name of the property
     * @param object Instance of the object whose type will be used for renaming
     */
    function objectProperty(prop: string, object: GlobalObject): string;
    /**
     * To assert to the compiler that an operation is needed when it would
     * otherwise be stripped. For example:
     * <code>
     * // Force a layout
     * goog.reflect.sinkValue(dialog.offsetHeight);
     * </code>
     */
    function sinkValue<T = any>(x: T): T;
}
declare module 'goog:goog.reflect' {
    import alias = ಠ_ಠ.clutz.goog.reflect;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.result {
    /**
     * A DependentResult represents a Result whose eventual value depends on the
     * value of one or more other Results. For example, the Result returned by
     */
    class DependentResultImpl_ extends DependentResultImpl__Instance {}
    class DependentResultImpl__Instance extends
        ಠ_ಠ.clutz.goog.result.SimpleResult implements
            ಠ_ಠ.clutz.goog.result.DependentResult {
        /**
         * Adds a Result to the list of Results that affect this one.
         * @param parentResult A result whose value affects the value of this
         * Result.
         */
        addParentResult(parentResult: ಠ_ಠ.clutz.goog.result.Result): void;
        getParentResults(): ಠ_ಠ.clutz.goog.result.Result[];
    }
    /**
     * Given a DependentResult, cancels the Results it depends on (that is, the
     * results returned by getParentResults). This function does not recurse,
     * so e.g. parents of parents are not canceled; only the immediate parents
     * of the given Result are canceled.
     *
     * Example using @see goog.result.combine:
     * <pre>
     * var result1 = xhr.get('testdata/xhr_test_text.data');
     *
     * // Get a second independent Result.
     * var result2 = xhr.getJson('testdata/xhr_test_json.data');
     *
     * // Create a Result that resolves when both prior results resolve.
     * var combinedResult = goog.result.combineOnSuccess(result1, result2);
     *
     * combinedResult.wait(function() {
     * if (combinedResult.isCanceled()) {
     * goog.result.cancelParentResults(combinedResult);
     * }
     * });
     *
     * // Now, canceling combinedResult will cancel both result1 and result2.
     * combinedResult.cancel();
     * </pre>
     * @param dependentResult A Result that is dependent on the values of other
     * Results (for example the Result of a goog.result.combine,
     * goog.result.chain, or goog.result.transform call).
     */
    function cancelParentResults(
        dependentResult: ಠ_ಠ.clutz.goog.result.DependentResult): boolean;
    /**
     * Returns a canceled result.
     * The result will be resolved to an error of type CancelError.
     *
     * Example:
     * <pre>
     *
     * var result = goog.result.canceledResult();
     * assertEquals(goog.result.Result.State.ERROR, result.getState());
     * var error = result.getError();
     * assertTrue(error instanceof goog.result.Result.CancelError);
     *
     * </pre>
     */
    function canceledResult(): ಠ_ಠ.clutz.goog.result.Result;
    /**
     * The chain function aids in chaining of asynchronous Results. This
     * provides a convenience for use cases where asynchronous operations must
     * happen serially i.e. subsequent asynchronous operations are dependent on
     * data returned by prior asynchronous operations.
     *
     * It accepts a result and an action callback as arguments and returns a
     * result. The action callback is called when the first result succeeds and
     * is supposed to return a second result. The returned result is resolved
     * when one of both of the results resolve (depending on their success or
     * failure.) The state and value of the returned result in the various cases
     * is documented below: <pre>
     *
     * First Result State:    Second Result State:    Returned Result State:
     * SUCCESS                SUCCESS                 SUCCESS
     * SUCCESS                ERROR                   ERROR
     * ERROR                  Not created             ERROR
     * </pre>
     *
     * The value of the returned result, in the case both results succeed, is
     * the value of the second result (the result returned by the action
     * callback.)
     *
     * Example:
     * <pre>
     *
     * var testDataResult = xhr.get('testdata/xhr_test_text.data');
     *
     * // Chain this result to perform another asynchronous operation when this
     * // Result is resolved.
     * var chainedResult = goog.result.chain(testDataResult,
     * function(testDataResult) {
     *
     * // The result value of testDataResult is the URL for JSON data.
     * var jsonDataUrl = testDataResult.getValue();
     *
     * // Create a new Result object when the original result is resolved.
     * var jsonResult = xhr.getJson(jsonDataUrl);
     *
     * // Return the newly created Result.
     * return jsonResult;
     * });
     *
     * // The chained result resolves to success when both results resolve to
     * // success.
     * goog.result.waitOnSuccess(chainedResult, function(resultValue, result) {
     *
     * // At this point, both results have succeeded and we can use the JSON
     * // data returned by the second asynchronous call.
     * var jsonData = resultValue;
     * assertEquals('ok', jsonData['stat']);
     * });
     *
     * // Attach the error handler to be called when either Result fails.
     * goog.result.waitOnError(chainedResult, function(result) {
     * alert('chained result failed!');
     * });
     * </pre>
     * @param result The result to chain.
     * @param actionCallback The callback called when the result is resolved.
     * This callback must return a Result.
     * @param opt_scope Optional scope for the action callback.
     */
    function chain<T = any>(
        result: ಠ_ಠ.clutz.goog.result.Result,
        actionCallback: (a: ಠ_ಠ.clutz.goog.result.Result) =>
            ಠ_ಠ.clutz.goog.result.Result,
        opt_scope?: T): ಠ_ಠ.clutz.goog.result.DependentResult;
    /**
     * Returns a result that waits on all given results to resolve. Once all
     * have resolved, the returned result will succeed (and never error).
     *
     * Example:
     * <pre>
     *
     * var result1 = xhr.get('testdata/xhr_test_text.data');
     *
     * // Get a second independent Result.
     * var result2 = xhr.getJson('testdata/xhr_test_json.data');
     *
     * // Create a Result that resolves when both prior results resolve.
     * var combinedResult = goog.result.combine(result1, result2);
     *
     * // Process data after resolution of both results.
     * goog.result.waitOnSuccess(combinedResult, function(results) {
     * goog.array.forEach(results, function(result) {
     * alert(result.getState());
     * });
     * });
     * </pre>
     * @param var_args The results to wait on.
     */
    function combine(...var_args: (ಠ_ಠ.clutz.goog.result.Result|undefined)[]):
        ಠ_ಠ.clutz.goog.result.DependentResult;
    /**
     * Returns a result that waits on all given results to resolve. Once all
     * have resolved, the returned result will succeed if and only if all given
     * results succeeded. Otherwise it will error.
     *
     * Example:
     * <pre>
     *
     * var result1 = xhr.get('testdata/xhr_test_text.data');
     *
     * // Get a second independent Result.
     * var result2 = xhr.getJson('testdata/xhr_test_json.data');
     *
     * // Create a Result that resolves when both prior results resolve.
     * var combinedResult = goog.result.combineOnSuccess(result1, result2);
     *
     * // Process data after successful resolution of both results.
     * goog.result.waitOnSuccess(combinedResult, function(results) {
     * var textData = results[0].getValue();
     * var jsonData = results[1].getValue();
     * assertEquals('Just some data.', textData);
     * assertEquals('ok', jsonData['stat']);
     * });
     *
     * // Handle errors when either or both results failed.
     * goog.result.waitOnError(combinedResult, function(combined) {
     * var results = combined.getError();
     *
     * if (results[0].getState() == goog.result.Result.State.ERROR) {
     * alert('result1 failed');
     * }
     *
     * if (results[1].getState() == goog.result.Result.State.ERROR) {
     * alert('result2 failed');
     * }
     * });
     * </pre>
     * @param var_args The results to wait on.
     */
    function combineOnSuccess(
        ...var_args: (ಠ_ಠ.clutz.goog.result.Result|undefined)[]):
        ಠ_ಠ.clutz.goog.result.DependentResult;
    /**
     * Returns a failed result with the optional error slug set.
     *
     * Example:
     * <pre>
     *
     * var error = new Error('something-failed');
     * var result = goog.result.failedResult(error);
     * assertEquals(goog.result.Result.State.ERROR, result.getState());
     * assertEquals(error, result.getError());
     *
     * </pre>
     * @param opt_error The error to which the result should resolve.
     */
    function failedResult(opt_error?: any): ಠ_ಠ.clutz.goog.result.Result;
    /**
     * Returns a successful result containing the provided value.
     *
     * Example:
     * <pre>
     *
     * var value = 'some-value';
     * var result = goog.result.immediateResult(value);
     * assertEquals(goog.result.Result.State.SUCCESS, result.getState());
     * assertEquals(value, result.getValue());
     *
     * </pre>
     * @param value The value of the result.
     */
    function successfulResult(value: any): ಠ_ಠ.clutz.goog.result.Result;
    /**
     * Given a result and a transform function, returns a new result whose
     * value, on success, will be the value of the given result after having
     * been passed through the transform function.
     *
     * If the given result is an error, the returned result is also an error and
     * the transform will not be called.
     *
     * Example:
     * <pre>
     *
     * var result = xhr.getJson('testdata/xhr_test_json.data');
     *
     * // Transform contents of returned data using 'processJson' and create a
     * // transformed result to use returned JSON.
     * var transformedResult = goog.result.transform(result, processJson);
     *
     * // Attach success and failure handlers to the transformed result.
     * goog.result.waitOnSuccess(transformedResult, function(resultValue,
     * result) { var jsonData = resultValue; assertEquals('ok',
     * jsonData['stat']);
     * });
     *
     * goog.result.waitOnError(transformedResult, function(error) {
     * // Failed getJson call
     * });
     * </pre>
     * @param result The result whose value will be transformed.
     * @param transformer The transformer function. The return value of this
     * function will become the value of the returned result.
     */
    function transform(
        result: ಠ_ಠ.clutz.goog.result.Result,
        transformer: (a?: any) => any): ಠ_ಠ.clutz.goog.result.DependentResult;
    /**
     * Calls the handler on resolution of the result (success or failure).
     * The handler is passed the result object as the only parameter. The call
     * will be immediate if the result is no longer pending.
     *
     * Example:
     * <pre>
     *
     * var result = xhr.get('testdata/xhr_test_text.data');
     *
     * // Wait for the result to be resolved and alert it's state.
     * goog.result.wait(result, function(result) {
     * alert('State: ' + result.getState());
     * });
     * </pre>
     * @param result The result to install the handlers.
     * @param handler The handler to be called. The handler is passed the result
     * object as the only parameter.
     * @param opt_scope Optional scope for the handler.
     */
    function wait<T = any>(
        result: ಠ_ಠ.clutz.goog.result.Result,
        handler: (a: ಠ_ಠ.clutz.goog.result.Result) => any, opt_scope?: T): void;
    /**
     * Calls the handler if the result action errors. The result object is
     * passed as the only parameter to the handler. The call will be immediate
     * if the result object has already resolved to an error.
     *
     * Example:
     *
     * <pre>
     *
     * var result = xhr.get('testdata/xhr_test_text.data');
     *
     * // Attach a failure handler.
     * goog.result.waitOnError(result, function(error) {
     * // Failed asynchronous call!
     * });
     * </pre>
     * @param result The result to install the handlers.
     * @param handler The handler to be called. The handler is passed the error
     * and the result object as parameters.
     * @param opt_scope Optional scope for the handler.
     */
    function waitOnError<T = any>(
        result: ಠ_ಠ.clutz.goog.result.Result,
        handler: (a: any, b: ಠ_ಠ.clutz.goog.result.Result) => any,
        opt_scope?: T): void;
    /**
     * Calls the handler if the result succeeds. The result object is the only
     * parameter passed to the handler. The call will be immediate if the result
     * has already succeeded.
     *
     * Example:
     * <pre>
     *
     * var result = xhr.get('testdata/xhr_test_text.data');
     *
     * // attach a success handler.
     * goog.result.waitOnSuccess(result, function(resultValue, result) {
     * var datavalue = result.getvalue();
     * alert('value: ' + datavalue + ' == ' + resultValue);
     * });
     * </pre>
     * @param result The result to install the handlers.
     * @param handler The handler to be called. The handler is passed the result
     * value and the result as parameters.
     * @param opt_scope Optional scope for the handler.
     */
    function waitOnSuccess<T = any>(
        result: ಠ_ಠ.clutz.goog.result.Result,
        handler: (a: any, b: ಠ_ಠ.clutz.goog.result.Result) => any,
        opt_scope?: T): void;
}
declare module 'goog:goog.result' {
    import alias = ಠ_ಠ.clutz.goog.result;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.result {
    /**
     * An adaptor from Result to a Deferred, for use with existing Deferred
     * chains.
     */
    class DeferredAdaptor extends DeferredAdaptor_Instance {}
    class DeferredAdaptor_Instance extends ಠ_ಠ.clutz.goog.async.Deferred<any> {
        /**
         * An adaptor from Result to a Deferred, for use with existing Deferred
         * chains.
         * @param result A result.
         */
        constructor(result: ಠ_ಠ.clutz.goog.result.Result);
    }
}
declare module 'goog:goog.result.DeferredAdaptor' {
    import alias = ಠ_ಠ.clutz.goog.result.DeferredAdaptor;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.result {
    /**
     * A DependentResult represents a Result whose eventual value depends on the
     * value of one or more other Results. For example, the Result returned by
     */
    interface DependentResult extends ಠ_ಠ.clutz.goog.result.Result {
        getParentResults(): ಠ_ಠ.clutz.goog.result.Result[];
    }
}
declare module 'goog:goog.result.DependentResult' {
    import alias = ಠ_ಠ.clutz.goog.result.DependentResult;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.result {
    /**
     * A Result object represents a value returned by an asynchronous
     * operation at some point in the future (e.g. a network fetch). This is
     * akin to a 'Promise' or a 'Future' in other languages and frameworks.
     */
    interface Result extends ಠ_ಠ.clutz.goog.Thenable<any> {
        /**
         * Cancels the current Result, invoking the canceler function, if set.
         */
        cancel(): boolean;
        getError(): any;
        getState(): ಠ_ಠ.clutz.goog.result.Result.State;
        getValue(): any;
        isCanceled(): boolean;
        /**
         * Attaches handlers to be called when the value of this Result is
         * available. Handlers are called in the order they were added by wait.
         * @param handler The function called when the value is available. The
         * function is passed the Result object as the only argument.
         * @param opt_scope Optional scope for the handler.
         */
        wait<T = any>(
            handler: (a: ಠ_ಠ.clutz.goog.result.Result) => any,
            opt_scope?: T): void;
    }
}
declare namespace ಠ_ಠ.clutz.goog.result.Result {
    class CancelError extends CancelError_Instance {}
    class CancelError_Instance extends GlobalError {
        /**
         * The value to be passed to the error handlers invoked upon
         * cancellation.
         */
        constructor();
    }
    type State = string&{clutzEnumBrand: never};
    var State: {
        ERROR: State,
        PENDING: State,
        SUCCESS: State,
    };
}
declare module 'goog:goog.result.Result' {
    import alias = ಠ_ಠ.clutz.goog.result.Result;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.result {
    /**
     * A SimpleResult object is a basic implementation of the
     * goog.result.Result interface. This could be subclassed(e.g. XHRResult)
     * or instantiated and returned by another class as a form of result. The
     * caller receiving the result could then attach handlers to be called when
     * the result is resolved(success or error).
     */
    class SimpleResult extends SimpleResult_Instance {
        /**
         * Creates a SimpleResult that fires when the given promise resolves.
         * Use only during migration to Promises.
         */
        static fromPromise(promise: ಠ_ಠ.clutz.goog.Promise<any, any>):
            ಠ_ಠ.clutz.goog.result.Result;
    }
    class SimpleResult_Instance implements ಠ_ಠ.clutz.goog.result.Result {
        private noStructuralTyping_: any;
        /**
         * Cancels the Result.
         */
        cancel(): boolean;
        getError(): any;
        getState(): ಠ_ಠ.clutz.goog.result.Result.State;
        getValue(): any;
        isCanceled(): boolean;
        /**
         * Sets the Result to be an error Result.
         * @param opt_error Optional error slug to set for this Result.
         */
        setError(opt_error?: any): void;
        /**
         * Sets the value of this Result, changing the state.
         * @param value The value to set for this Result.
         */
        setValue(value: any): void;
        then<TResult1 = any, TResult2 = any>(
            onfulfilled?: ((value: any) => TResult1 | PromiseLike<TResult1>)|
            undefined|null,
            onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>)|
            undefined|null): PromiseLike<TResult1|TResult2>;
        then<THIS, TResult1 = any, TResult2 = any>(
            onfulfilled:
                ((this: THIS, value: any) => TResult1 | PromiseLike<TResult1>)|
            undefined|null,
            onrejected:
                ((this: THIS, reason: any) => TResult2 | PromiseLike<TResult2>)|
            undefined|null,
            context: THIS): PromiseLike<TResult1|TResult2>;
        /**
         * Attaches handlers to be called when the value of this Result is
         * available.
         * @param handler The function called when the value is available. The
         * function is passed the Result object as the only argument.
         * @param opt_scope Optional scope for the handler.
         */
        wait<T = any>(
            handler: (a: ಠ_ಠ.clutz.goog.result.SimpleResult) => any,
            opt_scope?: T): void;
    }
}
declare module 'goog:goog.result.SimpleResult' {
    import alias = ಠ_ಠ.clutz.goog.result.SimpleResult;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.result.SimpleResult {
    /**
     * Error thrown if there is an attempt to set the value or error for this
     * result more than once.
     */
    class StateError extends StateError_Instance {}
    class StateError_Instance extends ಠ_ಠ.clutz.goog.debug.Error_Instance {
        /**
         * Error thrown if there is an attempt to set the value or error for
         * this result more than once.
         */
        constructor();
    }
}
declare module 'goog:goog.result.SimpleResult.StateError' {
    import alias = ಠ_ಠ.clutz.goog.result.SimpleResult.StateError;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.soy {
    var REQUIRE_STRICT_AUTOESCAPE: boolean;
    /**
     * Type definition for strict Soy HTML templates. Very useful when passing
     * a template as an argument.
     */
    type StrictHtmlTemplate =
        (a: any, b?: null, c?: {[key: string]: any}|null) =>
            ಠ_ಠ.clutz.goog.soy.data.SanitizedHtml;
    type SoyTemplate<A, R=any> = (a:A, b?: null, c?: {[key: string]: any}|null) => R;
    /**
     * Type definition for strict Soy templates. Very useful when passing a
     * template as an argument.
     */
    type StrictTemplate = (a: any, b?: null, c?: {[key: string]: any}|null) =>
        ಠ_ಠ.clutz.goog.soy.data.SanitizedContent;
    /**
     * Converts a processed Soy template into a single node. If the rendered
     * HTML string represents a single node, then that node is returned.
     * Otherwise, a DIV element is returned containing the rendered nodes.
     * @param templateResult The processed template of kind HTML or TEXT (which
     * will be escaped).
     * @param opt_domHelper The DOM helper used to create DOM nodes; defaults to
     * {@code goog.dom.getDomHelper}.
     */
    function convertToElement(
        templateResult: ಠ_ಠ.clutz.goog.soy.data.SanitizedContent,
        opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null): GlobalElement;
    /**
     * Renders a Soy template into a single node. If the rendered
     * HTML string represents a single node, then that node is returned.
     * Otherwise, a DIV element is returned containing the rendered nodes.
     * @param template The Soy template defining the element's content.
     * @param opt_templateData The data for the template.
     * @param opt_injectedData The injected data for the template.
     * @param opt_domHelper The DOM helper used to create DOM nodes; defaults to
     * {@code goog.dom.getDomHelper}.
     */
    function renderAsElement<ARG_TYPES = any>(
        template: SoyTemplate<ARG_TYPES>, opt_templateData?: ARG_TYPES,
        opt_injectedData?: GlobalObject | null,
        opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper | null): GlobalElement;
    /**
     * Renders a Soy template into a single node or a document
     * fragment. If the rendered HTML string represents a single node, then that
     * node is returned (note that this is *not* a fragment, despite them name
     * of the method). Otherwise a document fragment is returned containing the
     * rendered nodes.
     * @param template The Soy template defining the element's content.
     * @param opt_templateData The data for the template.
     * @param opt_injectedData The injected data for the template.
     * @param opt_domHelper The DOM helper used to create DOM nodes; defaults to
     * {@code goog.dom.getDomHelper}.
     */
    function renderAsFragment<ARG_TYPES = any>(
        template: SoyTemplate<ARG_TYPES>, opt_templateData?: ARG_TYPES,
        opt_injectedData?: GlobalObject | null,
        opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper | null): Node;
    /**
     * Renders a Soy template and then set the output string as
     * the innerHTML of an element. It is recommended to use this helper
     * function instead of directly setting innerHTML in your hand-written code,
     * so that it will be easier to audit the code for cross-site scripting
     * vulnerabilities.
     * @param element The element whose content we are rendering into.
     * @param template The Soy template defining the element's content.
     * @param opt_templateData The data for the template.
     * @param opt_injectedData The injected data for the template.
     */
    function renderElement<ARG_TYPES = any>(
        element: GlobalElement | null, template: SoyTemplate<ARG_TYPES>,
        opt_templateData?: ARG_TYPES,
        opt_injectedData?: GlobalObject | null): void;
    /**
     * Sets the processed template as the innerHTML of an element. It is
     * recommended to use this helper function instead of directly setting
     * innerHTML in your hand-written code, so that it will be easier to audit
     * the code for cross-site scripting vulnerabilities.
     * @param element The element whose content we are rendering into.
     * @param templateResult The processed template of kind HTML or TEXT (which
     * will be escaped).
     */
    function renderHtml<ARG_TYPES = any>(
        element: GlobalElement | null,
        templateResult: ಠ_ಠ.clutz.goog.soy.data.SanitizedContent): void;
}
declare module 'goog:goog.soy' {
    import alias = ಠ_ಠ.clutz.goog.soy;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.soy {
    /**
     * An interface for a supplier that provides Soy injected data.
     */
    interface InjectedDataSupplier {
        /**
         * Gets the injected data. Implementation may assume that
         * {@code goog.soy.Renderer} will treat the returned data as
         * immutable.  The renderer will call this every time one of its
         * {@code render*} methods is called.
         */
        getData(): GlobalObject|null;
    }
}
declare module 'goog:goog.soy.InjectedDataSupplier' {
    import alias = ಠ_ಠ.clutz.goog.soy.InjectedDataSupplier;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.soy {
    /**
     * Creates a new soy renderer. Note that the renderer will only be
     * guaranteed to work correctly within the document scope provided in
     * the DOM helper.
     */
    class Renderer extends Renderer_Instance {}
    class Renderer_Instance {
        private noStructuralTyping_: any;
        /**
         * Creates a new soy renderer. Note that the renderer will only be
         * guaranteed to work correctly within the document scope provided in
         * the DOM helper.
         * @param opt_injectedDataSupplier A supplier that provides an injected
         * data.
         * @param opt_domHelper Optional DOM helper; defaults to that provided
         * by {@code goog.dom.getDomHelper()}.
         */
        constructor(
            opt_injectedDataSupplier?: ಠ_ಠ.clutz.goog.soy.InjectedDataSupplier|
            null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        getDom(): ಠ_ಠ.clutz.goog.dom.DomHelper;
        /**
         * Observes rendering of templates by this renderer.
         * @param opt_node Relevant node, if available. The node may or may not
         * be in the document, depending on whether Soy is creating an element
         * or writing into an existing one.
         */
        handleRender(a?: Node|null): any;
        /**
         * Renders a Soy template and returns the output string.
         * If the template is strict, it must be of kind HTML. To render strict
         * templates of other kinds, use {@code renderText} (for {@code
         * kind="text"}) or
         * {@code renderStrictOfKind}.
         * @param template The Soy template to render.
         * @param opt_templateData The data for the template.
         */
        render<ARG_TYPES = any>(
            template: SoyTemplate<ARG_TYPES>, opt_templateData?: ARG_TYPES): string;
        /**
         * Renders a Soy template into a single node. If the rendered HTML
         * string represents a single node, then that node is returned.
         * Otherwise, a DIV element is returned containing the rendered nodes.
         * Delegates to {@code goog.soy.renderAsElement}.
         * @param template The Soy template defining the element's content.
         * @param opt_templateData The data for the template.
         */
        renderAsElement<ARG_TYPES = any>(
            template: SoyTemplate<ARG_TYPES>,
            opt_templateData?: ARG_TYPES): GlobalElement;
        /**
         * Renders a Soy template into a single node or a document fragment.
         * Delegates to {@code goog.soy.renderAsFragment}.
         * @param template The Soy template defining the element's content.
         * @param opt_templateData The data for the template.
         */
        renderAsFragment<ARG_TYPES = any>(
            template: SoyTemplate<ARG_TYPES>, opt_templateData?: ARG_TYPES): Node;
        /**
         * Renders a Soy template and then set the output string as the
         * innerHTML of the given element. Delegates to {@code
         * goog.soy.renderElement}.
         * @param element The element whose content we are rendering.
         * @param template The Soy template defining the element's content.
         * @param opt_templateData The data for the template.
         */
        renderElement<ARG_TYPES = any>(
            element: GlobalElement|null, template: SoyTemplate<ARG_TYPES>,
            opt_templateData?: ARG_TYPES): void;
        /**
         * Renders a strict Soy template of kind="html" and returns the result
         * as a goog.html.SafeHtml object.
         *
         * Rendering a template that is not a strict template of kind="html"
         * results in a runtime error.
         * @param template The Soy template to render.
         * @param opt_templateData The data for the template.
         */
        renderSafeHtml<ARG_TYPES = any>(
            template: SoyTemplate<ARG_TYPES>,
            opt_templateData?: ARG_TYPES): ಠ_ಠ.clutz.goog.html.SafeHtml;
        /**
         * Renders a strict Soy template of kind="css" and returns the result as
         * a goog.html.SafeStyleSheet object.
         *
         * Rendering a template that is not a strict template of kind="css"
         * results in a runtime and compile-time error.
         * @param template The Soy template to render.
         * @param opt_templateData The data for the template.
         */
        renderSafeStyleSheet<ARG_TYPES = any>(
            template: SoyTemplate<ARG_TYPES>,
            opt_templateData?: ARG_TYPES): ಠ_ಠ.clutz.goog.html.SafeStyleSheet;
        /**
         * Renders a strict Soy HTML template and returns the output
         * SanitizedHtml object.
         * @param template The Soy template to render.
         * @param opt_templateData The data for the template.
         */
        renderStrict<ARG_TYPES = any>(
            template: SoyTemplate<ARG_TYPES>, opt_templateData?: ARG_TYPES):
            ಠ_ಠ.clutz.goog.soy.data.SanitizedHtml;
        /**
         * Renders a strict Soy template and returns the output SanitizedContent
         * object.
         * @param template The Soy template to render.
         * @param opt_templateData The data for the template.
         * @param opt_kind The output kind to assert. If null, the template must
         * be of kind="html" (i.e., opt_kind defaults to
         * goog.soy.data.SanitizedContentKind.HTML).
         */
        renderStrictOfKind<ARG_TYPES = any, RETURN_TYPE = any>(
            template: SoyTemplate<ARG_TYPES, RETURN_TYPE>, opt_templateData?: ARG_TYPES,
            opt_kind?: ಠ_ಠ.clutz.goog.soy.data.SanitizedContentKind):
            RETURN_TYPE;
        /**
         * Renders a strict Soy template and returns the output SanitizedUri
         * object.
         * @param template The Soy template to render.
         * @param opt_templateData The data for the template.
         */
        renderStrictUri<ARG_TYPES = any>(
            template: SoyTemplate<ARG_TYPES>,
            opt_templateData?: ARG_TYPES): ಠ_ಠ.clutz.goog.soy.data.SanitizedUri;
        /**
         * Renders a strict Soy template of kind="text" and returns the output
         * string. It is an error to use renderText on non-strict templates, or
         * strict templates of kinds other than "text".
         * @param template The Soy template to render.
         * @param opt_templateData The data for the template.
         */
        renderText<ARG_TYPES = any>(
            template: SoyTemplate<ARG_TYPES>, opt_templateData?: ARG_TYPES): string;
    }
}
declare module 'goog:goog.soy.Renderer' {
    import alias = ಠ_ಠ.clutz.goog.soy.Renderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.soy.data {
    /**
     * A string-like object that carries a content-type and a content direction.
     *
     * IMPORTANT! Do not create these directly, nor instantiate the subclasses.
     * Instead, use a trusted, centrally reviewed library as endorsed by your
     * team to generate these objects. Otherwise, you risk accidentally creating
     * SanitizedContent that is attacker-controlled and gets evaluated unescaped
     * in templates.
     */
    class SanitizedContent extends SanitizedContent_Instance {}
    class SanitizedContent_Instance {
        private noStructuralTyping_: any;
        /**
         * The already-safe content.
         */
        content: string;
        /**
         * The content's direction; null if unknown and thus to be estimated
         * when necessary.
         */
        contentDir: ಠ_ಠ.clutz.goog.i18n.bidi.Dir|null;
        /**
         * The context in which this content is safe from XSS attacks.
         */
        contentKind: ಠ_ಠ.clutz.goog.soy.data.SanitizedContentKind;
        /**
         * Gets the already-safe content.
         */
        getContent(): string;
        /**
         * Converts sanitized content of kind TEXT or HTML into SafeHtml. HTML
         * content is converted without modification, while text content is
         * HTML-escaped.
         */
        toSafeHtml(): ಠ_ಠ.clutz.goog.html.SafeHtml;
        /**
         * Converts sanitized content of kind URI into SafeUrl without
         * modification.
         */
        toSafeUrl(): ಠ_ಠ.clutz.goog.html.SafeUrl;
        toString(): any;
    }
}
declare module 'goog:goog.soy.data.SanitizedContent' {
    import alias = ಠ_ಠ.clutz.goog.soy.data.SanitizedContent;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.soy.data {
    /**
     * A type of textual content.
     *
     * This is an enum of type Object so that these values are unforgeable.
     */
    type SanitizedContentKind = GlobalObject&{clutzEnumBrand: never};
    var SanitizedContentKind: {
        ATTRIBUTES: SanitizedContentKind,
        CSS: SanitizedContentKind,
        HTML: SanitizedContentKind,
        JS: SanitizedContentKind,
        STYLE: SanitizedContentKind,
        TEXT: SanitizedContentKind,
        TRUSTED_RESOURCE_URI: SanitizedContentKind,
        URI: SanitizedContentKind,
    };
}
declare module 'goog:goog.soy.data.SanitizedContentKind' {
    import alias = ಠ_ಠ.clutz.goog.soy.data.SanitizedContentKind;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.soy.data {
    /**
     * Content of type {@link goog.soy.data.SanitizedContentKind.CSS}.
     *
     * The content is non-attacker-exploitable CSS, such as {@code @import
     * url(x)}. The content direction is LTR.
     */
    class SanitizedCss extends SanitizedCss_Instance {
        /**
         * Checks if the value could be used as the Soy type {css}.
         */
        static isCompatibleWith(value: any): boolean;
    }
    class SanitizedCss_Instance extends
        ಠ_ಠ.clutz.goog.soy.data.SanitizedContent_Instance {
        /**
         * Converts SanitizedCss into SafeStyleSheet.
         * Note: SanitizedCss in Soy represents both SafeStyle and
         * SafeStyleSheet in Closure. It's about to be split so that
         * SanitizedCss represents only SafeStyleSheet.
         */
        toSafeStyleSheet(): ಠ_ಠ.clutz.goog.html.SafeStyleSheet;
    }
}
declare module 'goog:goog.soy.data.SanitizedCss' {
    import alias = ಠ_ಠ.clutz.goog.soy.data.SanitizedCss;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.soy.data {
    /**
     * Content of type {@link goog.soy.data.SanitizedContentKind.HTML}.
     *
     * The content is a string of HTML that can safely be embedded in a PCDATA
     * context in your app.  If you would be surprised to find that an HTML
     * sanitizer produced {@code s} (e.g.  it runs code or fetches bad URLs) and
     * you wouldn't write a template that produces {@code s} on security or
     * privacy grounds, then don't pass {@code s} here. The default content
     * direction is unknown, i.e. to be estimated when necessary.
     */
    class SanitizedHtml extends SanitizedHtml_Instance {
        /**
         * Checks if the value could be used as the Soy type {html}.
         */
        static isCompatibleWith(value: any): boolean;
    }
    class SanitizedHtml_Instance extends
        ಠ_ಠ.clutz.goog.soy.data.SanitizedContent_Instance {}
}
declare module 'goog:goog.soy.data.SanitizedHtml' {
    import alias = ಠ_ಠ.clutz.goog.soy.data.SanitizedHtml;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.soy.data {
    /**
     * Content of type {@link goog.soy.data.SanitizedContentKind.ATTRIBUTES}.
     *
     * The content should be safely embeddable within an open tag, such as a
     * key="value" pair. The content direction is LTR.
     */
    class SanitizedHtmlAttribute extends SanitizedHtmlAttribute_Instance {
        /**
         * Checks if the value could be used as the Soy type {attribute}.
         */
        static isCompatibleWith(value: any): boolean;
    }
    class SanitizedHtmlAttribute_Instance extends
        ಠ_ಠ.clutz.goog.soy.data.SanitizedContent_Instance {}
}
declare module 'goog:goog.soy.data.SanitizedHtmlAttribute' {
    import alias = ಠ_ಠ.clutz.goog.soy.data.SanitizedHtmlAttribute;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.soy.data {
    /**
     * Content of type {@link goog.soy.data.SanitizedContentKind.JS}.
     *
     * The content is JavaScript source that when evaluated does not execute any
     * attacker-controlled scripts. The content direction is LTR.
     */
    class SanitizedJs extends SanitizedJs_Instance {
        /**
         * Checks if the value could be used as the Soy type {js}.
         */
        static isCompatibleWith(value: any): boolean;
    }
    class SanitizedJs_Instance extends
        ಠ_ಠ.clutz.goog.soy.data.SanitizedContent_Instance {}
}
declare module 'goog:goog.soy.data.SanitizedJs' {
    import alias = ಠ_ಠ.clutz.goog.soy.data.SanitizedJs;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.soy.data {
    /**
     * Content of type {@link goog.soy.data.SanitizedContentKind.STYLE}.
     *
     * The content is non-attacker-exploitable CSS, such as {@code
     * color:#c3d9ff}. The content direction is LTR.
     */
    class SanitizedStyle extends SanitizedStyle_Instance {
        /**
         * Checks if the value could be used as the Soy type {css}.
         */
        static isCompatibleWith(value: any): boolean;
    }
    class SanitizedStyle_Instance extends
        ಠ_ಠ.clutz.goog.soy.data.SanitizedContent_Instance {}
}
declare module 'goog:goog.soy.data.SanitizedStyle' {
    import alias = ಠ_ಠ.clutz.goog.soy.data.SanitizedStyle;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.soy.data {
    /**
     * Content of type
     * {@link goog.soy.data.SanitizedContentKind.TRUSTED_RESOURCE_URI}.
     *
     * The content is a TrustedResourceUri chunk that is not under attacker
     * control. The content direction is LTR.
     */
    class SanitizedTrustedResourceUri extends
        SanitizedTrustedResourceUri_Instance {
        /**
         * Checks if the value could be used as the Soy type
         * {trusted_resource_uri}.
         */
        static isCompatibleWith(value: any): boolean;
    }
    class SanitizedTrustedResourceUri_Instance extends
        ಠ_ಠ.clutz.goog.soy.data.SanitizedContent_Instance {
        /**
         * Converts sanitized content into TrustedResourceUrl without
         * modification.
         */
        toTrustedResourceUrl(): ಠ_ಠ.clutz.goog.html.TrustedResourceUrl;
    }
}
declare module 'goog:goog.soy.data.SanitizedTrustedResourceUri' {
    import alias = ಠ_ಠ.clutz.goog.soy.data.SanitizedTrustedResourceUri;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.soy.data {
    /**
     * Content of type {@link goog.soy.data.SanitizedContentKind.URI}.
     *
     * The content is a URI chunk that the caller knows is safe to emit in a
     * template. The content direction is LTR.
     */
    class SanitizedUri extends SanitizedUri_Instance {
        /**
         * Checks if the value could be used as the Soy type {uri}.
         */
        static isCompatibleWith(value: any): boolean;
    }
    class SanitizedUri_Instance extends
        ಠ_ಠ.clutz.goog.soy.data.SanitizedContent_Instance {}
}
declare module 'goog:goog.soy.data.SanitizedUri' {
    import alias = ಠ_ಠ.clutz.goog.soy.data.SanitizedUri;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.soy.data {
    /**
     * Unsanitized plain text string.
     *
     * While all strings are effectively safe to use as a plain text, there are
     * no guarantees about safety in any other context such as HTML. This is
     * sometimes used to mark that should never be used unescaped.
     */
    class UnsanitizedText extends UnsanitizedText_Instance {}
    class UnsanitizedText_Instance extends
        ಠ_ಠ.clutz.goog.soy.data.SanitizedContent_Instance {
        /**
         * Unsanitized plain text string.
         *
         * While all strings are effectively safe to use as a plain text, there
         * are no guarantees about safety in any other context such as HTML.
         * This is sometimes used to mark that should never be used unescaped.
         * @param content Plain text with no guarantees.
         * @param opt_contentDir The content direction; null if unknown and thus
         * to be estimated when necessary. Default: null.
         */
        constructor(
            content: any, opt_contentDir?: ಠ_ಠ.clutz.goog.i18n.bidi.Dir|null);
        content: string;
        contentDir: ಠ_ಠ.clutz.goog.i18n.bidi.Dir|null;
    }
}
declare module 'goog:goog.soy.data.UnsanitizedText' {
    import alias = ಠ_ಠ.clutz.goog.soy.data.UnsanitizedText;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.spell {
    /**
     * Support class for spell checker components. Provides basic functionality
     * such as word lookup and caching.
     */
    class SpellCheck extends SpellCheck_Instance {
        /**
         * Regular expression for splitting a string into individual words and
         * blocks of separators. Matches zero or one word followed by zero or
         * more separators.
         */
        static SPLIT_REGEX: RegExp|null;
        /**
         * Regular expression for identifying word boundaries.
         */
        static WORD_BOUNDARY_CHARS: string;
        /**
         * Regular expression for identifying word boundaries.
         */
        static WORD_BOUNDARY_REGEX: RegExp|null;
    }
    class SpellCheck_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * Support class for spell checker components. Provides basic
         * functionality such as word lookup and caching.
         * @param opt_lookupFunction Function to use for word lookup. Must
         * accept an array of words, an object reference and a callback function
         * as parameters. It must also call the callback function (as a method
         * on the object), once ready, with an array containing the original
         * words, their spelling status and optionally an array of suggestions.
         * @param opt_language Content language.
         */
        constructor(
            opt_lookupFunction?:
                (a: string[], b: ಠ_ಠ.clutz.goog.spell.SpellCheck,
                 c: (...a: any[]) => any) => any,
            opt_language?: string);
        /**
         * Checks spelling for a block of text.
         * @param text Block of text to spell check.
         */
        checkBlock(text: string): void;
        /**
         * Checks spelling for a single word. Returns the status of the supplied
         * word, or UNKNOWN if it's not cached. If it's not cached the word is
         * added to a queue and checked with the verification implementation
         * with a short delay.
         * @param word Word to check spelling of.
         */
        checkWord(word: string): ಠ_ಠ.clutz.goog.spell.SpellCheck.WordStatus;
        /**
         * Returns language.
         */
        getLanguage(): string;
        /**
         * Returns suggestions for the given word.
         * @param word Word to get suggestions for.
         */
        getSuggestions(word: string): string[]|null;
        /**
         * Processes pending words unless a lookup operation has already been
         * queued or is in progress.
         */
        processPending(): void;
        /**
         * Sets language.
         * @param opt_language Content language.
         */
        setLanguage(opt_language?: string): void;
        /**
         * Sets the lookup function.
         * @param f Function to use for word lookup. Must accept an array of
         * words, an object reference and a callback function as parameters. It
         * must also call the callback function (as a method on the object),
         * once ready, with an array containing the original words, their
         * spelling status and optionally an array of suggestions.
         */
        setLookupFunction(f: (...a: any[]) => any): void;
        /**
         * Sets a words spelling status.
         * @param word Word to set status for.
         * @param status Status of word.
         * @param opt_suggestions Suggestions. Example:
         * obj.setWordStatus('word', VALID); obj.setWordStatus('wrod', INVALID,
         * ['word', 'wood', 'rod']);.
         */
        setWordStatus(
            word: string, status: ಠ_ಠ.clutz.goog.spell.SpellCheck.WordStatus,
            opt_suggestions?: string[]|null): void;
    }
}
declare namespace ಠ_ಠ.clutz.goog.spell.SpellCheck {
    enum CacheIndex {
        STATUS,
        SUGGESTIONS,
    }
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        ERROR: EventType,
        READY: EventType,
        WORD_CHANGED: EventType,
    };
    enum WordStatus {
        CORRECTED,
        IGNORED,
        INVALID,
        UNKNOWN,
        VALID,
    }
}
declare module 'goog:goog.spell.SpellCheck' {
    import alias = ಠ_ಠ.clutz.goog.spell.SpellCheck;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.spell.SpellCheck {
    /**
     * Object representing a word changed event. Fired when the status of a word
     * changes.
     */
    class WordChangedEvent extends WordChangedEvent_Instance {}
    class WordChangedEvent_Instance extends
        ಠ_ಠ.clutz.goog.events.Event_Instance {
        /**
         * Object representing a word changed event. Fired when the status of a
         * word changes.
         * @param target Spellcheck object initiating event.
         * @param word Word to set status for.
         * @param status Status of word.
         */
        constructor(
            target: ಠ_ಠ.clutz.goog.spell.SpellCheck|null, word: string,
            status: ಠ_ಠ.clutz.goog.spell.SpellCheck.WordStatus);
        /**
         * New status
         */
        status: ಠ_ಠ.clutz.goog.spell.SpellCheck.WordStatus;
        /**
         * Word the status has changed for.
         */
        word: string;
    }
}
declare module 'goog:goog.spell.SpellCheck.WordChangedEvent' {
    import alias = ಠ_ಠ.clutz.goog.spell.SpellCheck.WordChangedEvent;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.stats {
    /**
     * Tracks basic statistics over a specified time interval.
     *
     * Statistics are kept in a fixed number of slots, each representing
     * an equal portion of the time interval.
     *
     * Most methods optionally allow passing in the current time, so that
     * higher level stats can synchronize operations on multiple child
     * objects.  Under normal usage, the default of goog.now() should be
     * sufficient.
     */
    class BasicStat extends BasicStat_Instance {}
    class BasicStat_Instance {
        private noStructuralTyping_: any;
        /**
         * Tracks basic statistics over a specified time interval.
         *
         * Statistics are kept in a fixed number of slots, each representing
         * an equal portion of the time interval.
         *
         * Most methods optionally allow passing in the current time, so that
         * higher level stats can synchronize operations on multiple child
         * objects.  Under normal usage, the default of goog.now() should be
         * sufficient.
         * @param interval The stat interval, in milliseconds.
         */
        constructor(interval: number);
        /**
         * Returns the count of the statistic over its configured time
         * interval.
         * @param opt_now The time, in milliseconds, to be treated as the
         * "current" time.  The current time must always be greater than or
         * equal to the last time recorded by this stat tracker.
         */
        get(opt_now?: number): number;
        getInterval(): number;
        /**
         * Returns the magnitute of the largest atomic increment that occurred
         * during the watched time interval.
         * @param opt_now The time, in milliseconds, to be treated as the
         * "current" time.  The current time must always be greater than or
         * equal to the last time recorded by this stat tracker.
         */
        getMax(opt_now?: number): number;
        /**
         * Returns the magnitute of the smallest atomic increment that
         * occurred during the watched time interval.
         * @param opt_now The time, in milliseconds, to be treated as the
         * "current" time.  The current time must always be greater than or
         * equal to the last time recorded by this stat tracker.
         */
        getMin(opt_now?: number): number;
        /**
         * Increments the count of this statistic by the specified amount.
         * @param amt The amount to increase the count by.
         * @param opt_now The time, in milliseconds, to be treated as the
         * "current" time.  The current time must always be greater than or
         * equal to the last time recorded by this stat tracker.
         */
        incBy(amt: number, opt_now?: number): void;
    }
}
declare namespace ಠ_ಠ.clutz.goog.stats.BasicStat {
    class Slot_ extends Slot__Instance {}
    class Slot__Instance {
        private noStructuralTyping_: any;
        /**
         * End time of this slot, exclusive.
         */
        end: number;
        /**
         * Aggregated count within this slot.
         */
        count: number;
        /**
         * The largest atomic increment of the count within this slot.
         */
        max: number;
        /**
         * The smallest atomic increment of the count within this slot.
         */
        min: number;
    }
}
declare module 'goog:goog.stats.BasicStat' {
    import alias = ಠ_ಠ.clutz.goog.stats.BasicStat;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.storage {
    /**
     * Provides a storage with expiring keys and a collection method.
     */
    class CollectableStorage extends CollectableStorage_Instance {}
    class CollectableStorage_Instance extends
        ಠ_ಠ.clutz.goog.storage.ExpiringStorage_Instance {
        /**
         * Provides a storage with expiring keys and a collection method.
         * @param mechanism The underlying storage mechanism.
         */
        constructor(mechanism:
                        ಠ_ಠ.clutz.goog.storage.mechanism.IterableMechanism);
        /**
         * Cleans up the storage by removing expired keys.
         * @param opt_strict Also remove invalid keys.
         */
        collect(opt_strict?: boolean): void;
        /**
         * Cleans up the storage by removing expired keys.
         * @param keys List of all keys.
         * @param opt_strict Also remove invalid keys.
         */
        collectInternal(
            keys: null|{length: number}|{__iterator__: any},
            opt_strict?: boolean): string[];
    }
}
declare module 'goog:goog.storage.CollectableStorage' {
    import alias = ಠ_ಠ.clutz.goog.storage.CollectableStorage;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.storage {
    /**
     * Provides an encrypted storage. The keys are hashed with a secret, so
     * their existence cannot be verified without the knowledge of the secret.
     * The values are encrypted using the key, a salt, and the secret, so
     * stream cipher initialization varies for each stored value.
     */
    class EncryptedStorage extends EncryptedStorage_Instance {
        /**
         * Metadata key under which the salt is stored.
         */
        static SALT_KEY: string;
    }
    class EncryptedStorage_Instance extends
        ಠ_ಠ.clutz.goog.storage.CollectableStorage_Instance {
        /**
         * Provides an encrypted storage. The keys are hashed with a secret, so
         * their existence cannot be verified without the knowledge of the
         * secret. The values are encrypted using the key, a salt, and the
         * secret, so stream cipher initialization varies for each stored value.
         * @param mechanism The underlying storage mechanism.
         * @param secret The secret key used to encrypt the storage.
         */
        constructor(
            mechanism: ಠ_ಠ.clutz.goog.storage.mechanism.IterableMechanism,
            secret: string);
        getWrapper(key: string, opt_expired?: boolean): GlobalObject|undefined;
        remove(key: string): void;
        set(key: string, value: any, opt_expiration?: number): void;
    }
}
declare module 'goog:goog.storage.EncryptedStorage' {
    import alias = ಠ_ಠ.clutz.goog.storage.EncryptedStorage;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.storage {
    /**
     * Errors thrown by the storage.
     */
    type ErrorCode = string&{clutzEnumBrand: never};
    var ErrorCode: {
        DECRYPTION_ERROR: ErrorCode,
        INVALID_VALUE: ErrorCode,
    };
}
declare module 'goog:goog.storage.ErrorCode' {
    import alias = ಠ_ಠ.clutz.goog.storage.ErrorCode;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.storage {
    /**
     * Provides a storage with expiring keys.
     */
    class ExpiringStorage extends ExpiringStorage_Instance {
        /**
         * Metadata key under which the creation time is stored.
         */
        static CREATION_TIME_KEY: string;
        /**
         * Metadata key under which the expiration time is stored.
         */
        static EXPIRATION_TIME_KEY: string;
        /**
         * Returns the wrapper creation time.
         * @param wrapper The wrapper.
         */
        static getCreationTime(wrapper: GlobalObject): number|undefined;
        /**
         * Returns the wrapper expiration time.
         * @param wrapper The wrapper.
         */
        static getExpirationTime(wrapper: GlobalObject): number|undefined;
        /**
         * Checks if the data item has expired.
         * @param wrapper The wrapper.
         */
        static isExpired(wrapper: GlobalObject): boolean;
    }
    class ExpiringStorage_Instance extends
        ಠ_ಠ.clutz.goog.storage.RichStorage_Instance {
        /**
         * Provides a storage with expiring keys.
         * @param mechanism The underlying storage mechanism.
         */
        constructor(mechanism: ಠ_ಠ.clutz.goog.storage.mechanism.Mechanism);
        /**
         * Get an item wrapper (the item and its metadata) from the storage.
         * @param key The key to get.
         * @param opt_expired If true, return expired wrappers as well.
         */
        getWrapper(key: string, opt_expired?: boolean): GlobalObject|undefined;
        /**
         * Set an item in the storage.
         * @param key The key to set.
         * @param value The value to serialize to a string and save.
         * @param opt_expiration The number of miliseconds since epoch (as in
         * goog.now()) when the value is to expire. If the expiration time is
         * not provided, the value will persist as long as possible.
         */
        set(key: string, value: any, opt_expiration?: number): void;
    }
}
declare module 'goog:goog.storage.ExpiringStorage' {
    import alias = ಠ_ಠ.clutz.goog.storage.ExpiringStorage;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.storage {
    /**
     * Provides a storage for data with attached metadata.
     */
    class RichStorage extends RichStorage_Instance {
        /**
         * Metadata key under which the actual data is stored.
         */
        static DATA_KEY: string;
    }
    class RichStorage_Instance extends ಠ_ಠ.clutz.goog.storage.Storage_Instance {
        /**
         * Provides a storage for data with attached metadata.
         * @param mechanism The underlying storage mechanism.
         */
        constructor(mechanism: ಠ_ಠ.clutz.goog.storage.mechanism.Mechanism);
        get(key: string): any;
        /**
         * Get an item wrapper (the item and its metadata) from the storage.
         *
         * WARNING: This returns an Object, which once used to be
         * goog.storage.RichStorage.Wrapper. This is due to the fact
         * that deserialized objects lose type information and it
         * is hard to do proper typecasting in JavaScript. Be sure
         * you know what you are doing when using the returned value.
         * @param key The key to get.
         */
        getWrapper(key: string): GlobalObject|undefined;
        set(key: string, value: any): void;
    }
}
declare module 'goog:goog.storage.RichStorage' {
    import alias = ಠ_ಠ.clutz.goog.storage.RichStorage;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.storage.RichStorage {
    /**
     * Wraps a value so metadata can be associated with it. You probably want
     * to use goog.storage.RichStorage.Wrapper.wrapIfNecessary to avoid multiple
     * embeddings.
     */
    class Wrapper extends Wrapper_Instance {
        /**
         * Unwraps a value, any metadata is discarded (not returned). You might
         * want to use goog.storage.RichStorage.Wrapper.unwrapIfPossible to
         * handle cases where the wrapper is missing.
         * @param wrapper The wrapper.
         */
        static unwrap(wrapper: GlobalObject): any;
        /**
         * Convenience method for unwrapping a value. Returns undefined if the
         * wrapper is missing.
         * @param wrapper The wrapper.
         */
        static unwrapIfPossible(wrapper: GlobalObject|undefined): any;
        /**
         * Convenience method for wrapping a value so metadata can be associated
         * with it. No-op if the value is already wrapped or is undefined.
         * @param value The value to wrap.
         */
        static wrapIfNecessary(value: any):
            ಠ_ಠ.clutz.goog.storage.RichStorage.Wrapper|undefined;
    }
    class Wrapper_Instance {
        private noStructuralTyping_: any;
        /**
         * Wraps a value so metadata can be associated with it. You probably
         * want to use goog.storage.RichStorage.Wrapper.wrapIfNecessary to avoid
         * multiple embeddings.
         * @param value The value to wrap.
         */
        constructor(value: any);
    }
}
declare module 'goog:goog.storage.RichStorage.Wrapper' {
    import alias = ಠ_ಠ.clutz.goog.storage.RichStorage.Wrapper;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.storage {
    /**
     * The base implementation for all storage APIs.
     */
    class Storage extends Storage_Instance {}
    class Storage_Instance {
        private noStructuralTyping_: any;
        /**
         * The base implementation for all storage APIs.
         * @param mechanism The underlying storage mechanism.
         */
        constructor(mechanism: ಠ_ಠ.clutz.goog.storage.mechanism.Mechanism);
        /**
         * The mechanism used to persist key-value pairs.
         */
        mechanism: ಠ_ಠ.clutz.goog.storage.mechanism.Mechanism|null;
        /**
         * Gets an item from the data storage.
         * @param key The key to get.
         */
        get(key: string): any;
        /**
         * Removes an item from the data storage.
         * @param key The key to remove.
         */
        remove(key: string): void;
        /**
         * Sets an item in the data storage.
         * @param key The key to set.
         * @param value The value to serialize to a string and save.
         */
        set(key: string, value: any): void;
    }
}
declare module 'goog:goog.storage.Storage' {
    import alias = ಠ_ಠ.clutz.goog.storage.Storage;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.storage.mechanism {
    /**
     * Errors thrown by storage mechanisms.
     */
    type ErrorCode = string&{clutzEnumBrand: never};
    var ErrorCode: {
        INVALID_VALUE: ErrorCode,
        QUOTA_EXCEEDED: ErrorCode,
        STORAGE_DISABLED: ErrorCode,
    };
}
declare module 'goog:goog.storage.mechanism.ErrorCode' {
    import alias = ಠ_ಠ.clutz.goog.storage.mechanism.ErrorCode;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.storage.mechanism {
    /**
     * Wraps a storage mechanism with a custom error handler.
     */
    class ErrorHandlingMechanism extends ErrorHandlingMechanism_Instance {}
    class ErrorHandlingMechanism_Instance extends
        ಠ_ಠ.clutz.goog.storage.mechanism.Mechanism_Instance {
        /**
         * Wraps a storage mechanism with a custom error handler.
         * @param mechanism Underlying storage mechanism.
         * @param errorHandler An error handler.
         */
        constructor(
            mechanism: ಠ_ಠ.clutz.goog.storage.mechanism.Mechanism,
            errorHandler: ಠ_ಠ.clutz.goog.storage.mechanism
                .ErrorHandlingMechanism.ErrorHandler);
        get(key: string): string|null;
        remove(key: string): any;
        set(key: string, value: string): any;
    }
}
declare namespace ಠ_ಠ.clutz.goog.storage.mechanism.ErrorHandlingMechanism {
    type ErrorHandler =
        (a: GlobalError|string,
         b: ಠ_ಠ.clutz.goog.storage.mechanism.ErrorHandlingMechanism.Operation,
         c: string, d?: any) => any;
    type Operation = string&{clutzEnumBrand: never};
    var Operation: {
        GET: Operation,
        REMOVE: Operation,
        SET: Operation,
    };
}
declare module 'goog:goog.storage.mechanism.ErrorHandlingMechanism' {
    import alias = ಠ_ಠ.clutz.goog.storage.mechanism.ErrorHandlingMechanism;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.storage.mechanism {
    /**
     * Provides a storage mechanism that uses HTML5 local storage.
     */
    class HTML5LocalStorage extends HTML5LocalStorage_Instance {}
    class HTML5LocalStorage_Instance extends
        ಠ_ಠ.clutz.goog.storage.mechanism.HTML5WebStorage_Instance {
        /**
         * Provides a storage mechanism that uses HTML5 local storage.
         */
        constructor();
    }
}
declare module 'goog:goog.storage.mechanism.HTML5LocalStorage' {
    import alias = ಠ_ಠ.clutz.goog.storage.mechanism.HTML5LocalStorage;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.storage.mechanism {
    /**
     * Provides a storage mechanism that uses HTML5 session storage.
     */
    class HTML5SessionStorage extends HTML5SessionStorage_Instance {}
    class HTML5SessionStorage_Instance extends
        ಠ_ಠ.clutz.goog.storage.mechanism.HTML5WebStorage_Instance {
        /**
         * Provides a storage mechanism that uses HTML5 session storage.
         */
        constructor();
    }
}
declare module 'goog:goog.storage.mechanism.HTML5SessionStorage' {
    import alias = ಠ_ಠ.clutz.goog.storage.mechanism.HTML5SessionStorage;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.storage.mechanism {
    /**
     * Provides a storage mechanism that uses HTML5 Web storage.
     */
    class HTML5WebStorage extends HTML5WebStorage_Instance {}
    class HTML5WebStorage_Instance extends
        ಠ_ಠ.clutz.goog.storage.mechanism.IterableMechanism_Instance {
        /**
         * Provides a storage mechanism that uses HTML5 Web storage.
         * @param storage The Web storage object.
         */
        constructor(storage: Storage|null);
        __iterator__(opt_keys?: boolean): ಠ_ಠ.clutz.goog.iter.Iterator<any>;
        clear(): void;
        get(key: string): string|null;
        getCount(): number;
        /**
         * Determines whether or not the mechanism is available.
         * It works only if the provided web storage object exists and is
         * enabled.
         */
        isAvailable(): boolean;
        /**
         * Gets the key for a given key index. If an index outside of
         * [0..this.getCount()) is specified, this function returns null.
         * @param index A key index.
         */
        key(index: number): string|null;
        remove(key: string): any;
        set(key: string, value: string): any;
    }
}
declare module 'goog:goog.storage.mechanism.HTML5WebStorage' {
    import alias = ಠ_ಠ.clutz.goog.storage.mechanism.HTML5WebStorage;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.storage.mechanism {
    /**
     * Provides a storage mechanism using IE userData.
     */
    class IEUserData extends IEUserData_Instance {
        /**
         * Encoding map for characters which are not encoded by
         * encodeURIComponent(). See encodeKey_ documentation for encoding
         * details.
         */
        static ENCODE_MAP: GlobalObject;
    }
    class IEUserData_Instance extends
        ಠ_ಠ.clutz.goog.storage.mechanism.IterableMechanism_Instance {
        /**
         * Provides a storage mechanism using IE userData.
         * @param storageKey The key (store name) to store the data under.
         * @param opt_storageNodeId The ID of the associated HTML element, one
         * will be created if not provided.
         */
        constructor(storageKey: string, opt_storageNodeId?: string);
        __iterator__(opt_keys?: boolean): ಠ_ಠ.clutz.goog.iter.Iterator<any>;
        clear(): void;
        get(key: string): string|null;
        getCount(): number;
        /**
         * Determines whether or not the mechanism is available.
         */
        isAvailable(): boolean;
        remove(key: string): any;
        set(key: string, value: string): any;
    }
}
declare module 'goog:goog.storage.mechanism.IEUserData' {
    import alias = ಠ_ಠ.clutz.goog.storage.mechanism.IEUserData;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.storage.mechanism {
    /**
     * Interface for all iterable storage mechanisms.
     */
    class IterableMechanism extends IterableMechanism_Instance {}
    class IterableMechanism_Instance extends
        ಠ_ಠ.clutz.goog.storage.mechanism.Mechanism_Instance {
        /**
         * Returns an iterator that iterates over the elements in the storage.
         * Will throw goog.iter.StopIteration after the last element.
         * @param opt_keys True to iterate over the keys. False to iterate over
         * the values.  The default value is false.
         */
        __iterator__(a?: boolean): ಠ_ಠ.clutz.goog.iter.Iterator<any>;
        /**
         * Remove all key-value pairs.
         *
         * Could be overridden in a subclass, as the default implementation is
         * not very efficient - it iterates over all keys.
         */
        clear(): void;
        /**
         * Get the number of stored key-value pairs.
         *
         * Could be overridden in a subclass, as the default implementation is
         * not very efficient - it iterates over all keys.
         */
        getCount(): number;
    }
}
declare module 'goog:goog.storage.mechanism.IterableMechanism' {
    import alias = ಠ_ಠ.clutz.goog.storage.mechanism.IterableMechanism;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.storage.mechanism {
    /**
     * Basic interface for all storage mechanisms.
     */
    class Mechanism extends Mechanism_Instance {}
    class Mechanism_Instance {
        private noStructuralTyping_: any;
        /**
         * Get the value stored under a key.
         * @param key The key to get.
         */
        get(a: string): string|null;
        /**
         * Remove a key and its value.
         * @param key The key to remove.
         */
        remove(a: string): any;
        /**
         * Set a value for a key.
         * @param key The key to set.
         * @param value The string to save.
         */
        set(a: string, b: string): any;
    }
}
declare module 'goog:goog.storage.mechanism.Mechanism' {
    import alias = ಠ_ಠ.clutz.goog.storage.mechanism.Mechanism;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.storage.mechanism {
    /**
     * Wraps an iterable storage mechanism and creates artificial namespaces.
     */
    class PrefixedMechanism extends PrefixedMechanism_Instance {}
    class PrefixedMechanism_Instance extends
        ಠ_ಠ.clutz.goog.storage.mechanism.IterableMechanism_Instance {
        /**
         * Wraps an iterable storage mechanism and creates artificial
         * namespaces.
         * @param mechanism Underlying iterable storage mechanism.
         * @param prefix Prefix for creating an artificial namespace.
         */
        constructor(
            mechanism: ಠ_ಠ.clutz.goog.storage.mechanism.IterableMechanism,
            prefix: string);
        __iterator__(opt_keys?: boolean): ಠ_ಠ.clutz.goog.iter.Iterator<any>;
        get(key: string): string|null;
        remove(key: string): any;
        set(key: string, value: string): any;
    }
}
declare module 'goog:goog.storage.mechanism.PrefixedMechanism' {
    import alias = ಠ_ಠ.clutz.goog.storage.mechanism.PrefixedMechanism;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.storage.mechanism.mechanismfactory {
    /**
     * The key to shared userData storage.
     */
    var USER_DATA_SHARED_KEY: string;
    /**
     * Returns the best local storage mechanism, or null if unavailable.
     * Local storage means that the database is placed on user's computer.
     * The key-value database is normally shared between all the code paths
     * that request it, so using an optional namespace is recommended. This
     * provides separation and makes key collisions unlikely.
     * @param opt_namespace Restricts the visibility to given namespace.
     */
    function create(opt_namespace?: string):
        ಠ_ಠ.clutz.goog.storage.mechanism.IterableMechanism|null;
    /**
     * Returns an HTML5 local storage mechanism, or null if unavailable.
     * Since the HTML5 local storage does not support namespaces natively,
     * and the key-value database is shared between all the code paths
     * that request it, it is recommended that an optional namespace is
     * used to provide key separation employing a prefix.
     * @param opt_namespace Restricts the visibility to given namespace.
     */
    function createHTML5LocalStorage(opt_namespace?: string):
        ಠ_ಠ.clutz.goog.storage.mechanism.IterableMechanism|null;
    /**
     * Returns an HTML5 session storage mechanism, or null if unavailable.
     * Since the HTML5 session storage does not support namespaces natively,
     * and the key-value database is shared between all the code paths
     * that request it, it is recommended that an optional namespace is
     * used to provide key separation employing a prefix.
     * @param opt_namespace Restricts the visibility to given namespace.
     */
    function createHTML5SessionStorage(opt_namespace?: string):
        ಠ_ಠ.clutz.goog.storage.mechanism.IterableMechanism|null;
    /**
     * Returns an IE userData local storage mechanism, or null if unavailable.
     * Using an optional namespace is recommended to provide separation and
     * avoid key collisions.
     * @param opt_namespace Restricts the visibility to given namespace.
     */
    function createIEUserData(opt_namespace?: string):
        ಠ_ಠ.clutz.goog.storage.mechanism.IterableMechanism|null;
}
declare module 'goog:goog.storage.mechanism.mechanismfactory' {
    import alias = ಠ_ಠ.clutz.goog.storage.mechanism.mechanismfactory;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.string {
    var DETECT_DOUBLE_ESCAPING: boolean;
    var FORCE_NON_DOM_HTML_UNESCAPING: boolean;
    /**
     * Concatenates string expressions. This is useful
     * since some browsers are very inefficient when it comes to using plus to
     * concat strings. Be careful when using null and undefined here since
     * these will not be included in the result. If you need to represent these
     * be sure to cast the argument to a String first.
     * For example:
     * <pre>buildString('a', 'b', 'c', 'd') -> 'abcd'
     * buildString(null, undefined) -> ''
     * </pre>
     * @param var_args A list of strings to concatenate. If not a string, it
     * will be casted to one.
     */
    function buildString(...var_args: any[]): string;
    /**
     * Replaces Windows and Mac new lines with unix style: \r or \r\n with \n.
     * @param str The string to in which to canonicalize newlines.
     */
    function canonicalizeNewlines(str: string): string;
    /**
     * Capitalizes a string, i.e. converts the first letter to uppercase
     * and all other letters to lowercase, e.g.:
     *
     * goog.string.capitalize('one')     => 'One'
     * goog.string.capitalize('ONE')     => 'One'
     * goog.string.capitalize('one two') => 'One two'
     *
     * Note that this function does not trim initial whitespace.
     * @param str String value to capitalize.
     */
    function capitalize(str: string): string;
    /**
     * A string comparator that ignores case.
     * -1 = str1 less than str2
     * 0 = str1 equals str2
     * 1 = str1 greater than str2
     * @param str1 The string to compare.
     * @param str2 The string to compare {@code str1} to.
     */
    function caseInsensitiveCompare(str1: string, str2: string): number;
    /**
     * Determines whether a string contains a substring, ignoring case.
     * @param str The string to search.
     * @param subString The substring to search for.
     */
    function caseInsensitiveContains(str: string, subString: string): boolean;
    /**
     * Case-insensitive suffix-checker.
     * @param str The string to check.
     * @param suffix A string to look for at the end of {@code str}.
     */
    function caseInsensitiveEndsWith(str: string, suffix: string): boolean;
    /**
     * Case-insensitive equality checker.
     * @param str1 First string to check.
     * @param str2 Second string to check.
     */
    function caseInsensitiveEquals(str1: string, str2: string): boolean;
    /**
     * Case-insensitive prefix-checker.
     * @param str The string to check.
     * @param prefix A string to look for at the end of {@code str}.
     */
    function caseInsensitiveStartsWith(str: string, prefix: string): boolean;
    /**
     * Removes the breaking spaces from the left and right of the string and
     * collapses the sequences of breaking spaces in the middle into single
     * spaces. The original and the result strings render the same way in HTML.
     * @param str A string in which to collapse spaces.
     */
    function collapseBreakingSpaces(str: string): string;
    /**
     * Converts multiple whitespace chars (spaces, non-breaking-spaces, new
     * lines and tabs) to a single space, and strips leading and trailing
     * whitespace.
     * @param str Input string.
     */
    function collapseWhitespace(str: string): string;
    /**
     * Compares two version numbers.
     * @param version1 Version of first item.
     * @param version2 Version of second item.
     */
    function compareVersions(
        version1: string|number, version2: string|number): number;
    /**
     * Determines whether a string contains a substring.
     * @param str The string to search.
     * @param subString The substring to search for.
     */
    function contains(str: string, subString: string): boolean;
    /**
     * Returns the non-overlapping occurrences of ss in s.
     * If either s or ss evalutes to false, then returns zero.
     * @param s The string to look in.
     * @param ss The string to look for.
     */
    function countOf(s: string, ss: string): number;
    /**
     * Generates and returns a string which is unique in the current document.
     * This is useful, for example, to create unique IDs for DOM elements.
     */
    function createUniqueString(): string;
    /**
     * Computes the Levenshtein edit distance between two strings.
     */
    function editDistance(a: string, b: string): number;
    /**
     * Fast suffix-checker.
     * @param str The string to check.
     * @param suffix A string to look for at the end of {@code str}.
     */
    function endsWith(str: string, suffix: string): boolean;
    /**
     * Takes a character and returns the escaped string for that character. For
     * example escapeChar(String.fromCharCode(15)) -> "\\x0E".
     * @param c The character to escape.
     */
    function escapeChar(c: string): string;
    /**
     * Takes a string and returns the escaped string for that input string.
     * @param str The string to escape.
     */
    function escapeString(str: string): string;
    /**
     * String comparison function that handles non-negative integer and
     * fractional numbers in a way humans might expect. Using this function, the
     * string 'File 2.jpg' sorts before 'File 10.jpg', and '3.14' before '3.2'.
     * Equivalent to {@link goog.string.intAwareCompare} apart from the way how
     * it interprets dots.
     * @param str1 The string to compare in a numerically sensitive way.
     * @param str2 The string to compare {@code str1} to.
     */
    function floatAwareCompare(str1: string, str2: string): number;
    /**
     * Returns a string with at least 64-bits of randomness.
     *
     * Doesn't trust Javascript's random function entirely. Uses a combination
     * of random and current timestamp, and then encodes the string in base-36
     * to make it shorter.
     */
    function getRandomString(): string;
    /**
     * String hash function similar to java.lang.String.hashCode().
     * The hash code for a string is computed as
     * s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],
     * where s[i] is the ith character of the string and n is the length of
     * the string. We mod the result to make it between 0 (inclusive) and 2^32
     * (exclusive).
     * @param str A string.
     */
    function hashCode(str: string): number;
    /**
     * Escapes double quote '"' and single quote '\'' characters in addition to
     * '&', '<', and '>' so that a string can be included in an HTML tag
     * attribute value within double or single quotes.
     *
     * It should be noted that > doesn't need to be escaped for the HTML or XML
     * to be valid, but it has been decided to escape it for consistency with
     * other implementations.
     *
     * With goog.string.DETECT_DOUBLE_ESCAPING, this function escapes also the
     * lowercase letter "e".
     *
     * NOTE(user):
     * HtmlEscape is often called during the generation of large blocks of HTML.
     * Using statics for the regular expressions and strings is an optimization
     * that can more than half the amount of time IE spends in this function for
     * large apps, since strings and regexes both contribute to GC allocations.
     *
     * Testing for the presence of a character before escaping increases the
     * number of function calls, but actually provides a speed increase for the
     * average case -- since the average case often doesn't require the escaping
     * of all 4 characters and indexOf() is much cheaper than replace(). The
     * worst case does suffer slightly from the additional calls, therefore the
     * opt_isLikelyToContainHtmlChars option has been included for situations
     * where all 4 HTML entities are very likely to be present and need
     * escaping.
     *
     * Some benchmarks (times tended to fluctuate +-0.05ms):
     * FireFox                     IE6
     * (no chars / average (mix of cases) / all 4 chars)
     * no checks                     0.13 / 0.22 / 0.22         0.23 / 0.53 /
     * 0.80 indexOf                       0.08 / 0.17 / 0.26         0.22 / 0.54
     * / 0.84 indexOf + re test             0.07 / 0.17 / 0.28         0.19 /
     * 0.50 / 0.85
     *
     * An additional advantage of checking if replace actually needs to be
     * called is a reduction in the number of object allocations, so as the size
     * of the application grows the difference between the various methods would
     * increase.
     * @param str string to be escaped.
     * @param opt_isLikelyToContainHtmlChars Don't perform a check to see if the
     * character needs replacing - use this option if you expect each of the
     * characters to appear often. Leave false if you expect few html characters
     * to occur in your strings, such as if you are escaping HTML.
     */
    function htmlEscape(
        str: string, opt_isLikelyToContainHtmlChars?: boolean): string;
    /**
     * String comparison function that handles non-negative integer numbers in a
     * way humans might expect. Using this function, the string 'File 2.jpg'
     * sorts before 'File 10.jpg', and 'Version 1.9' before 'Version 1.10'. The
     * comparison is mostly case-insensitive, though strings that are identical
     * except for case are sorted with the upper-case strings before lower-case.
     *
     * This comparison function is up to 50x slower than either the default or
     * the case-insensitive compare. It should not be used in time-critical
     * code, but should be fast enough to sort several hundred short strings
     * (like filenames) with a reasonable delay.
     * @param str1 The string to compare in a numerically sensitive way.
     * @param str2 The string to compare {@code str1} to.
     */
    function intAwareCompare(str1: string, str2: string): number;
    /**
     * Checks if a string contains all letters.
     * @param str string to check.
     */
    function isAlpha(str: string): boolean;
    /**
     * Checks if a string contains only numbers or letters.
     * @param str string to check.
     */
    function isAlphaNumeric(str: string): boolean;
    /**
     * Checks if a string is all breaking whitespace.
     * @param str The string to check.
     */
    function isBreakingWhitespace(str: string): boolean;
    /**
     * Checks if a string is empty or contains only whitespaces.
     * @param str The string to check.
     */
    function isEmpty(a: string): boolean;
    /**
     * Checks if a string is empty or contains only whitespaces.
     * @param str The string to check.
     */
    function isEmptyOrWhitespace(str: string): boolean;
    /**
     * Checks if a string is null, undefined, empty or contains only
     * whitespaces.
     * @param str The string to check.
     */
    function isEmptyOrWhitespaceSafe(str: any): boolean;
    /**
     * Checks if a string is null, undefined, empty or contains only
     * whitespaces.
     * @param str The string to check.
     */
    function isEmptySafe(a: any): boolean;
    /**
     * Checks if a string is empty.
     * @param str The string to check.
     */
    function isEmptyString(str: string): boolean;
    /**
     * Returns whether the given string is lower camel case (e.g. "isFooBar").
     *
     * Note that this assumes the string is entirely letters.
     * @param str String to test.
     */
    function isLowerCamelCase(str: string): boolean;
    /**
     * Checks if a string contains only numbers.
     * @param str string to check. If not a string, it will be casted to one.
     */
    function isNumeric(str: any): boolean;
    /**
     * Checks if a character is a space character.
     * @param ch Character to check.
     */
    function isSpace(ch: string): boolean;
    /**
     * Checks if a character is a valid unicode character.
     * @param ch Character to check.
     */
    function isUnicodeChar(ch: string): boolean;
    /**
     * Returns whether the given string is upper camel case (e.g. "FooBarBaz").
     *
     * Note that this assumes the string is entirely letters.
     * @param str String to test.
     */
    function isUpperCamelCase(str: string): boolean;
    /**
     * Finds the characters to the right of the last instance of any separator
     *
     * This function is similar to goog.string.path.baseName, except it can take
     * a list of characters to split the string on. It will return the rightmost
     * grouping of characters to the right of any separator as a left-to-right
     * oriented string.
     * @param str The string
     * @param separators A list of separator characters
     */
    function lastComponent(str: string, separators: string|string[]): string;
    /**
     * Returns a string representation of the given object, with
     * null and undefined being returned as the empty string.
     * @param obj The object to convert.
     */
    function makeSafe(obj: any): string;
    /**
     * Converts \n to <br>s or <br />s.
     * @param str The string in which to convert newlines.
     * @param opt_xml Whether to use XML compatible tags.
     */
    function newLineToBr(str: string, opt_xml?: boolean): string;
    /**
     * Normalizes spaces in a string, replacing all consecutive spaces and tabs
     * with a single space. Replaces non-breaking space with a space.
     * @param str The string in which to normalize spaces.
     */
    function normalizeSpaces(str: string): string;
    /**
     * Normalizes whitespace in a string, replacing all whitespace chars with
     * a space.
     * @param str The string in which to normalize whitespace.
     */
    function normalizeWhitespace(str: string): string;
    /**
     * Alias for {@link goog.string.floatAwareCompare}.
     */
    function numerateCompare(a: string, b: string): number;
    /**
     * Pads number to given length and optionally rounds it to a given
     * precision. For example: <pre>padNumber(1.25, 2, 3) -> '01.250'
     * padNumber(1.25, 2) -> '01.25'
     * padNumber(1.25, 2, 1) -> '01.3'
     * padNumber(1.25, 0) -> '1.25'</pre>
     * @param num The number to pad.
     * @param length The desired length.
     * @param opt_precision The desired precision.
     */
    function padNumber(
        num: number, length: number, opt_precision?: number): string;
    /**
     * Parse a string in decimal or hexidecimal ('0xFFFF') form.
     *
     * To parse a particular radix, please use parseInt(string, radix) directly.
     * See
     * https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/parseInt
     *
     * This is a wrapper for the built-in parseInt function that will only parse
     * numbers as base 10 or base 16.  Some JS implementations assume strings
     * starting with "0" are intended to be octal. ES3 allowed but discouraged
     * this behavior. ES5 forbids it.  This function emulates the ES5 behavior.
     *
     * For more information, see Mozilla JS Reference: http://goo.gl/8RiFj
     * @param value The value to be parsed.
     */
    function parseInt(value: string|number|null|undefined): number;
    /**
     * Preserve spaces that would be otherwise collapsed in HTML by replacing
     * them with non-breaking space Unicode characters.
     * @param str The string in which to preserve whitespace.
     */
    function preserveSpaces(str: string): string;
    /**
     * Encloses a string in double quotes and escapes characters so that the
     * string is a valid JS string. The resulting string is safe to embed in
     * `<script>` tags as "<" is escaped.
     * @param s The string to quote.
     */
    function quote(s: string): string;
    /**
     * Escapes characters in the string that are not safe to use in a RegExp.
     * @param s The string to escape. If not a string, it will be casted to one.
     */
    function regExpEscape(s: any): string;
    /**
     * Removes the first occurrence of a substring from a string.
     * @param str The base string from which to remove.
     * @param substr The string to remove.
     */
    function remove(str: string, substr: string): string;
    /**
     * Removes all occurrences of a substring from a string.
     * @param s The base string from which to remove.
     * @param ss The string to remove.
     */
    function removeAll(s: string, ss: string): string;
    /**
     * Removes a substring of a specified length at a specific
     * index in a string.
     * @param s The base string from which to remove.
     * @param index The index at which to remove the substring.
     * @param stringLength The length of the substring to remove.
     */
    function removeAt(s: string, index: number, stringLength: number): string;
    /**
     * Repeats a string n times.
     * @param string The string to repeat.
     * @param length The number of times to repeat.
     */
    function repeat(a: string, b: number): string;
    /**
     * Replaces all occurrences of a substring of a string with a new substring.
     * @param s The base string from which to remove.
     * @param ss The string to replace.
     * @param replacement The replacement string.
     */
    function replaceAll(s: string, ss: string, replacement: string): string;
    /**
     * Splits a string on a separator a limited number of times.
     *
     * This implementation is more similar to Python or Java, where the limit
     * parameter specifies the maximum number of splits rather than truncating
     * the number of results.
     *
     * See http://docs.python.org/2/library/stdtypes.html#str.split
     * See JavaDoc: http://goo.gl/F2AsY
     * See Mozilla reference: http://goo.gl/dZdZs
     * @param str String to split.
     * @param separator The separator.
     * @param limit The limit to the number of splits. The resulting array will
     * have a maximum length of limit+1.  Negative numbers are the same as zero.
     */
    function splitLimit(
        str: string, separator: string, limit: number): string[];
    /**
     * Fast prefix-checker.
     * @param str The string to check.
     * @param prefix A string to look for at the start of {@code str}.
     */
    function startsWith(str: string, prefix: string): boolean;
    /**
     * Takes a string and replaces newlines with a space. Multiple lines are
     * replaced with a single space.
     * @param str The string from which to strip newlines.
     */
    function stripNewlines(str: string): string;
    /**
     * Strip quote characters around a string.  The second argument is a string
     * of characters to treat as quotes.  This can be a single character or a
     * string of multiple character and in that case each of those are treated
     * as possible quote characters. For example:
     *
     * <pre>
     * goog.string.stripQuotes('"abc"', '"`') --> 'abc'
     * goog.string.stripQuotes('`abc`', '"`') --> 'abc'
     * </pre>
     * @param str The string to strip.
     * @param quoteChars The quote characters to strip.
     */
    function stripQuotes(str: string, quoteChars: string): string;
    /**
     * Does simple python-style string substitution.
     * subs("foo%s hot%s", "bar", "dog") becomes "foobar hotdog".
     * @param str The string containing the pattern.
     * @param var_args The items to substitute into the pattern.
     */
    function subs(str: string, ...var_args: any[]): string;
    /**
     * Converts a string from selector-case to camelCase (e.g. from
     * "multi-part-string" to "multiPartString"), useful for converting
     * CSS selectors and HTML dataset keys to their equivalent JS properties.
     * @param str The string in selector-case form.
     */
    function toCamelCase(str: string): string;
    /**
     * Converts the supplied string to a number, which may be Infinity or NaN.
     * This function strips whitespace: (toNumber(' 123') === 123)
     * This function accepts scientific notation: (toNumber('1e1') === 10)
     *
     * This is better than Javascript's built-in conversions because, sadly:
     * (Number(' ') === 0) and (parseFloat('123a') === 123)
     * @param str The string to convert.
     */
    function toNumber(str: string): number;
    /**
     * Converts a string from camelCase to selector-case (e.g. from
     * "multiPartString" to "multi-part-string"), useful for converting JS
     * style and dataset properties to equivalent CSS selectors and HTML keys.
     * @param str The string in camelCase form.
     */
    function toSelectorCase(str: string): string;
    /**
     * Converts a string into TitleCase. First character of the string is always
     * capitalized in addition to the first letter of every subsequent word.
     * Words are delimited by one or more whitespaces by default. Custom
     * delimiters can optionally be specified to replace the default, which
     * doesn't preserve whitespace delimiters and instead must be explicitly
     * included if needed.
     *
     * Default delimiter => " ":
     * goog.string.toTitleCase('oneTwoThree')    => 'OneTwoThree'
     * goog.string.toTitleCase('one two three')  => 'One Two Three'
     * goog.string.toTitleCase('  one   two   ') => '  One   Two   '
     * goog.string.toTitleCase('one_two_three')  => 'One_two_three'
     * goog.string.toTitleCase('one-two-three')  => 'One-two-three'
     *
     * Custom delimiter => "_-.":
     * goog.string.toTitleCase('oneTwoThree', '_-.')       => 'OneTwoThree'
     * goog.string.toTitleCase('one two three', '_-.')     => 'One two three'
     * goog.string.toTitleCase('  one   two   ', '_-.')    => '  one   two   '
     * goog.string.toTitleCase('one_two_three', '_-.')     => 'One_Two_Three'
     * goog.string.toTitleCase('one-two-three', '_-.')     => 'One-Two-Three'
     * goog.string.toTitleCase('one...two...three', '_-.') =>
     * 'One...Two...Three' goog.string.toTitleCase('one. two. three', '_-.')
     * => 'One. two. three' goog.string.toTitleCase('one-two.three', '_-.')
     * => 'One-Two.Three'
     * @param str String value in camelCase form.
     * @param opt_delimiters Custom delimiter character set used to distinguish
     * words in the string value. Each character represents a single delimiter.
     * When provided, default whitespace delimiter is overridden and must be
     * explicitly included if needed.
     */
    function toTitleCase(str: string, opt_delimiters?: string): string;
    /**
     * Trims white spaces to the left and right of a string.
     * @param str The string to trim.
     */
    function trim(a: string): string;
    /**
     * Trims whitespaces at the left end of a string.
     * @param str The string to left trim.
     */
    function trimLeft(str: string): string;
    /**
     * Trims whitespaces at the right end of a string.
     * @param str The string to right trim.
     */
    function trimRight(str: string): string;
    /**
     * Truncates a string to a certain length and adds '...' if necessary.  The
     * length also accounts for the ellipsis, so a maximum length of 10 and a
     * string 'Hello World!' produces 'Hello W...'.
     * @param str The string to truncate.
     * @param chars Max number of characters.
     * @param opt_protectEscapedCharacters Whether to protect escaped characters
     * from being cut off in the middle.
     */
    function truncate(
        str: string, chars: number,
        opt_protectEscapedCharacters?: boolean): string;
    /**
     * Truncate a string in the middle, adding "..." if necessary,
     * and favoring the beginning of the string.
     * @param str The string to truncate the middle of.
     * @param chars Max number of characters.
     * @param opt_protectEscapedCharacters Whether to protect escaped characters
     * from being cutoff in the middle.
     * @param opt_trailingChars Optional number of trailing characters to leave
     * at the end of the string, instead of truncating as close to the middle as
     * possible.
     */
    function truncateMiddle(
        str: string, chars: number, opt_protectEscapedCharacters?: boolean,
        opt_trailingChars?: number): string;
    /**
     * Unescapes an HTML string.
     * @param str The string to unescape.
     */
    function unescapeEntities(str: string): string;
    /**
     * Unescapes a HTML string using the provided document.
     * @param str The string to unescape.
     * @param document A document to use in escaping the string.
     */
    function unescapeEntitiesWithDocument(
        str: string, document: Document): string;
    /**
     * URL-decodes the string. We need to specially handle '+'s because
     * the javascript library doesn't convert them to spaces.
     * @param str The string to url decode.
     */
    function urlDecode(str: string): string;
    /**
     * URL-encodes a string
     * @param str The string to url-encode.
     */
    function urlEncode(str: any): string;
    /**
     * Do escaping of whitespace to preserve spatial formatting. We use
     * character entity #160 to make it safer for xml.
     * @param str The string in which to escape whitespace.
     * @param opt_xml Whether to use XML compatible tags.
     */
    function whitespaceEscape(str: string, opt_xml?: boolean): string;
}
declare module 'goog:goog.string' {
    import alias = ಠ_ಠ.clutz.goog.string;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.string {
    /**
     * Wrapper for compile-time-constant strings.
     *
     * Const is a wrapper for strings that can only be created from program
     * constants (i.e., string literals).  This property relies on a custom
     * Closure compiler check that {@code goog.string.Const.from} is only
     * invoked on compile-time-constant expressions.
     *
     * Const is useful in APIs whose correct and secure use requires that
     * certain arguments are not attacker controlled: Compile-time constants are
     * inherently under the control of the application and not under control of
     * external attackers, and hence are safe to use in such contexts.
     *
     * Instances of this type must be created via its factory method
     * {@code goog.string.Const.from} and not by invoking its constructor.  The
     * constructor intentionally takes no parameters and the type is immutable;
     * hence only a default instance corresponding to the empty string can be
     * obtained via constructor invocation.
     */
    class Const extends Const_Instance {
        /**
         * A Const instance wrapping the empty string.
         */
        static EMPTY: ಠ_ಠ.clutz.goog.string.Const;
        /**
         * Creates a Const object from a compile-time constant string.
         *
         * It is illegal to invoke this function on an expression whose
         * compile-time-contant value cannot be determined by the Closure
         * compiler.
         *
         * Correct invocations include,
         * <pre>
         * var s = goog.string.Const.from('hello');
         * var t = goog.string.Const.from('hello' + 'world');
         * </pre>
         *
         * In contrast, the following are illegal:
         * <pre>
         * var s = goog.string.Const.from(getHello());
         * var t = goog.string.Const.from('hello' + world);
         * </pre>
         * @param s A constant string from which to create a Const.
         */
        static from(s: string): ಠ_ಠ.clutz.goog.string.Const;
        /**
         * Performs a runtime check that the provided object is indeed an
         * instance of {@code goog.string.Const}, and returns its value.
         * @param stringConst The object to extract from.
         */
        static unwrap(stringConst: ಠ_ಠ.clutz.goog.string.Const): string;
    }
    class Const_Instance implements ಠ_ಠ.clutz.goog.string.TypedString {
        private noStructuralTyping_: any;
        /**
         * Returns this Const's value a string.
         *
         * IMPORTANT: In code where it is security-relevant that an object's
         * type is indeed {@code goog.string.Const}, use {@code
         * goog.string.Const.unwrap} instead of this method.
         */
        getTypedStringValue(): string;
        implementsGoogStringTypedString: boolean;
        /**
         * Returns a debug-string representation of this value.
         *
         * To obtain the actual string value wrapped inside an object of this
         * type, use {@code goog.string.Const.unwrap}.
         */
        toString(): any;
    }
}
declare module 'goog:goog.string.Const' {
    import alias = ಠ_ಠ.clutz.goog.string.Const;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.string {
    /**
     * An interface for parsing strings into objects.
     */
    interface Parser {
        /**
         * Parses a string into an object and returns the result.
         * Agnostic to the format of string and object.
         * @param s The string to parse.
         */
        parse(a: string): any;
    }
}
declare module 'goog:goog.string.Parser' {
    import alias = ಠ_ಠ.clutz.goog.string.Parser;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.string {
    /**
     * Utility class to facilitate string concatenation.
     */
    class StringBuffer extends StringBuffer_Instance {}
    class StringBuffer_Instance {
        private noStructuralTyping_: any;
        /**
         * Utility class to facilitate string concatenation.
         * @param opt_a1 Optional first initial item to append.
         * @param var_args Other initial items to append, e.g., new
         * goog.string.StringBuffer('foo', 'bar').
         */
        constructor(opt_a1?: any, ...var_args: any[]);
        /**
         * Appends one or more items to the buffer.
         *
         * Calling this with null, undefined, or empty arguments is an error.
         * @param a1 Required first string.
         * @param opt_a2 Optional second string.
         * @param var_args Other items to append, e.g., sb.append('foo', 'bar',
         * 'baz').
         */
        append(a1: any, opt_a2?: any, ...var_args: any[]):
            ಠ_ಠ.clutz.goog.string.StringBuffer;
        /**
         * Clears the internal buffer.
         */
        clear(): void;
        getLength(): number;
        /**
         * Sets the contents of the string buffer object, replacing what's
         * currently there.
         * @param s String to set.
         */
        set(s: any): void;
        toString(): string;
    }
}
declare module 'goog:goog.string.StringBuffer' {
    import alias = ಠ_ಠ.clutz.goog.string.StringBuffer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.string {
    /**
     * An interface for serializing objects into strings.
     */
    interface Stringifier {
        /**
         * Serializes an object or a value to a string.
         * Agnostic to the particular format of object and string.
         * @param object The object to stringify.
         */
        stringify(a: any): string;
    }
}
declare module 'goog:goog.string.Stringifier' {
    import alias = ಠ_ಠ.clutz.goog.string.Stringifier;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.string {
    /**
     * Wrapper for strings that conform to a data type or language.
     *
     * Implementations of this interface are wrappers for strings, and typically
     * associate a type contract with the wrapped string.  Concrete
     * implementations of this interface may choose to implement additional
     * run-time type checking, see for example {@code goog.html.SafeHtml}. If
     * available, client code that needs to ensure type membership of an object
     * should use the type's function to assert type membership, such as {@code
     * goog.html.SafeHtml.unwrap}.
     */
    interface TypedString {
        /**
         * Retrieves this wrapped string's value.
         */
        getTypedStringValue(): string;
        /**
         * Interface marker of the TypedString interface.
         *
         * This property can be used to determine at runtime whether or not an
         * object implements this interface.  All implementations of this
         * interface set this property to {@code true}.
         */
        implementsGoogStringTypedString: boolean;
    }
}
declare module 'goog:goog.string.TypedString' {
    import alias = ಠ_ಠ.clutz.goog.string.TypedString;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.string {
    /**
     * Common Unicode string characters.
     */
    type Unicode = string&{clutzEnumBrand: never};
    var Unicode: {
        NBSP: Unicode,
    };
}
declare module 'goog:goog.string.Unicode' {
    import alias = ಠ_ಠ.clutz.goog.string.Unicode;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.string {
    /**
     * Performs sprintf-like conversion, i.e. puts the values in a template.
     * DO NOT use it instead of built-in conversions in simple cases such as
     * 'Cost: %.2f' as it would introduce unnecessary latency opposed to
     * 'Cost: ' + cost.toFixed(2).
     * @param formatString Template string containing % specifiers.
     * @param var_args Values formatString is to be filled with.
     */
    function format(
        formatString: string, ...var_args: (string|number|undefined)[]): string;
}
declare module 'goog:goog.string.format' {
    import alias = ಠ_ಠ.clutz.goog.string.format;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.string.html {
    /**
     * TODO(goto): why isn't this in the string package ? does this solves any
     * real problem ? move it to the goog.string package if it does.
     * @param str The string to lower case.
     */
    function toLowerCase(str: string): string;
}
declare module 'goog:goog.string.html' {
    import alias = ಠ_ಠ.clutz.goog.string.html;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.string.html {
    /**
     * An Html parser: {@code parse} takes a string and calls methods on
     * {@code goog.string.html.HtmlSaxHandler} while it is visiting it.
     */
    class HtmlParser extends HtmlParser_Instance {
        /**
         * Regular expression that matches &s.
         */
        static AMP_RE: RegExp|null;
        /**
         * Regular expression that matches =.
         */
        static EQUALS_RE: RegExp|null;
        /**
         * Regular expression that matches >.
         */
        static GT_RE: RegExp|null;
        /**
         * Regular expression that matches <.
         */
        static LT_RE: RegExp|null;
        /**
         * Regular expression that matches ".
         */
        static QUOTE_RE: RegExp|null;
    }
    class HtmlParser_Instance {
        private noStructuralTyping_: any;
        /**
         * Given a SAX-like {@code goog.string.html.HtmlSaxHandler} parses a
         * {@code htmlText} and lets the {@code handler} know the structure
         * while visiting the nodes.
         * @param handler The HtmlSaxHandler that will receive the events.
         * @param htmlText The html text.
         */
        parse(
            handler: ಠ_ಠ.clutz.goog.string.html.HtmlSaxHandler|null,
            htmlText: string): void;
    }
}
declare module 'goog:goog.string.html.HtmlParser' {
    import alias = ಠ_ಠ.clutz.goog.string.html.HtmlParser;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.string.html.HtmlParser {
    /**
     * The html eflags, used internally on the parser.
     */
    enum EFlags {
        CDATA,
        EMPTY,
        FOLDABLE,
        OPTIONAL_ENDTAG,
        RCDATA,
        UNSAFE,
    }
}
declare module 'goog:goog.string.html.HtmlParser.EFlags' {
    import alias = ಠ_ಠ.clutz.goog.string.html.HtmlParser.EFlags;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.string.html.HtmlParser {
    /**
     * A map of element to a bitmap of flags it has, used internally on the
     * parser.
     */
    var Elements: {[key: string]: number}|null;
}
declare module 'goog:goog.string.html.HtmlParser.Elements' {
    import alias = ಠ_ಠ.clutz.goog.string.html.HtmlParser.Elements;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.string.html.HtmlParser {
    /**
     * HTML entities that are encoded/decoded.
     * TODO(user): use {@code goog.string.htmlEncode} instead.
     */
    var Entities: {[k:string]:string};
}
declare module 'goog:goog.string.html.HtmlParser.Entities' {
    import alias = ಠ_ಠ.clutz.goog.string.html.HtmlParser.Entities;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.string.html {
    /**
     * An interface to the {@code goog.string.html.HtmlParser} visitor, that
     * gets called while the HTML is being parsed.
     */
    interface HtmlSaxHandler {
        /**
         * Handler called when CDATA is found.
         * @param text The CDATA text found.
         */
        cdata(a: string): any;
        /**
         * Handler called when the parsing is done.
         */
        endDoc: any;
        /**
         * Handler called when the parser found a closing tag.
         * @param name The name of the tag that is ending.
         */
        endTag(a: string): any;
        /**
         * Handler called when PCDATA is found.
         * @param text The PCDATA text found.
         */
        pcdata(a: string): any;
        /**
         * Handler called when RCDATA is found.
         * @param text The RCDATA text found.
         */
        rcdata(a: string): any;
        /**
         * Handler called when the parser is starting to parse the document.
         */
        startDoc: any;
        /**
         * Handler called when the parser found a new tag.
         * @param name The name of the tag that is starting.
         * @param attributes The attributes of the tag.
         */
        startTag(a: string, b: string[]|null): any;
    }
}
declare module 'goog:goog.string.html.HtmlSaxHandler' {
    import alias = ಠ_ಠ.clutz.goog.string.html.HtmlSaxHandler;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.string.linkify {
    /**
     * Gets the first email address in text.
     * @param text Plain text.
     */
    function findFirstEmail(text: string): string;
    /**
     * Gets the first URI in text.
     * @param text Plain text.
     */
    function findFirstUrl(text: string): string;
    /**
     * Takes a string of plain text and linkifies URLs and email addresses. For
     * a URL (unless opt_attributes is specified), the target of the link will
     * be _blank and it will have a rel=nofollow attribute applied to it so that
     * links created by linkify will not be of interest to search engines.
     * @param text Plain text.
     * @param opt_attributes Attributes to add to all links created. Default are
     * rel=nofollow and target=_blank. To clear those default attributes set
     * rel='' and target=''.
     * @param opt_preserveNewlines Whether to preserve newlines with &lt;br&gt;.
     */
    function linkifyPlainTextAsHtml(
        text: string, opt_attributes?: {
            [key: string]: string | number | ಠ_ಠ.clutz.goog.string.TypedString |
                null | ಠ_ಠ.clutz.goog.html.SafeStyle.PropertyMap | undefined
        },
        opt_preserveNewlines?: boolean): ಠ_ಠ.clutz.goog.html.SafeHtml;
}
declare module 'goog:goog.string.linkify' {
    import alias = ಠ_ಠ.clutz.goog.string.linkify;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.string.newlines {
    /**
     * Splits a string into an array of line metadata.
     * @param str String to split.
     */
    function getLines(str: string): ಠ_ಠ.clutz.goog.string.newlines.Line[];
    /**
     * Splits a string into lines, properly handling universal newlines.
     * @param str String to split.
     * @param opt_keepNewlines Whether to keep the newlines in the resulting
     * strings. Defaults to false.
     */
    function splitLines(str: string, opt_keepNewlines?: boolean): string[];
}
declare module 'goog:goog.string.newlines' {
    import alias = ಠ_ಠ.clutz.goog.string.newlines;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.string.newlines {
    /**
     * Line metadata class that records the start/end indicies of lines
     * in a string.  Can be used to implement common newline use cases such as
     * splitLines() or determining line/column of an index in a string.
     * Also implements methods to get line contents.
     *
     * Indexes are expressed as string indicies into string.substring(),
     * inclusive at the start, exclusive at the end.
     *
     * Create an array of these with goog.string.newlines.getLines().
     */
    class Line extends Line_Instance {}
    class Line_Instance {
        private noStructuralTyping_: any;
        /**
         * Line metadata class that records the start/end indicies of lines
         * in a string.  Can be used to implement common newline use cases such
         * as splitLines() or determining line/column of an index in a string.
         * Also implements methods to get line contents.
         *
         * Indexes are expressed as string indicies into string.substring(),
         * inclusive at the start, exclusive at the end.
         *
         * Create an array of these with goog.string.newlines.getLines().
         * @param string The original string.
         * @param startLineIndex The index of the start of the line.
         * @param endContentIndex The index of the end of the line, excluding
         * newlines.
         * @param endLineIndex The index of the end of the line, index newlines.
         */
        constructor(
            string: string, startLineIndex: number, endContentIndex: number,
            endLineIndex: number);
        /**
         * Index of the end of the line, excluding any newline characters.
         * Index is the first character after the line, suitable for
         * String.substring().
         */
        endContentIndex: number;
        /**
         * Index of the end of the line, excluding any newline characters.
         * Index is the first character after the line, suitable for
         * String.substring().
         */
        endLineIndex: number;
        /**
         * Index of the start of the line.
         */
        startLineIndex: number;
        /**
         * The original string.
         */
        string: string;
        getContent(): string;
        getFullLine(): string;
        getNewline(): string;
    }
}
declare module 'goog:goog.string.newlines.Line' {
    import alias = ಠ_ಠ.clutz.goog.string.newlines.Line;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.string.path {
    /**
     * Returns the final component of a pathname.
     * See http://docs.python.org/library/os.path.html#os.path.basename
     * @param path A pathname.
     */
    function baseName(path: string): string;
    /**
     * Alias to goog.string.path.baseName.
     * @param path A pathname.
     */
    function basename(a: string): string;
    /**
     * Returns the directory component of a pathname.
     * See http://docs.python.org/library/os.path.html#os.path.dirname
     * @param path A pathname.
     */
    function dirname(path: string): string;
    /**
     * Extracts the extension part of a pathname.
     * @param path The path name to process.
     */
    function extension(path: string): string;
    /**
     * Joins one or more path components (e.g. 'foo/' and 'bar' make 'foo/bar').
     * An absolute component will discard all previous component.
     * See http://docs.python.org/library/os.path.html#os.path.join
     * @param var_args One of more path components.
     */
    function join(...var_args: (string|undefined)[]): string;
    /**
     * Normalizes a pathname by collapsing duplicate separators, parent
     * directory references ('..'), and current directory references ('.'). See
     * http://docs.python.org/library/os.path.html#os.path.normpath
     * @param path One or more path components.
     */
    function normalizePath(path: string): string;
    /**
     * Splits a pathname into "dirname" and "baseName" components, where
     * "baseName" is everything after the final slash. Either part may return an
     * empty string. See
     * http://docs.python.org/library/os.path.html#os.path.split
     * @param path A pathname.
     */
    function split(path: string): string[];
}
declare module 'goog:goog.string.path' {
    import alias = ಠ_ಠ.clutz.goog.string.path;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.structs {
    /**
     * Removes all the elements from the collection.
     * @param col The collection-like object.
     */
    function clear(col: GlobalObject|null): void;
    /**
     * Whether the collection contains the given value. This is O(n) and uses
     * equals (==) to test the existence.
     * @param col The collection-like object.
     * @param val The value to check for.
     */
    function contains(col: GlobalObject|null, val: any): boolean;
    /**
     * Calls f for each value in a collection. If all calls return true this
     * return true this returns true. If any returns false this returns false at
     * this point and does not continue to check the remaining values.
     * @param col The collection-like object.
     * @param f The function to call for every value. This function takes 3
     * arguments (the value, the key or undefined if the collection has no
     * notion of keys, and the collection) and should return a boolean.
     * @param opt_obj The object to be used as the value of 'this' within {@code
     * f}.
     */
    function every<T = any, S = any>(
        col: S, f: (a: any, b: any, c: S) => boolean, opt_obj?: T): boolean;
    /**
     * Calls a function for every value in the collection. When a call returns
     * true, adds the value to a new collection (Array is returned by default).
     * @param col The collection-like object.
     * @param f The function to call for every value. This function takes 3
     * arguments (the value, the key or undefined if the collection has no
     * notion of keys, and the collection) and should return a Boolean. If the
     * return value is true the value is added to the result collection. If it
     * is false the value is not included.
     * @param opt_obj The object to be used as the value of 'this' within {@code
     * f}.
     */
    function filter<T = any, S = any>(
        col: S, f: (a: any, b: any, c: S) => boolean,
        opt_obj?: T): GlobalObject;
    /**
     * Calls a function for each value in a collection. The function takes
     * three arguments; the value, the key and the collection.
     * @param col The collection-like object.
     * @param f The function to call for every value. This function takes 3
     * arguments (the value, the key or undefined if the collection has no
     * notion of keys, and the collection) and the return value is irrelevant.
     * @param opt_obj The object to be used as the value of 'this' within {@code
     * f}.
     */
    function forEach<T = any, S = any>(
        col: S, f: (a: any, b: any, c: S) => any, opt_obj?: T): void;
    /**
     * Returns the number of values in the collection-like object.
     * @param col The collection-like object.
     */
    function getCount(col: GlobalObject|null): number;
    /**
     * Returns the keys of the collection. Some collections have no notion of
     * keys/indexes and this function will return undefined in those cases.
     * @param col The collection-like object.
     */
    function getKeys(col: GlobalObject|null): any[]|undefined;
    /**
     * Returns the values of the collection-like object.
     * @param col The collection-like object.
     */
    function getValues(col: GlobalObject|null): any[];
    /**
     * Whether the collection is empty.
     * @param col The collection-like object.
     */
    function isEmpty(col: GlobalObject|null): boolean;
    /**
     * Calls a function for every value in the collection and adds the result
     * into a new collection (defaults to creating a new Array).
     * @param col The collection-like object.
     * @param f The function to call for every value. This function takes 3
     * arguments (the value, the key or undefined if the collection has no
     * notion of keys, and the collection) and should return something. The
     * result will be used as the value in the new collection.
     * @param opt_obj The object to be used as the value of 'this' within {@code
     * f}.
     */
    function map<T = any, S = any, V = any>(
        col: S, f: (a: any, b: any, c: S) => V,
        opt_obj?: T): {[/* warning: coerced from ? */ key: string]: V}|V[];
    /**
     * Calls f for each value in a collection. If any call returns true this
     * returns true (without checking the rest). If all returns false this
     * returns false.
     * @param col The collection-like object.
     * @param f The function to call for every value. This function takes 3
     * arguments (the value, the key or undefined if the collection has no
     * notion of keys, and the collection) and should return a boolean.
     * @param opt_obj The object to be used as the value of 'this' within {@code
     * f}.
     */
    function some<T = any, S = any>(
        col: S, f: (a: any, b: any, c: S) => boolean, opt_obj?: T): boolean;
}
declare module 'goog:goog.structs' {
    import alias = ಠ_ಠ.clutz.goog.structs;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.structs {
    /**
     * Constructs an AVL-Tree, which uses the specified comparator to order its
     * values. The values can be accessed efficiently in their sorted order
     * since the tree enforces a O(logn) maximum height.
     */
    class AvlTree<T = any> extends AvlTree_Instance<T> {}
    class AvlTree_Instance<T = any> implements
        ಠ_ಠ.clutz.goog.structs.Collection<T> {
        private noStructuralTyping_: any;
        /**
         * Constructs an AVL-Tree, which uses the specified comparator to order
         * its values. The values can be accessed efficiently in their sorted
         * order since the tree enforces a O(logn) maximum height.
         * @param opt_comparator Function used to order the tree's nodes.
         */
        constructor(opt_comparator?: (...a: any[]) => any);
        /**
         * Inserts a node into the tree with the specified value if the tree
         * does not already contain a node with the specified value. If the
         * value is inserted, the tree is balanced to enforce the AVL-Tree
         * height property.
         * @param value Value to insert into the tree.
         */
        add(value: T): boolean;
        /**
         * Removes all nodes from the tree.
         */
        clear(): void;
        /**
         * Returns true if the tree contains a node with the specified value,
         * false otherwise.
         * @param value Value to find in the tree.
         */
        contains(value: T): boolean;
        /**
         * Returns the number of values stored in the tree.
         */
        getCount(): number;
        /**
         * Returns the height of the tree (the maximum depth). This height
         * should always be <= 1.4405*(Math.log(n+2)/Math.log(2))-1.3277, where
         * n is the number of nodes in the tree.
         */
        getHeight(): number;
        /**
         * Returns a k-th smallest value, based on the comparator, where 0 <= k
         * < this.getCount().
         * @param k The number k.
         */
        getKthValue(k: number): T;
        /**
         * Returns the value u, such that u is contained in the tree and u > v,
         * for all values v in the tree where v != u.
         */
        getMaximum(): T;
        /**
         * Returns the value u, such that u is contained in the tree and u < v,
         * for all values v in the tree where v != u.
         */
        getMinimum(): T;
        /**
         * Inserts the values stored in the tree into a new Array and returns
         * the Array.
         */
        getValues(): T[];
        /**
         * Performs an in-order traversal of the tree and calls {@code func}
         * with each traversed node, optionally starting from the smallest node
         * with a value >= to the specified start value. The traversal ends
         * after traversing the tree's maximum node or when {@code func} returns
         * a value that evaluates to true.
         * @param func Function to call on each traversed node.
         * @param opt_startValue If specified, traversal will begin on the node
         * with the smallest value >= opt_startValue.
         */
        inOrderTraverse(func: (...a: any[]) => any, opt_startValue?: T): void;
        /**
         * Returns the index (in an in-order traversal) of the node in the tree
         * with the specified value. For example, the minimum value in the tree
         * will return an index of 0 and the maximum will return an index of n -
         * 1 (where n is the number of nodes in the tree).  If the value is not
         * found then -1 is returned.
         * @param value Value in the tree whose in-order index is returned.
         */
        indexOf(value: T): number;
        /**
         * Removes a node from the tree with the specified value if the tree
         * contains a node with this value. If a node is removed the tree is
         * balanced to enforce the AVL-Tree height property. The value of the
         * removed node is returned.
         * @param value Value to find and remove from the tree.
         */
        remove(value: T): T;
        /**
         * Performs a reverse-order traversal of the tree and calls {@code func}
         * with each traversed node, optionally starting from the largest node
         * with a value
         * <= to the specified start value. The traversal ends after traversing
         * the tree's minimum node or when func returns a value that evaluates
         * to true.
         * @param func Function to call on each traversed node.
         * @param opt_startValue If specified, traversal will begin on the node
         * with the largest value <= opt_startValue.
         */
        reverseOrderTraverse(func: (a: T) => any, opt_startValue?: T): void;
    }
}
declare module 'goog:goog.structs.AvlTree' {
    import alias = ಠ_ಠ.clutz.goog.structs.AvlTree;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.structs.AvlTree {
    /**
     * Constructs an AVL-Tree node with the specified value. If no parent is
     * specified, the node's parent is assumed to be null. The node's height
     * defaults to 1 and its children default to null.
     */
    class Node<T = any> extends Node_Instance<T> {}
    class Node_Instance<T = any> {
        private noStructuralTyping_: any;
        /**
         * Constructs an AVL-Tree node with the specified value. If no parent is
         * specified, the node's parent is assumed to be null. The node's height
         * defaults to 1 and its children default to null.
         * @param value Value to store in the node.
         * @param opt_parent Optional parent node.
         */
        constructor(
            value: T,
            opt_parent?: ಠ_ಠ.clutz.goog.structs.AvlTree.Node<any>|null);
        /**
         * The number of nodes in the subtree rooted at this node.
         */
        count: number;
        /**
         * The node's parent. Null if the node is the root.
         */
        parent: ಠ_ಠ.clutz.goog.structs.AvlTree.Node<T>|null;
        /**
         * The value stored by the node.
         */
        value: T;
        /**
         * The height of the tree rooted at this node.
         */
        height: number;
        /**
         * Returns true iff the specified node has a parent and is the left
         * child of its parent.
         */
        isLeftChild(): boolean;
        /**
         * Returns true iff the specified node has a parent and is the right
         * child of its parent.
         */
        isRightChild(): boolean;
        /**
         * The node's left child. Null if the node does not have a left child.
         */
        left: ಠ_ಠ.clutz.goog.structs.AvlTree.Node<T>|null;
        /**
         * The node's right child. Null if the node does not have a right child.
         */
        right: ಠ_ಠ.clutz.goog.structs.AvlTree.Node<T>|null;
    }
}
declare module 'goog:goog.structs.AvlTree.Node' {
    import alias = ಠ_ಠ.clutz.goog.structs.AvlTree.Node;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.structs {
    /**
     * Class for CircularBuffer.
     */
    class CircularBuffer<T = any> extends CircularBuffer_Instance<T> {}
    class CircularBuffer_Instance<T = any> {
        private noStructuralTyping_: any;
        /**
         * Class for CircularBuffer.
         * @param opt_maxSize The maximum size of the buffer.
         */
        constructor(opt_maxSize?: number);
        /**
         * Adds an item to the buffer. May remove the oldest item if the buffer
         * is at max size.
         * @param item The item to add.
         */
        add(item: T): T|undefined;
        /**
         * Empties the current buffer.
         */
        clear(): void;
        /**
         * Whether the buffer contains the key/index.
         * @param key The key/index to check for.
         */
        containsKey(key: number): boolean;
        /**
         * Whether the buffer contains the given value.
         * @param value The value to check for.
         */
        containsValue(value: T): boolean;
        /**
         * Returns the item at the specified index.
         * @param index The index of the item. The index of an item can change
         * after calls to {@code add()} if the buffer is at maximum size.
         */
        get(index: number): T;
        /**
         * Returns the current number of items in the buffer.
         */
        getCount(): number;
        getKeys(): ಠ_ಠ.clutz.goog.vec.Number;
        /**
         * Returns the last item inserted into the buffer.
         */
        getLast(): T|null;
        /**
         * Returns the newest values in the buffer up to {@code count}.
         * @param maxCount The maximum number of values to get. Should be a
         * positive number.
         */
        getNewestValues(maxCount: number): T[];
        getValues(): T[];
        isEmpty(): boolean;
        /**
         * Sets the item at the specified index.
         * @param index The index of the item. The index of an item can change
         * after calls to {@code add()} if the buffer is at maximum size.
         * @param item The item to add.
         */
        set(index: number, item: T): void;
    }
}
declare module 'goog:goog.structs.CircularBuffer' {
    import alias = ಠ_ಠ.clutz.goog.structs.CircularBuffer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.structs {
    /**
     * An interface for a collection of values.
     */
    interface Collection<T = any> {
        add(a: T): any;
        contains(a: T): boolean;
        getCount(): number;
        remove(a: T): any;
    }
}
declare module 'goog:goog.structs.Collection' {
    import alias = ಠ_ಠ.clutz.goog.structs.Collection;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.structs {
    /**
     * Class for a Heap datastructure.
     */
    class Heap<K = any, V = any> extends Heap_Instance<K, V> {}
    class Heap_Instance<K = any, V = any> {
        private noStructuralTyping_: any;
        /**
         * Class for a Heap datastructure.
         * @param opt_heap Optional goog.structs.Heap or Object to initialize
         * heap with.
         */
        constructor(opt_heap?: null|GlobalObject);
        /**
         * Removes all elements from the heap.
         */
        clear(): void;
        /**
         * Clones a heap and returns a new heap
         */
        clone(): ಠ_ಠ.clutz.goog.structs.Heap<any, any>;
        /**
         * Whether the heap contains the given key.
         * @param key The key to check for.
         */
        containsKey(key: K): boolean;
        /**
         * Whether the heap contains the given value.
         * @param val The value to check for.
         */
        containsValue(val: V): boolean;
        /**
         * The number of key-value pairs in the map
         */
        getCount(): number;
        /**
         * Gets the keys of the heap.
         */
        getKeys(): K[];
        /**
         * Gets the values of the heap.
         */
        getValues(): V[];
        /**
         * Insert the given value into the heap with the given key.
         * @param key The key.
         * @param value The value.
         */
        insert(key: K, value: V): void;
        /**
         * Adds multiple key-value pairs from another goog.structs.Heap or
         * Object
         * @param heap Object containing the data to add.
         */
        insertAll(heap: null|GlobalObject): void;
        /**
         * Returns true if this heap contains no elements.
         */
        isEmpty(): boolean;
        /**
         * Retrieves but does not remove the root value of this heap.
         */
        peek(): V;
        /**
         * Retrieves but does not remove the key of the root node of this heap.
         */
        peekKey(): K;
        /**
         * Retrieves and removes the root value of this heap.
         */
        remove(): V;
    }
}
declare module 'goog:goog.structs.Heap' {
    import alias = ಠ_ಠ.clutz.goog.structs.Heap;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.structs {
    /**
     * Maps ranges to values.
     */
    class InversionMap<T = any> extends InversionMap_Instance<T> {}
    class InversionMap_Instance<T = any> {
        private noStructuralTyping_: any;
        /**
         * Maps ranges to values.
         * @param rangeArray An array of monotonically increasing integer
         * values, with at least one instance.
         * @param valueArray An array of corresponding values. Length must be
         * the same as rangeArray.
         * @param opt_delta If true, saves only delta from previous value.
         */
        constructor(
            rangeArray: ಠ_ಠ.clutz.goog.vec.Number|null, valueArray: T[]|null,
            opt_delta?: boolean);
        rangeArray: ಠ_ಠ.clutz.goog.vec.Number|null;
        values: T[]|null;
        /**
         * Gets the value corresponding to a number from the inversion map.
         * @param intKey The number for which value needs to be retrieved from
         * inversion map.
         */
        at(intKey: number): T|null;
        /**
         * Gets the largest index such that rangeArray[index] <= intKey from the
         * inversion map.
         * @param intKey The probe for which rangeArray is searched.
         */
        getLeast(intKey: number): number;
        /**
         * Splices a range -> value map into this inversion map.
         * @param rangeArray An array of monotonically increasing integer
         * values, with at least one instance.
         * @param valueArray An array of corresponding values. Length must be
         * the same as rangeArray.
         * @param opt_delta If true, saves only delta from previous value.
         */
        spliceInversion(
            rangeArray: ಠ_ಠ.clutz.goog.vec.Number|null, valueArray: T[]|null,
            opt_delta?: boolean): void;
    }
}
declare module 'goog:goog.structs.InversionMap' {
    import alias = ಠ_ಠ.clutz.goog.structs.InversionMap;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.structs {
    /**
     * Class for a LinkedMap datastructure, which combines O(1) map access for
     * key/value pairs with a linked list for a consistent iteration order.
     * Sample usage:
     *
     * <pre>
     * var m = new LinkedMap();
     * m.set('param1', 'A');
     * m.set('param2', 'B');
     * m.set('param3', 'C');
     * alert(m.getKeys()); // param1, param2, param3
     *
     * var c = new LinkedMap(5, true);
     * for (var i = 0; i < 10; i++) {
     * c.set('entry' + i, false);
     * }
     * alert(c.getKeys()); // entry9, entry8, entry7, entry6, entry5
     *
     * c.set('entry5', true);
     * c.set('entry1', false);
     * alert(c.getKeys()); // entry1, entry5, entry9, entry8, entry7
     * </pre>
     */
    class LinkedMap<KEY = any, VALUE = any> extends
        LinkedMap_Instance<KEY, VALUE> {}
    class LinkedMap_Instance<KEY = any, VALUE = any> {
        private noStructuralTyping_: any;
        /**
         * Class for a LinkedMap datastructure, which combines O(1) map access
         * for key/value pairs with a linked list for a consistent iteration
         * order. Sample usage:
         *
         * <pre>
         * var m = new LinkedMap();
         * m.set('param1', 'A');
         * m.set('param2', 'B');
         * m.set('param3', 'C');
         * alert(m.getKeys()); // param1, param2, param3
         *
         * var c = new LinkedMap(5, true);
         * for (var i = 0; i < 10; i++) {
         * c.set('entry' + i, false);
         * }
         * alert(c.getKeys()); // entry9, entry8, entry7, entry6, entry5
         *
         * c.set('entry5', true);
         * c.set('entry1', false);
         * alert(c.getKeys()); // entry1, entry5, entry9, entry8, entry7
         * </pre>
         * @param opt_maxCount The maximum number of objects to store in the
         * LinkedMap. If unspecified or 0, there is no maximum.
         * @param opt_cache When set, the LinkedMap stores items in order from
         * most recently used to least recently used, instead of insertion
         * order.
         * @param opt_evictionCallback Called with the removed stringified key
         * as the first argument and value as the second argument after the key
         * was evicted from the LRU because the max count was reached.
         */
        constructor(
            opt_maxCount?: number, opt_cache?: boolean,
            opt_evictionCallback?: (a: string, b: VALUE) => any);
        head_: ಠ_ಠ.clutz.goog.structs.LinkedMap.Node_<string, undefined>;
        /**
         * Removes all entries in this object.
         */
        clear(): void;
        /**
         * Tests whether a provided value is currently in the LinkedMap. This
         * does not affect item ordering in cache-style LinkedMaps.
         * @param value The value to check for.
         */
        contains(value: VALUE): boolean;
        /**
         * Tests whether a provided key is currently in the LinkedMap. This does
         * not affect item ordering in cache-style LinkedMaps.
         * @param key The key to check for.
         */
        containsKey(key: string): boolean;
        /**
         * Calls a function on each item in the LinkedMap and returns true only
         * if every function call returns a true-like value.
         * @param f The function to call for each item. The function takes three
         * arguments: the value, the key, and the Cache, and returns a boolean.
         * @param opt_obj The object context to use as "this" for the function.
         */
        every<T = any>(
            f: (a: VALUE, b: KEY,
                c: ಠ_ಠ.clutz.goog.structs.LinkedMap<KEY, VALUE>|
                null) => boolean,
            opt_obj?: T): boolean;
        /**
         * Calls a function on each item in the LinkedMap.
         * @param opt_obj The value of "this" inside f.
         */
        forEach<T = any>(
            f: (a: VALUE, b: KEY,
                c: ಠ_ಠ.clutz.goog.structs.LinkedMap<KEY, VALUE>|null) => any,
            opt_obj?: T): void;
        /**
         * Retrieves the value for a given key. If this is a caching LinkedMap,
         * the entry will become the most recently used.
         * @param key The key to retrieve the value for.
         * @param opt_val A default value that will be returned if the key is
         * not found, defaults to undefined.
         */
        get(key: string, opt_val?: VALUE): VALUE;
        getCount(): number;
        getKeys(): string[];
        getValues(): VALUE[];
        isEmpty(): boolean;
        /**
         * Calls a function on each item in the LinkedMap and returns the
         * results of those calls in an array.
         * @param f The function to call for each item. The function takes three
         * arguments: the value, the key, and the LinkedMap.
         * @param opt_obj The object context to use as "this" for the function.
         */
        map<T = any, RESULT = any>(
            f: (a: VALUE, b: KEY,
                c: ಠ_ಠ.clutz.goog.structs.LinkedMap<KEY, VALUE>|null) => RESULT,
            opt_obj?: T): RESULT[];
        /**
         * Returns the value of the first node without making any modifications.
         */
        peek(): VALUE;
        /**
         * Returns the value of the last node without making any modifications.
         */
        peekLast(): VALUE;
        /**
         * Retrieves the value for a given key without updating the entry to be
         * the most recently used.
         * @param key The key to retrieve the value for.
         * @param opt_val A default value that will be returned if the key is
         * not found.
         */
        peekValue(key: string, opt_val?: VALUE): VALUE;
        /**
         * Removes the last node from the list and returns its value.
         */
        pop(): VALUE;
        /**
         * Removes a value from the LinkedMap based on its key.
         * @param key The key to remove.
         */
        remove(key: string): boolean;
        /**
         * Removes a node from the {@code LinkedMap}. It can be overridden to do
         * further cleanup such as disposing of the node value.
         * @param node The node to remove.
         */
        removeNode(node: ಠ_ಠ.clutz.goog.structs.LinkedMap.Node_<any, any>):
            void;
        /**
         * Sets a value for a given key. If this is a caching LinkedMap, this
         * entry will become the most recently used.
         * @param key Key with which the specified value is to be associated.
         * @param value Value to be associated with the specified key.
         */
        set(key: string, value: VALUE): void;
        /**
         * Sets a callback that fires when an entry is evicted because max entry
         * count is reached. The callback is called with the removed stringified
         * key as the first argument and value as the second argument after the
         * key was evicted from the LRU because the max count was reached.
         */
        setEvictionCallback(evictionCallback: (a: string, b: VALUE) => any):
            void;
        /**
         * Sets the maximum number of entries allowed in this object, truncating
         * any excess objects if necessary.
         * @param maxCount The new maximum number of entries to allow.
         */
        setMaxCount(maxCount: number): void;
        /**
         * Removes the first node from the list and returns its value.
         */
        shift(): VALUE;
        /**
         * Calls a function on each item in the LinkedMap and returns true if
         * any of those function calls returns a true-like value.
         * @param f The function to call for each item. The function takes three
         * arguments: the value, the key, and the LinkedMap, and returns a
         * boolean.
         * @param opt_obj The object context to use as "this" for the function.
         */
        some<T = any>(
            f: (a: VALUE, b: KEY,
                c: ಠ_ಠ.clutz.goog.structs.LinkedMap<KEY, VALUE>|
                null) => boolean,
            opt_obj?: T): boolean;
    }
}
declare namespace ಠ_ಠ.clutz.goog.structs.LinkedMap {
    class Node_<KEY = any, VALUE = any> extends Node__Instance<KEY, VALUE> {}
    class Node__Instance<KEY = any, VALUE = any> {
        private noStructuralTyping_: any;
        key: KEY;
        value: VALUE;
        /**
         * The next node in the list.
         */
        next: ಠ_ಠ.clutz.goog.structs.LinkedMap.Node_<KEY, VALUE>;
        /**
         * The previous node in the list.
         */
        prev: ಠ_ಠ.clutz.goog.structs.LinkedMap.Node_<KEY, VALUE>;
        /**
         * Causes this node to remove itself from the list.
         */
        remove(): void;
    }
}
declare module 'goog:goog.structs.LinkedMap' {
    import alias = ಠ_ಠ.clutz.goog.structs.LinkedMap;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.structs {
    /**
     * Class for Hash Map datastructure.
     */
    class Map<K = any, V = any> extends Map_Instance<K, V> {
        /**
         * Default equality test for values.
         * @param a The first value.
         * @param b The second value.
         */
        static defaultEquals(a: any, b: any): boolean;
    }
    class Map_Instance<K = any, V = any> {
        private noStructuralTyping_: any;
        /**
         * Class for Hash Map datastructure.
         * @param opt_map Map or Object to initialize the map with.
         * @param var_args If 2 or more arguments are present then they will be
         * used as key-value pairs.
         */
        constructor(opt_map?: any, ...var_args: any[]);
        /**
         * Returns an iterator that iterates over the values or the keys in the
         * map. This throws an exception if the map was mutated since the
         * iterator was created.
         * @param opt_keys True to iterate over the keys. False to iterate over
         * the values.  The default value is false.
         */
        __iterator__(opt_keys?: boolean): ಠ_ಠ.clutz.goog.iter.Iterator<any>;
        /**
         * Adds multiple key-value pairs from another goog.structs.Map or
         * Object.
         * @param map Object containing the data to add.
         */
        addAll(map: GlobalObject|null): void;
        /**
         * Removes all key-value pairs from the map.
         */
        clear(): void;
        /**
         * Clones a map and returns a new map.
         */
        clone(): ಠ_ಠ.clutz.goog.structs.Map<any, any>;
        /**
         * Whether the map contains the given key.
         * @param key The key to check for.
         */
        containsKey(key: any): boolean;
        /**
         * Whether the map contains the given value. This is O(n).
         * @param val The value to check for.
         */
        containsValue(val: V): boolean;
        /**
         * Whether this map is equal to the argument map.
         * @param otherMap The map against which to test equality.
         * @param opt_equalityFn Optional equality function to test equality of
         * values. If not specified, this will test whether the values contained
         * in each map are identical objects.
         */
        equals(
            otherMap: ಠ_ಠ.clutz.goog.structs.Map<any, any>|null,
            opt_equalityFn?: (a: V, b: V) => boolean): boolean;
        /**
         * Calls the given function on each entry in the map.
         * @param opt_obj The value of "this" inside f.
         */
        forEach<T = any>(
            f: (a: V, b: K, c: ಠ_ಠ.clutz.goog.structs.Map<K, V>|null) => any,
            opt_obj?: T): void;
        /**
         * Returns the value for the given key.  If the key is not found and the
         * default value is not given this will return {@code undefined}.
         * @param key The key to get the value for.
         * @param opt_val The value to return if no item is found for the given
         * key, defaults to undefined.
         */
        get<DEFAULT = any>(key: any, opt_val?: DEFAULT): V|DEFAULT;
        getCount(): number;
        /**
         * Returns an iterator that iterates over the keys in the map.  Removal
         * of keys while iterating might have undesired side effects.
         */
        getKeyIterator(): ಠ_ಠ.clutz.goog.iter.Iterator<any>;
        /**
         * Returns the keys of the map.
         */
        getKeys(): string[];
        /**
         * Returns an iterator that iterates over the values in the map.
         * Removal of keys while iterating might have undesired side effects.
         */
        getValueIterator(): ಠ_ಠ.clutz.goog.iter.Iterator<any>;
        /**
         * Returns the values of the map.
         */
        getValues(): V[];
        isEmpty(): boolean;
        /**
         * Removes a key-value pair based on the key. This is O(logN) amortized
         * due to updating the keys array whenever the count becomes half the
         * size of the keys in the keys array.
         * @param key The key to remove.
         */
        remove(key: any): boolean;
        /**
         * Adds a key-value pair to the map.
         * @param key The key.
         * @param value The value to add.
         */
        set(key: any, value: V): any;
        toObject(): GlobalObject;
        /**
         * Returns a new map in which all the keys and values are interchanged
         * (keys become values and values become keys). If multiple keys map to
         * the same value, the chosen transposed value is
         * implementation-dependent.
         *
         * It acts very similarly to {goog.object.transpose(Object)}.
         */
        transpose(): ಠ_ಠ.clutz.goog.structs.Map<any, any>;
    }
}
declare module 'goog:goog.structs.Map' {
    import alias = ಠ_ಠ.clutz.goog.structs.Map;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.structs {
    /**
     * A generic immutable node. This can be used in various collections that
     * require a node object for its item (such as a heap).
     */
    class Node<K = any, V = any> extends Node_Instance<K, V> {}
    class Node_Instance<K = any, V = any> {
        private noStructuralTyping_: any;
        /**
         * A generic immutable node. This can be used in various collections
         * that require a node object for its item (such as a heap).
         * @param key Key.
         * @param value Value.
         */
        constructor(key: K, value: V);
        /**
         * Clones a node and returns a new node.
         */
        clone(): ಠ_ಠ.clutz.goog.structs.Node<K, V>;
        /**
         * Gets the key.
         */
        getKey(): K;
        /**
         * Gets the value.
         */
        getValue(): V;
    }
}
declare module 'goog:goog.structs.Node' {
    import alias = ಠ_ಠ.clutz.goog.structs.Node;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.structs {
    /**
     * A generic pool class. If min is greater than max, an error is thrown.
     */
    class Pool<T = any> extends Pool_Instance<T> {}
    class Pool_Instance<T = any> extends ಠ_ಠ.clutz.goog.Disposable_Instance {
        /**
         * A generic pool class. If min is greater than max, an error is thrown.
         * @param opt_minCount Min. number of objects (Default: 0).
         * @param opt_maxCount Max. number of objects (Default: 10).
         */
        constructor(opt_minCount?: number, opt_maxCount?: number);
        /**
         * The minimum delay between objects being made available, in
         * milliseconds. If this is 0, no minimum delay is enforced.
         */
        delay: number;
        /**
         * The time of the last object being made available, in milliseconds
         * since the epoch (i.e., the result of Date#toTime). If this is null,
         * no access has occurred yet.
         */
        lastAccess: number|null;
        /**
         * Adds an object to the collection of objects that are free. If the
         * object can not be added, then it is disposed.
         * @param obj The object to add to collection of free objects.
         */
        addFreeObject(obj: T): void;
        /**
         * Adjusts the objects held in the pool to be within the min/max
         * constraints.
         *
         * NOTE: It is possible that the number of objects in the pool will
         * still be greater than the maximum count of objects allowed. This will
         * be the case if no more free objects can be disposed of to get below
         * the minimum count (i.e., all objects are in use).
         */
        adjustForMinMax(): void;
        /**
         * Returns true if the given object is in the pool.
         * @param obj The object to check the pool for.
         */
        contains(obj: T): boolean;
        /**
         * Should be overridden by sub-classes to return an instance of the
         * object type that is expected in the pool.
         */
        createObject(): T;
        /**
         * Disposes of the pool and all objects currently held in the pool.
         */
        disposeInternal(): void;
        /**
         * Should be overridden to dispose of an object. Default implementation
         * is to remove all its members, which should render it useless. Calls
         * the object's
         * {@code dispose()} method, if available.
         * @param obj The object to dispose.
         */
        disposeObject(obj: T): void;
        /**
         * Returns the number of objects currently in the pool.
         */
        getCount(): number;
        /**
         * Returns the number of objects currently free in the pool.
         */
        getFreeCount(): number;
        /**
         * Returns the number of objects currently in use in the pool.
         */
        getInUseCount(): number;
        getObject(): T|undefined;
        /**
         * Determines if the pool contains no objects.
         */
        isEmpty(): boolean;
        /**
         * Should be overridden to determine whether an object has become
         * unusable and should not be returned by getObject(). Calls the
         * object's
         * {@code canBeReused()}  method, if available.
         * @param obj The object to test.
         */
        objectCanBeReused(obj: T): boolean;
        /**
         * Returns an object to the pool of available objects so that it can be
         * reused.
         * @param obj The object to return to the pool of free objects.
         */
        releaseObject(obj: T): boolean;
        /**
         * Sets the minimum delay between objects being returned by getObject,
         * in milliseconds. This defaults to zero, meaning that no minimum delay
         * is enforced and objects may be used as soon as they're available.
         * @param delay The minimum delay, in milliseconds.
         */
        setDelay(delay: number): void;
        /**
         * Sets the maximum count of the pool.
         * If max is less than the min count of the pool, an error is thrown.
         * @param max The maximum count of the pool.
         */
        setMaximumCount(max: number): void;
        /**
         * Sets the minimum count of the pool.
         * If min is greater than the max count of the pool, an error is thrown.
         * @param min The minimum count of the pool.
         */
        setMinimumCount(min: number): void;
    }
}
declare module 'goog:goog.structs.Pool' {
    import alias = ಠ_ಠ.clutz.goog.structs.Pool;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.structs {
    /**
     * A generic pool class. If min is greater than max, an error is thrown.
     */
    class PriorityPool<VALUE = any> extends PriorityPool_Instance<VALUE> {}
    class PriorityPool_Instance<VALUE = any> extends
        ಠ_ಠ.clutz.goog.structs.Pool_Instance<VALUE> {
        /**
         * A generic pool class. If min is greater than max, an error is thrown.
         * @param opt_minCount Min. number of objects (Default: 0).
         * @param opt_maxCount Max. number of objects (Default: 10).
         */
        constructor(opt_minCount?: number, opt_maxCount?: number);
        /**
         * Adds an object to the collection of objects that are free. If the
         * object can not be added, then it is disposed.
         *
         * NOTE: This method does not remove the object from the in use
         * collection.
         * @param obj The object to add to the collection of free objects.
         */
        addFreeObject(obj: VALUE): void;
        /**
         * Adjusts the objects held in the pool to be within the min/max
         * constraints.
         *
         * NOTE: It is possible that the number of objects in the pool will
         * still be greater than the maximum count of objects allowed. This will
         * be the case if no more free objects can be disposed of to get below
         * the minimum count (i.e., all objects are in use).
         */
        adjustForMinMax(): void;
        disposeInternal(): void;
        /**
         * Get a new object from the the pool, if there is one available,
         * otherwise return undefined.
         * @param opt_callback The function to callback when an object is
         * available. This could be immediately. If this is not present, then an
         * object is immediately returned if available, or undefined if not.
         * @param opt_priority The priority of the request. A smaller value
         * means a higher priority.
         */
        getObject(opt_callback?: (...a: any[]) => any, opt_priority?: number):
            VALUE|undefined;
        setDelay(delay: number): void;
    }
}
declare module 'goog:goog.structs.PriorityPool' {
    import alias = ಠ_ಠ.clutz.goog.structs.PriorityPool;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.structs {
    /**
     * Class for Priority Queue datastructure.
     */
    class PriorityQueue<VALUE = any> extends PriorityQueue_Instance<VALUE> {}
    class PriorityQueue_Instance<VALUE = any> extends
        ಠ_ಠ.clutz.goog.structs.Heap_Instance<number, VALUE> {
        /**
         * Class for Priority Queue datastructure.
         */
        constructor();
        /**
         * Retrieves and removes the head of this queue.
         */
        dequeue(): VALUE;
        /**
         * Puts the specified value in the queue.
         * @param priority The priority of the value. A smaller value here means
         * a higher priority.
         * @param value The value.
         */
        enqueue(priority: number, value: VALUE): void;
    }
}
declare module 'goog:goog.structs.PriorityQueue' {
    import alias = ಠ_ಠ.clutz.goog.structs.PriorityQueue;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.structs {
    /**
     * Constructs a new quad tree.
     */
    class QuadTree extends QuadTree_Instance {}
    class QuadTree_Instance {
        private noStructuralTyping_: any;
        /**
         * Constructs a new quad tree.
         * @param minX Minimum x-value that can be held in tree.
         * @param minY Minimum y-value that can be held in tree.
         * @param maxX Maximum x-value that can be held in tree.
         * @param maxY Maximum y-value that can be held in tree.
         */
        constructor(minX: number, minY: number, maxX: number, maxY: number);
        /**
         * Removes all items from the tree.
         */
        clear(): void;
        /**
         * Clones the quad-tree and returns the new instance.
         */
        clone(): ಠ_ಠ.clutz.goog.structs.QuadTree;
        /**
         * Returns true if the point at (x, y) exists in the tree.
         * @param x The x-coordinate.
         * @param y The y-coordinate.
         */
        contains(x: number, y: number): boolean;
        /**
         * Traverses the tree and calls a function on each node.
         * @param fn The function to call for every value. This function takes 3
         * arguments (the value, the coordinate, and the tree itself) and the
         * return value is irrelevant.
         * @param opt_obj The object to be used as the value of 'this' within {@
         * code fn}.
         */
        forEach(
            fn:
                (a: any, b: ಠ_ಠ.clutz.goog.math.Coordinate|null,
                 c: ಠ_ಠ.clutz.goog.structs.QuadTree|null) => any,
            opt_obj?: GlobalObject|null): void;
        /**
         * Gets the value of the point at (x, y) or null if the point is empty.
         * @param x The x-coordinate.
         * @param y The y-coordinate.
         * @param opt_default The default value to return if the node doesn't
         * exist.
         */
        get(x: number, y: number, opt_default?: any): any;
        getCount(): number;
        /**
         * Returns an array containing the coordinates of each point stored in
         * the tree.
         */
        getKeys(): (ಠ_ಠ.clutz.goog.math.Coordinate|null)[];
        /**
         * Returns a reference to the tree's root node.  Callers shouldn't
         * modify nodes, directly.  This is a convenience for visualization and
         * debugging purposes.
         */
        getRootNode(): ಠ_ಠ.clutz.goog.structs.QuadTree.Node|null;
        /**
         * Returns an array containing all values stored within the tree.
         */
        getValues(): (GlobalObject|null)[];
        isEmpty(): boolean;
        /**
         * Removes a point from (x, y) if it exists.
         * @param x The x-coordinate.
         * @param y The y-coordinate.
         */
        remove(x: number, y: number): any;
        /**
         * Sets the value of an (x, y) point within the quad-tree.
         * @param x The x-coordinate.
         * @param y The y-coordinate.
         * @param value The value associated with the point.
         */
        set(x: number, y: number, value: any): void;
    }
}
declare namespace ಠ_ಠ.clutz.goog.structs.QuadTree {
    enum NodeType {
        EMPTY,
        LEAF,
        POINTER,
    }
}
declare module 'goog:goog.structs.QuadTree' {
    import alias = ಠ_ಠ.clutz.goog.structs.QuadTree;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.structs.QuadTree {
    /**
     * Constructs a new quad tree node.
     */
    class Node extends Node_Instance {}
    class Node_Instance {
        private noStructuralTyping_: any;
        /**
         * Constructs a new quad tree node.
         * @param x X-coordiate of node.
         * @param y Y-coordinate of node.
         * @param w Width of node.
         * @param h Height of node.
         * @param opt_parent Optional parent node.
         */
        constructor(
            x: number, y: number, w: number, h: number,
            opt_parent?: ಠ_ಠ.clutz.goog.structs.QuadTree.Node|null);
        /**
         * The height of the node.
         */
        h: number;
        /**
         * The parent node.
         */
        parent: ಠ_ಠ.clutz.goog.structs.QuadTree.Node|null;
        /**
         * The width of the node.
         */
        w: number;
        /**
         * The x-coordinate of the node.
         */
        x: number;
        /**
         * The y-coordinate of the node.
         */
        y: number;
        /**
         * The child node in the North-East quadrant.
         */
        ne: ಠ_ಠ.clutz.goog.structs.QuadTree.Node|null;
        /**
         * The node's type.
         */
        nodeType: ಠ_ಠ.clutz.goog.structs.QuadTree.NodeType;
        /**
         * The child node in the North-West quadrant.
         */
        nw: ಠ_ಠ.clutz.goog.structs.QuadTree.Node|null;
        /**
         * The point for the node, if it is a leaf node.
         */
        point: ಠ_ಠ.clutz.goog.structs.QuadTree.Point|null;
        /**
         * The child node in the South-East quadrant.
         */
        se: ಠ_ಠ.clutz.goog.structs.QuadTree.Node|null;
        /**
         * The child node in the South-West quadrant.
         */
        sw: ಠ_ಠ.clutz.goog.structs.QuadTree.Node|null;
    }
}
declare module 'goog:goog.structs.QuadTree.Node' {
    import alias = ಠ_ಠ.clutz.goog.structs.QuadTree.Node;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.structs.QuadTree {
    /**
     * Creates a new point object.
     */
    class Point extends Point_Instance {}
    class Point_Instance {
        private noStructuralTyping_: any;
        /**
         * Creates a new point object.
         * @param x The x-coordinate of the point.
         * @param y The y-coordinate of the point.
         * @param opt_value Optional value associated with the point.
         */
        constructor(x: number, y: number, opt_value?: any);
        /**
         * Optional value associated with the point.
         */
        value: any;
        /**
         * The x-coordinate for the point.
         */
        x: number;
        /**
         * The y-coordinate for the point.
         */
        y: number;
    }
}
declare module 'goog:goog.structs.QuadTree.Point' {
    import alias = ಠ_ಠ.clutz.goog.structs.QuadTree.Point;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.structs {
    /**
     * Class for FIFO Queue data structure.
     */
    class Queue<T = any> extends Queue_Instance<T> {}
    class Queue_Instance<T = any> {
        private noStructuralTyping_: any;
        /**
         * Removes all elements from the queue.
         */
        clear(): void;
        /**
         * Returns true if the given value is in the queue.
         * @param obj The value to look for.
         */
        contains(obj: T): boolean;
        /**
         * Retrieves and removes the head of this queue.
         */
        dequeue(): T;
        /**
         * Puts the specified element on this queue.
         * @param element The element to be added to the queue.
         */
        enqueue(element: T): void;
        /**
         * Returns the number of elements in this queue.
         */
        getCount(): number;
        /**
         * Returns all the values in the queue.
         */
        getValues(): T[];
        /**
         * Returns true if this queue contains no elements.
         */
        isEmpty(): boolean;
        /**
         * Retrieves but does not remove the head of this queue.
         */
        peek(): T;
        /**
         * Removes the first occurrence of a particular value from the queue.
         * @param obj Object to remove.
         */
        remove(obj: T): boolean;
    }
}
declare module 'goog:goog.structs.Queue' {
    import alias = ಠ_ಠ.clutz.goog.structs.Queue;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.structs {
    /**
     * A set that can contain both primitives and objects.  Adding and removing
     * elements is O(1).  Primitives are treated as identical if they have the
     * same type and convert to the same string.  Objects are treated as
     * identical only if they are references to the same object.  WARNING: A
     * goog.structs.Set can contain both 1 and (new Number(1)), because they are
     * not the same.  WARNING: Adding (new Number(1)) twice will yield two
     * distinct elements, because they are two different objects.  WARNING: Any
     * object that is added to a goog.structs.Set will be modified!  Because
     * goog.getUid() is used to identify objects, every object in the set will
     * be mutated.
     */
    class Set<T = any> extends Set_Instance<T> {}
    class Set_Instance<T = any> implements
        ಠ_ಠ.clutz.goog.structs.Collection<T> {
        private noStructuralTyping_: any;
        /**
         * A set that can contain both primitives and objects.  Adding and
         * removing elements is O(1).  Primitives are treated as identical if
         * they have the same type and convert to the same string.  Objects are
         * treated as identical only if they are references to the same object.
         * WARNING: A goog.structs.Set can contain both 1 and (new Number(1)),
         * because they are not the same.  WARNING: Adding (new Number(1)) twice
         * will yield two distinct elements, because they are two different
         * objects.  WARNING: Any object that is added to a goog.structs.Set
         * will be modified!  Because goog.getUid() is used to identify objects,
         * every object in the set will be mutated.
         * @param opt_values Initial values to start with.
         */
        constructor(opt_values?: T[]|null|
                    {[/* warning: coerced from ? */ key: string]: T});
        map_: ಠ_ಠ.clutz.goog.structs.Map<any, any>;
        /**
         * Returns an iterator that iterates over the elements in this set.
         * @param opt_keys This argument is ignored.
         */
        __iterator__(opt_keys?: boolean): ಠ_ಠ.clutz.goog.iter.Iterator<any>;
        /**
         * Add a primitive or an object to the set.
         * @param element The primitive or object to add.
         */
        add(element: T): any;
        /**
         * Adds all the values in the given collection to this set.
         * @param col A collection containing the elements to add.
         */
        addAll(col: T[]|null|ಠ_ಠ.clutz.goog.structs.Collection<T>|
               {[/* warning: coerced from ? */ key: string]: T}): void;
        /**
         * Removes all elements from this set.
         */
        clear(): void;
        /**
         * Creates a shallow clone of this set.
         */
        clone(): ಠ_ಠ.clutz.goog.structs.Set<T>;
        /**
         * Tests whether this set contains the given element.
         * @param element The primitive or object to test for.
         */
        contains(element: T): boolean;
        /**
         * Tests whether this set contains all the values in a given collection.
         * Repeated elements in the collection are ignored, e.g.  (new
         * goog.structs.Set([1, 2])).containsAll([1, 1]) is True.
         * @param col A collection-like object.
         */
        containsAll(col: ಠ_ಠ.clutz.goog.structs.Collection<T>|null|
                    GlobalObject): boolean;
        /**
         * Finds all values that are present in this set and not in the given
         * collection.
         * @param col A collection.
         */
        difference(col: T[]|null|ಠ_ಠ.clutz.goog.structs.Collection<T>|
                   {[/* warning: coerced from ? */ key: string]: T}):
            ಠ_ಠ.clutz.goog.structs.Set<any>;
        /**
         * Tests whether the given collection consists of the same elements as
         * this set, regardless of order, without repetition.  Primitives are
         * treated as equal if they have the same type and convert to the same
         * string; objects are treated as equal if they are references to the
         * same object.  This operation is O(n).
         * @param col A collection.
         */
        equals(col: ಠ_ಠ.clutz.goog.structs.Collection<T>|null|
               GlobalObject): boolean;
        getCount(): number;
        /**
         * Returns an array containing all the elements in this set.
         */
        getValues(): T[];
        /**
         * Finds all values that are present in both this set and the given
         * collection.
         * @param col A collection.
         */
        intersection<S = any>(col: S[]|null|
                              {[/* warning: coerced from ? */ key: string]: S}):
            ಠ_ಠ.clutz.goog.structs.Set<T|S>;
        /**
         * Tests whether this set is empty.
         */
        isEmpty(): boolean;
        /**
         * Tests whether the given collection contains all the elements in this
         * set. Primitives are treated as equal if they have the same type and
         * convert to the same string; objects are treated as equal if they are
         * references to the same object.  This operation is O(n).
         * @param col A collection.
         */
        isSubsetOf(col: ಠ_ಠ.clutz.goog.structs.Collection<T>|null|
                   GlobalObject): boolean;
        /**
         * Removes the given element from this set.
         * @param element The primitive or object to remove.
         */
        remove(element: T): boolean;
        /**
         * Removes all values in the given collection from this set.
         * @param col A collection containing the elements to remove.
         */
        removeAll(col: T[]|null|ಠ_ಠ.clutz.goog.structs.Collection<T>|
                  {[/* warning: coerced from ? */ key: string]: T}): void;
    }
}
declare module 'goog:goog.structs.Set' {
    import alias = ಠ_ಠ.clutz.goog.structs.Set;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.structs {
    /**
     * A generic pool class. Simpler and more efficient than goog.structs.Pool
     * because it doesn't maintain a list of objects that are in use. This class
     * has constant overhead and doesn't create any additional objects as part
     * of the pool management after construction time.
     *
     * IMPORTANT: If the objects being pooled are arrays or maps that can have
     * unlimited number of properties, they need to be cleaned before being
     * returned to the pool.
     *
     * Also note that {@see goog.object.clean} actually allocates an array to clean
     * the object passed to it, so simply using this function would defy the
     * purpose of using the pool.
     */
    class SimplePool<T = any> extends SimplePool_Instance<T> {}
    class SimplePool_Instance<T = any> extends
        ಠ_ಠ.clutz.goog.Disposable_Instance {
        /**
         * A generic pool class. Simpler and more efficient than
         * goog.structs.Pool because it doesn't maintain a list of objects that
         * are in use. This class has constant overhead and doesn't create any
         * additional objects as part of the pool management after construction
         * time.
         *
         * IMPORTANT: If the objects being pooled are arrays or maps that can
         * have unlimited number of properties, they need to be cleaned before
         * being returned to the pool.
         *
         * Also note that {@see goog.object.clean} actually allocates an array to clean
         * the object passed to it, so simply using this function would defy the
         * purpose of using the pool.
         * @param initialCount Initial number of objects to populate the free
         * pool at construction time.
         * @param maxCount Maximum number of objects to keep in the free pool.
         */
        constructor(initialCount: number, maxCount: number);
        /**
         * Should be overridden by sub-classes to return an instance of the
         * object type that is expected in the pool.
         */
        createObject(): T;
        /**
         * Disposes of the pool and all objects currently held in the pool.
         */
        disposeInternal(): void;
        /**
         * Should be overrideen to dispose of an object. Default implementation
         * is to remove all of the object's members, which should render it
         * useless. Calls the object's dispose method, if available.
         * @param obj The object to dispose.
         */
        disposeObject(obj: T): void;
        /**
         * Gets an unused object from the the pool, if there is one available,
         * otherwise creates a new one.
         */
        getObject(): T;
        /**
         * Returns an object to the pool so that it can be reused. If the pool
         * is already full, the object is disposed instead.
         * @param obj The object to release.
         */
        releaseObject(obj: T): void;
        /**
         * Sets the {@code createObject} function which is used for creating a
         * new object in the pool.
         * @param createObjectFn Create object function which returns the newly
         * created object.
         */
        setCreateObjectFn(createObjectFn: (...a: any[]) => any): void;
        /**
         * Sets the {@code disposeObject} function which is used for disposing
         * of an object in the pool.
         * @param disposeObjectFn Dispose object function which takes the object
         * to dispose as a parameter.
         */
        setDisposeObjectFn(disposeObjectFn: (...a: any[]) => any): void;
    }
}
declare module 'goog:goog.structs.SimplePool' {
    import alias = ಠ_ಠ.clutz.goog.structs.SimplePool;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.structs {
    /**
     * Creates a set of strings.
     */
    class StringSet extends StringSet_Instance {}
    class StringSet_Instance {
        private noStructuralTyping_: any;
        /**
         * Creates a set of strings.
         * @param opt_elements Elements to add to the set. The non-string items
         * will be converted to strings, so 15 and '15' will mean the same.
         */
        constructor(opt_elements?: any[]);
        /**
         * Returns an iterator that iterates over the elements in the set.
         * NOTE: creating the iterator copies the whole set so use {@link
         * #forEach} when possible.
         * @param opt_keys Ignored for sets.
         */
        __iterator__(opt_keys?: boolean): ಠ_ಠ.clutz.goog.iter.Iterator<any>;
        /**
         * Adds a single element to the set.
         * @param element The element to add. It will be converted to string.
         */
        add(element: any): void;
        /**
         * Adds a the elements of an array to this set.
         * @param arr The array to add the elements of.
         */
        addArray(arr: any[]): void;
        /**
         * Adds a the elements of a set to this set.
         * @param stringSet The set to add the elements of.
         */
        addSet(stringSet: ಠ_ಠ.clutz.goog.structs.StringSet): void;
        /**
         * Removes all elements of the set.
         */
        clear(): void;
        clone(): ಠ_ಠ.clutz.goog.structs.StringSet;
        /**
         * Tells if the set contains the given element.
         * @param element The element to check.
         */
        contains(element: any): boolean;
        /**
         * Tells if the set contains all elements of the array.
         * @param arr The elements to check.
         */
        containsArray(arr: any[]): boolean;
        /**
         * Tells if this set has the same elements as the given set.
         * @param stringSet The other set.
         */
        equals(stringSet: ಠ_ಠ.clutz.goog.structs.StringSet): boolean;
        /**
         * Calls a function for each element in the set.
         * @param f The function to call for every element. It takes the
         * element, undefined (because sets have no notion of keys), and the
         * set.
         * @param opt_obj The object to be used as the value of 'this' within
         * {@code f}.
         */
        forEach(
            f: (a: string, b: undefined,
                c: ಠ_ಠ.clutz.goog.structs.StringSet) => any,
            opt_obj?: GlobalObject|null): void;
        /**
         * Counts the number of elements in the set in linear time.
         * NOTE: getCount is always called at most once per set instance in
         * google3. If this usage pattern won't change, the linear getCount
         * implementation is better, because <li>populating a set and getting
         * the number of elements in it takes the same amount of time as keeping
         * a count_ member up to date and getting its value; <li>if getCount is
         * not called, adding and removing elements have no overhead.
         */
        getCount(): number;
        /**
         * Calculates the difference of two sets.
         * @param stringSet The set to subtract from this set.
         */
        getDifference(stringSet: ಠ_ಠ.clutz.goog.structs.StringSet):
            ಠ_ಠ.clutz.goog.structs.StringSet;
        /**
         * Calculates the intersection of this set with another set.
         * @param stringSet The set to take the intersection with.
         */
        getIntersection(stringSet: ಠ_ಠ.clutz.goog.structs.StringSet):
            ಠ_ಠ.clutz.goog.structs.StringSet;
        /**
         * Calculates the symmetric difference of two sets.
         * @param stringSet The other set.
         */
        getSymmetricDifference(stringSet: ಠ_ಠ.clutz.goog.structs.StringSet):
            ಠ_ಠ.clutz.goog.structs.StringSet;
        /**
         * Calculates the union of this set and another set.
         * @param stringSet The set to take the union with.
         */
        getUnion(stringSet: ಠ_ಠ.clutz.goog.structs.StringSet):
            ಠ_ಠ.clutz.goog.structs.StringSet;
        getValues(): string[];
        /**
         * Tells if this set and the given set are disjoint.
         * @param stringSet The other set.
         */
        isDisjoint(stringSet: ಠ_ಠ.clutz.goog.structs.StringSet): boolean;
        isEmpty(): boolean;
        /**
         * Tells if this set is the subset of the given set.
         * @param stringSet The other set.
         */
        isSubsetOf(stringSet: ಠ_ಠ.clutz.goog.structs.StringSet): boolean;
        /**
         * Tells if this set is the superset of the given set.
         * @param stringSet The other set.
         */
        isSupersetOf(stringSet: ಠ_ಠ.clutz.goog.structs.StringSet): boolean;
        /**
         * Removes a single element from the set.
         * @param element The element to remove.
         */
        remove(element: any): boolean;
        /**
         * Removes all elements of the given array from this set.
         * @param arr The elements to remove.
         */
        removeArray(arr: any[]): void;
        /**
         * Removes all elements of the given set from this set.
         * @param stringSet The set of elements to remove.
         */
        removeSet(stringSet: ಠ_ಠ.clutz.goog.structs.StringSet): void;
    }
}
declare module 'goog:goog.structs.StringSet' {
    import alias = ಠ_ಠ.clutz.goog.structs.StringSet;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.structs {
    /**
     * Generic tree node data structure with arbitrary number of child nodes.
     * It is possible to create a dynamic tree structure by overriding
     * {@link #getParent} and {@link #getChildren} in a subclass. All other
     * getters will automatically work.
     */
    class TreeNode<KEY = any, VALUE = any> extends
        TreeNode_Instance<KEY, VALUE> {
        /**
         * Finds the deepest common ancestor of the given nodes. The concept of
         * ancestor is not strict in this case, it includes the node itself.
         * @param var_args The nodes.
         */
        static findCommonAncestor<KEY = any, VALUE = any>(...var_args: (
            ಠ_ಠ.clutz.goog.structs.TreeNode<KEY, VALUE>|undefined)[]):
            ಠ_ಠ.clutz.goog.structs.TreeNode<KEY, VALUE>|null;
    }
    class TreeNode_Instance<KEY = any, VALUE = any> extends
        ಠ_ಠ.clutz.goog.structs.Node_Instance<KEY, VALUE> {
        /**
         * Generic tree node data structure with arbitrary number of child
         * nodes. It is possible to create a dynamic tree structure by
         * overriding
         * {@link #getParent} and {@link #getChildren} in a subclass. All other
         * getters will automatically work.
         * @param key Key.
         * @param value Value.
         */
        constructor(key: KEY, value: VALUE);
        /**
         * Appends a child node to this node.
         * @param child Orphan child node.
         */
        addChild(child: ಠ_ಠ.clutz.goog.structs.TreeNode<KEY, VALUE>): void;
        /**
         * Inserts a child node at the given index.
         * @param child Orphan child node.
         * @param index The position to insert at.
         */
        addChildAt(
            child: ಠ_ಠ.clutz.goog.structs.TreeNode<KEY, VALUE>,
            index: number): void;
        clone(): ಠ_ಠ.clutz.goog.structs.TreeNode<any, any>;
        /**
         * Tells whether this node is the ancestor of the given node.
         * @param node A node.
         */
        contains(node: ಠ_ಠ.clutz.goog.structs.TreeNode<KEY, VALUE>): boolean;
        deepClone(): ಠ_ಠ.clutz.goog.structs.TreeNode<any, any>;
        /**
         * Traverses all child nodes.
         * @param f Callback function. It takes the node, its index and the
         * array of all child nodes as arguments.
         * @param opt_this The object to be used as the value of {@code this}
         * within {@code f}.
         */
        forEachChild<THIS = any>(
            f: (a: ಠ_ಠ.clutz.goog.structs.TreeNode<KEY, VALUE>, b: number,
                c: ಠ_ಠ.clutz.goog.structs.TreeNode<KEY, VALUE>[]) => any,
            opt_this?: THIS): void;
        /**
         * Traverses all child nodes recursively in preorder.
         * @param f Callback function.  It takes the node as argument.
         * @param opt_this The object to be used as the value of {@code this}
         * within {@code f}.
         */
        forEachDescendant<THIS = any>(
            f: (a: ಠ_ಠ.clutz.goog.structs.TreeNode<KEY, VALUE>) => any,
            opt_this?: THIS): void;
        getAncestors(): ಠ_ಠ.clutz.goog.structs.TreeNode<KEY, VALUE>[];
        /**
         * Gets the child node of this node at the given index.
         * @param index Child index.
         */
        getChildAt(index: number):
            ಠ_ಠ.clutz.goog.structs.TreeNode<KEY, VALUE>|null;
        getChildCount(): number;
        getChildren(): ಠ_ಠ.clutz.goog.structs.TreeNode<KEY, VALUE>[];
        getDepth(): number;
        /**
         * Returns a node whose key matches the given one in the hierarchy
         * rooted at this node. The hierarchy is searched using an in-order
         * traversal.
         * @param key The key to search for.
         */
        getNodeByKey(key: KEY):
            ಠ_ಠ.clutz.goog.structs.TreeNode<KEY, VALUE>|null;
        getParent(): ಠ_ಠ.clutz.goog.structs.TreeNode<KEY, VALUE>|null;
        getRoot(): ಠ_ಠ.clutz.goog.structs.TreeNode<KEY, VALUE>;
        /**
         * Builds a nested array structure from the node keys in this node's
         * subtree to facilitate testing tree operations that change the
         * hierarchy.
         */
        getSubtreeKeys(): KEY[];
        /**
         * Tells if the node is the last child of its parent. This method helps
         * how to connect the tree nodes with lines: L shapes should be used
         * before the last children and |- shapes before the rest. Schematic
         * tree visualization:
         *
         * <pre>
         * Node1
         * |-Node2
         * | L-Node3
         * |   |-Node4
         * |   L-Node5
         * L-Node6
         * </pre>
         */
        isLastChild(): boolean;
        isLeaf(): boolean;
        /**
         * Removes the given child node of this node.
         * @param child The node to remove.
         */
        removeChild(child: ಠ_ಠ.clutz.goog.structs.TreeNode<KEY, VALUE>|
                    null): ಠ_ಠ.clutz.goog.structs.TreeNode<KEY, VALUE>|null;
        /**
         * Removes the child node at the given index.
         * @param index The position to remove from.
         */
        removeChildAt(index: number):
            ಠ_ಠ.clutz.goog.structs.TreeNode<KEY, VALUE>|null;
        /**
         * Removes all child nodes of this node.
         */
        removeChildren(): void;
        /**
         * Replaces the given child node.
         * @param newChild New node to replace {@code oldChild}. It must not
         * have parent node.
         * @param oldChild Existing child node to be replaced.
         */
        replaceChild(
            newChild: ಠ_ಠ.clutz.goog.structs.TreeNode<KEY, VALUE>,
            oldChild: ಠ_ಠ.clutz.goog.structs.TreeNode<KEY, VALUE>):
            ಠ_ಠ.clutz.goog.structs.TreeNode<KEY, VALUE>;
        /**
         * Replaces a child node at the given index.
         * @param newChild Child node to set. It must not have parent node.
         * @param index Valid index of the old child to replace.
         */
        replaceChildAt(
            newChild: ಠ_ಠ.clutz.goog.structs.TreeNode<KEY, VALUE>,
            index: number): ಠ_ಠ.clutz.goog.structs.TreeNode<KEY, VALUE>;
        /**
         * Sets the parent node of this node. The callers must ensure that the
         * parent node and only that has this node among its children.
         * @param parent The parent to set. If null, the node will be detached
         * from the tree.
         */
        setParent(parent: ಠ_ಠ.clutz.goog.structs.TreeNode<KEY, VALUE>|
                  null): void;
        /**
         * Traverses the subtree with the possibility to skip branches. Starts
         * with this node, and visits the descendant nodes depth-first, in
         * preorder.
         * @param f Callback function. It takes the node as argument. The
         * children of this node will be visited if the callback returns true or
         * undefined, and will be skipped if the callback returns false.
         * @param opt_this The object to be used as the value of {@code this}
         * within {@code f}.
         */
        traverse<THIS = any>(
            f: (a: ಠ_ಠ.clutz.goog.structs.TreeNode<KEY, VALUE>) => boolean |
                undefined,
            opt_this?: THIS): void;
    }
}
declare module 'goog:goog.structs.TreeNode' {
    import alias = ಠ_ಠ.clutz.goog.structs.TreeNode;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.structs {
    /**
     * Class for a Trie datastructure.  Trie data structures are made out of
     * trees of Trie classes.
     */
    class Trie<VALUE = any> extends Trie_Instance<VALUE> {}
    class Trie_Instance<VALUE = any> {
        private noStructuralTyping_: any;
        /**
         * Class for a Trie datastructure.  Trie data structures are made out of
         * trees of Trie classes.
         * @param opt_trie Optional goog.structs.Trie or Object to initialize
         * trie with.
         */
        constructor(opt_trie?: ಠ_ಠ.clutz.goog.structs.Trie<any>|null|
                    {[key: string]: VALUE});
        /**
         * Adds the given key/value pair in the trie.  Throw an exception if the
         * key already exists in the trie.  O(L), where L is the length of the
         * key.
         * @param key The key.
         * @param value The value.
         */
        add(key: string, value: VALUE): void;
        /**
         * Completely empties a trie of all keys and values.  ~O(1)
         */
        clear(): void;
        /**
         * Clones a trie and returns a new trie.  O(N), where N is the number of
         * nodes in the trie.
         */
        clone(): ಠ_ಠ.clutz.goog.structs.Trie<VALUE>;
        /**
         * Checks to see if a certain key is in the trie.  O(L), where L is the
         * length of the key.
         * @param key A key that may be in the trie.
         */
        containsKey(key: string): boolean;
        /**
         * Checks to see if a certain prefix is in the trie. O(L), where L is
         * the length of the prefix.
         * @param prefix A prefix that may be in the trie.
         */
        containsPrefix(prefix: string): boolean;
        /**
         * Checks to see if a certain value is in the trie.  Worst case is O(N)
         * where N is the number of nodes in the trie.
         * @param value A value that may be in the trie.
         */
        containsValue(value: VALUE): boolean;
        /**
         * Retrieves a value from the trie given a key.  O(L), where L is the
         * length of the key.
         * @param key The key to retrieve from the trie.
         */
        get(key: string): VALUE|undefined;
        /**
         * Returns the number of key value pairs in the trie.  O(N), where N is
         * the number of nodes in the trie.
         * TODO: This could be optimized by storing a weight (count below) in
         * every node.
         */
        getCount(): number;
        /**
         * Retrieves all values from the trie that correspond to prefixes of the
         * given input key. O(L), where L is the length of the key.
         * @param key The key to use for lookup. The given key as well as all
         * prefixes of the key are retrieved.
         * @param opt_keyStartIndex Optional position in key to start lookup
         * from. Defaults to 0 if not specified.
         */
        getKeyAndPrefixes(key: string, opt_keyStartIndex?: number|null):
            {[key: string]: VALUE};
        /**
         * Gets the keys of the trie.  Not returned in any reliable order.  O(N)
         * where N is the number of nodes in the trie (or prefix subtree).
         * @param opt_prefix Find only keys with this optional prefix.
         */
        getKeys(opt_prefix?: string): string[];
        /**
         * Gets the values of the trie.  Not returned in any reliable order.
         * O(N) where N is the number of nodes in the trie.  Calls
         * getValuesInternal_.
         */
        getValues(): VALUE[];
        /**
         * Returns true if this trie contains no elements.  ~O(1).
         */
        isEmpty(): boolean;
        /**
         * Removes a key from the trie or throws an exception if the key is not
         * in the trie.  O(L), where L is the length of the key.
         * @param key A key that should be removed from the trie.
         */
        remove(key: string): VALUE;
        /**
         * Sets the given key/value pair in the trie.  O(L), where L is the
         * length of the key.
         * @param key The key.
         * @param value The value.
         */
        set(key: string, value: VALUE): void;
        /**
         * Adds multiple key/value pairs from another goog.structs.Trie or
         * Object. O(N) where N is the number of nodes in the trie.
         * @param trie Object containing the data to add.
         */
        setAll(trie: {[key: string]: VALUE}|
               ಠ_ಠ.clutz.goog.structs.Trie<VALUE>): void;
    }
}
declare module 'goog:goog.structs.Trie' {
    import alias = ಠ_ಠ.clutz.goog.structs.Trie;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.style {
    /**
     * Clears the background image of an element in a browser independent
     * manner.
     * @param el The element to clear background image for.
     */
    function clearTransparentBackgroundImage(el: GlobalElement|null): void;
    /**
     * Retrieves the computed background color string for a given element. The
     * string returned is suitable for assigning to another element's
     * background-color, but is not guaranteed to be in any particular string
     * format. Accessing the color in a numeric form may not be possible in all
     * browsers or with all input.
     *
     * If the background color for the element is defined as a hexadecimal
     * value, the resulting string can be parsed by goog.color.parse in all
     * supported browsers.
     *
     * Whether named colors like "red" or "lightblue" get translated into a
     * format which can be parsed is browser dependent. Calling this function on
     * transparent elements will return "transparent" in most browsers or
     * "rgba(0, 0, 0, 0)" in WebKit.
     * @param element The element to get the background color of.
     */
    function getBackgroundColor(element: GlobalElement|null): string;
    /**
     * Gets the computed border widths (on all sides) in pixels
     * @param element The element to get the border widths for.
     */
    function getBorderBox(element: GlobalElement|null): ಠ_ಠ.clutz.goog.math.Box;
    /**
     * Gets the border box size for an element.
     * @param element The element to get the size for.
     */
    function getBorderBoxSize(element: GlobalElement|
                              null): ಠ_ಠ.clutz.goog.math.Size;
    /**
     * Returns a bounding rectangle for a given element in page space.
     * @param element Element to get bounds of. Must not be display none.
     */
    function getBounds(element: GlobalElement|null): ಠ_ಠ.clutz.goog.math.Rect;
    /**
     * Gets the cascaded style value of a node, or null if the value cannot be
     * computed (only Internet Explorer can do this).
     * @param element Element to get style of.
     * @param style Property to get (camel-case).
     */
    function getCascadedStyle(
        element: GlobalElement|null, style: string): string;
    /**
     * Returns clientLeft (width of the left border and, if the directionality
     * is right to left, the vertical scrollbar) and clientTop as a coordinate
     * object.
     * @param el Element to get clientLeft for.
     */
    function getClientLeftTop(el: GlobalElement|
                              null): ಠ_ಠ.clutz.goog.math.Coordinate;
    /**
     * Returns the position of the event or the element's border box relative to
     * the client viewport. If an event is passed, and if this event is a
     * "touch" event, then the position of the first changedTouches will be
     * returned.
     * @param el Element or a mouse / touch event.
     */
    function getClientPosition(el: GlobalElement|null|GlobalEvent|
                               ಠ_ಠ.clutz.goog.events.Event):
        ಠ_ಠ.clutz.goog.math.Coordinate;
    /**
     * Returns the viewport element for a particular document
     * @param opt_node DOM node (Document is OK) to get the viewport element of.
     */
    function getClientViewportElement(opt_node?: Node|null): GlobalElement|null;
    /**
     * Retrieves the computed value of the box-sizing CSS attribute.
     * Browser support: http://caniuse.com/css3-boxsizing.
     * @param element The element whose box-sizing to get.
     */
    function getComputedBoxSizing(element: GlobalElement): string|null;
    /**
     * Retrieves the computed value of the cursor CSS attribute.
     * @param element The element to get the cursor of.
     */
    function getComputedCursor(element: GlobalElement|null): string;
    /**
     * Retrieves the computed value of the overflow-x CSS attribute.
     * @param element The element to get the overflow-x of.
     */
    function getComputedOverflowX(element: GlobalElement|null): string;
    /**
     * Retrieves the computed value of the overflow-y CSS attribute.
     * @param element The element to get the overflow-y of.
     */
    function getComputedOverflowY(element: GlobalElement|null): string;
    /**
     * Retrieves the computed value of the position CSS attribute.
     * @param element The element to get the position of.
     */
    function getComputedPosition(element: GlobalElement|null): string;
    /**
     * Retrieves a computed style value of a node. It returns empty string if
     * the value cannot be computed (which will be the case in Internet
     * Explorer) or "none" if the property requested is an SVG one and it has
     * not been explicitly set (firefox and webkit).
     * @param element Element to get style of.
     * @param property Property to get (camel-case).
     */
    function getComputedStyle(
        element: GlobalElement|null, property: string): string;
    /**
     * Retrieves the computed value of the text-align CSS attribute.
     * @param element The element to get the text-align of.
     */
    function getComputedTextAlign(element: GlobalElement|null): string;
    /**
     * Retrieves the computed value of the CSS transform attribute.
     * @param element The element to get the transform of.
     */
    function getComputedTransform(element: GlobalElement|null): string;
    /**
     * Retrieves the computed value of the z-index CSS attribute.
     * @param element The element to get the z-index of.
     */
    function getComputedZIndex(element: GlobalElement|null): string|number;
    /**
     * Calculate the scroll position of {@code container} with the minimum
     * amount so that the content and the borders of the given {@code element}
     * become visible. If the element is bigger than the container, its top left
     * corner will be aligned as close to the container's top left corner as
     * possible.
     * @param element The element to make visible.
     * @param opt_container The container to scroll. If not set, then the
     * document scroll element will be used.
     * @param opt_center Whether to center the element in the container.
     * Defaults to false.
     */
    function getContainerOffsetToScrollInto(
        element: GlobalElement|null, opt_container?: GlobalElement|null,
        opt_center?: boolean): ಠ_ಠ.clutz.goog.math.Coordinate;
    /**
     * Gets the content box size for an element.  This is potentially expensive
     * in all browsers.
     * @param element The element to get the size for.
     */
    function getContentBoxSize(element: GlobalElement|
                               null): ಠ_ಠ.clutz.goog.math.Size;
    /**
     * Returns the x,y translation component of any CSS transforms applied to
     * the element, in pixels.
     * @param element The element to get the translation of.
     */
    function getCssTranslation(element: GlobalElement):
        ಠ_ಠ.clutz.goog.math.Coordinate;
    /**
     * Gets value of explicitly-set float CSS property on an element.
     * @param el The element to get float property of.
     */
    function getFloat(el: GlobalElement|null): string;
    /**
     * Returns the font face applied to a given node. Opera and IE should return
     * the font actually displayed. Firefox returns the author's most-preferred
     * font (whether the browser is capable of displaying it or not.)
     * @param el The element whose font family is returned.
     */
    function getFontFamily(el: GlobalElement|null): string;
    /**
     * Returns the font size, in pixels, of text in an element.
     * @param el The element whose font size is returned.
     */
    function getFontSize(el: GlobalElement|null): number;
    /**
     * Returns a Coordinate object relative to the top-left of an HTML document
     * in an ancestor frame of this element. Used for measuring the position of
     * an element inside a frame relative to a containing frame.
     * @param el Element to get the page offset for.
     * @param relativeWin The window to measure relative to. If relativeWin is
     * not in the ancestor frame chain of the element, we measure relative to
     * the top-most window.
     */
    function getFramedPageOffset(
        el: GlobalElement|null,
        relativeWin: Window|null): ಠ_ಠ.clutz.goog.math.Coordinate;
    /**
     * Returns the units used for a CSS length measurement.
     * @param value A CSS length quantity.
     */
    function getLengthUnits(value: string): string|null;
    /**
     * Gets the computed margins (on all sides) in pixels.
     * @param element The element to get the margins for.
     */
    function getMarginBox(element: GlobalElement|null): ಠ_ಠ.clutz.goog.math.Box;
    /**
     * Returns the first parent that could affect the position of a given
     * element.
     * @param element The element to get the offset parent for.
     */
    function getOffsetParent(element: GlobalElement|null): GlobalElement|null;
    /**
     * Gets the opacity of a node (x-browser). This gets the inline style
     * opacity of the node, and does not take into account the cascaded or the
     * computed style for this node.
     * @param el Element whose opacity has to be found.
     */
    function getOpacity(el: GlobalElement|null): number|string;
    /**
     * Gets the computed paddings (on all sides) in pixels.
     * @param element The element to get the padding for.
     */
    function getPaddingBox(element: GlobalElement|
                           null): ಠ_ಠ.clutz.goog.math.Box;
    /**
     * Returns a Coordinate object relative to the top-left of the HTML
     * document. Implemented as a single function to save having to do two
     * recursive loops in opera and safari just to get both coordinates.  If you
     * just want one value do use goog.style.getPageOffsetLeft() and
     * goog.style.getPageOffsetTop(), but note if you call both those methods
     * the tree will be analysed twice.
     * @param el Element to get the page offset for.
     */
    function getPageOffset(el: GlobalElement|
                           null): ಠ_ಠ.clutz.goog.math.Coordinate;
    /**
     * Returns the left coordinate of an element relative to the HTML document
     * @param el Elements.
     */
    function getPageOffsetLeft(el: GlobalElement|null): number;
    /**
     * Returns the top coordinate of an element relative to the HTML document
     * @param el Elements.
     */
    function getPageOffsetTop(el: GlobalElement|null): number;
    /**
     * Gets the offsetLeft and offsetTop properties of an element and returns
     * them in a Coordinate object
     * @param element Element.
     */
    function getPosition(element: GlobalElement|
                         null): ಠ_ಠ.clutz.goog.math.Coordinate;
    /**
     * Returns the position of an element relative to another element in the
     * document.  A relative to B
     * @param a Element or mouse event whose position we're calculating.
     * @param b Element or mouse event position is relative to.
     */
    function getRelativePosition(
        a: GlobalElement|null|GlobalEvent|ಠ_ಠ.clutz.goog.events.Event,
        b: GlobalElement|null|GlobalEvent|
        ಠ_ಠ.clutz.goog.events.Event): ಠ_ಠ.clutz.goog.math.Coordinate;
    /**
     * Returns the scroll bar width (represents the width of both horizontal
     * and vertical scroll).
     * @param opt_className An optional class name (or names) to apply to the
     * invisible div created to measure the scrollbar. This is necessary if some
     * scrollbars are styled differently than others.
     */
    function getScrollbarWidth(opt_className?: string): number;
    /**
     * Gets the height and width of an element, even if its display is none.
     *
     * Specifically, this returns the height and width of the border box,
     * irrespective of the box model in effect.
     *
     * Note that this function does not take CSS transforms into account. Please
     * see
     * {@code goog.style.getTransformedSize}.
     * @param element Element to get size of.
     */
    function getSize(element: GlobalElement|null): ಠ_ಠ.clutz.goog.math.Size;
    /**
     * Retrieves an explicitly-set style value of a node. This returns '' if
     * there isn't a style attribute on the element or if this style property
     * has not been explicitly set in script.
     * @param element Element to get style of.
     * @param property Property to get, css-style (if you have a camel-case
     * property, use element.style[style]).
     */
    function getStyle(element: GlobalElement|null, property: string): string;
    /**
     * Gets the height and width of an element, post transform, even if its
     * display is none.
     *
     * This is like {@code goog.style.getSize}, except:
     * <ol>
     * <li>Takes webkitTransforms such as rotate and scale into account.
     * <li>Will return null if {@code element} doesn't respond to
     * {@code getBoundingClientRect}.
     * <li>Currently doesn't make sense on non-WebKit browsers which don't
     * support webkitTransforms.
     * </ol>
     * @param element Element to get size of.
     */
    function getTransformedSize(element: GlobalElement):
        ಠ_ಠ.clutz.goog.math.Size|null;
    /**
     * Calculates the viewport coordinates relative to the page/document
     * containing the node. The viewport may be the browser viewport for
     * non-iframe document, or the iframe container for iframe'd document.
     * @param doc The document to use as the reference point.
     */
    function getViewportPageOffset(doc: Document):
        ಠ_ಠ.clutz.goog.math.Coordinate;
    /**
     * Calculates and returns the visible rectangle for a given element. Returns
     * a box describing the visible portion of the nearest scrollable offset
     * ancestor. Coordinates are given relative to the document.
     * @param element Element to get the visible rect for.
     */
    function getVisibleRectForElement(element: GlobalElement|
                                      null): ಠ_ಠ.clutz.goog.math.Box|null;
    /**
     * Installs the style sheet into the window that contains opt_node.  If
     * opt_node is null, the main window is used.
     * @param safeStyleSheet The style sheet to install.
     * @param opt_node Node whose parent document should have the styles
     * installed.
     */
    function installSafeStyleSheet(
        safeStyleSheet: ಠ_ಠ.clutz.goog.html.SafeStyleSheet,
        opt_node?: Node|null): HTMLStyleElement|StyleSheet;
    /**
     * Test whether the given element has been shown or hidden via a call to
     * {@link #setElementShown}.
     *
     * Note this is strictly a companion method for a call
     * to {@link #setElementShown} and the same caveats apply; in particular,
     * this method does not guarantee that the return value will be consistent
     * with whether or not the element is actually visible.
     * @param el The element to test.
     */
    function isElementShown(el: GlobalElement|null): boolean;
    /**
     * Returns true if the element is using right to left (rtl) direction.
     * @param el The element to test.
     */
    function isRightToLeft(el: GlobalElement|null): boolean;
    /**
     * Returns true if the element is set to be unselectable, false otherwise.
     * Note that on some platforms (e.g. Mozilla), even if an element isn't set
     * to be unselectable, it will behave as such if any of its ancestors is
     * unselectable.
     * @param el Element to check.
     */
    function isUnselectable(el: GlobalElement|null): boolean;
    /**
     * Parses a style attribute value.  Converts CSS property names to camel
     * case.
     * @param value The style attribute value.
     */
    function parseStyleAttribute(value: string): GlobalObject;
    /**
     * Changes the scroll position of {@code container} with the minimum amount
     * so that the content and the borders of the given {@code element} become
     * visible. If the element is bigger than the container, its top left corner
     * will be aligned as close to the container's top left corner as possible.
     * @param element The element to make visible.
     * @param opt_container The container to scroll. If not set, then the
     * document scroll element will be used.
     * @param opt_center Whether to center the element in the container.
     * Defaults to false.
     */
    function scrollIntoContainerView(
        element: GlobalElement|null, opt_container?: GlobalElement|null,
        opt_center?: boolean): void;
    /**
     * Sets the border box size of an element. This is potentially expensive in
     * IE if the document is CSS1Compat mode
     * @param element The element to set the size on.
     * @param size The new size.
     */
    function setBorderBoxSize(
        element: GlobalElement|null, size: ಠ_ಠ.clutz.goog.math.Size|null): void;
    /**
     * Sets the content box size of an element. This is potentially expensive in
     * IE if the document is BackCompat mode.
     * @param element The element to set the size on.
     * @param size The new size.
     */
    function setContentBoxSize(
        element: GlobalElement|null, size: ಠ_ಠ.clutz.goog.math.Size|null): void;
    /**
     * Shows or hides an element from the page. Hiding the element is done by
     * setting the display property to "none", removing the element from the
     * rendering hierarchy so it takes up no space. To show the element, the
     * default inherited display property is restored (defined either in
     * stylesheets or by the browser's default style rules).
     *
     * Caveat 1: if the inherited display property for the element is set to
     * "none" by the stylesheets, that is the property that will be restored by
     * a call to setElementShown(), effectively toggling the display between
     * "none" and "none".
     *
     * Caveat 2: if the element display style is set inline (by setting either
     * element.style.display or a style attribute in the HTML), a call to
     * setElementShown will clear that setting and defer to the inherited style
     * in the stylesheet.
     * @param el Element to show or hide.
     * @param isShown True to render the element in its default style, false to
     * disable rendering the element.
     */
    function setElementShown(el: GlobalElement|null, isShown: any): void;
    /**
     * Sets CSS float property on an element.
     * @param el The element to set float property on.
     * @param value The value of float CSS property to set on this element.
     */
    function setFloat(el: GlobalElement|null, value: string): void;
    /**
     * Set the height of an element.  Sets the element's style property.
     * @param element Element to set the height of.
     * @param height The height value to set.  If a number, 'px' will be
     * appended, otherwise the value will be applied directly.
     */
    function setHeight(
        element: GlobalElement|null, height: string|number): void;
    /**
     * Sets 'display: inline-block' for an element (cross-browser).
     * @param el Element to which the inline-block display style is to be
     * applied.
     */
    function setInlineBlock(el: GlobalElement|null): void;
    /**
     * Sets the opacity of a node (x-browser).
     * @param el Elements whose opacity has to be set.
     * @param alpha Opacity between 0 and 1 or an empty string {@code ''} to
     * clear the opacity.
     */
    function setOpacity(el: GlobalElement|null, alpha: number|string): void;
    /**
     * Moves an element to the given coordinates relative to the client
     * viewport.
     * @param el Absolutely positioned element to set page offset for. It must
     * be in the document.
     * @param x Left position of the element's margin box or a coordinate
     * object.
     * @param opt_y Top position of the element's margin box.
     */
    function setPageOffset(
        el: GlobalElement|null, x: number|ಠ_ಠ.clutz.goog.math.Coordinate|null,
        opt_y?: number): void;
    /**
     * Sets the top/left values of an element.  If no unit is specified in the
     * argument then it will add px. The second argument is required if the
     * first argument is a string or number and is ignored if the first argument
     * is a coordinate.
     * @param el Element to move.
     * @param arg1 Left position or coordinate.
     * @param opt_arg2 Top position.
     */
    function setPosition(
        el: GlobalElement|null,
        arg1: string|number|ಠ_ಠ.clutz.goog.math.Coordinate|null,
        opt_arg2?: string|number): void;
    /**
     * Sets 'white-space: pre-wrap' for a node (x-browser).
     *
     * There are as many ways of specifying pre-wrap as there are browsers.
     *
     * CSS3/IE8: white-space: pre-wrap;
     * Mozilla:  white-space: -moz-pre-wrap;
     * Opera:    white-space: -o-pre-wrap;
     * IE6/7:    white-space: pre; word-wrap: break-word;
     * @param el Element to enable pre-wrap for.
     */
    function setPreWrap(el: GlobalElement|null): void;
    /**
     * Sets the content of a style element.  The style element can be any valid
     * style element.  This element will have its content completely replaced by
     * the safeStyleSheet.
     * @param element A stylesheet element as returned by installStyles.
     * @param safeStyleSheet The new content of the stylesheet.
     */
    function setSafeStyleSheet(
        element: GlobalElement|StyleSheet,
        safeStyleSheet: ಠ_ಠ.clutz.goog.html.SafeStyleSheet): void;
    /**
     * Sets the width/height values of an element.  If an argument is numeric,
     * or a goog.math.Size is passed, it is assumed to be pixels and will add
     * 'px' after converting it to an integer in string form. (This just sets
     * the CSS width and height properties so it might set content-box or
     * border-box size depending on the box model the browser is using.)
     * @param element Element to set the size of.
     * @param w Width of the element, or a size object.
     * @param opt_h Height of the element. Required if w is not a size object.
     */
    function setSize(
        element: GlobalElement|null,
        w: string|number|ಠ_ಠ.clutz.goog.math.Size|null,
        opt_h?: string|number): void;
    /**
     * Sets a style value on an element.
     *
     * This function is not indended to patch issues in the browser's style
     * handling, but to allow easy programmatic access to setting dash-separated
     * style properties.  An example is setting a batch of properties from a
     * data object without overwriting old styles.  When possible, use native
     * APIs: elem.style.propertyKey = 'value' or (if obliterating old styles is
     * fine) elem.style.cssText = 'property1: value1; property2: value2'.
     * @param element The element to change.
     * @param style If a string, a style name. If an object, a hash of style
     * names to style values.
     * @param opt_value If style was a string, then this should be the value.
     */
    function setStyle(
        element: GlobalElement|null, style: string|GlobalObject|null,
        opt_value?: string|number|boolean): void;
    /**
     * Sets the background of an element to a transparent image in a browser-
     * independent manner.
     *
     * This function does not support repeating backgrounds or alternate
     * background positions to match the behavior of Internet Explorer. It also
     * does not support sizingMethods other than crop since they cannot be
     * replicated in browsers other than Internet Explorer.
     * @param el The element to set background on.
     * @param src The image source URL.
     */
    function setTransparentBackgroundImage(
        el: GlobalElement|null, src: string): void;
    /**
     * Makes the element and its descendants selectable or unselectable.  Note
     * that on some platforms (e.g. Mozilla), even if an element isn't set to
     * be unselectable, it will behave as such if any of its ancestors is
     * unselectable.
     * @param el The element to alter.
     * @param unselectable Whether the element and its descendants should be
     * made unselectable.
     * @param opt_noRecurse Whether to only alter the element's own selectable
     * state, and leave its descendants alone; defaults to false.
     */
    function setUnselectable(
        el: GlobalElement|null, unselectable: boolean,
        opt_noRecurse?: boolean): void;
    /**
     * Set the width of an element.  Sets the element's style property.
     * @param element Element to set the width of.
     * @param width The width value to set.  If a number, 'px' will be appended,
     * otherwise the value will be applied directly.
     */
    function setWidth(element: GlobalElement|null, width: string|number): void;
    /**
     * Shows or hides an element from the page. Hiding the element is done by
     * setting the display property to "none", removing the element from the
     * rendering hierarchy so it takes up no space. To show the element, the
     * default inherited display property is restored (defined either in
     * stylesheets or by the browser's default style rules.)
     *
     * Caveat 1: if the inherited display property for the element is set to
     * "none" by the stylesheets, that is the property that will be restored by
     * a call to showElement(), effectively toggling the display between "none"
     * and "none".
     *
     * Caveat 2: if the element display style is set inline (by setting either
     * element.style.display or a style attribute in the HTML), a call to
     * showElement will clear that setting and defer to the inherited style in
     * the stylesheet.
     * @param el Element to show or hide.
     * @param display True to render the element in its default style, false to
     * disable rendering the element.
     */
    function showElement(el: GlobalElement|null, display: any): void;
    /**
     * Converts a CSS selector in the form style-property to styleProperty.
     * @param selector CSS Selector.
     */
    function toCamelCase(selector: any): string;
    /**
     * Converts a CSS selector in the form styleProperty to style-property.
     * @param selector Camel case selector.
     */
    function toSelectorCase(selector: string): string;
    /**
     * Reverse of parseStyleAttribute; that is, takes a style object and returns
     * the corresponding attribute value.  Converts camel case property names to
     * proper CSS selector names.
     * @param obj Map of CSS properties to values.
     */
    function toStyleAttribute(obj: GlobalObject|null): string;
    /**
     * Translates the specified rect relative to origBase page, for newBase
     * page. If origBase and newBase are the same, this function does nothing.
     * @param rect The source rectangle relative to origBase page, and it will
     * have the translated result.
     * @param origBase The DomHelper for the input rectangle.
     * @param newBase The DomHelper for the resultant coordinate.  This must be
     * a DOM for an ancestor frame of origBase or the same as origBase.
     */
    function translateRectForAnotherFrame(
        rect: ಠ_ಠ.clutz.goog.math.Rect|null,
        origBase: ಠ_ಠ.clutz.goog.dom.DomHelper|null,
        newBase: ಠ_ಠ.clutz.goog.dom.DomHelper|null): void;
    /**
     * Removes the styles added by {@link #installStyles}.
     * @param styleSheet The value returned by {@link #installStyles}.
     */
    function uninstallStyles(styleSheet: GlobalElement|null|StyleSheet): void;
}
declare module 'goog:goog.style' {
    import alias = ಠ_ಠ.clutz.goog.style;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.style.bidi {
    /**
     * Returns the "offsetStart" of an element, analogous to offsetLeft but
     * normalized for right-to-left environments and various browser
     * inconsistencies. This value returned can always be passed to
     * setScrollOffset to scroll to an element's left edge in a left-to-right
     * offsetParent or right edge in a right-to-left offsetParent.
     *
     * For example, here offsetStart is 10px in an LTR environment and 5px in
     * RTL:
     *
     * <pre>
     * |          xxxxxxxxxx     |
     * ^^^^^^^^^^   ^^^^   ^^^^^
     * 10px      elem    5px
     * </pre>
     *
     * If an element is positioned before the start of its offsetParent, the
     * startOffset may be negative.  This can be used with setScrollOffset to
     * reliably scroll to an element:
     *
     * <pre>
     * var scrollOffset = goog.style.bidi.getOffsetStart(element);
     * goog.style.bidi.setScrollOffset(element.offsetParent, scrollOffset);
     * </pre>
     * @param element The element for which we need to determine the offsetStart
     * position.
     */
    function getOffsetStart(element: GlobalElement|null): number;
    /**
     * Returns the normalized scrollLeft position for a scrolled element.
     * @param element The scrolled element.
     */
    function getScrollLeft(element: GlobalElement|null): number;
    /**
     * Sets the element's left style attribute in LTR or right style attribute
     * in RTL.  Also clears the left attribute in RTL and the right attribute in
     * LTR.
     * @param elem The element to position.
     * @param left The left position in LTR; will be set as right in RTL.
     * @param top The top position.  If null only the left/right is set.
     * @param isRtl Whether we are in RTL mode.
     */
    function setPosition(
        elem: GlobalElement|null, left: number, top: number|null,
        isRtl: boolean): void;
    /**
     * Sets the element's scrollLeft attribute so it is correctly scrolled by
     * offsetStart pixels.  This takes into account whether the element is RTL
     * and the nuances of different browsers.  To scroll to the "beginning" of
     * an element use getOffsetStart to obtain the element's offsetStart value
     * and then pass the value to setScrollOffset.
     * @param element The element to set scrollLeft on.
     * @param offsetStart The number of pixels to scroll the element. If this
     * value is < 0, 0 is used.
     */
    function setScrollOffset(
        element: GlobalElement|null, offsetStart: number): void;
}
declare module 'goog:goog.style.bidi' {
    import alias = ಠ_ಠ.clutz.goog.style.bidi;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.style.cursor {
    /**
     * The file name for the close-hand (dragging) cursor.
     */
    var CLOSEDHAND_FILE: string;
    /**
     * The file name for the open-hand (draggable) cursor.
     */
    var OPENHAND_FILE: string;
    /**
     * Create the style for the draggable cursor based on browser and OS.
     * The value can be extended to be '!important' if needed.
     * @param absoluteDotCurFilePath The absolute base path of 'openhand.cur'
     * file to be used if the browser supports it.
     * @param opt_obsolete Just for compiler backward compatibility.
     */
    function getDraggableCursorStyle(
        absoluteDotCurFilePath: string, opt_obsolete?: boolean): string;
    /**
     * Create the style for the dragging cursor based on browser and OS.
     * The value can be extended to be '!important' if needed.
     * @param absoluteDotCurFilePath The absolute base path of 'closedhand.cur'
     * file to be used if the browser supports it.
     * @param opt_obsolete Just for compiler backward compatibility.
     */
    function getDraggingCursorStyle(
        absoluteDotCurFilePath: string, opt_obsolete?: boolean): string;
}
declare module 'goog:goog.style.cursor' {
    import alias = ಠ_ಠ.clutz.goog.style.cursor;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.style.transform {
    /**
     * Returns the rotation CSS transform applied to the element.
     * @param element The element to get the rotation of.
     */
    function getRotation(element: GlobalElement): number;
    /**
     * Returns the scale of the x, y and z dimensions of CSS transforms applied
     * to the element.
     * @param element The element to get the scale of.
     */
    function getScale(element: GlobalElement): ಠ_ಠ.clutz.goog.math.Coordinate3;
    /**
     * Returns the x,y translation component of any CSS transforms applied to
     * the element, in pixels.
     * @param element The element to get the translation of.
     */
    function getTranslation(element: GlobalElement):
        ಠ_ಠ.clutz.goog.math.Coordinate;
    /**
     * Whether CSS3 transform translate3d() is supported. If the current browser
     * supports this transform strategy.
     */
    function is3dSupported(): boolean;
    /**
     * Whether CSS3 transform translate() is supported. IE 9 supports 2D
     * transforms and IE 10 supports 3D transforms. IE 8 supports neither.
     */
    function isSupported(): boolean;
    /**
     * Rotates an element using the CSS3 transform property.
     * NOTE: This replaces all other transforms already defined on the element.
     * @param element The element to rotate.
     * @param degrees The number of degrees to rotate by.
     */
    function setRotation(element: GlobalElement, degrees: number): boolean;
    /**
     * Scales an element using the CSS3 transform property.
     * NOTE: This replaces all other transforms already defined on the element.
     * @param element The element to scale.
     * @param x The horizontal scale.
     * @param y The vertical scale.
     * @param z The depth scale.
     */
    function setScale(
        element: GlobalElement, x: number, y: number, z: number): boolean;
    /**
     * Translates an element's position using the CSS3 transform property.
     * NOTE: This replaces all other transforms already defined on the element.
     * @param element The element to translate.
     * @param x The horizontal translation.
     * @param y The vertical translation.
     */
    function setTranslation(
        element: GlobalElement|null, x: number, y: number): boolean;
}
declare module 'goog:goog.style.transform' {
    import alias = ಠ_ಠ.clutz.goog.style.transform;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.style.transition {
    function isSupported(): boolean;
    /**
     * Removes any programmatically-added CSS3 transition in the given element.
     * @param element The element to remove transition from.
     */
    function removeAll(element: GlobalElement|null): void;
    /**
     * Sets the element CSS3 transition to properties.
     * @param element The element to set transition on.
     * @param properties A single CSS3 transition property or array of
     * properties.
     */
    function set(
        element: GlobalElement|null,
        properties:
            {delay: number, duration: number, property: string, timing: string}|
        string|
        ({delay: number, duration: number, property: string, timing: string} |
         string)[]|null): void;
}
declare module 'goog:goog.style.transition' {
    import alias = ಠ_ಠ.clutz.goog.style.transition;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.style.transition {
    /**
     * A typedef to represent a CSS3 transition property. Duration and delay
     * are both in seconds. Timing is CSS3 timing function string, such as
     * 'easein', 'linear'.
     *
     * Alternatively, specifying string in the form of '[property] [duration]
     * [timing] [delay]' as specified in CSS3 transition is fine too.
     */
    type Css3Property =
        {delay: number, duration: number, property: string, timing: string}|
        string;
}
declare module 'goog:goog.style.transition.Css3Property' {
    import alias = ಠ_ಠ.clutz.goog.style.transition.Css3Property;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.text {
    /**
     * Generates random strings of "lorem ipsum" text, based on the word
     * distribution of a sample text, using the words in a dictionary.
     */
    class LoremIpsum extends LoremIpsum_Instance {
        /**
         * Find the number in the list of values that is closest to the target.
         * @param values The values.
         * @param target The target value.
         */
        static chooseClosest(values: null|any[], target: number): number;
    }
    class LoremIpsum_Instance {
        private noStructuralTyping_: any;
        /**
         * Generates a single lorem ipsum paragraph, of random length.
         * @param opt_startWithLorem Whether to start the sentence with the
         * standard "Lorem ipsum..." first sentence.
         */
        generateParagraph(opt_startWithLorem?: boolean): string;
        /**
         * Generates a single sentence, of random length.
         * @param opt_startWithLorem Whether to start the setnence with the
         * standard "Lorem ipsum..." first sentence.
         */
        generateSentence(opt_startWithLorem?: boolean): string;
        /**
         * Pairs of word-lengths that can appear at the beginning of sentences.
         */
        starts_: any[]|null;
    }
}
declare module 'goog:goog.text.LoremIpsum' {
    import alias = ಠ_ಠ.clutz.goog.text.LoremIpsum;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.tweak {
    /**
     * Entries used to represent the collapsible namespace links. These entries
     * are never registered with the TweakRegistry, but are contained within the
     * collection of entries within TweakPanels.
     */
    class NamespaceEntry_ extends NamespaceEntry__Instance {
        /**
         * Prefix for the IDs of namespace entries used to ensure that they do
         * not conflict with regular entries.
         */
        static ID_PREFIX: string;
    }
    class NamespaceEntry__Instance extends
        ಠ_ಠ.clutz.goog.tweak.BaseEntry_Instance {
        /**
         * Entries within this namespace.
         */
        entries: ಠ_ಠ.clutz.goog.tweak.BaseEntry[];
        label: string;
    }
    /**
     * Creates and registers a group of BooleanSettings that are all set by a
     * single query parameter. A call to goog.tweak.endBooleanGroup() must be
     * used to close this group. Only goog.tweak.registerBoolean() calls are
     * allowed with the beginBooleanGroup()/endBooleanGroup().
     * @param id The unique ID for the setting.
     * @param description A description of what the setting does.
     * @param opt_configParams Extra configuration parameters.
     */
    function beginBooleanGroup(
        id: string, description: string, opt_configParams?: GlobalObject): void;
    /**
     * Stops adding boolean entries to the active boolean group.
     */
    function endBooleanGroup(): void;
    /**
     * Returns the value of the boolean setting with the given ID.
     * @param id The unique string that identifies this entry.
     */
    function getBoolean(id: string): boolean;
    /**
     * Returns the value of the numeric setting with the given ID.
     * @param id The unique string that identifies this entry.
     */
    function getNumber(id: string): number;
    /**
     * Returns/creates the registry singleton.
     */
    function getRegistry(): ಠ_ಠ.clutz.goog.tweak.Registry;
    /**
     * Returns the value of the string setting with the given ID,
     * @param id The unique string that identifies this entry.
     */
    function getString(id: string): string;
    /**
     * Sets a default value to use for the given tweak instead of the one passed
     * to the register* function. This function must be called before the tweak
     * is registered.
     * @param id The unique string that identifies the entry.
     * @param value The new default value for the tweak.
     */
    function overrideDefaultValue(
        id: string, value: string|number|boolean): void;
    /**
     * Creates and registers a BooleanSetting.
     * @param id The unique ID for the setting.
     * @param description A description of what the setting does.
     * @param opt_defaultValue The default value for the setting.
     * @param opt_configParams Extra configuration parameters.
     */
    function registerBoolean(
        id: string, description: string, opt_defaultValue?: boolean,
        opt_configParams?: GlobalObject): void;
    /**
     * Creates and registers a ButtonAction.
     * @param id The unique ID for the setting.
     * @param description A description of what the action does.
     * @param callback Function to call when the button is clicked.
     * @param opt_label The button text (instead of the ID).
     */
    function registerButton(
        id: string, description: string, callback: (...a: any[]) => any,
        opt_label?: string): void;
    /**
     * Creates and registers a NumericSetting.
     * @param id The unique ID for the setting.
     * @param description A description of what the setting does.
     * @param opt_defaultValue The default value for the setting.
     * @param opt_configParams Extra configuration parameters.
     */
    function registerNumber(
        id: string, description: string, opt_defaultValue?: number,
        opt_configParams?: GlobalObject): void;
    /**
     * Creates and registers a StringSetting.
     * @param id The unique ID for the setting.
     * @param description A description of what the setting does.
     * @param opt_defaultValue The default value for the setting.
     * @param opt_configParams Extra configuration parameters.
     */
    function registerString(
        id: string, description: string, opt_defaultValue?: string,
        opt_configParams?: GlobalObject): void;
}
declare module 'goog:goog.tweak' {
    import alias = ಠ_ಠ.clutz.goog.tweak;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.tweak {
    /**
     * Base class for all Registry entries.
     */
    class BaseEntry extends BaseEntry_Instance {}
    class BaseEntry_Instance {
        private noStructuralTyping_: any;
        /**
         * Base class for all Registry entries.
         * @param id The ID for the entry. Must contain only letters, numbers,
         * underscores and periods.
         * @param description A description of what the entry does.
         */
        constructor(id: string, description: string);
        /**
         * A description of what this entry does.
         */
        description: string;
        /**
         * A descriptive label for the entry.
         */
        label: string;
        /**
         * Adds a callback that should be called when the setting has changed
         * (or when an action has been clicked).
         * @param callback The callback to add.
         */
        addCallback(callback: (...a: any[]) => any): void;
        /**
         * Calls all registered callbacks.
         */
        fireCallbacks(): void;
        getId(): string;
        /**
         * Returns whether a restart is required for changes to the setting to
         * take effect.
         */
        isRestartRequired(): boolean;
        /**
         * The logger for this class.
         */
        logger: ಠ_ಠ.clutz.goog.debug.Logger|null;
        /**
         * Removes a callback that was added by addCallback.
         * @param callback The callback to add.
         */
        removeCallback(callback: (...a: any[]) => any): void;
        /**
         * Sets whether a restart is required for changes to the setting to take
         * effect.
         * @param value The new value.
         */
        setRestartRequired(value: boolean): void;
    }
}
declare module 'goog:goog.tweak.BaseEntry' {
    import alias = ಠ_ಠ.clutz.goog.tweak.BaseEntry;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.tweak {
    /**
     * Base class for all settings that wrap primitive values.
     */
    class BasePrimitiveSetting extends BasePrimitiveSetting_Instance {}
    class BasePrimitiveSetting_Instance extends
        ಠ_ಠ.clutz.goog.tweak.BaseSetting_Instance {
        /**
         * Base class for all settings that wrap primitive values.
         * @param id The ID for the setting.
         * @param description A description of what the setting does.
         * @param defaultValue The default value for this setting.
         */
        constructor(id: string, description: string, defaultValue: any);
        /**
         * Returns the query param encoded representation of the setting's
         * value.
         */
        encodeNewValue(): string;
        /**
         * Returns the default value for this setting.
         */
        getDefaultValue(): any;
        /**
         * Returns the value of the setting to use once "Apply Tweaks" is
         * clicked.
         */
        getNewValue(): any;
        getNewValueEncoded(): string|null;
        /**
         * If the setting has the restartRequired option, then returns its
         * initial value. Otherwise, returns its current value.
         */
        getValue(): any;
        /**
         * The logger for this class.
         */
        logger: ಠ_ಠ.clutz.goog.debug.Logger|null;
        /**
         * Sets the default value for the tweak.
         * @param value The new value.
         */
        setDefaultValue(value: any): void;
        /**
         * Sets the value of the setting. If the setting has the restartRequired
         * option, then the value will not be changed until the "Apply Tweaks"
         * button is clicked. If it does not have the option, the value will be
         * update immediately and all registered callbacks will be called.
         * @param value The value.
         */
        setValue(value: any): void;
    }
}
declare module 'goog:goog.tweak.BasePrimitiveSetting' {
    import alias = ಠ_ಠ.clutz.goog.tweak.BasePrimitiveSetting;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.tweak {
    /**
     * Base class for all tweak entries that are settings. Settings are entries
     * that are associated with a query parameter.
     */
    class BaseSetting extends BaseSetting_Instance {}
    class BaseSetting_Instance extends ಠ_ಠ.clutz.goog.tweak.BaseEntry_Instance {
        /**
         * Base class for all tweak entries that are settings. Settings are
         * entries that are associated with a query parameter.
         * @param id The ID for the setting.
         * @param description A description of what the setting does.
         */
        constructor(id: string, description: string);
        /**
         * The value of this setting's query parameter.
         */
        initialQueryParamValue?: string;
        /**
         * Asserts that this tweak has not been initialized yet.
         * @param funcName Function name to use in the assertion message.
         */
        assertNotInitialized(funcName: string): void;
        /**
         * Applies the default value or query param value if this is the first
         * time that the function has been called.
         */
        ensureInitialized(): void;
        /**
         * Returns the value to be used in the query parameter for this tweak.
         */
        getNewValueEncoded(): string|null;
        /**
         * Returns the name of the query parameter used for this setting.
         */
        getParamName(): string|null;
        /**
         * Sets the value of the entry based on the value of the query
         * parameter. Once this is called, configuration settings (associated
         * query parameter, token, etc) may not be changed.
         * @param value The part of the query param for this setting after the
         * '='. Null if it is not present.
         */
        initialize(a: string|null): any;
        /**
         * Returns whether the setting is currently being initialized.
         */
        isInitializing(): boolean;
        /**
         * The logger for this class.
         */
        logger: ಠ_ಠ.clutz.goog.debug.Logger|null;
        /**
         * Sets the initial query parameter value for this setting. May not be
         * called after the setting has been initialized.
         * @param value The initial query parameter value for this setting.
         */
        setInitialQueryParamValue(value: string): void;
        /**
         * Sets the name of the query parameter used for this setting. If null
         * is passed the the setting will not appear in the top-level query
         * string.
         * @param value The new value.
         */
        setParamName(value: string|null): void;
    }
}
declare module 'goog:goog.tweak.BaseSetting' {
    import alias = ಠ_ಠ.clutz.goog.tweak.BaseSetting;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.tweak {
    /**
     * A registry setting that contains a group of boolean subfield, where all
     * entries modify the same query parameter. For example:
     * ?foo=setting1,-setting2
     */
    class BooleanGroup extends BooleanGroup_Instance {}
    class BooleanGroup_Instance extends
        ಠ_ಠ.clutz.goog.tweak.BaseSetting_Instance {
        /**
         * A registry setting that contains a group of boolean subfield, where
         * all entries modify the same query parameter. For example:
         * ?foo=setting1,-setting2
         * @param id The ID for the setting.
         * @param description A description of what the setting does.
         */
        constructor(id: string, description: string);
        /**
         * Adds the given BooleanSetting to the group.
         * @param boolEntry The entry.
         */
        addChild(boolEntry: ಠ_ಠ.clutz.goog.tweak.BooleanInGroupSetting|
                 null): void;
        /**
         * Returns the map of token->boolean settings.
         */
        getChildEntries(): {
            [/* warning: coerced from ? */ key: string]:
                ಠ_ಠ.clutz.goog.tweak.BooleanSetting
        };
        getNewValueEncoded(): string|null;
        initialize(value: string|null): any;
        /**
         * The logger for this class.
         */
        logger: ಠ_ಠ.clutz.goog.debug.Logger|null;
    }
}
declare module 'goog:goog.tweak.BooleanGroup' {
    import alias = ಠ_ಠ.clutz.goog.tweak.BooleanGroup;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.tweak {
    /**
     * An entry in a BooleanGroup.
     */
    class BooleanInGroupSetting extends BooleanInGroupSetting_Instance {}
    class BooleanInGroupSetting_Instance extends
        ಠ_ಠ.clutz.goog.tweak.BooleanSetting_Instance {
        /**
         * An entry in a BooleanGroup.
         * @param id The ID for the setting.
         * @param description A description of what the setting does.
         * @param group The group that this entry belongs to.
         */
        constructor(
            id: string, description: string,
            group: ಠ_ಠ.clutz.goog.tweak.BooleanGroup);
        initialQueryParamValue?: string;
        /**
         * Returns the BooleanGroup that this setting belongs to.
         */
        getGroup(): ಠ_ಠ.clutz.goog.tweak.BooleanGroup;
        /**
         * Returns the token to use in the query parameter.
         */
        getToken(): string;
        /**
         * The logger for this class.
         */
        logger: ಠ_ಠ.clutz.goog.debug.Logger|null;
        setParamName(value: string|null): void;
        /**
         * Sets the token to use in the query parameter.
         * @param value The value.
         */
        setToken(value: string): void;
    }
}
declare module 'goog:goog.tweak.BooleanInGroupSetting' {
    import alias = ಠ_ಠ.clutz.goog.tweak.BooleanInGroupSetting;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.tweak {
    /**
     * A registry setting that can be either true of false.
     */
    class BooleanSetting extends BooleanSetting_Instance {}
    class BooleanSetting_Instance extends
        ಠ_ಠ.clutz.goog.tweak.BasePrimitiveSetting_Instance {
        /**
         * A registry setting that can be either true of false.
         * @param id The ID for the setting.
         * @param description A description of what the setting does.
         */
        constructor(id: string, description: string);
        encodeNewValue(): string;
        getDefaultValue(): boolean;
        getNewValue(): boolean;
        getValue(): boolean;
        initialize(value: string|null): any;
        /**
         * The logger for this class.
         */
        logger: ಠ_ಠ.clutz.goog.debug.Logger|null;
        setDefaultValue(a: boolean): void;
        setValue(a: boolean): void;
    }
}
declare module 'goog:goog.tweak.BooleanSetting' {
    import alias = ಠ_ಠ.clutz.goog.tweak.BooleanSetting;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.tweak {
    /**
     * A registry action (a button).
     */
    class ButtonAction extends ButtonAction_Instance {}
    class ButtonAction_Instance extends
        ಠ_ಠ.clutz.goog.tweak.BaseEntry_Instance {
        /**
         * A registry action (a button).
         * @param id The ID for the setting.
         * @param description A description of what the setting does.
         * @param callback Function to call when the button is clicked.
         */
        constructor(
            id: string, description: string, callback: (...a: any[]) => any);
        label: string;
    }
}
declare module 'goog:goog.tweak.ButtonAction' {
    import alias = ಠ_ಠ.clutz.goog.tweak.ButtonAction;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.tweak {
    /**
     * Type for configParams.
     * TODO(agrieve): Remove |Object when optional fields in struct types are
     * implemented.
     */
    type ConfigParams = GlobalObject;
}
declare module 'goog:goog.tweak.ConfigParams' {
    import alias = ಠ_ಠ.clutz.goog.tweak.ConfigParams;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.tweak {
    /**
     * The body of the tweaks UI and also used for BooleanGroup.
     */
    class EntriesPanel extends EntriesPanel_Instance {}
    class EntriesPanel_Instance {
        private noStructuralTyping_: any;
        /**
         * The body of the tweaks UI and also used for BooleanGroup.
         * @param entries The entries to show in the panel.
         * @param opt_domHelper The DomHelper to render with.
         */
        constructor(
            entries: ಠ_ಠ.clutz.goog.tweak.BaseEntry[],
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * Map of tweak ID -> EntriesPanel for child panels (BooleanGroups).
         */
        childPanels: {
            [/* warning: coerced from ? */ key: string]:
                ಠ_ಠ.clutz.goog.tweak.EntriesPanel
        };
        getRootElement(): GlobalElement;
        /**
         * Inserts the given entry into the panel.
         * @param entry The entry to insert.
         */
        insertEntry(entry: ಠ_ಠ.clutz.goog.tweak.BaseEntry): void;
        /**
         * Creates and returns the expanded element.
         * The markup looks like:
         *
         * <div>
         * <a>Show Descriptions</a>
         * <div>
         * ...
         * {endElement}
         * </div>
         * </div>
         * @param opt_endElement Element to insert after all tweak entries.
         */
        render(opt_endElement?: GlobalElement|null|
               DocumentFragment): GlobalElement;
        /**
         * Show all entry descriptions (has the same effect as clicking on all
         * ?'s).
         */
        toggleAllDescriptions(): void;
    }
}
declare module 'goog:goog.tweak.EntriesPanel' {
    import alias = ಠ_ಠ.clutz.goog.tweak.EntriesPanel;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.tweak {
    /**
     * A registry setting for numeric values.
     */
    class NumericSetting extends NumericSetting_Instance {}
    class NumericSetting_Instance extends
        ಠ_ಠ.clutz.goog.tweak.BasePrimitiveSetting_Instance {
        /**
         * A registry setting for numeric values.
         * @param id The ID for the setting.
         * @param description A description of what the setting does.
         */
        constructor(id: string, description: string);
        /**
         * Valid values for the setting.
         */
        validValues_?: ಠ_ಠ.clutz.goog.vec.Number|null;
        encodeNewValue(): string;
        getDefaultValue(): number;
        getNewValue(): number;
        /**
         * Returns the valid values for the setting.
         */
        getValidValues(): ಠ_ಠ.clutz.goog.vec.Number|null|undefined;
        getValue(): number;
        initialize(value: string|null): any;
        /**
         * The logger for this class.
         */
        logger: ಠ_ಠ.clutz.goog.debug.Logger|null;
        setDefaultValue(a: number): void;
        /**
         * Sets the valid values for the setting.
         * @param values Valid values.
         */
        setValidValues(values: ಠ_ಠ.clutz.goog.vec.Number|null|undefined): void;
        setValue(a: number): void;
    }
}
declare module 'goog:goog.tweak.NumericSetting' {
    import alias = ಠ_ಠ.clutz.goog.tweak.NumericSetting;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.tweak {
    /**
     * Singleton that manages all tweaks. This should be instantiated only from
     * goog.tweak.getRegistry().
     */
    class Registry extends Registry_Instance {
        /**
         * Simple parser for query params. Makes all keys lower-case.
         * @param queryParams The part of the url between the ? and the #.
         */
        static parseQueryParams(queryParams: string):
            {[/* warning: coerced from ? */ key: string]: string};
    }
    class Registry_Instance {
        private noStructuralTyping_: any;
        /**
         * Singleton that manages all tweaks. This should be instantiated only
         * from goog.tweak.getRegistry().
         * @param queryParams Value of window.location.search.
         * @param compilerOverrides Default value overrides set by the compiler.
         */
        constructor(queryParams: string, compilerOverrides: {
            [/* warning: coerced from ? */ key: string]:
                string | number | boolean
        });
        /**
         * Adds a callback to be called whenever a new tweak is added.
         * @param func The callback.
         */
        addOnRegisterListener(func: (...a: any[]) => any): void;
        /**
         * Creates and returns an array of all BaseSetting objects with an
         * associted query parameter.
         * @param excludeChildEntries Exclude BooleanInGroupSettings.
         * @param excludeNonSettings Exclude entries that are not subclasses of
         * BaseSetting.
         */
        extractEntries(
            excludeChildEntries: boolean,
            excludeNonSettings: boolean): ಠ_ಠ.clutz.goog.tweak.BaseSetting[];
        /**
         * Returns the boolean setting with the given ID. Asserts if the ID does
         * not refer to a registered entry or if it refers to one of the wrong
         * type.
         * @param id The unique string that identifies this entry.
         */
        getBooleanSetting(id: string): ಠ_ಠ.clutz.goog.tweak.BooleanSetting;
        /**
         * Returns the BaseEntry with the given ID. Asserts if it does not
         * exists.
         * @param id The unique string that identifies this entry.
         */
        getEntry(id: string): ಠ_ಠ.clutz.goog.tweak.BaseEntry;
        /**
         * Returns the numeric setting with the given ID. Asserts if the ID does
         * not refer to a registered entry or if it refers to one of the wrong
         * type.
         * @param id The unique string that identifies this entry.
         */
        getNumericSetting(id: string): ಠ_ಠ.clutz.goog.tweak.NumericSetting;
        /**
         * Returns the string setting with the given ID. Asserts if the ID does
         * not refer to a registered entry or if it refers to one of the wrong
         * type.
         * @param id The unique string that identifies this entry.
         */
        getStringSetting(id: string): ಠ_ಠ.clutz.goog.tweak.StringSetting;
        hasEntry(id: string): boolean;
        /**
         * Returns the query part of the URL that will apply all set tweaks.
         * @param opt_existingSearchStr The part of the url between the ? and
         * the #. Uses window.location.search if not given.
         */
        makeUrlQuery(opt_existingSearchStr?: string): string;
        /**
         * Sets a default value to use for the given tweak instead of the one
         * passed to the register* function. This function must be called before
         * the tweak is registered.
         * @param id The unique string that identifies the entry.
         * @param value The replacement value to be used as the default value
         * for the setting.
         */
        overrideDefaultValue(id: string, value: string|number|boolean): void;
        /**
         * Registers the given tweak setting/action.
         * @param entry The entry.
         */
        register(entry: ಠ_ಠ.clutz.goog.tweak.BaseEntry|null): void;
    }
}
declare module 'goog:goog.tweak.Registry' {
    import alias = ಠ_ಠ.clutz.goog.tweak.Registry;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.tweak {
    /**
     * A registry setting for string values.
     */
    class StringSetting extends StringSetting_Instance {}
    class StringSetting_Instance extends
        ಠ_ಠ.clutz.goog.tweak.BasePrimitiveSetting_Instance {
        /**
         * A registry setting for string values.
         * @param id The ID for the setting.
         * @param description A description of what the setting does.
         */
        constructor(id: string, description: string);
        /**
         * Valid values for the setting.
         */
        validValues_?: string[]|null;
        encodeNewValue(): string;
        getDefaultValue(): string;
        getNewValue(): string;
        /**
         * Returns the valid values for the setting.
         */
        getValidValues(): string[]|null|undefined;
        getValue(): string;
        initialize(value: string|null): any;
        /**
         * The logger for this class.
         */
        logger: ಠ_ಠ.clutz.goog.debug.Logger|null;
        setDefaultValue(a: string): void;
        /**
         * Sets the valid values for the setting.
         * @param values Valid values.
         */
        setValidValues(values: string[]|null|undefined): void;
        setValue(a: string): void;
    }
}
declare module 'goog:goog.tweak.StringSetting' {
    import alias = ಠ_ಠ.clutz.goog.tweak.StringSetting;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.tweak {
    /**
     * A UI for editing tweak settings / clicking tweak actions.
     */
    class TweakUi extends TweakUi_Instance {
        /**
         * Creates a TweakUi if tweaks are enabled.
         * @param opt_domHelper The DomHelper to render with.
         */
        static create(opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|
                      null): GlobalElement|undefined;
        /**
         * Creates a TweakUi inside of a show/hide link.
         * @param opt_domHelper The DomHelper to render with.
         */
        static createCollapsible(opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|
                                 null): GlobalElement|undefined;
    }
    class TweakUi_Instance {
        private noStructuralTyping_: any;
        /**
         * A UI for editing tweak settings / clicking tweak actions.
         * @param registry The registry to render.
         * @param opt_domHelper The DomHelper to render with.
         */
        constructor(
            registry: ಠ_ಠ.clutz.goog.tweak.Registry,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        getRootElement(): GlobalElement;
        /**
         * Creates the element to display when the UI is visible.
         */
        render(): GlobalElement;
    }
}
declare module 'goog:goog.tweak.TweakUi' {
    import alias = ಠ_ಠ.clutz.goog.tweak.TweakUi;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Abstract base class for spell checker editor implementations. Provides
     * basic functionality such as word lookup and caching.
     */
    class AbstractSpellChecker extends AbstractSpellChecker_Instance {}
    class AbstractSpellChecker_Instance extends
        ಠ_ಠ.clutz.goog.ui.Component_Instance {
        /**
         * Abstract base class for spell checker editor implementations.
         * Provides basic functionality such as word lookup and caching.
         * @param spellCheck Instance of the SpellCheck support object to use. A
         * single instance can be shared by multiple editor components.
         * @param opt_domHelper Optional DOM helper.
         */
        constructor(
            spellCheck: ಠ_ಠ.clutz.goog.spell.SpellCheck|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * Handler to use for caching and lookups.
         */
        spellCheck: ಠ_ಠ.clutz.goog.spell.SpellCheck|null;
        /**
         * Blocks processing of spell checker READY events. This is used in
         * dictionary recharge and async mode so that completion is not signaled
         * prematurely.
         */
        blockReadyEvents(): void;
        /**
         * Checks spelling for all text.
         * Should be overridden by implementation.
         */
        check(): void;
        /**
         * Clears the word to element references map used by replace/ignore.
         */
        clearWordElements(): void;
        /**
         * Continues processing started by processTextAsync. Calls virtual
         * processWord_ and processRange_ methods.
         */
        continueAsyncProcessing():
            ಠ_ಠ.clutz.goog.ui.AbstractSpellChecker.AsyncResult;
        /**
         * Creates an element for a specified word and stores a reference to it.
         * @param word Word to create element for.
         * @param status Status of word.
         */
        createWordElement(
            word: string, status: ಠ_ಠ.clutz.goog.spell.SpellCheck.WordStatus):
            HTMLSpanElement;
        disposeInternal(): void;
        /**
         * Markers for the text that does not need to be included in the
         * processing.
         *
         * For rich text editor this is a list of strings formatted as
         * tagName.className or className. If both are specified, the element
         * will be excluded if BOTH are matched. If only a className is
         * specified, then we will exclude regions with the className. If only
         * one marker is needed, it may be passed as a string. For plain text
         * editor this is a RegExp that matches the excluded text.
         *
         * Used exclusively by the derived classes
         */
        excludeMarker?: string[]|null|string|RegExp;
        /**
         * Finalizes asynchronous processing mode. Should be called after there
         * is no more text to process and processTextAsync and/or
         * continueAsyncProcessing returned FINISHED.
         */
        finishAsyncProcessing(): void;
        /**
         * Sets the focus on the provided word element.
         * @param element The word element that should receive focus.
         */
        focusOnElement(element: GlobalElement|null): void;
        /**
         * Returns the span element that matches the given number index.
         * @param index Number index that is used in the element id.
         */
        getElementByIndex(index: number): GlobalElement|null;
        /**
         * Returns desired element properties for the specified status.
         * Should be overridden by implementation.
         * @param status Status of word.
         */
        getElementProperties(a: ಠ_ಠ.clutz.goog.spell.SpellCheck.WordStatus):
            GlobalObject|null;
        /**
         * Returns the index of the currently focussed invalid word element.
         * This index starts at one instead of zero.
         */
        getFocusedElementIndex(): number;
        getLastIndex(): number;
        getMenu(): ಠ_ಠ.clutz.goog.ui.PopupMenu|null|undefined;
        getMenuEdit(): ಠ_ಠ.clutz.goog.ui.MenuItem|null|undefined;
        getNextIndex(): number;
        getSpellCheck(): ಠ_ಠ.clutz.goog.spell.SpellCheck|null;
        /**
         * Ignores spelling of word.
         * @param word Word to add.
         */
        ignoreWord(word: string): void;
        /**
         * Initializes suggestions menu. Populates menu with separator and
         * ignore option that are always valid. Suggestions are later added
         * above the separator.
         */
        initSuggestionsMenu(): void;
        /**
         * Starts asynchronous processing mode.
         */
        initializeAsyncMode(): void;
        isVisible(): boolean;
        /**
         * Generates unique Ids for spell checker elements.
         * @param opt_id Id to suffix with.
         */
        makeElementId(opt_id?: number): string;
        /**
         * Whether corrected words should be highlighted.
         */
        markCorrected: boolean;
        /**
         * Navigate keyboard focus in the given direction.
         * @param direction The direction to navigate in.
         */
        navigate(direction: ಠ_ಠ.clutz.goog.ui.AbstractSpellChecker.Direction):
            boolean;
        /**
         * Handles correction menu actions.
         * @param event Action event.
         */
        onCorrectionAction(event: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Precharges local dictionary cache. This is optional, but greatly
         * reduces amount of subsequent churn in the DOM tree because most of
         * the words become known from the very beginning.
         * @param text Text to process.
         * @param words Max number of words to scan.
         */
        populateDictionary(text: string, words: number): number;
        /**
         * Processes range of text that checks out (contains no unrecognized
         * words). Should be overridden by implementation. May contain words and
         * separators.
         * @param node Node containing text range.
         * @param text text to process.
         */
        processRange(node: Node|null, text: string): any;
        /**
         * Splits text into individual words and blocks of separators. Calls
         * virtual processWord_ and processRange_ methods.
         * @param node Node containing text.
         * @param text Text to process.
         */
        processTextAsync(node: Node|null, text: string):
            ಠ_ಠ.clutz.goog.ui.AbstractSpellChecker.AsyncResult;
        /**
         * Processes word.
         * Should be overridden by implementation.
         * @param node Node containing word.
         * @param text Word to process.
         * @param status Status of the word.
         */
        processWord(
            node: Node|null, text: string,
            status: ಠ_ಠ.clutz.goog.spell.SpellCheck.WordStatus): any;
        /**
         * Stores a reference to word element.
         * @param word The word to store.
         * @param el The element associated with it.
         */
        registerWordElement(word: string, el: HTMLSpanElement|null): void;
        /**
         * Removes spell-checker markup and restore the node to text.
         * @param el Word element. MUST have a text node child.
         */
        removeMarkup(el: GlobalElement|null): void;
        /**
         * Replaces word.
         * @param el An element wrapping the word that should be replaced.
         * @param old Word that was replaced.
         * @param word Word to replace with.
         */
        replaceWord(el: GlobalElement|null, old: string, word: string): void;
        /**
         * Hides correction UI.
         * Should be overridden by implementation.
         */
        resume(): void;
        /**
         * Sets the marker for the excluded text.
         *
         * {@see goog.ui.AbstractSpellChecker.prototype.excludeMarker}
         * @param marker A RegExp for plain text or class names for the rich
         * text spell checker for the elements to exclude from checking.
         */
        setExcludeMarker(marker: string[]|null|string|RegExp): void;
        /**
         * Sets the index of the currently focussed invalid word element. This
         * index should start at one instead of zero.
         * @param focusElementIndex the index of the currently focussed element
         */
        setFocusedElementIndex(focusElementIndex: number): void;
        /**
         * Sets the handler used for caching and lookups.
         * @param handler The handler used for caching and lookups.
         */
        setHandler(handler: ಠ_ಠ.clutz.goog.spell.SpellCheck|null): void;
        /**
         * Sets the spell checker used for caching and lookups.
         * @param spellCheck The handler used for caching and lookups.
         */
        setSpellCheck(spellCheck: ಠ_ಠ.clutz.goog.spell.SpellCheck|null): void;
        /**
         * Displays suggestions menu.
         * @param el Element to display menu for.
         * @param opt_pos Position to display menu at relative to the viewport
         * (in client coordinates), or a mouse event.
         */
        showSuggestionsMenu(
            el: GlobalElement|null,
            opt_pos?: ಠ_ಠ.clutz.goog.events.BrowserEvent|null|
            ಠ_ಠ.clutz.goog.math.Coordinate): void;
        /**
         * Class name for suggestions menu.
         */
        suggestionsMenuClassName: string;
        /**
         * Unblocks processing of spell checker READY events. This is used in
         * dictionary recharge and async mode so that completion is not signaled
         * prematurely.
         */
        unblockReadyEvents(): void;
        /**
         * Updates element based on word status. Either converts it to a text
         * node, or merges it with the previous or next text node if the status
         * of the world is VALID, in which case the element itself is
         * eliminated.
         * @param el Word element.
         * @param word Word to update status for.
         * @param status Status of word.
         */
        updateElement(
            el: GlobalElement|null, word: string,
            status: ಠ_ಠ.clutz.goog.spell.SpellCheck.WordStatus): void;
    }
}
declare namespace ಠ_ಠ.clutz.goog.ui.AbstractSpellChecker {
    enum Direction {
        NEXT,
        PREVIOUS,
    }
}
declare module 'goog:goog.ui.AbstractSpellChecker' {
    import alias = ಠ_ಠ.clutz.goog.ui.AbstractSpellChecker;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.AbstractSpellChecker {
    /**
     * Constants for the result of asynchronous processing.
     */
    enum AsyncResult {
        DONE,
        PENDING,
    }
}
declare module 'goog:goog.ui.AbstractSpellChecker.AsyncResult' {
    import alias = ಠ_ಠ.clutz.goog.ui.AbstractSpellChecker.AsyncResult;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Once initialized with a document, the activity monitor can be queried for
     * the current idle time.
     */
    class ActivityMonitor extends ActivityMonitor_Instance {
        /**
         * Minimum amount of time in ms between throttled ACTIVITY events
         */
        static MIN_EVENT_SPACING: number;
    }
    class ActivityMonitor_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * Once initialized with a document, the activity monitor can be queried
         * for the current idle time.
         * @param opt_domHelper DomHelper which contains the document(s) to
         * listen to.  If null, the default document is usedinstead.
         * @param opt_useBubble Whether to use the bubble phase to listen for
         * events. By default listens on the capture phase so that it won't miss
         * events that get stopPropagation/cancelBubble'd. However, this can
         * cause problems in IE8 if the page loads multiple scripts that include
         * the closure event handling code.
         */
        constructor(
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null|
            (ಠ_ಠ.clutz.goog.dom.DomHelper|null)[],
            opt_useBubble?: boolean);
        /**
         * Adds a document to those being monitored by this class.
         * @param doc Document to monitor.
         */
        addDocument(doc: Document|null): void;
        disposeInternal(): void;
        /**
         * Returns the amount of time the user has been idle.
         * @param opt_now The current time can optionally be passed in for the
         * computation to avoid an extra Date allocation.
         */
        getIdleTime(opt_now?: number): number;
        /**
         * Returns the time of the last event
         */
        getLastEventTime(): number;
        /**
         * Returns the type of the last user event.
         */
        getLastEventType(): string;
        /**
         * Removes a document from those being monitored by this class.
         * @param doc Document to monitor.
         */
        removeDocument(doc: Document|null): void;
        /**
         * Updates the last event time to be the present time, useful for
         * non-DOM events that should update idle time.
         */
        resetTimer(): void;
        /**
         * Updates the idle time and fires an event if time has elapsed since
         * the last update.
         * @param eventTime Time (in MS) of the event that cleared the idle
         * timer.
         * @param eventType Type of the event, used only for debugging.
         */
        updateIdleTime(eventTime: number, eventType: string): void;
    }
}
declare namespace ಠ_ಠ.clutz.goog.ui.ActivityMonitor {
    type Event = string&{clutzEnumBrand: never};
    var Event: {
        ACTIVITY: Event,
    };
}
declare module 'goog:goog.ui.ActivityMonitor' {
    import alias = ಠ_ಠ.clutz.goog.ui.ActivityMonitor;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Advanced tooltip widget with cursor tracking abilities. Works like a
     * regular tooltip but can track the cursor position and direction to
     * determine if the tooltip should be dismissed or remain open.
     */
    class AdvancedTooltip extends AdvancedTooltip_Instance {}
    class AdvancedTooltip_Instance extends ಠ_ಠ.clutz.goog.ui.Tooltip_Instance {
        /**
         * Advanced tooltip widget with cursor tracking abilities. Works like a
         * regular tooltip but can track the cursor position and direction to
         * determine if the tooltip should be dismissed or remain open.
         * @param opt_el Element to display tooltip for, either element
         * reference or string id.
         * @param opt_str Text message to display in tooltip.
         * @param opt_domHelper Optional DOM helper.
         */
        constructor(
            opt_el?: GlobalElement|null|string, opt_str?: string|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        hideTimer?: number;
        getCursorTracking(): boolean;
        getCursorTrackingHideDelayMs(): number;
        /**
         * Override hide delay with cursor tracking hide delay while tracking.
         */
        getHideDelayMs(): number;
        getHotSpotPadding(): ಠ_ಠ.clutz.goog.math.Box|null;
        /**
         * Handler for mouse move events.
         * @param event Event object.
         */
        handleMouseMove(event: ಠ_ಠ.clutz.goog.events.BrowserEvent|null): void;
        /**
         * Handler for mouse over events for the tooltip element.
         * @param event Event object.
         */
        handleTooltipMouseOver(event: ಠ_ಠ.clutz.goog.events.BrowserEvent|
                               null): void;
        /**
         * Checks whether the supplied coordinate is inside the tooltip,
         * including padding if any.
         * @param coord Coordinate being tested.
         */
        isCoordinateInTooltip(coord: ಠ_ಠ.clutz.goog.math.Coordinate|
                              null): boolean;
        /**
         * Returns true if the mouse is in the tooltip.
         */
        isMouseInTooltip(): boolean;
        /**
         * Called by timer from mouse out handler. Hides tooltip if cursor is
         * still outside element and tooltip.
         * @param el Anchor when hide timer was started.
         */
        maybeHide(el: GlobalElement|null|undefined): void;
        /**
         * Called after the popup is hidden.
         */
        onHide(a?: Node|null): void;
        /**
         * Called after the popup is shown.
         */
        onShow(): void;
        /**
         * Forces the recalculation of the hotspot on the next mouse over event.
         */
        resetHotSpot(): void;
        /**
         * Sets whether to track the cursor and thereby close the tooltip if it
         * moves away from the tooltip and keep it open if it moves towards it.
         * @param b Whether to track the cursor.
         */
        setCursorTracking(b: boolean): void;
        /**
         * Sets delay in milliseconds before tooltips are hidden if cursor
         * tracking is enabled and the cursor is moving away from the tooltip.
         * @param delay The delay in milliseconds.
         */
        setCursorTrackingHideDelayMs(delay: number): void;
        /**
         * Sets margin around the tooltip where the cursor is allowed without
         * dismissing the tooltip.
         * @param opt_box The margin around the tooltip.
         */
        setHotSpotPadding(opt_box?: ಠ_ಠ.clutz.goog.math.Box|null): void;
    }
}
declare module 'goog:goog.ui.AdvancedTooltip' {
    import alias = ಠ_ಠ.clutz.goog.ui.AdvancedTooltip;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Zippy widget. Expandable/collapsible container, clicking the header
     * toggles the visibility of the content.
     */
    class AnimatedZippy extends AnimatedZippy_Instance {
        /**
         * Constants for event names.
         */
        static Events: GlobalObject;
    }
    class AnimatedZippy_Instance extends ಠ_ಠ.clutz.goog.ui.Zippy_Instance {
        /**
         * Zippy widget. Expandable/collapsible container, clicking the header
         * toggles the visibility of the content.
         * @param header Header element, either element reference, string id or
         * null if no header exists.
         * @param content Content element, either element reference or string
         * id.
         * @param opt_expanded Initial expanded/visibility state. Defaults to
         * false.
         * @param opt_domHelper An optional DOM helper.
         * @param opt_role ARIA role, default TAB.
         */
        constructor(
            header: GlobalElement|null|string,
            content: GlobalElement|null|string, opt_expanded?: boolean,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null,
            opt_role?: ಠ_ಠ.clutz.goog.a11y.aria.Role);
        /**
         * Acceleration function for expand/collapse animation.
         */
        animationAcceleration(...a: any[]): any;
        /**
         * Duration of expand/collapse animation, in milliseconds.
         */
        animationDuration: number;
        isBusy(): boolean;
        /**
         * Sets expanded state.
         * @param expanded Expanded/visibility state.
         */
        setExpanded(expanded: boolean): void;
    }
}
declare module 'goog:goog.ui.AnimatedZippy' {
    import alias = ಠ_ಠ.clutz.goog.ui.AnimatedZippy;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * An implementation of a menu that can attach itself to DOM element that
     * are annotated appropriately.
     *
     * The following attributes are used by the AttachableMenu
     *
     * menu-item - Should be set on DOM elements that function as items in the
     * menu that can be selected.
     * classNameSelected - A class that will be added to the element's class
     * names when the item is selected via keyboard or mouse.
     */
    class AttachableMenu extends AttachableMenu_Instance {}
    class AttachableMenu_Instance extends ಠ_ಠ.clutz.goog.ui.MenuBase_Instance {
        /**
         * An implementation of a menu that can attach itself to DOM element
         * that are annotated appropriately.
         *
         * The following attributes are used by the AttachableMenu
         *
         * menu-item - Should be set on DOM elements that function as items in
         * the menu that can be selected. classNameSelected - A class that will
         * be added to the element's class names when the item is selected via
         * keyboard or mouse.
         * @param opt_element A DOM element for the popup.
         */
        constructor(opt_element?: GlobalElement|null);
        disposeInternal(): void;
        /**
         * Sets the class name to use for menu items
         */
        getItemClassName(): string;
        /**
         * Returns the next or previous item. Used for up/down arrows.
         * @param prev True to go to the previous element instead of next.
         */
        getNextPrevItem(prev: boolean): GlobalElement|null;
        /**
         * Returns the selected item
         */
        getSelectedItem(): GlobalElement|null;
        /**
         * Sets the class name to use for selected menu items
         * todo(user) - reevaluate if we can simulate pseudo classes in IE
         */
        getSelectedItemClassName(): string;
        /**
         * Key down handler for the menu.
         * @param e The event object.
         */
        onKeyDown(e: ಠ_ಠ.clutz.goog.events.KeyEvent|null): void;
        /**
         * Mouse down handler for the menu. Prevents default to avoid text
         * selection.
         * @param e The event object.
         */
        onMouseDown(a: ಠ_ಠ.clutz.goog.events.Event): void;
        /**
         * Mouse out handler for the menu.
         * @param e The event object.
         */
        onMouseOut(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Mouse over handler for the menu.
         * @param e The event object.
         */
        onMouseOver(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Mouse up handler for the menu.
         * @param e The event object.
         */
        onMouseUp(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Called after the menu is shown.
         */
        onShow(): void;
        /**
         * Sets the class name to use for menu items
         * @param name The class name to use for items.
         */
        setItemClassName(name: string): void;
        setSelectedItem(obj: GlobalObject|null): void;
        /**
         * Sets the class name to use for selected menu items
         * todo(user) - reevaluate if we can simulate pseudo classes in IE
         * @param name The class name to use for selected items.
         */
        setSelectedItemClassName(name: string): void;
        showPopupElement(): void;
    }
}
declare module 'goog:goog.ui.AttachableMenu' {
    import alias = ಠ_ಠ.clutz.goog.ui.AttachableMenu;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Base class for the hierarchy of RoundedPanel classes. Do not
     * instantiate directly. Instead, call goog.ui.RoundedPanel.create().
     * The HTML structure for the RoundedPanel is:
     * <pre>
     * - div (Contains the background and content. Class name:
     * goog-roundedpanel)
     * - div (Contains the background/rounded corners. Class name:
     * goog-roundedpanel-bg)
     * - div (Contains the content. Class name: goog-roundedpanel-content)
     * </pre>
     */
    class BaseRoundedPanel extends BaseRoundedPanel_Instance {}
    class BaseRoundedPanel_Instance extends
        ಠ_ಠ.clutz.goog.ui.Component_Instance {
        /**
         * Base class for the hierarchy of RoundedPanel classes. Do not
         * instantiate directly. Instead, call goog.ui.RoundedPanel.create().
         * The HTML structure for the RoundedPanel is:
         * <pre>
         * - div (Contains the background and content. Class name:
         * goog-roundedpanel)
         * - div (Contains the background/rounded corners. Class name:
         * goog-roundedpanel-bg)
         * - div (Contains the content. Class name: goog-roundedpanel-content)
         * </pre>
         * @param radius The radius of the rounded corner(s), in pixels.
         * @param borderWidth The thickness of the border, in pixels.
         * @param borderColor The border color of the panel.
         * @param opt_backgroundColor The background color of the panel.
         * @param opt_corners The corners of the panel to be rounded. Any
         * corners not specified will be rendered as square corners. Will
         * default to all square corners if not specified.
         * @param opt_domHelper The DOM helper object for the document we want
         * to render in.
         */
        constructor(
            radius: number, borderWidth: number, borderColor: string,
            opt_backgroundColor?: string, opt_corners?: number,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * This method performs all the necessary DOM manipulation to create the
         * panel. Overrides {@link goog.ui.Component#decorateInternal}.
         * @param element The element to decorate.
         */
        decorateInternal(element: GlobalElement|null): void;
        disposeInternal(): void;
        /**
         * Returns the DOM element containing the actual content.
         */
        getContentElement(): GlobalElement|null;
    }
}
declare module 'goog:goog.ui.BaseRoundedPanel' {
    import alias = ಠ_ಠ.clutz.goog.ui.BaseRoundedPanel;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Default implementation of BidiInput.
     */
    class BidiInput extends BidiInput_Instance {}
    class BidiInput_Instance extends ಠ_ಠ.clutz.goog.ui.Component_Instance {
        /**
         * Default implementation of BidiInput.
         * @param opt_domHelper Optional DOM helper.
         */
        constructor(opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * Creates the element for the text input.
         */
        createDom(): void;
        /**
         * Decorates the given HTML element as a BidiInput. The HTML element can
         * be an input element with type='text', a textarea element, or any
         * contenteditable. Overrides {@link
         * goog.ui.Component#decorateInternal}.  Considered protected.
         * @param element Element to decorate.
         */
        decorateInternal(element: GlobalElement|null): void;
        disposeInternal(): void;
        /**
         * Returns the direction of the input element.
         */
        getDirection(): string|null;
        /**
         * Returns the value of the underlying input field.
         */
        getValue(): string;
        /**
         * Sets the value of the underlying input field, and sets the direction
         * according to the given value.
         * @param value The Value to set in the underlying input field.
         */
        setValue(value: string): void;
    }
}
declare module 'goog:goog.ui.BidiInput' {
    import alias = ಠ_ಠ.clutz.goog.ui.BidiInput;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * The Bubble provides a general purpose bubble implementation that can be
     * anchored to a particular element and displayed for a period of time.
     */
    class Bubble extends Bubble_Instance {
        /**
         * A default configuration for the bubble.
         */
        static defaultConfig: GlobalObject|null;
    }
    class Bubble_Instance extends ಠ_ಠ.clutz.goog.ui.Component_Instance {
        /**
         * The Bubble provides a general purpose bubble implementation that can
         * be anchored to a particular element and displayed for a period of
         * time.
         * @param message Message or an element to display inside the bubble.
         * Strings are treated as plain-text and will be HTML escaped.
         * @param opt_config The configuration for the bubble. If not specified, the default configuration will be used. {@see goog.ui.Bubble.defaultConfig}.
         * @param opt_domHelper Optional DOM helper.
         */
        constructor(
            message: string|ಠ_ಠ.clutz.goog.html.SafeHtml|GlobalElement|null,
            opt_config?: GlobalObject|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * Attaches the bubble to an anchor element. Computes the positioning
         * and orientation of the bubble.
         * @param anchorElement The element to which we are attaching.
         */
        attach(anchorElement: GlobalElement|null): void;
        createDom(): void;
        disposeInternal(): void;
        /**
         * Returns an AnchoredPosition that will position the bubble optimally
         * given the position of the anchor element and the size of the
         * viewport.
         * @param anchorElement The element to which the bubble is attached.
         */
        getComputedAnchoredPosition(anchorElement: GlobalElement|null):
            ಠ_ಠ.clutz.goog.positioning.AnchoredPosition;
        isVisible(): boolean;
        /**
         * Sets whether the bubble should be automatically hidden whenever user
         * clicks outside the bubble element.
         * @param autoHide Whether to hide if user clicks outside the bubble.
         */
        setAutoHide(autoHide: boolean): void;
        /**
         * Sets the corner of the bubble to used in the positioning algorithm.
         * @param corner The bubble corner used for positioning constants.
         */
        setPinnedCorner(corner: ಠ_ಠ.clutz.goog.positioning.Corner): void;
        /**
         * Sets the position of the bubble. Pass null for corner in
         * AnchoredPosition for corner to be computed automatically.
         * @param position The position of the bubble.
         */
        setPosition(position: ಠ_ಠ.clutz.goog.positioning.AbstractPosition|
                    null): void;
        /**
         * Sets the timeout after which bubble hides itself.
         * @param timeout Timeout of the bubble.
         */
        setTimeout(timeout: number): void;
        /**
         * Sets whether the bubble should be visible.
         * @param visible Desired visibility state.
         */
        setVisible(visible: boolean): void;
    }
}
declare module 'goog:goog.ui.Bubble' {
    import alias = ಠ_ಠ.clutz.goog.ui.Bubble;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * A button control, rendered as a native browser button by default.
     */
    class Button extends Button_Instance {}
    class Button_Instance extends ಠ_ಠ.clutz.goog.ui.Control_Instance {
        /**
         * A button control, rendered as a native browser button by default.
         * @param opt_content Text caption or existing DOM structure to display
         * as the button's caption (if any).
         * @param opt_renderer Renderer used to render or decorate the button;
         * defaults to {@link goog.ui.NativeButtonRenderer}.
         * @param opt_domHelper Optional DOM helper, used for document
         * interaction.
         */
        constructor(
            opt_content?: string|Node|null|Node[]|NodeListOf<Node>,
            opt_renderer?: ಠ_ಠ.clutz.goog.ui.ButtonRenderer|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        disposeInternal(): void;
        enterDocument(): void;
        /**
         * Returns the tooltip for the button.
         */
        getTooltip(): string|undefined;
        /**
         * Returns the value associated with the button.
         */
        getValue(): any;
        /**
         * Attempts to handle a keyboard event; returns true if the event was
         * handled, false otherwise.  If the button is enabled and the
         * Enter/Space key was pressed, handles the event by dispatching an
         * {@code ACTION} event, and returns true. Overrides {@link
         * goog.ui.Control#handleKeyEventInternal}.
         * @param e Key event to handle.
         */
        handleKeyEventInternal(e: ಠ_ಠ.clutz.goog.events.KeyEvent|null): boolean;
        /**
         * Collapses the border on one or both sides of the button, allowing it
         * to be combined with the adjancent button(s), forming a single UI
         * componenet with multiple targets.
         * @param sides Bitmap of one or more {@link goog.ui.ButtonSide}s for
         * which borders should be collapsed.
         */
        setCollapsed(sides: number): void;
        /**
         * Sets the tooltip for the button, and updates its DOM.
         * @param tooltip New tooltip text.
         */
        setTooltip(tooltip: string): void;
        /**
         * Sets the tooltip for the button.  Unlike {@link #setTooltip}, doesn't
         * update the button's DOM.  Considered protected; to be called only by
         * renderer code during element decoration.
         * @param tooltip New tooltip text.
         */
        setTooltipInternal(tooltip: string): void;
        /**
         * Sets the value associated with the button, and updates its DOM.
         * @param value New button value.
         */
        setValue(value: any): void;
        /**
         * Sets the value associated with the button.  Unlike {@link #setValue},
         * doesn't update the button's DOM.  Considered protected; to be called
         * only by renderer code during element decoration.
         * @param value New button value.
         */
        setValueInternal(value: any): void;
    }
}
declare module 'goog:goog.ui.Button' {
    import alias = ಠ_ಠ.clutz.goog.ui.Button;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.Button {
    /**
     * Constants for button sides, see {@link
     * goog.ui.Button.prototype.setCollapsed} for details. Aliased from
     * goog.ui.ButtonSide to support legacy users without creating a circular
     * dependency in {@link goog.ui.ButtonRenderer}.
     */
    //!! goog.ui.Button.Side aliases enum goog.ui.ButtonSide
    type Side = goog.ui.ButtonSide;
    const Side: typeof goog.ui.ButtonSide;
}
declare module 'goog:goog.ui.Button.Side' {
    import alias = ಠ_ಠ.clutz.goog.ui.Button.Side;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Default renderer for {@link goog.ui.Button}s.  Extends the superclass
     * with the following button-specific API methods: <ul> <li>{@code getValue}
     * - returns the button element's value <li>{@code setValue} - updates the
     * button element to reflect its new value <li>{@code getTooltip} - returns
     * the button element's tooltip text <li>{@code setTooltip} - updates the
     * button element's tooltip text <li>{@code setCollapsed} - removes one or
     * both of the button element's borders
     * </ul>
     * For alternate renderers, see {@link goog.ui.NativeButtonRenderer},
     * {@link goog.ui.CustomButtonRenderer}, and {@link
     * goog.ui.FlatButtonRenderer}.
     */
    class ButtonRenderer extends ButtonRenderer_Instance {
        /**
         * Default CSS class to be applied to the root element of components
         * rendered by this renderer.
         */
        static CSS_CLASS: string;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.ButtonRenderer;
        static instance_: ಠ_ಠ.clutz.goog.ui.ButtonRenderer;
    }
    class ButtonRenderer_Instance extends
        ಠ_ಠ.clutz.goog.ui.ControlRenderer_Instance {
        createDom(button: ಠ_ಠ.clutz.goog.ui.Control|null): GlobalElement|null;
        decorate(
            button: ಠ_ಠ.clutz.goog.ui.Control|null,
            element: GlobalElement|null): GlobalElement|null;
        /**
         * Returns the ARIA role to be applied to buttons.
         */
        getAriaRole(): ಠ_ಠ.clutz.goog.a11y.aria.Role|undefined;
        getCssClass(): string;
        /**
         * Takes a button's root element, and returns its tooltip text.
         * @param element The button's root element.
         */
        getTooltip(element: GlobalElement|null): string|undefined;
        /**
         * Takes a button's root element, and returns the value associated with
         * it. No-op in the base class.
         * @param element The button's root element.
         */
        getValue(a: GlobalElement|null): string|undefined;
        /**
         * Collapses the border on one or both sides of the button, allowing it
         * to be combined with the adjacent button(s), forming a single UI
         * componenet with multiple targets.
         * @param button Button to update.
         * @param sides Bitmap of one or more {@link goog.ui.ButtonSide}s for
         * which borders should be collapsed.
         */
        setCollapsed(button: ಠ_ಠ.clutz.goog.ui.Button|null, sides: number):
            void;
        /**
         * Takes a button's root element and a tooltip string, and updates the
         * element with the new tooltip.
         * @param element The button's root element.
         * @param tooltip New tooltip text.
         */
        setTooltip(element: GlobalElement|null, tooltip: string): void;
        /**
         * Takes a button's root element and a value, and updates the element to
         * reflect the new value.  No-op in the base class.
         * @param element The button's root element.
         * @param value New value.
         */
        setValue(a: GlobalElement|null, b: string): any;
        /**
         * Updates the button's ARIA (accessibility) state if the button is
         * being treated as a checkbox. Also makes sure that attributes which
         * aren't supported by buttons aren't being added.
         * @param element Element whose ARIA state is to be updated.
         * @param state Component state being enabled or disabled.
         * @param enable Whether the state is being enabled or disabled.
         */
        updateAriaState(
            element: GlobalElement|null,
            state: ಠ_ಠ.clutz.goog.ui.Component.State, enable: boolean): void;
    }
}
declare module 'goog:goog.ui.ButtonRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.ButtonRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Constants for button sides, see {@link
     * goog.ui.Button.prototype.setCollapsed} for details.
     */
    enum ButtonSide {
        BOTH,
        END,
        NONE,
        START,
    }
}
declare module 'goog:goog.ui.ButtonSide' {
    import alias = ಠ_ಠ.clutz.goog.ui.ButtonSide;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * CharCounter widget. Counts the number of characters in a input field or a
     * text box and displays the number of additional characters that may be
     * entered before the maximum length is reached.
     */
    class CharCounter extends CharCounter_Instance {}
    class CharCounter_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * CharCounter widget. Counts the number of characters in a input field
         * or a text box and displays the number of additional characters that
         * may be entered before the maximum length is reached.
         * @param elInput Input or text area element to count the number of
         * characters in.
         * @param elCount HTML element to display the remaining number of
         * characters in. You can pass in null for this if you don't want to
         * expose the number of chars remaining.
         * @param maxLength The maximum length.
         * @param opt_displayMode Display mode for this char counter. Defaults
         * to {@link goog.ui.CharCounter.Display.REMAINING}.
         */
        constructor(
            elInput: HTMLInputElement|null|HTMLTextAreaElement,
            elCount: GlobalElement|null, maxLength: number,
            opt_displayMode?: ಠ_ಠ.clutz.goog.ui.CharCounter.Display);
        /**
         * Checks length of text in input field and updates the counter.
         * Truncates text if the maximum lengths is exceeded.
         */
        checkLength(): void;
        disposeInternal(): void;
        /**
         * Returns the display mode.
         */
        getDisplayMode(): ಠ_ಠ.clutz.goog.ui.CharCounter.Display;
        /**
         * Returns the maximum length.
         */
        getMaxLength(): number;
        /**
         * Sets the display mode.
         * @param displayMode The display mode.
         */
        setDisplayMode(displayMode: ಠ_ಠ.clutz.goog.ui.CharCounter.Display):
            void;
        /**
         * Sets the maximum length.
         * @param maxLength The maximum length.
         */
        setMaxLength(maxLength: number): void;
    }
}
declare module 'goog:goog.ui.CharCounter' {
    import alias = ಠ_ಠ.clutz.goog.ui.CharCounter;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.CharCounter {
    /**
     * Display mode for the char counter.
     */
    enum Display {
        INCREMENTAL,
        REMAINING,
    }
}
declare module 'goog:goog.ui.CharCounter.Display' {
    import alias = ಠ_ಠ.clutz.goog.ui.CharCounter.Display;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Character Picker Class. This widget can be used to pick any Unicode
     * character by traversing a category-subcategory structure or by inputing
     * its hex value.
     *
     * See charpicker.html demo for example usage.
     */
    class CharPicker extends CharPicker_Instance {}
    class CharPicker_Instance extends ಠ_ಠ.clutz.goog.ui.Component_Instance {
        /**
         * Character Picker Class. This widget can be used to pick any Unicode
         * character by traversing a category-subcategory structure or by
         * inputing its hex value.
         *
         * See charpicker.html demo for example usage.
         * @param charPickerData Category names and charlist.
         * @param charNameFetcher Object which fetches the names of the
         * characters that are shown in the widget. These names may be stored
         * locally or come from an external source.
         * @param opt_recents List of characters to be displayed in resently
         * selected characters area.
         * @param opt_initCategory Sequence number of initial category.
         * @param opt_initSubcategory Sequence number of initial subcategory.
         * @param opt_rowCount Number of rows in the grid.
         * @param opt_columnCount Number of columns in the grid.
         * @param opt_domHelper Optional DOM helper.
         */
        constructor(
            charPickerData: ಠ_ಠ.clutz.goog.i18n.CharPickerData|null,
            charNameFetcher: ಠ_ಠ.clutz.goog.i18n.uChar.NameFetcher,
            opt_recents?: string[]|null, opt_initCategory?: number,
            opt_initSubcategory?: number, opt_rowCount?: number,
            opt_columnCount?: number,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * Category index used to index the data tables.
         */
        category: number;
        createDom(): void;
        decorateInternal(element: GlobalElement|null): void;
        disposeInternal(): void;
        enterDocument(): void;
        /**
         * Gets the user inputed unicode character.
         */
        getInputChar(): string;
        /**
         * Gets the list of characters user selected recently.
         */
        getRecentChars(): string[]|null;
        /**
         * Gets the last selected character.
         */
        getSelectedChar(): string|null;
        itempos: number;
        items: string[];
    }
}
declare module 'goog:goog.ui.CharPicker' {
    import alias = ಠ_ಠ.clutz.goog.ui.CharPicker;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Class representing a checkbox menu item.  This is just a convenience
     * class that extends {@link goog.ui.MenuItem} by making it checkable.
     */
    class CheckBoxMenuItem extends CheckBoxMenuItem_Instance {}
    class CheckBoxMenuItem_Instance extends
        ಠ_ಠ.clutz.goog.ui.MenuItem_Instance {
        /**
         * Class representing a checkbox menu item.  This is just a convenience
         * class that extends {@link goog.ui.MenuItem} by making it checkable.
         * @param content Text caption or DOM structure to display as the
         * content of the item (use to add icons or styling to menus).
         * @param opt_model Data/model associated with the menu item.
         * @param opt_domHelper Optional DOM helper used for document
         * interactions.
         */
        constructor(
            content: string|Node|null|Node[]|NodeListOf<Node>, opt_model?: any,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
    }
}
declare module 'goog:goog.ui.CheckBoxMenuItem' {
    import alias = ಠ_ಠ.clutz.goog.ui.CheckBoxMenuItem;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * 3-state checkbox widget. Fires CHECK or UNCHECK events before toggled and
     * CHANGE event after toggled by user.
     * The checkbox can also be enabled/disabled and get focused and
     * highlighted.
     */
    class Checkbox extends Checkbox_Instance {}
    class Checkbox_Instance extends ಠ_ಠ.clutz.goog.ui.Control_Instance {
        /**
         * 3-state checkbox widget. Fires CHECK or UNCHECK events before toggled
         * and CHANGE event after toggled by user. The checkbox can also be
         * enabled/disabled and get focused and highlighted.
         * @param opt_checked Checked state to set.
         * @param opt_domHelper Optional DOM helper, used for document
         * interaction.
         * @param opt_renderer Renderer used to render or decorate the checkbox;
         * defaults to {@link goog.ui.CheckboxRenderer}.
         */
        constructor(
            opt_checked?: ಠ_ಠ.clutz.goog.ui.Checkbox.State,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null,
            opt_renderer?: ಠ_ಠ.clutz.goog.ui.CheckboxRenderer|null);
        enterDocument(): void;
        getChecked(): ಠ_ಠ.clutz.goog.ui.Checkbox.State;
        handleKeyEventInternal(e: ಠ_ಠ.clutz.goog.events.KeyEvent|null): boolean;
        isChecked(): boolean;
        isUnchecked(): boolean;
        isUndetermined(): boolean;
        /**
         * Sets the checked state of the checkbox.
         * @param checked The checked state to set.
         */
        setChecked(checked: boolean|null): void;
        /**
         * Sets the checked state for the checkbox.  Unlike {@link #setChecked},
         * doesn't update the checkbox's DOM.  Considered protected; to be
         * called only by renderer code during element decoration.
         * @param checked New checkbox state.
         */
        setCheckedInternal(checked: ಠ_ಠ.clutz.goog.ui.Checkbox.State): void;
        /**
         * Fix for tabindex not being updated so that disabled checkbox is not
         * focusable. In particular this fails in Chrome.
         * Note: in general tabIndex=-1 will prevent from keyboard focus but
         * enables mouse focus, however in this case the control class prevents
         * mouse focus.
         */
        setEnabled(enabled: boolean): void;
        /**
         * Binds an HTML element to the checkbox which if clicked toggles the
         * checkbox. Behaves the same way as the 'label' HTML tag. The label
         * element has to be the direct or non-direct ancestor of the checkbox
         * element because it will get the focus when keyboard support is
         * implemented. Note: Control#enterDocument also sets aria-label on the
         * element but Checkbox#enterDocument sets aria-labeledby on the same
         * element which overrides the aria-label in all modern screen readers.
         * @param label The label control to set. If null, only the checkbox
         * reacts to clicks.
         */
        setLabel(label: GlobalElement|null): void;
        /**
         * Toggles the checkbox. State transitions:
         * <ul>
         * <li>unchecked -> checked
         * <li>undetermined -> checked
         * <li>checked -> unchecked
         * </ul>
         */
        toggle(): void;
    }
}
declare module 'goog:goog.ui.Checkbox' {
    import alias = ಠ_ಠ.clutz.goog.ui.Checkbox;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.Checkbox {
    /**
     * Possible checkbox states.
     */
    type State = boolean|null&{clutzEnumBrand: never};
    var State: {
        CHECKED: State,
        UNCHECKED: State,
        UNDETERMINED: State,
    };
}
declare module 'goog:goog.ui.Checkbox.State' {
    import alias = ಠ_ಠ.clutz.goog.ui.Checkbox.State;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Default renderer for {@link goog.ui.Checkbox}s.  Extends the superclass
     * to support checkbox states:
     */
    class CheckboxRenderer extends CheckboxRenderer_Instance {
        /**
         * Default CSS class to be applied to the root element of components
         * rendered by this renderer.
         */
        static CSS_CLASS: string;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.CheckboxRenderer;
        static instance_: ಠ_ಠ.clutz.goog.ui.CheckboxRenderer;
    }
    class CheckboxRenderer_Instance extends
        ಠ_ಠ.clutz.goog.ui.ControlRenderer_Instance {
        createDom(checkbox: ಠ_ಠ.clutz.goog.ui.Control|null): GlobalElement|null;
        decorate(
            checkbox: ಠ_ಠ.clutz.goog.ui.Control|null,
            element: GlobalElement|null): GlobalElement|null;
        /**
         * Returns the ARIA role to be applied to checkboxes.
         */
        getAriaRole(): ಠ_ಠ.clutz.goog.a11y.aria.Role;
        /**
         * Takes a single {@link goog.ui.Checkbox.State}, and returns the
         * corresponding CSS class name.
         * @param state Checkbox state.
         */
        getClassForCheckboxState(state: ಠ_ಠ.clutz.goog.ui.Checkbox.State):
            string;
        getCssClass(): string;
        /**
         * Updates the appearance of the control in response to a checkbox state
         * change.
         * @param element Checkbox element.
         * @param state Updated checkbox state.
         */
        setCheckboxState(
            element: GlobalElement|null,
            state: ಠ_ಠ.clutz.goog.ui.Checkbox.State): void;
    }
}
declare module 'goog:goog.ui.CheckboxRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.CheckboxRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * A color menu button control.  Extends {@link goog.ui.MenuButton} by
     * adding an API for getting and setting the currently selected color from a
     * menu of color palettes.
     */
    class ColorMenuButton extends ColorMenuButton_Instance {
        /**
         * Value for the "no color" menu item object in the color menu (if
         * present). The {@link goog.ui.ColorMenuButton#handleMenuAction} method
         * interprets ACTION events dispatched by an item with this value as
         * meaning "clear the selected color."
         */
        static NO_COLOR: string;
        /**
         * Default color palettes.
         */
        static PALETTES: GlobalObject;
        /**
         * Factory method that creates and returns a new {@link goog.ui.Menu}
         * instance containing default color palettes.
         * @param opt_extraItems Optional extra menu items to add before the
         * color palettes.
         * @param opt_domHelper Optional DOM helper, used for document
         * interaction.
         */
        static newColorMenu(
            opt_extraItems?: (ಠ_ಠ.clutz.goog.ui.Control|null)[]|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|
            null): ಠ_ಠ.clutz.goog.ui.Menu;
    }
    class ColorMenuButton_Instance extends
        ಠ_ಠ.clutz.goog.ui.MenuButton_Instance {
        /**
         * A color menu button control.  Extends {@link goog.ui.MenuButton} by
         * adding an API for getting and setting the currently selected color
         * from a menu of color palettes.
         * @param content Text caption or existing DOM structure to display as
         * the button's caption.
         * @param opt_menu Menu to render under the button when clicked; should
         * contain at least one {@link goog.ui.ColorPalette} if present.
         * @param opt_renderer Button renderer; defaults to {@link
         * goog.ui.ColorMenuButtonRenderer}.
         * @param opt_domHelper Optional DOM helper, used for document
         * interaction.
         */
        constructor(
            content: string|Node|null|Node[]|NodeListOf<Node>,
            opt_menu?: ಠ_ಠ.clutz.goog.ui.Menu|null,
            opt_renderer?: ಠ_ಠ.clutz.goog.ui.MenuButtonRenderer|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * Returns the currently selected color (null if none).
         */
        getSelectedColor(): string;
        /**
         * Handles {@link goog.ui.Component.EventType.ACTION} events dispatched
         * by the menu item clicked by the user.  Updates the button, calls the
         * superclass implementation to hide the menu, stops the propagation of
         * the event, and dispatches an ACTION event on behalf of the button
         * itself.  Overrides
         * {@link goog.ui.MenuButton#handleMenuAction}.
         * @param e Action event to handle.
         */
        handleMenuAction(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Opens or closes the menu.  Overrides {@link
         * goog.ui.MenuButton#setOpen} by generating a default color menu on the
         * fly if needed.
         * @param open Whether to open or close the menu.
         * @param opt_e Mousedown event that caused the menu to be opened.
         */
        setOpen(open: boolean, opt_e?: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Sets the selected color, or clears the selected color if the argument
         * is null or not any of the available color choices.
         * @param color New color.
         */
        setSelectedColor(color: string|null): void;
        /**
         * Sets the value associated with the color menu button.  Overrides
         * {@link goog.ui.Button#setValue} by interpreting the value as a color
         * spec string.
         * @param value New button value; should be a color spec string.
         */
        setValue(value: any): void;
    }
}
declare module 'goog:goog.ui.ColorMenuButton' {
    import alias = ಠ_ಠ.clutz.goog.ui.ColorMenuButton;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Renderer for {@link goog.ui.ColorMenuButton}s.
     */
    class ColorMenuButtonRenderer extends ColorMenuButtonRenderer_Instance {
        /**
         * Default CSS class to be applied to the root element of components
         * rendered by this renderer.
         */
        static CSS_CLASS: string;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.ColorMenuButtonRenderer;
        static instance_: ಠ_ಠ.clutz.goog.ui.ColorMenuButtonRenderer;
        /**
         * Takes a control's content element and a value object (which is
         * assumed to be a color), and updates its DOM to reflect the new color.
         * @param caption A content element of a control.
         * @param value New value; assumed to be a color spec string.
         */
        static setCaptionValue(caption: GlobalElement|null, value: any): void;
        /**
         * Wrap a caption in a div with the color-menu-button-indicator CSS
         * class.
         * @param content Text caption or DOM structure.
         * @param dom DOM helper, used for document interaction.
         */
        static wrapCaption(
            content: string|Node|null|Node[]|NodeListOf<Node>,
            dom: ಠ_ಠ.clutz.goog.dom.DomHelper|null): GlobalElement;
    }
    class ColorMenuButtonRenderer_Instance extends
        ಠ_ಠ.clutz.goog.ui.MenuButtonRenderer_Instance {
        /**
         * Overrides the superclass implementation by wrapping the caption text
         * or DOM structure in a color indicator element.  Creates the following
         * DOM structure:
         *
         * <div class="goog-inline-block goog-menu-button-caption">
         * <div class="goog-color-menu-button-indicator">
         * Contents...
         * </div>
         * </div>
         *
         * The 'goog-color-menu-button-indicator' style should be defined to
         * have a bottom border of nonzero width and a default color that blends
         * into its background.
         * @param content Text caption or DOM structure.
         * @param dom DOM helper, used for document interaction.
         */
        createCaption(
            content: string|Node|null|Node[]|NodeListOf<Node>,
            dom: ಠ_ಠ.clutz.goog.dom.DomHelper|null): GlobalElement|null;
        /**
         * Initializes the button's DOM when it enters the document.  Overrides
         * the superclass implementation by making sure the button's color
         * indicator is initialized.
         * @param button goog.ui.ColorMenuButton whose DOM is to be initialized
         * as it enters the document.
         */
        initializeDom(button: ಠ_ಠ.clutz.goog.ui.Control|null): void;
        /**
         * Takes a color menu button control's root element and a value object
         * (which is assumed to be a color), and updates the button's DOM to
         * reflect the new color.  Overrides {@link
         * goog.ui.ButtonRenderer#setValue}.
         * @param element The button control's root element (if rendered).
         * @param value New value; assumed to be a color spec string.
         */
        setValue(element: GlobalElement|null, value: any): any;
    }
}
declare module 'goog:goog.ui.ColorMenuButtonRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.ColorMenuButtonRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * A color palette is a grid of color swatches that the user can highlight
     * or select via the keyboard or the mouse.  The selection state of the
     * palette is controlled by a selection model.  When the user makes a
     * selection, the component fires an ACTION event.  Event listeners may
     * retrieve the selected color using the {@link #getSelectedColor} method.
     */
    class ColorPalette extends ColorPalette_Instance {}
    class ColorPalette_Instance extends ಠ_ಠ.clutz.goog.ui.Palette_Instance {
        /**
         * A color palette is a grid of color swatches that the user can
         * highlight or select via the keyboard or the mouse.  The selection
         * state of the palette is controlled by a selection model.  When the
         * user makes a selection, the component fires an ACTION event.  Event
         * listeners may retrieve the selected color using the {@link
         * #getSelectedColor} method.
         * @param opt_colors Array of colors in any valid CSS color format.
         * @param opt_renderer Renderer used to render or decorate the palette;
         * defaults to {@link goog.ui.PaletteRenderer}.
         * @param opt_domHelper Optional DOM helper, used for document
         * interaction.
         */
        constructor(
            opt_colors?: string[]|null,
            opt_renderer?: ಠ_ಠ.clutz.goog.ui.PaletteRenderer|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        createColorNodes(): Node[];
        /**
         * Returns the array of colors represented in the color palette.
         */
        getColors(): string[]|null;
        getSelectedColor(): string|null;
        /**
         * Sets the colors that are contained in the palette.
         * @param colors Array of colors in any valid CSS color format.
         * @param opt_labels The array of labels to be used as tooltips. When
         * not provided, the color value will be used.
         */
        setColors(colors: string[]|null, opt_labels?: string[]|null): void;
        /**
         * Sets the selected color.  Clears the selection if the argument is
         * null or can't be parsed as a color.
         * @param color The color to set as selected; null clears the selection.
         */
        setSelectedColor(color: string|null): void;
    }
}
declare module 'goog:goog.ui.ColorPalette' {
    import alias = ಠ_ಠ.clutz.goog.ui.ColorPalette;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Create a new, empty color picker.
     */
    class ColorPicker extends ColorPicker_Instance {
        /**
         * Default number of columns in the color palette. May be overridden by
         * calling setSize.
         */
        static DEFAULT_NUM_COLS: number;
        /**
         * Array of colors for a 7-cell wide simple-grid color picker.
         */
        static SIMPLE_GRID_COLORS: string[]|null;
        /**
         * Returns an unrendered instance of the color picker.  The colors and
         * layout are a simple color grid, the same as the old Gmail color
         * picker.
         * @param opt_domHelper Optional DOM helper.
         */
        static createSimpleColorGrid(opt_domHelper?:
                                         ಠ_ಠ.clutz.goog.dom.DomHelper|
                                     null): ಠ_ಠ.clutz.goog.ui.ColorPicker;
    }
    class ColorPicker_Instance extends ಠ_ಠ.clutz.goog.ui.Component_Instance {
        /**
         * Create a new, empty color picker.
         * @param opt_domHelper Optional DOM helper.
         * @param opt_colorPalette Optional color palette to use for this color
         * picker.
         */
        constructor(
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null,
            opt_colorPalette?: ಠ_ಠ.clutz.goog.ui.ColorPalette|null);
        /**
         * Sets the array of colors to be displayed by the color picker.
         * @param colors The array of colors to be added.
         */
        addColors(colors: string[]|null): void;
        /**
         * ColorPickers cannot be used to decorate pre-existing html, since the
         * structure they build is fairly complicated.
         * @param element Element to decorate.
         */
        canDecorate(element: GlobalElement|null): boolean;
        disposeInternal(): void;
        /**
         * Renders the color picker inside the provided element. This will
         * override the current content of the element.
         */
        enterDocument(): void;
        /**
         * Sets the focus to the color picker's palette.
         */
        focus(): void;
        /**
         * Gets the array of colors displayed by the color picker.
         * Modifying this array will lead to unexpected behavior.
         */
        getColors(): string[]|null;
        /**
         * Gets the color that is currently selected in this color picker.
         */
        getSelectedColor(): string|null;
        getSelectedIndex(): number;
        /**
         * Gets the number of columns displayed.
         */
        getSize(): ಠ_ಠ.clutz.goog.math.Size|null;
        /**
         * Returns true if the component is focusable, false otherwise.  The
         * default is true.  Focusable components always have a tab index and
         * allocate a key handler to handle keyboard events while focused.
         */
        isFocusable(): boolean;
        /**
         * Sets the array of colors to be displayed by the color picker.
         * @param colors The array of colors to be added.
         */
        setColors(colors: string[]|null): void;
        /**
         * Sets the number of columns.  Will throw an error after the picker has
         * been rendered.
         * @param n The number of columns.
         */
        setColumnCount(n: number): void;
        /**
         * Sets whether the component is focusable.  The default is true.
         * Focusable components always have a tab index and allocate a key
         * handler to handle keyboard events while focused.
         * @param focusable True iff the component is focusable.
         */
        setFocusable(focusable: boolean): void;
        /**
         * Sets which color is selected.  Noop if the color palette hasn't been
         * created yet.
         * @param color The selected color.
         */
        setSelectedColor(color: string): void;
        /**
         * Sets which color is selected. A value that is out-of-range means that
         * no color is selected.
         * @param ind The index in this.colors_ of the selected color.
         */
        setSelectedIndex(ind: number): void;
        /**
         * Sets the size of the palette.  Will throw an error after the picker
         * has been rendered.
         * @param size The size of the grid.
         */
        setSize(size: ಠ_ಠ.clutz.goog.math.Size|null|number): void;
    }
}
declare module 'goog:goog.ui.ColorPicker' {
    import alias = ಠ_ಠ.clutz.goog.ui.ColorPicker;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.ColorPicker {
    /**
     * Constants for event names.
     */
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        CHANGE: EventType,
    };
}
declare module 'goog:goog.ui.ColorPicker.EventType' {
    import alias = ಠ_ಠ.clutz.goog.ui.ColorPicker.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * A ComboBox control.
     */
    class ComboBox extends ComboBox_Instance {
        /**
         * Number of milliseconds to wait before dismissing combobox after blur.
         */
        static BLUR_DISMISS_TIMER_MS: number;
    }
    class ComboBox_Instance extends ಠ_ಠ.clutz.goog.ui.Component_Instance {
        /**
         * A ComboBox control.
         * @param opt_domHelper Optional DOM helper.
         * @param opt_menu Optional menu component. This menu is disposed of by
         * this control.
         * @param opt_labelInput Optional label input. This label input is
         * disposed of by this control.
         */
        constructor(
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null,
            opt_menu?: ಠ_ಠ.clutz.goog.ui.Menu|null,
            opt_labelInput?: ಠ_ಠ.clutz.goog.ui.LabelInput|null);
        /**
         * Adds a new menu item at the end of the menu.
         * @param item Menu item to add to the menu.
         */
        addItem(item: ಠ_ಠ.clutz.goog.ui.MenuItem|null): void;
        /**
         * Adds a new menu item at a specific index in the menu.
         * @param item Menu item to add to the menu.
         * @param n Index at which to insert the menu item.
         */
        addItemAt(item: ಠ_ಠ.clutz.goog.ui.MenuItem|null, n: number): void;
        /**
         * Combo box currently can't decorate elements.
         */
        canDecorate(a?: GlobalElement|null): boolean;
        /**
         * Create the DOM objects needed for the combo box.  A span and text
         * input.
         */
        createDom(): void;
        /**
         * Dismisses the menu and resets the value of the edit field.
         */
        dismiss(): void;
        disposeInternal(): void;
        enterDocument(): void;
        exitDocument(): void;
        getDefaultText(): string;
        getFieldName(): string;
        getInputElement(): GlobalElement|null;
        /**
         * Returns a reference to the menu item at a given index.
         * @param n Index of menu item.
         */
        getItemAt(n: number): ಠ_ಠ.clutz.goog.ui.MenuItem|null;
        /**
         * Returns the number of items in the list, including non-visible items,
         * such as separators.
         */
        getItemCount(): number;
        getLabelInput(): ಠ_ಠ.clutz.goog.ui.LabelInput|null;
        getMatchFunction(): (...a: any[]) => any;
        getMenu(): ಠ_ಠ.clutz.goog.ui.Menu|null;
        getToken(): string;
        getValue(): string;
        /**
         * Handles keyboard events from the input box.  Returns true if the
         * combo box was able to handle the event, false otherwise.
         * @param e Key event to handle.
         */
        handleKeyEvent(e: ಠ_ಠ.clutz.goog.events.KeyEvent|null): boolean;
        isEnabled(): boolean;
        /**
         * Positions the menu.
         */
        positionMenu(): void;
        /**
         * Remove all of the items from the ComboBox menu
         */
        removeAllItems(): void;
        /**
         * Removes an item from the menu and disposes it.
         * @param item The menu item to remove.
         */
        removeItem(item: ಠ_ಠ.clutz.goog.ui.MenuItem|null): void;
        /**
         * Removes a menu item at a given index in the menu.
         * @param n Index of item.
         */
        removeItemAt(n: number): void;
        /**
         * Sets the default text for the combo box.
         * @param text The default text for the combo box.
         */
        setDefaultText(text: string): void;
        /**
         * Enables/Disables the combo box.
         * @param enabled Whether to enable (true) or disable (false) the combo
         * box.
         */
        setEnabled(enabled: boolean): void;
        /**
         * Sets the field name for the combo box.
         * @param fieldName The field name for the combo box.
         */
        setFieldName(fieldName: string): void;
        /**
         * Sets the match function to be used when filtering the combo box menu.
         * @param matchFunction The match function to be used when filtering the
         * combo box menu.
         */
        setMatchFunction(matchFunction: (...a: any[]) => any): void;
        /**
         * Set to true if a unicode inverted triangle should be displayed in the
         * dropdown button.
         * This option defaults to false for backwards compatibility.
         * @param useDropdownArrow True to use the dropdown arrow.
         */
        setUseDropdownArrow(useDropdownArrow: boolean): void;
        /**
         * Sets the current value of the combo box.
         * @param value The new value.
         */
        setValue(value: string): void;
    }
}
declare module 'goog:goog.ui.ComboBox' {
    import alias = ಠ_ಠ.clutz.goog.ui.ComboBox;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Class for combo box items.
     */
    class ComboBoxItem extends ComboBoxItem_Instance {}
    class ComboBoxItem_Instance extends ಠ_ಠ.clutz.goog.ui.MenuItem_Instance {
        /**
         * Class for combo box items.
         * @param content Text caption or DOM structure to display as the
         * content of the item (use to add icons or styling to menus).
         * @param opt_data Identifying data for the menu item.
         * @param opt_domHelper Optional dom helper used for dom interactions.
         * @param opt_renderer Optional renderer.
         */
        constructor(
            content: string|Node|null|Node[]|NodeListOf<Node>, opt_data?: any,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null,
            opt_renderer?: ಠ_ಠ.clutz.goog.ui.MenuItemRenderer|null);
        isSticky(): boolean;
        /**
         * Sets the format for a menu item based on a token, bolding the token.
         * @param token The token.
         */
        setFormatFromToken(token: string): void;
        /**
         * Sets the menu item to be sticky or not sticky.
         * @param sticky Whether the menu item should be sticky.
         */
        setSticky(sticky: boolean): void;
    }
}
declare module 'goog:goog.ui.ComboBoxItem' {
    import alias = ಠ_ಠ.clutz.goog.ui.ComboBoxItem;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Default implementation of UI component.
     */
    class Component extends Component_Instance {
        static ALLOW_DETACHED_DECORATION: boolean;
        static DEFAULT_BIDI_DIR: number;
        /**
         * Static helper method; returns the type of event components are
         * expected to dispatch when transitioning to or from the given state.
         * @param state State to/from which the component is transitioning.
         * @param isEntering Whether the component is entering or leaving the
         * state.
         */
        static getStateTransitionEvent(
            state: ಠ_ಠ.clutz.goog.ui.Component.State,
            isEntering: boolean): ಠ_ಠ.clutz.goog.ui.Component.EventType;
        /**
         * Set the default right-to-left value. This causes all component's
         * created from this point forward to have the given value. This is
         * useful for cases where a given page is always in one directionality,
         * avoiding unnecessary right to left determinations.
         * @param rightToLeft Whether the components should be rendered
         * right-to-left. Null iff components should determine their
         * directionality.
         */
        static setDefaultRightToLeft(rightToLeft: boolean|null): void;
    }
    class Component_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * Default implementation of UI component.
         * @param opt_domHelper Optional DOM helper.
         */
        constructor(opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * DomHelper used to interact with the document, allowing components to
         * be created in a different window.
         */
        dom_: ಠ_ಠ.clutz.goog.dom.DomHelper;
        /**
         * Adds the specified component as the last child of this component. See
         * {@link goog.ui.Component#addChildAt} for detailed semantics.
         * @param child The new child component.
         * @param opt_render If true, the child component will be rendered into
         * the parent.
         */
        addChild(child: ಠ_ಠ.clutz.goog.ui.Component|null, opt_render?: boolean):
            void;
        /**
         * Adds the specified component as a child of this component at the
         * given 0-based index.
         *
         * Both {@code addChild} and {@code addChildAt} assume the following
         * contract between parent and child components: <ul> <li>the child
         * component's element must be a descendant of the parent component's
         * element, and <li>the DOM state of the child component must be
         * consistent with the DOM state of the parent component (see {@code
         * isInDocument}) in the steady state -- the exception is to
         * addChildAt(child, i, false) and then immediately decorate/render the
         * child.
         * </ul>
         *
         * In particular, {@code parent.addChild(child)} will throw an error if
         * the child component is already in the document, but the parent isn't.
         *
         * Clients of this API may call {@code addChild} and {@code addChildAt}
         * with
         * {@code opt_render} set to true.  If {@code opt_render} is true,
         * calling these methods will automatically render the child component's
         * element into the parent component's element. If the parent does not
         * yet have an element, then
         * {@code createDom} will automatically be invoked on the parent before
         * rendering the child.
         *
         * Invoking {@code parent.addChild(child, true)} will throw an error if
         * the child component is already in the document, regardless of the
         * parent's DOM state.
         *
         * If {@code opt_render} is true and the parent component is not already
         * in the document, {@code enterDocument} will not be called on this
         * component at this point.
         *
         * Finally, this method also throws an error if the new child already
         * has a different parent, or the given index is out of bounds.
         * @param child The new child component.
         * @param index 0-based index at which the new child component is to be
         * added; must be between 0 and the current child count (inclusive).
         * @param opt_render If true, the child component will be rendered into
         * the parent.
         */
        addChildAt(
            child: ಠ_ಠ.clutz.goog.ui.Component|null, index: number,
            opt_render?: boolean): void;
        /**
         * Determines if a given element can be decorated by this type of
         * component. This method should be overridden by inheriting objects.
         * @param element Element to decorate.
         */
        canDecorate(element: GlobalElement|null): boolean;
        /**
         * Creates the initial DOM representation for the component.  The
         * default implementation is to set this.element_ = div.
         */
        createDom(): void;
        /**
         * Decorates the element for the UI component. If the element is in the
         * document, the enterDocument method will be called.
         *
         * If goog.ui.Component.ALLOW_DETACHED_DECORATION is false, the caller
         * must pass an element that is in the document.
         * @param element Element to decorate.
         */
        decorate(element: GlobalElement|null): void;
        /**
         * Actually decorates the element. Should be overridden by inheriting
         * objects. This method can assume there are checks to ensure the
         * component has not already been rendered have occurred and that enter
         * document will be called afterwards. This method is considered
         * protected.
         * @param element Element to decorate.
         */
        decorateInternal(element: GlobalElement|null): void;
        /**
         * Disposes of the component.  Calls {@code exitDocument}, which is
         * expected to remove event handlers and clean up the component.
         * Propagates the call to the component's children, if any. Removes the
         * component's DOM from the document unless it was decorated.
         */
        disposeInternal(): void;
        /**
         * Called when the component's element is known to be in the document.
         * Anything using document.getElementById etc. should be done at this
         * stage.
         *
         * If the component contains child components, this call is propagated
         * to its children.
         */
        enterDocument(): void;
        /**
         * Called by dispose to clean up the elements and listeners created by a
         * component, or by a parent component/application who has removed the
         * component from the document but wants to reuse it later.
         *
         * If the component contains child components, this call is propagated
         * to its children.
         *
         * It should be possible for the component to be rendered again once
         * this method has been called.
         */
        exitDocument(): void;
        /**
         * Calls the given function on each of this component's children in
         * order.  If
         * {@code opt_obj} is provided, it will be used as the 'this' object in
         * the function when called.  The function should take two arguments:
         * the child component and its 0-based index.  The return value is
         * ignored.
         * @param f The function to call for every child component; should take
         * 2 arguments (the child and its index).
         * @param opt_obj Used as the 'this' object in f when called.
         */
        forEachChild<T = any>(f: (a: any, b: number) => any, opt_obj?: T): void;
        /**
         * Returns the child with the given ID, or null if no such child exists.
         * @param id Child component ID.
         */
        getChild(id: string): ಠ_ಠ.clutz.goog.ui.Component|null;
        /**
         * Returns the child at the given index, or null if the index is out of
         * bounds.
         * @param index 0-based index.
         */
        getChildAt(index: number): ಠ_ಠ.clutz.goog.ui.Component|null;
        /**
         * Returns the number of children of this component.
         */
        getChildCount(): number;
        /**
         * Returns an array containing the IDs of the children of this
         * component, or an empty array if the component has no children.
         */
        getChildIds(): string[];
        /**
         * Returns the DOM element into which child components are to be
         * rendered, or null if the component itself hasn't been rendered yet.
         * This default implementation returns the component's root element.
         * Subclasses with complex DOM structures must override this method.
         */
        getContentElement(): GlobalElement|null;
        /**
         * Returns the dom helper that is being used on this component.
         */
        getDomHelper(): ಠ_ಠ.clutz.goog.dom.DomHelper;
        /**
         * Gets the component's element.
         */
        getElement(): GlobalElement|null;
        /**
         * Returns the first element in this component's DOM with the provided
         * className.
         * @param className The name of the class to look for.
         */
        getElementByClass(className: string): GlobalElement|null;
        /**
         * Helper function for returning an element in the document with a
         * unique id generated using makeId().
         * @param idFragment The partial id.
         */
        getElementByFragment(idFragment: string): GlobalElement|null;
        /**
         * Gets the component's element. This differs from getElement in that
         * it assumes that the element exists (i.e. the component has been
         * rendered/decorated) and will cause an assertion error otherwise (if
         * assertion is enabled).
         */
        getElementStrict(): GlobalElement;
        /**
         * Returns an array of all the elements in this component's DOM with the
         * provided className.
         * @param className The name of the class to look for.
         */
        getElementsByClass(className: string): ArrayLike<GlobalElement>;
        /**
         * Helper function for returning the fragment portion of an id generated
         * using makeId().
         * @param id Id generated with makeId().
         */
        getFragmentFromId(id: string): string;
        /**
         * Returns the event handler for this component, lazily created the
         * first time this method is called.
         */
        getHandler(): ಠ_ಠ.clutz.goog.events.EventHandler<this>;
        /**
         * Gets the unique ID for the instance of this component.  If the
         * instance doesn't already have an ID, generates one on the fly.
         */
        getId(): string;
        /**
         * Returns the model associated with the UI component.
         */
        getModel(): any;
        /**
         * Returns the component's parent, if any.
         */
        getParent(): ಠ_ಠ.clutz.goog.ui.Component|null;
        /**
         * Similar to {@code getElementByClass} except that it expects the
         * element to be present in the dom thus returning a required value.
         * Otherwise, will assert.
         * @param className The name of the class to look for.
         */
        getRequiredElementByClass(className: string): GlobalElement;
        /**
         * Returns true if the component has children.
         */
        hasChildren(): boolean;
        /**
         * Returns the 0-based index of the given child component, or -1 if no
         * such child is found.
         * @param child The child component.
         */
        indexOfChild(child: ಠ_ಠ.clutz.goog.ui.Component|null): number;
        /**
         * Determines whether the component has been added to the document.
         */
        isInDocument(): boolean;
        /**
         * Returns true if the component is rendered right-to-left, false
         * otherwise. The first time this function is invoked, the right-to-left
         * rendering property is set if it has not been already.
         */
        isRightToLeft(): boolean;
        /**
         * Helper function for subclasses that gets a unique id for a given
         * fragment, this can be used by components to generate unique string
         * ids for DOM elements.
         * @param idFragment A partial id.
         */
        makeId(idFragment: string): string;
        /**
         * Makes a collection of ids.  This is a convenience method for makeId.
         * The object's values are the id fragments and the new values are the
         * generated ids.  The key will remain the same.
         * @param object The object that will be used to create the ids.
         */
        makeIds<T extends { [k: string]: string }>(object: T): T;
        /**
         * Removes the given child from this component, and returns it.  Throws
         * an error if the argument is invalid or if the specified child isn't
         * found in the parent component.  The argument can either be a string
         * (interpreted as the ID of the child component to remove) or the child
         * component itself.
         *
         * If {@code opt_unrender} is true, calls {@link
         * goog.ui.component#exitDocument} on the removed child, and
         * subsequently detaches the child's DOM from the document.  Otherwise
         * it is the caller's responsibility to clean up the child component's
         * DOM.
         * @param child The ID of the child to remove, or the child component
         * itself.
         * @param opt_unrender If true, calls {@code exitDocument} on the
         * removed child component, and detaches its DOM from the document.
         */
        removeChild(
            child: string|ಠ_ಠ.clutz.goog.ui.Component|null,
            opt_unrender?: boolean): ಠ_ಠ.clutz.goog.ui.Component|null;
        /**
         * Removes the child at the given index from this component, and returns
         * it. Throws an error if the argument is out of bounds, or if the
         * specified child isn't found in the parent.  See {@link
         * goog.ui.Component#removeChild} for detailed semantics.
         * @param index 0-based index of the child to remove.
         * @param opt_unrender If true, calls {@code exitDocument} on the
         * removed child component, and detaches its DOM from the document.
         */
        removeChildAt(index: number, opt_unrender?: boolean):
            ಠ_ಠ.clutz.goog.ui.Component|null;
        /**
         * Removes every child component attached to this one and returns them.
         * @param opt_unrender If true, calls {@link #exitDocument} on the
         * removed child components, and detaches their DOM from the document.
         */
        removeChildren(opt_unrender?: boolean): (ಠ_ಠ.clutz.goog.ui.Component|
                                                 null)[];
        /**
         * Renders the component.  If a parent element is supplied, the
         * component's element will be appended to it.  If there is no optional
         * parent element and the element doesn't have a parentNode then it will
         * be appended to the document body.
         *
         * If this component has a parent component, and the parent component is
         * not in the document already, then this will not call {@code
         * enterDocument} on this component.
         *
         * Throws an Error if the component is already rendered.
         * @param opt_parentElement Optional parent element to render the
         * component into.
         */
        render(opt_parentElement?: GlobalElement|null): void;
        /**
         * Renders the component before another element. The other element
         * should be in the document already.
         *
         * Throws an Error if the component is already rendered.
         * @param sibling Node to render the component before.
         */
        renderBefore(sibling: Node|null): void;
        /**
         * Sets the component's root element to the given element.  Considered
         * protected and final.
         *
         * This should generally only be called during createDom. Setting the
         * element does not actually change which element is rendered, only the
         * element that is associated with this UI component.
         *
         * This should only be used by subclasses and its associated renderers.
         * @param element Root element for the component.
         */
        setElementInternal(element: GlobalElement|null): void;
        /**
         * Assigns an ID to this component instance.  It is the caller's
         * responsibility to guarantee that the ID is unique.  If the component
         * is a child of a parent component, then the parent component's child
         * index is updated to reflect the new ID; this may throw an error if
         * the parent already has a child with an ID that conflicts with the new
         * ID.
         * @param id Unique component ID.
         */
        setId(id: string): void;
        /**
         * Sets the model associated with the UI component.
         * @param obj The model.
         */
        setModel(obj: any): void;
        /**
         * Sets the parent of this component to use for event bubbling.  Throws
         * an error if the component already has a parent or if an attempt is
         * made to add a component to itself as a child.  Callers must use
         * {@code removeChild} or {@code removeChildAt} to remove components
         * from their containers before calling this method.
         * @param parent The parent component.
         */
        setParent(parent: ಠ_ಠ.clutz.goog.ui.Component|null): void;
        /**
         * Overrides {@link goog.events.EventTarget#setParentEventTarget} to
         * throw an error if the parent component is set, and the argument is
         * not the parent.
         */
        setParentEventTarget(parent: ಠ_ಠ.clutz.goog.events.EventTarget|
                             null): void;
        /**
         * Set is right-to-left. This function should be used if the component
         * needs to know the rendering direction during dom creation (i.e.
         * before
         * {@link #enterDocument} is called and is right-to-left is set).
         * @param rightToLeft Whether the component is rendered right-to-left.
         */
        setRightToLeft(rightToLeft: boolean): void;
        wasDecorated(): boolean;
    }
}
declare module 'goog:goog.ui.Component' {
    import alias = ಠ_ಠ.clutz.goog.ui.Component;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.Component {
    /**
     * Errors thrown by the component.
     */
    type Error = string&{clutzEnumBrand: never};
    var Error: {
        ALREADY_RENDERED: Error,
        CHILD_INDEX_OUT_OF_BOUNDS: Error,
        DECORATE_INVALID: Error,
        NOT_IN_DOCUMENT: Error,
        NOT_OUR_CHILD: Error,
        NOT_SUPPORTED: Error,
        PARENT_UNABLE_TO_BE_SET: Error,
        STATE_INVALID: Error,
    };
}
declare module 'goog:goog.ui.Component.Error' {
    import alias = ಠ_ಠ.clutz.goog.ui.Component.Error;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.Component {
    /**
     * Common events fired by components so that event propagation is useful.
     * Not all components are expected to dispatch or listen for all event
     * types. Events dispatched before a state transition should be cancelable
     * to prevent the corresponding state change.
     */
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        ACTION: EventType,
        ACTIVATE: EventType,
        BEFORE_SHOW: EventType,
        BLUR: EventType,
        CHANGE: EventType,
        CHECK: EventType,
        CLOSE: EventType,
        DEACTIVATE: EventType,
        DISABLE: EventType,
        ENABLE: EventType,
        ENTER: EventType,
        FOCUS: EventType,
        HIDE: EventType,
        HIGHLIGHT: EventType,
        LEAVE: EventType,
        OPEN: EventType,
        SELECT: EventType,
        SHOW: EventType,
        UNCHECK: EventType,
        UNHIGHLIGHT: EventType,
        UNSELECT: EventType,
    };
}
declare module 'goog:goog.ui.Component.EventType' {
    import alias = ಠ_ಠ.clutz.goog.ui.Component.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.Component {
    /**
     * Common component states.  Components may have distinct appearance
     * depending on what state(s) apply to them.  Not all components are
     * expected to support all states.
     */
    enum State {
        ACTIVE,
        ALL,
        CHECKED,
        DISABLED,
        FOCUSED,
        HOVER,
        OPENED,
        SELECTED,
    }
}
declare module 'goog:goog.ui.Component.State' {
    import alias = ಠ_ಠ.clutz.goog.ui.Component.State;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Base class for containers.  Extends {@link goog.ui.Component} by adding
     * the following:
     * <ul>
     * <li>a {@link goog.events.KeyHandler}, to simplify keyboard handling,
     * <li>a pluggable <em>renderer</em> framework, to simplify the creation of
     * containers without the need to subclass this class,
     * <li>methods to manage child controls hosted in the container,
     * <li>default mouse and keyboard event handling methods.
     * </ul>
     */
    class Container extends Container_Instance {}
    class Container_Instance extends ಠ_ಠ.clutz.goog.ui.Component_Instance {
        /**
         * Base class for containers.  Extends {@link goog.ui.Component} by
         * adding the following: <ul> <li>a {@link goog.events.KeyHandler}, to
         * simplify keyboard handling, <li>a pluggable <em>renderer</em>
         * framework, to simplify the creation of containers without the need to
         * subclass this class, <li>methods to manage child controls hosted in
         * the container, <li>default mouse and keyboard event handling methods.
         * </ul>
         * @param opt_orientation Container orientation; defaults to {@code
         * VERTICAL}.
         * @param opt_renderer Renderer used to render or decorate the
         * container; defaults to {@link goog.ui.ContainerRenderer}.
         * @param opt_domHelper DOM helper, used for document interaction.
         */
        constructor(
            opt_orientation?: ಠ_ಠ.clutz.goog.ui.Container.Orientation|null,
            opt_renderer?: ಠ_ಠ.clutz.goog.ui.ContainerRenderer|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * Adds the specified control as the last child of this container.  See
         * {@link goog.ui.Container#addChildAt} for detailed semantics.
         * @param child The new child control.
         * @param opt_render Whether the new child should be rendered
         * immediately after being added (defaults to false).
         */
        addChild(child: ಠ_ಠ.clutz.goog.ui.Component|null, opt_render?: boolean):
            void;
        /**
         * Adds the control as a child of this container at the given 0-based
         * index. Overrides {@link goog.ui.Component#addChildAt} by also
         * updating the container's highlight index.  Since {@link
         * goog.ui.Component#addChild} uses
         * {@link #addChildAt} internally, we only need to override this method.
         * @param control New child.
         * @param index Index at which the new child is to be added.
         * @param opt_render Whether the new child should be rendered
         * immediately after being added (defaults to false).
         */
        addChildAt(
            control: ಠ_ಠ.clutz.goog.ui.Component|null, index: number,
            opt_render?: boolean): void;
        /**
         * Returns true if the given element can be decorated by this container.
         * Overrides {@link goog.ui.Component#canDecorate}.
         * @param element Element to decorate.
         */
        canDecorate(element: GlobalElement|null): boolean;
        /**
         * Returns whether the given item can be highlighted.
         * @param item The item to check.
         */
        canHighlightItem(item: ಠ_ಠ.clutz.goog.ui.Control|null): boolean;
        /**
         * Creates the container's DOM.
         */
        createDom(): void;
        /**
         * Decorates the given element with this container. Overrides {@link
         * goog.ui.Component#decorateInternal}.  Considered protected.
         * @param element Element to decorate.
         */
        decorateInternal(element: GlobalElement|null): void;
        disposeInternal(): void;
        /**
         * Configures the container after its DOM has been rendered, and sets up
         * event handling.  Overrides {@link goog.ui.Component#enterDocument}.
         */
        enterDocument(): void;
        /**
         * Cleans up the container before its DOM is removed from the document,
         * and removes event handlers.  Overrides {@link
         * goog.ui.Component#exitDocument}.
         */
        exitDocument(): void;
        /**
         * Overrides {@link goog.ui.Container#getChild} to make it clear that it
         * only returns {@link goog.ui.Control}s.
         * @param id Child component ID.
         */
        getChild(a: string): ಠ_ಠ.clutz.goog.ui.Control|null;
        /**
         * Overrides {@link goog.ui.Container#getChildAt} to make it clear that
         * it only returns {@link goog.ui.Control}s.
         * @param index 0-based index.
         */
        getChildAt(a: number): ಠ_ಠ.clutz.goog.ui.Control|null;
        /**
         * Returns the DOM element into which child components are to be
         * rendered, or null if the container itself hasn't been rendered yet.
         * Overrides
         * {@link goog.ui.Component#getContentElement} by delegating to the
         * renderer.
         */
        getContentElement(): GlobalElement|null;
        /**
         * Returns the currently highlighted item (if any).
         */
        getHighlighted(): ಠ_ಠ.clutz.goog.ui.Control|null;
        /**
         * Returns the index of the currently highlighted item (-1 if none).
         */
        getHighlightedIndex(): number;
        /**
         * Returns the DOM element on which the container is listening for
         * keyboard events (null if none).
         */
        getKeyEventTarget(): GlobalElement|null;
        /**
         * Returns the keyboard event handler for this container, lazily created
         * the first time this method is called.  The keyboard event handler
         * listens for keyboard events on the container's key event target, as
         * determined by its renderer.
         */
        getKeyHandler(): ಠ_ಠ.clutz.goog.events.KeyHandler;
        /**
         * Returns the currently open (expanded) control in the container (null
         * if none).
         */
        getOpenItem(): ಠ_ಠ.clutz.goog.ui.Control|null;
        /**
         * Returns the container's orientation.
         */
        getOrientation(): ಠ_ಠ.clutz.goog.ui.Container.Orientation|null;
        /**
         * Returns the child control that owns the given DOM node, or null if no
         * such control is found.
         * @param node DOM node whose owner is to be returned.
         */
        getOwnerControl(node: Node|null): ಠ_ಠ.clutz.goog.ui.Control|null;
        /**
         * Returns the renderer used by this container to render itself or to
         * decorate an existing element.
         */
        getRenderer(): ಠ_ಠ.clutz.goog.ui.ContainerRenderer|null;
        /**
         * Handles blur events raised when the container's key event target
         * loses keyboard focus.  The default implementation clears the
         * highlight index.
         * @param e Blur event to handle.
         */
        handleBlur(e: ಠ_ಠ.clutz.goog.events.BrowserEvent|null): void;
        /**
         * Handles mouse events originating from nodes belonging to the controls
         * hosted in the container.  Locates the child control based on the DOM
         * node that dispatched the event, and forwards the event to the control
         * for handling.
         * @param e Mouse event to handle.
         */
        handleChildMouseEvents(e: ಠ_ಠ.clutz.goog.events.BrowserEvent|
                               null): void;
        /**
         * Handles CLOSE events dispatched by items in the container when they
         * are closed.
         * @param e Close event to handle.
         */
        handleCloseItem(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Handles mouseup events over the document.  The default implementation
         * clears the "mouse button pressed" flag.
         * @param e Mouseup event to handle.
         */
        handleDocumentMouseUp(e: ಠ_ಠ.clutz.goog.events.BrowserEvent|null): void;
        /**
         * Handles ENTER events raised by child controls when they are navigated
         * to.
         * @param e ENTER event to handle.
         */
        handleEnterItem(e: ಠ_ಠ.clutz.goog.events.Event|null): boolean;
        /**
         * Handles focus events raised when the container's key event target
         * receives keyboard focus.
         * @param e Focus event to handle.
         */
        handleFocus(e: ಠ_ಠ.clutz.goog.events.BrowserEvent|null): void;
        /**
         * Handles HIGHLIGHT events dispatched by items in the container when
         * they are highlighted.
         * @param e Highlight event to handle.
         */
        handleHighlightItem(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Attempts to handle a keyboard event, if the control is enabled, by
         * calling
         * {@link handleKeyEventInternal}.  Considered protected; should only be
         * used within this package and by subclasses.
         * @param e Key event to handle.
         */
        handleKeyEvent(e: ಠ_ಠ.clutz.goog.events.KeyEvent|null): boolean;
        /**
         * Attempts to handle a keyboard event; returns true if the event was
         * handled, false otherwise.  If the container is enabled, and a child
         * is highlighted, calls the child control's {@code handleKeyEvent}
         * method to give the control a chance to handle the event first.
         * @param e Key event to handle.
         */
        handleKeyEventInternal(e: ಠ_ಠ.clutz.goog.events.KeyEvent|null): boolean;
        /**
         * Handles mousedown events over the container.  The default
         * implementation sets the "mouse button pressed" flag and, if the
         * container is focusable, grabs keyboard focus.
         * @param e Mousedown event to handle.
         */
        handleMouseDown(e: ಠ_ಠ.clutz.goog.events.BrowserEvent|null): void;
        /**
         * Handles OPEN events dispatched by items in the container when they
         * are opened.
         * @param e Open event to handle.
         */
        handleOpenItem(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Handles UNHIGHLIGHT events dispatched by items in the container when
         * they are unhighlighted.
         * @param e Unhighlight event to handle.
         */
        handleUnHighlightItem(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Highlights the first highlightable item in the container
         */
        highlightFirst(): void;
        /**
         * Helper function that manages the details of moving the highlight
         * among child controls in response to keyboard events.
         * @param fn Function that accepts the current and maximum indices, and
         * returns the next index to check.
         * @param startIndex Start index.
         */
        highlightHelper(
            fn: (a: number, b: number) => number, startIndex: number): boolean;
        /**
         * Highlights the last highlightable item in the container.
         */
        highlightLast(): void;
        /**
         * Highlights the next highlightable item (or the first if nothing is
         * currently highlighted).
         */
        highlightNext(): void;
        /**
         * Highlights the previous highlightable item (or the last if nothing is
         * currently highlighted).
         */
        highlightPrevious(): void;
        /**
         * Returns true if the container is enabled, false otherwise.
         */
        isEnabled(): boolean;
        /**
         * Returns true if the container is focusable, false otherwise.  The
         * default is true.  Focusable containers always have a tab index and
         * allocate a key handler to handle keyboard events while focused.
         */
        isFocusable(): boolean;
        /**
         * Returns true if the container allows children to be focusable, false
         * otherwise.  Only effective if the container is not focusable.
         */
        isFocusableChildrenAllowed(): boolean;
        /**
         * Returns true if the mouse button is pressed, false otherwise.
         */
        isMouseButtonPressed(): boolean;
        isOpenFollowsHighlight(): boolean;
        /**
         * Returns true if the container's visibility is set to visible, false
         * if it is set to hidden.  A container that is set to hidden is
         * guaranteed to be hidden from the user, but the reverse isn't
         * necessarily true. A container may be set to visible but can otherwise
         * be obscured by another element, rendered off-screen, or hidden using
         * direct CSS manipulation.
         */
        isVisible(): boolean;
        /**
         * Removes a child control.  Overrides {@link
         * goog.ui.Component#removeChild} by updating the highlight index.
         * Since {@link goog.ui.Component#removeChildAt} uses {@link
         * #removeChild} internally, we only need to override this method.
         * @param control The ID of the child to remove, or the control itself.
         * @param opt_unrender Whether to call {@code exitDocument} on the
         * removed control, and detach its DOM from the document (defaults to
         * false).
         */
        removeChild(
            control: string|ಠ_ಠ.clutz.goog.ui.Component|null,
            opt_unrender?: boolean): ಠ_ಠ.clutz.goog.ui.Control|null;
        /**
         * Enables/disables the container based on the {@code enable} argument.
         * Dispatches an {@code ENABLED} or {@code DISABLED} event prior to
         * changing the container's state, which may be caught and canceled to
         * prevent the container from changing state.  Also enables/disables
         * child controls.
         * @param enable Whether to enable or disable the container.
         */
        setEnabled(enable: boolean): void;
        /**
         * Sets whether the container is focusable.  The default is true.
         * Focusable containers always have a tab index and allocate a key
         * handler to handle keyboard events while focused.
         * @param focusable Whether the component is to be focusable.
         */
        setFocusable(focusable: boolean): void;
        /**
         * Sets whether the container allows children to be focusable, false
         * otherwise.  Only effective if the container is not focusable.
         * @param focusable Whether the children should be focusable.
         */
        setFocusableChildrenAllowed(focusable: boolean): void;
        /**
         * Highlights the given item if it exists and is a child of the
         * container; otherwise un-highlights the currently highlighted item.
         * @param item Item to highlight.
         */
        setHighlighted(item: ಠ_ಠ.clutz.goog.ui.Control|null): void;
        /**
         * Highlights the item at the given 0-based index (if any).  If another
         * item was previously highlighted, it is un-highlighted.
         * @param index Index of item to highlight (-1 removes the current
         * highlight).
         */
        setHighlightedIndex(index: number): void;
        /**
         * Helper method that sets the highlighted index to the given index in
         * response to a keyboard event.  The base class implementation simply
         * calls the
         * {@link #setHighlightedIndex} method, but subclasses can override this
         * behavior as needed.
         * @param index Index of item to highlight.
         */
        setHighlightedIndexFromKeyEvent(index: number): void;
        /**
         * Attaches an element on which to listen for key events.
         * @param element The element to attach, or null/undefined to attach to
         * the default element.
         */
        setKeyEventTarget(element: GlobalElement|null|undefined): void;
        /**
         * Sets or clears the "mouse button pressed" flag.
         * @param pressed Whether the mouse button is presed.
         */
        setMouseButtonPressed(pressed: boolean): void;
        /**
         * Sets whether highlighting a child component should also open it.
         * @param follow Whether highlighting a child component also opens it.
         */
        setOpenFollowsHighlight(follow: boolean): void;
        /**
         * Sets the container's orientation.
         * @param orientation Container orientation.
         */
        setOrientation(orientation: ಠ_ಠ.clutz.goog.ui.Container.Orientation):
            void;
        /**
         * Registers the given renderer with the container.  Changing renderers
         * after the container has already been rendered or decorated is an
         * error.
         * @param renderer Renderer used by the container.
         */
        setRenderer(renderer: ಠ_ಠ.clutz.goog.ui.ContainerRenderer|null): void;
        /**
         * Shows or hides the container.  Does nothing if the container already
         * has the requested visibility.  Otherwise, dispatches a SHOW or HIDE
         * event as appropriate, giving listeners a chance to prevent the
         * visibility change.
         * @param visible Whether to show or hide the container.
         * @param opt_force If true, doesn't check whether the container already
         * has the requested visibility, and doesn't dispatch any events.
         */
        setVisible(visible: boolean, opt_force?: boolean): boolean;
    }
}
declare module 'goog:goog.ui.Container' {
    import alias = ಠ_ಠ.clutz.goog.ui.Container;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.Container {
    /**
     * Container-specific events.
     */
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        AFTER_HIDE: EventType,
        AFTER_SHOW: EventType,
    };
}
declare module 'goog:goog.ui.Container.EventType' {
    import alias = ಠ_ಠ.clutz.goog.ui.Container.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.Container {
    /**
     * Container orientation constants.
     */
    type Orientation = string&{clutzEnumBrand: never};
    var Orientation: {
        HORIZONTAL: Orientation,
        VERTICAL: Orientation,
    };
}
declare module 'goog:goog.ui.Container.Orientation' {
    import alias = ಠ_ಠ.clutz.goog.ui.Container.Orientation;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Default renderer for {@link goog.ui.Container}.  Can be used as-is, but
     * subclasses of Container will probably want to use renderers specifically
     * tailored for them by extending this class.
     */
    class ContainerRenderer extends ContainerRenderer_Instance {
        /**
         * Default CSS class to be applied to the root element of containers
         * rendered by this renderer.
         */
        static CSS_CLASS: string;
        /**
         * Constructs a new renderer and sets the CSS class that the renderer
         * will use as the base CSS class to apply to all elements rendered by
         * that renderer. An example to use this function using a menu is:
         *
         * <pre>
         * var myCustomRenderer = goog.ui.ContainerRenderer.getCustomRenderer(
         * goog.ui.MenuRenderer, 'my-special-menu');
         * var newMenu = new goog.ui.Menu(opt_domHelper, myCustomRenderer);
         * </pre>
         *
         * Your styles for the menu can now be:
         * <pre>
         * .my-special-menu { }
         * </pre>
         *
         * <em>instead</em> of
         * <pre>
         * .CSS_MY_SPECIAL_MENU .goog-menu { }
         * </pre>
         *
         * You would want to use this functionality when you want an instance of
         * a component to have specific styles different than the other
         * components of the same type in your application.  This avoids using
         * descendant selectors to apply the specific styles to this component.
         * @param ctor The constructor of the renderer you want to create.
         * @param cssClassName The name of the CSS class for this renderer.
         */
        static getCustomRenderer(
            ctor: (...a: any[]) => any,
            cssClassName: string): ಠ_ಠ.clutz.goog.ui.ContainerRenderer|null;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.ContainerRenderer;
        static instance_: ಠ_ಠ.clutz.goog.ui.ContainerRenderer;
    }
    class ContainerRenderer_Instance {
        private noStructuralTyping_: any;
        /**
         * Default renderer for {@link goog.ui.Container}.  Can be used as-is,
         * but subclasses of Container will probably want to use renderers
         * specifically tailored for them by extending this class.
         * @param opt_ariaRole Optional ARIA role used for the element.
         */
        constructor(opt_ariaRole?: string);
        /**
         * Default implementation of {@code canDecorate}; returns true if the
         * element is a DIV, false otherwise.
         * @param element Element to decorate.
         */
        canDecorate(element: GlobalElement|null): boolean;
        /**
         * Creates and returns the container's root element.  The default
         * simply creates a DIV and applies the renderer's own CSS class name to
         * it. To be overridden in subclasses.
         * @param container Container to render.
         */
        createDom(container: ಠ_ಠ.clutz.goog.ui.Container|null): GlobalElement
            |null;
        /**
         * Default implementation of {@code decorate} for {@link
         * goog.ui.Container}s. Decorates the element with the container, and
         * attempts to decorate its child elements.  Returns the decorated
         * element.
         * @param container Container to decorate the element.
         * @param element Element to decorate.
         */
        decorate(
            container: ಠ_ಠ.clutz.goog.ui.Container|null,
            element: GlobalElement|null): GlobalElement;
        /**
         * Takes a container and an element that may contain child elements,
         * decorates the child elements, and adds the corresponding components
         * to the container as child components.  Any non-element child nodes
         * (e.g. empty text nodes introduced by line breaks in the HTML source)
         * are removed from the element.
         * @param container Container whose children are to be discovered.
         * @param element Element whose children are to be decorated.
         * @param opt_firstChild the first child to be decorated.
         */
        decorateChildren(
            container: ಠ_ಠ.clutz.goog.ui.Container|null,
            element: GlobalElement|null,
            opt_firstChild?: GlobalElement|null): void;
        /**
         * Enables or disables the tab index of the element.  Only elements with
         * a valid tab index can receive focus.
         * @param element Element whose tab index is to be changed.
         * @param enable Whether to add or remove the element's tab index.
         */
        enableTabIndex(element: GlobalElement|null, enable: boolean): void;
        /**
         * Returns the ARIA role to be applied to the container.
         * See http://wiki/Main/ARIA for more info.
         */
        getAriaRole(): undefined|string;
        /**
         * Returns all CSS class names applicable to the given container, based
         * on its state.  The array of class names returned includes the
         * renderer's own CSS class, followed by a CSS class indicating the
         * container's orientation, followed by any state-specific CSS classes.
         * @param container Container whose CSS classes are to be returned.
         */
        getClassNames(container: ಠ_ಠ.clutz.goog.ui.Container|null): string[];
        /**
         * Returns the DOM element into which child components are to be
         * rendered, or null if the container hasn't been rendered yet.
         * @param element Root element of the container whose content element is
         * to be returned.
         */
        getContentElement(element: GlobalElement|null): GlobalElement|null;
        /**
         * Returns the CSS class to be applied to the root element of containers
         * rendered using this renderer.
         */
        getCssClass(): string;
        /**
         * Inspects the element, and creates an instance of {@link
         * goog.ui.Control} or an appropriate subclass best suited to decorate
         * it.  Returns the control (or null if no suitable class was found).
         * This default implementation uses the element's CSS class to find the
         * appropriate control class to instantiate. May be overridden in
         * subclasses.
         * @param element Element to decorate.
         */
        getDecoratorForChild(element: GlobalElement|
                             null): ಠ_ಠ.clutz.goog.ui.Control|null;
        /**
         * Returns the default orientation of containers rendered or decorated
         * by this renderer.  The base class implementation returns {@code
         * VERTICAL}.
         */
        getDefaultOrientation(): ಠ_ಠ.clutz.goog.ui.Container.Orientation;
        /**
         * Returns the element within the container's DOM that should receive
         * keyboard focus (null if none).  The default implementation returns
         * the container's root element.
         * @param container Container whose key event target is to be returned.
         */
        getKeyEventTarget(container: ಠ_ಠ.clutz.goog.ui.Container|
                          null): GlobalElement|null;
        /**
         * Initializes the container's DOM when the container enters the
         * document. Called from {@link goog.ui.Container#enterDocument}.
         * @param container Container whose DOM is to be initialized as it
         * enters the document.
         */
        initializeDom(container: ಠ_ಠ.clutz.goog.ui.Container|null): void;
        /**
         * Sets the container's state based on the given CSS class name,
         * encountered during decoration.  CSS class names that don't represent
         * container states are ignored.  Considered protected; subclasses
         * should override this method to support more states and CSS class
         * names.
         * @param container Container to update.
         * @param className CSS class name.
         * @param baseClass Base class name used as the root of state-specific
         * class names (typically the renderer's own class name).
         */
        setStateFromClassName(
            container: ಠ_ಠ.clutz.goog.ui.Container|null, className: string,
            baseClass: string): void;
    }
}
declare module 'goog:goog.ui.ContainerRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.ContainerRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Plug-on scrolling behavior for a container.
     *
     * Use this to style containers, such as pop-up menus, to be scrolling, and
     * automatically keep the highlighted element visible.
     *
     * To use this, first style your container with the desired overflow
     * properties and height to achieve vertical scrolling.  Also, the scrolling
     * div should have no vertical padding, for two reasons: it is difficult to
     * compensate for, and is generally not what you want due to the strange way
     * CSS handles padding on the scrolling dimension.
     *
     * The container must already be rendered before this may be constructed.
     */
    class ContainerScroller extends ContainerScroller_Instance {}
    class ContainerScroller_Instance extends
        ಠ_ಠ.clutz.goog.Disposable_Instance {
        /**
         * Plug-on scrolling behavior for a container.
         *
         * Use this to style containers, such as pop-up menus, to be scrolling,
         * and automatically keep the highlighted element visible.
         *
         * To use this, first style your container with the desired overflow
         * properties and height to achieve vertical scrolling.  Also, the
         * scrolling div should have no vertical padding, for two reasons: it is
         * difficult to compensate for, and is generally not what you want due
         * to the strange way CSS handles padding on the scrolling dimension.
         *
         * The container must already be rendered before this may be
         * constructed.
         * @param container The container to attach behavior to.
         */
        constructor(container: ಠ_ಠ.clutz.goog.ui.Container);
        disposeInternal(): void;
    }
}
declare module 'goog:goog.ui.ContainerScroller' {
    import alias = ಠ_ಠ.clutz.goog.ui.ContainerScroller;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Base class for UI controls.  Extends {@link goog.ui.Component} by adding
     * the following:
     * <ul>
     * <li>a {@link goog.events.KeyHandler}, to simplify keyboard handling,
     * <li>a pluggable <em>renderer</em> framework, to simplify the creation of
     * simple controls without the need to subclass this class,
     * <li>the notion of component <em>content</em>, like a text caption or DOM
     * structure displayed in the component (e.g. a button label),
     * <li>getter and setter for component content, as well as a getter and
     * setter specifically for caption text (for convenience),
     * <li>support for hiding/showing the component,
     * <li>fine-grained control over supported states and state transition
     * events, and
     * <li>default mouse and keyboard event handling.
     * </ul>
     * This class has sufficient built-in functionality for most simple UI
     * controls. All controls dispatch SHOW, HIDE, ENTER, LEAVE, and ACTION
     * events on show, hide, mouseover, mouseout, and user action, respectively.
     * Additional states are also supported.  See closure/demos/control.html for
     * example usage.
     */
    class Control extends Control_Instance {
        /**
         * Takes an element and returns a new instance of {@link
         * goog.ui.Control} or a subclass, suitable to decorate it (based on the
         * element's CSS class).
         * @param element Element to decorate.
         */
        static getDecorator(a: GlobalElement|null): ಠ_ಠ.clutz.goog.ui.Control
            |null;
        /**
         * Maps a CSS class name to a function that returns a new instance of
         * {@link goog.ui.Control} or a subclass thereof, suitable to decorate
         * an element that has the specified CSS class.  UI components that
         * extend
         * {@link goog.ui.Control} and want {@link goog.ui.Container}s to be
         * able to discover and decorate elements using them should register a
         * factory function via this API.
         * @param className CSS class name.
         * @param decoratorFunction Function that takes no arguments and returns
         * a new instance of a control to decorate an element with the given
         * class.
         */
        static registerDecorator(a: string, b: (...a: any[]) => any): any;
    }
    class Control_Instance extends ಠ_ಠ.clutz.goog.ui.Component_Instance {
        /**
         * Base class for UI controls.  Extends {@link goog.ui.Component} by
         * adding the following: <ul> <li>a {@link goog.events.KeyHandler}, to
         * simplify keyboard handling, <li>a pluggable <em>renderer</em>
         * framework, to simplify the creation of simple controls without the
         * need to subclass this class, <li>the notion of component
         * <em>content</em>, like a text caption or DOM structure displayed in
         * the component (e.g. a button label), <li>getter and setter for
         * component content, as well as a getter and setter specifically for
         * caption text (for convenience), <li>support for hiding/showing the
         * component, <li>fine-grained control over supported states and state
         * transition events, and <li>default mouse and keyboard event handling.
         * </ul>
         * This class has sufficient built-in functionality for most simple UI
         * controls. All controls dispatch SHOW, HIDE, ENTER, LEAVE, and ACTION
         * events on show, hide, mouseover, mouseout, and user action,
         * respectively.  Additional states are also supported.  See
         * closure/demos/control.html for example usage.
         * @param opt_content Text caption or DOM structure to display as the
         * content of the control (if any).
         * @param opt_renderer Renderer used to render or decorate the
         * component; defaults to {@link goog.ui.ControlRenderer}.
         * @param opt_domHelper Optional DOM helper, used for document
         * interaction.
         */
        constructor(
            opt_content?: string|Node|null|Node[]|NodeListOf<Node>,
            opt_renderer?: ಠ_ಠ.clutz.goog.ui.ControlRenderer|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * Adds the given class name to the list of classes to be applied to the
         * component's root element.
         * @param className Additional class name to be applied to the
         * component's root element.
         */
        addClassName(className: string): void;
        /**
         * Returns true if the given element can be decorated by this component.
         * Overrides {@link goog.ui.Component#canDecorate}.
         * @param element Element to decorate.
         */
        canDecorate(element: GlobalElement|null): boolean;
        /**
         * Creates the control's DOM.  Overrides {@link
         * goog.ui.Component#createDom} by delegating DOM manipulation to the
         * control's renderer.
         */
        createDom(): void;
        /**
         * Decorates the given element with this component. Overrides {@link
         * goog.ui.Component#decorateInternal} by delegating DOM manipulation
         * to the control's renderer.
         * @param element Element to decorate.
         */
        decorateInternal(element: GlobalElement|null): void;
        disposeInternal(): void;
        /**
         * Adds or removes the given class name to/from the list of classes to
         * be applied to the component's root element.
         * @param className CSS class name to add or remove.
         * @param enable Whether to add or remove the class name.
         */
        enableClassName(className: string, enable: boolean): void;
        /**
         * Configures the component after its DOM has been rendered, and sets up
         * event handling.  Overrides {@link goog.ui.Component#enterDocument}.
         */
        enterDocument(): void;
        /**
         * Cleans up the component before its DOM is removed from the document,
         * and removes event handlers.  Overrides {@link
         * goog.ui.Component#exitDocument} by making sure that components that
         * are removed from the document aren't focusable (i.e. have no tab
         * index).
         */
        exitDocument(): void;
        /**
         * Gets the control's aria label.
         */
        getAriaLabel(): string|null;
        getCaption(): string;
        /**
         * Returns the text caption or DOM structure displayed in the component.
         */
        getContent(): string|Node|null|Node[]|NodeListOf<Node>;
        /**
         * Returns the DOM element into which child components are to be
         * rendered, or null if the control itself hasn't been rendered yet.
         * Overrides
         * {@link goog.ui.Component#getContentElement} by delegating to the
         * renderer.
         */
        getContentElement(): GlobalElement|null;
        /**
         * Returns any additional class name(s) to be applied to the component's
         * root element, or null if no extra class names are needed.
         */
        getExtraClassNames(): string[]|null;
        /**
         * Returns the DOM element on which the control is listening for
         * keyboard events (null if none).
         */
        getKeyEventTarget(): GlobalElement|null;
        /**
         * Returns the keyboard event handler for this component, lazily created
         * the first time this method is called.  Considered protected; should
         * only be used within this package and by subclasses.
         */
        getKeyHandler(): ಠ_ಠ.clutz.goog.events.KeyHandler;
        /**
         * Returns the control's preferred ARIA role. This can be used by a
         * control to override the role that would be assigned by the renderer.
         * This is useful in cases where a different ARIA role is appropriate
         * for a control because of the context in which it's used.  E.g., a
         * {@link goog.ui.MenuButton} added to a
         * {@link goog.ui.Select} should have an ARIA role of LISTBOX and not
         * MENUITEM.
         */
        getPreferredAriaRole(): ಠ_ಠ.clutz.goog.a11y.aria.Role|null;
        /**
         * Returns the renderer used by this component to render itself or to
         * decorate an existing element.
         */
        getRenderer(): ಠ_ಠ.clutz.goog.ui.ControlRenderer|null|undefined;
        /**
         * Returns the component's state as a bit mask of {@link
         * goog.ui.Component.State}s.
         */
        getState(): number;
        /**
         * Handles blur events on the component's key event target element.
         * Always deactivates the component.  In addition, if the component is
         * focusable, updates its state and styling to indicate that it no
         * longer has keyboard focus.  Considered protected; should only be used
         * within this package and by subclasses.  <b>Warning:</b> IE dispatches
         * focus and blur events asynchronously!
         * @param e Blur event to handle.
         */
        handleBlur(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Handles contextmenu events.
         * @param e Event to handle.
         */
        handleContextMenu(a: ಠ_ಠ.clutz.goog.events.BrowserEvent|null): any;
        /**
         * Handles dblclick events.  Should only be registered if the user agent
         * is IE.  If the component is enabled, performs its associated action
         * by calling
         * {@link performActionInternal}.  This is used to allow more performant
         * buttons in IE.  In IE, no mousedown event is fired when that
         * mousedown will trigger a dblclick event.  Because of this, a user
         * clicking quickly will only cause ACTION events to fire on every other
         * click.  This is a workaround to generate ACTION events for every
         * click.  Unfortunately, this workaround won't ever trigger the ACTIVE
         * state.  This is roughly the same behaviour as if this were a 'button'
         * element with a listener on mouseup.  Considered protected; should
         * only be used within this package and by subclasses.
         * @param e Mouse event to handle.
         */
        handleDblClick(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Handles focus events on the component's key event target element.  If
         * the component is focusable, updates its state and styling to indicate
         * that it now has keyboard focus.  Considered protected; should only be
         * used within this package and by subclasses.  <b>Warning:</b> IE
         * dispatches focus and blur events asynchronously!
         * @param e Focus event to handle.
         */
        handleFocus(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Attempts to handle a keyboard event, if the component is enabled and
         * visible, by calling {@link handleKeyEventInternal}.  Considered
         * protected; should only be used within this package and by subclasses.
         * @param e Key event to handle.
         */
        handleKeyEvent(e: ಠ_ಠ.clutz.goog.events.KeyEvent|null): boolean;
        /**
         * Attempts to handle a keyboard event; returns true if the event was
         * handled, false otherwise.  Considered protected; should only be used
         * within this package and by subclasses.
         * @param e Key event to handle.
         */
        handleKeyEventInternal(e: ಠ_ಠ.clutz.goog.events.KeyEvent|null): boolean;
        /**
         * Handles mousedown events.  If the component is enabled, highlights
         * and activates it.  If the component isn't configured for keyboard
         * access, prevents it from receiving keyboard focus.  Considered
         * protected; should only be used within this package and by subclasses.
         * @param e Mouse event to handle.
         */
        handleMouseDown(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Handles mouseout events.  Dispatches a LEAVE event; if the event
         * isn't canceled, and the component supports auto-highlighting,
         * deactivates and un-highlights the component.  Considered protected;
         * should only be used within this package and by subclasses.
         * @param e Mouse event to handle.
         */
        handleMouseOut(e: ಠ_ಠ.clutz.goog.events.BrowserEvent|null): void;
        /**
         * Handles mouseover events.  Dispatches an ENTER event; if the event
         * isn't canceled, the component is enabled, and it supports
         * auto-highlighting, highlights the component.  Considered protected;
         * should only be used within this package and by subclasses.
         * @param e Mouse event to handle.
         */
        handleMouseOver(e: ಠ_ಠ.clutz.goog.events.BrowserEvent|null): void;
        /**
         * Handles mouseup events.  If the component is enabled, highlights it.
         * If the component has previously been activated, performs its
         * associated action by calling {@link performActionInternal}, then
         * deactivates it.  Considered protected; should only be used within
         * this package and by subclasses.
         * @param e Mouse event to handle.
         */
        handleMouseUp(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Returns true if the component is in the specified state, false
         * otherwise.
         * @param state State to check.
         */
        hasState(state: ಠ_ಠ.clutz.goog.ui.Component.State): boolean;
        /**
         * Returns true if the component is active (pressed), false otherwise.
         */
        isActive(): boolean;
        /**
         * Returns true if the control allows text selection within its DOM,
         * false otherwise.  Controls that disallow text selection have the
         * appropriate unselectable styling applied to their elements.  Note
         * that controls hosted in containers will report that they allow text
         * selection even if their container disallows text selection.
         */
        isAllowTextSelection(): boolean;
        /**
         * Returns true if the component provides default event handling for the
         * state, false otherwise.
         * @param state State to check.
         */
        isAutoState(state: ಠ_ಠ.clutz.goog.ui.Component.State): boolean;
        /**
         * Returns true if the component is checked, false otherwise.
         */
        isChecked(): boolean;
        /**
         * Returns true if the component is set to dispatch transition events
         * for the given state, false otherwise.
         * @param state State to check.
         */
        isDispatchTransitionEvents(state: ಠ_ಠ.clutz.goog.ui.Component.State):
            boolean;
        /**
         * Returns true if the component is enabled, false otherwise.
         */
        isEnabled(): boolean;
        /**
         * Returns true if the component is styled to indicate that it has
         * keyboard focus, false otherwise.  Note that {@code isFocused()}
         * returning true doesn't guarantee that the component's key event
         * target has keyborad focus, only that it is styled as such.
         */
        isFocused(): boolean;
        /**
         * Returns true if the control is configured to handle its own mouse
         * events, false otherwise.  Controls not hosted in {@link
         * goog.ui.Container}s have to handle their own mouse events, but
         * controls hosted in containers may allow their parent to handle mouse
         * events on their behalf.  Considered protected; should only be used
         * within this package and by subclasses.
         */
        isHandleMouseEvents(): boolean;
        /**
         * Returns true if the component is currently highlighted, false
         * otherwise.
         */
        isHighlighted(): boolean;
        /**
         * Returns true if the component is open (expanded), false otherwise.
         */
        isOpen(): boolean;
        /**
         * Returns true if the component is selected, false otherwise.
         */
        isSelected(): boolean;
        /**
         * Returns true if the component supports the specified state, false
         * otherwise.
         * @param state State to check.
         */
        isSupportedState(state: ಠ_ಠ.clutz.goog.ui.Component.State): boolean;
        /**
         * Returns true if the transition into or out of the given state is
         * allowed to proceed, false otherwise.  A state transition is allowed
         * under the following conditions: <ul> <li>the component supports the
         * state, <li>the component isn't already in the target state,
         * <li>either the component is configured not to dispatch events for
         * this state transition, or a transition event was dispatched and
         * wasn't canceled by any event listener, and <li>the component hasn't
         * been disposed of
         * </ul>
         * Considered protected; should only be used within this package and by
         * subclasses.
         * @param state State to/from which the control is transitioning.
         * @param enable Whether the control is entering or leaving the state.
         */
        isTransitionAllowed(
            state: ಠ_ಠ.clutz.goog.ui.Component.State, enable: boolean): boolean;
        /**
         * Returns true if the component's visibility is set to visible, false
         * if it is set to hidden.  A component that is set to hidden is
         * guaranteed to be hidden from the user, but the reverse isn't
         * necessarily true. A component may be set to visible but can otherwise
         * be obscured by another element, rendered off-screen, or hidden using
         * direct CSS manipulation.
         */
        isVisible(): boolean;
        /**
         * Performs the appropriate action when the control is activated by the
         * user. The default implementation first updates the checked and
         * selected state of controls that support them, then dispatches an
         * ACTION event.  Considered protected; should only be used within this
         * package and by subclasses.
         * @param e Event that triggered the action.
         */
        performActionInternal(e: ಠ_ಠ.clutz.goog.events.Event|null): boolean;
        /**
         * Removes the given class name from the list of classes to be applied
         * to the component's root element.
         * @param className Class name to be removed from the component's root
         * element.
         */
        removeClassName(className: string): void;
        /**
         * Activates or deactivates the component.  Does nothing if this state
         * transition is disallowed.
         * @param active Whether to activate or deactivate the component.
         */
        setActive(active: boolean): void;
        /**
         * Allows or disallows text selection within the control's DOM.
         * @param allow Whether the control should allow text selection.
         */
        setAllowTextSelection(allow: boolean): void;
        /**
         * Sets the control's aria label. This can be used to assign aria label
         * to the element after it is rendered.
         * @param label The string to set as the aria label for this control. No
         * escaping is done on this value.
         */
        setAriaLabel(label: string): void;
        /**
         * Enables or disables automatic event handling for the given state(s).
         * @param states Bit mask of {@link goog.ui.Component.State}s for which
         * default event handling is to be enabled or disabled.
         * @param enable Whether the component should provide default event
         * handling for the state(s).
         */
        setAutoStates(states: number, enable: boolean): void;
        /**
         * Sets the text caption of the component.
         * @param caption Text caption of the component.
         */
        setCaption(caption: string): void;
        /**
         * Checks or unchecks the component.  Does nothing if this state
         * transition is disallowed.
         * @param check Whether to check or uncheck the component.
         */
        setChecked(check: boolean): void;
        /**
         * Sets the component's content to the given text caption, element, or
         * array of nodes.  (If the argument is an array of nodes, it must be an
         * actual array, not an array-like object.)
         * @param content Text caption or DOM structure to set as the
         * component's contents.
         */
        setContent(content: string|Node|null|Node[]|NodeListOf<Node>): void;
        /**
         * Sets the component's content to the given text caption, element, or
         * array of nodes.  Unlike {@link #setContent}, doesn't modify the
         * component's DOM. Called by renderers during element decoration.
         *
         * This should only be used by subclasses and its associated renderers.
         * @param content Text caption or DOM structure to set as the
         * component's contents.
         */
        setContentInternal(content: string|Node|null|Node[]|
                           NodeListOf<Node>): void;
        /**
         * Enables or disables transition events for the given state(s).
         * Controls handle state transitions internally by default, and only
         * dispatch state transition events if explicitly requested to do so by
         * calling this method.
         * @param states Bit mask of {@link goog.ui.Component.State}s for which
         * transition events should be enabled or disabled.
         * @param enable Whether transition events should be enabled.
         */
        setDispatchTransitionEvents(states: number, enable: boolean): void;
        /**
         * Enables or disables the component.  Does nothing if this state
         * transition is disallowed.  If the component is both visible and
         * focusable, updates its focused state and tab index as needed.  If the
         * component is being disabled, ensures that it is also deactivated and
         * un-highlighted first.  Note that the component's enabled/disabled
         * state is "locked" as long as it is hosted in a
         * {@link goog.ui.Container} that is itself disabled; this is to prevent
         * clients from accidentally re-enabling a control that is in a disabled
         * container.
         * @param enable Whether to enable or disable the component.
         */
        setEnabled(enable: boolean): void;
        /**
         * Applies or removes styling indicating that the component has keyboard
         * focus. Note that unlike the other "set" methods, this method is
         * called as a result of the component's element having received or lost
         * keyboard focus, not the other way around, so calling {@code
         * setFocused(true)} doesn't guarantee that the component's key event
         * target has keyboard focus, only that it is styled as such.
         * @param focused Whether to apply or remove styling to indicate that
         * the component's element has keyboard focus.
         */
        setFocused(focused: boolean): void;
        /**
         * Enables or disables mouse event handling for the control.  Containers
         * may use this method to disable mouse event handling in their child
         * controls. Considered protected; should only be used within this
         * package and by subclasses.
         * @param enable Whether to enable or disable mouse event handling.
         */
        setHandleMouseEvents(enable: boolean): void;
        /**
         * Highlights or unhighlights the component.  Does nothing if this state
         * transition is disallowed.
         * @param highlight Whether to highlight or unhighlight the component.
         */
        setHighlighted(highlight: boolean): void;
        /**
         * Opens (expands) or closes (collapses) the component.  Does nothing if
         * this state transition is disallowed.
         * @param open Whether to open or close the component.
         */
        setOpen(open: boolean): void;
        /**
         * Sets the control's preferred ARIA role. This can be used to override
         * the role that would be assigned by the renderer.  This is useful in
         * cases where a different ARIA role is appropriate for a control
         * because of the context in which it's used.  E.g., a {@link
         * goog.ui.MenuButton} added to a
         * {@link goog.ui.Select} should have an ARIA role of LISTBOX and not
         * MENUITEM.
         * @param role This control's preferred ARIA role.
         */
        setPreferredAriaRole(role: ಠ_ಠ.clutz.goog.a11y.aria.Role): void;
        /**
         * Registers the given renderer with the component.  Changing renderers
         * after the component has entered the document is an error.
         * @param renderer Renderer used by the component.
         */
        setRenderer(renderer: ಠ_ಠ.clutz.goog.ui.ControlRenderer|null): void;
        setRightToLeft(rightToLeft: boolean): void;
        /**
         * Selects or unselects the component.  Does nothing if this state
         * transition is disallowed.
         * @param select Whether to select or unselect the component.
         */
        setSelected(select: boolean): void;
        /**
         * Sets or clears the given state on the component, and updates its
         * styling accordingly.  Does nothing if the component is already in the
         * correct state or if it doesn't support the specified state.  Doesn't
         * dispatch any state transition events; use advisedly.
         * @param state State to set or clear.
         * @param enable Whether to set or clear the state (if supported).
         * @param opt_calledFrom Prevents looping with setEnabled.
         */
        setState(
            state: ಠ_ಠ.clutz.goog.ui.Component.State, enable: boolean,
            opt_calledFrom?: boolean): void;
        /**
         * Sets the component's state to the state represented by a bit mask of
         * {@link goog.ui.Component.State}s.  Unlike {@link #setState}, doesn't
         * update the component's styling, and doesn't reject unsupported
         * states. Called by renderers during element decoration.  Considered
         * protected; should only be used within this package and by subclasses.
         *
         * This should only be used by subclasses and its associated renderers.
         * @param state Bit mask representing component state.
         */
        setStateInternal(state: number): void;
        /**
         * Enables or disables support for the given state. Disabling support
         * for a state while the component is in that state is an error.
         * @param state State to support or de-support.
         * @param support Whether the component should support the state.
         */
        setSupportedState(
            state: ಠ_ಠ.clutz.goog.ui.Component.State, support: boolean): void;
        /**
         * Shows or hides the component.  Does nothing if the component already
         * has the requested visibility.  Otherwise, dispatches a SHOW or HIDE
         * event as appropriate, giving listeners a chance to prevent the
         * visibility change. When showing a component that is both enabled and
         * focusable, ensures that its key target has a tab index.  When hiding
         * a component that is enabled and focusable, blurs its key target and
         * removes its tab index.
         * @param visible Whether to show or hide the component.
         * @param opt_force If true, doesn't check whether the component already
         * has the requested visibility, and doesn't dispatch any events.
         */
        setVisible(visible: boolean, opt_force?: boolean): boolean;
    }
}
declare namespace ಠ_ಠ.clutz.goog.ui.Control {
    class IeMouseEventSequenceSimulator_ extends
        IeMouseEventSequenceSimulator__Instance {}
    class IeMouseEventSequenceSimulator__Instance extends
        ಠ_ಠ.clutz.goog.Disposable_Instance {
        disposeInternal(): void;
    }
}
declare module 'goog:goog.ui.Control' {
    import alias = ಠ_ಠ.clutz.goog.ui.Control;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Type declaration for text caption or DOM structure to be used as the
     * content of {@link goog.ui.Control}s.
     */
    type ControlContent = string|Node|null|Node[]|NodeListOf<Node>;
}
declare module 'goog:goog.ui.ControlContent' {
    import alias = ಠ_ಠ.clutz.goog.ui.ControlContent;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Default renderer for {@link goog.ui.Control}s.  Can be used as-is, but
     * subclasses of Control will probably want to use renderers specifically
     * tailored for them by extending this class.  Controls that use renderers
     * delegate one or more of the following API methods to the renderer:
     * <ul>
     * <li>{@code createDom} - renders the DOM for the component
     * <li>{@code canDecorate} - determines whether an element can be decorated
     * by the component
     * <li>{@code decorate} - decorates an existing element with the component
     * <li>{@code setState} - updates the appearance of the component based on
     * its state
     * <li>{@code getContent} - returns the component's content
     * <li>{@code setContent} - sets the component's content
     * </ul>
     * Controls are stateful; renderers, on the other hand, should be stateless
     * and reusable.
     */
    class ControlRenderer extends ControlRenderer_Instance {
        /**
         * Default CSS class to be applied to the root element of components
         * rendered by this renderer.
         */
        static CSS_CLASS: string;
        /**
         * Array of arrays of CSS classes that we want composite classes added
         * and removed for in IE6 and lower as a workaround for lack of
         * multi-class CSS selector support.
         *
         * Subclasses that have accompanying CSS requiring this workaround
         * should define their own static IE6_CLASS_COMBINATIONS constant and
         * override getIe6ClassCombinations to return it.
         *
         * For example, if your stylesheet uses the selector
         * .button.collapse-left (and is compiled to .button_collapse-left for
         * the IE6 version of the stylesheet,) you should include ['button',
         * 'collapse-left'] in this array and the class button_collapse-left
         * will be applied to the root element whenever both button and
         * collapse-left are applied individually.
         *
         * Members of each class name combination will be joined with
         * underscores in the order that they're defined in the array. You
         * should alphabetize them (for compatibility with the CSS compiler)
         * unless you are doing something special.
         */
        static IE6_CLASS_COMBINATIONS: (string[]|null)[]|null;
        /**
         * Constructs a new renderer and sets the CSS class that the renderer
         * will use as the base CSS class to apply to all elements rendered by
         * that renderer. An example to use this function using a color palette:
         *
         * <pre>
         * var myCustomRenderer = goog.ui.ControlRenderer.getCustomRenderer(
         * goog.ui.PaletteRenderer, 'my-special-palette');
         * var newColorPalette = new goog.ui.ColorPalette(
         * colors, myCustomRenderer, opt_domHelper);
         * </pre>
         *
         * Your CSS can look like this now:
         * <pre>
         * .my-special-palette { }
         * .my-special-palette-table { }
         * .my-special-palette-cell { }
         * etc.
         * </pre>
         *
         * <em>instead</em> of
         * <pre>
         * .CSS_MY_SPECIAL_PALETTE .goog-palette { }
         * .CSS_MY_SPECIAL_PALETTE .goog-palette-table { }
         * .CSS_MY_SPECIAL_PALETTE .goog-palette-cell { }
         * etc.
         * </pre>
         *
         * You would want to use this functionality when you want an instance of
         * a component to have specific styles different than the other
         * components of the same type in your application.  This avoids using
         * descendant selectors to apply the specific styles to this component.
         * @param ctor The constructor of the renderer you are trying to create.
         * @param cssClassName The name of the CSS class for this renderer.
         */
        static getCustomRenderer(
            ctor: (...a: any[]) => any,
            cssClassName: string): ಠ_ಠ.clutz.goog.ui.ControlRenderer|null;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.ControlRenderer;
        static instance_: ಠ_ಠ.clutz.goog.ui.ControlRenderer;
    }
    class ControlRenderer_Instance {
        private noStructuralTyping_: any;
        /**
         * Returns true if this renderer can decorate the element, false
         * otherwise. The default implementation always returns true.
         * @param element Element to decorate.
         */
        canDecorate(element: GlobalElement|null): boolean;
        /**
         * Returns the control's contents wrapped in a DIV, with the renderer's
         * own CSS class and additional state-specific classes applied to it.
         * @param control Control to render.
         */
        createDom(control: ಠ_ಠ.clutz.goog.ui.Control|null): GlobalElement|null;
        /**
         * Default implementation of {@code decorate} for {@link
         * goog.ui.Control}s. Initializes the control's ID, content, and state
         * based on the ID of the element, its child nodes, and its CSS classes,
         * respectively.  Returns the element.
         * @param control Control instance to decorate the element.
         * @param element Element to decorate.
         */
        decorate(
            control: ಠ_ಠ.clutz.goog.ui.Control|null,
            element: GlobalElement|null): GlobalElement|null;
        /**
         * Updates the control's DOM by adding or removing the specified class
         * name to/from its root element. May add additional combined classes as
         * needed in IE6 and lower. Because of this, subclasses should use this
         * method when modifying class names on the control's root element.
         * @param control Control instance (or root element) to be updated.
         * @param className CSS class name to add or remove.
         * @param enable Whether to add or remove the class name.
         */
        enableClassName(
            control: ಠ_ಠ.clutz.goog.ui.Control|null|GlobalElement,
            className: string, enable: boolean): void;
        /**
         * Updates the control's DOM by adding or removing the specified extra
         * class name to/from its element.
         * @param control Control to be updated.
         * @param className CSS class name to add or remove.
         * @param enable Whether to add or remove the class name.
         */
        enableExtraClassName(
            control: ಠ_ಠ.clutz.goog.ui.Control|null, className: string,
            enable: boolean): void;
        /**
         * Returns the ARIA role to be applied to the control.
         * See http://wiki/Main/ARIA for more info.
         */
        getAriaRole(): ಠ_ಠ.clutz.goog.a11y.aria.Role|undefined;
        /**
         * Takes a single {@link goog.ui.Component.State}, and returns the
         * corresponding CSS class name (null if none).
         * @param state Component state.
         */
        getClassForState(state: ಠ_ಠ.clutz.goog.ui.Component.State): string
            |undefined;
        /**
         * Returns all CSS class names applicable to the given control, based on
         * its state.  The return value is an array of strings containing <ol>
         * <li>the renderer-specific CSS class returned by {@link #getCssClass},
         * followed by
         * <li>the structural CSS class returned by {@link
         * getStructuralCssClass} (if different from the renderer-specific CSS
         * class), followed by <li>any state-specific classes returned by {@link
         * #getClassNamesForState}, followed by <li>any extra classes returned
         * by the control's {@code getExtraClassNames} method and <li>for IE6
         * and lower, additional combined classes from
         * {@link getAppliedCombinedClassNames_}.
         * </ol>
         * Since all controls have at least one renderer-specific CSS class
         * name, this method is guaranteed to return an array of at least one
         * element.
         * @param control Control whose CSS classes are to be returned.
         */
        getClassNames(control: ಠ_ಠ.clutz.goog.ui.Control|null): string[];
        /**
         * Takes a bit mask of {@link goog.ui.Component.State}s, and returns an
         * array of the appropriate class names representing the given state,
         * suitable to be applied to the root element of a component rendered
         * using this renderer, or null if no state-specific classes need to be
         * applied.  This default implementation uses the renderer's {@link
         * getClassForState} method to generate each state-specific class.
         * @param state Bit mask of component states.
         */
        getClassNamesForState(state: number): string[];
        /**
         * Takes the control's root element and returns the parent element of
         * the control's contents.  Since by default controls are rendered as a
         * single DIV, the default implementation returns the element itself.
         * Subclasses with more complex DOM structures must override this method
         * as needed.
         * @param element Root element of the control whose content element is
         * to be returned.
         */
        getContentElement(element: GlobalElement|null): GlobalElement|null;
        /**
         * Returns the CSS class name to be applied to the root element of all
         * components rendered or decorated using this renderer.  The class name
         * is expected to uniquely identify the renderer class, i.e. no two
         * renderer classes are expected to share the same CSS class name.
         */
        getCssClass(): string;
        /**
         * Returns an array of combinations of classes to apply combined class
         * names for in IE6 and below. See {@link IE6_CLASS_COMBINATIONS} for
         * more detail. This method doesn't reference {@link
         * IE6_CLASS_COMBINATIONS} so that it can be compiled out, but
         * subclasses should return their IE6_CLASS_COMBINATIONS static constant
         * instead.
         */
        getIe6ClassCombinations(): (string[]|null)[]|null;
        /**
         * Returns the element within the component's DOM that should receive
         * keyboard focus (null if none).  The default implementation returns
         * the control's root element.
         * @param control Control whose key event target is to be returned.
         */
        getKeyEventTarget(control: ಠ_ಠ.clutz.goog.ui.Control|
                          null): GlobalElement|null;
        /**
         * Takes a single CSS class name which may represent a component state,
         * and returns the corresponding component state (0x00 if none).
         * @param className CSS class name, possibly representing a component
         * state.
         */
        getStateFromClass(className: string): ಠ_ಠ.clutz.goog.ui.Component.State;
        /**
         * Returns the name of a DOM structure-specific CSS class to be applied
         * to the root element of all components rendered or decorated using
         * this renderer. Unlike the class name returned by {@link
         * #getCssClass}, the structural class name may be shared among
         * different renderers that generate similar DOM structures.  The
         * structural class name also serves as the basis of derived class names
         * used to identify and style structural elements of the control's DOM,
         * as well as the basis for state-specific class names.  The default
         * implementation returns the same class name as {@link #getCssClass},
         * but subclasses are expected to override this method as needed.
         */
        getStructuralCssClass(): string;
        /**
         * Initializes the control's DOM by configuring properties that can only
         * be set after the DOM has entered the document.  This implementation
         * sets up BiDi and keyboard focus.  Called from {@link
         * goog.ui.Control#enterDocument}.
         * @param control Control whose DOM is to be initialized as it enters
         * the document.
         */
        initializeDom(control: ಠ_ಠ.clutz.goog.ui.Control|null): void;
        /**
         * Returns true if the control's key event target supports keyboard
         * focus (based on its {@code tabIndex} attribute), false otherwise.
         * @param control Control whose key event target is to be checked.
         */
        isFocusable(control: ಠ_ಠ.clutz.goog.ui.Control|null): boolean;
        /**
         * Allows or disallows text selection within the control's DOM.
         * @param element The control's root element.
         * @param allow Whether the element should allow text selection.
         */
        setAllowTextSelection(element: GlobalElement|null, allow: boolean):
            void;
        /**
         * Sets the element's ARIA label. This should be overriden by subclasses
         * that don't apply the role directly on control.element_.
         * @param element Element whose ARIA label is to be updated.
         * @param ariaLabel Label to add to the element.
         */
        setAriaLabel(element: GlobalElement, ariaLabel: string): void;
        /**
         * Sets the element's ARIA role.
         * @param element Element to update.
         * @param opt_preferredRole The preferred ARIA role.
         */
        setAriaRole(
            element: GlobalElement|null,
            opt_preferredRole?: ಠ_ಠ.clutz.goog.a11y.aria.Role|null): void;
        /**
         * Sets the element's ARIA attributes, including distinguishing between
         * universally supported ARIA properties and ARIA states that are only
         * supported by certain ARIA roles. Only attributes which are
         * initialized to be true will be set.
         * @param control Control whose ARIA state will be updated.
         * @param element Element whose ARIA state is to be updated.
         */
        setAriaStates(
            control: ಠ_ಠ.clutz.goog.ui.Control, element: GlobalElement): void;
        /**
         * Takes a control's root element, and sets its content to the given
         * text caption or DOM structure.  The default implementation replaces
         * the children of the given element.  Renderers that create more
         * complex DOM structures must override this method accordingly.
         * @param element The control's root element.
         * @param content Text caption or DOM structure to be set as the
         * control's content. The DOM nodes will not be cloned, they will only
         * moved under the content element of the control.
         */
        setContent(
            element: GlobalElement|null,
            content: string|Node|null|Node[]|NodeListOf<Node>): void;
        /**
         * Updates the control's key event target to make it focusable or
         * non-focusable via its {@code tabIndex} attribute.  Does nothing if
         * the control doesn't support the {@code FOCUSED} state, or if it has
         * no key event target.
         * @param control Control whose key event target is to be updated.
         * @param focusable Whether to enable keyboard focus support on the
         * control's key event target.
         */
        setFocusable(
            control: ಠ_ಠ.clutz.goog.ui.Control|null, focusable: boolean): void;
        /**
         * Applies special styling to/from the control's element if it is
         * rendered right-to-left, and removes it if it is rendered
         * left-to-right.
         * @param element The control's root element.
         * @param rightToLeft Whether the component is rendered right-to-left.
         */
        setRightToLeft(element: GlobalElement|null, rightToLeft: boolean): void;
        /**
         * Updates the appearance of the control in response to a state change.
         * @param control Control instance to update.
         * @param state State to enable or disable.
         * @param enable Whether the control is entering or exiting the state.
         */
        setState(
            control: ಠ_ಠ.clutz.goog.ui.Control|null,
            state: ಠ_ಠ.clutz.goog.ui.Component.State, enable: boolean): void;
        /**
         * Shows or hides the element.
         * @param element Element to update.
         * @param visible Whether to show the element.
         */
        setVisible(element: GlobalElement|null, visible: boolean): void;
        /**
         * Updates the element's ARIA (accessibility) attributes , including
         * distinguishing between universally supported ARIA properties and ARIA
         * states that are only supported by certain ARIA roles.
         * @param element Element whose ARIA state is to be updated.
         * @param state Component state being enabled or disabled.
         * @param enable Whether the state is being enabled or disabled.
         */
        updateAriaState(
            element: GlobalElement|null,
            state: ಠ_ಠ.clutz.goog.ui.Component.State, enable: boolean): void;
    }
}
declare module 'goog:goog.ui.ControlRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.ControlRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Displays and edits the value of a cookie.
     */
    class CookieEditor extends CookieEditor_Instance {}
    class CookieEditor_Instance extends ಠ_ಠ.clutz.goog.ui.Component_Instance {
        /**
         * Displays and edits the value of a cookie.
         * @param opt_domHelper Optional DOM helper.
         */
        constructor(opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        canDecorate(a?: GlobalElement|null): boolean;
        createDom(): void;
        disposeInternal(): void;
        enterDocument(): void;
        /**
         * Sets the cookie which this component will edit.
         * @param cookieKey Cookie key.
         */
        selectCookie(cookieKey: string): void;
    }
}
declare module 'goog:goog.ui.CookieEditor' {
    import alias = ಠ_ಠ.clutz.goog.ui.CookieEditor;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Custom renderer for {@link goog.ui.Button}s. Css3 buttons can contain
     * almost arbitrary HTML content, will flow like inline elements, but can be
     * styled like block-level elements.
     */
    class Css3ButtonRenderer extends Css3ButtonRenderer_Instance {
        /**
         * Default CSS class to be applied to the root element of components
         * rendered by this renderer.
         */
        static CSS_CLASS: string;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.Css3ButtonRenderer;
        static instance_: ಠ_ಠ.clutz.goog.ui.Css3ButtonRenderer;
    }
    class Css3ButtonRenderer_Instance extends
        ಠ_ಠ.clutz.goog.ui.ButtonRenderer_Instance {
        /**
         * Returns true if this renderer can decorate the element.  Overrides
         * {@link goog.ui.ButtonRenderer#canDecorate} by returning true if the
         * element is a DIV, false otherwise.
         * @param element Element to decorate.
         */
        canDecorate(element: GlobalElement|null): boolean;
        /**
         * Returns the button's contents wrapped in the following DOM structure:
         *
         * <div class="goog-inline-block goog-css3-button">
         * Contents...
         * </div>
         *
         * Overrides {@link goog.ui.ButtonRenderer#createDom}.
         * @param control goog.ui.Button to render.
         */
        createDom(control: ಠ_ಠ.clutz.goog.ui.Control|null): GlobalElement;
        decorate(
            button: ಠ_ಠ.clutz.goog.ui.Control|null,
            element: GlobalElement|null): GlobalElement|null;
        getContentElement(element: GlobalElement|null): GlobalElement|null;
        /**
         * Returns the CSS class to be applied to the root element of components
         * rendered using this renderer.
         */
        getCssClass(): string;
    }
}
declare module 'goog:goog.ui.Css3ButtonRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.Css3ButtonRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Custom renderer for {@link goog.ui.MenuButton}s. Css3 buttons can contain
     * almost arbitrary HTML content, will flow like inline elements, but can be
     * styled like block-level elements.
     */
    class Css3MenuButtonRenderer extends Css3MenuButtonRenderer_Instance {
        /**
         * Default CSS class to be applied to the root element of components
         * rendered by this renderer.
         */
        static CSS_CLASS: string;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.Css3MenuButtonRenderer;
        static instance_: ಠ_ಠ.clutz.goog.ui.Css3MenuButtonRenderer;
    }
    class Css3MenuButtonRenderer_Instance extends
        ಠ_ಠ.clutz.goog.ui.MenuButtonRenderer_Instance {
        /**
         * Returns true if this renderer can decorate the element.  Overrides
         * {@link goog.ui.MenuButtonRenderer#canDecorate} by returning true if
         * the element is a DIV, false otherwise.
         * @param element Element to decorate.
         */
        canDecorate(element: GlobalElement|null): boolean;
        /**
         * Takes a text caption or existing DOM structure, and returns the
         * content wrapped in a pseudo-rounded-corner box.  Creates the
         * following DOM structure:
         *
         * <div class="goog-inline-block goog-css3-button
         * goog-css3-menu-button"> <div
         * class="goog-css3-button-caption">Contents...</div> <div
         * class="goog-css3-button-dropdown"></div>
         * </div>
         *
         * Used by both {@link #createDom} and {@link #decorate}.  To be
         * overridden by subclasses.
         * @param content Text caption or DOM structure to wrap in a box.
         * @param dom DOM helper, used for document interaction.
         */
        createButton(
            content: string|Node|null|Node[]|NodeListOf<Node>,
            dom: ಠ_ಠ.clutz.goog.dom.DomHelper|null): GlobalElement;
        getContentElement(element: GlobalElement|null): GlobalElement|null;
        /**
         * Returns the CSS class to be applied to the root element of components
         * rendered using this renderer.
         */
        getCssClass(): string;
    }
}
declare module 'goog:goog.ui.Css3MenuButtonRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.Css3MenuButtonRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * RoundedPanel class specifically for browsers that support CSS attributes
     * for elements with rounded borders (ex. Safari 3.0+, Firefox 3.0+). Do not
     * instantiate directly. Instead, call goog.ui.RoundedPanel.create().
     */
    class CssRoundedPanel extends CssRoundedPanel_Instance {}
    class CssRoundedPanel_Instance extends
        ಠ_ಠ.clutz.goog.ui.BaseRoundedPanel_Instance {
        /**
         * RoundedPanel class specifically for browsers that support CSS
         * attributes for elements with rounded borders (ex. Safari 3.0+,
         * Firefox 3.0+). Do not instantiate directly. Instead, call
         * goog.ui.RoundedPanel.create().
         * @param radius The radius of the rounded corner(s), in pixels.
         * @param borderWidth The thickness of the border, in pixels.
         * @param borderColor The border color of the panel.
         * @param opt_backgroundColor The background color of the panel.
         * @param opt_corners The corners of the panel to be rounded. Any
         * corners not specified will be rendered as square corners. Will
         * default to all square corners if not specified.
         * @param opt_domHelper The DOM helper object for the document we want
         * to render in.
         */
        constructor(
            radius: number, borderWidth: number, borderColor: string,
            opt_backgroundColor?: string, opt_corners?: number,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * This method performs all the necessary DOM manipulation to create the
         * panel. Overrides {@link goog.ui.Component#decorateInternal}.
         * @param element The element to decorate.
         */
        decorateInternal(element: GlobalElement|null): void;
    }
}
declare module 'goog:goog.ui.CssRoundedPanel' {
    import alias = ಠ_ಠ.clutz.goog.ui.CssRoundedPanel;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * A custom button control.  Identical to {@link goog.ui.Button}, except it
     * defaults its renderer to {@link goog.ui.CustomButtonRenderer}.  One could
     * just as easily pass {@code goog.ui.CustomButtonRenderer.getInstance()} to
     * the {@link goog.ui.Button} constructor and get the same result.  Provided
     * for convenience.
     */
    class CustomButton extends CustomButton_Instance {}
    class CustomButton_Instance extends ಠ_ಠ.clutz.goog.ui.Button_Instance {
        /**
         * A custom button control.  Identical to {@link goog.ui.Button}, except
         * it defaults its renderer to {@link goog.ui.CustomButtonRenderer}.
         * One could just as easily pass {@code
         * goog.ui.CustomButtonRenderer.getInstance()} to the {@link
         * goog.ui.Button} constructor and get the same result.  Provided for
         * convenience.
         * @param content Text caption or existing DOM structure to display as
         * the button's caption.
         * @param opt_renderer Optional renderer used to render or decorate the
         * button; defaults to {@link goog.ui.CustomButtonRenderer}.
         * @param opt_domHelper Optional DOM helper, used for document
         * interaction.
         */
        constructor(
            content: string|Node|null|Node[]|NodeListOf<Node>,
            opt_renderer?: ಠ_ಠ.clutz.goog.ui.ButtonRenderer|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
    }
}
declare module 'goog:goog.ui.CustomButton' {
    import alias = ಠ_ಠ.clutz.goog.ui.CustomButton;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Custom renderer for {@link goog.ui.Button}s.  Custom buttons can contain
     * almost arbitrary HTML content, will flow like inline elements, but can be
     * styled like block-level elements.
     */
    class CustomButtonRenderer extends CustomButtonRenderer_Instance {
        /**
         * Default CSS class to be applied to the root element of components
         * rendered by this renderer.
         */
        static CSS_CLASS: string;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.CustomButtonRenderer;
        static instance_: ಠ_ಠ.clutz.goog.ui.CustomButtonRenderer;
    }
    class CustomButtonRenderer_Instance extends
        ಠ_ಠ.clutz.goog.ui.ButtonRenderer_Instance {
        /**
         * Returns true if this renderer can decorate the element.  Overrides
         * {@link goog.ui.ButtonRenderer#canDecorate} by returning true if the
         * element is a DIV, false otherwise.
         * @param element Element to decorate.
         */
        canDecorate(element: GlobalElement|null): boolean;
        /**
         * Takes a text caption or existing DOM structure, and returns the
         * content wrapped in a pseudo-rounded-corner box.  Creates the
         * following DOM structure:
         *
         * <div class="goog-inline-block goog-custom-button-outer-box">
         * <div class="goog-inline-block goog-custom-button-inner-box">
         * Contents...
         * </div>
         * </div>
         *
         * Used by both {@link #createDom} and {@link #decorate}.  To be
         * overridden by subclasses.
         * @param content Text caption or DOM structure to wrap in a box.
         * @param dom DOM helper, used for document interaction.
         */
        createButton(
            content: string|Node|null|Node[]|NodeListOf<Node>,
            dom: ಠ_ಠ.clutz.goog.dom.DomHelper|null): GlobalElement|null;
        /**
         * Returns the button's contents wrapped in the following DOM structure:
         *
         * <div class="goog-inline-block goog-custom-button">
         * <div class="goog-inline-block goog-custom-button-outer-box">
         * <div class="goog-inline-block goog-custom-button-inner-box">
         * Contents...
         * </div>
         * </div>
         * </div>
         *
         * Overrides {@link goog.ui.ButtonRenderer#createDom}.
         * @param control goog.ui.Button to render.
         */
        createDom(control: ಠ_ಠ.clutz.goog.ui.Control|null): GlobalElement;
        /**
         * Takes an existing element and decorates it with the custom button
         * control. Initializes the control's ID, content, tooltip, value, and
         * state based on the ID of the element, its child nodes, and its CSS
         * classes, respectively. Returns the element.  Overrides {@link
         * goog.ui.ButtonRenderer#decorate}.
         * @param control Button instance to decorate the element.
         * @param element Element to decorate.
         */
        decorate(
            control: ಠ_ಠ.clutz.goog.ui.Control|null,
            element: GlobalElement|null): GlobalElement|null;
        /**
         * Returns the ARIA role to be applied to custom buttons.
         */
        getAriaRole(): ಠ_ಠ.clutz.goog.a11y.aria.Role|undefined;
        /**
         * Takes the button's root element and returns the parent element of the
         * button's contents.  Overrides the superclass implementation by taking
         * the nested DIV structure of custom buttons into account.
         * @param element Root element of the button whose content element is to
         * be returned.
         */
        getContentElement(element: GlobalElement|null): GlobalElement|null;
        /**
         * Returns the CSS class to be applied to the root element of components
         * rendered using this renderer.
         */
        getCssClass(): string;
        /**
         * Check if the button's element has a box structure.
         * @param button Button instance whose structure is being checked.
         * @param element Element of the button.
         */
        hasBoxStructure(
            button: ಠ_ಠ.clutz.goog.ui.Button|null,
            element: GlobalElement|null): boolean;
    }
}
declare module 'goog:goog.ui.CustomButtonRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.CustomButtonRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * A custom color palette is a grid of color swatches and a button that
     * allows the user to add additional colors to the palette
     */
    class CustomColorPalette extends CustomColorPalette_Instance {}
    class CustomColorPalette_Instance extends
        ಠ_ಠ.clutz.goog.ui.ColorPalette_Instance {
        /**
         * A custom color palette is a grid of color swatches and a button that
         * allows the user to add additional colors to the palette
         * @param initColors Array of initial colors to populate the palette
         * with.
         * @param opt_renderer Renderer used to render or decorate the palette;
         * defaults to {@link goog.ui.PaletteRenderer}.
         * @param opt_domHelper Optional DOM helper, used for document
         * interaction.
         */
        constructor(
            initColors: string[]|null,
            opt_renderer?: ಠ_ಠ.clutz.goog.ui.PaletteRenderer|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * Returns an array of DOM nodes for each color, and an additional cell
         * with a
         * '+'.
         */
        createColorNodes(): Node[];
        performActionInternal(e: ಠ_ಠ.clutz.goog.events.Event|null): boolean;
        /**
         * Prompts the user to enter a custom color.  Currently uses a
         * window.prompt but could be updated to use a dialog box with a
         * WheelColorPalette.
         */
        promptForCustomColor(): void;
    }
}
declare module 'goog:goog.ui.CustomColorPalette' {
    import alias = ಠ_ಠ.clutz.goog.ui.CustomColorPalette;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * DatePicker widget. Allows a single date to be selected from a calendar
     * like view.
     */
    class DatePicker extends DatePicker_Instance {}
    class DatePicker_Instance extends ಠ_ಠ.clutz.goog.ui.Component_Instance {
        /**
         * DatePicker widget. Allows a single date to be selected from a
         * calendar like view.
         * @param opt_date Date to initialize the date picker with, defaults to
         * the current date.
         * @param opt_dateTimeSymbols Date and time symbols to use. Defaults to
         * goog.i18n.DateTimeSymbols if not set.
         * @param opt_domHelper Optional DOM helper.
         * @param opt_renderer Optional Date picker renderer.
         */
        constructor(
            opt_date?: ಠ_ಠ.clutz.goog.date.Date|null|GlobalDate,
            opt_dateTimeSymbols?: GlobalObject|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null,
            opt_renderer?: ಠ_ಠ.clutz.goog.ui.DatePickerRenderer|null);
        i18nDateFormatterDay2_: ಠ_ಠ.clutz.goog.i18n.DateTimeFormat;
        i18nDateFormatterDayAriaLabel_: ಠ_ಠ.clutz.goog.i18n.DateTimeFormat;
        i18nDateFormatterDay_: ಠ_ಠ.clutz.goog.i18n.DateTimeFormat;
        i18nDateFormatterMonthYear_: ಠ_ಠ.clutz.goog.i18n.DateTimeFormat;
        i18nDateFormatterWeek_: ಠ_ಠ.clutz.goog.i18n.DateTimeFormat;
        i18nDateFormatterYear_: ಠ_ಠ.clutz.goog.i18n.DateTimeFormat;
        /**
         * TODO(tbreisacher): Remove external references to this field,
         * and make it private.
         */
        tableBody_: GlobalElement|null;
        wdayNames_: string[];
        create(element: GlobalElement|null): void;
        createDom(): void;
        decorateInternal(el: GlobalElement|null): void;
        disposeInternal(): void;
        enterDocument(): void;
        exitDocument(): void;
        getActiveMonth(): ಠ_ಠ.clutz.goog.date.Date;
        getAllowNone(): boolean;
        /**
         * Returns base CSS class. This getter is used to get base CSS class
         * part. All CSS class names in component are created as:
         * goog.getCssName(this.getBaseCssClass(), 'CLASS_NAME')
         */
        getBaseCssClass(): string;
        getDate(): ಠ_ಠ.clutz.goog.date.Date|null;
        getDateAt(row: number, col: number): ಠ_ಠ.clutz.goog.date.Date|null;
        /**
         * Returns a date element given a row and column. In elTable_, the
         * elements that represent dates are 1 indexed because of other elements
         * such as headers. This corrects for the offset and makes the API 0
         * indexed.
         * @param row The row in the element table.
         * @param col The column in the element table.
         */
        getDateElementAt(row: number, col: number): GlobalElement|null;
        getExtraWeekAtEnd(): boolean;
        getFirstWeekday(): number;
        getShowFixedNumWeeks(): boolean;
        getShowOtherMonths(): boolean;
        getShowToday(): boolean;
        getShowWeekNum(): boolean;
        getShowWeekdayNames(): boolean;
        /**
         * Gets the range of dates which may be selected by the user.
         */
        getUserSelectableDateRange(): ಠ_ಠ.clutz.goog.date.DateRange;
        /**
         * Returns the class name associated with specified weekday.
         * @param wday The week day number to get the class name for.
         */
        getWeekdayClass(wday: number): string;
        isCreated(): boolean;
        /**
         * Changes the active month to the next one.
         */
        nextMonth(): void;
        /**
         * Changes the active year to the next one.
         */
        nextYear(): void;
        /**
         * Changes the active month to the previous one.
         */
        previousMonth(): void;
        /**
         * Changes the active year to the previous one.
         */
        previousYear(): void;
        /**
         * Clears the selection.
         */
        selectNone(): void;
        /**
         * Selects the current date.
         */
        selectToday(): void;
        /**
         * Sets whether none is a valid selection.
         * @param b Whether none is a valid selection.
         */
        setAllowNone(b: boolean): void;
        /**
         * Sets the selected date. Will always fire the SELECT event.
         * @param date Date to select or null to select nothing.
         */
        setDate(date: ಠ_ಠ.clutz.goog.date.Date|null|GlobalDate): void;
        /**
         * Sets the decorator function. The function should have the interface
         * of {string} f({goog.date.Date}); and return a String representing a
         * CSS class to decorate the cell corresponding to the date specified.
         * @param f The decorator function.
         */
        setDecorator(f: (...a: any[]) => any): void;
        /**
         * Sets whether a the extra week(s) added always should be at the end.
         * Only applicable if a fixed number of weeks are shown.
         * @param b Whether a the extra week(s) added always should be at the
         * end.
         */
        setExtraWeekAtEnd(b: boolean): void;
        /**
         * Sets the first day of week
         * @param wday Week day, 0 = Monday, 6 = Sunday.
         */
        setFirstWeekday(wday: number): void;
        /**
         * Sets whether the date will be printed in long format. In long format,
         * dates such as '1' will be printed as '01'.
         * @param b Whethere dates should be printed in long format.
         */
        setLongDateFormat(b: boolean): void;
        /**
         * Sets whether a fixed number of weeks should be showed. If not only
         * weeks for the current month will be showed.
         * @param b Whether a fixed number of weeks should be showed.
         */
        setShowFixedNumWeeks(b: boolean): void;
        /**
         * Sets whether a days from the previous and/or next month should be
         * shown.
         * @param b Whether a days from the previous and/or next month should be
         * shown.
         */
        setShowOtherMonths(b: boolean): void;
        /**
         * Sets whether the today button should be shown.
         * @param b Whether the today button should be shown.
         */
        setShowToday(b: boolean): void;
        /**
         * Sets whether week numbers should be shown.
         * @param b Whether week numbers should be shown.
         */
        setShowWeekNum(b: boolean): void;
        /**
         * Sets whether weekday names should be shown.
         * @param b Whether weekday names should be shown.
         */
        setShowWeekdayNames(b: boolean): void;
        /**
         * Sets whether the picker uses narrow weekday names ('M', 'T', 'W',
         * ...).
         *
         * The default behavior is to use short names ('Mon', 'Tue', 'Wed',
         * ...).
         * @param b Whether to use narrow weekday names.
         */
        setUseNarrowWeekdayNames(b: boolean): void;
        /**
         * Sets whether the picker should use a simple navigation menu that only
         * contains controls for navigating to the next and previous month. The
         * default navigation menu contains controls for navigating to the
         * next/previous month, next/previous year, and menus for jumping to
         * specific months and years.
         * @param b Whether to use a simple navigation menu.
         */
        setUseSimpleNavigationMenu(b: boolean): void;
        /**
         * Sets the range of dates which may be selected by the user.
         * @param dateRange The range of selectable dates.
         */
        setUserSelectableDateRange(dateRange: ಠ_ಠ.clutz.goog.date.DateRange):
            void;
        /**
         * Sets class name associated with specified weekday.
         * @param wday Week day, 0 = Monday, 6 = Sunday.
         * @param className Class name.
         */
        setWeekdayClass(wday: number, className: string): void;
    }
}
declare module 'goog:goog.ui.DatePicker' {
    import alias = ಠ_ಠ.clutz.goog.ui.DatePicker;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.DatePicker.Events {
    var CHANGE: string;
    var CHANGE_ACTIVE_MONTH: string;
    var SELECT: string;
}
declare module 'goog:goog.ui.DatePicker.Events' {
    import alias = ಠ_ಠ.clutz.goog.ui.DatePicker.Events;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Object representing a date picker event.
     */
    class DatePickerEvent extends DatePickerEvent_Instance {}
    class DatePickerEvent_Instance extends
        ಠ_ಠ.clutz.goog.events.Event_Instance {
        /**
         * Object representing a date picker event.
         * @param type Event type.
         * @param target Date picker initiating event.
         * @param date Selected date.
         */
        constructor(
            type: string, target: ಠ_ಠ.clutz.goog.ui.DatePicker|null,
            date: ಠ_ಠ.clutz.goog.date.Date|null);
        /**
         * The selected date
         */
        date: ಠ_ಠ.clutz.goog.date.Date|null;
    }
}
declare module 'goog:goog.ui.DatePickerEvent' {
    import alias = ಠ_ಠ.clutz.goog.ui.DatePickerEvent;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * The renderer for {@link goog.ui.DatePicker}. Renders the date picker's
     * navigation header and footer.
     */
    interface DatePickerRenderer {
        /**
         * Render the footer row.
         * @param row The parent element to render the component into.
         * @param showWeekNum Whether week numbers should be shown.
         */
        renderFooterRow(a: GlobalElement, b: boolean): any;
        /**
         * Render the navigation row.
         * @param row The parent element to render the component into.
         * @param simpleNavigation Whether the picker should render a simple
         * navigation menu that only contains controls for navigating to the
         * next and previous month. The default navigation menu contains
         * controls for navigating to the next/previous month, next/previous
         * year, and menus for jumping to specific months and years.
         * @param showWeekNum Whether week numbers should be shown.
         * @param fullDateFormat The full date format. {@see goog.i18n.DateTimeSymbols}.
         */
        renderNavigationRow(
            a: GlobalElement, b: boolean, c: boolean, d: string): any;
    }
}
declare module 'goog:goog.ui.DatePickerRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.DatePickerRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Default renderer for {@link goog.ui.DatePicker}. Renders the date
     * picker's navigation header and footer.
     */
    class DefaultDatePickerRenderer extends DefaultDatePickerRenderer_Instance {
    }
    class DefaultDatePickerRenderer_Instance implements
        ಠ_ಠ.clutz.goog.ui.DatePickerRenderer {
        private noStructuralTyping_: any;
        /**
         * Default renderer for {@link goog.ui.DatePicker}. Renders the date
         * picker's navigation header and footer.
         * @param baseCssClass Name of base CSS class of the date picker.
         * @param opt_domHelper DOM helper.
         */
        constructor(
            baseCssClass: string,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * Returns base CSS class. This getter is used to get base CSS class
         * part. All CSS class names in component are created as:
         * goog.getCssName(this.getBaseCssClass(), 'CLASS_NAME')
         */
        getBaseCssClass(): string;
        /**
         * Returns the dom helper that is being used on this component.
         */
        getDomHelper(): ಠ_ಠ.clutz.goog.dom.DomHelper;
        /**
         * Render the footer row (with select buttons).
         * @param row The parent element to render the component into.
         * @param showWeekNum Whether week numbers should be shown.
         */
        renderFooterRow(row: GlobalElement, showWeekNum: boolean): any;
        /**
         * Render the navigation row (navigating months and maybe years).
         * @param row The parent element to render the component into.
         * @param simpleNavigation Whether the picker should render a simple
         * navigation menu that only contains controls for navigating to the
         * next and previous month. The default navigation menu contains
         * controls for navigating to the next/previous month, next/previous
         * year, and menus for jumping to specific months and years.
         * @param showWeekNum Whether week numbers should be shown.
         * @param fullDateFormat The full date format. {@see goog.i18n.DateTimeSymbols}.
         */
        renderNavigationRow(
            row: GlobalElement, simpleNavigation: boolean, showWeekNum: boolean,
            fullDateFormat: string): any;
    }
}
declare module 'goog:goog.ui.DefaultDatePickerRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.DefaultDatePickerRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Class for showing simple dialog boxes.
     * The Html structure of the dialog box is:
     * <pre>
     * Element         Function                Class-name, modal-dialog =
     * default
     * ----------------------------------------------------------------------------
     * - iframe         Iframe mask              modal-dialog-bg
     * - div            Background mask          modal-dialog-bg
     * - div            Dialog area              modal-dialog
     * - div        Title bar                modal-dialog-title
     * - span                             modal-dialog-title-text
     * - text  Title text               N/A
     * - span                             modal-dialog-title-close
     * - ??    Close box                N/A
     * - div        Content area             modal-dialog-content
     * - ??      User specified content   N/A
     * - div        Button area              modal-dialog-buttons
     * - button                           N/A
     * - button
     * - ...
     * </pre>
     */
    class Dialog extends Dialog_Instance {
        /**
         * Event type constant for dialog events.
         * TODO(attila): Change this to goog.ui.Dialog.EventType.SELECT.
         */
        static SELECT_EVENT: string;
    }
    class Dialog_Instance extends ಠ_ಠ.clutz.goog.ui.ModalPopup_Instance {
        /**
         * Class for showing simple dialog boxes.
         * The Html structure of the dialog box is:
         * <pre>
         * Element         Function                Class-name, modal-dialog =
         * default
         * ----------------------------------------------------------------------------
         * - iframe         Iframe mask              modal-dialog-bg
         * - div            Background mask          modal-dialog-bg
         * - div            Dialog area              modal-dialog
         * - div        Title bar                modal-dialog-title
         * - span                             modal-dialog-title-text
         * - text  Title text               N/A
         * - span                             modal-dialog-title-close
         * - ??    Close box                N/A
         * - div        Content area             modal-dialog-content
         * - ??      User specified content   N/A
         * - div        Button area              modal-dialog-buttons
         * - button                           N/A
         * - button
         * - ...
         * </pre>
         * @param opt_class CSS class name for the dialog element, also used as
         * a class name prefix for related elements; defaults to modal-dialog.
         * This should be a single, valid CSS class name.
         * @param opt_useIframeMask Work around windowed controls z-index issue
         * by using an iframe instead of a div for bg element.
         * @param opt_domHelper Optional DOM helper; see {@link
         * goog.ui.Component} for semantics.
         */
        constructor(
            opt_class?: string, opt_useIframeMask?: boolean,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        createDom(): void;
        /**
         * Returns a dragger for moving the dialog and adds a class for the move
         * cursor. Defaults to allow dragging of the title only, but can be
         * overridden if different drag targets or dragging behavior is desired.
         */
        createDragger(): ಠ_ಠ.clutz.goog.fx.Dragger;
        decorateInternal(element: GlobalElement|null): void;
        disposeInternal(): void;
        enterDocument(): void;
        exitDocument(): void;
        /**
         * Returns the background mask element so that more complicated things
         * can be done with the background region.  Renders if the DOM is not
         * yet created.
         */
        getBackgroundElement(): GlobalElement|null;
        /**
         * Gets the opacity of the background mask.
         */
        getBackgroundElementOpacity(): number;
        /**
         * Returns the button element so that more complicated things can be
         * done with the button area.  Renders if the DOM is not yet created.
         */
        getButtonElement(): GlobalElement|null;
        /**
         * Returns the button set being used.
         */
        getButtonSet(): ಠ_ಠ.clutz.goog.ui.Dialog.ButtonSet|null;
        getClass(): string;
        /**
         * Gets the content HTML of the content element as a plain string.
         *
         * Note that this method returns the HTML markup that was previously set
         * via setContent(). In particular, the HTML returned by this method
         * does not reflect any changes to the content element's DOM that were
         * made my means other than setContent().
         */
        getContent(): string;
        /**
         * Returns the content element so that more complicated things can be
         * done with the content area.  Renders if the DOM is not yet created.
         * Overrides
         * {@link goog.ui.Component#getContentElement}.
         */
        getContentElement(): GlobalElement|null;
        getCssClass(): string;
        /**
         * Returns the dialog element so that more complicated things can be
         * done with the dialog box.  Renders if the DOM is not yet created.
         */
        getDialogElement(): GlobalElement|null;
        getDisposeOnHide(): boolean;
        getDraggable(): boolean;
        getHasTitleCloseButton(): boolean;
        getModal(): boolean;
        /**
         * Returns the dialog's preferred ARIA role. This can be used to
         * override the default dialog role, e.g. with an ARIA role of
         * ALERTDIALOG for a simple warning or confirmation dialog.
         */
        getPreferredAriaRole(): ಠ_ಠ.clutz.goog.a11y.aria.Role;
        /**
         * Gets the content HTML of the content element.
         */
        getSafeHtmlContent(): ಠ_ಠ.clutz.goog.html.SafeHtml|null;
        /**
         * Gets the title.
         */
        getTitle(): string;
        /**
         * Returns the title close element so that more complicated things can
         * be done with the close area of the title.  Renders if the DOM is not
         * yet created.
         */
        getTitleCloseElement(): GlobalElement|null;
        /**
         * Returns the title element so that more complicated things can be done
         * with the title.  Renders if the DOM is not yet created.
         */
        getTitleElement(): GlobalElement|null;
        /**
         * Returns the title text element so that more complicated things can be
         * done with the text of the title.  Renders if the DOM is not yet
         * created.
         */
        getTitleTextElement(): GlobalElement|null;
        isEscapeToCancel(): boolean;
        onHide(): void;
        onShow(): void;
        /**
         * Sets the opacity of the background mask.
         * @param opacity Background mask opacity.
         */
        setBackgroundElementOpacity(opacity: number): void;
        /**
         * Sets the button set to use.
         * Note: Passing in null will cause no button set to be rendered.
         * @param buttons The button set to use.
         */
        setButtonSet(buttons: ಠ_ಠ.clutz.goog.ui.Dialog.ButtonSet|null): void;
        /**
         * Sets whether the dialog should be disposed when it is hidden.  By
         * default dialogs are not disposed when they are hidden.
         * @param b Whether the dialog should get disposed when it gets hidden.
         */
        setDisposeOnHide(b: boolean): void;
        /**
         * Sets whether the dialog can be dragged.
         * @param draggable Whether the dialog can be dragged.
         */
        setDraggable(draggable: boolean): void;
        setEscapeToCancel(b: boolean): void;
        /**
         * Sets whether the dialog should have a close button in the title bar.
         * There will always be an element for the title close button, but
         * setting this parameter to false will cause it to be hidden and have
         * no active listener.
         * @param b Whether this dialog should have a title close button.
         */
        setHasTitleCloseButton(b: boolean): void;
        /**
         * Sets the modal property of the dialog. In case the dialog is already
         * inDocument, renders the modal background elements according to the
         * specified modal parameter.
         *
         * Note that non-modal dialogs cannot use an iframe mask.
         * @param modal Whether the dialog is modal.
         */
        setModal(modal: boolean): void;
        /**
         * Sets the dialog's preferred ARIA role. This can be used to override
         * the default dialog role, e.g. with an ARIA role of ALERTDIALOG for a
         * simple warning or confirmation dialog.
         * @param role This dialog's preferred ARIA role.
         */
        setPreferredAriaRole(role: ಠ_ಠ.clutz.goog.a11y.aria.Role): void;
        /**
         * Allows arbitrary HTML to be set in the content element.
         * @param html Content HTML.
         */
        setSafeHtmlContent(html: ಠ_ಠ.clutz.goog.html.SafeHtml): void;
        /**
         * Allows plain text to be set in the content element.
         * @param text Content plain text. Newlines are preserved.
         */
        setTextContent(text: string): void;
        /**
         * Sets the title.
         * @param title The title text.
         */
        setTitle(title: string): void;
        /**
         * Sets the visibility of the dialog box and moves focus to the
         * default button. Lazily renders the component if needed. After this
         * method returns, isVisible() will always return the new state, even
         * if there is a transition.
         * @param visible Whether the dialog should be visible.
         */
        setVisible(visible: boolean): void;
    }
}
declare module 'goog:goog.ui.Dialog' {
    import alias = ಠ_ಠ.clutz.goog.ui.Dialog;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.Dialog {
    /**
     * A button set defines the behaviour of a set of buttons that the dialog
     * can show.  Uses the {@link goog.structs.Map} interface.
     */
    class ButtonSet extends ButtonSet_Instance {
        static CONTINUE_SAVE_CANCEL: ಠ_ಠ.clutz.goog.ui.Dialog.ButtonSet;
        static OK: ಠ_ಠ.clutz.goog.ui.Dialog.ButtonSet;
        static OK_CANCEL: ಠ_ಠ.clutz.goog.ui.Dialog.ButtonSet;
        static YES_NO: ಠ_ಠ.clutz.goog.ui.Dialog.ButtonSet;
        static YES_NO_CANCEL: ಠ_ಠ.clutz.goog.ui.Dialog.ButtonSet;
        /**
         * Creates a new ButtonSet with 'Continue', 'Save', and 'Cancel'
         * (default) buttons.
         */
        static createContinueSaveCancel(): ಠ_ಠ.clutz.goog.ui.Dialog.ButtonSet;
        /**
         * Creates a new ButtonSet with a single 'OK' button, which is also set
         * with cancel button semantics so that pressing escape will close the
         * dialog.
         */
        static createOk(): ಠ_ಠ.clutz.goog.ui.Dialog.ButtonSet;
        /**
         * Creates a new ButtonSet with 'OK' (default) and 'Cancel' buttons.
         */
        static createOkCancel(): ಠ_ಠ.clutz.goog.ui.Dialog.ButtonSet;
        /**
         * Creates a new ButtonSet with 'Yes' (default) and 'No' buttons.
         */
        static createYesNo(): ಠ_ಠ.clutz.goog.ui.Dialog.ButtonSet;
        /**
         * Creates a new ButtonSet with 'Yes', 'No' (default), and 'Cancel'
         * buttons.
         */
        static createYesNoCancel(): ಠ_ಠ.clutz.goog.ui.Dialog.ButtonSet;
    }
    class ButtonSet_Instance extends ಠ_ಠ.clutz.goog.structs.Map<any, any> {
        /**
         * A button set defines the behaviour of a set of buttons that the
         * dialog can show.  Uses the {@link goog.structs.Map} interface.
         * @param opt_domHelper Optional DOM helper; see {@link
         * goog.ui.Component} for semantics.
         */
        constructor(opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        dom_: ಠ_ಠ.clutz.goog.dom.DomHelper;
        /**
         * Adds a button (an object with a key and caption) to this button set.
         * Buttons will be displayed in the order they are added.
         * @param button The button key and caption.
         * @param opt_isDefault Whether this button is the default button.
         * Dialog will dispatch for this button if enter is pressed.
         * @param opt_isCancel Whether this button has the same behavior as
         * cancel. If escape is pressed this button will fire.
         */
        addButton(
            button: {caption: string, key: string}, opt_isDefault?: boolean,
            opt_isCancel?: boolean): ಠ_ಠ.clutz.goog.ui.Dialog.ButtonSet;
        /**
         * Attaches the button set to an element, rendering it inside.
         * @param el Container.
         */
        attachToElement(el: GlobalElement|null): void;
        clear(): void;
        /**
         * Decorates the given element by adding any {@code button} elements
         * found among its descendants to the button set.  The first button
         * found is assumed to be the default and will receive focus when the
         * button set is rendered. If a button with a name of {@link
         * goog.ui.Dialog.DefaultButtonKeys.CANCEL} is found, it is assumed to
         * have "Cancel" semantics.
         * TODO(attila):  ButtonSet should be a goog.ui.Component.  Really.
         * @param element The element to decorate; should contain buttons.
         */
        decorate(element: GlobalElement|null): void;
        /**
         * Returns all the HTML Button elements in the button set container.
         */
        getAllButtons(): ArrayLike<GlobalElement>;
        /**
         * Returns the HTML Button element.
         * @param key The button to return.
         */
        getButton(key: string): GlobalElement|null;
        /**
         * Returns the cancel button.
         */
        getCancel(): string|null;
        /**
         * Returns the default button.
         */
        getDefault(): string|null;
        /**
         * Returns the dom helper that is being used on this component.
         */
        getDomHelper(): ಠ_ಠ.clutz.goog.dom.DomHelper;
        /**
         * Gets the component's element.
         */
        getElement(): GlobalElement|null;
        /**
         * Renders the button set inside its container element.
         */
        render(): void;
        /**
         * Adds a button to the button set.  Buttons will be displayed in the
         * order they are added.
         * @param key Key used to identify the button in events.
         * @param caption A string caption or a DOM node that can be appended to
         * a button element.
         * @param opt_isDefault Whether this button is the default button,
         * Dialog will dispatch for this button if enter is pressed.
         * @param opt_isCancel Whether this button has the same behaviour as
         * cancel.  If escape is pressed this button will fire.
         */
        set(key: any, caption: any, opt_isDefault?: boolean,
            opt_isCancel?: boolean): ಠ_ಠ.clutz.goog.ui.Dialog.ButtonSet;
        /**
         * Enables or disables all of the buttons in this set.
         * @param enabled True to enable; false to disable.
         */
        setAllButtonsEnabled(enabled: boolean): void;
        /**
         * Enables or disables a button in this set by key. If the button is not
         * found, does nothing.
         * @param key The button to enable or disable.
         * @param enabled True to enable; false to disable.
         */
        setButtonEnabled(key: string, enabled: boolean): void;
        /**
         * Sets the cancel button.
         * @param key The cancel button.
         */
        setCancel(key: string|null): void;
        /**
         * Sets the default button.
         * @param key The default button.
         */
        setDefault(key: string|null): void;
    }
}
declare module 'goog:goog.ui.Dialog.ButtonSet' {
    import alias = ಠ_ಠ.clutz.goog.ui.Dialog.ButtonSet;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.Dialog.ButtonSet {
    /**
     * The standard buttons (keys associated with captions).
     */
    type DefaultButtons = {caption: string, key: string}&
        {clutzEnumBrand: never};
    var DefaultButtons: {
        CANCEL: DefaultButtons,
        CONTINUE: DefaultButtons,
        NO: DefaultButtons,
        OK: DefaultButtons,
        SAVE: DefaultButtons,
        YES: DefaultButtons,
    };
}
declare module 'goog:goog.ui.Dialog.ButtonSet.DefaultButtons' {
    import alias = ಠ_ಠ.clutz.goog.ui.Dialog.ButtonSet.DefaultButtons;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.Dialog {
    /**
     * The default captions for the default buttons.
     */
    type DefaultButtonCaptions = string&{clutzEnumBrand: never};
    var DefaultButtonCaptions: {
        CANCEL: DefaultButtonCaptions,
        CONTINUE: DefaultButtonCaptions,
        NO: DefaultButtonCaptions,
        OK: DefaultButtonCaptions,
        SAVE: DefaultButtonCaptions,
        YES: DefaultButtonCaptions,
    };
}
declare module 'goog:goog.ui.Dialog.DefaultButtonCaptions' {
    import alias = ಠ_ಠ.clutz.goog.ui.Dialog.DefaultButtonCaptions;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.Dialog {
    /**
     * The keys used to identify standard buttons in events.
     */
    type DefaultButtonKeys = string&{clutzEnumBrand: never};
    var DefaultButtonKeys: {
        CANCEL: DefaultButtonKeys,
        CONTINUE: DefaultButtonKeys,
        NO: DefaultButtonKeys,
        OK: DefaultButtonKeys,
        SAVE: DefaultButtonKeys,
        YES: DefaultButtonKeys,
    };
}
declare module 'goog:goog.ui.Dialog.DefaultButtonKeys' {
    import alias = ಠ_ಠ.clutz.goog.ui.Dialog.DefaultButtonKeys;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.Dialog {
    /**
     * Dialog event class.
     */
    class Event extends Event_Instance {}
    class Event_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
        /**
         * Dialog event class.
         * @param key Key identifier for the button.
         * @param caption Caption on the button (might be i18nlized).
         */
        constructor(key: string, caption: string|GlobalElement|null);
        caption: string|GlobalElement|null;
        key: string;
        type: string;
    }
}
declare module 'goog:goog.ui.Dialog.Event' {
    import alias = ಠ_ಠ.clutz.goog.ui.Dialog.Event;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.Dialog {
    /**
     * Events dispatched by dialogs.
     */
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        AFTER_HIDE: EventType,
        AFTER_SHOW: EventType,
        SELECT: EventType,
    };
}
declare module 'goog:goog.ui.Dialog.EventType' {
    import alias = ಠ_ಠ.clutz.goog.ui.Dialog.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * A dimension picker allows the user to visually select a row and column
     * count using their mouse and keyboard.
     *
     * The currently selected dimension is controlled by an ACTION event.  Event
     * listeners may retrieve the selected item using the
     * {@link #getValue} method.
     */
    class DimensionPicker extends DimensionPicker_Instance {}
    class DimensionPicker_Instance extends ಠ_ಠ.clutz.goog.ui.Control_Instance {
        /**
         * A dimension picker allows the user to visually select a row and
         * column count using their mouse and keyboard.
         *
         * The currently selected dimension is controlled by an ACTION event.
         * Event listeners may retrieve the selected item using the
         * {@link #getValue} method.
         * @param opt_renderer Renderer used to render or decorate the palette;
         * defaults to {@link goog.ui.DimensionPickerRenderer}.
         * @param opt_domHelper Optional DOM helper, used for document
         * interaction.
         */
        constructor(
            opt_renderer?: ಠ_ಠ.clutz.goog.ui.DimensionPickerRenderer|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        disposeInternal(): void;
        enterDocument(): void;
        exitDocument(): void;
        getSize(): ಠ_ಠ.clutz.goog.math.Size|null;
        getValue(): ಠ_ಠ.clutz.goog.math.Size;
        /**
         * Handle key events if supported, so the user can use the keyboard to
         * manipulate the highlighted rows and columns.
         * @param e The key event object.
         */
        handleKeyEvent(e: ಠ_ಠ.clutz.goog.events.KeyEvent|null): boolean;
        /**
         * Handles mousemove events.  Determines which palette size was moused
         * over and highlights it.
         * @param e Mouse event to handle.
         */
        handleMouseMove(e: ಠ_ಠ.clutz.goog.events.BrowserEvent|null): void;
        /**
         * Handles window resize events.  Ensures no scrollbars are introduced
         * by the renderer's mouse catcher.
         * @param e Resize event to handle.
         */
        handleWindowResize(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Maximum number of columns to show in the grid.
         */
        maxColumns: number;
        /**
         * Maximum number of rows to show in the grid.
         */
        maxRows: number;
        /**
         * Minimum number of columns to show in the grid.
         */
        minColumns: number;
        /**
         * Minimum number of rows to show in the grid.
         */
        minRows: number;
        /**
         * Sets the currently highlighted dimensions. If the dimensions are not
         * valid (not between 1 and the maximum number of columns/rows to show),
         * they will be changed to the closest valid value.
         * @param columns The number of columns to highlight, or a
         * goog.math.Size object containing both.
         * @param opt_rows The number of rows to highlight.  Can be omitted when
         * columns is a good.math.Size object.
         */
        setValue(columns: number|ಠ_ಠ.clutz.goog.math.Size, opt_rows?: number):
            void;
    }
}
declare module 'goog:goog.ui.DimensionPicker' {
    import alias = ಠ_ಠ.clutz.goog.ui.DimensionPicker;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Default renderer for {@link goog.ui.DimensionPicker}s.  Renders the
     * palette as two divs, one with the un-highlighted background, and one with
     * the highlighted background.
     */
    class DimensionPickerRenderer extends DimensionPickerRenderer_Instance {
        /**
         * Default CSS class to be applied to the root element of components
         * rendered by this renderer.
         */
        static CSS_CLASS: string;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.DimensionPickerRenderer;
        static instance_: ಠ_ಠ.clutz.goog.ui.DimensionPickerRenderer;
    }
    class DimensionPickerRenderer_Instance extends
        ಠ_ಠ.clutz.goog.ui.ControlRenderer_Instance {
        /**
         * Overrides {@link goog.ui.ControlRenderer#canDecorate} to allow
         * decorating empty DIVs only.
         * @param element The element to check.
         */
        canDecorate(element: GlobalElement|null): boolean;
        /**
         * Creates a div and adds the appropriate contents to it.
         * @param control Picker to render.
         */
        createDom(control: ಠ_ಠ.clutz.goog.ui.Control|null): GlobalElement;
        /**
         * Overrides {@link goog.ui.ControlRenderer#decorate} to decorate empty
         * DIVs.
         * @param control goog.ui.DimensionPicker to decorate.
         * @param element The element to decorate.
         */
        decorate(
            control: ಠ_ಠ.clutz.goog.ui.Control|null,
            element: GlobalElement|null): GlobalElement|null;
        /**
         * Returns the CSS class to be applied to the root element of components
         * rendered using this renderer.
         */
        getCssClass(): string;
        /**
         * Returns the x offset in to the grid for the given mouse x position.
         * @param palette The table size palette.
         * @param x The mouse event x position.
         */
        getGridOffsetX(
            palette: ಠ_ಠ.clutz.goog.ui.DimensionPicker|null, x: number): number;
        /**
         * Returns the y offset in to the grid for the given mouse y position.
         * @param palette The table size palette.
         * @param y The mouse event y position.
         */
        getGridOffsetY(
            palette: ಠ_ಠ.clutz.goog.ui.DimensionPicker|null, y: number): number;
        /**
         * Get the element to listen for mouse move events on.
         * @param palette The palette to listen on.
         */
        getMouseMoveElement(palette: ಠ_ಠ.clutz.goog.ui.DimensionPicker|
                            null): GlobalElement|null;
        /**
         * Initializes the control's DOM when the control enters the document.
         * Called from {@link goog.ui.Control#enterDocument}.
         * @param control Palette whose DOM is to be initialized as it enters
         * the document.
         */
        initializeDom(control: ಠ_ಠ.clutz.goog.ui.Control|null): void;
        /**
         * Position the mouse catcher such that it receives mouse events past
         * the selectedsize up to the maximum size.  Takes care to not introduce
         * scrollbars. Should be called on enter document and when the window
         * changes size.
         * @param palette The table size palette.
         */
        positionMouseCatcher(palette: ಠ_ಠ.clutz.goog.ui.DimensionPicker|
                             null): void;
        /**
         * Sets the highlighted size. Does nothing if the palette hasn't been
         * rendered.
         * @param palette The table size palette.
         * @param columns The number of columns to highlight.
         * @param rows The number of rows to highlight.
         */
        setHighlightedSize(
            palette: ಠ_ಠ.clutz.goog.ui.DimensionPicker|null, columns: number,
            rows: number): void;
        /**
         * Scales various elements in order to update the palette's size.
         * @param palette The palette object.
         * @param element The element to set the style of.
         */
        updateSize(
            palette: ಠ_ಠ.clutz.goog.ui.DimensionPicker|null,
            element: GlobalElement|null): void;
    }
}
declare module 'goog:goog.ui.DimensionPickerRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.DimensionPickerRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Creates a new drag and drop detector.
     */
    class DragDropDetector extends DragDropDetector_Instance {
        /**
         * Initial value for clientX and clientY indicating that the location
         * has never been updated.
         */
        static INIT_POSITION: number;
        static MSG_DRAG_DROP_LOCAL_FILE_ERROR: string;
        static MSG_DRAG_DROP_PROTECTED_FILE_ERROR: string;
    }
    class DragDropDetector_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * Creates a new drag and drop detector.
         * @param opt_filePath The URL of the page to use for the detector. It
         * should contain the same contents as dragdropdetector_target.html in
         * the demos directory.
         */
        constructor(opt_filePath?: string);
        disposeInternal(): void;
    }
}
declare module 'goog:goog.ui.DragDropDetector' {
    import alias = ಠ_ಠ.clutz.goog.ui.DragDropDetector;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.DragDropDetector {
    /**
     * Drag and drop event types.
     */
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        IMAGE_DROPPED: EventType,
        LINK_DROPPED: EventType,
    };
}
declare module 'goog:goog.ui.DragDropDetector.EventType' {
    import alias = ಠ_ಠ.clutz.goog.ui.DragDropDetector.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.DragDropDetector {
    /**
     * Creates a new image drop event object.
     */
    class ImageDropEvent extends ImageDropEvent_Instance {}
    class ImageDropEvent_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
        /**
         * Creates a new image drop event object.
         * @param url The url of the dropped image.
         * @param position The screen position where the drop occurred.
         */
        constructor(url: string, position: ಠ_ಠ.clutz.goog.math.Coordinate|null);
        getPosition(): ಠ_ಠ.clutz.goog.math.Coordinate|null;
        getUrl(): string;
    }
}
declare module 'goog:goog.ui.DragDropDetector.ImageDropEvent' {
    import alias = ಠ_ಠ.clutz.goog.ui.DragDropDetector.ImageDropEvent;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.DragDropDetector {
    /**
     * Creates a new link drop event object.
     */
    class LinkDropEvent extends LinkDropEvent_Instance {}
    class LinkDropEvent_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
        /**
         * Creates a new link drop event object.
         * @param url The url of the dropped link.
         */
        constructor(url: string);
        getUrl(): string;
    }
}
declare module 'goog:goog.ui.DragDropDetector.LinkDropEvent' {
    import alias = ಠ_ಠ.clutz.goog.ui.DragDropDetector.LinkDropEvent;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Builds a DrilldownRow component, which can overlay a tree
     * structure onto sections of an HTML table.
     */
    class DrilldownRow extends DrilldownRow_Instance {
        /**
         * This static function is a default decorator that adds HTML at the
         * beginning of the first cell to display indentation and an expander
         * image; sets up a click handler on the toggler; initializes a class
         * for the row: either goog-drilldown-expanded or
         * goog-drilldown-collapsed, depending on the initial state of the
         * DrilldownRow; and sets up a click event handler on the toggler
         * element.
         *
         * This creates a DIV with class=toggle.  Your application can set up
         * CSS style rules something like this:
         *
         * tr.goog-drilldown-expanded .toggle {
         * background-image: url('minus.png');
         * }
         *
         * tr.goog-drilldown-collapsed .toggle {
         * background-image: url('plus.png');
         * }
         *
         * These background images show whether the DrilldownRow is expanded.
         * @param selfObj DrilldownRow to be decorated.
         */
        static decorate(selfObj: ಠ_ಠ.clutz.goog.ui.DrilldownRow|null): void;
        /**
         * Example object with properties of the form accepted by the class
         * constructor.  These are educational and show the compiler that
         * these properties can be set so it doesn't emit warnings.
         */
        static sampleProperties: GlobalObject;
    }
    class DrilldownRow_Instance extends ಠ_ಠ.clutz.goog.ui.Component_Instance {
        /**
         * Builds a DrilldownRow component, which can overlay a tree
         * structure onto sections of an HTML table.
         * @param opt_properties Optional properties.
         * @param opt_domHelper Optional DOM helper.
         */
        constructor(
            opt_properties?:
                ಠ_ಠ.clutz.goog.ui.DrilldownRow.DrilldownRowProperties,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * Child drilldowns are rendered when needed.
         * @param child New DrilldownRow child to be added.
         * @param index position to be occupied by the child.
         * @param opt_render true to force immediate rendering.
         */
        addChildAt(
            child: ಠ_ಠ.clutz.goog.ui.Component|null, index: number,
            opt_render?: boolean): void;
        /**
         * A top-level DrilldownRow decorates a TR element.
         * @param node The element to test for decorability.
         */
        canDecorate(node: GlobalElement|null): boolean;
        createDom(): void;
        /**
         * The base class method calls its superclass method and this
         * drilldown's 'decorator' method as defined in the constructor.
         */
        enterDocument(): void;
        /**
         * Finds the numeric index of this child within its parent Component.
         * Throws an exception if it has no parent.
         */
        findIndex(): number;
        /**
         * Returns this DrilldownRow's level in the tree.  Top level is 1.
         */
        getDepth(): number;
        /**
         * Returns the expanded state of the DrilldownRow.
         */
        isExpanded(): boolean;
        removeChild(
            child: string|ಠ_ಠ.clutz.goog.ui.Component|null,
            a?: boolean): ಠ_ಠ.clutz.goog.ui.Component|null;
        /**
         * Rendering of DrilldownRow's is on need, do not call this directly
         * from application code.
         *
         * Rendering a DrilldownRow places it according to its position in its
         * tree of DrilldownRows.  DrilldownRows cannot be placed any other
         * way so this method does not use any arguments.  This does not call
         * the base class method and does not modify any of this
         * DrilldownRow's children.
         */
        render(a?: GlobalElement|null): void;
        /**
         * Sets the expanded state of this DrilldownRow: makes all children
         * displayable or not displayable corresponding to the expanded state.
         * @param expanded whether this should be expanded or not.
         */
        setExpanded(expanded: boolean): void;
    }
}
declare namespace ಠ_ಠ.clutz.goog.ui.DrilldownRow {
    type DrilldownRowProperties = {
        decorator?: (...a: any[]) => any,
        expanded?: boolean,
        html?: ಠ_ಠ.clutz.goog.html.SafeHtml,
        loaded?: boolean
    };
}
declare module 'goog:goog.ui.DrilldownRow' {
    import alias = ಠ_ಠ.clutz.goog.ui.DrilldownRow;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Class representing a filter observing menu item.
     */
    class FilterObservingMenuItem extends FilterObservingMenuItem_Instance {}
    class FilterObservingMenuItem_Instance extends
        ಠ_ಠ.clutz.goog.ui.MenuItem_Instance {
        /**
         * Class representing a filter observing menu item.
         * @param content Text caption or DOM structure to display as the
         * content of the item (use to add icons or styling to menus).
         * @param opt_model Data/model associated with the menu item.
         * @param opt_domHelper Optional DOM helper used for document
         * interactions.
         * @param opt_renderer Optional renderer.
         */
        constructor(
            content: string|Node|null|Node[]|NodeListOf<Node>, opt_model?: any,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null,
            opt_renderer?: ಠ_ಠ.clutz.goog.ui.MenuItemRenderer|null);
        /**
         * Calls the observer function if one has been specified.
         * @param opt_str Filter string.
         */
        callObserver(opt_str?: string|null): void;
        enterDocument(): void;
        /**
         * Sets the observer functions.
         * @param f function(goog.ui.FilterObservingMenuItem, string).
         */
        setObserver(f: (...a: any[]) => any): void;
    }
}
declare module 'goog:goog.ui.FilterObservingMenuItem' {
    import alias = ಠ_ಠ.clutz.goog.ui.FilterObservingMenuItem;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Default renderer for {@link goog.ui.FilterObservingMenuItem}s. Each item
     * has the following structure:
     *
     * <div class="goog-filterobsmenuitem"><div>...(content)...</div></div>
     */
    class FilterObservingMenuItemRenderer extends
        FilterObservingMenuItemRenderer_Instance {
        /**
         * CSS class name the renderer applies to menu item elements.
         */
        static CSS_CLASS: string;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.FilterObservingMenuItemRenderer;
        static instance_: ಠ_ಠ.clutz.goog.ui.FilterObservingMenuItemRenderer;
    }
    class FilterObservingMenuItemRenderer_Instance extends
        ಠ_ಠ.clutz.goog.ui.MenuItemRenderer_Instance {
        /**
         * Returns the CSS class to be applied to menu items rendered using this
         * renderer.
         */
        getCssClass(): string;
    }
}
declare module 'goog:goog.ui.FilterObservingMenuItemRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.FilterObservingMenuItemRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Filtered menu class.
     */
    class FilteredMenu extends FilteredMenu_Instance {}
    class FilteredMenu_Instance extends ಠ_ಠ.clutz.goog.ui.Menu_Instance {
        /**
         * Filtered menu class.
         * @param opt_renderer Renderer used to render filtered menu; defaults
         * to {@link goog.ui.MenuRenderer}.
         * @param opt_domHelper Optional DOM helper.
         */
        constructor(
            opt_renderer?: ಠ_ಠ.clutz.goog.ui.MenuRenderer|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        createDom(): void;
        decorateInternal(element: GlobalElement|null): void;
        disposeInternal(): void;
        getAllowMultiple(): boolean;
        getContentElement(): GlobalElement|null;
        /**
         * Gets a list of items entered in the search box.
         */
        getEnteredItems(): string[];
        /**
         * Returns the filter string.
         */
        getFilter(): string;
        /**
         * Returns the index of first item that is affected by the filter.
         */
        getFilterFromIndex(): number;
        /**
         * Returns the filter input element.
         */
        getFilterInputElement(): GlobalElement|null;
        getFilterLabel(): string;
        /**
         * Handles filter input events.
         * @param e The event object.
         */
        handleFilterEvent(e: ಠ_ಠ.clutz.goog.events.BrowserEvent|null): void;
        /**
         * Handles the menu's behavior for a key event. The highlighted menu
         * item will be given the opportunity to handle the key behavior.
         * @param e A browser event.
         */
        handleKeyEventInternal(e: ಠ_ಠ.clutz.goog.events.KeyEvent|null): boolean;
        /**
         * Returns whether the specified child should be affected (shown/hidden)
         * by the filter criteria.
         * @param child Menu item to check.
         */
        hasPersistentVisibility(child: ಠ_ಠ.clutz.goog.ui.Component|
                                null): boolean;
        /**
         * Sets whether multiple items can be entered comma separated.
         * @param b Whether multiple items can be entered.
         */
        setAllowMultiple(b: boolean): void;
        /**
         * Sets the filter string.
         * @param str Filter string.
         */
        setFilter(str: string|null): void;
        /**
         * Sets the index of first item that should be affected by the filter.
         * Menu items with a lower index will not be affected by the filter.
         * @param index Index of first item that should be affected by filter.
         */
        setFilterFromIndex(index: number): void;
        /**
         * Sets the filter label (the label displayed in the filter input
         * element if no text has been entered).
         * @param label Label text.
         */
        setFilterLabel(label: string|null): void;
        /**
         * Sets the highlighted index, unless the HIGHLIGHT event is intercepted
         * and cancelled.  -1 = no highlight. Also scrolls the menu item into
         * view.
         * @param index Index of menu item to highlight.
         */
        setHighlightedIndex(index: number): void;
        /**
         * Sets whether the specified child should be affected (shown/hidden) by
         * the filter criteria.
         * @param child Child to change.
         * @param persistent Whether the child should be persistent.
         */
        setPersistentVisibility(
            child: ಠ_ಠ.clutz.goog.ui.Component|null, persistent: boolean): void;
        setVisible(
            show: boolean, opt_force?: boolean,
            opt_e?: ಠ_ಠ.clutz.goog.events.Event|null): boolean;
    }
}
declare namespace ಠ_ಠ.clutz.goog.ui.FilteredMenu {
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        FILTER_CHANGED: EventType,
    };
}
declare module 'goog:goog.ui.FilteredMenu' {
    import alias = ಠ_ಠ.clutz.goog.ui.FilteredMenu;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Flat renderer for {@link goog.ui.Button}s.  Flat buttons can contain
     * almost arbitrary HTML content, will flow like inline elements, but can be
     * styled like block-level elements.
     */
    class FlatButtonRenderer extends FlatButtonRenderer_Instance {
        /**
         * Default CSS class to be applied to the root element of components
         * rendered by this renderer.
         */
        static CSS_CLASS: string;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.FlatButtonRenderer;
        static instance_: ಠ_ಠ.clutz.goog.ui.FlatButtonRenderer;
    }
    class FlatButtonRenderer_Instance extends
        ಠ_ಠ.clutz.goog.ui.ButtonRenderer_Instance {
        /**
         * Returns true if this renderer can decorate the element.  Overrides
         * {@link goog.ui.ButtonRenderer#canDecorate} by returning true if the
         * element is a DIV, false otherwise.
         * @param element Element to decorate.
         */
        canDecorate(element: GlobalElement|null): boolean;
        /**
         * Returns the control's contents wrapped in a div element, with
         * the renderer's own CSS class and additional state-specific classes
         * applied to it, and the button's disabled attribute set or cleared as
         * needed. Overrides {@link goog.ui.ButtonRenderer#createDom}.
         * @param button Button to render.
         */
        createDom(button: ಠ_ಠ.clutz.goog.ui.Control|null): GlobalElement;
        /**
         * Takes an existing element and decorates it with the flat button
         * control. Initializes the control's ID, content, tooltip, value, and
         * state based on the ID of the element, its child nodes, and its CSS
         * classes, respectively. Returns the element.  Overrides {@link
         * goog.ui.ButtonRenderer#decorate}.
         * @param button Button instance to decorate the element.
         * @param element Element to decorate.
         */
        decorate(
            button: ಠ_ಠ.clutz.goog.ui.Control|null,
            element: GlobalElement|null): GlobalElement|null;
        /**
         * Returns the ARIA role to be applied to flat buttons.
         */
        getAriaRole(): ಠ_ಠ.clutz.goog.a11y.aria.Role|undefined;
        /**
         * Returns the CSS class to be applied to the root element of components
         * rendered using this renderer.
         */
        getCssClass(): string;
        /**
         * Flat buttons can't use the value attribute since they are div
         * elements. Overrides {@link goog.ui.ButtonRenderer#getValue} to
         * prevent trying to access the element's value.
         * @param element The button control's root element.
         */
        getValue(element: GlobalElement|null): string;
    }
}
declare module 'goog:goog.ui.FlatButtonRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.FlatButtonRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Flat Menu Button renderer. Creates a simpler version of
     * {@link goog.ui.MenuButton} that doesn't look like a button and
     * doesn't have rounded corners. Uses just a `<div>` and looks more like
     * a traditional `<select>` element.
     */
    class FlatMenuButtonRenderer extends FlatMenuButtonRenderer_Instance {
        /**
         * Default CSS class to be applied to the root element of components
         * rendered by this renderer.
         */
        static CSS_CLASS: string;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.FlatMenuButtonRenderer;
        static instance_: ಠ_ಠ.clutz.goog.ui.FlatMenuButtonRenderer;
    }
    class FlatMenuButtonRenderer_Instance extends
        ಠ_ಠ.clutz.goog.ui.FlatButtonRenderer_Instance {
        /**
         * Takes a text caption or existing DOM structure, and returns it
         * wrapped in an appropriately-styled DIV.  Creates the following DOM
         * structure:
         *
         * <div class="goog-inline-block goog-flat-menu-button-caption">
         * Contents...
         * </div>
         * @param content Text caption or DOM structure to wrap in a box.
         * @param dom DOM helper, used for document interaction.
         */
        createCaption(
            content: string|Node|null|Node[]|NodeListOf<Node>,
            dom: ಠ_ಠ.clutz.goog.dom.DomHelper|null): GlobalElement|null;
        /**
         * Returns the button's contents wrapped in the following DOM structure:
         *
         * <div class="goog-inline-block goog-flat-menu-button">
         * <div class="goog-inline-block goog-flat-menu-button-caption">
         * Contents...
         * </div>
         * <div class="goog-inline-block goog-flat-menu-button-dropdown">
         * &nbsp;
         * </div>
         * </div>
         *
         * Overrides {@link goog.ui.FlatButtonRenderer#createDom}.
         * @param control Button to render.
         */
        createDom(control: ಠ_ಠ.clutz.goog.ui.Control|null): GlobalElement;
        /**
         * Returns an appropriately-styled DIV containing a dropdown arrow
         * element. Creates the following DOM structure:
         *
         * <div class="goog-inline-block goog-flat-menu-button-dropdown">
         * &nbsp;
         * </div>
         * @param dom DOM helper, used for document interaction.
         */
        createDropdown(dom: ಠ_ಠ.clutz.goog.dom.DomHelper|null): GlobalElement;
        /**
         * Takes an element, decorates it with the menu button control, and
         * returns the element.  Overrides {@link
         * goog.ui.CustomButtonRenderer#decorate} by looking for a child element
         * that can be decorated by a menu, and if it finds one, decorates it
         * and attaches it to the menu button.
         * @param button Menu button to decorate the element.
         * @param element Element to decorate.
         */
        decorate(
            button: ಠ_ಠ.clutz.goog.ui.Control|null,
            element: GlobalElement|null): GlobalElement|null;
        /**
         * Takes the button's root element and returns the parent element of the
         * button's contents.
         * @param element Root element of the button whose content element is to
         * be returned.
         */
        getContentElement(element: GlobalElement|null): GlobalElement|null;
        /**
         * Returns the CSS class to be applied to the root element of components
         * rendered using this renderer.
         */
        getCssClass(): string;
    }
}
declare module 'goog:goog.ui.FlatMenuButtonRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.FlatMenuButtonRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Creates a formpost object.
     */
    class FormPost extends FormPost_Instance {}
    class FormPost_Instance extends ಠ_ಠ.clutz.goog.ui.Component_Instance {
        /**
         * Creates a formpost object.
         * @param opt_dom The DOM helper.
         */
        constructor(opt_dom?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        createDom(): void;
        /**
         * Constructs a POST request and directs the browser as if a form were
         * submitted.
         * @param parameters Object with parameter values. Values can be
         * strings, numbers, or arrays of strings or numbers.
         * @param opt_url The destination URL. If not specified, uses the
         * current URL for window for the DOM specified in the constructor.
         * @param opt_target An optional name of a window in which to open the
         * URL. If not specified, uses the window for the DOM specified in the
         * constructor.
         */
        post(
            parameters: GlobalObject|null, opt_url?: string,
            opt_target?: string): void;
    }
}
declare module 'goog:goog.ui.FormPost' {
    import alias = ಠ_ಠ.clutz.goog.ui.FormPost;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * A UI component that displays a gauge.
     * A gauge displayes a current value within a round axis that represents a
     * given range.
     * The gauge is built from an external border, and internal border inside
     * it, ticks and labels inside the internal border, and a needle that points
     * to the current value.
     */
    class Gauge extends Gauge_Instance {
        /**
         * The ratio of the colored background area for value ranges.
         * The colored area width is computed as
         * InternalRadius * (1 - FACTOR_COLOR_RADIUS)
         */
        static FACTOR_COLOR_RADIUS: number;
        /**
         * The ratio of internal gauge radius from entire radius.
         * The remaining area is the border around the gauge.
         */
        static FACTOR_MAIN_AREA: number;
        /**
         * The ratio of the major ticks length start position, from the radius.
         * The major ticks length width is computed as
         * InternalRadius * (1 - FACTOR_MAJOR_TICKS)
         */
        static FACTOR_MAJOR_TICKS: number;
        /**
         * The ratio of the minor ticks length start position, from the radius.
         * The minor ticks length width is computed as
         * InternalRadius * (1 - FACTOR_MINOR_TICKS)
         */
        static FACTOR_MINOR_TICKS: number;
        /**
         * The length of the needle back relative to the internal radius.
         * The needle back is the part of the needle that points away from the
         * value.
         */
        static FACTOR_NEEDLE_BACK: number;
        /**
         * The length of the needle front (value facing) from the internal
         * radius. The needle front is the part of the needle that points to the
         * value.
         */
        static FACTOR_NEEDLE_FRONT: number;
        /**
         * The width (radius) of the needle hinge from the gauge radius.
         */
        static FACTOR_NEEDLE_HINGE: number;
        /**
         * The width of the needle front at the hinge.
         * This is the width of the curve control point, the actual width is
         * computed by the curve itself.
         */
        static FACTOR_NEEDLE_WIDTH: number;
        /**
         * The radius of the entire gauge from the canvas size.
         */
        static FACTOR_RADIUS_FROM_SIZE: number;
        /**
         * The title font size (height) for tick labels relative to the internal
         * radius.
         */
        static FACTOR_TICK_LABEL_FONT_SIZE: number;
        /**
         * The title font size (height) for titles relative to the internal
         * radius.
         */
        static FACTOR_TITLE_FONT_SIZE: number;
        /**
         * The offset of the title from the center, relative to the internal
         * radius.
         */
        static FACTOR_TITLE_OFFSET: number;
        /**
         * The formatted value font size (height) relative to the internal
         * radius.
         */
        static FACTOR_VALUE_FONT_SIZE: number;
        /**
         * The offset of the formatted value down from the center, relative to
         * the internal radius.
         */
        static FACTOR_VALUE_OFFSET: number;
        /**
         * Constant for a background color for a gauge area.
         */
        static GREEN: string;
        /**
         * Tolerance factor for how much values can exceed the range (being too
         * low or too high). The value is presented as a position (percentage).
         */
        static MAX_EXCEED_POSITION_POSITION: number;
        /**
         * The maximal size of a step the needle can move (percent from size of
         * range). If the needle needs to move more, it will be moved in
         * animated steps, to show a smooth transition between values.
         */
        static NEEDLE_MOVE_MAX_STEP: number;
        /**
         * Time in miliseconds for animating a move of the value pointer.
         */
        static NEEDLE_MOVE_TIME: number;
        /**
         * Constant for a background color for a gauge area.
         */
        static RED: string;
        /**
         * The font name for title text.
         */
        static TITLE_FONT_NAME: string;
        /**
         * Constant for a background color for a gauge area.
         */
        static YELLOW: string;
    }
    class Gauge_Instance extends ಠ_ಠ.clutz.goog.ui.Component_Instance {
        /**
         * A UI component that displays a gauge.
         * A gauge displayes a current value within a round axis that represents
         * a given range. The gauge is built from an external border, and
         * internal border inside it, ticks and labels inside the internal
         * border, and a needle that points to the current value.
         * @param width The width in pixels.
         * @param height The height in pixels.
         * @param opt_domHelper The DOM helper object for the document we want
         * to render in.
         */
        constructor(
            width: number, height: number,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * Set the background color for a range of values on the gauge.
         * @param fromValue The lower (start) value of the colored range.
         * @param toValue The higher (end) value of the colored range.
         * @param color The color name to paint the range with. For example
         * 'red', '#ffcc00' or constants like goog.ui.Gauge.RED.
         */
        addBackgroundColor(fromValue: number, toValue: number, color: string):
            void;
        /**
         * Creates the DOM representation of the graphics area.
         */
        createDom(): void;
        disposeInternal(): void;
        enterDocument(): void;
        exitDocument(): void;
        getMaximum(): number;
        getMinimum(): number;
        /**
         * Redraws the entire gauge.
         * Should be called after theme colors have been changed.
         */
        redraw(): void;
        /**
         * Sets the labels of the major ticks.
         * @param tickLabels A text label for each major tick value.
         */
        setMajorTickLabels(tickLabels: string[]|null): void;
        /**
         * Sets the maximum number of the range
         * @param max The maximum value of the range.
         */
        setMaximum(max: number): void;
        /**
         * Sets the minimum value of the range
         * @param min The minimum value of the range.
         */
        setMinimum(min: number): void;
        /**
         * Sets the color theme for drawing the gauge.
         * @param theme The color theme to use.
         */
        setTheme(theme: ಠ_ಠ.clutz.goog.ui.GaugeTheme|null): void;
        /**
         * Sets the number of major tick sections and minor tick sections.
         * @param majorUnits The number of major tick sections.
         * @param minorUnits The number of minor tick sections for each major
         * tick section.
         */
        setTicks(majorUnits: number, minorUnits: number): void;
        /**
         * Sets the bottom title of the gauge.
         * The top title is displayed below the center.
         * @param text The bottom title text.
         */
        setTitleBottom(text: string): void;
        /**
         * Sets the font for displaying top and bottom titles.
         * @param font The font for titles.
         */
        setTitleFont(font: ಠ_ಠ.clutz.goog.graphics.Font|null): void;
        /**
         * Sets the top title of the gauge.
         * The top title is displayed above the center.
         * @param text The top title text.
         */
        setTitleTop(text: string): void;
        /**
         * Sets the current value range displayed by the gauge.
         * @param value The current value for the gauge. This value determines
         * the position of the needle of the gauge.
         * @param opt_formattedValue The string value to show in the gauge. If
         * not specified, no string value will be displayed.
         */
        setValue(value: number, opt_formattedValue?: string): void;
        /**
         * Sets the font for displaying the formatted value.
         * @param font The font for displaying the value.
         */
        setValueFont(font: ಠ_ಠ.clutz.goog.graphics.Font|null): void;
    }
}
declare module 'goog:goog.ui.Gauge' {
    import alias = ಠ_ಠ.clutz.goog.ui.Gauge;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Information on how to decorate a range in the gauge.
     * This is an internal-only class.
     */
    class GaugeColoredRange extends GaugeColoredRange_Instance {}
    class GaugeColoredRange_Instance {
        private noStructuralTyping_: any;
        /**
         * Information on how to decorate a range in the gauge.
         * This is an internal-only class.
         * @param fromValue The range start (minimal) value.
         * @param toValue The range end (maximal) value.
         * @param backgroundColor Color to fill the range background with.
         */
        constructor(
            fromValue: number, toValue: number, backgroundColor: string);
        /**
         * Color to fill the range background with.
         */
        backgroundColor: string;
        /**
         * The range start (minimal) value.
         */
        fromValue: number;
        /**
         * The range end (maximal) value.
         */
        toValue: number;
    }
}
declare module 'goog:goog.ui.GaugeColoredRange' {
    import alias = ಠ_ಠ.clutz.goog.ui.GaugeColoredRange;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * A class for the default color theme for a Gauge.
     * Users can extend this class to provide a custom color theme, and apply
     * the custom color theme by calling  {@link goog.ui.Gauge#setTheme}.
     */
    class GaugeTheme extends GaugeTheme_Instance {}
    class GaugeTheme_Instance {
        private noStructuralTyping_: any;
        /**
         * Returns the fill for the external border of the gauge.
         * @param cx X coordinate of the center of the gauge.
         * @param cy Y coordinate of the center of the gauge.
         * @param r Radius of the gauge.
         */
        getExternalBorderFill(cx: number, cy: number, r: number):
            ಠ_ಠ.clutz.goog.graphics.Fill;
        /**
         * Returns the stroke for the external border of the gauge.
         */
        getExternalBorderStroke(): ಠ_ಠ.clutz.goog.graphics.Stroke;
        /**
         * Returns the fill for the hinge at the center of the gauge.
         * @param cx X coordinate of the center of the gauge.
         * @param cy Y coordinate of the center of the gauge.
         * @param r Radius of the hinge.
         */
        getHingeFill(cx: number, cy: number, r: number):
            ಠ_ಠ.clutz.goog.graphics.Fill;
        /**
         * Returns the stroke for the hinge at the center of the gauge.
         */
        getHingeStroke(): ಠ_ಠ.clutz.goog.graphics.Stroke;
        /**
         * Returns the fill for the internal border of the gauge.
         * @param cx X coordinate of the center of the gauge.
         * @param cy Y coordinate of the center of the gauge.
         * @param r Radius of the gauge.
         */
        getInternalBorderFill(cx: number, cy: number, r: number):
            ಠ_ಠ.clutz.goog.graphics.Fill;
        /**
         * Returns the stroke for the internal border of the gauge.
         */
        getInternalBorderStroke(): ಠ_ಠ.clutz.goog.graphics.Stroke;
        /**
         * Returns the stroke for the major ticks of the gauge.
         */
        getMajorTickStroke(): ಠ_ಠ.clutz.goog.graphics.Stroke;
        /**
         * Returns the stroke for the minor ticks of the gauge.
         */
        getMinorTickStroke(): ಠ_ಠ.clutz.goog.graphics.Stroke;
        /**
         * Returns the fill for the hinge at the center of the gauge.
         * @param cx X coordinate of the center of the gauge.
         * @param cy Y coordinate of the center of the gauge.
         * @param r Radius of the gauge.
         */
        getNeedleFill(cx: number, cy: number, r: number):
            ಠ_ಠ.clutz.goog.graphics.Fill;
        /**
         * Returns the stroke for the gauge needle.
         */
        getNeedleStroke(): ಠ_ಠ.clutz.goog.graphics.Stroke;
        /**
         * Returns the color for the labels (formatted values) of tick marks.
         */
        getTickLabelColor(): string;
        /**
         * Returns the color for the gauge title.
         */
        getTitleColor(): string;
        /**
         * Returns the color for the gauge value.
         */
        getValueColor(): string;
    }
}
declare module 'goog:goog.ui.GaugeTheme' {
    import alias = ಠ_ಠ.clutz.goog.ui.GaugeTheme;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * RoundedPanel class that uses goog.graphics to create the rounded corners.
     * Do not instantiate directly. Instead, call goog.ui.RoundedPanel.create().
     */
    class GraphicsRoundedPanel extends GraphicsRoundedPanel_Instance {}
    class GraphicsRoundedPanel_Instance extends
        ಠ_ಠ.clutz.goog.ui.BaseRoundedPanel_Instance {
        /**
         * RoundedPanel class that uses goog.graphics to create the rounded
         * corners. Do not instantiate directly. Instead, call
         * goog.ui.RoundedPanel.create().
         * @param radius The radius of the rounded corner(s), in pixels.
         * @param borderWidth The thickness of the border, in pixels.
         * @param borderColor The border color of the panel.
         * @param opt_backgroundColor The background color of the panel.
         * @param opt_corners The corners of the panel to be rounded. Any
         * corners not specified will be rendered as square corners. Will
         * default to all square corners if not specified.
         * @param opt_domHelper The DOM helper object for the document we want
         * to render in.
         */
        constructor(
            radius: number, borderWidth: number, borderColor: string,
            opt_backgroundColor?: string, opt_corners?: number,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * This method performs all the necessary DOM manipulation to create the
         * panel. Overrides {@link goog.ui.Component#decorateInternal}.
         * @param element The element to decorate.
         */
        decorateInternal(element: GlobalElement|null): void;
        disposeInternal(): void;
    }
}
declare module 'goog:goog.ui.GraphicsRoundedPanel' {
    import alias = ಠ_ಠ.clutz.goog.ui.GraphicsRoundedPanel;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Create a hover card object.  Hover cards extend tooltips in that they
     * don't have to be manually attached to each element that can cause them to
     * display. Instead, you can create a function that gets called when the
     * mouse goes over any element on your page, and returns whether or not the
     * hovercard should be shown for that element.
     *
     * Alternatively, you can define a map of tag names to the attribute name
     * each tag should have for that tag to trigger the hover card.  See example
     * below.
     *
     * Hovercards can also be triggered manually by calling
     * {@code triggerForElement}, shown without a delay by calling
     * {@code showForElement}, or triggered over other elements by calling
     * {@code attach}.  For the latter two cases, the application is responsible
     * for calling {@code detach} when finished.
     *
     * HoverCard objects fire a TRIGGER event when the mouse moves over an
     * element that can trigger a hovercard, and BEFORE_SHOW when the hovercard
     * is about to be shown.  Clients can respond to these events and can
     * prevent the hovercard from being triggered or shown.
     */
    class HoverCard extends HoverCard_Instance {}
    class HoverCard_Instance extends
        ಠ_ಠ.clutz.goog.ui.AdvancedTooltip_Instance {
        /**
         * Create a hover card object.  Hover cards extend tooltips in that they
         * don't have to be manually attached to each element that can cause
         * them to display. Instead, you can create a function that gets called
         * when the mouse goes over any element on your page, and returns
         * whether or not the hovercard should be shown for that element.
         *
         * Alternatively, you can define a map of tag names to the attribute
         * name each tag should have for that tag to trigger the hover card.
         * See example below.
         *
         * Hovercards can also be triggered manually by calling
         * {@code triggerForElement}, shown without a delay by calling
         * {@code showForElement}, or triggered over other elements by calling
         * {@code attach}.  For the latter two cases, the application is
         * responsible for calling {@code detach} when finished.
         *
         * HoverCard objects fire a TRIGGER event when the mouse moves over an
         * element that can trigger a hovercard, and BEFORE_SHOW when the
         * hovercard is about to be shown.  Clients can respond to these events
         * and can prevent the hovercard from being triggered or shown.
         * @param isAnchor Function that returns true if a given element should
         * trigger the hovercard.  Alternatively, it can be a map of tag names
         * to the attribute that the tag should have in order to trigger the
         * hovercard, e.g., {A: 'href'} for all links.  Tag names must be all
         * upper case; attribute names are case insensitive.
         * @param opt_checkDescendants Use false for a performance gain if you
         * are sure that none of your triggering elements have child elements.
         * Default is true.
         * @param opt_domHelper Optional DOM helper to use for creating and
         * rendering the hovercard element.
         * @param opt_triggeringDocument Optional document to use in place of
         * the one included in the DomHelper for finding triggering elements.
         * Defaults to the document included in the DomHelper.
         */
        constructor(
            isAnchor: GlobalObject|null, opt_checkDescendants?: boolean,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null,
            opt_triggeringDocument?: Document|null);
        anchor?: GlobalElement|null;
        className: string;
        /**
         * Abort pending hovercard showing, if any.
         */
        cancelTrigger(): void;
        disposeInternal(): void;
        /**
         * Gets the DOM element that triggered the current hovercard.  Note that
         * in the TRIGGER or CANCEL_TRIGGER events, the current hovercard's
         * anchor may not be the one that caused the event, so use the event's
         * anchor property instead.
         */
        getAnchorElement(): GlobalElement|null;
        /**
         * If the mouse moves out of the trigger while we're being triggered,
         * then cancel it.
         * @param event Mouse out or blur event.
         */
        handleMouseOutAndBlur(event: ಠ_ಠ.clutz.goog.events.BrowserEvent|
                              null): void;
        /**
         * This mouse over event is only received if the anchor is already
         * attached. If it was attached manually, then it may need to be
         * triggered.
         * @param event Mouse over event.
         */
        handleMouseOver(event: ಠ_ಠ.clutz.goog.events.BrowserEvent|null): void;
        /**
         * Called by timer from mouse over handler. If this is called and the
         * hovercard is not shown for whatever reason, then send a cancel
         * trigger event.
         * @param el Element to show tooltip for.
         * @param opt_pos Position to display popup at.
         */
        maybeShow(
            el: GlobalElement|null,
            opt_pos?: ಠ_ಠ.clutz.goog.positioning.AbstractPosition|null): void;
        /**
         * This method gets called when we detect that a trigger event will not
         * lead to the hovercard being shown.
         */
        onCancelTrigger(): void;
        /**
         * Make sure we detach from temp anchor when we are done displaying
         * hovercard.
         */
        onHide(a?: Node|null): void;
        /**
         * Called when an element triggers the hovercard.  This will return
         * false if an event handler sets preventDefault to true, which will
         * prevent the hovercard from being shown.
         * @param triggerEvent Event object to use for trigger event.
         */
        onTrigger(triggerEvent: ಠ_ಠ.clutz.goog.ui.HoverCard.TriggerEvent):
            boolean;
        /**
         * Sets the max number of levels to search up the dom if checking
         * descendants.
         * @param maxSearchSteps Maximum number of levels to search up the dom
         * if checking descendants.
         */
        setMaxSearchSteps(maxSearchSteps: number): void;
        /**
         * Triggers the hovercard to show after a delay.
         * @param anchorElement Element that is triggering the hovercard.
         * @param opt_pos Position to display hovercard.
         * @param opt_data Data to pass to the onTrigger event.
         */
        triggerForElement(
            anchorElement: GlobalElement|null,
            opt_pos?: ಠ_ಠ.clutz.goog.positioning.AbstractPosition|null,
            opt_data?: GlobalObject|null): void;
    }
}
declare module 'goog:goog.ui.HoverCard' {
    import alias = ಠ_ಠ.clutz.goog.ui.HoverCard;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.HoverCard {
    /**
     * Enum for event type fired by HoverCard.
     */
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        BEFORE_HIDE: EventType,
        BEFORE_SHOW: EventType,
        CANCEL_TRIGGER: EventType,
        HIDE: EventType,
        SHOW: EventType,
        TRIGGER: EventType,
    };
}
declare module 'goog:goog.ui.HoverCard.EventType' {
    import alias = ಠ_ಠ.clutz.goog.ui.HoverCard.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.HoverCard {
    /**
     * Create a trigger event for specified anchor and optional data.
     */
    class TriggerEvent extends TriggerEvent_Instance {}
    class TriggerEvent_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
        /**
         * Create a trigger event for specified anchor and optional data.
         * @param type Event type.
         * @param target Hovercard that is triggering the event.
         * @param anchor Element that triggered event.
         * @param opt_data Optional data to be available in the TRIGGER event.
         */
        constructor(
            type: ಠ_ಠ.clutz.goog.ui.HoverCard.EventType,
            target: ಠ_ಠ.clutz.goog.ui.HoverCard|null,
            anchor: GlobalElement|null, opt_data?: GlobalObject|null);
        /**
         * Element that triggered the hovercard event.
         */
        anchor: GlobalElement|null;
        /**
         * Optional data to be passed to the listener.
         */
        data?: GlobalObject|null;
    }
}
declare module 'goog:goog.ui.HoverCard.TriggerEvent' {
    import alias = ಠ_ಠ.clutz.goog.ui.HoverCard.TriggerEvent;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Creates an HSV palette. Allows a user to select the hue, saturation and
     * value/brightness.
     */
    class HsvPalette extends HsvPalette_Instance {}
    class HsvPalette_Instance extends ಠ_ಠ.clutz.goog.ui.Component_Instance {
        /**
         * Creates an HSV palette. Allows a user to select the hue, saturation
         * and value/brightness.
         * @param opt_domHelper Optional DOM helper.
         * @param opt_color Optional initial color (default is red).
         * @param opt_class Optional base for creating classnames (default is
         * goog.getCssName('goog-hsv-palette')).
         */
        constructor(
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null,
            opt_color?: string, opt_class?: string);
        /**
         * The base class name for the component.
         */
        className: string;
        /**
         * HsvPalettes cannot be used to decorate pre-existing html, since the
         * structure they build is fairly complicated.
         * @param element Element to decorate.
         */
        canDecorate(element: GlobalElement|null): boolean;
        /**
         * Hex representation of the color.
         */
        color: string;
        createDom(): void;
        disposeInternal(): void;
        /**
         * Renders the color picker inside the provided element. This will
         * override the current content of the element.
         */
        enterDocument(): void;
        /**
         * Alpha transparency of the currently selected color, in [0, 1].
         * For the HSV palette this always returns 1. The HSVA palette overrides
         * this method.
         */
        getAlpha(): number;
        /**
         * Gets the color that is currently selected in this color picker.
         */
        getColor(): string;
        /**
         * Handles input events on the hex value input field.
         * @param e Event object.
         */
        handleInput(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Handles mousedown events on palette UI elements.
         * @param e Event object.
         */
        handleMouseDown(e: ಠ_ಠ.clutz.goog.events.BrowserEvent|null): void;
        /**
         * Handles mouseup events on the document, which ends a drag operation.
         * @param e Event object.
         */
        handleMouseUp(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * DOM element representing the hex color input text field.
         */
        inputElement: GlobalElement|null;
        /**
         * Listener key for the mousemove event (during a drag operation).
         */
        mouseMoveListener: number|ಠ_ಠ.clutz.goog.events.ListenableKey|null;
        /**
         * Listener key for the mouseup event (during a drag operation).
         */
        mouseUpListener: number|ಠ_ಠ.clutz.goog.events.ListenableKey|null;
        /**
         * Sets which color is selected and update the UI.
         * @param color The selected color.
         */
        setColor(color: string): void;
        /**
         * Sets which color is selected.
         * @param color The selected color.
         */
        setColorInternal(color: string): void;
        /**
         * Alters the hue, saturation, and/or value of the currently selected
         * color and updates the UI.
         * @param opt_hue (optional) hue in [0, 1].
         * @param opt_saturation (optional) saturation in [0, 1].
         * @param opt_value (optional) value in [0, 255].
         */
        setHsv(
            opt_hue?: number|null, opt_saturation?: number|null,
            opt_value?: number|null): void;
        /**
         * DOM element representing the current color swatch.
         */
        swatchElement: GlobalElement|null;
        /**
         * Updates the text entry field.
         */
        updateInput(): void;
        /**
         * Updates the position, opacity, and styles for the UI representation
         * of the palette.
         */
        updateUi(): void;
        /**
         * DOM element representing the value background image.
         */
        valueBackgroundImageElement: HTMLElement|null;
    }
}
declare module 'goog:goog.ui.HsvPalette' {
    import alias = ಠ_ಠ.clutz.goog.ui.HsvPalette;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Creates an HSVA palette. Allows a user to select the hue, saturation,
     * value/brightness and alpha/opacity.
     */
    class HsvaPalette extends HsvaPalette_Instance {}
    class HsvaPalette_Instance extends ಠ_ಠ.clutz.goog.ui.HsvPalette_Instance {
        /**
         * Creates an HSVA palette. Allows a user to select the hue, saturation,
         * value/brightness and alpha/opacity.
         * @param opt_domHelper Optional DOM helper.
         * @param opt_color Optional initial color, without alpha (default is
         * red).
         * @param opt_alpha Optional initial alpha (default is 1).
         * @param opt_class Optional base for creating classnames (default is
         * 'goog-hsva-palette').
         */
        constructor(
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null,
            opt_color?: string, opt_alpha?: number, opt_class?: string);
        className: string;
        color: string;
        mouseMoveListener: number|ಠ_ಠ.clutz.goog.events.ListenableKey|null;
        mouseUpListener: number|ಠ_ಠ.clutz.goog.events.ListenableKey|null;
        createDom(): void;
        disposeInternal(): void;
        getAlpha(): number;
        /**
         * Gets the color that is currently selected in this color picker, in
         * #rrggbbaa format.
         */
        getColorRgbaHex(): string;
        handleInput(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        handleMouseDown(e: ಠ_ಠ.clutz.goog.events.BrowserEvent|null): void;
        /**
         * Sets which color is selected and update the UI. The passed color
         * should be in #rrggbb format. The alpha value will be set to 1.
         * @param alpha The selected alpha value, in [0, 1].
         */
        setAlpha(alpha: number): void;
        /**
         * Sets which color is selected and update the UI. The passed color
         * should be in #rrggbb format. The alpha value will be set to 1.
         * @param color The selected color.
         */
        setColor(color: string): void;
        /**
         * Sets which color is selected and update the UI. The passed color
         * should be in #rrggbbaa format. The alpha value will be set to 1.
         * @param color The selected color with alpha.
         */
        setColorRgbaHex(color: string): void;
        updateInput(): void;
        updateUi(): void;
    }
}
declare module 'goog:goog.ui.HsvaPalette' {
    import alias = ಠ_ಠ.clutz.goog.ui.HsvaPalette;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * CSS class name for applying the "display: inline-block" property in a
     * cross-browser way.
     */
    var INLINE_BLOCK_CLASSNAME: string;
}
declare module 'goog:goog.ui.INLINE_BLOCK_CLASSNAME' {
    import alias = ಠ_ಠ.clutz.goog.ui.INLINE_BLOCK_CLASSNAME;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Creates a new id generator.
     */
    class IdGenerator extends IdGenerator_Instance {
        static getInstance(): ಠ_ಠ.clutz.goog.ui.IdGenerator;
        static instance_: ಠ_ಠ.clutz.goog.ui.IdGenerator;
    }
    class IdGenerator_Instance {
        private noStructuralTyping_: any;
        /**
         * Gets the next unique ID.
         */
        getNextUniqueId(): string;
    }
}
declare module 'goog:goog.ui.IdGenerator' {
    import alias = ಠ_ಠ.clutz.goog.ui.IdGenerator;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Event target that will give notification of state changes between active
     * and idle. This class is designed to require few resources while the user
     * is active.
     */
    class IdleTimer extends IdleTimer_Instance {}
    class IdleTimer_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * Event target that will give notification of state changes between
         * active and idle. This class is designed to require few resources
         * while the user is active.
         * @param idleThreshold Amount of time in ms at which we consider the
         * user has gone idle.
         * @param opt_activityMonitor The activity monitor keeping track of user
         * interaction. Defaults to a default-constructed activity monitor. If a
         * default activity monitor is used then this class will dispose of it.
         * If an activity monitor is passed in then the caller remains
         * responsible for disposing of it.
         */
        constructor(
            idleThreshold: number,
            opt_activityMonitor?: ಠ_ಠ.clutz.goog.ui.ActivityMonitor|null);
        disposeInternal(): void;
        getActivityMonitor(): ಠ_ಠ.clutz.goog.ui.ActivityMonitor|null;
        getIdleThreshold(): number;
        /**
         * Returns true if there has been no user action for at least the
         * specified interval, and false otherwise
         */
        isIdle(): boolean;
    }
}
declare namespace ಠ_ಠ.clutz.goog.ui.IdleTimer {
    type Event = string&{clutzEnumBrand: never};
    var Event: {
        BECOME_ACTIVE: Event,
        BECOME_IDLE: Event,
    };
}
declare module 'goog:goog.ui.IdleTimer' {
    import alias = ಠ_ಠ.clutz.goog.ui.IdleTimer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Controller for an iframe mask. The mask is only valid in the current
     * document, or else the document of the given DOM helper.
     */
    class IframeMask extends IframeMask_Instance {}
    class IframeMask_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance {
        /**
         * Controller for an iframe mask. The mask is only valid in the current
         * document, or else the document of the given DOM helper.
         * @param opt_domHelper The DOM helper for the relevant document.
         * @param opt_iframePool An optional source of iframes. Iframes will be
         * grabbed from the pool when they're needed and returned to the pool
         * (but still attached to the DOM) when they're done.
         */
        constructor(
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null,
            opt_iframePool?: ಠ_ಠ.clutz.goog.structs.Pool<any>|null);
        /**
         * Applies the iframe mask to the screen.
         */
        applyMask(): void;
        /**
         * Removes the iframe from the DOM.
         */
        disposeInternal(): void;
        /**
         * Removes the mask from the screen.
         */
        hideMask(): void;
        /**
         * Listens on the specified target, hiding and showing the iframe mask
         * when the given event types are dispatched.
         * @param target The event target to listen on.
         * @param showEvent When this event fires, the mask will be applied.
         * @param hideEvent When this event fires, the mask will be hidden.
         * @param opt_snapElement When the mask is applied, it will
         * automatically snap to this element. If no element is specified, it
         * will use the default snap element.
         */
        listenOnTarget(
            target: ಠ_ಠ.clutz.goog.events.EventTarget|null, showEvent: string,
            hideEvent: string, opt_snapElement?: GlobalElement|null): void;
        /**
         * Removes all handlers attached by listenOnTarget.
         */
        removeHandlers(): void;
        /**
         * Sets the opacity of the mask. Will take effect the next time the mask
         * is applied.
         * @param opacity A value between 0 and 1, with 1 being totally opaque.
         */
        setOpacity(opacity: number): void;
        /**
         * Sets the element to use as the bounds of the mask. Takes effect
         * immediately.
         * @param snapElement The snap element, which the iframe will be
         * "snapped" around.
         */
        setSnapElement(snapElement: GlobalElement|null): void;
        /**
         * Sets the z-index of the mask. Will take effect the next time the mask
         * is applied.
         * @param zIndex A z-index value.
         */
        setZIndex(zIndex: number): void;
    }
}
declare module 'goog:goog.ui.IframeMask' {
    import alias = ಠ_ಠ.clutz.goog.ui.IframeMask;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Custom renderer for {@link goog.ui.Button}s. Imageless buttons can
     * contain almost arbitrary HTML content, will flow like inline elements,
     * but can be styled like block-level elements.
     */
    class ImagelessButtonRenderer extends ImagelessButtonRenderer_Instance {
        /**
         * Default CSS class to be applied to the root element of components
         * rendered by this renderer.
         */
        static CSS_CLASS: string;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.ImagelessButtonRenderer;
        static instance_: ಠ_ಠ.clutz.goog.ui.ImagelessButtonRenderer;
    }
    class ImagelessButtonRenderer_Instance extends
        ಠ_ಠ.clutz.goog.ui.CustomButtonRenderer_Instance {
        /**
         * Takes a text caption or existing DOM structure, and returns the
         * content wrapped in a pseudo-rounded-corner box.  Creates the
         * following DOM structure:
         *
         * <div class="goog-inline-block goog-imageless-button-outer-box">
         * <div class="goog-inline-block goog-imageless-button-inner-box">
         * <div class="goog-imageless-button-pos">
         * <div class="goog-imageless-button-top-shadow">&nbsp;</div>
         * <div class="goog-imageless-button-content">Contents...</div>
         * </div>
         * </div>
         * </div>
         *
         * Used by both {@link #createDom} and {@link #decorate}.  To be
         * overridden by subclasses.
         * @param content Text caption or DOM structure to wrap in a box.
         * @param dom DOM helper, used for document interaction.
         */
        createButton(
            content: string|Node|null|Node[]|NodeListOf<Node>,
            dom: ಠ_ಠ.clutz.goog.dom.DomHelper|null): GlobalElement|null;
        getContentElement(element: GlobalElement|null): GlobalElement|null;
        /**
         * Returns the CSS class to be applied to the root element of components
         * rendered using this renderer.
         */
        getCssClass(): string;
        /**
         * Check if the button's element has a box structure.
         * @param button Button instance whose structure is being checked.
         * @param element Element of the button.
         */
        hasBoxStructure(
            button: ಠ_ಠ.clutz.goog.ui.Button|null,
            element: GlobalElement|null): boolean;
    }
}
declare module 'goog:goog.ui.ImagelessButtonRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.ImagelessButtonRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Custom renderer for {@link goog.ui.MenuButton}s. Imageless buttons can
     * contain almost arbitrary HTML content, will flow like inline elements,
     * but can be styled like block-level elements.
     */
    class ImagelessMenuButtonRenderer extends
        ImagelessMenuButtonRenderer_Instance {
        /**
         * Default CSS class to be applied to the root element of components
         * rendered by this renderer.
         */
        static CSS_CLASS: string;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.ImagelessMenuButtonRenderer;
        static instance_: ಠ_ಠ.clutz.goog.ui.ImagelessMenuButtonRenderer;
    }
    class ImagelessMenuButtonRenderer_Instance extends
        ಠ_ಠ.clutz.goog.ui.MenuButtonRenderer_Instance {
        /**
         * Returns true if this renderer can decorate the element.  Overrides
         * {@link goog.ui.MenuButtonRenderer#canDecorate} by returning true if
         * the element is a DIV, false otherwise.
         * @param element Element to decorate.
         */
        canDecorate(element: GlobalElement|null): boolean;
        /**
         * Takes a text caption or existing DOM structure, and returns the
         * content wrapped in a pseudo-rounded-corner box.  Creates the
         * following DOM structure:
         *
         * <div class="goog-inline-block goog-imageless-button">
         * <div class="goog-inline-block goog-imageless-button-outer-box">
         * <div class="goog-imageless-button-inner-box">
         * <div class="goog-imageless-button-pos-box">
         * <div class="goog-imageless-button-top-shadow">&nbsp;</div>
         * <div class="goog-imageless-button-content
         * goog-imageless-menubutton-caption">Contents...
         * </div>
         * <div class="goog-imageless-menubutton-dropdown"></div>
         * </div>
         * </div>
         * </div>
         * </div>
         *
         * Used by both {@link #createDom} and {@link #decorate}.  To be
         * overridden by subclasses.
         * @param content Text caption or DOM structure to wrap in a box.
         * @param dom DOM helper, used for document interaction.
         */
        createButton(
            content: string|Node|null|Node[]|NodeListOf<Node>,
            dom: ಠ_ಠ.clutz.goog.dom.DomHelper|null): GlobalElement;
        getContentElement(element: GlobalElement|null): GlobalElement|null;
        /**
         * Returns the CSS class to be applied to the root element of components
         * rendered using this renderer.
         */
        getCssClass(): string;
        /**
         * Check if the button's element has a box structure.
         * @param button Button instance whose structure is being checked.
         * @param element Element of the button.
         */
        hasBoxStructure(
            button: ಠ_ಠ.clutz.goog.ui.Button|null,
            element: GlobalElement|null): boolean;
    }
}
declare module 'goog:goog.ui.ImagelessMenuButtonRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.ImagelessMenuButtonRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Input date picker widget.
     */
    class InputDatePicker extends InputDatePicker_Instance {}
    class InputDatePicker_Instance extends
        ಠ_ಠ.clutz.goog.ui.Component_Instance {
        /**
         * Input date picker widget.
         * @param dateTimeFormatter A formatter instance used to format the date
         * picker's date for display in the input element.
         * @param dateTimeParser A parser instance used to parse the input
         * element's string as a date to set the picker.
         * @param opt_datePicker Optional DatePicker.  This enables the use of a
         * custom date-picker instance.
         * @param opt_domHelper Optional DOM helper.
         */
        constructor(
            dateTimeFormatter: ಠ_ಠ.clutz.goog.i18n.DateTimeFormat|null,
            dateTimeParser: ಠ_ಠ.clutz.goog.i18n.DateTimeParse|null,
            opt_datePicker?: ಠ_ಠ.clutz.goog.ui.DatePicker|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * Creates an input element for use with the popup date picker.
         */
        createDom(): void;
        decorateInternal(element: GlobalElement|null): void;
        disposeInternal(): void;
        enterDocument(): void;
        exitDocument(): void;
        /**
         * Returns the selected date, if any.  Compares the dates from the date
         * picker and the input field, causing them to be synced if different.
         */
        getDate(): ಠ_ಠ.clutz.goog.date.DateTime|null;
        /**
         * Returns the PopupDatePicker's internal DatePicker instance.  This can
         * be used to customize the date picker's styling.
         */
        getDatePicker(): ಠ_ಠ.clutz.goog.ui.DatePicker|null;
        /**
         * Returns the value of the input element.  This can be overridden to
         * support alternative types of input getting.
         */
        getInputValue(): string;
        /**
         * Returns the PopupDatePicker instance.
         */
        getPopupDatePicker(): ಠ_ಠ.clutz.goog.ui.PopupDatePicker|null;
        /**
         * See goog.ui.PopupDatePicker.hidePopup().
         */
        hidePopup(): void;
        /**
         * Sets the selected date.  See goog.ui.PopupDatePicker.setDate().
         * @param date The date to set.
         */
        setDate(date: ಠ_ಠ.clutz.goog.date.Date|null): void;
        /**
         * Sets the value of the input element.  This can be overridden to
         * support alternative types of input setting.
         * @param value The value to set.
         */
        setInputValue(value: string): void;
        /**
         * Sets the element that the PopupDatePicker should be parented to. If
         * not set, defaults to the body element of the page.
         * @param el The element that the PopupDatePicker should be parented to.
         */
        setPopupParentElement(el: GlobalElement|null): void;
        /**
         * See goog.ui.PopupDatePicker.showPopup().
         * @param element Reference element for displaying the popup -- popup
         * will appear at the bottom-left corner of this element.
         */
        showForElement(element: GlobalElement|null): void;
    }
}
declare module 'goog:goog.ui.InputDatePicker' {
    import alias = ಠ_ಠ.clutz.goog.ui.InputDatePicker;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Generic ui event class for events that take a single item like a menu
     * click event.
     */
    class ItemEvent extends ItemEvent_Instance {}
    class ItemEvent_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
        /**
         * Generic ui event class for events that take a single item like a menu
         * click event.
         * @param type Event Type.
         * @param target Reference to the object that is the target of this
         * event.
         * @param item The item that was clicked.
         */
        constructor(
            type: string, target: GlobalObject|null, item: GlobalObject|null);
        /**
         * Item for the event. The type of this object is specific to the type
         * of event. For a menu, it would be the menu item that was clicked. For
         * a listbox selection, it would be the listitem that was selected.
         */
        item: GlobalObject|null;
    }
}
declare module 'goog:goog.ui.ItemEvent' {
    import alias = ಠ_ಠ.clutz.goog.ui.ItemEvent;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Object representing a keyboard shortcut event.
     */
    class KeyboardShortcutEvent extends KeyboardShortcutEvent_Instance {}
    class KeyboardShortcutEvent_Instance extends
        ಠ_ಠ.clutz.goog.events.Event_Instance {
        /**
         * Object representing a keyboard shortcut event.
         * @param type Event type.
         * @param identifier Task identifier for the triggered shortcut.
         * @param target Target the original key press event originated from.
         */
        constructor(
            type: string, identifier: string,
            target: Node|null|ಠ_ಠ.clutz.goog.events.EventTarget);
        /**
         * Task identifier for the triggered shortcut
         */
        identifier: string;
    }
}
declare module 'goog:goog.ui.KeyboardShortcutEvent' {
    import alias = ಠ_ಠ.clutz.goog.ui.KeyboardShortcutEvent;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Component for handling keyboard shortcuts. A shortcut is registered and
     * bound to a specific identifier. Once the shortcut is triggered an event
     * is fired with the identifier for the shortcut. This allows keyboard
     * shortcuts to be customized without modifying the code that listens for
     * them.
     *
     * Supports keyboard shortcuts triggered by a single key, a stroke stroke
     * (key plus at least one modifier) and a sequence of keys or strokes.
     */
    class KeyboardShortcutHandler extends KeyboardShortcutHandler_Instance {
        /**
         * Maximum allowed delay, in milliseconds, allowed between the first and
         * second key in a key sequence.
         */
        static MAX_KEY_SEQUENCE_DELAY: number;
        /**
         * Static method for getting the key code for a given key.
         * @param name Name of key.
         */
        static getKeyCode(name: string): number;
        /**
         * Builds stroke array from string representation of shortcut.
         * @param s String representation of shortcut.
         */
        static parseStringShortcut(s: string):
            {key: string | null, keyCode: number|null, modifiers: number}[];
    }
    class KeyboardShortcutHandler_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * Component for handling keyboard shortcuts. A shortcut is registered
         * and bound to a specific identifier. Once the shortcut is triggered an
         * event is fired with the identifier for the shortcut. This allows
         * keyboard shortcuts to be customized without modifying the code that
         * listens for them.
         *
         * Supports keyboard shortcuts triggered by a single key, a stroke
         * stroke (key plus at least one modifier) and a sequence of keys or
         * strokes.
         * @param keyTarget Event target that the key event listener is attached
         * to, typically the applications root container.
         */
        constructor(keyTarget: ಠ_ಠ.clutz.goog.events.EventTarget|null|
                    GlobalEventTarget);
        /**
         * Removes the listener that was added by link {@link
         * #initializeKeyListener}.
         */
        clearKeyListener(): void;
        disposeInternal(): void;
        /**
         * Returns whether all shortcuts (including modifier shortcuts) are
         * treated as if the keys had been passed to the setGlobalKeys function.
         */
        getAllShortcutsAreGlobal(): boolean;
        /**
         * Returns whether the default action will always be prevented when a
         * shortcut event is fired. The default value is true.
         */
        getAlwaysPreventDefault(): boolean;
        /**
         * Returns whether the event will always be stopped from propagating
         * beyond its target when a shortcut event is fired. The default value
         * is false.
         */
        getAlwaysStopPropagation(): boolean;
        /**
         * Returns event type for a specific shortcut.
         * @param identifier Identifier for the shortcut task.
         */
        getEventType(identifier: string): string;
        getGlobalKeys(): string[];
        /**
         * Returns whether shortcuts with modifiers are treated as if the keys
         * had been passed to the setGlobalKeys function.  Ignored if you have
         * called setAllShortcutsAreGlobal(true).  Applies only to form elements
         * (not content-editable).
         */
        getModifierShortcutsAreGlobal(): boolean;
        /**
         * Adds a key event listener that triggers {@link #handleKeyDown_} when
         * keys are pressed.
         * @param keyTarget Event target that the event listener should be
         * attached to.
         */
        initializeKeyListener(keyTarget: ಠ_ಠ.clutz.goog.events.EventTarget|null|
                              GlobalEventTarget): void;
        /**
         * Verifies if a particular keyboard shortcut is registered already. It
         * has the same interface as the unregistering of shortcuts.
         *
         * param {number} keyCode Numeric code for key
         * param {number=} opt_modifiers Bitmap indicating required modifier
         * keys. goog.ui.KeyboardShortcutHandler.Modifiers.SHIFT, CTRL, ALT, or
         * META.
         *
         * The two parameters can be repeated any number of times to create a
         * shortcut using a sequence of strokes.
         *
         * A string representation of the shortcut can be supplied instead see
         * {@link #registerShortcut} for syntax. In that case the method only
         * takes one argument.
         * @param var_args String representation, or array or list of
         * alternating key codes and modifiers.
         */
        isShortcutRegistered(...var_args: (number|string|
                                           ಠ_ಠ.clutz.goog.vec.Number|null|
                                           undefined)[]): boolean;
        /**
         * Registers a keyboard shortcut.
         * @param identifier Identifier for the task performed by the keyboard
         * combination. Multiple shortcuts can be provided for the same task by
         * specifying the same identifier.
         * @param var_args See below. param {number} keyCode Numeric code for
         * key param {number=} opt_modifiers Bitmap indicating required modifier
         * keys. goog.ui.KeyboardShortcutHandler.Modifiers.SHIFT, CTRL, ALT, or
         * META. The last two parameters can be repeated any number of times to
         * create a shortcut using a sequence of strokes. Instead of varargs the
         * second parameter could also be an array where each element would be
         * regarded as a parameter. A string representation of the shortcut can
         * be supplied instead of the last two parameters. In that case the
         * method only takes two arguments, the identifier and the string.
         * Examples: g               registerShortcut(str, G_KEYCODE) Ctrl+g
         * registerShortcut(str, G_KEYCODE, CTRL) Ctrl+Shift+g
         * registerShortcut(str, G_KEYCODE, CTRL | SHIFT) Ctrl+g a
         * registerShortcut(str, G_KEYCODE, CTRL, A_KEYCODE) Ctrl+g Shift+a
         * registerShortcut(str, G_KEYCODE, CTRL, A_KEYCODE, SHIFT) g a
         * registerShortcut(str, G_KEYCODE, NONE, A_KEYCODE) Examples using
         * string representation for shortcuts: g
         * registerShortcut(str, 'g') Ctrl+g          registerShortcut(str,
         * 'ctrl+g') Ctrl+Shift+g    registerShortcut(str, 'ctrl+shift+g')
         * Ctrl+g a        registerShortcut(str, 'ctrl+g a') Ctrl+g Shift+a
         * registerShortcut(str, 'ctrl+g shift+a') g a
         * registerShortcut(str, 'g a').
         */
        registerShortcut(
            identifier: string,
            ...var_args: (number|string|ಠ_ಠ.clutz.goog.vec.Number|null|
                          undefined)[]): void;
        /**
         * Sets whether to treat all shortcuts (including modifier shortcuts) as
         * if the keys had been passed to the setGlobalKeys function.
         * @param allShortcutsGlobal Whether to treat all shortcuts as global.
         */
        setAllShortcutsAreGlobal(allShortcutsGlobal: boolean): void;
        /**
         * Sets whether to treat space key as a shortcut when the focused
         * element is a checkbox, radiobutton or button.
         * @param allowSpaceKeyOnButtons Whether to treat space key as a
         * shortcut when the focused element is a checkbox, radiobutton or
         * button.
         */
        setAllowSpaceKeyOnButtons(allowSpaceKeyOnButtons: boolean): void;
        /**
         * Sets whether to always prevent the default action when a shortcut
         * event is fired. If false, the default action is prevented only if
         * preventDefault is called on either of the corresponding
         * SHORTCUT_TRIGGERED or SHORTCUT_PREFIX events. If true, the default
         * action is prevented whenever a shortcut event is fired. The default
         * value is true.
         * @param alwaysPreventDefault Whether to always call preventDefault.
         */
        setAlwaysPreventDefault(alwaysPreventDefault: boolean): void;
        /**
         * Sets whether to always stop propagation for the event when fired. If
         * false, the propagation is stopped only if stopPropagation is called
         * on either of the corresponding SHORT_CUT_TRIGGERED or SHORTCUT_PREFIX
         * events. If true, the event is prevented from propagating beyond its
         * target whenever it is fired. The default value is false.
         * @param alwaysStopPropagation Whether to always call stopPropagation.
         */
        setAlwaysStopPropagation(alwaysStopPropagation: boolean): void;
        /**
         * Sets the global keys; keys that are safe to always regarded as
         * shortcuts, even if entered in a textarea or input field.
         * @param keys List of keys.
         */
        setGlobalKeys(keys: ಠ_ಠ.clutz.goog.vec.Number|null): void;
        /**
         * Sets whether to treat shortcuts with modifiers as if the keys had
         * been passed to the setGlobalKeys function.  Ignored if you have
         * called setAllShortcutsAreGlobal(true).  Applies only to form elements
         * (not content-editable).
         * @param modifierShortcutsGlobal Whether to treat shortcuts with
         * modifiers as global.
         */
        setModifierShortcutsAreGlobal(modifierShortcutsGlobal: boolean): void;
        /**
         * Unregisters all keyboard shortcuts.
         */
        unregisterAll(): void;
        /**
         * Unregisters a keyboard shortcut by keyCode and modifiers or string
         * representation of sequence.
         *
         * param {number} keyCode Numeric code for key
         * param {number=} opt_modifiers Bitmap indicating required modifier
         * keys. goog.ui.KeyboardShortcutHandler.Modifiers.SHIFT, CTRL, ALT, or
         * META.
         *
         * The two parameters can be repeated any number of times to create a
         * shortcut using a sequence of strokes.
         *
         * A string representation of the shortcut can be supplied instead see
         * {@link #registerShortcut} for syntax. In that case the method only
         * takes one argument.
         * @param var_args String representation, or array or list of
         * alternating key codes and modifiers.
         */
        unregisterShortcut(...var_args: (number|string|
                                         ಠ_ಠ.clutz.goog.vec.Number|null|
                                         undefined)[]): void;
    }
}
declare namespace ಠ_ಠ.clutz.goog.ui.KeyboardShortcutHandler {
    class SequenceNode_ extends SequenceNode__Instance {}
    class SequenceNode__Instance {
        private noStructuralTyping_: any;
        next: {
            [key: string]:
                ಠ_ಠ.clutz.goog.ui.KeyboardShortcutHandler.SequenceNode_ | null
        }|null;
        shortcut: string|null;
    }
}
declare module 'goog:goog.ui.KeyboardShortcutHandler' {
    import alias = ಠ_ಠ.clutz.goog.ui.KeyboardShortcutHandler;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.KeyboardShortcutHandler {
    /**
     * Events.
     */
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        SHORTCUT_PREFIX: EventType,
        SHORTCUT_TRIGGERED: EventType,
    };
}
declare module 'goog:goog.ui.KeyboardShortcutHandler.EventType' {
    import alias = ಠ_ಠ.clutz.goog.ui.KeyboardShortcutHandler.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.KeyboardShortcutHandler {
    /**
     * Bit values for modifier keys.
     */
    enum Modifiers {
        ALT,
        CTRL,
        META,
        NONE,
        SHIFT,
    }
}
declare module 'goog:goog.ui.KeyboardShortcutHandler.Modifiers' {
    import alias = ಠ_ಠ.clutz.goog.ui.KeyboardShortcutHandler.Modifiers;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * This creates the label input object.
     */
    class LabelInput extends LabelInput_Instance {}
    class LabelInput_Instance extends ಠ_ಠ.clutz.goog.ui.Component_Instance {
        /**
         * This creates the label input object.
         * @param opt_label The text to show as the label.
         * @param opt_domHelper Optional DOM helper.
         */
        constructor(
            opt_label?: string,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * Clears the value of the input element without resetting the default
         * text.
         */
        clear(): void;
        /**
         * Creates the DOM nodes needed for the label input.
         */
        createDom(): void;
        /**
         * Decorates an existing HTML input element as a label input. If the
         * element has a "label" attribute then that will be used as the label
         * property for the label input object.
         * @param element The HTML input element to decorate.
         */
        decorateInternal(element: GlobalElement|null): void;
        disposeInternal(): void;
        enterDocument(): void;
        exitDocument(): void;
        /**
         * This method focuses the input and selects all the text. If the value
         * hasn't changed it will set the value to the label so that the label
         * text is selected.
         */
        focusAndSelect(): void;
        getLabel(): string;
        /**
         * Returns the current value of the text box, returning an empty string
         * if the search box is the default value
         */
        getValue(): string;
        hasChanged(): boolean;
        hasFocus(): boolean;
        isEnabled(): boolean;
        /**
         * The CSS class name to add to the input when the user has not entered
         * a value.
         */
        labelCssClassName: string;
        /**
         * The label restore delay after leaving the input.
         */
        labelRestoreDelayMs: number;
        /**
         * Clears the value of the input element and resets the default text.
         */
        reset(): void;
        /**
         * Enables/Disables the label input.
         * @param enabled Whether to enable (true) or disable (false) the label
         * input.
         */
        setEnabled(enabled: boolean): void;
        /**
         * Sets the label text as aria-label, and placeholder when supported.
         * @param label The text to show as the label.
         */
        setLabel(label: string): void;
        /**
         * Use this to set the value through script to ensure that the label
         * state is up to date
         * @param s The new value for the input.
         */
        setValue(s: string): void;
    }
}
declare module 'goog:goog.ui.LabelInput' {
    import alias = ಠ_ಠ.clutz.goog.ui.LabelInput;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Link renderer for {@link goog.ui.Button}s.  Link buttons can contain
     * almost arbitrary HTML content, will flow like inline elements, but can be
     * styled like block-level elements.
     */
    class LinkButtonRenderer extends LinkButtonRenderer_Instance {
        /**
         * Default CSS class to be applied to the root element of components
         * rendered by this renderer.
         */
        static CSS_CLASS: string;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.LinkButtonRenderer;
        static instance_: ಠ_ಠ.clutz.goog.ui.LinkButtonRenderer;
    }
    class LinkButtonRenderer_Instance extends
        ಠ_ಠ.clutz.goog.ui.FlatButtonRenderer_Instance {
        getCssClass(): string;
    }
}
declare module 'goog:goog.ui.LinkButtonRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.LinkButtonRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * A basic menu class.
     */
    class Menu extends Menu_Instance {
        /**
         * CSS class for menus.
         */
        static CSS_CLASS: string;
    }
    class Menu_Instance extends ಠ_ಠ.clutz.goog.ui.Container_Instance {
        /**
         * A basic menu class.
         * @param opt_domHelper Optional DOM helper.
         * @param opt_renderer Renderer used to render or decorate the
         * container; defaults to {@link goog.ui.MenuRenderer}.
         */
        constructor(
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null,
            opt_renderer?: ಠ_ಠ.clutz.goog.ui.MenuRenderer|null);
        /**
         * Adds a new menu item at the end of the menu.
         * @param item Menu item to add to the menu.
         */
        addItem(item: ಠ_ಠ.clutz.goog.ui.MenuHeader|null|
                ಠ_ಠ.clutz.goog.ui.MenuItem|
                ಠ_ಠ.clutz.goog.ui.MenuSeparator): void;
        /**
         * Adds a new menu item at a specific index in the menu.
         * @param item Menu item to add to the menu.
         * @param n Index at which to insert the menu item.
         */
        addItemAt(
            item: ಠ_ಠ.clutz.goog.ui.MenuHeader|null|
            ಠ_ಠ.clutz.goog.ui.MenuItem|ಠ_ಠ.clutz.goog.ui.MenuSeparator,
            n: number): void;
        canHighlightItem(item: ಠ_ಠ.clutz.goog.ui.Control|null): boolean;
        /**
         * Returns whether the provided element is to be considered inside the
         * menu for purposes such as dismissing the menu on an event.  This is
         * so submenus can make use of elements outside their own DOM.
         * @param element The element to test for.
         */
        containsElement(element: GlobalElement|null): boolean;
        /**
         * Decorate menu items located in any descendent node which as been
         * explicitly marked as a 'content' node.
         * @param element Element to decorate.
         */
        decorateContent(element: GlobalElement|null): void;
        decorateInternal(element: GlobalElement|null): void;
        getAllowAutoFocus(): boolean;
        getAllowHighlightDisabled(): boolean;
        /**
         * Returns the CSS class applied to menu elements, also used as the
         * prefix for derived styles, if any.  Subclasses should override this
         * method as needed. Considered protected.
         */
        getCssClass(): string;
        /**
         * Returns a reference to the menu item at a given index.
         * @param n Index of menu item.
         */
        getItemAt(n: number): ಠ_ಠ.clutz.goog.ui.MenuHeader|null
            |ಠ_ಠ.clutz.goog.ui.MenuItem|ಠ_ಠ.clutz.goog.ui.MenuSeparator;
        /**
         * Returns the number of items in the menu (including separators).
         */
        getItemCount(): number;
        /**
         * Returns an array containing the menu items contained in the menu.
         */
        getItems(): (ಠ_ಠ.clutz.goog.ui.MenuItem|null)[];
        /**
         * Gets the page offset of the menu, or null if the menu isn't visible
         */
        getPosition(): ಠ_ಠ.clutz.goog.math.Coordinate|null;
        handleEnterItem(e: ಠ_ಠ.clutz.goog.events.Event|null): boolean;
        handleKeyEventInternal(e: ಠ_ಠ.clutz.goog.events.KeyEvent|null): boolean;
        /**
         * Highlights the next item that begins with the specified string.  If
         * no (other) item begins with the given string, the selection is
         * unchanged.
         * @param charStr The prefix to match.
         */
        highlightNextPrefix(charStr: string): boolean;
        /**
         * Coordinates of the mousedown event that caused this menu to be made
         * visible. Used to prevent the consequent mouseup event due to a simple
         * click from activating a menu item immediately. Considered protected;
         * should only be used within this package or by subclasses.
         */
        openingCoords?: ಠ_ಠ.clutz.goog.math.Coordinate|null;
        /**
         * Removes an item from the menu and disposes of it.
         * @param item The menu item to remove.
         */
        removeItem(item: ಠ_ಠ.clutz.goog.ui.MenuHeader|null|
                   ಠ_ಠ.clutz.goog.ui.MenuItem|
                   ಠ_ಠ.clutz.goog.ui.MenuSeparator): void;
        /**
         * Removes a menu item at a given index in the menu and disposes of it.
         * @param n Index of item.
         */
        removeItemAt(n: number): void;
        /**
         * Sets whether the menu can automatically move focus to its key event
         * target when it is set to visible.
         * @param allow Whether the menu can automatically move focus to its key
         * event target when it is set to visible.
         */
        setAllowAutoFocus(allow: boolean): void;
        /**
         * Sets whether the menu will highlight disabled menu items or skip to
         * the next active item.
         * @param allow Whether the menu will highlight disabled menu items or
         * skip to the next active item.
         */
        setAllowHighlightDisabled(allow: boolean): void;
        setHighlightedIndex(index: number): void;
        /**
         * Sets the position of the menu relative to the view port.
         * @param x Left position or coordinate obj.
         * @param opt_y Top position.
         */
        setPosition(
            x: number|ಠ_ಠ.clutz.goog.math.Coordinate|null,
            opt_y?: number): void;
        setVisible(
            show: boolean, opt_force?: boolean,
            opt_e?: ಠ_ಠ.clutz.goog.events.Event|null): boolean;
    }
}
declare module 'goog:goog.ui.Menu' {
    import alias = ಠ_ಠ.clutz.goog.ui.Menu;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.Menu {
    /**
     * Event types dispatched by the menu.
     */
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        BEFORE_HIDE: EventType,
        BEFORE_SHOW: EventType,
        HIDE: EventType,
        SHOW: EventType,
    };
}
declare module 'goog:goog.ui.Menu.EventType' {
    import alias = ಠ_ಠ.clutz.goog.ui.Menu.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Default renderer for {@link goog.ui.menuBar}s, based on {@link
     * goog.ui.ContainerRenderer}.
     */
    class MenuBarRenderer extends MenuBarRenderer_Instance {
        /**
         * Default CSS class to be applied to the root element of elements
         * rendered by this renderer.
         */
        static CSS_CLASS: string;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.MenuBarRenderer;
        static instance_: ಠ_ಠ.clutz.goog.ui.MenuBarRenderer;
    }
    class MenuBarRenderer_Instance extends
        ಠ_ಠ.clutz.goog.ui.ContainerRenderer_Instance {
        /**
         * Default renderer for {@link goog.ui.menuBar}s, based on {@link
         * goog.ui.ContainerRenderer}.
         */
        constructor();
        getCssClass(): string;
        /**
         * Returns the default orientation of containers rendered or decorated
         * by this renderer.  This implementation returns {@code HORIZONTAL}.
         */
        getDefaultOrientation(): ಠ_ಠ.clutz.goog.ui.Container.Orientation;
    }
}
declare module 'goog:goog.ui.MenuBarRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.MenuBarRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * The MenuBase class provides an abstract base class for different
     * implementations of menu controls.
     */
    class MenuBase extends MenuBase_Instance {
        /**
         * Events fired by the Menu
         */
        static Events: GlobalObject;
    }
    class MenuBase_Instance extends ಠ_ಠ.clutz.goog.ui.Popup_Instance {
        /**
         * The MenuBase class provides an abstract base class for different
         * implementations of menu controls.
         * @param opt_element A DOM element for the popup.
         */
        constructor(opt_element?: GlobalElement|null);
        disposeInternal(): void;
        /**
         * Returns the selected item
         */
        getSelectedItem(): GlobalObject|null;
        /**
         * Called after the menu is hidden. Derived classes can override to hook
         * this event but should make sure to call the parent class method.
         * @param opt_target Target of the event causing the hide.
         */
        onHide(opt_target?: Node|null): void;
        /**
         * Key down handler for the menu. Derived classes should override.
         * @param e The event object.
         */
        onKeyDown(e: ಠ_ಠ.clutz.goog.events.KeyEvent|null): void;
        /**
         * Mouse down handler for the menu. Derived classes should override.
         * @param e The event object.
         */
        onMouseDown(e: ಠ_ಠ.clutz.goog.events.Event): void;
        /**
         * Mouse out handler for the menu. Derived classes should override.
         * @param e The event object.
         */
        onMouseOut(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Mouse over handler for the menu. Derived classes should override.
         * @param e The event object.
         */
        onMouseOver(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Mouse up handler for the menu. Derived classes should override.
         * @param e The event object.
         */
        onMouseUp(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Called after the menu is shown. Derived classes can override to hook
         * this event but should make sure to call the parent class method.
         */
        onShow(): void;
        /**
         * Sets the selected item
         * @param item The item to select. The type of this item is specific to
         * the menu class.
         */
        setSelectedItem(item: GlobalObject|null): void;
    }
}
declare module 'goog:goog.ui.MenuBase' {
    import alias = ಠ_ಠ.clutz.goog.ui.MenuBase;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * A menu button control.  Extends {@link goog.ui.Button} by composing a
     * button with a dropdown arrow and a popup menu.
     */
    class MenuButton extends MenuButton_Instance {}
    class MenuButton_Instance extends ಠ_ಠ.clutz.goog.ui.Button_Instance {
        /**
         * A menu button control.  Extends {@link goog.ui.Button} by composing a
         * button with a dropdown arrow and a popup menu.
         * @param opt_content Text caption or existing DOM structure to display
         * as the button's caption (if any).
         * @param opt_menu Menu to render under the button when clicked.
         * @param opt_renderer Renderer used to render or decorate the menu
         * button; defaults to {@link goog.ui.MenuButtonRenderer}.
         * @param opt_domHelper Optional DOM helper, used for document
         * interaction.
         * @param opt_menuRenderer Renderer used to render or decorate the menu;
         * defaults to {@link goog.ui.MenuRenderer}.
         */
        constructor(
            opt_content?: string|Node|null|Node[]|NodeListOf<Node>,
            opt_menu?: ಠ_ಠ.clutz.goog.ui.Menu|null,
            opt_renderer?: ಠ_ಠ.clutz.goog.ui.ButtonRenderer|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null,
            opt_menuRenderer?: ಠ_ಠ.clutz.goog.ui.MenuRenderer);
        selectFirstOnEnterOrSpace_: boolean;
        /**
         * Adds a new menu item at the end of the menu.
         * @param item Menu item to add to the menu.
         */
        addItem(item: null|ಠ_ಠ.clutz.goog.ui.Control): void;
        /**
         * Adds a new menu item at the specific index in the menu.
         * @param item Menu item to add to the menu.
         * @param index Index at which to insert the menu item.
         */
        addItemAt(
            item: ಠ_ಠ.clutz.goog.ui.MenuItem|null|
            ಠ_ಠ.clutz.goog.ui.MenuSeparator,
            index: number): void;
        /**
         * Returns true if the given element is to be considered part of the
         * component, even if it isn't a DOM descendant of the component's root
         * element.
         * @param element Element to test (if any).
         */
        containsElement(element: GlobalElement|null): boolean;
        disposeInternal(): void;
        /**
         * Sets up event handlers specific to menu buttons.
         */
        enterDocument(): void;
        /**
         * Removes event handlers specific to menu buttons, and ensures that the
         * attached menu also exits the document.
         */
        exitDocument(): void;
        /**
         * Returns the menu item at a given index.
         * @param index Index of menu item.
         */
        getItemAt(index: number): ಠ_ಠ.clutz.goog.ui.MenuItem|null;
        /**
         * Returns the number of items in the menu (including separators).
         */
        getItemCount(): number;
        /**
         * Returns the menu attached to the button.  If no menu is attached,
         * creates a new empty menu.
         */
        getMenu(): ಠ_ಠ.clutz.goog.ui.Menu|null;
        /**
         * Handles blur events dispatched by the button's key event target when
         * it loses keyboard focus by closing the popup menu (unless it is
         * focusable). Only registered if the button is focusable.
         * @param e Blur event dispatched by the menu button.
         */
        handleBlur(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Handles {@code CLOSE} events dispatched by the associated menu.
         * @param e Close event to handle.
         */
        handleCloseItem(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Handles mousedown events over the document.  If the mousedown happens
         * over an element unrelated to the component, hides the menu.
         * TODO(attila): Reconcile this with goog.ui.Popup (and handle
         * frames/windows).
         * @param e Mouse event to handle.
         */
        handleDocumentMouseDown(e: ಠ_ಠ.clutz.goog.events.BrowserEvent|
                                null): void;
        /**
         * Handles {@code HIGHLIGHT} events dispatched by the attached menu.
         * @param e Highlight event to handle.
         */
        handleHighlightItem(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        handleKeyEventInternal(e: ಠ_ಠ.clutz.goog.events.KeyEvent|null): boolean;
        /**
         * Handles {@code ACTION} events dispatched by an activated menu item.
         * @param e Action event to handle.
         */
        handleMenuAction(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Handles {@code BLUR} events dispatched by the popup menu by closing
         * it. Only registered if the menu is focusable.
         * @param e Blur event dispatched by a focusable menu.
         */
        handleMenuBlur(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Handles mousedown events.  Invokes the superclass implementation to
         * dispatch an ACTIVATE event and activate the button.  Also toggles the
         * visibility of the attached menu.
         * @param e Mouse event to handle.
         */
        handleMouseDown(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Handles mouseup events.  Invokes the superclass implementation to
         * dispatch an ACTION event and deactivate the button.
         * @param e Mouse event to handle.
         */
        handleMouseUp(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Handles UNHIGHLIGHT events dispatched by the associated menu.
         * @param e Unhighlight event to handle.
         */
        handleUnHighlightItem(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Hides the menu and cleans up menu-specific event handling.
         */
        hideMenu(): void;
        /**
         * Resets the MenuButton's size.  This is useful for cases where items
         * are added or removed from the menu and scrollOnOverflow is on.  In
         * those cases the menu will not behave correctly and resize itself
         * unless this is called (usually followed by positionMenu()).
         */
        invalidateMenuSize(): void;
        isAlignMenuToStart(): boolean;
        isFocusablePopupMenu(): boolean;
        isScrollOnOverflow(): boolean;
        /**
         * Performs the appropriate action when the menu button is activated by
         * the user.  Overrides the superclass implementation by not dispatching
         * an {@code ACTION} event, because menu buttons exist only to reveal
         * menus, not to perform actions themselves.  Calls {@link #setActive}
         * to deactivate the button.
         * @param e Mouse or key event that triggered the action.
         */
        performActionInternal(e: ಠ_ಠ.clutz.goog.events.Event|null): boolean;
        /**
         * Positions the menu under the button.  May be called directly in cases
         * when the menu size is known to change.
         */
        positionMenu(): void;
        /**
         * Removes the item from the menu and disposes of it.
         * @param item The menu item to remove.
         */
        removeItem(item: ಠ_ಠ.clutz.goog.ui.MenuItem|null|
                   ಠ_ಠ.clutz.goog.ui.MenuSeparator): void;
        /**
         * Removes the menu item at a given index in the menu and disposes of
         * it.
         * @param index Index of item.
         */
        removeItemAt(index: number): void;
        /**
         * Sets whether the menu is aligned to the start or the end of the
         * button.
         * @param alignToStart Whether the menu is to be aligned to the start of
         * the button (left if the render direction is left-to-right, right if
         * the render direction is right-to-left).
         */
        setAlignMenuToStart(alignToStart: boolean): void;
        /**
         * Enables/disables the menu button based on the value of the argument,
         * and updates its CSS styling.  Also hides the popup menu if the button
         * is being disabled.
         * @param enable Whether to enable or disable the button.
         */
        setEnabled(enable: boolean): void;
        /**
         * Sets whether the attached popup menu is focusable.  If the popup menu
         * is focusable, it may steal keyboard focus from the menu button, so
         * the button will not hide the menu on blur.
         * @param focusable Whether the attached menu is focusable.
         */
        setFocusablePopupMenu(focusable: boolean): void;
        /**
         * Replaces the menu attached to the button with the argument, and
         * returns the previous menu (if any).
         * @param menu New menu to be attached to the menu button (null to
         * remove the menu).
         */
        setMenu(menu: ಠ_ಠ.clutz.goog.ui.Menu|null): ಠ_ಠ.clutz.goog.ui.Menu|null
            |undefined;
        /**
         * Sets a margin that will be applied to the menu's position when it is
         * shown. If null, no margin will be applied.
         * @param margin Margin to apply.
         */
        setMenuMargin(margin: ಠ_ಠ.clutz.goog.math.Box|null): void;
        /**
         * Specify which positioning algorithm to use.
         *
         * This method is preferred over the fine-grained positioning methods
         * like setPositionElement, setAlignMenuToStart, and
         * setScrollOnOverflow. Calling this method will override settings by
         * those methods.
         * @param position The position of the Menu the button. If the position
         * has a null anchor, we will use the menubutton element as the anchor.
         */
        setMenuPosition(position: ಠ_ಠ.clutz.goog.positioning.AnchoredPosition|
                        null): void;
        /**
         * Opens or closes the attached popup menu.
         * @param open Whether to open or close the menu.
         * @param opt_e Event that caused the menu to be opened.
         */
        setOpen(open: boolean, opt_e?: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Sets an element for anchoring the menu.
         * @param positionElement New element to use for positioning the
         * dropdown menu.  Null to use the default behavior of positioning to
         * this menu button.
         */
        setPositionElement(positionElement: GlobalElement|null): void;
        /**
         * Sets whether to render the menu as a sibling element of the button.
         * Normally, the menu is a child of document.body.  This option is
         * useful if you need the menu to inherit styles from a common parent
         * element, or if you otherwise need it to share a parent element for
         * desired event handling.  One example of the latter is if the parent
         * is in a goog.ui.Popup, to ensure that clicks on the menu are
         * considered being within the popup.
         * @param renderMenuAsSibling Whether we render the menu at the end of
         * the dom or as a sibling to the button/label that renders the drop
         * down.
         */
        setRenderMenuAsSibling(renderMenuAsSibling: boolean): void;
        /**
         * Sets whether the menu should scroll when it's too big to fix
         * vertically on the screen.  The css of the menu element should have
         * overflow set to auto. Note: Adding or removing items while the menu
         * is open will not work correctly if scrollOnOverflow is on.
         * @param scrollOnOverflow Whether the menu should scroll when too big
         * to fit on the screen.  If false, adjust logic will be used to try and
         * reposition the menu to fit.
         */
        setScrollOnOverflow(scrollOnOverflow: boolean): void;
        /**
         * Sets whether to select the first item in the menu when it is opened
         * using enter or space. By default, the first item is selected only
         * when opened by a key up or down event. When this is on, the first
         * item will be selected due to any of the four events.
         */
        setSelectFirstOnEnterOrSpace(select: boolean): void;
        /**
         * Shows/hides the menu button based on the value of the argument.  Also
         * hides the popup menu if the button is being hidden.
         * @param visible Whether to show or hide the button.
         * @param opt_force If true, doesn't check whether the component already
         * has the requested visibility, and doesn't dispatch any events.
         */
        setVisible(visible: boolean, opt_force?: boolean): boolean;
        /**
         * Reveals the menu and hooks up menu-specific event handling.
         */
        showMenu(): void;
    }
}
declare module 'goog:goog.ui.MenuButton' {
    import alias = ಠ_ಠ.clutz.goog.ui.MenuButton;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Renderer for {@link goog.ui.MenuButton}s.  This implementation overrides
     * {@link goog.ui.CustomButtonRenderer#createButton} to create a separate
     * caption and dropdown element.
     */
    class MenuButtonRenderer extends MenuButtonRenderer_Instance {
        /**
         * Default CSS class to be applied to the root element of components
         * rendered by this renderer.
         */
        static CSS_CLASS: string;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.MenuButtonRenderer;
        static instance_: ಠ_ಠ.clutz.goog.ui.MenuButtonRenderer;
        /**
         * Takes a text caption or existing DOM structure, and returns it
         * wrapped in an appropriately-styled DIV.  Creates the following DOM
         * structure:
         *
         * <div class="goog-inline-block goog-menu-button-caption">
         * Contents...
         * </div>
         * @param content Text caption or DOM structure to wrap in a box.
         * @param cssClass The CSS class for the renderer.
         * @param dom DOM helper, used for document interaction.
         */
        static wrapCaption(
            content: string|Node|null|Node[]|NodeListOf<Node>, cssClass: string,
            dom: ಠ_ಠ.clutz.goog.dom.DomHelper|null): GlobalElement;
    }
    class MenuButtonRenderer_Instance extends
        ಠ_ಠ.clutz.goog.ui.CustomButtonRenderer_Instance {
        /**
         * Takes a text caption or existing DOM structure, and returns the
         * content and a dropdown arrow element wrapped in a
         * pseudo-rounded-corner box.  Creates the following DOM structure:
         *
         * <div class="goog-inline-block goog-menu-button-outer-box">
         * <div class="goog-inline-block goog-menu-button-inner-box">
         * <div class="goog-inline-block goog-menu-button-caption">
         * Contents...
         * </div>
         * <div class="goog-inline-block goog-menu-button-dropdown">
         * &nbsp;
         * </div>
         * </div>
         * </div>
         * @param content Text caption or DOM structure to wrap in a box.
         * @param dom DOM helper, used for document interaction.
         */
        createButton(
            content: string|Node|null|Node[]|NodeListOf<Node>,
            dom: ಠ_ಠ.clutz.goog.dom.DomHelper|null): GlobalElement|null;
        /**
         * Takes a text caption or existing DOM structure, and returns it
         * wrapped in an appropriately-styled DIV.  Creates the following DOM
         * structure:
         *
         * <div class="goog-inline-block goog-menu-button-caption">
         * Contents...
         * </div>
         * @param content Text caption or DOM structure to wrap in a box.
         * @param dom DOM helper, used for document interaction.
         */
        createCaption(
            content: string|Node|null|Node[]|NodeListOf<Node>,
            dom: ಠ_ಠ.clutz.goog.dom.DomHelper|null): GlobalElement|null;
        /**
         * Returns an appropriately-styled DIV containing a dropdown arrow
         * element. Creates the following DOM structure:
         *
         * <div class="goog-inline-block goog-menu-button-dropdown">
         * &nbsp;
         * </div>
         * @param dom DOM helper, used for document interaction.
         */
        createDropdown(dom: ಠ_ಠ.clutz.goog.dom.DomHelper|null): GlobalElement
            |null;
        /**
         * Takes an element, decorates it with the menu button control, and
         * returns the element.  Overrides {@link
         * goog.ui.CustomButtonRenderer#decorate} by looking for a child element
         * that can be decorated by a menu, and if it finds one, decorates it
         * and attaches it to the menu button.
         * @param control goog.ui.MenuButton to decorate the element.
         * @param element Element to decorate.
         */
        decorate(
            control: ಠ_ಠ.clutz.goog.ui.Control|null,
            element: GlobalElement|null): GlobalElement|null;
        /**
         * Takes the button's root element and returns the parent element of the
         * button's contents.  Overrides the superclass implementation by taking
         * the nested DIV structure of menu buttons into account.
         * @param element Root element of the button whose content element is to
         * be returned.
         */
        getContentElement(element: GlobalElement|null): GlobalElement|null;
        /**
         * Returns the CSS class to be applied to the root element of components
         * rendered using this renderer.
         */
        getCssClass(): string;
    }
}
declare module 'goog:goog.ui.MenuButtonRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.MenuButtonRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Class representing a menu header.
     */
    class MenuHeader extends MenuHeader_Instance {}
    class MenuHeader_Instance extends ಠ_ಠ.clutz.goog.ui.Control_Instance {
        /**
         * Class representing a menu header.
         * @param content Text caption or DOM structure to display as the
         * content of the item (use to add icons or styling to menus).
         * @param opt_domHelper Optional DOM helper used for document
         * interactions.
         * @param opt_renderer Optional renderer.
         */
        constructor(
            content: string|Node|null|Node[]|NodeListOf<Node>,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null,
            opt_renderer?: ಠ_ಠ.clutz.goog.ui.MenuHeaderRenderer|null);
    }
}
declare module 'goog:goog.ui.MenuHeader' {
    import alias = ಠ_ಠ.clutz.goog.ui.MenuHeader;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Renderer for menu headers.
     */
    class MenuHeaderRenderer extends MenuHeaderRenderer_Instance {
        /**
         * Default CSS class to be applied to the root element of components
         * rendered by this renderer.
         */
        static CSS_CLASS: string;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.MenuHeaderRenderer;
        static instance_: ಠ_ಠ.clutz.goog.ui.MenuHeaderRenderer;
    }
    class MenuHeaderRenderer_Instance extends
        ಠ_ಠ.clutz.goog.ui.ControlRenderer_Instance {
        /**
         * Returns the CSS class to be applied to the root element of components
         * rendered using this renderer.
         */
        getCssClass(): string;
    }
}
declare module 'goog:goog.ui.MenuHeaderRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.MenuHeaderRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Class representing an item in a menu.
     */
    class MenuItem extends MenuItem_Instance {
        /**
         * The class set on an element that contains a keyboard accelerator
         * hint.
         */
        static ACCELERATOR_CLASS: string;
    }
    class MenuItem_Instance extends ಠ_ಠ.clutz.goog.ui.Control_Instance {
        /**
         * Class representing an item in a menu.
         * @param content Text caption or DOM structure to display as the
         * content of the item (use to add icons or styling to menus).
         * @param opt_model Data/model associated with the menu item.
         * @param opt_domHelper Optional DOM helper used for document
         * interactions.
         * @param opt_renderer Optional renderer.
         */
        constructor(
            content: string|Node|null|Node[]|NodeListOf<Node>, opt_model?: any,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null,
            opt_renderer?: ಠ_ಠ.clutz.goog.ui.MenuItemRenderer|null);
        getAccelerator(): string|null;
        /**
         * Returns the text caption of the component while ignoring
         * accelerators.
         */
        getCaption(): string;
        /**
         * Gets the mnemonic key code. The mnemonic is the key associated with
         * this action.
         */
        getMnemonic(): ಠ_ಠ.clutz.goog.events.KeyCodes;
        getParent(): ಠ_ಠ.clutz.goog.ui.Menu|null;
        getParentEventTarget(): ಠ_ಠ.clutz.goog.ui.Menu|null;
        getPreferredAriaRole(): ಠ_ಠ.clutz.goog.a11y.aria.Role|null;
        /**
         * Returns the value associated with the menu item.  The default
         * implementation returns the model object associated with the item (if
         * any), or its caption.
         */
        getValue(): any;
        handleKeyEventInternal(e: ಠ_ಠ.clutz.goog.events.KeyEvent|null): boolean;
        handleMouseUp(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Sets the menu item to be checkable or not.  Set to true for menu
         * items that represent checkable options.
         * @param checkable Whether the menu item is checkable.
         */
        setCheckable(checkable: boolean): void;
        /**
         * Sets the mnemonic key code. The mnemonic is the key associated with
         * this action.
         * @param key The key code.
         */
        setMnemonic(key: ಠ_ಠ.clutz.goog.events.KeyCodes): void;
        /**
         * Sets the menu item to be selectable or not.  Set to true for menu
         * items that represent selectable options.
         * @param selectable Whether the menu item is selectable.
         */
        setSelectable(selectable: boolean): void;
        setSupportedState(
            state: ಠ_ಠ.clutz.goog.ui.Component.State, support: boolean): void;
        /**
         * Sets the value associated with the menu item.  The default
         * implementation stores the value as the model of the menu item.
         * @param value Value to be associated with the menu item.
         */
        setValue(value: any): void;
    }
}
declare module 'goog:goog.ui.MenuItem' {
    import alias = ಠ_ಠ.clutz.goog.ui.MenuItem;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Default renderer for {@link goog.ui.MenuItem}s.  Each item has the
     * following structure:
     *
     * <div class="goog-menuitem">
     * <div class="goog-menuitem-content">
     * ...(menu item contents)...
     * </div>
     * </div>
     */
    class MenuItemRenderer extends MenuItemRenderer_Instance {
        /**
         * CSS class name the renderer applies to menu item elements.
         */
        static CSS_CLASS: string;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.MenuItemRenderer;
        static instance_: ಠ_ಠ.clutz.goog.ui.MenuItemRenderer;
    }
    class MenuItemRenderer_Instance extends
        ಠ_ಠ.clutz.goog.ui.ControlRenderer_Instance {
        /**
         * Wraps the given text caption or existing DOM node(s) in a structural
         * element containing the menu item's contents.
         * @param content Menu item contents.
         * @param dom DOM helper for document interaction.
         */
        createContent(
            content: string|Node|null|Node[]|NodeListOf<Node>,
            dom: ಠ_ಠ.clutz.goog.dom.DomHelper|null): GlobalElement|null;
        /**
         * Overrides {@link goog.ui.ControlRenderer#createDom} by adding extra
         * markup and stying to the menu item's element if it is selectable or
         * checkable.
         * @param item Menu item to render.
         */
        createDom(item: ಠ_ಠ.clutz.goog.ui.Control|null): GlobalElement|null;
        /**
         * Overrides {@link goog.ui.ControlRenderer#decorate} by initializing
         * the menu item to checkable based on whether the element to be
         * decorated has extra stying indicating that it should be.
         * @param item Menu item instance to decorate the element.
         * @param element Element to decorate.
         */
        decorate(
            item: ಠ_ಠ.clutz.goog.ui.Control|null,
            element: GlobalElement|null): GlobalElement|null;
        getAriaRole(): ಠ_ಠ.clutz.goog.a11y.aria.Role|undefined;
        /**
         * Takes a single {@link goog.ui.Component.State}, and returns the
         * corresponding CSS class name (null if none).  Overrides the
         * superclass implementation by using 'highlight' as opposed to 'hover'
         * as the CSS class name suffix for the HOVER state, for backwards
         * compatibility.
         * @param state Component state.
         */
        getClassForState(state: ಠ_ಠ.clutz.goog.ui.Component.State): string
            |undefined;
        getContentElement(element: GlobalElement|null): GlobalElement|null;
        getCssClass(): string;
        /**
         * Takes a single CSS class name which may represent a component state,
         * and returns the corresponding component state (0x00 if none).
         * Overrides the superclass implementation by treating
         * 'goog-option-selected' as special, for backwards compatibility.
         * @param className CSS class name, possibly representing a component
         * state.
         */
        getStateFromClass(className: string): ಠ_ಠ.clutz.goog.ui.Component.State;
        /**
         * Determines whether the item contains a checkbox element.
         * @param element Menu item root element.
         */
        hasCheckBoxStructure(element: GlobalElement|null): boolean;
        /**
         * Returns true if the element appears to have a proper menu item
         * structure by checking whether its first child has the appropriate
         * structural class name.
         * @param element Element to check.
         */
        hasContentStructure(element: GlobalElement|null): boolean;
        /**
         * Enables/disables checkbox semantics on the menu item.
         * @param item Menu item to update.
         * @param element Menu item element to update (may be null if the item
         * hasn't been rendered yet).
         * @param checkable Whether the item should be checkable.
         */
        setCheckable(
            item: ಠ_ಠ.clutz.goog.ui.Control|null, element: GlobalElement|null,
            checkable: boolean): void;
        /**
         * Takes a menu item's root element, and sets its content to the given
         * text caption or DOM structure.  Overrides the superclass
         * immplementation by making sure that the checkbox structure (for
         * selectable/checkable menu items) is preserved.
         * @param element The item's root element.
         * @param content Text caption or DOM structure to be set as the item's
         * content.
         */
        setContent(
            element: GlobalElement|null,
            content: string|Node|null|Node[]|NodeListOf<Node>): void;
        /**
         * Adds or removes extra markup and CSS styling to the menu item to make
         * it selectable or non-selectable, depending on the value of the
         * {@code selectable} argument.
         * @param item Menu item to update.
         * @param element Menu item element to update.
         * @param enable Whether to add or remove the checkbox structure.
         */
        setEnableCheckBoxStructure(
            item: ಠ_ಠ.clutz.goog.ui.Control, element: GlobalElement,
            enable: boolean): void;
        /**
         * Enables/disables radio button semantics on the menu item.
         * @param item Menu item to update.
         * @param element Menu item element to update (may be null if the item
         * hasn't been rendered yet).
         * @param selectable Whether the item should be selectable.
         */
        setSelectable(
            item: ಠ_ಠ.clutz.goog.ui.Control|null, element: GlobalElement|null,
            selectable: boolean): void;
    }
}
declare module 'goog:goog.ui.MenuItemRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.MenuItemRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Default renderer for {@link goog.ui.Menu}s, based on {@link
     * goog.ui.ContainerRenderer}.
     */
    class MenuRenderer extends MenuRenderer_Instance {
        /**
         * Default CSS class to be applied to the root element of toolbars
         * rendered by this renderer.
         */
        static CSS_CLASS: string;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.MenuRenderer;
        static instance_: ಠ_ಠ.clutz.goog.ui.MenuRenderer;
    }
    class MenuRenderer_Instance extends
        ಠ_ಠ.clutz.goog.ui.ContainerRenderer_Instance {
        /**
         * Default renderer for {@link goog.ui.Menu}s, based on {@link
         * goog.ui.ContainerRenderer}.
         * @param opt_ariaRole Optional ARIA role used for the element.
         */
        constructor(opt_ariaRole?: string);
        /**
         * Returns whether the element is a UL or acceptable to our superclass.
         * @param element Element to decorate.
         */
        canDecorate(element: GlobalElement|null): boolean;
        /**
         * Returns whether the given element is contained in the menu's DOM.
         * @param menu The menu to test.
         * @param element The element to test.
         */
        containsElement(
            menu: ಠ_ಠ.clutz.goog.ui.Menu|null,
            element: GlobalElement|null): boolean;
        /**
         * Returns the CSS class to be applied to the root element of containers
         * rendered using this renderer.
         */
        getCssClass(): string;
        /**
         * Inspects the element, and creates an instance of {@link
         * goog.ui.Control} or an appropriate subclass best suited to decorate
         * it.  Overrides the superclass implementation by recognizing HR
         * elements as separators.
         * @param element Element to decorate.
         */
        getDecoratorForChild(element: GlobalElement|
                             null): ಠ_ಠ.clutz.goog.ui.Control|null;
        initializeDom(container: ಠ_ಠ.clutz.goog.ui.Container|null): void;
    }
}
declare module 'goog:goog.ui.MenuRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.MenuRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Class representing a menu separator.  A menu separator extends {@link
     * goog.ui.Separator} by always setting its renderer to {@link
     * goog.ui.MenuSeparatorRenderer}.
     */
    class MenuSeparator extends MenuSeparator_Instance {}
    class MenuSeparator_Instance extends ಠ_ಠ.clutz.goog.ui.Separator_Instance {
        /**
         * Class representing a menu separator.  A menu separator extends {@link
         * goog.ui.Separator} by always setting its renderer to {@link
         * goog.ui.MenuSeparatorRenderer}.
         * @param opt_domHelper Optional DOM helper used for document
         * interactions.
         */
        constructor(opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
    }
}
declare module 'goog:goog.ui.MenuSeparator' {
    import alias = ಠ_ಠ.clutz.goog.ui.MenuSeparator;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Renderer for menu separators.
     */
    class MenuSeparatorRenderer extends MenuSeparatorRenderer_Instance {
        /**
         * Default CSS class to be applied to the root element of components
         * rendered by this renderer.
         */
        static CSS_CLASS: string;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.MenuSeparatorRenderer;
        static instance_: ಠ_ಠ.clutz.goog.ui.MenuSeparatorRenderer;
    }
    class MenuSeparatorRenderer_Instance extends
        ಠ_ಠ.clutz.goog.ui.ControlRenderer_Instance {
        /**
         * Returns an empty, styled menu separator DIV.  Overrides {@link
         * goog.ui.ControlRenderer#createDom}.
         * @param separator goog.ui.Separator to render.
         */
        createDom(separator: ಠ_ಠ.clutz.goog.ui.Control|null): GlobalElement;
        /**
         * Takes an existing element, and decorates it with the separator.
         * Overrides
         * {@link goog.ui.ControlRenderer#decorate}.
         * @param separator goog.ui.MenuSeparator to decorate the element.
         * @param element Element to decorate.
         */
        decorate(
            separator: ಠ_ಠ.clutz.goog.ui.Control|null,
            element: GlobalElement|null): GlobalElement;
        /**
         * Returns the CSS class to be applied to the root element of components
         * rendered using this renderer.
         */
        getCssClass(): string;
        /**
         * Overrides {@link goog.ui.ControlRenderer#setContent} to do nothing,
         * since separators are empty.
         * @param separator The separator's root element.
         * @param content Text caption or DOM structure to be set as the
         * separators's content (ignored).
         */
        setContent(
            separator: GlobalElement|null,
            content: string|Node|null|Node[]|NodeListOf<Node>): void;
    }
}
declare module 'goog:goog.ui.MenuSeparatorRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.MenuSeparatorRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * A mock implementation of goog.ui.ActivityMonitor for unit testing.
     * Clients of this class should override goog.now to return a synthetic time
     * from the unit test.
     */
    class MockActivityMonitor extends MockActivityMonitor_Instance {}
    class MockActivityMonitor_Instance extends
        ಠ_ಠ.clutz.goog.ui.ActivityMonitor_Instance {
        /**
         * A mock implementation of goog.ui.ActivityMonitor for unit testing.
         * Clients of this class should override goog.now to return a synthetic
         * time from the unit test.
         */
        constructor();
        dispatchEvent(e: string|GlobalObject|null): boolean;
        /**
         * Simulates an event that updates the user to being non-idle.
         * @param opt_type The type of event that made the user not idle. If not
         * specified, defaults to MOUSEMOVE.
         */
        simulateEvent(opt_type?: ಠ_ಠ.clutz.goog.events.EventType): void;
    }
}
declare module 'goog:goog.ui.MockActivityMonitor' {
    import alias = ಠ_ಠ.clutz.goog.ui.MockActivityMonitor;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Helper object to control aria visibility of the rest of the page
     * (background) for a given element. Example usage is to restrict
     * screenreader focus to a modal popup while it is visible.
     *
     * WARNING: This will work only if the element is rendered directly in the
     * 'body' element.
     */
    class ModalAriaVisibilityHelper extends ModalAriaVisibilityHelper_Instance {
    }
    class ModalAriaVisibilityHelper_Instance {
        private noStructuralTyping_: any;
        /**
         * Helper object to control aria visibility of the rest of the page
         * (background) for a given element. Example usage is to restrict
         * screenreader focus to a modal popup while it is visible.
         *
         * WARNING: This will work only if the element is rendered directly in
         * the 'body' element.
         * @param element The given element.
         * @param domHelper DomHelper for the page.
         */
        constructor(
            element: GlobalElement, domHelper: ಠ_ಠ.clutz.goog.dom.DomHelper);
        /**
         * Sets aria-hidden on the rest of the page to restrict screen reader
         * focus. Top-level elements with an explicit aria-hidden state are not
         * altered.
         * @param hide Whether to hide or show the rest of the page.
         */
        setBackgroundVisibility(hide: boolean): void;
    }
}
declare module 'goog:goog.ui.ModalAriaVisibilityHelper' {
    import alias = ಠ_ಠ.clutz.goog.ui.ModalAriaVisibilityHelper;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Base class for modal popup UI components. This can also be used as
     * a standalone component to render a modal popup with an empty div.
     *
     * WARNING: goog.ui.ModalPopup is only guaranteed to work when it is
     * rendered directly in the 'body' element.
     *
     * The Html structure of the modal popup is:
     * <pre>
     * Element         Function              Class-name, goog-modalpopup =
     * default
     * ----------------------------------------------------------------------------
     * - iframe         Iframe mask           goog-modalpopup-bg
     * - div            Background mask       goog-modalpopup-bg
     * - div            Modal popup area      goog-modalpopup
     * - span           Tab catcher
     * </pre>
     */
    class ModalPopup extends ModalPopup_Instance {}
    class ModalPopup_Instance extends ಠ_ಠ.clutz.goog.ui.Component_Instance {
        /**
         * Base class for modal popup UI components. This can also be used as
         * a standalone component to render a modal popup with an empty div.
         *
         * WARNING: goog.ui.ModalPopup is only guaranteed to work when it is
         * rendered directly in the 'body' element.
         *
         * The Html structure of the modal popup is:
         * <pre>
         * Element         Function              Class-name, goog-modalpopup =
         * default
         * ----------------------------------------------------------------------------
         * - iframe         Iframe mask           goog-modalpopup-bg
         * - div            Background mask       goog-modalpopup-bg
         * - div            Modal popup area      goog-modalpopup
         * - span           Tab catcher
         * </pre>
         * @param opt_useIframeMask Work around windowed controls z-index issue
         * by using an iframe instead of a div for bg element.
         * @param opt_domHelper Optional DOM helper; see {@link
         * goog.ui.Component} for semantics.
         */
        constructor(
            opt_useIframeMask?: boolean,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        canDecorate(element: GlobalElement|null): boolean;
        /**
         * Creates the initial DOM representation for the modal popup.
         */
        createDom(): void;
        decorateInternal(element: GlobalElement|null): void;
        disposeInternal(): void;
        enterDocument(): void;
        exitDocument(): void;
        /**
         * Focuses on the modal popup.
         */
        focus(): void;
        /**
         * Returns the background mask element.
         */
        getBackgroundElement(): GlobalElement|null;
        /**
         * Returns the background iframe mask element, if any.
         */
        getBackgroundIframe(): GlobalElement|null;
        getCssClass(): string;
        /**
         * Returns the magic tab catcher element used to detect when the user
         * has rolled focus off of the popup content.  It is automatically
         * created during the createDom method() and can be used by subclasses
         * to implement custom tab-loop behavior.
         */
        getTabCatcherElement(): GlobalElement|null;
        isVisible(): boolean;
        /**
         * Handles focus events.  Makes sure that if the user tabs past the
         * elements in the modal popup, the focus wraps back to the beginning,
         * and that if the user shift-tabs past the front of the modal popup,
         * focus wraps around to the end.
         * @param e Browser's event object.
         */
        onFocus(e: ಠ_ಠ.clutz.goog.events.BrowserEvent|null): void;
        /**
         * Called after the popup is hidden. If there is a transition, this
         * will be called after the transition completed or stopped.
         */
        onHide(): void;
        /**
         * Called after the popup is shown. If there is a transition, this
         * will be called after the transition completed or stopped.
         */
        onShow(): void;
        /**
         * Centers the modal popup in the viewport, taking scrolling into
         * account.
         */
        reposition(): void;
        /**
         * Sets aria-hidden on the rest of the page to restrict screen reader
         * focus. Top-level elements with an explicit aria-hidden state are not
         * altered.
         * @param hide Whether to hide or show the rest of the page.
         */
        setA11YDetectBackground(hide: boolean): void;
        /**
         * Sets the transitions to show and hide the popup and background.
         * @param popupShowTransition Transition to show the popup.
         * @param popupHideTransition Transition to hide the popup.
         * @param bgShowTransition Transition to show the background.
         * @param bgHideTransition Transition to hide the background.
         */
        setTransition(
            popupShowTransition: ಠ_ಠ.clutz.goog.fx.Transition,
            popupHideTransition: ಠ_ಠ.clutz.goog.fx.Transition,
            bgShowTransition: ಠ_ಠ.clutz.goog.fx.Transition,
            bgHideTransition: ಠ_ಠ.clutz.goog.fx.Transition): void;
        /**
         * Sets the visibility of the modal popup box and focus to the popup.
         * @param visible Whether the modal popup should be visible.
         */
        setVisible(visible: boolean): void;
        /**
         * Allow a shift-tab from the top of the modal popup to the last
         * tabbable element by moving focus to the tab catcher. This should be
         * called after catching a wrapping shift-tab event and before allowing
         * it to propagate, so that focus will land on the last tabbable element
         * before the tab catcher.
         */
        setupBackwardTabWrap(): void;
    }
}
declare module 'goog:goog.ui.ModalPopup' {
    import alias = ಠ_ಠ.clutz.goog.ui.ModalPopup;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Renderer for {@link goog.ui.Button}s.  Renders and decorates native HTML
     * button elements.  Since native HTML buttons have built-in support for
     * many features, overrides many expensive (and redundant) superclass
     * methods to be no-ops.
     */
    class NativeButtonRenderer extends NativeButtonRenderer_Instance {
        static getInstance(): ಠ_ಠ.clutz.goog.ui.NativeButtonRenderer;
        static instance_: ಠ_ಠ.clutz.goog.ui.NativeButtonRenderer;
    }
    class NativeButtonRenderer_Instance extends
        ಠ_ಠ.clutz.goog.ui.ButtonRenderer_Instance {
        /**
         * Overrides {@link goog.ui.ButtonRenderer#canDecorate} by returning
         * true only if the element is an HTML button.
         * @param element Element to decorate.
         */
        canDecorate(element: GlobalElement|null): boolean;
        /**
         * Returns the button's contents wrapped in a native HTML button
         * element.  Sets the button's disabled attribute as needed.
         * @param button Button to render.
         */
        createDom(button: ಠ_ಠ.clutz.goog.ui.Control|null): GlobalElement|null;
        decorate(
            button: ಠ_ಠ.clutz.goog.ui.Control|null,
            element: GlobalElement|null): GlobalElement|null;
        getAriaRole(): ಠ_ಠ.clutz.goog.a11y.aria.Role|undefined;
        getValue(element: GlobalElement|null): string|undefined;
        /**
         * Native buttons natively support BiDi and keyboard focus.
         */
        initializeDom(button: ಠ_ಠ.clutz.goog.ui.Control|null): void;
        isFocusable(button: ಠ_ಠ.clutz.goog.ui.Control|null): boolean;
        setState(
            button: ಠ_ಠ.clutz.goog.ui.Control|null,
            state: ಠ_ಠ.clutz.goog.ui.Component.State, enable: boolean): void;
        setValue(element: GlobalElement|null, value: string): any;
    }
}
declare module 'goog:goog.ui.NativeButtonRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.NativeButtonRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Class representing a menu option.  This is just a convenience class that
     * extends {@link goog.ui.MenuItem} by making it selectable.
     */
    class Option extends Option_Instance {}
    class Option_Instance extends ಠ_ಠ.clutz.goog.ui.MenuItem_Instance {
        /**
         * Class representing a menu option.  This is just a convenience class
         * that extends {@link goog.ui.MenuItem} by making it selectable.
         * @param content Text caption or DOM structure to display as the
         * content of the item (use to add icons or styling to menus).
         * @param opt_model Data/model associated with the menu item.
         * @param opt_domHelper Optional DOM helper used for document
         * interactions.
         */
        constructor(
            content: string|Node|null|Node[]|NodeListOf<Node>, opt_model?: any,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * Performs the appropriate action when the option is activated by the
         * user. Overrides the superclass implementation by not changing the
         * selection state of the option and not dispatching any SELECTED
         * events, for backwards compatibility with existing uses of this class.
         * @param e Mouse or key event that triggered the action.
         */
        performActionInternal(e: ಠ_ಠ.clutz.goog.events.Event|null): boolean;
    }
}
declare module 'goog:goog.ui.Option' {
    import alias = ಠ_ಠ.clutz.goog.ui.Option;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * A palette is a grid of DOM nodes that the user can highlight or select
     * via the keyboard or the mouse.  The selection state of the palette is
     * controlled an ACTION event.  Event listeners may retrieve the selected
     * item using the
     * {@link #getSelectedItem} or {@link #getSelectedIndex} method.
     *
     * Use this class as the base for components like color palettes or emoticon
     * pickers.  Use {@link #setContent} to set/change the items in the palette
     * after construction.  See palette.html demo for example usage.
     */
    class Palette extends Palette_Instance {}
    class Palette_Instance extends ಠ_ಠ.clutz.goog.ui.Control_Instance {
        /**
         * A palette is a grid of DOM nodes that the user can highlight or
         * select via the keyboard or the mouse.  The selection state of the
         * palette is controlled an ACTION event.  Event listeners may retrieve
         * the selected item using the
         * {@link #getSelectedItem} or {@link #getSelectedIndex} method.
         *
         * Use this class as the base for components like color palettes or
         * emoticon pickers.  Use {@link #setContent} to set/change the items in
         * the palette after construction.  See palette.html demo for example
         * usage.
         * @param items Array of DOM nodes to be displayed as items in the
         * palette grid (limited to one per cell).
         * @param opt_renderer Renderer used to render or decorate the palette;
         * defaults to {@link goog.ui.PaletteRenderer}.
         * @param opt_domHelper Optional DOM helper, used for document
         * interaction.
         */
        constructor(
            items: (Node|null)[]|null,
            opt_renderer?: ಠ_ಠ.clutz.goog.ui.PaletteRenderer|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        disposeInternal(): void;
        /**
         * Overrides {@link goog.ui.Control#getCaption} to return the empty
         * string, since palettes don't have text captions.
         */
        getCaption(): string;
        /**
         * Returns the 0-based index of the currently highlighted palette item,
         * or -1 if no item is highlighted.
         */
        getHighlightedIndex(): number;
        /**
         * Returns the currently highlighted palette item, or null if no item is
         * highlighted.
         */
        getHighlightedItem(): Node|null;
        /**
         * Returns the 0-based index of the currently selected palette item, or
         * -1 if no item is selected.
         */
        getSelectedIndex(): number;
        /**
         * Returns the currently selected palette item, or null if no item is
         * selected.
         */
        getSelectedItem(): Node|null;
        /**
         * Returns the size of the palette grid.
         */
        getSize(): ಠ_ಠ.clutz.goog.math.Size|null;
        /**
         * Handles keyboard events dispatched while the palette has focus.
         * Moves the highlight on arrow keys, and selects the highlighted item
         * on Enter or Space. Returns true if the event was handled, false
         * otherwise.  In particular, if the user attempts to navigate out of
         * the grid, the highlight isn't changed, and this method returns false;
         * it is then up to the parent component to handle the event (e.g. by
         * wrapping the highlight around).  Overrides {@link
         * goog.ui.Control#handleKeyEvent}.
         * @param e Key event to handle.
         */
        handleKeyEvent(e: ಠ_ಠ.clutz.goog.events.KeyEvent|null): boolean;
        /**
         * Handles mousedown events.  Overrides {@link
         * goog.ui.Control#handleMouseDown} by ensuring that the item on which
         * the user moused down is highlighted.
         * @param e Mouse event to handle.
         */
        handleMouseDown(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Handles mouseover events.  Overrides {@link
         * goog.ui.Control#handleMouseOver} by determining which palette item
         * (if any) was moused over, highlighting it, and un-highlighting any
         * previously-highlighted item.
         * @param e Mouse event to handle.
         */
        handleMouseOver(e: ಠ_ಠ.clutz.goog.events.BrowserEvent|null): void;
        /**
         * Handles selection change events dispatched by the selection model.
         * @param e Selection event to handle.
         */
        handleSelectionChange(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Selects the currently highlighted palette item (triggered by mouseup
         * or by keyboard action).  Overrides {@link
         * goog.ui.Control#performActionInternal} by selecting the highlighted
         * item and dispatching an ACTION event.
         * @param e Mouse or key event that triggered the action.
         */
        performActionInternal(e: ಠ_ಠ.clutz.goog.events.Event|null): boolean;
        /**
         * Overrides {@link goog.ui.Control#setCaption} to be a no-op, since
         * palettes don't have text captions.
         * @param caption Ignored.
         */
        setCaption(caption: string): void;
        /**
         * Overrides {@link goog.ui.Control#setContentInternal} by also updating
         * the grid size and the selection model.  Considered protected.
         * @param content Array of DOM nodes to be displayed as items in the
         * palette grid (one item per cell).
         */
        setContentInternal(content: string|Node|null|Node[]|
                           NodeListOf<Node>): void;
        setHighlighted(highlight: boolean): void;
        /**
         * Highlights the item at the given 0-based index, or removes the
         * highlight if the argument is -1 or out of range.  Any
         * previously-highlighted item will be un-highlighted.
         * @param index 0-based index of the item to highlight.
         */
        setHighlightedIndex(index: number): void;
        /**
         * Highlights the given item, or removes the highlight if the argument
         * is null or invalid.  Any previously-highlighted item will be
         * un-highlighted.
         * @param item Item to highlight.
         */
        setHighlightedItem(item: Node|null|undefined): void;
        /**
         * Selects the item at the given 0-based index, or clears the selection
         * if the argument is -1 or out of range.  Any previously-selected item
         * will be deselected.
         * @param index 0-based index of the item to select.
         */
        setSelectedIndex(index: number): void;
        /**
         * Selects the given item, or clears the selection if the argument is
         * null or invalid.  Any previously-selected item will be deselected.
         * @param item Item to select.
         */
        setSelectedItem(item: Node|null): void;
        /**
         * Sets the size of the palette grid to the given size.  Callers can
         * either pass a single {@link goog.math.Size} or a pair of numbers
         * (first the number of columns, then the number of rows) to this
         * method.  In both cases, the number of rows is optional and will be
         * calculated automatically if needed. It is an error to attempt to
         * change the size of the palette after it has been rendered.
         * @param size Either a size object or the number of columns.
         * @param opt_rows The number of rows (optional).
         */
        setSize(size: ಠ_ಠ.clutz.goog.math.Size|null|number, opt_rows?: number):
            void;
    }
}
declare namespace ಠ_ಠ.clutz.goog.ui.Palette {
    class CurrentCell_ extends CurrentCell__Instance {}
    class CurrentCell__Instance extends ಠ_ಠ.clutz.goog.ui.Control_Instance {
        tryHighlight(highlight: boolean): boolean;
    }
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        AFTER_HIGHLIGHT: EventType,
    };
}
declare module 'goog:goog.ui.Palette' {
    import alias = ಠ_ಠ.clutz.goog.ui.Palette;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Default renderer for {@link goog.ui.Palette}s.  Renders the palette as an
     * HTML table wrapped in a DIV, with one palette item per cell:
     *
     * <div class="goog-palette">
     * <table class="goog-palette-table">
     * <tbody class="goog-palette-body">
     * <tr class="goog-palette-row">
     * <td class="goog-palette-cell">...Item 0...</td>
     * <td class="goog-palette-cell">...Item 1...</td>
     * ...
     * </tr>
     * <tr class="goog-palette-row">
     * ...
     * </tr>
     * </tbody>
     * </table>
     * </div>
     */
    class PaletteRenderer extends PaletteRenderer_Instance {
        /**
         * Default CSS class to be applied to the root element of components
         * rendered by this renderer.
         */
        static CSS_CLASS: string;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.PaletteRenderer;
        static instance_: ಠ_ಠ.clutz.goog.ui.PaletteRenderer;
    }
    class PaletteRenderer_Instance extends
        ಠ_ಠ.clutz.goog.ui.ControlRenderer_Instance {
        /**
         * Overrides {@link goog.ui.ControlRenderer#canDecorate} to always
         * return false.
         * @param element Ignored.
         */
        canDecorate(element: GlobalElement|null): boolean;
        /**
         * Returns a table cell element (or equivalent) that wraps the given
         * palette item (which must be a DOM node).
         * @param node Palette item.
         * @param dom DOM helper for document interaction.
         */
        createCell(
            node: Node|null|string,
            dom: ಠ_ಠ.clutz.goog.dom.DomHelper|null): GlobalElement;
        /**
         * Returns the palette items arranged in a table wrapped in a DIV, with
         * the renderer's own CSS class and additional state-specific classes
         * applied to it.
         * @param palette goog.ui.Palette to render.
         */
        createDom(palette: ಠ_ಠ.clutz.goog.ui.Control|null): GlobalElement;
        /**
         * Returns the given items in a table with {@code size.width} columns
         * and
         * {@code size.height} rows.  If the table is too big, empty cells will
         * be created as needed.  If the table is too small, the items that
         * don't fit will not be rendered.
         * @param items Palette items.
         * @param size Palette size (columns x rows); both dimensions must be
         * specified as numbers.
         * @param dom DOM helper for document interaction.
         */
        createGrid(
            items: (Node|null)[]|null, size: ಠ_ಠ.clutz.goog.math.Size|null,
            dom: ಠ_ಠ.clutz.goog.dom.DomHelper|null): GlobalElement;
        /**
         * Returns a table row element (or equivalent) that wraps the given
         * cells.
         * @param cells Array of cell elements.
         * @param dom DOM helper for document interaction.
         */
        createRow(
            cells: (GlobalElement|null)[]|null,
            dom: ಠ_ಠ.clutz.goog.dom.DomHelper|null): GlobalElement;
        /**
         * Returns a table element (or equivalent) that wraps the given rows.
         * @param rows Array of row elements.
         * @param dom DOM helper for document interaction.
         */
        createTable(
            rows: (GlobalElement|null)[]|null,
            dom: ಠ_ಠ.clutz.goog.dom.DomHelper|null): GlobalElement;
        /**
         * Overrides {@link goog.ui.ControlRenderer#decorate} to be a no-op,
         * since palettes don't support the decorate flow (for now).
         * @param palette Ignored.
         * @param element Ignored.
         */
        decorate(
            palette: ಠ_ಠ.clutz.goog.ui.Control|null,
            element: GlobalElement|null): null;
        getCellForItem(node: Node|null): GlobalElement|null;
        /**
         * Returns the item corresponding to the given node, or null if the node
         * is neither a palette cell nor part of a palette item.
         * @param palette Palette in which to look for the item.
         * @param node Node to look for.
         */
        getContainingItem(
            palette: ಠ_ಠ.clutz.goog.ui.Palette|null, node: Node|null): Node
            |null;
        /**
         * Returns the CSS class to be applied to the root element of components
         * rendered using this renderer.
         */
        getCssClass(): string;
        /**
         * Updates the highlight styling of the palette cell containing the
         * given node based on the value of the Boolean argument.
         * @param palette Palette containing the item.
         * @param node Item whose cell is to be highlighted or un-highlighted.
         * @param highlight If true, the cell is highlighted; otherwise it is
         * un-highlighted.
         */
        highlightCell(
            palette: ಠ_ಠ.clutz.goog.ui.Palette|null, node: Node|null,
            highlight: boolean): void;
        /**
         * Updates the selection styling of the palette cell containing the
         * given node based on the value of the Boolean argument.
         * @param palette Palette containing the item.
         * @param node Item whose cell is to be selected or deselected.
         * @param select If true, the cell is selected; otherwise it is
         * deselected.
         */
        selectCell(
            palette: ಠ_ಠ.clutz.goog.ui.Palette|null, node: Node|null,
            select: boolean): void;
        /**
         * Overrides {@link goog.ui.ControlRenderer#setContent} for palettes.
         * Locates the HTML table representing the palette grid, and replaces
         * the contents of each cell with a new element from the array of nodes
         * passed as the second argument.  If the new content has too many items
         * the table will have more rows added to fit, if there are less items
         * than the table has cells, then the left over cells will be empty.
         * @param element Root element of the palette control.
         * @param content Array of items to replace existing palette items.
         */
        setContent(
            element: GlobalElement|null,
            content: string|Node|null|Node[]|NodeListOf<Node>): void;
    }
}
declare module 'goog:goog.ui.PaletteRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.PaletteRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Plain text spell checker implementation.
     */
    class PlainTextSpellChecker extends PlainTextSpellChecker_Instance {}
    class PlainTextSpellChecker_Instance extends
        ಠ_ಠ.clutz.goog.ui.AbstractSpellChecker_Instance {
        /**
         * Plain text spell checker implementation.
         * @param handler Instance of the SpellCheckHandler support object to
         * use. A single instance can be shared by multiple editor components.
         * @param opt_domHelper Optional DOM helper.
         */
        constructor(
            handler: ಠ_ಠ.clutz.goog.spell.SpellCheck|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * Checks spelling for all text and displays correction UI.
         */
        check(): void;
        /**
         * Class name for corrected words.
         */
        correctedWordClassName: string;
        /**
         * Class name for correction pane.
         */
        correctionPaneClassName: string;
        /**
         * Creates the initial DOM representation for the component.
         */
        createDom(): void;
        disposeInternal(): void;
        enterDocument(): void;
        exitDocument(): void;
        /**
         * Returns desired element properties for the specified status.
         * @param status Status of word.
         */
        getElementProperties(
            status: ಠ_ಠ.clutz.goog.spell.SpellCheck.WordStatus): GlobalObject;
        /**
         * Handles key down for overlay.
         * @param e The browser event.
         */
        handleOverlayKeyEvent(e: ಠ_ಠ.clutz.goog.events.BrowserEvent|
                              null): boolean;
        /**
         * Initializes suggestions menu. Populates menu with separator and
         * ignore option that are always valid. Suggestions are later added
         * above the separator.
         */
        initSuggestionsMenu(): void;
        /**
         * Class name for invalid words.
         */
        invalidWordClassName: string;
        /**
         * Handles correction menu actions.
         * @param event Action event.
         */
        onCorrectionAction(event: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Processes range of text - recognized words and separators.
         * @param node Node containing separator.
         * @param text text to process.
         */
        processRange(node: Node|null, text: string): any;
        /**
         * Processes word.
         * @param node Node containing word.
         * @param word Word to process.
         * @param status Status of word.
         */
        processWord(
            node: Node|null, word: string,
            status: ಠ_ಠ.clutz.goog.spell.SpellCheck.WordStatus): any;
        /**
         * Hides correction UI.
         */
        resume(): void;
    }
}
declare module 'goog:goog.ui.PlainTextSpellChecker' {
    import alias = ಠ_ಠ.clutz.goog.ui.PlainTextSpellChecker;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * The Popup class provides functionality for displaying an absolutely
     * positioned element at a particular location in the window. It's designed
     * to be used as the foundation for building controls like a menu or
     * tooltip. The Popup class includes functionality for displaying a Popup
     * near adjacent to an anchor element.
     *
     * This works cross browser and thus does not use IE's createPopup feature
     * which supports extending outside the edge of the brower window.
     */
    class Popup extends Popup_Instance {}
    class Popup_Instance extends ಠ_ಠ.clutz.goog.ui.PopupBase_Instance {
        /**
         * The Popup class provides functionality for displaying an absolutely
         * positioned element at a particular location in the window. It's
         * designed to be used as the foundation for building controls like a
         * menu or tooltip. The Popup class includes functionality for
         * displaying a Popup near adjacent to an anchor element.
         *
         * This works cross browser and thus does not use IE's createPopup
         * feature which supports extending outside the edge of the brower
         * window.
         * @param opt_element A DOM element for the popup.
         * @param opt_position A positioning helper object.
         */
        constructor(
            opt_element?: GlobalElement|null,
            opt_position?: ಠ_ಠ.clutz.goog.positioning.AbstractPosition|null);
        /**
         * Returns the margin to place around the popup.
         */
        getMargin(): ಠ_ಠ.clutz.goog.math.Box|null;
        /**
         * Returns the corner of the popup to used in the positioning algorithm.
         */
        getPinnedCorner(): ಠ_ಠ.clutz.goog.positioning.Corner;
        getPosition(): ಠ_ಠ.clutz.goog.positioning.AbstractPosition|null;
        /**
         * Repositions the popup according to the current state.
         */
        reposition(): void;
        /**
         * Sets the margin to place around the popup.
         * @param arg1 Top value or Box.
         * @param opt_arg2 Right value.
         * @param opt_arg3 Bottom value.
         * @param opt_arg4 Left value.
         */
        setMargin(
            arg1: ಠ_ಠ.clutz.goog.math.Box|null|number, opt_arg2?: number,
            opt_arg3?: number, opt_arg4?: number): void;
        /**
         * Sets the corner of the popup to used in the positioning algorithm.
         * @param corner The popup corner used for positioning.
         */
        setPinnedCorner(corner: ಠ_ಠ.clutz.goog.positioning.Corner): void;
        /**
         * Sets the position helper object associated with the popup.
         * @param position A position helper object.
         */
        setPosition(position: ಠ_ಠ.clutz.goog.positioning.AbstractPosition|
                    null): void;
    }
}
declare module 'goog:goog.ui.Popup' {
    import alias = ಠ_ಠ.clutz.goog.ui.Popup;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * The PopupBase class provides functionality for showing and hiding a
     * generic container element. It also provides the option for hiding the
     * popup element if the user clicks outside the popup or the popup loses
     * focus.
     */
    class PopupBase extends PopupBase_Instance {
        /**
         * A time in ms used to debounce events that happen right after each
         * other.
         *
         * A note about why this is necessary. There are two cases to consider.
         * First case, a popup will usually see a focus event right after it's
         * launched because it's typical for it to be launched in a mouse-down
         * event which will then move focus to the launching button. We don't
         * want to think this is a separate user action moving focus. Second
         * case, a user clicks on the launcher button to close the menu. In that
         * case, we'll close the menu in the focus event and then show it again
         * because of the mouse down event, even though the intention is to just
         * close the menu. This workaround appears to be the least intrusive
         * fix.
         */
        static DEBOUNCE_DELAY_MS: number;
    }
    class PopupBase_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * The PopupBase class provides functionality for showing and hiding a
         * generic container element. It also provides the option for hiding the
         * popup element if the user clicks outside the popup or the popup loses
         * focus.
         * @param opt_element A DOM element for the popup.
         * @param opt_type Type of popup.
         */
        constructor(
            opt_element?: GlobalElement|null,
            opt_type?: ಠ_ಠ.clutz.goog.ui.PopupBase.Type);
        /**
         * Mouse events that occur within an autoHide partner will not hide a
         * popup set to autoHide.
         * @param partner The auto hide partner element.
         */
        addAutoHidePartner(partner: GlobalElement): void;
        disposeInternal(): void;
        /**
         * Returns whether the Popup dismisses itself when the user clicks
         * outside of it.
         */
        getAutoHide(): boolean;
        /**
         * Returns the region inside which the Popup dismisses itself when the
         * user clicks, or null if it's the entire document.
         */
        getAutoHideRegion(): GlobalElement|null;
        /**
         * Returns the dom element that should be used for the popup.
         */
        getElement(): GlobalElement|null;
        getEnableCrossIframeDismissal(): boolean;
        /**
         * Returns the event handler for the popup. All event listeners
         * belonging to this handler are removed when the tooltip is hidden.
         * Therefore, the recommended usage of this handler is to listen on
         * events in
         * {@link #onShow}.
         */
        getHandler(): ಠ_ಠ.clutz.goog.events.EventHandler<this>|null;
        getHideOnEscape(): boolean;
        /**
         * Returns the time when the popup was last hidden.
         */
        getLastHideTime(): number;
        /**
         * Returns the time when the popup was last shown.
         */
        getLastShowTime(): number;
        getType(): ಠ_ಠ.clutz.goog.ui.PopupBase.Type;
        /**
         * Hides the popup element.
         */
        hidePopupElement(): void;
        /**
         * Returns whether the popup is currently visible or was visible within
         * about 150 ms ago. This is used by clients to handle a very specific,
         * but common, popup scenario. The button that launches the popup should
         * close the popup on mouse down if the popup is alrady open. The
         * problem is that the popup closes itself during the capture phase of
         * the mouse down and thus the button thinks it's hidden and this should
         * show it again. This method provides a good heuristic for clients.
         * Typically in their event handler they will have code that is:
         *
         * if (menu.isOrWasRecentlyVisible()) {
         * menu.setVisible(false);
         * } else {
         * ... // code to position menu and initialize other state
         * menu.setVisible(true);
         * }
         */
        isOrWasRecentlyVisible(): boolean;
        /**
         * Returns whether the popup is currently visible.
         */
        isVisible(): boolean;
        /**
         * Called before the popup is hidden. Derived classes can override to
         * hook this event but should make sure to call the parent class method.
         * @param opt_target Target of the event causing the hide.
         */
        onBeforeHide(opt_target?: Node|null): boolean;
        /**
         * Called before the popup is shown. Derived classes can override to
         * hook this event but should make sure to call the parent class method.
         */
        onBeforeShow(): boolean;
        /**
         * Called after the popup is hidden. Derived classes can override to
         * hook this event but should make sure to call the parent class method.
         * @param opt_target Target of the event causing the hide.
         */
        onHide(opt_target?: Node|null): void;
        /**
         * Called after the popup is shown. Derived classes can override to hook
         * this event but should make sure to call the parent class method.
         */
        onShow(): void;
        /**
         * Removes a previously registered auto hide partner.
         * @param partner The auto hide partner element.
         */
        removeAutoHidePartner(partner: GlobalElement): void;
        /**
         * Repositions the popup according to the current state.
         * Should be overriden by subclases.
         */
        reposition(): void;
        /**
         * Sets whether the Popup dismisses itself when the user clicks outside
         * of it.
         * @param autoHide Whether to autohide on an external click.
         */
        setAutoHide(autoHide: boolean): void;
        /**
         * Sets the region inside which the Popup dismisses itself when the user
         * clicks.
         * @param element The DOM element for autohide.
         */
        setAutoHideRegion(element: GlobalElement|null): void;
        /**
         * Specifies the dom element that should be used for the popup.
         * @param elt A DOM element for the popup.
         */
        setElement(elt: GlobalElement|null): void;
        /**
         * Sets whether clicks in other iframes should dismiss this popup.  In
         * some cases it should be disabled, because it can cause spurious
         * @param enable Whether to enable cross iframe dismissal.
         */
        setEnableCrossIframeDismissal(enable: boolean): void;
        /**
         * Sets whether the Popup dismisses itself on the escape key.
         * @param hideOnEscape Whether to autohide on the escape key.
         */
        setHideOnEscape(hideOnEscape: boolean): void;
        /**
         * Sets whether the popup should hide itself asynchronously using a
         * timeout instead of synchronously.
         * @param b Whether to hide async.
         */
        setShouldHideAsync(b: boolean): void;
        /**
         * Sets transition animation on showing and hiding the popup.
         * @param opt_showTransition Transition to play on showing the popup.
         * @param opt_hideTransition Transition to play on hiding the popup.
         */
        setTransition(
            opt_showTransition?: ಠ_ಠ.clutz.goog.fx.Transition|null,
            opt_hideTransition?: ಠ_ಠ.clutz.goog.fx.Transition|null): void;
        /**
         * Specifies the type of popup to use.
         * @param type Type of popup.
         */
        setType(type: ಠ_ಠ.clutz.goog.ui.PopupBase.Type): void;
        /**
         * Sets whether the popup should be visible. After this method
         * returns, isVisible() will always return the new state, even if
         * there is a transition.
         * @param visible Desired visibility state.
         */
        setVisible(visible: boolean): void;
        /**
         * Returns whether the popup should hide itself asynchronously using a
         * timeout instead of synchronously.
         */
        shouldHideAsync(): boolean;
        /**
         * Shows the popup element.
         */
        showPopupElement(): void;
    }
}
declare module 'goog:goog.ui.PopupBase' {
    import alias = ಠ_ಠ.clutz.goog.ui.PopupBase;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.PopupBase {
    /**
     * Constants for event type fired by Popup
     */
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        BEFORE_HIDE: EventType,
        BEFORE_SHOW: EventType,
        HIDE: EventType,
        SHOW: EventType,
    };
}
declare module 'goog:goog.ui.PopupBase.EventType' {
    import alias = ಠ_ಠ.clutz.goog.ui.PopupBase.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.PopupBase {
    /**
     * Constants for type of Popup
     */
    type Type = string&{clutzEnumBrand: never};
    var Type: {
        MOVE_OFFSCREEN: Type,
        TOGGLE_DISPLAY: Type,
    };
}
declare module 'goog:goog.ui.PopupBase.Type' {
    import alias = ಠ_ಠ.clutz.goog.ui.PopupBase.Type;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Popup color picker widget.
     */
    class PopupColorPicker extends PopupColorPicker_Instance {}
    class PopupColorPicker_Instance extends
        ಠ_ಠ.clutz.goog.ui.Component_Instance {
        /**
         * Popup color picker widget.
         * @param opt_domHelper Optional DOM helper.
         * @param opt_colorPicker Optional color picker to use for this popup.
         */
        constructor(
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null,
            opt_colorPicker?: ಠ_ಠ.clutz.goog.ui.ColorPicker|null);
        /**
         * Add an array of colors to the colors displayed by the color picker.
         * Does not add duplicated colors.
         * @param colors The array of colors to be added.
         */
        addColors(colors: string[]|null): void;
        /**
         * Attaches the popup color picker to an element.
         * @param element The element to attach to.
         */
        attach(element: GlobalElement|null): void;
        /**
         * ColorPickers cannot be used to decorate pre-existing html, since the
         * structure they build is fairly complicated.
         * @param element Element to decorate.
         */
        canDecorate(element: GlobalElement|null): boolean;
        /**
         * Clear the colors displayed by the color picker.
         */
        clearColors(): void;
        createDom(): void;
        /**
         * Detatches the popup color picker from an element.
         * @param element The element to detach from.
         */
        detach(element: GlobalElement|null): void;
        disposeInternal(): void;
        getAllowAutoFocus(): boolean;
        /**
         * Returns whether the Popup dismisses itself when the user clicks
         * outside of it.
         */
        getAutoHide(): boolean;
        /**
         * Returns the region inside which the Popup dismisses itself when the
         * user clicks, or null if it was not set. Null indicates the entire
         * document is the autohide region.
         */
        getAutoHideRegion(): GlobalElement|null;
        getColorPicker(): ಠ_ಠ.clutz.goog.ui.ColorPicker|null;
        getLastTarget(): GlobalElement|null;
        /**
         * Returns the {@link goog.ui.PopupBase} from this picker. Returns null
         * if the popup has not yet been created.
         *
         * NOTE: This should *ONLY* be called from tests. If called before
         * createDom(), this should return null.
         */
        getPopup(): ಠ_ಠ.clutz.goog.ui.PopupBase|null;
        getRememberSelection(): boolean;
        /**
         * Gets the color that is currently selected in this color picker.
         */
        getSelectedColor(): string|null;
        /**
         * Gets whether the colorpicker is in toggle mode
         */
        getToggleMode(): boolean;
        /**
         * Sets whether the color picker can automatically move focus to its key
         * event target when it is set to visible.
         * @param allow Whether to allow auto focus.
         */
        setAllowAutoFocus(allow: boolean): void;
        /**
         * Sets whether the Popup dismisses itself when the user clicks outside
         * of it - must be called after the Popup has been created (in
         * createDom()), otherwise it does nothing.
         * @param autoHide Whether to autohide on an external click.
         */
        setAutoHide(autoHide: boolean): void;
        /**
         * Sets the region inside which the Popup dismisses itself when the user
         * clicks - must be called after the Popup has been created (in
         * createDom()), otherwise it does nothing.
         * @param element The DOM element for autohide.
         */
        setAutoHideRegion(element: GlobalElement|null): void;
        /**
         * Sets whether the color picker can accept focus.
         * @param focusable True iff the color picker can accept focus.
         */
        setFocusable(focusable: boolean): void;
        /**
         * Set the pinned corner of the popup.
         * @param corner The corner of the popup which is pinned to the
         * attaching element.
         */
        setPinnedCorner(corner: ಠ_ಠ.clutz.goog.positioning.Corner): void;
        /**
         * Sets which corner of the attaching element this popup shows up.
         * @param corner The corner of the attaching element where to show the
         * popup.
         */
        setPopupCorner(corner: ಠ_ಠ.clutz.goog.positioning.Corner): void;
        /**
         * Sets whether the picker remembers the last selected color between
         * popups.
         * @param remember Whether to remember the selection.
         */
        setRememberSelection(remember: boolean): void;
        /**
         * Sets whether the popup shows up on hover. By default, appears on
         * click.
         * @param showOnHover True if popup should appear on hover.
         */
        setShowOnHover(showOnHover: boolean): void;
        /**
         * Sets whether the color picker should toggle off if it is already
         * open.
         * @param toggle The new toggle mode.
         */
        setToggleMode(toggle: boolean): void;
    }
}
declare module 'goog:goog.ui.PopupColorPicker' {
    import alias = ಠ_ಠ.clutz.goog.ui.PopupColorPicker;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Popup date picker widget. Fires goog.ui.PopupBase.EventType.SHOW or HIDE
     * events when its visibility changes.
     */
    class PopupDatePicker extends PopupDatePicker_Instance {}
    class PopupDatePicker_Instance extends
        ಠ_ಠ.clutz.goog.ui.Component_Instance {
        /**
         * Popup date picker widget. Fires goog.ui.PopupBase.EventType.SHOW or
         * HIDE events when its visibility changes.
         * @param opt_datePicker Optional DatePicker.  This enables the use of a
         * custom date-picker instance.
         * @param opt_domHelper Optional DOM helper.
         */
        constructor(
            opt_datePicker?: ಠ_ಠ.clutz.goog.ui.DatePicker|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * Attaches the popup date picker to an element.
         * @param element The element to attach to.
         */
        attach(element: GlobalElement|null): void;
        /**
         * DatePicker cannot be used to decorate pre-existing html, since
         * they're not based on Components.
         * @param element Element to decorate.
         */
        canDecorate(element: GlobalElement|null): boolean;
        createDom(): void;
        /**
         * Detatches the popup date picker from an element.
         * @param element The element to detach from.
         */
        detach(element: GlobalElement|null): void;
        disposeInternal(): void;
        enterDocument(): void;
        getAllowAutoFocus(): boolean;
        getDate(): ಠ_ಠ.clutz.goog.date.Date|null;
        getDatePicker(): ಠ_ಠ.clutz.goog.ui.DatePicker|null;
        getLastTarget(): GlobalElement|null;
        /**
         * Hides this popup.
         */
        hidePopup(): void;
        isVisible(): boolean;
        /**
         * Sets whether the date picker can automatically move focus to its key
         * event target when it is set to visible.
         * @param allow Whether to allow auto focus.
         */
        setAllowAutoFocus(allow: boolean): void;
        /**
         * Sets the selected date.  See goog.ui.DatePicker.setDate().
         * @param date The date to select.
         */
        setDate(date: ಠ_ಠ.clutz.goog.date.Date|null): void;
        /**
         * Show the popup at the bottom-left corner of the specified element.
         * @param element Reference element for displaying the popup -- popup
         * will appear at the bottom-left corner of this element.
         * @param opt_keepDate Whether to keep the date picker's current date.
         * If false, the date is set to null. Defaults to false.
         */
        showPopup(element: GlobalElement|null, opt_keepDate?: boolean): void;
    }
}
declare module 'goog:goog.ui.PopupDatePicker' {
    import alias = ಠ_ಠ.clutz.goog.ui.PopupDatePicker;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * A basic menu class.
     */
    class PopupMenu extends PopupMenu_Instance {}
    class PopupMenu_Instance extends ಠ_ಠ.clutz.goog.ui.Menu_Instance {
        /**
         * A basic menu class.
         * @param opt_domHelper Optional DOM helper.
         * @param opt_renderer Renderer used to render or decorate the
         * container; defaults to {@link goog.ui.MenuRenderer}.
         */
        constructor(
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null,
            opt_renderer?: ಠ_ಠ.clutz.goog.ui.MenuRenderer|null);
        /**
         * Attaches the menu to a new popup position and anchor element.  A menu
         * can only be attached to an element once, since attaching the same
         * menu for multiple positions doesn't make sense.
         * @param element Element whose click event should trigger the menu.
         * @param opt_targetCorner Corner of the target that the menu should be
         * anchored to.
         * @param opt_menuCorner Corner of the menu that should be anchored.
         * @param opt_contextMenu Whether the menu should show on {@link
         * goog.events.EventType.CONTEXTMENU} events, false if it should show on
         * {@link goog.events.EventType.MOUSEDOWN} events. Default is MOUSEDOWN.
         * @param opt_margin Margin for the popup used in positioning
         * algorithms.
         */
        attach(
            element: GlobalElement|null,
            opt_targetCorner?: ಠ_ಠ.clutz.goog.positioning.Corner|null,
            opt_menuCorner?: ಠ_ಠ.clutz.goog.positioning.Corner,
            opt_contextMenu?: boolean,
            opt_margin?: ಠ_ಠ.clutz.goog.math.Box|null): void;
        /**
         * Creates an object describing how the popup menu should be attached to
         * the anchoring element based on the given parameters. The created
         * object is stored, keyed by {@code element} and is retrievable later
         * by invoking
         * {@link #getAttachTarget(element)} at a later point.
         *
         * Subclass may add more properties to the returned object, as needed.
         * @param element Element whose click event should trigger the menu.
         * @param opt_targetCorner Corner of the target that the menu should be
         * anchored to.
         * @param opt_menuCorner Corner of the menu that should be anchored.
         * @param opt_contextMenu Whether the menu should show on {@link
         * goog.events.EventType.CONTEXTMENU} events, false if it should show on
         * {@link goog.events.EventType.MOUSEDOWN} events. Default is MOUSEDOWN.
         * @param opt_margin Margin for the popup used in positioning
         * algorithms.
         */
        createAttachTarget(
            element: GlobalElement|null,
            opt_targetCorner?: ಠ_ಠ.clutz.goog.positioning.Corner|null,
            opt_menuCorner?: ಠ_ಠ.clutz.goog.positioning.Corner|null,
            opt_contextMenu?: boolean,
            opt_margin?: ಠ_ಠ.clutz.goog.math.Box|null): GlobalObject|null;
        /**
         * Decorate an existing HTML structure with the menu. Menu items will be
         * constructed from elements with classname 'goog-menuitem', separators
         * will be made from HR elements.
         * @param element Element to decorate.
         */
        decorateInternal(element: GlobalElement|null): void;
        /**
         * Detaches a menu from a given element.
         * @param element Element whose click event should trigger the menu.
         */
        detach(element: GlobalElement|null): void;
        /**
         * Detaches all listeners
         */
        detachAll(): void;
        disposeInternal(): void;
        enterDocument(): void;
        /**
         * Returns the object describing how the popup menu should be attach to
         * given element or {@code null}. The object is created and the
         * association is formed when {@link #attach} is invoked.
         * @param element DOM element.
         */
        getAttachTarget(element: GlobalElement|null): GlobalObject|null;
        getAttachedElement(): GlobalElement|null;
        /**
         * Gets whether the menu is in toggle mode
         */
        getToggleMode(): boolean;
        /**
         * Handles the key event target losing focus.
         * @param e The browser event.
         */
        handleBlur(e: ಠ_ಠ.clutz.goog.events.BrowserEvent|null): void;
        /**
         * Hides the menu.
         */
        hide(): void;
        isAttachTarget(element: GlobalElement|null): boolean;
        /**
         * Returns whether the menu is currently visible or was visible within
         * about 150 ms ago.  This stops the menu toggling back on if the
         * toggleMode == false.
         */
        isOrWasRecentlyVisible(): boolean;
        /**
         * Handles click events that propagate to the document.
         * @param e The browser event.
         */
        onDocClick(e: ಠ_ಠ.clutz.goog.events.BrowserEvent): void;
        /**
         * Sets whether the menu should toggle if it is already open.  For
         * context menus this should be false, for toolbar menus it makes more
         * sense to be true.
         * @param toggle The new toggle mode.
         */
        setToggleMode(toggle: boolean): void;
        /**
         * Shows the menu immediately at the given client coordinates.
         * @param x The client-X associated with the show event.
         * @param y The client-Y associated with the show event.
         * @param opt_menuCorner Corner of the menu that should be anchored.
         */
        showAt(
            x: number, y: number,
            opt_menuCorner?: ಠ_ಠ.clutz.goog.positioning.Corner): void;
        /**
         * Shows the menu immediately attached to the given element
         * @param element The element to show at.
         * @param targetCorner The corner of the target to anchor to.
         * @param opt_menuCorner Corner of the menu that should be anchored.
         */
        showAtElement(
            element: GlobalElement|null,
            targetCorner: ಠ_ಠ.clutz.goog.positioning.Corner,
            opt_menuCorner?: ಠ_ಠ.clutz.goog.positioning.Corner): void;
        /**
         * Show the menu at a given attached target.
         * @param target Popup target.
         * @param x The client-X associated with the show event.
         * @param y The client-Y associated with the show event.
         */
        showMenu(target: GlobalObject, x: number, y: number): void;
        /**
         * Show the menu using given positioning object.
         * @param position The positioning instance.
         * @param opt_menuCorner The corner of the menu to be positioned.
         * @param opt_margin A margin specified in pixels.
         * @param opt_anchor The element which acts as visual anchor for this
         * menu.
         */
        showWithPosition(
            position: ಠ_ಠ.clutz.goog.positioning.AbstractPosition|null,
            opt_menuCorner?: ಠ_ಠ.clutz.goog.positioning.Corner,
            opt_margin?: ಠ_ಠ.clutz.goog.math.Box|null,
            opt_anchor?: GlobalElement|null): void;
        /**
         * Used to stop the menu toggling back on if the toggleMode == false.
         */
        wasRecentlyHidden(): boolean;
    }
}
declare module 'goog:goog.ui.PopupMenu' {
    import alias = ಠ_ಠ.clutz.goog.ui.PopupMenu;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * This creates a progress bar object.
     */
    class ProgressBar extends ProgressBar_Instance {}
    class ProgressBar_Instance extends ಠ_ಠ.clutz.goog.ui.Component_Instance {
        /**
         * This creates a progress bar object.
         * @param opt_domHelper Optional DOM helper.
         */
        constructor(opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        thumbElement_: HTMLDivElement|null;
        /**
         * Creates the DOM nodes needed for the progress bar
         */
        createDom(): void;
        /**
         * Decorates an existing HTML DIV element as a progress bar input. If
         * the element contains a child with a class name of
         * 'progress-bar-thumb' that will be used as the thumb.
         * @param element The HTML element to decorate.
         */
        decorateInternal(element: GlobalElement|null): void;
        disposeInternal(): void;
        enterDocument(): void;
        exitDocument(): void;
        getMaximum(): number;
        getMinimum(): number;
        getOrientation(): ಠ_ಠ.clutz.goog.ui.ProgressBar.Orientation;
        getStep(): number|null;
        getValue(): number;
        /**
         * Sets the maximum number
         * @param v The maximum value.
         */
        setMaximum(v: number): void;
        /**
         * Sets the minimum number
         * @param v The minimum value.
         */
        setMinimum(v: number): void;
        /**
         * Changes the orientation
         * @param orient The orientation.
         */
        setOrientation(orient: ಠ_ಠ.clutz.goog.ui.ProgressBar.Orientation): void;
        /**
         * Sets the step value. The step value is used to determine how to round
         * the value.
         * @param step The step size.
         */
        setStep(step: number|null): void;
        /**
         * Sets the value
         * @param v The value.
         */
        setValue(v: number): void;
    }
}
declare module 'goog:goog.ui.ProgressBar' {
    import alias = ಠ_ಠ.clutz.goog.ui.ProgressBar;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.ProgressBar {
    /**
     * Enum for representing the orientation of the progress bar.
     */
    type Orientation = string&{clutzEnumBrand: never};
    var Orientation: {
        HORIZONTAL: Orientation,
        VERTICAL: Orientation,
    };
}
declare module 'goog:goog.ui.ProgressBar.Orientation' {
    import alias = ಠ_ಠ.clutz.goog.ui.ProgressBar.Orientation;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Creates an object that represents a prompt (used in place of javascript's
     * prompt). The html structure of the prompt is the same as the layout for
     * dialog.js except for the addition of a text box which is placed inside
     * the "Content area" and has the default class-name
     * 'modal-dialog-userInput'
     */
    class Prompt extends Prompt_Instance {}
    class Prompt_Instance extends ಠ_ಠ.clutz.goog.ui.Dialog_Instance {
        /**
         * Creates an object that represents a prompt (used in place of
         * javascript's prompt). The html structure of the prompt is the same as
         * the layout for dialog.js except for the addition of a text box which
         * is placed inside the "Content area" and has the default class-name
         * 'modal-dialog-userInput'
         * @param promptTitle The title of the prompt.
         * @param promptBody The body of the prompt. String is treated as plain
         * text and it will be HTML-escaped.
         * @param callback The function to call when the user selects Ok or
         * Cancel. The function should expect a single argument which represents
         * what the user entered into the prompt. If the user presses cancel,
         * the value of the argument will be null.
         * @param opt_defaultValue Optional default value that should be in the
         * text box when the prompt appears.
         * @param opt_class Optional prefix for the classes.
         * @param opt_useIframeForIE For IE, workaround windowed controls
         * z-index issue by using a an iframe instead of a div for bg element.
         * @param opt_domHelper Optional DOM helper; see {@link
         * goog.ui.Component} for semantics.
         */
        constructor(
            promptTitle: string,
            promptBody: string|ಠ_ಠ.clutz.goog.html.SafeHtml,
            callback: (...a: any[]) => any, opt_defaultValue?: string,
            opt_class?: string, opt_useIframeForIE?: boolean,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * Create the initial DOM representation for the prompt.
         */
        createDom(): void;
        disposeInternal(): void;
        enterDocument(): void;
        /**
         * Overrides setFocus to put focus on the input element.
         */
        focus(): void;
        getCols(): number;
        getInputElement(): HTMLInputElement|null|HTMLTextAreaElement;
        getRows(): number;
        /**
         * Set the number of cols in the user input element.
         * @param cols Number of cols for user input element.
         */
        setCols(cols: number): void;
        /**
         * Sets the default value of the prompt when it is displayed.
         * @param defaultValue The default value to display.
         */
        setDefaultValue(defaultValue: string): void;
        /**
         * Sets an input decorator function.  This function will be called in
         * #enterDocument and will be passed the input element.  This is useful
         * for attaching handlers to the input element for specific change
         * events, for example.
         * @param inputDecoratorFn A function to call on the input element on
         * #enterDocument.
         */
        setInputDecoratorFn(inputDecoratorFn: (a: GlobalElement|null) => any):
            void;
        /**
         * Set the number of rows in the user input element.
         * A values of 1 means use an `<input>` element.  If the prompt is
         * already rendered then you cannot change from `<input>` to
         * `<textarea>` or vice versa.
         * @param rows Number of rows for user input element.
         */
        setRows(rows: number): void;
        /**
         * Sets the validation function that takes a string and returns true if
         * the string is accepted, false otherwise.
         * @param fn The validation function to use on user input.
         */
        setValidationFunction(fn: (a: string) => boolean): void;
        /**
         * Causes the prompt to appear, centered on the screen, gives focus
         * to the text box, and selects the text
         * @param visible Whether the dialog should be visible.
         */
        setVisible(visible: boolean): void;
    }
}
declare module 'goog:goog.ui.Prompt' {
    import alias = ಠ_ಠ.clutz.goog.ui.Prompt;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Creates a range model
     */
    class RangeModel extends RangeModel_Instance {}
    class RangeModel_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        getExtent(): number;
        getMaximum(): number;
        getMinimum(): number;
        /**
         * Returns the step value. The step value is used to determine how to
         * round the value.
         */
        getStep(): number|null;
        getValue(): number;
        /**
         * Rounds to the closest step.
         * @param value The number to round.
         */
        roundToStep(value: number): number;
        /**
         * Rounds to the closest step using the minimum value as the base.
         * @param value The number to round.
         */
        roundToStepWithMin(value: number): number;
        /**
         * Sets the extent. The extent is the 'size' of the value.
         * @param extent The new extent.
         */
        setExtent(extent: number): void;
        /**
         * Sets the maximum
         * @param maximum The new maximum.
         */
        setMaximum(maximum: number): void;
        /**
         * Sets the minimum
         * @param minimum The new minimum.
         */
        setMinimum(minimum: number): void;
        /**
         * Sets the model to mute / unmute.
         * @param muteValue Whether or not to mute the range, i.e., suppress any
         * CHANGE events.
         */
        setMute(muteValue: boolean): void;
        /**
         * Sets the step. The step value is used to determine how to round the
         * value.
         * @param step The step size.
         */
        setStep(step: number|null): void;
        /**
         * Sets the value.
         * @param value The new value.
         */
        setValue(value: number): void;
    }
}
declare module 'goog:goog.ui.RangeModel' {
    import alias = ಠ_ಠ.clutz.goog.ui.RangeModel;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * A UI Control used for rating things, i.e. videos on Google Video.
     */
    class Ratings extends Ratings_Instance {
        /**
         * Default CSS class to be applied to the root element of components
         * rendered by this renderer.
         */
        static CSS_CLASS: string;
    }
    class Ratings_Instance extends ಠ_ಠ.clutz.goog.ui.Component_Instance {
        /**
         * A UI Control used for rating things, i.e. videos on Google Video.
         * @param opt_ratings Ratings. Default: [1,2,3,4,5].
         * @param opt_domHelper Optional DOM helper.
         */
        constructor(
            opt_ratings?: string[]|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * Decorate a HTML structure already in the document.  Expects the
         * structure: <pre>
         * - div
         * - select
         * - option 1 #text = 1 star
         * - option 2 #text = 2 stars
         * - option 3 #text = 3 stars
         * - option N (where N is max number of ratings)
         * </pre>
         *
         * The div can contain other elements for graceful degredation, but they
         * will be hidden when the decoration occurs.
         * @param el Div element to decorate.
         */
        decorateInternal(el: GlobalElement|null): void;
        disposeInternal(): void;
        /**
         * Render the rating widget inside the provided element. This will
         * override the current content of the element.
         */
        enterDocument(): void;
        /**
         * Should be called when the widget is removed from the document but may
         * be reused.  This removes all the listeners the widget has attached
         * and destroys the DOM nodes it uses.
         */
        exitDocument(): void;
        /**
         * Returns the attached input or select element to the ratings widget.
         */
        getAttachedFormField(): HTMLSelectElement|null|HTMLInputElement;
        /**
         * Returns the base CSS class used by subcomponents of this component.
         */
        getCssClass(): string;
        /**
         * Returns the index of the currently highlighted rating, -1 if the
         * mouse isn't currently over the widget
         */
        getHighlightedIndex(): number;
        /**
         * Returns the value of the currently highlighted rating, null if the
         * mouse isn't currently over the widget
         */
        getHighlightedValue(): string|null;
        /**
         * Gets the array of ratings that the component
         */
        getRatings(): string[]|null;
        getSelectedIndex(): number;
        /**
         * Returns the rating value of the currently selected rating
         */
        getValue(): string|null;
        isEnabled(): boolean;
        /**
         * Attaches an input or select element to the ratings widget. The value
         * or index of the field will be updated along with the ratings widget.
         * @param field The field to attach to.
         */
        setAttachedFormField(field: HTMLSelectElement|null|
                             HTMLInputElement): void;
        /**
         * Enables or disables the ratings control.
         * @param enable Whether to enable or disable the control.
         */
        setEnabled(enable: boolean): void;
        /**
         * Sets the array of ratings that the comonent
         * @param ratings Array of value to use as ratings.
         */
        setRatings(ratings: string[]|null): void;
        /**
         * Sets the selected index. If the provided index is greater than the
         * number of ratings then the max is set.  0 is the first item, -1 is no
         * selection.
         * @param index The index of the rating to select.
         */
        setSelectedIndex(index: number): void;
    }
}
declare module 'goog:goog.ui.Ratings' {
    import alias = ಠ_ಠ.clutz.goog.ui.Ratings;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.Ratings {
    /**
     * Enums for Ratings event type.
     */
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        CHANGE: EventType,
        HIGHLIGHT: EventType,
        HIGHLIGHT_CHANGE: EventType,
        UNHIGHLIGHT: EventType,
    };
}
declare module 'goog:goog.ui.Ratings.EventType' {
    import alias = ಠ_ಠ.clutz.goog.ui.Ratings.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Rich text spell checker implementation.
     */
    class RichTextSpellChecker extends RichTextSpellChecker_Instance {}
    class RichTextSpellChecker_Instance extends
        ಠ_ಠ.clutz.goog.ui.AbstractSpellChecker_Instance {
        /**
         * Rich text spell checker implementation.
         * @param handler Instance of the SpellCheckHandler support object to
         * use. A single instance can be shared by multiple editor components.
         * @param opt_domHelper Optional DOM helper.
         */
        constructor(
            handler: ಠ_ಠ.clutz.goog.spell.SpellCheck|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        excludeMarker?: string[]|null|string|RegExp;
        /**
         * Checks spelling for all text and displays correction UI.
         */
        check(): void;
        /**
         * Creates the initial DOM representation for the component.
         */
        createDom(): void;
        /**
         * Decorates the element for the UI component.
         * @param element Element to decorate.
         */
        decorateInternal(element: GlobalElement|null): void;
        disposeInternal(): void;
        enterDocument(): void;
        /**
         * Tag name portion of the marker for the text that does not need to be
         * checked for spelling.
         */
        excludeTags: (string|undefined)[]|null;
        focusOnElement(element: GlobalElement|null): void;
        getElementByIndex(id: number): GlobalElement|null;
        /**
         * Returns desired element properties for the specified status.
         * @param status Status of the word.
         */
        getElementProperties(
            status: ಠ_ಠ.clutz.goog.spell.SpellCheck.WordStatus): GlobalObject;
        /**
         * Handles keyboard events inside the editor to allow keyboard
         * navigation between misspelled words and activation of the suggestion
         * menu.
         * @param e the key event.
         */
        handleRootNodeKeyEvent(e: ಠ_ಠ.clutz.goog.events.BrowserEvent|
                               null): boolean;
        initSuggestionsMenu(): void;
        /**
         * CSS Style text for invalid words. As it's set inside the rich edit
         * iframe classes defined in the parent document are not available, thus
         * the style is set inline.
         */
        invalidWordCssText: string;
        /**
         * Returns whether the editor node is an iframe.
         */
        isEditorIframe(): boolean;
        onCorrectionAction(event: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Processes recognized text and separators.
         * @param node Node containing separator.
         * @param text Text to process.
         */
        processRange(node: Node|null, text: string): any;
        /**
         * Processes word.
         * @param node Node containing word.
         * @param word Word to process.
         * @param status Status of the word.
         */
        processWord(
            node: Node|null, word: string,
            status: ಠ_ಠ.clutz.goog.spell.SpellCheck.WordStatus): any;
        /**
         * Hides correction UI.
         */
        resume(): void;
        setExcludeMarker(marker: string[]|null|string|RegExp): void;
        /**
         * Updates or replaces element based on word status.
         * @param el Word element.
         * @param word Word to update status for.
         * @param status Status of word.
         */
        updateElement(
            el: GlobalElement|null, word: string,
            status: ಠ_ಠ.clutz.goog.spell.SpellCheck.WordStatus): void;
        /**
         * Class name for word spans.
         */
        wordClassName: string;
    }
}
declare module 'goog:goog.ui.RichTextSpellChecker' {
    import alias = ಠ_ಠ.clutz.goog.ui.RichTextSpellChecker;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.RoundedPanel {
    /**
     * Factory method that returns an instance of a BaseRoundedPanel.
     * @param radius The radius of the rounded corner(s), in pixels.
     * @param borderWidth The thickness of the border, in pixels.
     * @param borderColor The border color of the panel.
     * @param opt_backgroundColor The background color of the panel.
     * @param opt_corners The corners of the panel to be rounded. Any corners
     * not specified will be rendered as square corners. Will default to all
     * square corners if not specified.
     * @param opt_domHelper The DOM helper object for the document we want to
     * render in.
     */
    function create(
        radius: number, borderWidth: number, borderColor: string,
        opt_backgroundColor?: string, opt_corners?: number,
        opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|
        null): ಠ_ಠ.clutz.goog.ui.BaseRoundedPanel;
}
declare module 'goog:goog.ui.RoundedPanel' {
    import alias = ಠ_ಠ.clutz.goog.ui.RoundedPanel;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.RoundedPanel {
    /**
     * Enum for specifying which corners to render.
     */
    enum Corner {
        ALL,
        BOTTOM,
        BOTTOM_LEFT,
        BOTTOM_RIGHT,
        LEFT,
        NONE,
        RIGHT,
        TOP,
        TOP_LEFT,
        TOP_RIGHT,
    }
}
declare module 'goog:goog.ui.RoundedPanel.Corner' {
    import alias = ಠ_ಠ.clutz.goog.ui.RoundedPanel.Corner;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Rounded corner tab renderer for {@link goog.ui.Tab}s.
     */
    class RoundedTabRenderer extends RoundedTabRenderer_Instance {
        /**
         * Default CSS class to be applied to the root element of components
         * rendered by this renderer.
         */
        static CSS_CLASS: string;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.RoundedTabRenderer;
        static instance_: ಠ_ಠ.clutz.goog.ui.RoundedTabRenderer;
    }
    class RoundedTabRenderer_Instance extends
        ಠ_ಠ.clutz.goog.ui.TabRenderer_Instance {
        /**
         * Creates a table row implementing the tab caption.
         * @param dom DOM helper to use for element construction.
         * @param caption Text caption or DOM structure to display as the tab's
         * caption.
         */
        createCaption(
            dom: ಠ_ಠ.clutz.goog.dom.DomHelper|null,
            caption: string|Node|null|Node[]|NodeListOf<Node>): GlobalElement;
        /**
         * Creates the tab's DOM structure, based on the containing tab bar's
         * location relative to tab contents.  For example, the DOM for a tab in
         * a tab bar located above tab contents would look like this:
         *
         * <div class="goog-rounded-tab" title="...">
         * <table class="goog-rounded-tab-table">
         * <tbody>
         * <tr>
         * <td nowrap>
         * <div class="goog-rounded-tab-outer-edge"></div>
         * <div class="goog-rounded-tab-inner-edge"></div>
         * </td>
         * </tr>
         * <tr>
         * <td nowrap>
         * <div class="goog-rounded-tab-caption">Hello, world</div>
         * </td>
         * </tr>
         * </tbody>
         * </table>
         * </div>
         * @param tab Tab to render.
         */
        createDom(tab: ಠ_ಠ.clutz.goog.ui.Control|null): GlobalElement|null;
        /**
         * Creates a table row implementing a rounded tab edge.
         * @param dom DOM helper to use for element construction.
         * @param isTopEdge Whether to create a top or bottom edge.
         */
        createEdge(dom: ಠ_ಠ.clutz.goog.dom.DomHelper|null, isTopEdge: boolean):
            GlobalElement;
        /**
         * Creates a table implementing a rounded corner tab.
         * @param dom DOM helper to use for element construction.
         * @param caption Text caption or DOM structure to display as the tab's
         * caption.
         * @param location Tab bar location relative to the tab contents.
         */
        createTab(
            dom: ಠ_ಠ.clutz.goog.dom.DomHelper|null,
            caption: string|Node|null|Node[]|NodeListOf<Node>,
            location: ಠ_ಠ.clutz.goog.ui.TabBar.Location): GlobalElement;
        /**
         * Decorates the element with the tab.  Overrides the superclass
         * implementation by wrapping the tab's content in a table that
         * implements rounded corners.
         * @param tab Tab to decorate the element.
         * @param element Element to decorate.
         */
        decorate(
            tab: ಠ_ಠ.clutz.goog.ui.Control|null,
            element: GlobalElement|null): GlobalElement|null;
        getContentElement(element: GlobalElement|null): GlobalElement|null;
        /**
         * Returns the CSS class name to be applied to the root element of all
         * tabs rendered or decorated using this renderer.
         */
        getCssClass(): string;
    }
}
declare module 'goog:goog.ui.RoundedTabRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.RoundedTabRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Creates a ScrollFloater; see file overview for details.
     */
    class ScrollFloater extends ScrollFloater_Instance {}
    class ScrollFloater_Instance extends ಠ_ಠ.clutz.goog.ui.Component_Instance {
        /**
         * Creates a ScrollFloater; see file overview for details.
         * @param opt_parentElement Where to attach the element when it's
         * floating.  Default is the document body.  If the floating element
         * contains form inputs, it will be necessary to attach it to the
         * corresponding form element, or to an element in the DOM subtree under
         * the form element.
         * @param opt_domHelper Optional DOM helper.
         */
        constructor(
            opt_parentElement?: GlobalElement|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * Delegates dom creation to superclass, then constructs and
         * decorates required DOM elements.
         */
        createDom(): void;
        /**
         * Decorates the floated element with the standard ScrollFloater CSS
         * class.
         * @param element The element to decorate.
         */
        decorateInternal(element: GlobalElement|null): void;
        disposeInternal(): void;
        enterDocument(): void;
        isFloating(): boolean;
        isPinned(): boolean;
        isScrollingEnabled(): boolean;
        setContainerElement(container: GlobalElement|null): void;
        /**
         * Sets whether the element should be floated if it scrolls out of view.
         * @param enable Whether floating is enabled for this element.
         */
        setScrollingEnabled(enable: boolean): void;
        setViewportTopOffset(offset: number): void;
        /**
         * Forces the component to update the cached element positions and sizes
         * and to re-evaluate whether the the component should be docked,
         * floated or pinned.
         */
        update(): void;
    }
}
declare module 'goog:goog.ui.ScrollFloater' {
    import alias = ಠ_ಠ.clutz.goog.ui.ScrollFloater;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.ScrollFloater {
    /**
     * Events dispatched by this component.
     */
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        DOCK: EventType,
        FLOAT: EventType,
        PIN: EventType,
    };
}
declare module 'goog:goog.ui.ScrollFloater.EventType' {
    import alias = ಠ_ಠ.clutz.goog.ui.ScrollFloater.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * A selection control.  Extends {@link goog.ui.MenuButton} by composing a
     * menu with a selection model, and automatically updating the button's
     * caption based on the current selection.
     *
     * Select fires the following events:
     * CHANGE - after selection changes.
     */
    class Select extends Select_Instance {}
    class Select_Instance extends ಠ_ಠ.clutz.goog.ui.MenuButton_Instance {
        /**
         * A selection control.  Extends {@link goog.ui.MenuButton} by composing
         * a menu with a selection model, and automatically updating the
         * button's caption based on the current selection.
         *
         * Select fires the following events:
         * CHANGE - after selection changes.
         * @param opt_caption Default caption or existing DOM structure to
         * display as the button's caption when nothing is selected. Defaults to
         * no caption.
         * @param opt_menu Menu containing selection options.
         * @param opt_renderer Renderer used to render or decorate the control;
         * defaults to {@link goog.ui.MenuButtonRenderer}.
         * @param opt_domHelper Optional DOM helper, used for document
         * interaction.
         * @param opt_menuRenderer Renderer used to render or decorate the menu;
         * defaults to {@link goog.ui.MenuRenderer}.
         */
        constructor(
            opt_caption?: string|Node|null|Node[]|NodeListOf<Node>,
            opt_menu?: ಠ_ಠ.clutz.goog.ui.Menu|null,
            opt_renderer?: ಠ_ಠ.clutz.goog.ui.ButtonRenderer|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null,
            opt_menuRenderer?: ಠ_ಠ.clutz.goog.ui.MenuRenderer);
        /**
         * Adds a new menu item at the end of the menu.
         * @param item Menu item to add to the menu.
         */
        addItem(item: ಠ_ಠ.clutz.goog.ui.Control|null): void;
        /**
         * Adds a new menu item at a specific index in the menu.
         * @param item Menu item to add to the menu.
         * @param index Index at which to insert the menu item.
         */
        addItemAt(
            item: ಠ_ಠ.clutz.goog.ui.MenuItem|null|
            ಠ_ಠ.clutz.goog.ui.MenuSeparator,
            index: number): void;
        /**
         * Decorates the given element with this control.  Overrides the
         * superclass implementation by initializing the default caption on the
         * select button.
         * @param element Element to decorate.
         */
        decorateInternal(element: GlobalElement|null): void;
        disposeInternal(): void;
        enterDocument(): void;
        /**
         * Returns the default caption to be shown when no option is selected.
         */
        getDefaultCaption(): string|Node|null|Node[]|NodeListOf<Node>;
        /**
         * Returns the index of the currently selected option.
         */
        getSelectedIndex(): number;
        /**
         * Returns the currently selected option.
         */
        getSelectedItem(): ಠ_ಠ.clutz.goog.ui.MenuItem|null;
        getSelectionModel(): ಠ_ಠ.clutz.goog.ui.SelectionModel|null;
        /**
         * Gets the value associated with the currently selected option (null if
         * none).
         *
         * Note that unlike {@link goog.ui.Button#getValue} which this method
         * overrides, the "value" of a Select instance is the value of its
         * selected menu item, not its own value. This makes a difference
         * because the "value" of a Button is reset to the value of the element
         * it decorates when it's added to the DOM (via ButtonRenderer), whereas
         * the value of the selected item is unaffected. So while setValue() has
         * no effect on a Button before it is added to the DOM, it will make a
         * persistent change to a Select instance (which is consistent with any
         * changes made by {@link goog.ui.Select#setSelectedItem} and
         * {@link goog.ui.Select#setSelectedIndex}).
         */
        getValue(): any;
        /**
         * Handles {@link goog.ui.Component.EventType.ACTION} events dispatched
         * by the menu item clicked by the user.  Updates the selection model,
         * calls the superclass implementation to hide the menu, stops the
         * propagation of the event, and dispatches an ACTION event on behalf of
         * the select control itself.  Overrides {@link
         * goog.ui.MenuButton#handleMenuAction}.
         * @param e Action event to handle.
         */
        handleMenuAction(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Handles {@link goog.events.EventType.SELECT} events raised by the
         * selection model when the selection changes.  Updates the contents of
         * the select button.
         * @param e Selection event to handle.
         */
        handleSelectionChange(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Removes an item from the menu and disposes it.
         * @param item The menu item to remove.
         */
        removeItem(item: ಠ_ಠ.clutz.goog.ui.MenuItem|null|
                   ಠ_ಠ.clutz.goog.ui.MenuSeparator): void;
        /**
         * Removes a menu item at a given index in the menu and disposes it.
         * @param index Index of item.
         */
        removeItemAt(index: number): void;
        /**
         * Sets the default caption to the given string or DOM structure.
         * @param caption Default caption to be shown when no option is
         * selected.
         */
        setDefaultCaption(caption: string|Node|null|Node[]|
                          NodeListOf<Node>): void;
        /**
         * Replaces the menu currently attached to the control (if any) with the
         * given argument, and updates the selection model.  Does nothing if the
         * new menu is the same as the old one.  Overrides {@link
         * goog.ui.MenuButton#setMenu}.
         * @param menu New menu to be attached to the menu button.
         */
        setMenu(menu: ಠ_ಠ.clutz.goog.ui.Menu|null): ಠ_ಠ.clutz.goog.ui.Menu|null
            |undefined;
        /**
         * Opens or closes the menu.  Overrides {@link
         * goog.ui.MenuButton#setOpen} by highlighting the currently selected
         * option on open.
         * @param open Whether to open or close the menu.
         * @param opt_e Mousedown event that caused the menu to be opened.
         */
        setOpen(open: boolean, opt_e?: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Selects the option at the specified index, or clears the selection if
         * the index is out of bounds.
         * @param index Index of the option to be selected.
         */
        setSelectedIndex(index: number): void;
        /**
         * Selects the specified option (assumed to be in the select menu), and
         * deselects the previously selected option, if any.  A null argument
         * clears the selection.
         * @param item Option to be selected (null to clear the selection).
         */
        setSelectedItem(item: ಠ_ಠ.clutz.goog.ui.MenuItem|null): void;
        /**
         * Selects the first option found with an associated value equal to the
         * argument, or clears the selection if no such option is found.  A null
         * argument also clears the selection.  Overrides {@link
         * goog.ui.Button#setValue}.
         * @param value Value of the option to be selected (null to clear the
         * selection).
         */
        setValue(value: any): void;
        /**
         * Updates the caption to be shown in the select button.  If no option
         * is selected and a default caption is set, sets the caption to the
         * default caption; otherwise to the empty string.
         */
        updateCaption(): void;
    }
}
declare module 'goog:goog.ui.Select' {
    import alias = ಠ_ಠ.clutz.goog.ui.Select;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * A selection menu button control.  Extends {@link goog.ui.MenuButton}.
     * Menu contains 'select all' and 'select none' MenuItems for selecting all
     * and no items by default. Other MenuItems can be added by user.
     *
     * The checkbox content fires the action events associated with the 'select
     * all' and 'select none' menu items.
     */
    class SelectionMenuButton extends SelectionMenuButton_Instance {}
    class SelectionMenuButton_Instance extends
        ಠ_ಠ.clutz.goog.ui.MenuButton_Instance {
        /**
         * A selection menu button control.  Extends {@link goog.ui.MenuButton}.
         * Menu contains 'select all' and 'select none' MenuItems for selecting
         * all and no items by default. Other MenuItems can be added by user.
         *
         * The checkbox content fires the action events associated with the
         * 'select all' and 'select none' menu items.
         * @param opt_renderer Renderer used to render or decorate the menu
         * button; defaults to {@link goog.ui.MenuButtonRenderer}.
         * @param opt_itemRenderer Optional menu item renderer.
         * @param opt_domHelper Optional DOM helper, used for document
         * interaction.
         */
        constructor(
            opt_renderer?: ಠ_ಠ.clutz.goog.ui.ButtonRenderer|null,
            opt_itemRenderer?: ಠ_ಠ.clutz.goog.ui.MenuItemRenderer|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * Set up events related to the checkbox.
         */
        addCheckboxEvent(): void;
        /**
         * Creates and adds the checkbox to the button.
         */
        createCheckbox(): void;
        /**
         * Adds the checkbox to the button, and adds 2 items to the menu
         * corresponding to 'select all' and 'select none'.
         */
        createDom(): void;
        decorateInternal(element: GlobalElement|null): void;
        /**
         * Gets the checkbox element. Needed because if decorating html,
         * getContent() may include and comment/text elements in addition to the
         * input element.
         */
        getCheckboxElement(): GlobalElement|null;
        /**
         * Get selection state.
         */
        getSelectionState():
            ಠ_ಠ.clutz.goog.ui.SelectionMenuButton.SelectionState;
        /**
         * Checkbox click handler.
         * @param e Checkbox click event.
         */
        handleCheckboxClick(e: ಠ_ಠ.clutz.goog.events.BrowserEvent|null): void;
        handleMouseDown(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Select button state
         */
        selectionState: ಠ_ಠ.clutz.goog.ui.SelectionMenuButton.SelectionState;
        /**
         * Enables the embedded checkbox.
         * @param enable Whether to enable or disable the checkbox.
         */
        setCheckboxEnabled(enable: boolean): void;
        /**
         * Enables button and embedded checkbox.
         * @param enable Whether to enable or disable the button.
         */
        setEnabled(enable: boolean): void;
        setMenu(menu: ಠ_ಠ.clutz.goog.ui.Menu|null): ಠ_ಠ.clutz.goog.ui.Menu|null
            |undefined;
        /**
         * Set selection state and update checkbox.
         * @param state Selection state.
         */
        setSelectionState(
            state: ಠ_ಠ.clutz.goog.ui.SelectionMenuButton.SelectionState): void;
    }
}
declare module 'goog:goog.ui.SelectionMenuButton' {
    import alias = ಠ_ಠ.clutz.goog.ui.SelectionMenuButton;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.SelectionMenuButton {
    /**
     * Constants for menu action types.
     */
    enum SelectionState {
        ALL,
        NONE,
        SOME,
    }
}
declare module 'goog:goog.ui.SelectionMenuButton.SelectionState' {
    import alias = ಠ_ಠ.clutz.goog.ui.SelectionMenuButton.SelectionState;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Single-selection model.  Dispatches a {@link
     * goog.events.EventType.SELECT} event when a selection is made.
     */
    class SelectionModel extends SelectionModel_Instance {}
    class SelectionModel_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * Single-selection model.  Dispatches a {@link
         * goog.events.EventType.SELECT} event when a selection is made.
         * @param opt_items Array of items; defaults to empty.
         */
        constructor(opt_items?: (GlobalObject|null)[]|null);
        /**
         * Adds an item at the end of the list.
         * @param item Item to add.
         */
        addItem(item: GlobalObject|null): void;
        /**
         * Adds an item at the given index.
         * @param item Item to add.
         * @param index Index at which to add the new item.
         */
        addItemAt(item: GlobalObject|null, index: number): void;
        /**
         * Bulk-adds items to the selection model.  This is more efficient than
         * calling
         * {@link #addItem} for each new item.
         * @param items New items to add.
         */
        addItems(items: (GlobalObject|null)[]|null|undefined): void;
        /**
         * Clears the selection model by removing all items from the selection.
         */
        clear(): void;
        disposeInternal(): void;
        getFirst(): GlobalObject|null|undefined;
        /**
         * Returns the item at the given 0-based index.
         * @param index Index of the item to return.
         */
        getItemAt(index: number): GlobalObject|null;
        /**
         * Returns the number of items controlled by the selection model.
         */
        getItemCount(): number;
        getItems(): (GlobalObject|null)[];
        getLast(): GlobalObject|null|undefined;
        getSelectedIndex(): number;
        getSelectedItem(): GlobalObject|null;
        /**
         * Returns the selection handler function used by the selection model to
         * change the internal selection state of items under its control.
         */
        getSelectionHandler(): (...a: any[]) => any;
        /**
         * Returns the 0-based index of the given item within the selection
         * model, or -1 if no such item is found.
         * @param item Item to look for.
         */
        indexOfItem(item: GlobalObject|null|undefined): number;
        /**
         * Removes the given item (if it exists).  Dispatches a {@code SELECT}
         * event if the removed item was the currently selected item.
         * @param item Item to remove.
         */
        removeItem(item: GlobalObject|null): void;
        /**
         * Removes the item at the given index.
         * @param index Index of the item to remove.
         */
        removeItemAt(index: number): void;
        /**
         * Selects the item at the given index, deselecting any previously
         * selected item, and dispatches a {@code SELECT} event.
         * @param index Index to select (-1 to clear the selection).
         */
        setSelectedIndex(index: number): void;
        /**
         * Selects the given item, deselecting any previously selected item, and
         * dispatches a {@code SELECT} event.
         * @param item Item to select (null to clear the selection).
         */
        setSelectedItem(item: GlobalObject|null): void;
        /**
         * Sets the selection handler function to be used by the selection model
         * to change the internal selection state of items under its control.
         * The function must take two arguments:  an item and a Boolean to
         * indicate whether the item is to be selected or deselected.  Selection
         * handler functions are only needed if the items in the selection model
         * don't natively support the
         * {@code setSelected(Boolean)} interface.
         * @param handler Selection handler function.
         */
        setSelectionHandler(handler: (...a: any[]) => any): void;
    }
}
declare module 'goog:goog.ui.SelectionModel' {
    import alias = ಠ_ಠ.clutz.goog.ui.SelectionModel;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Class representing a separator.  Although it extends {@link
     * goog.ui.Control}, the Separator class doesn't allocate any event
     * handlers, nor does it change its appearance on mouseover, etc.
     */
    class Separator extends Separator_Instance {}
    class Separator_Instance extends ಠ_ಠ.clutz.goog.ui.Control_Instance {
        /**
         * Class representing a separator.  Although it extends {@link
         * goog.ui.Control}, the Separator class doesn't allocate any event
         * handlers, nor does it change its appearance on mouseover, etc.
         * @param opt_renderer Renderer to render or decorate the separator;
         * defaults to {@link goog.ui.MenuSeparatorRenderer}.
         * @param opt_domHelper Optional DOM helper, used for document
         * interaction.
         */
        constructor(
            opt_renderer?: ಠ_ಠ.clutz.goog.ui.MenuSeparatorRenderer|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * Configures the component after its DOM has been rendered.  Overrides
         * {@link goog.ui.Control#enterDocument} by making sure no event handler
         * is allocated.
         */
        enterDocument(): void;
    }
}
declare module 'goog:goog.ui.Separator' {
    import alias = ಠ_ಠ.clutz.goog.ui.Separator;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Will construct a chart using Google's chartserver.
     */
    class ServerChart extends ServerChart_Instance {
        /**
         * Base HTTPS URI for the chart renderer.
         */
        static CHART_SERVER_HTTPS_URI: string;
        /**
         * Base HTTP URI for the chart renderer.
         */
        static CHART_SERVER_HTTP_URI: string;
        /**
         * Base scheme-independent URI for the chart renderer.
         */
        static CHART_SERVER_SCHEME_INDEPENDENT_URI: string;
        /**
         * Base URI for the chart renderer.
         */
        static CHART_SERVER_URI: string;
        /**
         * Array of possible ChartServer data values
         */
        static CHART_VALUES: string;
        /**
         * Array of extended ChartServer data values
         */
        static CHART_VALUES_EXTENDED: string;
        /**
         * The 0 - 1.0 ("fraction of the range") value to use when getMinValue()
         * == getMaxValue(). This determines, for example, the vertical position
         * of the line in a flat line-chart.
         */
        static DEFAULT_NORMALIZATION: number;
        /**
         * Upper bound for extended values
         */
        static EXTENDED_UPPER_BOUND: number;
    }
    class ServerChart_Instance extends ಠ_ಠ.clutz.goog.ui.Component_Instance {
        /**
         * Will construct a chart using Google's chartserver.
         * @param type The chart type.
         * @param opt_width The width of the chart.
         * @param opt_height The height of the chart.
         * @param opt_domHelper Optional DOM Helper.
         * @param opt_uri Optional uri used to connect to the chart server, if
         * different than
         * goog.ui.ServerChart.CHART_SERVER_SCHEME_INDEPENDENT_URI.
         */
        constructor(
            type: ಠ_ಠ.clutz.goog.ui.ServerChart.ChartType, opt_width?: number,
            opt_height?: number,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null,
            opt_uri?: string);
        /**
         * Adds a data set.
         * NOTE: The color string should NOT have a '#' at the beginning of it.
         * @param data An array of numbers (values can be NaN or null).
         * @param color The hex value for this data set's color.
         * @param opt_legendText The legend text, if any, for this data series.
         * NOTE: If specified, all previously added data sets must also have a
         * legend text.
         */
        addDataSet(
            data: (number|null)[]|null, color: string,
            opt_legendText?: string): void;
        /**
         * Adds a multi-axis to the chart, and sets its type. Multiple axes of
         * the same type can be added.
         * @param axisType The desired axis type.
         */
        addMultiAxis(axisType: ಠ_ಠ.clutz.goog.ui.ServerChart.MultiAxisType):
            number;
        /**
         * Clears the data sets from the graph. All data, including the colors
         * and legend text, is cleared.
         */
        clearDataSets(): void;
        /**
         * Creates the DOM node (image) needed for the Chart
         */
        createDom(): void;
        /**
         * Decorate an image already in the DOM.
         * Expects the following structure:
         * <pre>
         * - img
         * </pre>
         * @param img Image to decorate.
         */
        decorateInternal(img: GlobalElement|null): void;
        disposeInternal(): void;
        /**
         * Returns the background fill.
         */
        getBackgroundFill(): (GlobalObject|null)[];
        /**
         * Returns the given data set or all of them in a two-dimensional array
         * if the set number is not given.
         * @param opt_setNumber Optional data set number to get.
         */
        getData(opt_setNumber?: number): any[]|null;
        /**
         * Gets the encoding type.
         */
        getEncodingType(): ಠ_ಠ.clutz.goog.ui.ServerChart.EncodingType;
        /**
         * Returns the 'chg' parameter of the chart Uri.
         * This is used by various types of charts to specify Grids.
         */
        getGridParameter(): string|undefined;
        getGridX(): number;
        getGridY(): number;
        getLeftLabels(): string[]|null;
        /**
         * Returns the position relative to the chart where the legend is to be
         * displayed.
         */
        getLegendPosition(): ಠ_ಠ.clutz.goog.ui.ServerChart.LegendPosition;
        /**
         * Returns the 'chm' parameter of the chart Uri.
         * This is used by various types of charts to specify Markers.
         */
        getMarkerParameter(): string|undefined;
        getMaxValue(): number;
        getMinValue(): number;
        /**
         * Returns the 'chp' parameter of the chart Uri.
         * This is used by various types of charts to specify certain options.
         * e.g., finance charts use this to designate which line is the 0 axis.
         */
        getMiscParameter(): string|undefined;
        /**
         * Returns the label positions for a given axis number, or all of them
         * in a two-dimensional array if the axis number is not given.
         * @param opt_axisNumber The axis index, as returned by addMultiAxis.
         */
        getMultiAxisLabelPosition(opt_axisNumber?: number): GlobalObject|null;
        /**
         * Returns the label style for a given axis number as a one- to
         * three-element array, or all of them in a two-dimensional array if the
         * axis number is not given.
         * @param opt_axisNumber The axis index, as returned by addMultiAxis.
         */
        getMultiAxisLabelStyle(opt_axisNumber?: number): GlobalObject|null;
        /**
         * Returns the label text, or all of them in a two-dimensional array if
         * the axis number is not given.
         * @param opt_axisNumber The axis index, as returned by addMultiAxis.
         */
        getMultiAxisLabelText(opt_axisNumber?: number): GlobalObject|null;
        /**
         * Returns the label range for a given axis number as a two-element
         * array of (range start, range end), or all of them in a
         * two-dimensional array if the axis number is not given.
         * @param opt_axisNumber The axis index, as returned by addMultiAxis.
         */
        getMultiAxisRange(opt_axisNumber?: number): GlobalObject|null;
        /**
         * Returns the axis type for the given axis, or all of them in an array
         * if the axis number is not given.
         * @param opt_axisNumber The axis index, as returned by addMultiAxis.
         */
        getMultiAxisType(opt_axisNumber?: number):
            ಠ_ಠ.clutz.goog.ui.ServerChart.MultiAxisType
            |ಠ_ಠ.clutz.goog.ui.ServerChart.MultiAxisType[]|null;
        /**
         * Returns the number of "visible" data sets. All data sets that come
         * after the visible data set are not drawn as part of the chart.
         * Instead, they are available for positioning markers.
         */
        getNumVisibleDataSets(): number|null;
        getRightLabels(): string[]|null;
        /**
         * Returns the chart size.
         */
        getSize(): string[];
        getTitleColor(): string;
        getTitleSize(): number;
        /**
         * Returns the chart type.
         */
        getType(): ಠ_ಠ.clutz.goog.ui.ServerChart.ChartType;
        /**
         * Returns the URI of the chart.
         */
        getUri(): ಠ_ಠ.clutz.goog.Uri|null;
        /**
         * Returns the upper limit on the length of the chart image URI, after
         * encoding. If the URI's length equals or exceeds it,
         * goog.ui.ServerChart.UriTooLongEvent is dispatched on the
         * goog.ui.ServerChart object.
         */
        getUriLengthLimit(): number;
        getXLabels(): string[]|null;
        isBarChart(): boolean;
        isGroupedBarChart(): boolean;
        isHorizontalBarChart(): boolean;
        isLineChart(): boolean;
        isMap(): boolean;
        isPieChart(): boolean;
        isStackedBarChart(): boolean;
        isVerticalBarChart(): boolean;
        /**
         * Removes the given ChartServer parameter.
         * @param key The ChartServer parameter to remove.
         */
        removeParameter(key: ಠ_ಠ.clutz.goog.ui.ServerChart.UriParam): void;
        /**
         * Specifies that the bar width in a bar chart should be calculated
         * automatically given the space available in the chart, while
         * optionally setting the spaces between the bars. NOTE: If the space
         * between groups is specified but the space between bars is left
         * undefined, the space between groups will be interpreted as the space
         * between bars because this is the behavior exposed in the external
         * developers guide.
         * @param opt_spaceBars The width of the space between bars in a group
         * in pixels.
         * @param opt_spaceGroups The width of the space between groups.
         */
        setAutomaticBarWidth(opt_spaceBars?: number, opt_spaceGroups?: number):
            void;
        /**
         * Sets the background fill.
         * @param fill An array of background fill specification objects. Each
         * object may have the following properties: {string} area The area to
         * fill, either 'bg' for background or 'c' for chart area.  The default
         * is 'bg'. {string} color (required) The color of the background fill.
         * // TODO(user): Add support for gradient/stripes, which requires // a
         * different object structure.
         */
        setBackgroundFill(fill: (GlobalObject|null)[]|null): void;
        /**
         * Sets the widths of the bars and the spaces between the bars in a bar
         * chart.
         * NOTE: If the space between groups is specified but the space between
         * bars is left undefined, the space between groups will be interpreted
         * as the space between bars because this is the behavior exposed
         * in the external developers guide.
         * @param barWidth The width of a bar in pixels.
         * @param opt_spaceBars The width of the space between bars in a group
         * in pixels.
         * @param opt_spaceGroups The width of the space between groups.
         */
        setBarSpaceWidths(
            barWidth: number, opt_spaceBars?: number,
            opt_spaceGroups?: number): void;
        /**
         * Sets the data scaling.
         * NOTE: This also changes the encoding type because data scaling will
         * only work with {@code goog.ui.ServerChart.EncodingType.TEXT}
         * encoding.
         * @param minimum The lowest number to apply to the data.
         * @param maximum The highest number to apply to the data.
         */
        setDataScaling(minimum: number, maximum: number): void;
        /**
         * Sets the encoding type.
         * @param type Desired data encoding type.
         */
        setEncodingType(type: ಠ_ಠ.clutz.goog.ui.ServerChart.EncodingType): void;
        /**
         * Sets the 'chg' parameter of the chart Uri.
         * This is used by various types of charts to specify Grids.
         * @param value Value for the 'chg' parameter in the chart Uri.
         */
        setGridParameter(value: string): void;
        /**
         * Sets the number of grid lines along the X-axis.
         * @param gridlines The number of X-axis grid lines.
         */
        setGridX(gridlines: number): void;
        /**
         * Sets the number of grid lines along the Y-axis.
         * @param gridlines The number of Y-axis grid lines.
         */
        setGridY(gridlines: number): void;
        /**
         * Sets the Left Labels for the chart.
         * NOTE: The array should start with the lowest value, and then
         * move progessively up the axis. So if you want labels
         * from 0 to 100 with 0 at bottom of the graph, then you would
         * want to pass something like [0,25,50,75,100].
         * @param labels The Left Labels for the chart.
         */
        setLeftLabels(labels: string[]|null): void;
        /**
         * Adds a legend to the chart.
         * @param legend The legend to add.
         */
        setLegend(legend: string[]|null): void;
        /**
         * Sets the position relative to the chart where the legend is to be
         * displayed.
         * @param value Legend position.
         */
        setLegendPosition(value: ಠ_ಠ.clutz.goog.ui.ServerChart.LegendPosition):
            void;
        /**
         * Sets the chart margins.
         * @param leftMargin The size in pixels of the left margin.
         * @param rightMargin The size in pixels of the right margin.
         * @param topMargin The size in pixels of the top margin.
         * @param bottomMargin The size in pixels of the bottom margin.
         */
        setMargins(
            leftMargin: number, rightMargin: number, topMargin: number,
            bottomMargin: number): void;
        /**
         * Sets the 'chm' parameter of the chart Uri.
         * This is used by various types of charts to specify Markers.
         * @param value Value for the 'chm' parameter in the chart Uri.
         */
        setMarkerParameter(value: string): void;
        /**
         * Sets the maximum value of the chart.
         * @param maxValue The maximum value of the chart.
         */
        setMaxValue(maxValue: number): void;
        /**
         * Sets the minimum value of the chart.
         * @param minValue The minimum value of the chart.
         */
        setMinValue(minValue: number): void;
        /**
         * Sets the 'chp' parameter of the chart Uri.
         * This is used by various types of charts to specify certain options.
         * e.g., finance charts use this to designate which line is the 0 axis.
         * @param value Value for the 'chp' parameter in the chart Uri.
         */
        setMiscParameter(value: string|number): void;
        /**
         * Sets the label positions for a given axis, overwriting any existing
         * values. The label positions are assumed to be floating-point numbers
         * within the range of the axis.
         * @param axisNumber The axis index, as returned by addMultiAxis.
         * @param labelPosition The actual label positions to be added.
         */
        setMultiAxisLabelPosition(
            axisNumber: number,
            labelPosition: ಠ_ಠ.clutz.goog.vec.Number|null): void;
        /**
         * Sets the label style for a given axis, overwriting any existing
         * style. The default style is as follows: Default is x-axis labels are
         * centered, left hand y-axis labels are right aligned, right hand
         * y-axis labels are left aligned. The font size and alignment are
         * optional parameters.
         *
         * NOTE: The color string should NOT have a '#' at the beginning of it.
         * @param axisNumber The axis index, as returned by addMultiAxis.
         * @param color The hex value for this label's color.
         * @param opt_fontSize The label font size, in pixels.
         * @param opt_alignment The label alignment.
         * @param opt_axisDisplay The axis line and ticks.
         */
        setMultiAxisLabelStyle(
            axisNumber: number, color: string, opt_fontSize?: number,
            opt_alignment?: ಠ_ಠ.clutz.goog.ui.ServerChart.MultiAxisAlignment,
            opt_axisDisplay?: ಠ_ಠ.clutz.goog.ui.ServerChart.AxisDisplayType):
            void;
        /**
         * Sets the label text (usually multiple values) for a given axis,
         * overwriting any existing values.
         * @param axisNumber The axis index, as returned by addMultiAxis.
         * @param labelText The actual label text to be added.
         */
        setMultiAxisLabelText(axisNumber: number, labelText: string[]|null):
            void;
        /**
         * Sets the label range for a given axis, overwriting any existing
         * range. The default range is from 0 to 100. If the start value is
         * larger than the end value, the axis direction is reversed.
         * rangeStart and rangeEnd must be two different finite numbers.
         * @param axisNumber The axis index, as returned by addMultiAxis.
         * @param rangeStart The new start of the range.
         * @param rangeEnd The new end of the range.
         * @param opt_interval The interval between axis labels.
         */
        setMultiAxisRange(
            axisNumber: number, rangeStart: number, rangeEnd: number,
            opt_interval?: number): void;
        /**
         * Sets the number of "visible" data sets. All data sets that come after
         * the visible data set are not drawn as part of the chart. Instead,
         * they are available for positioning markers.
         * @param n The number of visible data sets, or null if all data sets
         * are to be visible.
         */
        setNumVisibleDataSets(n: number|null): void;
        /**
         * Sets the given ChartServer parameter.
         * @param key The ChartServer parameter to set.
         * @param value The value to set for the ChartServer parameter.
         */
        setParameterValue(
            key: ಠ_ಠ.clutz.goog.ui.ServerChart.UriParam, value: string): void;
        /**
         * Sets the Right Labels for the chart.
         * NOTE: The array should start with the lowest value, and then
         * move progessively up the axis. So if you want labels
         * from 0 to 100 with 0 at bottom of the graph, then you would
         * want to pass something like [0,25,50,75,100].
         * @param labels The Right Labels for the chart.
         */
        setRightLabels(labels: string[]|null): void;
        /**
         * Sets the chart size.
         * @param opt_width Optional chart width, defaults to 300.
         * @param opt_height Optional chart height, defaults to 150.
         */
        setSize(opt_width?: number, opt_height?: number): void;
        /**
         * Sets the title of the chart.
         * @param title The chart title.
         */
        setTitle(title: string): void;
        /**
         * Sets the color of the chart title.
         *
         * NOTE: The color string should NOT have a '#' at the beginning of it.
         * @param color The hex value for the title color.
         */
        setTitleColor(color: string): void;
        /**
         * Sets the size of the chart title.
         * @param size The title size, in points.
         */
        setTitleSize(size: number): void;
        /**
         * Sets the chart type.
         * @param type The desired chart type.
         */
        setType(type: ಠ_ಠ.clutz.goog.ui.ServerChart.ChartType): void;
        /**
         * Sets the URI of the chart.
         * @param uri The chart URI.
         */
        setUri(uri: ಠ_ಠ.clutz.goog.Uri|null): void;
        /**
         * Sets the upper limit on the length of the chart image URI, after
         * encoding. If the URI's length equals or exceeds it,
         * goog.ui.ServerChart.UriTooLongEvent is dispatched on the
         * goog.ui.ServerChart object.
         * @param uriLengthLimit The chart URI length limit.
         */
        setUriLengthLimit(uriLengthLimit: number): void;
        /**
         * Sets the weight function for a Venn Diagram along with the associated
         * colors and legend text. Weights are assigned as follows:
         * weights[0] is relative area of circle A.
         * weights[1] is relative area of circle B.
         * weights[2] is relative area of circle C.
         * weights[3] is relative area of overlap of circles A and B.
         * weights[4] is relative area of overlap of circles A and C.
         * weights[5] is relative area of overlap of circles B and C.
         * weights[6] is relative area of overlap of circles A, B and C.
         * For a two circle Venn Diagram the weights are assigned as follows:
         * weights[0] is relative area of circle A.
         * weights[1] is relative area of circle B.
         * weights[2] is relative area of overlap of circles A and B.
         * @param weights The relative weights of the circles.
         * @param opt_legendText The legend labels for the circles.
         * @param opt_colors The colors for the circles.
         */
        setVennSeries(
            weights: ಠ_ಠ.clutz.goog.vec.Number|null,
            opt_legendText?: string[]|null, opt_colors?: string[]|null): void;
        /**
         * Sets the X Labels for the chart.
         * @param labels The X Labels for the chart.
         */
        setXLabels(labels: string[]|null): void;
        /**
         * Updates the image if any of the data or settings have changed.
         */
        updateChart(): void;
    }
}
declare module 'goog:goog.ui.ServerChart' {
    import alias = ಠ_ಠ.clutz.goog.ui.ServerChart;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.ServerChart {
    /**
     * Enum of line and tick options for an axis.
     */
    type AxisDisplayType = string&{clutzEnumBrand: never};
    var AxisDisplayType: {
        LINE: AxisDisplayType,
        LINE_AND_TICKS: AxisDisplayType,
        TICKS: AxisDisplayType,
    };
}
declare module 'goog:goog.ui.ServerChart.AxisDisplayType' {
    import alias = ಠ_ಠ.clutz.goog.ui.ServerChart.AxisDisplayType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.ServerChart {
    /**
     * Enum of chart types with their short names used by the chartserver.
     */
    type ChartType = string&{clutzEnumBrand: never};
    var ChartType: {
        BAR: ChartType,
        CLOCK: ChartType,
        CONCENTRIC_PIE: ChartType,
        FILLEDLINE: ChartType,
        FINANCE: ChartType,
        GOOGLEOMETER: ChartType,
        HORIZONTAL_GROUPED_BAR: ChartType,
        HORIZONTAL_STACKED_BAR: ChartType,
        LINE: ChartType,
        MAP: ChartType,
        MAPUSA: ChartType,
        MAPWORLD: ChartType,
        PIE: ChartType,
        PIE3D: ChartType,
        RADAR: ChartType,
        SCATTER: ChartType,
        SPARKLINE: ChartType,
        VENN: ChartType,
        VERTICAL_GROUPED_BAR: ChartType,
        VERTICAL_STACKED_BAR: ChartType,
        XYLINE: ChartType,
    };
}
declare module 'goog:goog.ui.ServerChart.ChartType' {
    import alias = ಠ_ಠ.clutz.goog.ui.ServerChart.ChartType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.ServerChart {
    /**
     * Enum of chart data encoding types
     */
    type EncodingType = string&{clutzEnumBrand: never};
    var EncodingType: {
        AUTOMATIC: EncodingType,
        EXTENDED: EncodingType,
        SIMPLE: EncodingType,
        TEXT: EncodingType,
    };
}
declare module 'goog:goog.ui.ServerChart.EncodingType' {
    import alias = ಠ_ಠ.clutz.goog.ui.ServerChart.EncodingType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.ServerChart {
    /**
     * Event types dispatched by the ServerChart object
     */
    type Event = string&{clutzEnumBrand: never};
    var Event: {
        URI_TOO_LONG: Event,
    };
}
declare module 'goog:goog.ui.ServerChart.Event' {
    import alias = ಠ_ಠ.clutz.goog.ui.ServerChart.Event;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.ServerChart {
    /**
     * Enum of legend positions.
     */
    type LegendPosition = string&{clutzEnumBrand: never};
    var LegendPosition: {
        BOTTOM: LegendPosition,
        LEFT: LegendPosition,
        RIGHT: LegendPosition,
        TOP: LegendPosition,
    };
}
declare module 'goog:goog.ui.ServerChart.LegendPosition' {
    import alias = ಠ_ಠ.clutz.goog.ui.ServerChart.LegendPosition;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.ServerChart {
    /**
     * Enum of chart maximum values in pixels, as listed at:
     * http://code.google.com/apis/chart/basics.html
     */
    enum MaximumValue {
        HEIGHT,
        MAP_HEIGHT,
        MAP_WIDTH,
        TOTAL_AREA,
        WIDTH,
    }
}
declare module 'goog:goog.ui.ServerChart.MaximumValue' {
    import alias = ಠ_ಠ.clutz.goog.ui.ServerChart.MaximumValue;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.ServerChart {
    /**
     * Enum of multi-axis alignments.
     */
    enum MultiAxisAlignment {
        ALIGN_CENTER,
        ALIGN_LEFT,
        ALIGN_RIGHT,
    }
}
declare module 'goog:goog.ui.ServerChart.MultiAxisAlignment' {
    import alias = ಠ_ಠ.clutz.goog.ui.ServerChart.MultiAxisAlignment;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.ServerChart {
    /**
     * Enum of multi-axis types.
     */
    type MultiAxisType = string&{clutzEnumBrand: never};
    var MultiAxisType: {
        LEFT_Y_AXIS: MultiAxisType,
        RIGHT_Y_AXIS: MultiAxisType,
        TOP_AXIS: MultiAxisType,
        X_AXIS: MultiAxisType,
    };
}
declare module 'goog:goog.ui.ServerChart.MultiAxisType' {
    import alias = ಠ_ಠ.clutz.goog.ui.ServerChart.MultiAxisType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.ServerChart {
    /**
     * Enum of ChartServer URI parameters.
     */
    type UriParam = string&{clutzEnumBrand: never};
    var UriParam: {
        BACKGROUND_FILL: UriParam,
        BAR_HEIGHT: UriParam,
        DATA: UriParam,
        DATA_COLORS: UriParam,
        DATA_LABELS: UriParam,
        DATA_SCALING: UriParam,
        DIGITAL_SIGNATURE: UriParam,
        GEOGRAPHICAL_REGION: UriParam,
        GRID: UriParam,
        LABEL_COLORS: UriParam,
        LEFT_Y_LABELS: UriParam,
        LEGEND: UriParam,
        LEGEND_POSITION: UriParam,
        LEGEND_TEXTS: UriParam,
        LINE_STYLES: UriParam,
        MARGINS: UriParam,
        MARKERS: UriParam,
        MISC_PARAMS: UriParam,
        MULTI_AXIS_LABEL_POSITION: UriParam,
        MULTI_AXIS_LABEL_TEXT: UriParam,
        MULTI_AXIS_RANGE: UriParam,
        MULTI_AXIS_STYLE: UriParam,
        MULTI_AXIS_TYPES: UriParam,
        RIGHT_LABELS: UriParam,
        RIGHT_LABEL_POSITIONS: UriParam,
        SIZE: UriParam,
        TITLE: UriParam,
        TITLE_FORMAT: UriParam,
        TYPE: UriParam,
        X_AXIS_STYLE: UriParam,
        X_LABELS: UriParam,
    };
}
declare module 'goog:goog.ui.ServerChart.UriParam' {
    import alias = ಠ_ಠ.clutz.goog.ui.ServerChart.UriParam;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.ServerChart {
    /**
     * Class for the event dispatched on the ServerChart when the resulting URI
     * exceeds the URI length limit.
     */
    class UriTooLongEvent extends UriTooLongEvent_Instance {}
    class UriTooLongEvent_Instance extends
        ಠ_ಠ.clutz.goog.events.Event_Instance {
        /**
         * Class for the event dispatched on the ServerChart when the resulting
         * URI exceeds the URI length limit.
         * @param uri The overly-long URI string.
         */
        constructor(uri: string);
        /**
         * The overly-long URI string.
         */
        uri: string;
    }
}
declare module 'goog:goog.ui.ServerChart.UriTooLongEvent' {
    import alias = ಠ_ಠ.clutz.goog.ui.ServerChart.UriTooLongEvent;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * This creates a slider object.
     */
    class Slider extends Slider_Instance {
        /**
         * The prefix we use for the CSS class names for the slider and its
         * elements.
         */
        static CSS_CLASS_PREFIX: string;
        /**
         * CSS class name for the single thumb element.
         */
        static THUMB_CSS_CLASS: string;
    }
    class Slider_Instance extends ಠ_ಠ.clutz.goog.ui.SliderBase_Instance {
        /**
         * This creates a slider object.
         * @param opt_domHelper Optional DOM helper.
         * @param opt_labelFn An optional function mapping slider values to a
         * description of the value.
         */
        constructor(
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null,
            opt_labelFn?: (a: number) => string | null);
        extentThumb: HTMLDivElement|null;
        valueThumb: HTMLDivElement|null;
        createThumbs(): void;
        /**
         * Returns CSS class applied to the slider element.
         * @param orient Orientation of the slider.
         */
        getCssClass(orient: ಠ_ಠ.clutz.goog.ui.SliderBase.Orientation): string;
        /**
         * Returns CSS class applied to the slider's thumb element.
         */
        getThumbCssClass(): string;
    }
}
declare module 'goog:goog.ui.Slider' {
    import alias = ಠ_ಠ.clutz.goog.ui.Slider;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.Slider {
    /**
     * Expose Enum of superclass (representing the orientation of the slider)
     * within Slider namespace.
     */
    //!! goog.ui.Slider.Orientation aliases enum goog.ui.SliderBase.Orientation
    type Orientation = goog.ui.SliderBase.Orientation;
    const Orientation: typeof goog.ui.SliderBase.Orientation;
}
declare module 'goog:goog.ui.Slider.Orientation' {
    import alias = ಠ_ಠ.clutz.goog.ui.Slider.Orientation;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * This creates a SliderBase object.
     */
    class SliderBase extends SliderBase_Instance {}
    class SliderBase_Instance extends ಠ_ಠ.clutz.goog.ui.Component_Instance {
        /**
         * This creates a SliderBase object.
         * @param opt_domHelper Optional DOM helper.
         * @param opt_labelFn An optional function mapping slider values to a
         * description of the value.
         */
        constructor(
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null,
            opt_labelFn?: (a: number) => string | null);
        /**
         * The model for the range of the slider.
         */
        rangeModel: ಠ_ಠ.clutz.goog.ui.RangeModel;
        /**
         * Sets the value and starts animating the handle towards that position.
         * @param v Value to set and animate to.
         */
        animatedSetValue(v: number): void;
        createDom(): void;
        /**
         * Subclasses must implement this method and set the valueThumb and
         * extentThumb to non-null values. They can also set the rangeHighlight
         * element if a range highlight is desired.
         */
        createThumbs(): void;
        decorateInternal(element: GlobalElement|null): void;
        disposeInternal(): void;
        /**
         * Enables/disables true RTL behavior.  This should be called
         * immediately after construction.  This is a temporary flag to allow
         * clients to transition to the new behavior at their convenience.  At
         * some point it will be the default.
         * @param flipForRtl True if the slider should be flipped for RTL, false
         * otherwise.
         */
        enableFlipForRtl(flipForRtl: boolean): void;
        /**
         * Called when the DOM for the component is for sure in the document.
         * Subclasses should override this method to set this element's role.
         */
        enterDocument(): void;
        exitDocument(): void;
        /**
         * The maxThumb dom-element, pointing to the end of the selected range.
         */
        extentThumb: HTMLDivElement|null;
        getBlockIncrement(): number;
        /**
         * Returns the CSS class applied to the slider element for the given
         * orientation. Subclasses must override this method.
         * @param orient The orientation.
         */
        getCssClass(a: ಠ_ಠ.clutz.goog.ui.SliderBase.Orientation): string;
        getExtent(): number;
        getExtentThumb(): HTMLDivElement|null;
        getMaximum(): number;
        getMinimum(): number;
        getMoveToPointEnabled(): boolean;
        getOrientation(): ಠ_ಠ.clutz.goog.ui.SliderBase.Orientation;
        getStep(): number|null;
        getTextValue(): string|null;
        /**
         * Returns the position to move the handle to for a given value
         * @param val The value to get the coordinate for.
         */
        getThumbCoordinateForValue(val: number): ಠ_ಠ.clutz.goog.math.Coordinate;
        getUnitIncrement(): number;
        getValue(): number;
        /**
         * Returns the value to use for the current mouse position
         * @param e The mouse event object.
         */
        getValueFromMousePosition(e: ಠ_ಠ.clutz.goog.events.Event|null): number;
        getValueThumb(): HTMLDivElement|null;
        /**
         * Call back when the internal range model changes. Sub-classes may
         * override and re-enter this method to update a11y state. Consider
         * protected.
         * @param e The event object.
         */
        handleRangeModelChange(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        isAnimating(): boolean;
        /**
         * Returns whether a thumb is currently being dragged with the mouse (or
         * via touch). Note that changing the value with keyboard, mouswheel, or
         * via move-to-point click immediately sends a CHANGE event without
         * going through a dragged state.
         */
        isDragging(): boolean;
        isEnabled(): boolean;
        isHandleMouseWheel(): boolean;
        /**
         * Moves the thumbs by the specified delta as follows
         * - as long as both thumbs stay within [min,max], both thumbs are moved
         * - once a thumb reaches or exceeds min (or max, respectively), it
         * stays
         * - at min (or max, respectively).
         * In case both thumbs have reached min (or max), no change event will
         * fire. If the specified delta is smaller than the step size, it will
         * be rounded to the step size.
         * @param delta The delta by which to move the selected range.
         */
        moveThumbs(delta: number): void;
        /**
         * The dom-element highlighting the selected range.
         */
        rangeHighlight: HTMLDivElement|null;
        /**
         * Sets the factory that will be used to create additional animations to
         * be played when animating to a new value.  These animations can be for
         * any element and the animations will be played in addition to the
         * default animation(s).  The animations will also be played in the same
         * parallel queue ensuring that all animations are played at the same
         * time.
         * @param factory The animation factory to use.  This will not change
         * the default animations played by the slider. It will only allow for
         * additional animations.
         */
        setAdditionalAnimations(
            factory: ಠ_ಠ.clutz.goog.ui.SliderBase.AnimationFactory|null): void;
        /**
         * Set a11y roles and state.
         */
        setAriaRoles(): void;
        /**
         * Sets the amount to increment/decrement for page up/down as well as
         * when holding down the mouse button on the background.
         * @param value The value to set the block increment to.
         */
        setBlockIncrement(value: number): void;
        /**
         * Enables or disables the slider. A disabled slider will ignore all
         * user-initiated events. Also fires
         * goog.ui.Component.EventType.ENABLE/DISABLE event as appropriate.
         * @param enable Whether to enable the slider or not.
         */
        setEnabled(enable: boolean): void;
        /**
         * Sets the extent of the underlying range model. We enforce that
         * getMinExtent() <= extent <= getMaximum() - getValue()
         * If this is not satisifed for the given extent, the call is ignored
         * and no CHANGE event fires.
         * @param extent The value to which to set the extent.
         */
        setExtent(extent: number): void;
        /**
         * Enables or disables mouse wheel handling for the slider. The mouse
         * wheel handler enables the user to change the value of slider using a
         * mouse wheel.
         * @param enable Whether to enable mouse wheel handling.
         */
        setHandleMouseWheel(enable: boolean): void;
        /**
         * Sets the maximum number.
         * @param max The maximum value.
         */
        setMaximum(max: number): void;
        /**
         * Sets the minimal value that the extent may have.
         * @param value The minimal value for the extent.
         */
        setMinExtent(value: number): void;
        /**
         * Sets the minimum number.
         * @param min The minimum value.
         */
        setMinimum(min: number): void;
        /**
         * Sets whether clicking on the background should move directly to that
         * point.
         * @param val Whether clicking on the background should move directly to
         * that point.
         */
        setMoveToPointEnabled(val: boolean): void;
        /**
         * Changes the orientation.
         * @param orient The orientation.
         */
        setOrientation(orient: ಠ_ಠ.clutz.goog.ui.SliderBase.Orientation): void;
        /**
         * Sets the step value. The step value is used to determine how to round
         * the value.
         * @param step The step size.
         */
        setStep(step: number|null): void;
        /**
         * Sets the amount to increment/decrement for up, down, left and right
         * arrow keys and mouse wheel events.
         * @param value The value to set the unit increment to.
         */
        setUnitIncrement(value: number): void;
        /**
         * Sets the value of the underlying range model. We enforce that
         * getMinimum() <= value <= getMaximum() - getExtent()
         * If this is not satisifed for the given value, the call is ignored and
         * no CHANGE event fires.
         * @param value The value.
         */
        setValue(value: number): void;
        /**
         * Sets the value and extent of the underlying range model. We enforce
         * that getMinimum() <= value <= getMaximum() - extent and getMinExtent
         * <= extent <= getMaximum() - getValue() If this is not satisfied for
         * the given extent, the call is ignored and no CHANGE event fires. This
         * is a utility method to allow setting the thumbs simultaneously and
         * ensuring that only one event fires.
         * @param value The value to which to set the value.
         * @param extent The value to which to set the extent.
         */
        setValueAndExtent(value: number, extent: number): void;
        /**
         * Change the visibility of the slider.
         * You must call this if you had set the slider's value when it was
         * invisible.
         * @param visible Whether to show the slider.
         */
        setVisible(visible: boolean): void;
        /**
         * Set a11y roles and state when values change.
         */
        updateAriaStates(): void;
        /**
         * The minThumb dom-element, pointing to the start of the selected
         * range.
         */
        valueThumb: HTMLDivElement|null;
    }
}
declare namespace ಠ_ಠ.clutz.goog.ui.SliderBase {
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        ANIMATION_END: EventType,
        DRAG_END: EventType,
        DRAG_EXTENT_END: EventType,
        DRAG_EXTENT_START: EventType,
        DRAG_START: EventType,
        DRAG_VALUE_END: EventType,
        DRAG_VALUE_START: EventType,
    };
}
declare module 'goog:goog.ui.SliderBase' {
    import alias = ಠ_ಠ.clutz.goog.ui.SliderBase;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.SliderBase {
    /**
     * The factory for creating additional animations to be played when
     * animating to a new value.
     */
    interface AnimationFactory {
        /**
         * Creates an additional animation to play when animating to a new
         * value.
         * @param previousValue The previous value (before animation).
         * @param newValue The new value (after animation).
         * @param interval The animation interval.
         */
        createAnimations(a: number, b: number, c: number):
            ಠ_ಠ.clutz.goog.fx.TransitionBase[];
    }
}
declare module 'goog:goog.ui.SliderBase.AnimationFactory' {
    import alias = ಠ_ಠ.clutz.goog.ui.SliderBase.AnimationFactory;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.SliderBase {
    /**
     * Enum for representing the orientation of the slider.
     */
    type Orientation = string&{clutzEnumBrand: never};
    var Orientation: {
        HORIZONTAL: Orientation,
        VERTICAL: Orientation,
    };
}
declare module 'goog:goog.ui.SliderBase.Orientation' {
    import alias = ಠ_ಠ.clutz.goog.ui.SliderBase.Orientation;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * A left/right up/down Container SplitPane.
     * Create SplitPane with two goog.ui.Component opjects to split.
     * TODO(user): Support minimum splitpane size.
     * TODO(user): Allow component change/orientation after init.
     * TODO(user): Support hiding either side of handle (plus handle).
     * TODO(user): Look at setBorderBoxSize fixes and revist borderwidth code.
     */
    class SplitPane extends SplitPane_Instance {}
    class SplitPane_Instance extends ಠ_ಠ.clutz.goog.ui.Component_Instance {
        /**
         * A left/right up/down Container SplitPane.
         * Create SplitPane with two goog.ui.Component opjects to split.
         * TODO(user): Support minimum splitpane size.
         * TODO(user): Allow component change/orientation after init.
         * TODO(user): Support hiding either side of handle (plus handle).
         * TODO(user): Look at setBorderBoxSize fixes and revist borderwidth
         * code.
         * @param firstComponent Left or Top component.
         * @param secondComponent Right or Bottom component.
         * @param orientation SplitPane orientation.
         * @param opt_domHelper Optional DOM helper.
         */
        constructor(
            firstComponent: ಠ_ಠ.clutz.goog.ui.Component|null,
            secondComponent: ಠ_ಠ.clutz.goog.ui.Component|null,
            orientation: ಠ_ಠ.clutz.goog.ui.SplitPane.Orientation,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * Determines if a given element can be decorated by this type of
         * component.
         * @param element Element to decorate.
         */
        canDecorate(element: GlobalElement|null): boolean;
        /**
         * Create the DOM node & text node needed for the splitpane.
         */
        createDom(): void;
        /**
         * Decorates the given HTML element as a SplitPane.  Overrides {@link
         * goog.ui.Component#decorateInternal}.  Considered protected.
         * @param element Element (SplitPane div) to decorate.
         */
        decorateInternal(element: GlobalElement|null): void;
        disposeInternal(): void;
        /**
         * Setup all events and do an initial resize.
         */
        enterDocument(): void;
        getFirstComponentSize(): number|null;
        /**
         * Gets the orientation of the split pane.
         */
        getOrientation(): ಠ_ಠ.clutz.goog.ui.SplitPane.Orientation;
        /**
         * Returns whether the orientation for the split pane is vertical
         * or not.
         */
        isVertical(): boolean;
        /**
         * Sets whether we resize on handle drag.
         * @param continuous The continuous resize value.
         */
        setContinuousResize(continuous: boolean): void;
        /**
         * Set the size of the left/top component, and resize the other
         * component based on that size and handle size.
         * @param opt_size The size of the top or left, in pixels. If
         * unspecified, leaves the size of the first component unchanged but
         * adjusts the size of the second component to fit the split pane size.
         */
        setFirstComponentSize(opt_size?: number|null): void;
        /**
         * Sets the SplitPane handle size.
         * TODO(user): Make sure this works after initialization.
         * @param size The size of the handle in pixels.
         */
        setHandleSize(size: number): void;
        /**
         * Sets the initial size of the left or top component.
         * @param size The size in Pixels of the container.
         */
        setInitialSize(size: number): void;
        /**
         * Sets the orientation of the split pane.
         * @param orientation SplitPane orientation.
         */
        setOrientation(orientation: ಠ_ಠ.clutz.goog.ui.SplitPane.Orientation):
            void;
        /**
         * Sets the orientation class for the split pane handle.
         */
        setOrientationClassForHandle(): void;
        /**
         * Set the size of the splitpane.  This is usually called by the
         * controlling application.  This will set the SplitPane BorderBoxSize.
         * @param size The size to set the splitpane.
         * @param opt_firstComponentSize The size of the top or left component,
         * in pixels.
         */
        setSize(
            size: ಠ_ಠ.clutz.goog.math.Size,
            opt_firstComponentSize?: number|null): void;
    }
}
declare namespace ಠ_ಠ.clutz.goog.ui.SplitPane {
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        HANDLE_DRAG: EventType,
        HANDLE_DRAG_END: EventType,
        HANDLE_SNAP: EventType,
    };
}
declare module 'goog:goog.ui.SplitPane' {
    import alias = ಠ_ಠ.clutz.goog.ui.SplitPane;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.SplitPane {
    /**
     * Orientation values for the splitpane.
     */
    type Orientation = string&{clutzEnumBrand: never};
    var Orientation: {
        HORIZONTAL: Orientation,
        VERTICAL: Orientation,
    };
}
declare module 'goog:goog.ui.SplitPane.Orientation' {
    import alias = ಠ_ಠ.clutz.goog.ui.SplitPane.Orientation;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Class representing a submenu that can be added as an item to other menus.
     */
    class SubMenu extends SubMenu_Instance {
        /**
         * The delay before opening the sub menu in milliseconds.
         */
        static MENU_DELAY_MS: number;
    }
    class SubMenu_Instance extends ಠ_ಠ.clutz.goog.ui.MenuItem_Instance {
        /**
         * Class representing a submenu that can be added as an item to other
         * menus.
         * @param content Text caption or DOM structure to display as the
         * content of the submenu (use to add icons or styling to menus).
         * @param opt_model Data/model associated with the menu item.
         * @param opt_domHelper Optional dom helper used for dom interactions.
         * @param opt_renderer Renderer used to render or decorate the
         * component; defaults to {@link goog.ui.SubMenuRenderer}.
         */
        constructor(
            content: string|Node|null|Node[]|NodeListOf<Node>, opt_model?: any,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null,
            opt_renderer?: ಠ_ಠ.clutz.goog.ui.MenuItemRenderer|null);
        /**
         * Adds a new menu item at the end of the menu.
         * @param item Menu item to add to the menu.
         */
        addItem(item: ಠ_ಠ.clutz.goog.ui.MenuHeader|null|
                ಠ_ಠ.clutz.goog.ui.MenuItem|
                ಠ_ಠ.clutz.goog.ui.MenuSeparator): void;
        /**
         * Adds a new menu item at a specific index in the menu.
         * @param item Menu item to add to the menu.
         * @param n Index at which to insert the menu item.
         */
        addItemAt(
            item: ಠ_ಠ.clutz.goog.ui.MenuHeader|null|
            ಠ_ಠ.clutz.goog.ui.MenuItem|ಠ_ಠ.clutz.goog.ui.MenuSeparator,
            n: number): void;
        /**
         * Clears the show and hide timers for the sub menu.
         */
        clearTimers(): void;
        /**
         * Returns true if the provided element is to be considered inside the
         * menu for purposes such as dismissing the menu on an event.  This is
         * so submenus can make use of elements outside their own DOM.
         * @param element The element to test for.
         */
        containsElement(element: GlobalElement|null): boolean;
        /**
         * Dismisses the menu and all further submenus.
         */
        dismissSubMenu(): void;
        disposeInternal(): void;
        enterDocument(): void;
        exitDocument(): void;
        /**
         * Returns a reference to the menu item at a given index.
         * @param n Index of menu item.
         */
        getItemAt(n: number): ಠ_ಠ.clutz.goog.ui.Component|null;
        /**
         * Returns the number of items in the sub menu (including separators).
         */
        getItemCount(): number;
        /**
         * Returns the menu items contained in the sub menu.
         */
        getItems(): ಠ_ಠ.clutz.goog.ui.MenuItem[];
        /**
         * Gets a reference to the submenu's actual menu.
         */
        getMenu(): ಠ_ಠ.clutz.goog.ui.Menu;
        /**
         * Handles a key event that is passed to the menu item from its parent
         * because it is highlighted.  If the right key is pressed the sub menu
         * takes control and delegates further key events to its menu until it
         * is dismissed OR the left key is pressed.
         * @param e A key event.
         */
        handleKeyEvent(e: ಠ_ಠ.clutz.goog.events.KeyEvent|null): boolean;
        handleMouseOver(e: ಠ_ಠ.clutz.goog.events.BrowserEvent|null): void;
        /**
         * Determines whether the submenu is aligned at the end of the parent
         * menu.
         */
        isAlignedToEnd(): boolean;
        isPositionAdjustable(): boolean;
        /**
         * Overrides the default mouseup event handler, so that the ACTION isn't
         * dispatched for the submenu itself, instead the submenu is shown
         * instantly.
         * @param e The browser event.
         */
        performActionInternal(e: ಠ_ಠ.clutz.goog.events.Event|null): boolean;
        /**
         * Positions the submenu. This method should be called if the sub menu
         * is opened and the menu element's size changes (e.g., when
         * adding/removing items to an opened sub menu).
         */
        positionSubMenu(): void;
        /**
         * Removes an item from the menu and disposes it.
         * @param item The menu item to remove.
         */
        removeItem(item: ಠ_ಠ.clutz.goog.ui.MenuItem|null): void;
        /**
         * Removes a menu item at a given index in the menu and disposes it.
         * @param n Index of item.
         */
        removeItemAt(n: number): void;
        /**
         * Sets whether the submenu is aligned at the end of the parent menu.
         * @param alignToEnd True to align to end, false to align to start.
         */
        setAlignToEnd(alignToEnd: boolean): void;
        setHighlighted(highlight: boolean, opt_btnPressed?: boolean): void;
        /**
         * Sets the submenu to a specific menu.
         * @param menu The menu to show when this item is selected.
         * @param opt_internal Whether this menu is an "internal" menu, and
         * should be disposed of when this object is disposed of.
         */
        setMenu(menu: ಠ_ಠ.clutz.goog.ui.Menu|null, opt_internal?: boolean):
            void;
        setPositionAdjustable(isAdjustable: boolean): void;
        /**
         * Sets the menu item to be visible or invisible.
         * @param visible Whether to show or hide the component.
         * @param opt_force If true, doesn't check whether the component already
         * has the requested visibility, and doesn't dispatch any events.
         */
        setVisible(visible: boolean, opt_force?: boolean): boolean;
        /**
         * Show the submenu and ensure that all siblings are hidden.
         */
        showSubMenu(): void;
    }
}
declare module 'goog:goog.ui.SubMenu' {
    import alias = ಠ_ಠ.clutz.goog.ui.SubMenu;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Default renderer for {@link goog.ui.SubMenu}s.  Each item has the
     * following structure:
     *
     * <div class="goog-submenu">
     * ...(menuitem content)...
     * <div class="goog-menu">
     * ... (submenu content) ...
     * </div>
     * </div>
     */
    class SubMenuRenderer extends SubMenuRenderer_Instance {
        /**
         * Default CSS class to be applied to the root element of components
         * rendered by this renderer.
         */
        static CSS_CLASS: string;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.SubMenuRenderer;
        static instance_: ಠ_ಠ.clutz.goog.ui.SubMenuRenderer;
    }
    class SubMenuRenderer_Instance extends
        ಠ_ಠ.clutz.goog.ui.MenuItemRenderer_Instance {
        /**
         * Overrides {@link goog.ui.MenuItemRenderer#createDom} by adding
         * the additional class 'goog-submenu' to the created element,
         * and passes the element to {@link
         * goog.ui.SubMenuItemRenderer#addArrow_} to add an child element that
         * can be styled to show an arrow.
         * @param control goog.ui.SubMenu to render.
         */
        createDom(control: ಠ_ಠ.clutz.goog.ui.Control|null): GlobalElement;
        /**
         * Overrides {@link goog.ui.MenuItemRenderer#decorate} by adding
         * the additional class 'goog-submenu' to the decorated element,
         * and passing the element to {@link
         * goog.ui.SubMenuItemRenderer#addArrow_} to add a child element that
         * can be styled to show an arrow. Also searches the element for a child
         * with the class goog-menu. If a matching child element is found,
         * creates a goog.ui.Menu, uses it to decorate the child element, and
         * passes that menu to subMenu.setMenu.
         * @param control goog.ui.SubMenu to render.
         * @param element Element to decorate.
         */
        decorate(
            control: ಠ_ಠ.clutz.goog.ui.Control|null,
            element: GlobalElement|null): GlobalElement;
        /**
         * Overrides {@link goog.ui.MenuItemRenderer#initializeDom} to tweak
         * the DOM structure for the span.goog-submenu-arrow element
         * depending on the text direction (LTR or RTL). When the SubMenu is RTL
         * the arrow will be given the additional class of
         * goog-submenu-arrow-rtl, and the arrow will be moved up to be the
         * first child in the SubMenu's element. Otherwise the arrow will have
         * the class goog-submenu-arrow-ltr, and be kept as the last child of
         * the SubMenu's element.
         * @param control goog.ui.SubMenu whose DOM is to be initialized as it
         * enters the document.
         */
        initializeDom(control: ಠ_ಠ.clutz.goog.ui.Control|null): void;
        /**
         * Takes a menu item's root element, and sets its content to the given
         * text caption or DOM structure.  Overrides the superclass
         * immplementation by making sure that the submenu arrow structure is
         * preserved.
         * @param element The item's root element.
         * @param content Text caption or DOM structure to be set as the item's
         * content.
         */
        setContent(
            element: GlobalElement|null,
            content: string|Node|null|Node[]|NodeListOf<Node>): void;
    }
}
declare module 'goog:goog.ui.SubMenuRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.SubMenuRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Tab control, designed to be hosted in a {@link goog.ui.TabBar}.  The
     * tab's DOM may be different based on the configuration of the containing
     * tab bar, so tabs should only be rendered or decorated as children of a
     * tab bar.
     */
    class Tab extends Tab_Instance {}
    class Tab_Instance extends ಠ_ಠ.clutz.goog.ui.Control_Instance {
        /**
         * Tab control, designed to be hosted in a {@link goog.ui.TabBar}.  The
         * tab's DOM may be different based on the configuration of the
         * containing tab bar, so tabs should only be rendered or decorated as
         * children of a tab bar.
         * @param content Text caption or DOM structure to display as the tab's
         * caption (if any).
         * @param opt_renderer Optional renderer used to render or decorate the
         * tab.
         * @param opt_domHelper Optional DOM helper, used for document
         * interaction.
         */
        constructor(
            content: string|Node|null|Node[]|NodeListOf<Node>,
            opt_renderer?: ಠ_ಠ.clutz.goog.ui.TabRenderer|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        getTooltip(): string|undefined;
        /**
         * Sets the tab tooltip text.  If the tab has already been rendered,
         * updates its tooltip.
         * @param tooltip New tooltip text.
         */
        setTooltip(tooltip: string): void;
        /**
         * Sets the tab tooltip text.  Considered protected; to be called only
         * by the renderer during element decoration.
         * @param tooltip New tooltip text.
         */
        setTooltipInternal(tooltip: string): void;
    }
}
declare module 'goog:goog.ui.Tab' {
    import alias = ಠ_ಠ.clutz.goog.ui.Tab;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Tab bar UI component.  A tab bar contains tabs, rendered above, below,
     * before, or after tab contents.  Tabs in tab bars dispatch the following
     * events:
     * <ul>
     * <li>{@link goog.ui.Component.EventType.ACTION} when activated via the
     * keyboard or the mouse,
     * <li>{@link goog.ui.Component.EventType.SELECT} when selected, and
     * <li>{@link goog.ui.Component.EventType.UNSELECT} when deselected.
     * </ul>
     * Clients may listen for all of the above events on the tab bar itself, and
     * refer to the event target to identify the tab that dispatched the event.
     * When an unselected tab is clicked for the first time, it dispatches both
     * a
     * {@code SELECT} event and an {@code ACTION} event; subsequent clicks on an
     * already selected tab only result in {@code ACTION} events.
     */
    class TabBar extends TabBar_Instance {
        /**
         * Returns the {@link goog.ui.Container.Orientation} that is implied by
         * the given {@link goog.ui.TabBar.Location}.
         * @param location Tab bar location.
         */
        static getOrientationFromLocation(
            location: ಠ_ಠ.clutz.goog.ui.TabBar.Location):
            ಠ_ಠ.clutz.goog.ui.Container.Orientation;
    }
    class TabBar_Instance extends ಠ_ಠ.clutz.goog.ui.Container_Instance {
        /**
         * Tab bar UI component.  A tab bar contains tabs, rendered above,
         * below, before, or after tab contents.  Tabs in tab bars dispatch the
         * following events: <ul> <li>{@link goog.ui.Component.EventType.ACTION}
         * when activated via the keyboard or the mouse, <li>{@link
         * goog.ui.Component.EventType.SELECT} when selected, and <li>{@link
         * goog.ui.Component.EventType.UNSELECT} when deselected.
         * </ul>
         * Clients may listen for all of the above events on the tab bar itself,
         * and refer to the event target to identify the tab that dispatched the
         * event. When an unselected tab is clicked for the first time, it
         * dispatches both a
         * {@code SELECT} event and an {@code ACTION} event; subsequent clicks
         * on an already selected tab only result in {@code ACTION} events.
         * @param opt_location Tab bar location; defaults to {@link
         * goog.ui.TabBar.Location.TOP}.
         * @param opt_renderer Renderer used to render or decorate the
         * container; defaults to {@link goog.ui.TabBarRenderer}.
         * @param opt_domHelper DOM helper, used for document interaction.
         */
        constructor(
            opt_location?: ಠ_ಠ.clutz.goog.ui.TabBar.Location,
            opt_renderer?: ಠ_ಠ.clutz.goog.ui.TabBarRenderer|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * If the specified tab is the currently selected tab, deselects it, and
         * selects the closest selectable tab in the tab bar (first looking
         * before, then after the deselected tab).  Does nothing if the argument
         * is not the currently selected tab.  Called internally when a tab is
         * removed, hidden, or disabled, to ensure that another tab is selected
         * instead.
         * @param tab Tab to deselect (if any).
         */
        deselectIfSelected(tab: ಠ_ಠ.clutz.goog.ui.Control|null): void;
        disposeInternal(): void;
        enterDocument(): void;
        getLocation(): ಠ_ಠ.clutz.goog.ui.TabBar.Location;
        getSelectedTab(): ಠ_ಠ.clutz.goog.ui.Control|null;
        getSelectedTabIndex(): number;
        /**
         * Handles focus events dispatched by the tab bar's key event target.
         * If no tab is currently highlighted, highlights the selected tab or
         * the first tab if no tab is selected either.
         * @param e Focus event to handle.
         */
        handleFocus(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Handles {@code DISABLE} events displayed by tabs.
         * @param e Disable event to handle.
         */
        handleTabDisable(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Handles {@code HIDE} events displayed by tabs.
         * @param e Hide event to handle.
         */
        handleTabHide(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Handles {@code SELECT} events dispatched by tabs as they become
         * selected.
         * @param e Select event to handle.
         */
        handleTabSelect(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Handles {@code UNSELECT} events dispatched by tabs as they become
         * deselected.
         * @param e Unselect event to handle.
         */
        handleTabUnselect(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        isAutoSelectTabs(): boolean;
        /**
         * Returns true if the tab is selectable, false otherwise.  Only visible
         * and enabled tabs are selectable.
         * @param tab Tab to check.
         */
        isSelectableTab(tab: ಠ_ಠ.clutz.goog.ui.Control|null): boolean;
        /**
         * Removes the tab from the tab bar.  Overrides the superclass
         * implementation by deselecting the tab being removed.  Since {@link
         * #removeChildAt} uses
         * {@link #removeChild} internally, we only need to override this
         * method.
         * @param tab Tab to remove.
         * @param opt_unrender Whether to call {@code exitDocument} on the
         * removed tab, and detach its DOM from the document (defaults to
         * false).
         */
        removeChild(
            tab: string|ಠ_ಠ.clutz.goog.ui.Component|null,
            opt_unrender?: boolean): ಠ_ಠ.clutz.goog.ui.Control|null;
        /**
         * Enables or disables auto-selecting tabs using the keyboard.  If
         * auto-select is enabled, keyboard navigation switches tabs
         * immediately, otherwise it just moves the highlight.
         * @param enable Whether keyboard navigation should change the selected
         * tab, or just move the highlight.
         */
        setAutoSelectTabs(enable: boolean): void;
        /**
         * Highlights the tab at the given index in response to a keyboard
         * event. Overrides the superclass implementation by also selecting the
         * tab if
         * {@link #isAutoSelectTabs} returns true.
         * @param index Index of tab to highlight.
         */
        setHighlightedIndexFromKeyEvent(index: number): void;
        /**
         * Sets the location of the tab bar relative to tab contents.
         * @param location Tab bar location relative to tab contents.
         */
        setLocation(location: ಠ_ಠ.clutz.goog.ui.TabBar.Location): void;
        /**
         * Selects the given tab.
         * @param tab Tab to select (null to select none).
         */
        setSelectedTab(tab: ಠ_ಠ.clutz.goog.ui.Control|null): void;
        /**
         * Selects the tab at the given index.
         * @param index Index of the tab to select (-1 to select none).
         */
        setSelectedTabIndex(index: number): void;
    }
}
declare module 'goog:goog.ui.TabBar' {
    import alias = ಠ_ಠ.clutz.goog.ui.TabBar;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.TabBar {
    /**
     * Tab bar location relative to tab contents.
     */
    type Location = string&{clutzEnumBrand: never};
    var Location: {
        BOTTOM: Location,
        END: Location,
        START: Location,
        TOP: Location,
    };
}
declare module 'goog:goog.ui.TabBar.Location' {
    import alias = ಠ_ಠ.clutz.goog.ui.TabBar.Location;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Default renderer for {@link goog.ui.TabBar}s, based on the {@code
     * TabPane} code.  The tab bar's DOM structure is determined by its
     * orientation and location relative to tab contents.  For example, a
     * horizontal tab bar located above tab contents looks like this:
     *
     * <div class="goog-tab-bar goog-tab-bar-horizontal goog-tab-bar-top">
     * ...(tabs here)...
     * </div>
     */
    class TabBarRenderer extends TabBarRenderer_Instance {
        /**
         * Default CSS class to be applied to the root element of components
         * rendered by this renderer.
         */
        static CSS_CLASS: string;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.TabBarRenderer;
        static instance_: ಠ_ಠ.clutz.goog.ui.TabBarRenderer;
    }
    class TabBarRenderer_Instance extends
        ಠ_ಠ.clutz.goog.ui.ContainerRenderer_Instance {
        /**
         * Default renderer for {@link goog.ui.TabBar}s, based on the {@code
         * TabPane} code.  The tab bar's DOM structure is determined by its
         * orientation and location relative to tab contents.  For example, a
         * horizontal tab bar located above tab contents looks like this:
         *
         * <div class="goog-tab-bar goog-tab-bar-horizontal goog-tab-bar-top">
         * ...(tabs here)...
         * </div>
         */
        constructor();
        /**
         * Returns all CSS class names applicable to the tab bar, based on its
         * state. Overrides the superclass implementation by appending the
         * location-specific class name to the list.
         * @param tabBar Tab bar whose CSS classes are to be returned.
         */
        getClassNames(tabBar: ಠ_ಠ.clutz.goog.ui.Container|null): string[];
        /**
         * Returns the CSS class name to be applied to the root element of all
         * tab bars rendered or decorated using this renderer.
         */
        getCssClass(): string;
        /**
         * Sets the tab bar's state based on the given CSS class name,
         * encountered during decoration.  Overrides the superclass
         * implementation by recognizing class names representing tab bar
         * orientation and location.
         * @param tabBar Tab bar to configure.
         * @param className CSS class name.
         * @param baseClass Base class name used as the root of state-specific
         * class names (typically the renderer's own class name).
         */
        setStateFromClassName(
            tabBar: ಠ_ಠ.clutz.goog.ui.Container|null, className: string,
            baseClass: string): void;
    }
}
declare module 'goog:goog.ui.TabBarRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.TabBarRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * TabPane widget. All children already inside the tab pane container
     * element will be be converted to tabs. Each tab is represented by a
     * goog.ui.TabPane. TabPage object. Further pages can be constructed either
     * from an existing container or created from scratch.
     */
    class TabPane extends TabPane_Instance {}
    class TabPane_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * TabPane widget. All children already inside the tab pane container
         * element will be be converted to tabs. Each tab is represented by a
         * goog.ui.TabPane. TabPage object. Further pages can be constructed
         * either from an existing container or created from scratch.
         * @param el Container element to create the tab pane out of.
         * @param opt_tabLocation Location of the tabs in relation to the
         * content container. Default is top.
         * @param opt_domHelper Optional DOM helper.
         * @param opt_useMouseDown Whether to use MOUSEDOWN instead of CLICK for
         * tab changes.
         */
        constructor(
            el: GlobalElement|null,
            opt_tabLocation?: ಠ_ಠ.clutz.goog.ui.TabPane.TabLocation,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null,
            opt_useMouseDown?: boolean);
        /**
         * DomHelper used to interact with the document, allowing components to
         * be created in a different window.  This property is considered
         * protected; subclasses of Component may refer to it directly.
         */
        dom_: ಠ_ಠ.clutz.goog.dom.DomHelper|null;
        /**
         * Adds a page to the tab pane.
         * @param page Tab page to add.
         * @param opt_index Zero based index to insert tab at. Inserted at the
         * end if not specified.
         */
        addPage(
            page: ಠ_ಠ.clutz.goog.ui.TabPane.TabPage|null,
            opt_index?: number): void;
        disposeInternal(): void;
        getContentElement(): GlobalElement|null;
        getElement(): GlobalElement|null;
        /**
         * Gets the tab page by zero based index.
         * @param index Index of page to return.
         */
        getPage(index: number): ಠ_ಠ.clutz.goog.ui.TabPane.TabPage|null;
        getSelectedIndex(): number;
        getSelectedPage(): ಠ_ಠ.clutz.goog.ui.TabPane.TabPage|null;
        /**
         * Removes the specified page from the tab pane.
         * @param page Reference to tab page or zero based index.
         */
        removePage(page: ಠ_ಠ.clutz.goog.ui.TabPane.TabPage|null|number): void;
        /**
         * Sets the selected tab page by zero based index.
         * @param index Index of page to select.
         */
        setSelectedIndex(index: number): void;
        /**
         * Sets the selected tab page by object reference.
         * @param page Tab page to select.
         */
        setSelectedPage(page: ಠ_ಠ.clutz.goog.ui.TabPane.TabPage|null): void;
    }
}
declare module 'goog:goog.ui.TabPane' {
    import alias = ಠ_ಠ.clutz.goog.ui.TabPane;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.TabPane.Events {
    var CHANGE: string;
}
declare module 'goog:goog.ui.TabPane.Events' {
    import alias = ಠ_ಠ.clutz.goog.ui.TabPane.Events;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.TabPane {
    /**
     * Enum for representing the location of the tabs in relation to the
     * content.
     */
    enum TabLocation {
        BOTTOM,
        LEFT,
        RIGHT,
        TOP,
    }
}
declare module 'goog:goog.ui.TabPane.TabLocation' {
    import alias = ಠ_ಠ.clutz.goog.ui.TabPane.TabLocation;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.TabPane {
    /**
     * Object representing an individual tab pane.
     */
    class TabPage extends TabPage_Instance {}
    class TabPage_Instance {
        private noStructuralTyping_: any;
        /**
         * Object representing an individual tab pane.
         * @param opt_el Container element to create the pane out of.
         * @param opt_title Pane title or element to use as the title. If not
         * specified the first element in the container is used as the title.
         * @param opt_domHelper Optional DOM helper The first parameter can be
         * omitted.
         */
        constructor(
            opt_el?: GlobalElement|null, opt_title?: GlobalElement|null|string,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * DomHelper used to interact with the document, allowing components to
         * be created in a different window.  This property is considered
         * protected; subclasses of Component may refer to it directly.
         */
        dom_: ಠ_ಠ.clutz.goog.dom.DomHelper|null;
        getContentElement(): GlobalElement|null;
        getIndex(): number|null;
        getParent(): ಠ_ಠ.clutz.goog.ui.TabPane|null;
        getTitle(): string;
        getTitleElement(): GlobalElement|null;
        /**
         * Returns if the page is enabled.
         */
        isEnabled(): boolean;
        /**
         * Selects page in the associated tab pane.
         */
        select(): void;
        /**
         * Sets the enabled state.
         * @param enabled Enabled state.
         */
        setEnabled(enabled: boolean): void;
        /**
         * Sets title for tab page.
         * @param title Title for tab page.
         */
        setTitle(title: string): void;
    }
}
declare module 'goog:goog.ui.TabPane.TabPage' {
    import alias = ಠ_ಠ.clutz.goog.ui.TabPane.TabPage;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Object representing a tab pane page changed event.
     */
    class TabPaneEvent extends TabPaneEvent_Instance {}
    class TabPaneEvent_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
        /**
         * Object representing a tab pane page changed event.
         * @param type Event type.
         * @param target Tab widget initiating event.
         * @param page Selected page in tab pane.
         */
        constructor(
            type: string, target: ಠ_ಠ.clutz.goog.ui.TabPane|null,
            page: ಠ_ಠ.clutz.goog.ui.TabPane.TabPage|null);
        /**
         * The selected page.
         */
        page: ಠ_ಠ.clutz.goog.ui.TabPane.TabPage|null;
    }
}
declare module 'goog:goog.ui.TabPaneEvent' {
    import alias = ಠ_ಠ.clutz.goog.ui.TabPaneEvent;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Default renderer for {@link goog.ui.Tab}s, based on the {@code TabPane}
     * code.
     */
    class TabRenderer extends TabRenderer_Instance {
        /**
         * Default CSS class to be applied to the root element of components
         * rendered by this renderer.
         */
        static CSS_CLASS: string;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.TabRenderer;
        static instance_: ಠ_ಠ.clutz.goog.ui.TabRenderer;
    }
    class TabRenderer_Instance extends
        ಠ_ಠ.clutz.goog.ui.ControlRenderer_Instance {
        /**
         * Returns the tab's contents wrapped in a DIV, with the renderer's own
         * CSS class and additional state-specific classes applied to it.
         * Creates the following DOM structure:
         *
         * <div class="goog-tab" title="Title">Content</div>
         * @param tab Tab to render.
         */
        createDom(tab: ಠ_ಠ.clutz.goog.ui.Control|null): GlobalElement|null;
        /**
         * Decorates the element with the tab.  Initializes the tab's ID,
         * content, tooltip, and state based on the ID of the element, its
         * title, child nodes, and CSS classes, respectively.  Returns the
         * element.
         * @param tab Tab to decorate the element.
         * @param element Element to decorate.
         */
        decorate(
            tab: ಠ_ಠ.clutz.goog.ui.Control|null,
            element: GlobalElement|null): GlobalElement|null;
        /**
         * Returns the ARIA role to be applied to the tab element.
         * See http://wiki/Main/ARIA for more info.
         */
        getAriaRole(): ಠ_ಠ.clutz.goog.a11y.aria.Role;
        /**
         * Returns the CSS class name to be applied to the root element of all
         * tabs rendered or decorated using this renderer.
         */
        getCssClass(): string;
        /**
         * Takes a tab's root element, and returns its tooltip text, or the
         * empty string if the element has no tooltip.
         * @param element The tab's root element.
         */
        getTooltip(element: GlobalElement|null): string;
        /**
         * Takes a tab's root element and a tooltip string, and updates the
         * element with the new tooltip.  If the new tooltip is null or
         * undefined, sets the element's title to the empty string.
         * @param element The tab's root element.
         * @param tooltip New tooltip text (if any).
         */
        setTooltip(element: GlobalElement|null, tooltip: string|null|undefined):
            void;
    }
}
declare module 'goog:goog.ui.TabRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.TabRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * A table sorter allows for sorting of a table by column.  This component
     * can be used to decorate an already existing TABLE element with sorting
     * features.
     *
     * The TABLE should use a THEAD containing TH elements for the table column
     * headers.
     */
    class TableSorter extends TableSorter_Instance {
        /**
         * Alphabetic sort function.
         * @param a First sort value.
         * @param b Second sort value.
         */
        static alphaSort(a: any, b: any): number;
        /**
         * Returns a function that is the given sort function in reverse.
         * @param sortFunction The original sort function.
         */
        static createReverseSort(sortFunction: (a: any, b: any) => number):
            (a: any, b: any) => number;
        /**
         * Disables sorting on the specified column
         * @param a First sort value.
         * @param b Second sort value.
         */
        static noSort(a: any, b: any): number;
        /**
         * A numeric sort function.  NaN values (or values that do not parse as
         * float numbers) compare equal to each other and greater to any other
         * number.
         * @param a First sort value.
         * @param b Second sort value.
         */
        static numericSort(a: any, b: any): number;
    }
    class TableSorter_Instance extends ಠ_ಠ.clutz.goog.ui.Component_Instance {
        /**
         * A table sorter allows for sorting of a table by column.  This
         * component can be used to decorate an already existing TABLE element
         * with sorting features.
         *
         * The TABLE should use a THEAD containing TH elements for the table
         * column headers.
         * @param opt_domHelper Optional DOM helper, used for document
         * interaction.
         */
        constructor(opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        canDecorate(element: GlobalElement|null): boolean;
        enterDocument(): void;
        getDefaultSortFunction(): (a: any, b: any) => number;
        getSortColumn(): number;
        /**
         * Gets the sort function to be used by the given column.  Returns the
         * default sort function if no sort function is explicitly set for this
         * column.
         * @param column The column index.
         */
        getSortFunction(column: number): (a: any, b: any) => number;
        isSortReversed(): boolean;
        /**
         * Sets the default sort function to be used by all columns.  If not set
         * explicitly, this defaults to numeric sorting.
         * @param sortFunction The new default sort function.
         */
        setDefaultSortFunction(sortFunction: (a: any, b: any) => number): void;
        /**
         * Set the sort function for the given column, overriding the default
         * sort function.
         * @param column The column index.
         * @param sortFunction The new sort function.
         */
        setSortFunction(
            column: number, sortFunction: (a: any, b: any) => number): void;
        /**
         * Sets the row index (in <thead>) to be used for sorting.
         * By default, the first row (index 0) is used.
         * Must be called before decorate() is called.
         * @param index The row index.
         */
        setSortableHeaderRowIndex(index: number): void;
        /**
         * Sort the table contents by the values in the given column.
         * @param column The column to sort by.
         * @param opt_reverse Whether to sort in reverse.
         */
        sort(column: number, opt_reverse?: boolean): boolean;
    }
}
declare module 'goog:goog.ui.TableSorter' {
    import alias = ಠ_ಠ.clutz.goog.ui.TableSorter;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.TableSorter {
    /**
     * Table sorter events.
     */
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        BEFORESORT: EventType,
        SORT: EventType,
    };
}
declare module 'goog:goog.ui.TableSorter.EventType' {
    import alias = ಠ_ಠ.clutz.goog.ui.TableSorter.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * A textarea control to handle growing/shrinking with textarea.value.
     */
    class Textarea extends Textarea_Instance {
        /**
         * The CSS class name to add to the input when the user has not entered
         * a value.
         */
        static TEXTAREA_PLACEHOLDER_CLASS: string;
    }
    class Textarea_Instance extends ಠ_ಠ.clutz.goog.ui.Control_Instance {
        /**
         * A textarea control to handle growing/shrinking with textarea.value.
         * @param content Text to set as the textarea's value.
         * @param opt_renderer Renderer used to render or decorate the textarea.
         * Defaults to {@link goog.ui.TextareaRenderer}.
         * @param opt_domHelper Optional DOM helper, used for document
         * interaction.
         */
        constructor(
            content: string,
            opt_renderer?: ಠ_ಠ.clutz.goog.ui.TextareaRenderer|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        enterDocument(): void;
        getMaxHeight(): number;
        getMinHeight(): number;
        /**
         * Gets the textarea's value.
         */
        getValue(): string;
        /**
         * Resizes the textarea vertically.
         */
        resize(): void;
        setContent(content: string|Node|null|Node[]|NodeListOf<Node>): void;
        setEnabled(enable: boolean): void;
        /**
         * Sets a maximum height for the textarea, and calls resize if rendered.
         * @param height New maxHeight value.
         */
        setMaxHeight(height: number): void;
        /**
         * Sets a minimum height for the textarea, and calls resize if rendered.
         * @param height New minHeight value.
         */
        setMinHeight(height: number): void;
        /**
         * Sets the default text for the textarea.
         * @param text The default text for the textarea.
         */
        setPlaceholder(text: string): void;
        /**
         * Sets the textarea's value.
         * @param value The value property for the textarea, will be cast to a
         * string by the browser when setting textarea.value.
         */
        setValue(value: any): void;
    }
}
declare module 'goog:goog.ui.Textarea' {
    import alias = ಠ_ಠ.clutz.goog.ui.Textarea;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.Textarea {
    /**
     * Constants for event names.
     */
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        RESIZE: EventType,
    };
}
declare module 'goog:goog.ui.Textarea.EventType' {
    import alias = ಠ_ಠ.clutz.goog.ui.Textarea.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Renderer for {@link goog.ui.Textarea}s.  Renders and decorates native
     * HTML textarea elements.  Since native HTML textareas have built-in
     * support for many features, overrides many expensive (and redundant)
     * superclass methods to be no-ops.
     */
    class TextareaRenderer extends TextareaRenderer_Instance {
        /**
         * Default CSS class to be applied to the root element of components
         * rendered by this renderer.
         */
        static CSS_CLASS: string;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.TextareaRenderer;
        static instance_: ಠ_ಠ.clutz.goog.ui.TextareaRenderer;
    }
    class TextareaRenderer_Instance extends
        ಠ_ಠ.clutz.goog.ui.ControlRenderer_Instance {
        /**
         * Overrides {@link goog.ui.TextareaRenderer#canDecorate} by returning
         * true only if the element is an HTML textarea.
         * @param element Element to decorate.
         */
        canDecorate(element: GlobalElement|null): boolean;
        /**
         * Returns the textarea's contents wrapped in an HTML textarea element.
         * Sets the textarea's disabled attribute as needed.
         * @param textarea Textarea to render.
         */
        createDom(textarea: ಠ_ಠ.clutz.goog.ui.Control|null): GlobalElement;
        decorate(
            control: ಠ_ಠ.clutz.goog.ui.Control|null,
            element: GlobalElement|null): GlobalElement|null;
        getAriaRole(): ಠ_ಠ.clutz.goog.a11y.aria.Role|undefined;
        getCssClass(): string;
        /**
         * Textareas are always focusable as long as they are enabled.
         */
        isFocusable(textarea: ಠ_ಠ.clutz.goog.ui.Control|null): boolean;
        setContent(
            element: GlobalElement|null,
            value: string|Node|null|Node[]|NodeListOf<Node>): void;
        /**
         * Textareas also expose the DISABLED state in the HTML textarea's
         * {@code disabled} attribute.
         */
        setState(
            textarea: ಠ_ಠ.clutz.goog.ui.Control|null,
            state: ಠ_ಠ.clutz.goog.ui.Component.State, enable: boolean): void;
    }
}
declare module 'goog:goog.ui.TextareaRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.TextareaRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * A toggle button, with checkbox-like semantics.  Rendered using
     * {@link goog.ui.CustomButtonRenderer} by default, though any
     * {@link goog.ui.ButtonRenderer} would work.
     */
    class ToggleButton extends ToggleButton_Instance {}
    class ToggleButton_Instance extends ಠ_ಠ.clutz.goog.ui.Button_Instance {
        /**
         * A toggle button, with checkbox-like semantics.  Rendered using
         * {@link goog.ui.CustomButtonRenderer} by default, though any
         * {@link goog.ui.ButtonRenderer} would work.
         * @param content Text caption or existing DOM structure to display as
         * the button's caption.
         * @param opt_renderer Renderer used to render or decorate the button;
         * defaults to {@link goog.ui.CustomButtonRenderer}.
         * @param opt_domHelper Optional DOM helper, used for document
         * interaction.
         */
        constructor(
            content: string|Node|null|Node[]|NodeListOf<Node>,
            opt_renderer?: ಠ_ಠ.clutz.goog.ui.ButtonRenderer|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
    }
}
declare module 'goog:goog.ui.ToggleButton' {
    import alias = ಠ_ಠ.clutz.goog.ui.ToggleButton;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * A toolbar class, implemented as a {@link goog.ui.Container} that defaults
     * to having a horizontal orientation and {@link goog.ui.ToolbarRenderer} as
     * its renderer.
     */
    class Toolbar extends Toolbar_Instance {}
    class Toolbar_Instance extends ಠ_ಠ.clutz.goog.ui.Container_Instance {
        /**
         * A toolbar class, implemented as a {@link goog.ui.Container} that
         * defaults to having a horizontal orientation and {@link
         * goog.ui.ToolbarRenderer} as its renderer.
         * @param opt_renderer Renderer used to render or decorate the toolbar;
         * defaults to {@link goog.ui.ToolbarRenderer}.
         * @param opt_orientation Toolbar orientation; defaults to {@code
         * HORIZONTAL}.
         * @param opt_domHelper Optional DOM helper.
         */
        constructor(
            opt_renderer?: ಠ_ಠ.clutz.goog.ui.ToolbarRenderer|null,
            opt_orientation?: ಠ_ಠ.clutz.goog.ui.Container.Orientation|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        handleFocus(e: ಠ_ಠ.clutz.goog.events.BrowserEvent|null): void;
    }
}
declare module 'goog:goog.ui.Toolbar' {
    import alias = ಠ_ಠ.clutz.goog.ui.Toolbar;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * A button control for a toolbar.
     */
    class ToolbarButton extends ToolbarButton_Instance {}
    class ToolbarButton_Instance extends ಠ_ಠ.clutz.goog.ui.Button_Instance {
        /**
         * A button control for a toolbar.
         * @param content Text caption or existing DOM structure to display as
         * the button's caption.
         * @param opt_renderer Optional renderer used to render or decorate the
         * button; defaults to {@link goog.ui.ToolbarButtonRenderer}.
         * @param opt_domHelper Optional DOM helper, used for document
         * interaction.
         */
        constructor(
            content: string|Node|null|Node[]|NodeListOf<Node>,
            opt_renderer?: ಠ_ಠ.clutz.goog.ui.ButtonRenderer|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
    }
}
declare module 'goog:goog.ui.ToolbarButton' {
    import alias = ಠ_ಠ.clutz.goog.ui.ToolbarButton;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Toolbar-specific renderer for {@link goog.ui.Button}s, based on {@link
     * goog.ui.CustomButtonRenderer}.
     */
    class ToolbarButtonRenderer extends ToolbarButtonRenderer_Instance {
        /**
         * Default CSS class to be applied to the root element of buttons
         * rendered by this renderer.
         */
        static CSS_CLASS: string;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.ToolbarButtonRenderer;
        static instance_: ಠ_ಠ.clutz.goog.ui.ToolbarButtonRenderer;
    }
    class ToolbarButtonRenderer_Instance extends
        ಠ_ಠ.clutz.goog.ui.CustomButtonRenderer_Instance {
        /**
         * Returns the CSS class to be applied to the root element of buttons
         * rendered using this renderer.
         */
        getCssClass(): string;
    }
}
declare module 'goog:goog.ui.ToolbarButtonRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.ToolbarButtonRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * A color menu button control for a toolbar.
     */
    class ToolbarColorMenuButton extends ToolbarColorMenuButton_Instance {}
    class ToolbarColorMenuButton_Instance extends
        ಠ_ಠ.clutz.goog.ui.ColorMenuButton_Instance {
        /**
         * A color menu button control for a toolbar.
         * @param content Text caption or existing DOM structure to display as
         * the button's caption.
         * @param opt_menu Menu to render under the button when clicked; should
         * contain at least one {@link goog.ui.ColorPalette} if present.
         * @param opt_renderer Optional renderer used to render or decorate the
         * button; defaults to {@link goog.ui.ToolbarColorMenuButtonRenderer}.
         * @param opt_domHelper Optional DOM helper, used for document
         * interaction.
         */
        constructor(
            content: string|Node|null|Node[]|NodeListOf<Node>,
            opt_menu?: ಠ_ಠ.clutz.goog.ui.Menu|null,
            opt_renderer?: ಠ_ಠ.clutz.goog.ui.ColorMenuButtonRenderer|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
    }
}
declare module 'goog:goog.ui.ToolbarColorMenuButton' {
    import alias = ಠ_ಠ.clutz.goog.ui.ToolbarColorMenuButton;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Toolbar-style renderer for {@link goog.ui.ColorMenuButton}s.
     */
    class ToolbarColorMenuButtonRenderer extends
        ToolbarColorMenuButtonRenderer_Instance {
        static getInstance(): ಠ_ಠ.clutz.goog.ui.ToolbarColorMenuButtonRenderer;
        static instance_: ಠ_ಠ.clutz.goog.ui.ToolbarColorMenuButtonRenderer;
    }
    class ToolbarColorMenuButtonRenderer_Instance extends
        ಠ_ಠ.clutz.goog.ui.ToolbarMenuButtonRenderer_Instance {
        /**
         * Overrides the superclass implementation by wrapping the caption text
         * or DOM structure in a color indicator element.  Creates the following
         * DOM structure:
         *
         * <div class="goog-inline-block goog-toolbar-menu-button-caption">
         * <div class="goog-color-menu-button-indicator">
         * Contents...
         * </div>
         * </div>
         * @param content Text caption or DOM structure.
         * @param dom DOM helper, used for document interaction.
         */
        createCaption(
            content: string|Node|null|Node[]|NodeListOf<Node>,
            dom: ಠ_ಠ.clutz.goog.dom.DomHelper|null): GlobalElement;
        /**
         * Initializes the button's DOM when it enters the document.  Overrides
         * the superclass implementation by making sure the button's color
         * indicator is initialized.
         * @param button goog.ui.ColorMenuButton whose DOM is to be initialized
         * as it enters the document.
         */
        initializeDom(button: ಠ_ಠ.clutz.goog.ui.Control|null): void;
        /**
         * Takes a color menu button control's root element and a value object
         * (which is assumed to be a color), and updates the button's DOM to
         * reflect the new color.  Overrides {@link
         * goog.ui.ButtonRenderer#setValue}.
         * @param element The button control's root element (if rendered).
         * @param value New value; assumed to be a color spec string.
         */
        setValue(element: GlobalElement|null, value: any): any;
    }
}
declare module 'goog:goog.ui.ToolbarColorMenuButtonRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.ToolbarColorMenuButtonRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * A menu button control for a toolbar.
     */
    class ToolbarMenuButton extends ToolbarMenuButton_Instance {}
    class ToolbarMenuButton_Instance extends
        ಠ_ಠ.clutz.goog.ui.MenuButton_Instance {
        /**
         * A menu button control for a toolbar.
         * @param content Text caption or existing DOM structure to display as
         * the button's caption.
         * @param opt_menu Menu to render under the button when clicked.
         * @param opt_renderer Optional renderer used to render or decorate the
         * button; defaults to {@link goog.ui.ToolbarMenuButtonRenderer}.
         * @param opt_domHelper Optional DOM helper, used for document
         * interaction.
         */
        constructor(
            content: string|Node|null|Node[]|NodeListOf<Node>,
            opt_menu?: ಠ_ಠ.clutz.goog.ui.Menu|null,
            opt_renderer?: ಠ_ಠ.clutz.goog.ui.ButtonRenderer|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
    }
}
declare module 'goog:goog.ui.ToolbarMenuButton' {
    import alias = ಠ_ಠ.clutz.goog.ui.ToolbarMenuButton;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Toolbar-specific renderer for {@link goog.ui.MenuButton}s, based on
     * {@link goog.ui.MenuButtonRenderer}.
     */
    class ToolbarMenuButtonRenderer extends ToolbarMenuButtonRenderer_Instance {
        /**
         * Default CSS class to be applied to the root element of menu buttons
         * rendered by this renderer.
         */
        static CSS_CLASS: string;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.ToolbarMenuButtonRenderer;
        static instance_: ಠ_ಠ.clutz.goog.ui.ToolbarMenuButtonRenderer;
    }
    class ToolbarMenuButtonRenderer_Instance extends
        ಠ_ಠ.clutz.goog.ui.MenuButtonRenderer_Instance {
        /**
         * Returns the CSS class to be applied to the root element of menu
         * buttons rendered using this renderer.
         */
        getCssClass(): string;
    }
}
declare module 'goog:goog.ui.ToolbarMenuButtonRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.ToolbarMenuButtonRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Default renderer for {@link goog.ui.Toolbar}s, based on {@link
     * goog.ui.ContainerRenderer}.
     */
    class ToolbarRenderer extends ToolbarRenderer_Instance {
        /**
         * Default CSS class to be applied to the root element of toolbars
         * rendered by this renderer.
         */
        static CSS_CLASS: string;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.ToolbarRenderer;
        static instance_: ಠ_ಠ.clutz.goog.ui.ToolbarRenderer;
    }
    class ToolbarRenderer_Instance extends
        ಠ_ಠ.clutz.goog.ui.ContainerRenderer_Instance {
        /**
         * Default renderer for {@link goog.ui.Toolbar}s, based on {@link
         * goog.ui.ContainerRenderer}.
         */
        constructor();
        /**
         * Returns the CSS class to be applied to the root element of containers
         * rendered using this renderer.
         */
        getCssClass(): string;
        /**
         * Inspects the element, and creates an instance of {@link
         * goog.ui.Control} or an appropriate subclass best suited to decorate
         * it.  Overrides the superclass implementation by recognizing HR
         * elements as separators.
         * @param element Element to decorate.
         */
        getDecoratorForChild(element: GlobalElement|
                             null): ಠ_ಠ.clutz.goog.ui.Control|null;
        /**
         * Returns the default orientation of containers rendered or decorated
         * by this renderer.  This implementation returns {@code HORIZONTAL}.
         */
        getDefaultOrientation(): ಠ_ಠ.clutz.goog.ui.Container.Orientation;
    }
}
declare module 'goog:goog.ui.ToolbarRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.ToolbarRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * A select control for a toolbar.
     */
    class ToolbarSelect extends ToolbarSelect_Instance {}
    class ToolbarSelect_Instance extends ಠ_ಠ.clutz.goog.ui.Select_Instance {
        /**
         * A select control for a toolbar.
         * @param caption Default caption or existing DOM structure to display
         * as the button's caption when nothing is selected.
         * @param opt_menu Menu containing selection options.
         * @param opt_renderer Renderer used to render or decorate the control;
         * defaults to {@link goog.ui.ToolbarMenuButtonRenderer}.
         * @param opt_domHelper Optional DOM helper, used for document
         * interaction.
         */
        constructor(
            caption: string|Node|null|Node[]|NodeListOf<Node>,
            opt_menu?: ಠ_ಠ.clutz.goog.ui.Menu|null,
            opt_renderer?: ಠ_ಠ.clutz.goog.ui.MenuButtonRenderer|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
    }
}
declare module 'goog:goog.ui.ToolbarSelect' {
    import alias = ಠ_ಠ.clutz.goog.ui.ToolbarSelect;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * A separator control for a toolbar.
     */
    class ToolbarSeparator extends ToolbarSeparator_Instance {}
    class ToolbarSeparator_Instance extends
        ಠ_ಠ.clutz.goog.ui.Separator_Instance {
        /**
         * A separator control for a toolbar.
         * @param opt_renderer Renderer to render or decorate the separator;
         * defaults to {@link goog.ui.ToolbarSeparatorRenderer}.
         * @param opt_domHelper Optional DOM helper, used for document
         * interaction.
         */
        constructor(
            opt_renderer?: ಠ_ಠ.clutz.goog.ui.ToolbarSeparatorRenderer|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
    }
}
declare module 'goog:goog.ui.ToolbarSeparator' {
    import alias = ಠ_ಠ.clutz.goog.ui.ToolbarSeparator;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Renderer for toolbar separators.
     */
    class ToolbarSeparatorRenderer extends ToolbarSeparatorRenderer_Instance {
        /**
         * Default CSS class to be applied to the root element of components
         * rendered by this renderer.
         */
        static CSS_CLASS: string;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.ToolbarSeparatorRenderer;
        static instance_: ಠ_ಠ.clutz.goog.ui.ToolbarSeparatorRenderer;
    }
    class ToolbarSeparatorRenderer_Instance extends
        ಠ_ಠ.clutz.goog.ui.MenuSeparatorRenderer_Instance {
        /**
         * Returns a styled toolbar separator implemented by the following DOM:
         *
         * <div class="goog-toolbar-separator goog-inline-block">&nbsp;</div>
         *
         * Overrides {@link goog.ui.MenuSeparatorRenderer#createDom}.
         * @param separator goog.ui.Separator to render.
         */
        createDom(separator: ಠ_ಠ.clutz.goog.ui.Control|null): GlobalElement;
        /**
         * Takes an existing element, and decorates it with the separator.
         * Overrides
         * {@link goog.ui.MenuSeparatorRenderer#decorate}.
         * @param separator goog.ui.Separator to decorate the element.
         * @param element Element to decorate.
         */
        decorate(
            separator: ಠ_ಠ.clutz.goog.ui.Control|null,
            element: GlobalElement|null): GlobalElement;
        /**
         * Returns the CSS class to be applied to the root element of components
         * rendered using this renderer.
         */
        getCssClass(): string;
    }
}
declare module 'goog:goog.ui.ToolbarSeparatorRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.ToolbarSeparatorRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * A toggle button control for a toolbar.
     */
    class ToolbarToggleButton extends ToolbarToggleButton_Instance {}
    class ToolbarToggleButton_Instance extends
        ಠ_ಠ.clutz.goog.ui.ToggleButton_Instance {
        /**
         * A toggle button control for a toolbar.
         * @param content Text caption or existing DOM structure to display as
         * the button's caption.
         * @param opt_renderer Optional renderer used to render or decorate the
         * button; defaults to {@link goog.ui.ToolbarButtonRenderer}.
         * @param opt_domHelper Optional DOM helper, used for document
         * interaction.
         */
        constructor(
            content: string|Node|null|Node[]|NodeListOf<Node>,
            opt_renderer?: ಠ_ಠ.clutz.goog.ui.ToolbarButtonRenderer|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
    }
}
declare module 'goog:goog.ui.ToolbarToggleButton' {
    import alias = ಠ_ಠ.clutz.goog.ui.ToolbarToggleButton;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Tooltip widget. Can be attached to one or more elements and is shown,
     * with a slight delay, when the the cursor is over the element or the
     * element gains focus.
     */
    class Tooltip extends Tooltip_Instance {}
    class Tooltip_Instance extends ಠ_ಠ.clutz.goog.ui.Popup_Instance {
        /**
         * Tooltip widget. Can be attached to one or more elements and is shown,
         * with a slight delay, when the the cursor is over the element or the
         * element gains focus.
         * @param opt_el Element to display tooltip for, either element
         * reference or string id.
         * @param opt_str Text message to display in tooltip.
         * @param opt_domHelper Optional DOM helper.
         */
        constructor(
            opt_el?: GlobalElement|null|string, opt_str?: string|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * Cursor position relative to the page.
         */
        cursorPosition: ಠ_ಠ.clutz.goog.math.Coordinate;
        /**
         * Element that triggered the tooltip.  Note that if a second element
         * triggers this tooltip, anchor becomes that second element, even if
         * its show is cancelled and the original tooltip survives.
         */
        anchor?: GlobalElement|null;
        /**
         * Attach to element. Tooltip will be displayed when the cursor is over
         * the element or when the element has been active for a few
         * milliseconds.
         * @param el Element to display tooltip for, either element reference or
         * string id.
         */
        attach(el: GlobalElement|null|string): void;
        /**
         * CSS class name for tooltip.
         */
        className: string;
        /**
         * Helper method called to clear the close timer.
         */
        clearHideTimer(): void;
        /**
         * Helper method called to clear the show timer.
         */
        clearShowTimer(): void;
        /**
         * Detach from element(s).
         * @param opt_el Element to detach from, either element reference or
         * string id. If no element is specified all are detached.
         */
        detach(opt_el?: GlobalElement|null|string): void;
        disposeInternal(): void;
        getActiveElement(): GlobalElement|null;
        /**
         * Find anchor containing the given element, if any.
         * @param el Element that triggered event.
         */
        getAnchorFromElement(el: GlobalElement|null): GlobalElement|null;
        getChildTooltip(): ಠ_ಠ.clutz.goog.ui.Tooltip|null;
        /**
         * Returns the dom helper that is being used on this component.
         */
        getDomHelper(): ಠ_ಠ.clutz.goog.dom.DomHelper|null;
        getElements(): ಠ_ಠ.clutz.goog.structs.Set<any>|null;
        getHideDelayMs(): number;
        getHtml(): string;
        /**
         * Return a Position instance for repositioning the tooltip. Override in
         * subclasses to customize the way repositioning is done.
         * @param activationType Information about what kind of event caused the
         * popup to be shown.
         */
        getPositioningStrategy(activationType:
                                   ಠ_ಠ.clutz.goog.ui.Tooltip.Activation):
            ಠ_ಠ.clutz.goog.positioning.AbstractPosition;
        getShowDelayMs(): number;
        getState(): ಠ_ಠ.clutz.goog.ui.Tooltip.State;
        getText(): string;
        /**
         * Handler for focus events.
         * @param event Event object.
         */
        handleFocus(event: ಠ_ಠ.clutz.goog.events.BrowserEvent|null): void;
        /**
         * Handler for mouse move events.
         * @param event MOUSEMOVE event.
         */
        handleMouseMove(event: ಠ_ಠ.clutz.goog.events.BrowserEvent|null): void;
        /**
         * Handler for mouse out and blur events.
         * @param event Event object.
         */
        handleMouseOutAndBlur(event: ಠ_ಠ.clutz.goog.events.BrowserEvent|
                              null): void;
        /**
         * Handler for mouse over events.
         * @param event Event object.
         */
        handleMouseOver(event: ಠ_ಠ.clutz.goog.events.BrowserEvent|null): void;
        /**
         * Handler for mouse out events for the tooltip element.
         * @param event Event object.
         */
        handleTooltipMouseOut(event: ಠ_ಠ.clutz.goog.events.BrowserEvent|
                              null): void;
        /**
         * Handler for mouse over events for the tooltip element.
         * @param event Event object.
         */
        handleTooltipMouseOver(event: ಠ_ಠ.clutz.goog.events.BrowserEvent|
                               null): void;
        hasActiveChild(): boolean;
        /**
         * Timer for when to hide.
         */
        hideTimer?: number;
        /**
         * Returns true if the coord is in the tooltip.
         * @param coord Coordinate being tested.
         */
        isCoordinateInTooltip(coord: ಠ_ಠ.clutz.goog.math.Coordinate|
                              null): boolean;
        /**
         * Called by timer from mouse out handler. Hides tooltip if cursor is
         * still outside element and tooltip, or if a child of tooltip has the
         * focus.
         * @param el Tooltip's anchor when hide timer was started.
         */
        maybeHide(el: GlobalElement|null|undefined): void;
        /**
         * Called by timer from mouse over handler. Shows tooltip if cursor is
         * still over the same element.
         * @param el Element to show tooltip for.
         * @param opt_pos Position to display popup at.
         */
        maybeShow(
            el: GlobalElement|null,
            opt_pos?: ಠ_ಠ.clutz.goog.positioning.AbstractPosition|null): void;
        /**
         * Called before the popup is shown.
         */
        onBeforeShow(): boolean;
        onHide(a?: Node|null): void;
        setActiveElement(activeEl: GlobalElement|null): void;
        /**
         * Sets tooltip element.
         * @param el HTML element to use as the tooltip.
         */
        setElement(el: GlobalElement|null): void;
        /**
         * Sets delay in milliseconds before tooltip is hidden once the cursor
         * leavs the element.
         * @param delay The delay in milliseconds.
         */
        setHideDelayMs(delay: number): void;
        /**
         * Sets whether tooltip requires the mouse to have moved or the anchor
         * receive focus before the tooltip will be shown.
         * @param requireInteraction Whether tooltip should require some user
         * interaction before showing tooltip.
         */
        setRequireInteraction(requireInteraction: boolean): void;
        /**
         * Sets tooltip message as HTML markup.
         * @param html HTML message to display in tooltip.
         */
        setSafeHtml(html: ಠ_ಠ.clutz.goog.html.SafeHtml): void;
        /**
         * Sets delay in milliseconds before tooltip is displayed for an
         * element.
         * @param delay The delay in milliseconds.
         */
        setShowDelayMs(delay: number): void;
        /**
         * Sets tooltip message as plain text.
         * @param str Text message to display in tooltip.
         */
        setText(str: string): void;
        /**
         * Shows tooltip for a specific element.
         * @param el Element to show tooltip for.
         * @param opt_pos Position to display popup at.
         */
        showForElement(
            el: GlobalElement|null,
            opt_pos?: ಠ_ಠ.clutz.goog.positioning.AbstractPosition|null): void;
        /**
         * Timer for when to show.
         */
        showTimer?: number;
        /**
         * Helper method called to start the close timer.
         */
        startHideTimer(): void;
        /**
         * Helper method, starts timer that calls maybeShow. Parameters are
         * passed to the maybeShow method.
         * @param el Element to show tooltip for.
         * @param opt_pos Position to display popup at.
         */
        startShowTimer(
            el: GlobalElement|null,
            opt_pos?: ಠ_ಠ.clutz.goog.positioning.AbstractPosition|null): void;
    }
}
declare namespace ಠ_ಠ.clutz.goog.ui.Tooltip {
    enum Activation {
        CURSOR,
        FOCUS,
    }
}
declare module 'goog:goog.ui.Tooltip' {
    import alias = ಠ_ಠ.clutz.goog.ui.Tooltip;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.Tooltip {
    /**
     * Popup position implementation that positions the popup (the tooltip in
     * this case) based on the cursor position. It's positioned below the cursor
     * to the right if there's enough room to fit all of it inside the Viewport.
     * Otherwise it's displayed as far right as possible either above or below
     * the element.
     *
     * Used to position tooltips triggered by the cursor.
     */
    class CursorTooltipPosition extends CursorTooltipPosition_Instance {}
    class CursorTooltipPosition_Instance extends
        ಠ_ಠ.clutz.goog.positioning.ViewportPosition_Instance {
        /**
         * Popup position implementation that positions the popup (the tooltip
         * in this case) based on the cursor position. It's positioned below the
         * cursor to the right if there's enough room to fit all of it inside
         * the Viewport. Otherwise it's displayed as far right as possible
         * either above or below the element.
         *
         * Used to position tooltips triggered by the cursor.
         * @param arg1 Left position or coordinate.
         * @param opt_arg2 Top position.
         */
        constructor(
            arg1: number|ಠ_ಠ.clutz.goog.math.Coordinate, opt_arg2?: number);
        /**
         * Repositions the popup based on cursor position.
         * @param element The DOM element of the popup.
         * @param popupCorner The corner of the popup element that that should
         * be positioned adjacent to the anchorElement.
         * @param opt_margin A margin specified in pixels.
         */
        reposition(
            element: GlobalElement|null,
            popupCorner: ಠ_ಠ.clutz.goog.positioning.Corner,
            opt_margin?: ಠ_ಠ.clutz.goog.math.Box|null,
            a?: ಠ_ಠ.clutz.goog.math.Size|null): void;
    }
}
declare module 'goog:goog.ui.Tooltip.CursorTooltipPosition' {
    import alias = ಠ_ಠ.clutz.goog.ui.Tooltip.CursorTooltipPosition;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.Tooltip {
    /**
     * Popup position implementation that positions the popup (the tooltip in
     * this case) based on the element position. It's positioned below the
     * element to the right if there's enough room to fit all of it inside the
     * Viewport. Otherwise it's displayed as far right as possible either above
     * or below the element.
     *
     * Used to position tooltips triggered by focus changes.
     */
    class ElementTooltipPosition extends ElementTooltipPosition_Instance {}
    class ElementTooltipPosition_Instance extends
        ಠ_ಠ.clutz.goog.positioning.AnchoredPosition_Instance {
        /**
         * Popup position implementation that positions the popup (the tooltip
         * in this case) based on the element position. It's positioned below
         * the element to the right if there's enough room to fit all of it
         * inside the Viewport. Otherwise it's displayed as far right as
         * possible either above or below the element.
         *
         * Used to position tooltips triggered by focus changes.
         * @param element The element to anchor the popup at.
         */
        constructor(element: GlobalElement|null);
        /**
         * Repositions the popup based on element position.
         * @param element The DOM element of the popup.
         * @param popupCorner The corner of the popup element that should be
         * positioned adjacent to the anchorElement.
         * @param opt_margin A margin specified in pixels.
         */
        reposition(
            element: GlobalElement|null,
            popupCorner: ಠ_ಠ.clutz.goog.positioning.Corner,
            opt_margin?: ಠ_ಠ.clutz.goog.math.Box|null,
            a?: ಠ_ಠ.clutz.goog.math.Size|null): void;
    }
}
declare module 'goog:goog.ui.Tooltip.ElementTooltipPosition' {
    import alias = ಠ_ಠ.clutz.goog.ui.Tooltip.ElementTooltipPosition;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.Tooltip {
    /**
     * Possible states for the tooltip to be in.
     */
    enum State {
        INACTIVE,
        SHOWING,
        UPDATING,
        WAITING_TO_HIDE,
        WAITING_TO_SHOW,
    }
}
declare module 'goog:goog.ui.Tooltip.State' {
    import alias = ಠ_ಠ.clutz.goog.ui.Tooltip.State;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Class representing a three state checkbox menu item.
     */
    class TriStateMenuItem extends TriStateMenuItem_Instance {}
    class TriStateMenuItem_Instance extends
        ಠ_ಠ.clutz.goog.ui.MenuItem_Instance {
        /**
         * Class representing a three state checkbox menu item.
         * @param content Text caption or DOM structure to display as the
         * content of the item (use to add icons or styling to menus).
         * @param opt_model Data/model associated with the menu item.
         * @param opt_domHelper Optional DOM helper used for document
         * interactions.
         * @param opt_renderer Optional renderer.
         * @param opt_alwaysAllowPartial If true, always allow partial state.
         */
        constructor(
            content: string|Node|null|Node[]|NodeListOf<Node>,
            opt_model?: GlobalObject|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null,
            opt_renderer?: ಠ_ಠ.clutz.goog.ui.MenuItemRenderer|null,
            opt_alwaysAllowPartial?: boolean);
        getCheckedState(): ಠ_ಠ.clutz.goog.ui.TriStateMenuItem.State;
        performActionInternal(e: ಠ_ಠ.clutz.goog.events.Event|null): boolean;
        /**
         * Sets the checked state.
         * @param state The checked state.
         */
        setCheckedState(state: ಠ_ಠ.clutz.goog.ui.TriStateMenuItem.State): void;
    }
}
declare module 'goog:goog.ui.TriStateMenuItem' {
    import alias = ಠ_ಠ.clutz.goog.ui.TriStateMenuItem;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.TriStateMenuItem {
    /**
     * Checked states for component.
     */
    enum State {
        FULLY_CHECKED,
        NOT_CHECKED,
        PARTIALLY_CHECKED,
    }
}
declare module 'goog:goog.ui.TriStateMenuItem.State' {
    import alias = ಠ_ಠ.clutz.goog.ui.TriStateMenuItem.State;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Default renderer for {@link goog.ui.TriStateMenuItemRenderer}s. Each item
     * has the following structure:
     *
     * <div class="goog-tristatemenuitem">
     * <div class="goog-tristatemenuitem-checkbox"></div>
     * <div>...(content)...</div>
     * </div>
     */
    class TriStateMenuItemRenderer extends TriStateMenuItemRenderer_Instance {
        /**
         * CSS class name the renderer applies to menu item elements.
         */
        static CSS_CLASS: string;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.TriStateMenuItemRenderer;
        static instance_: ಠ_ಠ.clutz.goog.ui.TriStateMenuItemRenderer;
    }
    class TriStateMenuItemRenderer_Instance extends
        ಠ_ಠ.clutz.goog.ui.MenuItemRenderer_Instance {
        /**
         * Overrides {@link goog.ui.ControlRenderer#decorate} by initializing
         * the menu item to checkable based on whether the element to be
         * decorated has extra styling indicating that it should be.
         * @param item goog.ui.TriStateMenuItem to decorate the element.
         * @param element Element to decorate.
         */
        decorate(
            item: ಠ_ಠ.clutz.goog.ui.Control|null,
            element: GlobalElement|null): GlobalElement;
        getCssClass(): string;
    }
}
declare module 'goog:goog.ui.TriStateMenuItemRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.TriStateMenuItemRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * This creates a TwoThumbSlider object.
     */
    class TwoThumbSlider extends TwoThumbSlider_Instance {
        /**
         * The prefix we use for the CSS class names for the slider and its
         * elements.
         */
        static CSS_CLASS_PREFIX: string;
        /**
         * CSS class name for the extent thumb element.
         */
        static EXTENT_THUMB_CSS_CLASS: string;
        /**
         * CSS class name for the range highlight element.
         */
        static RANGE_HIGHLIGHT_CSS_CLASS: string;
        /**
         * CSS class name for the value thumb element.
         */
        static VALUE_THUMB_CSS_CLASS: string;
    }
    class TwoThumbSlider_Instance extends
        ಠ_ಠ.clutz.goog.ui.SliderBase_Instance {
        /**
         * This creates a TwoThumbSlider object.
         * @param opt_domHelper Optional DOM helper.
         */
        constructor(opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        extentThumb: HTMLDivElement|null;
        rangeHighlight: HTMLDivElement|null;
        valueThumb: HTMLDivElement|null;
        /**
         * Creates the thumb members for a twothumbslider. If the
         * element contains a child with a class name
         * 'goog-twothumbslider-value-thumb' (or
         * 'goog-twothumbslider-extent-thumb', respectively), then that will be
         * used as the valueThumb (or as the extentThumb, respectively). If the
         * element contains a child with a class name
         * 'goog-twothumbslider-rangehighlight', then that will be used as the
         * range highlight.
         */
        createThumbs(): void;
        getCssClass(orient: ಠ_ಠ.clutz.goog.ui.SliderBase.Orientation): string;
    }
}
declare module 'goog:goog.ui.TwoThumbSlider' {
    import alias = ಠ_ಠ.clutz.goog.ui.TwoThumbSlider;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Zippy widget. Expandable/collapsible container, clicking the header
     * toggles the visibility of the content.
     */
    class Zippy extends Zippy_Instance {}
    class Zippy_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * Zippy widget. Expandable/collapsible container, clicking the header
         * toggles the visibility of the content.
         * @param header Header element, either element reference, string id or
         * null if no header exists.
         * @param opt_content Content element (if any), either element reference
         * or string id.  If skipped, the caller should handle the TOGGLE event
         * in its own way. If a function is passed, then if will be called to
         * create the content element the first time the zippy is expanded.
         * @param opt_expanded Initial expanded/visibility state. If undefined,
         * attempts to infer the state from the DOM. Setting visibility using
         * one of the standard Soy templates guarantees correct inference.
         * @param opt_expandedHeader Element to use as the header when the zippy
         * is expanded.
         * @param opt_domHelper An optional DOM helper.
         * @param opt_role ARIA role, default TAB.
         */
        constructor(
            header: GlobalElement|null|string,
            opt_content?: GlobalElement|null|string|
            (() => GlobalElement | null),
            opt_expanded?: boolean,
            opt_expandedHeader?: GlobalElement|null|string,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null,
            opt_role?: ಠ_ಠ.clutz.goog.a11y.aria.Role);
        /**
         * Collapses content pane.
         */
        collapse(): void;
        disposeInternal(): void;
        /**
         * Expands content pane.
         */
        expand(): void;
        getAriaRole(): ಠ_ಠ.clutz.goog.a11y.aria.Role;
        getContentElement(): HTMLElement|null;
        getVisibleHeaderElement(): GlobalElement|null;
        isExpanded(): boolean;
        isHandleKeyEvents(): boolean;
        isHandleMouseEvents(): boolean;
        /**
         * Sets expanded state.
         * @param expanded Expanded/visibility state.
         */
        setExpanded(expanded: boolean): void;
        /**
         * Sets expanded internal state.
         * @param expanded Expanded/visibility state.
         */
        setExpandedInternal(expanded: boolean): void;
        /**
         * Sets whether the Zippy handles it's own keyboard events.
         * @param enable Whether the Zippy handles keyboard events.
         */
        setHandleKeyboardEvents(enable: boolean): void;
        /**
         * Sets whether the Zippy handles it's own mouse events.
         * @param enable Whether the Zippy handles mouse events.
         */
        setHandleMouseEvents(enable: boolean): void;
        /**
         * Toggles expanded state.
         */
        toggle(): void;
        /**
         * Updates the header element's className and ARIA (accessibility)
         * EXPANDED state.
         * @param expanded Expanded/visibility state.
         */
        updateHeaderClassName(expanded: boolean): void;
    }
}
declare module 'goog:goog.ui.Zippy' {
    import alias = ಠ_ಠ.clutz.goog.ui.Zippy;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.Zippy.Events {
    var ACTION: string;
    var TOGGLE: string;
}
declare module 'goog:goog.ui.Zippy.Events' {
    import alias = ಠ_ಠ.clutz.goog.ui.Zippy.Events;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Object representing a zippy toggle event.
     */
    class ZippyEvent extends ZippyEvent_Instance {}
    class ZippyEvent_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
        /**
         * Object representing a zippy toggle event.
         * @param type Event type.
         * @param target Zippy widget initiating event.
         * @param expanded Expanded state.
         */
        constructor(
            type: string, target: ಠ_ಠ.clutz.goog.ui.Zippy|null,
            expanded: boolean,
            opt_triggeringEvent?: ಠ_ಠ.clutz.goog.events.BrowserEvent);
        /**
         * The expanded state.
         */
        expanded: boolean;
        /**
         * For ACTION events, the key or mouse event that triggered this event,
         * if there was one.
         */
        triggeringEvent: ಠ_ಠ.clutz.goog.events.BrowserEvent|null;
    }
}
declare module 'goog:goog.ui.ZippyEvent' {
    import alias = ಠ_ಠ.clutz.goog.ui.ZippyEvent;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.ac {
    /**
     * Factory function for building a basic autocomplete widget that
     * autocompletes an inputbox or text area from a data array.
     * @param data Data array.
     * @param input Input element or text area.
     * @param opt_multi Whether to allow multiple entries separated with
     * semi-colons or commas.
     * @param opt_useSimilar use similar matches. e.g. "gost" => "ghost".
     */
    function createSimpleAutoComplete(
        data: any[]|null, input: GlobalElement|null, opt_multi?: boolean,
        opt_useSimilar?: boolean): ಠ_ಠ.clutz.goog.ui.ac.AutoComplete;
}
declare module 'goog:goog.ui.ac' {
    import alias = ಠ_ಠ.clutz.goog.ui.ac;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.ac {
    /**
     * Basic class for matching words in an array
     */
    class ArrayMatcher extends ArrayMatcher_Instance {
        /**
         * Matches the token against the specified rows, first looking for
         * prefix matches and if that fails, then looking for similar matches.
         * @param token Token to match.
         * @param maxMatches Max number of matches to return.
         * @param rows Rows to search for matches. Can be objects if they have a
         * toString method that returns the value to match against.
         */
        static getMatchesForRows(
            token: string, maxMatches: number, rows: any[]): any[];
        /**
         * Matches the token against the start of words in the row.
         * @param token Token to match.
         * @param maxMatches Max number of matches to return.
         * @param rows Rows to search for matches. Can be objects if they have a
         * toString method that returns the value to match against.
         */
        static getPrefixMatchesForRows(
            token: string, maxMatches: number, rows: any[]): any[];
        /**
         * Matches the token against similar rows, by calculating "distance"
         * between the terms.
         * @param token Token to match.
         * @param maxMatches Max number of matches to return.
         * @param rows Rows to search for matches. Can be objects if they have a
         * toString method that returns the value to match against.
         */
        static getSimilarMatchesForRows(
            token: string, maxMatches: number, rows: any[]): any[];
    }
    class ArrayMatcher_Instance {
        private noStructuralTyping_: any;
        /**
         * Basic class for matching words in an array
         * @param rows Dictionary of items to match.  Can be objects if they
         * have a toString method that returns the value to match against.
         * @param opt_noSimilar if true, do not do similarity matches for the
         * input token against the dictionary.
         */
        constructor(rows: any[]|null, opt_noSimilar?: boolean);
        rows_: any[];
        useSimilar_: boolean;
        /**
         * Matches the token against the start of words in the row.
         * @param token Token to match.
         * @param maxMatches Max number of matches to return.
         */
        getPrefixMatches(token: string, maxMatches: number): any[];
        /**
         * Matches the token against similar rows, by calculating "distance"
         * between the terms.
         * @param token Token to match.
         * @param maxMatches Max number of matches to return.
         */
        getSimilarRows(token: string, maxMatches: number): any[];
        /**
         * Function used to pass matches to the autocomplete
         * @param token Token to match.
         * @param maxMatches Max number of matches to return.
         * @param matchHandler callback to execute after matching.
         * @param opt_fullString The full string from the input box.
         */
        requestMatchingRows(
            token: string, maxMatches: number,
            matchHandler: (...a: any[]) => any, opt_fullString?: string): void;
        /**
         * Replaces the rows that this object searches over.
         * @param rows Dictionary of items to match.
         */
        setRows(rows: any[]|null): void;
    }
}
declare module 'goog:goog.ui.ac.ArrayMatcher' {
    import alias = ಠ_ಠ.clutz.goog.ui.ac.ArrayMatcher;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.ac {
    /**
     * This is the central manager class for an AutoComplete instance. The
     * matcher can specify disabled rows that should not be hilited or selected
     * by implementing <code>isRowDisabled(row):boolean</code> for each
     * autocomplete row. No row will be considered disabled if this method is
     * not implemented.
     */
    class AutoComplete extends AutoComplete_Instance {}
    class AutoComplete_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * This is the central manager class for an AutoComplete instance. The
         * matcher can specify disabled rows that should not be hilited or
         * selected by implementing <code>isRowDisabled(row):boolean</code> for
         * each autocomplete row. No row will be considered disabled if this
         * method is not implemented.
         * @param matcher A data source and row matcher, implements
         * <code>requestMatchingRows(token, maxMatches, matchCallback)</code>.
         * @param renderer An object that implements <code>
         * isVisible():boolean<br> renderRows(rows:Array, token:string,
         * target:Element);<br> hiliteId(row-id:number);<br> dismiss();<br>
         * dispose(): </code>.
         * @param selectionHandler An object that implements <code>
         * selectRow(row);<br> update(opt_force); </code>.
         */
        constructor(
            matcher: GlobalObject|null,
            renderer: ಠ_ಠ.clutz.goog.events.EventTarget|null,
            selectionHandler: GlobalObject|null);
        /**
         * Id of the first row in autocomplete menu. Note that new ids are
         * assigned every time new suggestions are fetched.
         *
         * TODO(chrishenry): Figure out what subclass does with this value
         * and whether we should expose a more proper API.
         */
        firstRowId_: number;
        /**
         * Id of the currently highlighted row.
         */
        hiliteId_: number;
        /**
         * A data-source which provides autocomplete suggestions.
         *
         * TODO(chrishenry): Tighten the type to
         * !goog.ui.ac.AutoComplete.Matcher.
         */
        matcher_: GlobalObject|null;
        /**
         * A renderer to render/show/highlight/hide the autocomplete menu.
         */
        renderer_: ಠ_ಠ.clutz.goog.events.EventTarget|null;
        /**
         * Autocomplete suggestion items.
         */
        rows_: any[]|null;
        /**
         * A handler which interacts with the input DOM element (textfield,
         * textarea, or richedit).
         *
         * TODO(chrishenry): Tighten the type to !Object.
         */
        selectionHandler_: GlobalObject|null;
        /**
         * The target HTML node for displaying.
         */
        target_: GlobalElement|null;
        /**
         * Currently typed token which will be used for completion.
         */
        token_: string|null;
        /**
         * Attaches the autocompleter to a text area or text input element
         * with an anchor element. The anchor element is the element the
         * autocomplete box will be positioned against.
         * @param inputElement The input element. May be 'textarea', text
         * 'input' element, or any other element that exposes similar interface.
         * @param anchorElement The anchor element.
         */
        attachInputWithAnchor(
            inputElement: GlobalElement|null,
            anchorElement: GlobalElement|null): void;
        /**
         * Attach text areas or input boxes to the autocomplete by DOM
         * reference.  After elements are attached to the autocomplete, when a
         * user types they will see the autocomplete drop down.
         * @param var_args Variable args: Input or text area elements to attach
         * the autocomplete too.
         */
        attachInputs(...var_args: (GlobalElement|null|undefined)[]): void;
        /**
         * Cancel the active delayed dismiss if there is one.
         */
        cancelDelayedDismiss(): void;
        /**
         * Detach text areas or input boxes to the autocomplete by DOM
         * reference.
         * @param var_args Variable args: Input or text area elements to detach
         * from the autocomplete.
         */
        detachInputs(...var_args: (GlobalElement|null|undefined)[]): void;
        /**
         * Clears out the token, rows, and hilite, and calls
         * <code>renderer.dismiss()</code>
         */
        dismiss(): void;
        /**
         * Call a dismiss after a delay, if there's already a dismiss active,
         * ignore.
         */
        dismissOnDelay(): void;
        disposeInternal(): void;
        getAllSuggestions(): any[];
        getHighlightedId(): number;
        /**
         * Gets the index corresponding to a particular id.
         * @param id A unique id for the row.
         */
        getIndexOfId(id: number): number;
        getMatcher(): GlobalObject;
        getRenderer(): ಠ_ಠ.clutz.goog.events.EventTarget|null;
        getRowCount(): number;
        getSelectionHandler(): GlobalObject;
        getSuggestion(index: number): GlobalObject|null;
        getSuggestionCount(): number;
        /**
         * Gets the current target HTML node for displaying autocomplete UI.
         */
        getTarget(): GlobalElement|null;
        getToken(): string|null;
        /**
         * Generic event handler that handles any events this object is
         * listening to.
         * @param e Event Object.
         */
        handleEvent(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Returns whether or not the autocomplete is open and has a highlighted
         * row.
         */
        hasHighlight(): boolean;
        /**
         * Hilites the id if it's valid and the row is not disabled, otherwise
         * does nothing.
         * @param id A row id (not index).
         */
        hiliteId(id: number): boolean;
        /**
         * Hilites the index, if it's valid and the row is not disabled,
         * otherwise does nothing.
         * @param index The row's index.
         */
        hiliteIndex(index: number): boolean;
        /**
         * Moves the hilite to the next non-disabled row.
         * Calls renderer.hiliteId() when there's something to do.
         */
        hiliteNext(): boolean;
        /**
         * Moves the hilite to the previous non-disabled row.  Calls
         * renderer.hiliteId() when there's something to do.
         */
        hilitePrev(): boolean;
        isOpen(): boolean;
        /**
         * Renders the rows and adds highlighting.
         * @param rows Set of data that match the given token.
         * @param opt_options If true, keeps the currently hilited (by index)
         * element hilited. If false not. Otherwise a RenderOptions object.
         */
        renderRows(
            rows: any[],
            opt_options?: boolean|ಠ_ಠ.clutz.goog.ui.ac.RenderOptions|
            null): void;
        /**
         * If there are any current matches, this passes the hilited row data to
         * <code>selectionHandler.selectRow()</code>
         */
        selectHilited(): boolean;
        /**
         * Sets whether or not the up/down arrow can unhilite all rows.
         * @param allowFreeSelect true iff the up arrow can unhilite all rows.
         */
        setAllowFreeSelect(allowFreeSelect: boolean): void;
        /**
         * Sets whether or not the first row should be highlighted by default.
         * @param autoHilite true iff the first row should be highlighted by
         * default.
         */
        setAutoHilite(autoHilite: boolean): void;
        /**
         * Sets the data source providing the autocomplete suggestions.
         *
         * See constructor documentation for the interface.
         * @param matcher The matcher.
         */
        setMatcher(matcher: GlobalObject): void;
        /**
         * Sets the max number of matches to fetch from the Matcher.
         * @param max Max number of matches.
         */
        setMaxMatches(max: number): void;
        /**
         * Sets the renderer that renders/shows/highlights/hides the
         * autocomplete menu.
         *
         * See constructor documentation for the expected renderer API.
         * @param renderer The renderer.
         */
        setRenderer(renderer: ಠ_ಠ.clutz.goog.events.EventTarget|null): void;
        /**
         * Sets the current target HTML node for displaying autocomplete UI.
         * Can be an implementation specific definition of how to display UI in
         * relation to the target node. This target will be passed into
         * <code>renderer.renderRows()</code>
         * @param target The current target HTML node for displaying
         * autocomplete UI.
         */
        setTarget(target: GlobalElement|null): void;
        /**
         * Sets the token to match against.  This triggers calls to the Matcher
         * to fetch the matches (up to maxMatches), and then it triggers a call
         * to <code>renderer.renderRows()</code>.
         * @param token The string for which to search in the Matcher.
         * @param opt_fullString Optionally, the full string in the input field.
         */
        setToken(token: string, opt_fullString?: string): void;
        /**
         * Sets the current token (without changing the rendered
         * autocompletion).
         *
         * NOTE(chrishenry): This method will likely go away when we figure
         * out a better API.
         * @param token The new token.
         */
        setTokenInternal(token: string|null): void;
        /**
         * Sets whether or not to request new suggestions immediately after
         * completion of a suggestion.
         * @param triggerSuggestionsOnUpdate true iff completion should fetch
         * new suggestions.
         */
        setTriggerSuggestionsOnUpdate(triggerSuggestionsOnUpdate: boolean):
            void;
        /**
         * Sets whether or not selections can wrap around the edges.
         * @param wrap true iff sections should wrap around the edges.
         */
        setWrap(wrap: boolean): void;
        /**
         * Forces an update of the display.
         * @param opt_force Whether to force an update.
         */
        update(opt_force?: boolean): void;
    }
}
declare namespace ಠ_ಠ.clutz.goog.ui.ac.AutoComplete {
    type Matcher = {
        isRowDisabled?: (...a: any[]) => any,
        requestMatchingRows?: (...a: any[]) => any
    };
}
declare module 'goog:goog.ui.ac.AutoComplete' {
    import alias = ಠ_ಠ.clutz.goog.ui.ac.AutoComplete;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.ac.AutoComplete {
    /**
     * Events associated with the autocomplete
     */
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        CANCEL_DISMISS: EventType,
        DISMISS: EventType,
        HILITE: EventType,
        ROW_HILITE: EventType,
        SELECT: EventType,
        SUGGESTIONS_UPDATE: EventType,
        UPDATE: EventType,
    };
}
declare module 'goog:goog.ui.ac.AutoComplete.EventType' {
    import alias = ಠ_ಠ.clutz.goog.ui.ac.AutoComplete.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.ac {
    /**
     * A matcher which wraps another (typically slow) matcher and
     * keeps a client-side cache of the results. For instance, you can use this
     * to wrap a RemoteArrayMatcher to hide the latency of the underlying
     * matcher having to make ajax request.
     *
     * Objects in the cache are deduped on their stringified forms.
     *
     * Note - when the user types a character, they will instantly get a set of
     * local results, and then some time later, the results from the server will
     * show up.
     */
    class CachingMatcher extends CachingMatcher_Instance {}
    class CachingMatcher_Instance {
        private noStructuralTyping_: any;
        /**
         * A matcher which wraps another (typically slow) matcher and
         * keeps a client-side cache of the results. For instance, you can use
         * this to wrap a RemoteArrayMatcher to hide the latency of the
         * underlying matcher having to make ajax request.
         *
         * Objects in the cache are deduped on their stringified forms.
         *
         * Note - when the user types a character, they will instantly get a set
         * of local results, and then some time later, the results from the
         * server will show up.
         * @param baseMatcher The underlying matcher to use. Must implement
         * requestMatchingRows.
         */
        constructor(baseMatcher: GlobalObject);
        /**
         * Clears the cache.
         */
        clearCache(): void;
        /**
         * Function used to pass matches to the autocomplete.
         * @param token Token to match.
         * @param maxMatches Max number of matches to return.
         * @param matchHandler callback to execute after matching.
         */
        requestMatchingRows(
            token: string, maxMatches: number,
            matchHandler: (...a: any[]) => any): void;
        /**
         * Sets the maxMatches to use for the base matcher. If the base matcher
         * makes AJAX requests, it may help to make this a large number so that
         * the local cache gets populated quickly.
         *
         * Default value: 100.
         * @param maxMatches The value to set.
         */
        setBaseMatcherMaxMatches(maxMatches: number): void;
        /**
         * Sets the local matcher to use.
         *
         * The local matcher should be a function with the same signature as
         * {@link goog.ui.ac.ArrayMatcher.getMatchesForRows}, i.e. its arguments
         * are searchToken, maxMatches, rowsToSearch; and it returns a list of
         * matching rows.
         *
         * Default value: {@link goog.ui.ac.ArrayMatcher.getMatchesForRows}.
         */
        setLocalMatcher(
            localMatcher:
                (a: string, b: number, c: GlobalObject[]) => GlobalObject[]):
            void;
        /**
         * Sets the maximum size of the local cache. If the local cache grows
         * larger than this size, it will be emptied.
         *
         * Default value: 1000.
         * @param maxCacheSize .
         */
        setMaxCacheSize(maxCacheSize: number): void;
        /**
         * Sets the number of milliseconds with which to throttle the match
         * requests on the underlying matcher.
         *
         * Default value: 150.
         * @param throttleTime .
         */
        setThrottleTime(throttleTime: number): void;
    }
}
declare module 'goog:goog.ui.ac.CachingMatcher' {
    import alias = ಠ_ಠ.clutz.goog.ui.ac.CachingMatcher;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.ac {
    /**
     * Class for managing the interaction between an auto-complete object and a
     * text-input or textarea.
     */
    class InputHandler extends InputHandler_Instance {
        /**
         * Literals for quotes.
         */
        static QUOTE_LITERALS: string;
        /**
         * Standard list separators.
         */
        static STANDARD_LIST_SEPARATORS: string;
    }
    class InputHandler_Instance extends ಠ_ಠ.clutz.goog.Disposable_Instance {
        /**
         * Class for managing the interaction between an auto-complete object
         * and a text-input or textarea.
         * @param opt_separators Separators to split multiple entries. If none
         * passed, uses ',' and ';'.
         * @param opt_literals Characters used to delimit text literals.
         * @param opt_multi Whether to allow multiple entries (Default: true).
         * @param opt_throttleTime Number of milliseconds to throttle keyevents
         * with (Default: 150). Use -1 to disable updates on typing. Note that
         * typing the separator will update autocomplete suggestions.
         */
        constructor(
            opt_separators?: string|null, opt_literals?: string|null,
            opt_multi?: boolean|null, opt_throttleTime?: number|null);
        /**
         * The AutoComplete instance this inputhandler is associated with.
         */
        ac_: ಠ_ಠ.clutz.goog.ui.ac.AutoComplete|null;
        /**
         * Attach an instance of an AutoComplete
         * @param ac Autocomplete object.
         */
        attachAutoComplete(ac: ಠ_ಠ.clutz.goog.ui.ac.AutoComplete|null): void;
        /**
         * Attaches the input handler to a target element. The target element
         * should be a textarea, input box, or other focusable element with the
         * same interface.
         * @param target An element to attach the input handler to.
         */
        attachInput(target: GlobalElement|null|
                    ಠ_ಠ.clutz.goog.events.EventTarget): void;
        /**
         * Attaches the input handler to multiple elements.
         * @param var_args Elements to attach the input handler too.
         */
        attachInputs(...var_args: (GlobalElement|null|undefined)[]): void;
        /**
         * Detaches the input handler from the provided element.
         * @param target An element to detach the input handler from.
         */
        detachInput(target: GlobalElement|null|
                    ಠ_ಠ.clutz.goog.events.EventTarget): void;
        /**
         * Detaches the input handler from multuple elements.
         * @param var_args Variable arguments for elements to unbind from.
         */
        detachInputs(...var_args: (GlobalElement|null|undefined)[]): void;
        disposeInternal(): void;
        /**
         * Returns the current active element.
         */
        getActiveElement(): GlobalElement|null;
        /**
         * Returns the associated autocomplete instance.
         */
        getAutoComplete(): ಠ_ಠ.clutz.goog.ui.ac.AutoComplete|null;
        /**
         * Returns the current cursor position.
         */
        getCursorPosition(): number;
        /**
         * Gets the time to wait before updating the results. If the update
         * during typing flag is switched on, this delay counts from the last
         * update, otherwise from the last keypress.
         */
        getThrottleTime(): number;
        /**
         * Gets whether the result list is updated during typing.
         */
        getUpdateDuringTyping(): boolean;
        /**
         * Returns the value of the current active element.
         */
        getValue(): string;
        /**
         * Handles an element blurring.
         * @param opt_e Browser event object.
         */
        handleBlur(opt_e?: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Handles an element getting focus.
         * @param e Browser event object.
         */
        handleFocus(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Handles a key event.
         * @param e Browser event object.
         */
        handleKeyEvent(e: ಠ_ಠ.clutz.goog.events.BrowserEvent|null): boolean;
        /**
         * Handles the key up event. Registered only if needKeyUpListener
         * returns true.
         * @param e The keyup event.
         */
        handleKeyUp(e: ಠ_ಠ.clutz.goog.events.Event|null): boolean;
        /**
         * For subclasses to override to handle the mouse-down event.
         * @param e Browser event object.
         */
        handleMouseDown(e: ಠ_ಠ.clutz.goog.events.BrowserEvent|null): void;
        needKeyUpListener(): boolean;
        /**
         * Parses a text area or input box for the currently highlighted token.
         */
        parseToken(): string;
        /**
         * Helper function that does the logic to handle an element blurring.
         */
        processBlur(): void;
        /**
         * Registers handlers for the active element when it receives focus.
         * @param target The element to focus.
         */
        processFocus(target: GlobalElement|null): void;
        /**
         * Selects the given row.  Implements the SelectionHandler interface.
         * @param row The row to select.
         * @param opt_multi Should this be treated as a single or multi-token
         * auto-complete?  Overrides previous setting of opt_multi on
         * constructor.
         */
        selectRow(row: GlobalObject|null, opt_multi?: boolean): boolean;
        /**
         * Sets the cursor at the given position.
         * @param pos The index of the cursor position.
         */
        setCursorPosition(pos: number): void;
        /**
         * Sets whether new tokens should be generated from literals.  That is,
         * should hello'world be two tokens, assuming ' is a literal?
         * @param newValue boolean value indicating whether or not new tokens
         * should be generated from literals.
         */
        setGenerateNewTokenOnLiteral(newValue: boolean): void;
        /**
         * Sets whether we will prevent the default input behavior (moving focus
         * to the next focusable  element) on TAB.
         * @param newValue Whether to preventDefault on TAB.
         */
        setPreventDefaultOnTab(newValue: boolean): void;
        /**
         * Sets whether we will prevent highlighted item selection on TAB.
         * @param newValue Whether to prevent selection on TAB.
         */
        setPreventSelectionOnTab(newValue: boolean): void;
        /**
         * Sets whether a row has just been selected.
         * @param justSelected Whether or not the row has just been selected.
         */
        setRowJustSelected(justSelected: boolean): void;
        /**
         * Sets whether separators perform autocomplete.
         * @param newValue Whether to autocomplete on separators.
         */
        setSeparatorCompletes(newValue: boolean): void;
        /**
         * Sets whether separators perform autocomplete.
         * @param newValue Whether to autocomplete on separators.
         */
        setSeparatorSelects(newValue: boolean): void;
        /**
         * Sets the entry separator characters.
         * @param separators The separator characters to set.
         * @param opt_defaultSeparators The defaultSeparator character to set.
         */
        setSeparators(separators: string, opt_defaultSeparators?: string): void;
        /**
         * Sets the time to wait before updating the results.
         * @param time New throttle time in milliseconds.
         */
        setThrottleTime(time: number): void;
        /**
         * Sets the text of the current token without updating the autocomplete
         * choices.
         * @param tokenText The text for the current token.
         * @param opt_multi Should this be treated as a single or multi-token
         * auto-complete?  Overrides previous setting of opt_multi on
         * constructor.
         */
        setTokenText(tokenText: string, opt_multi?: boolean): void;
        /**
         * Sets the regular expression used to trim the tokens before passing
         * them to the matcher:  every substring that matches the given regular
         * expression will be removed.  This can also be set to null to disable
         * trimming.
         * @param trimmer Regexp to use for trimming or null to disable it.
         */
        setTrimmingRegExp(trimmer: RegExp|null): void;
        /**
         * Sets whether the result list should be updated during typing.
         * @param value New value of the flag.
         */
        setUpdateDuringTyping(value: boolean): void;
        /**
         * Sets whether to flip the orientation of up & down for hiliting next
         * and previous autocomplete entries.
         * @param upsideDown Whether the orientation is upside down.
         */
        setUpsideDown(upsideDown: boolean): void;
        /**
         * Sets the value of the current active element.
         * @param value The new value.
         */
        setValue(value: string): void;
        /**
         * Sets whether auto-completed tokens should be wrapped with whitespace.
         * @param newValue boolean value indicating whether or not
         * auto-completed tokens should be wrapped with whitespace.
         */
        setWhitespaceWrapEntries(newValue: boolean): void;
        /**
         * Checks if an update has occurred and notified the autocomplete of the
         * new token.
         * @param opt_force If true the menu will be forced to update.
         */
        update(opt_force?: boolean): void;
    }
}
declare module 'goog:goog.ui.ac.InputHandler' {
    import alias = ಠ_ಠ.clutz.goog.ui.ac.InputHandler;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.ac {
    /**
     * Factory class for building a remote autocomplete widget that
     * autocompletes an inputbox or text area from a data array provided via
     * ajax.
     */
    class Remote extends Remote_Instance {}
    class Remote_Instance extends ಠ_ಠ.clutz.goog.ui.ac.AutoComplete_Instance {
        /**
         * Factory class for building a remote autocomplete widget that
         * autocompletes an inputbox or text area from a data array provided via
         * ajax.
         * @param url The Uri which generates the auto complete matches.
         * @param input Input element or text area.
         * @param opt_multi Whether to allow multiple entries; defaults to
         * false.
         * @param opt_useSimilar Whether to use similar matches; e.g. "gost" =>
         * "ghost".
         */
        constructor(
            url: string, input: GlobalElement|null, opt_multi?: boolean,
            opt_useSimilar?: boolean);
        matcher_: GlobalObject|null;
        /**
         * Gets the attached InputHandler object.
         */
        getInputHandler(): ಠ_ಠ.clutz.goog.ui.ac.InputHandler|null;
        /**
         * Set the post data for the matcher.
         * @param content Post data.
         */
        setContent(content: string): void;
        /**
         * Set the HTTP headers for the matcher.
         * @param headers Map of headers to add to the request.
         */
        setHeaders(headers: GlobalObject|null): void;
        /**
         * Set the send method ("GET", "POST") for the matcher.
         * @param method The send method; default: GET.
         */
        setMethod(method: string): void;
        /**
         * Set the timeout interval for the matcher.
         * @param interval Number of milliseconds after which an incomplete
         * request will be aborted; 0 means no timeout is set.
         */
        setTimeoutInterval(interval: number): void;
        /**
         * Set whether or not standard highlighting should be used when
         * rendering rows.
         * @param useStandardHighlighting true if standard highlighting used.
         */
        setUseStandardHighlighting(useStandardHighlighting: boolean): void;
    }
}
declare module 'goog:goog.ui.ac.Remote' {
    import alias = ಠ_ಠ.clutz.goog.ui.ac.Remote;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.ac {
    /**
     * An array matcher that requests matches via ajax.
     */
    class RemoteArrayMatcher extends RemoteArrayMatcher_Instance {}
    class RemoteArrayMatcher_Instance extends
        ಠ_ಠ.clutz.goog.Disposable_Instance {
        /**
         * An array matcher that requests matches via ajax.
         * @param url The Uri which generates the auto complete matches.  The
         * search term is passed to the server as the 'token' query param.
         * @param opt_noSimilar If true, request that the server does not do
         * similarity matches for the input token against the dictionary. The
         * value is sent to the server as the 'use_similar' query param which is
         * either "1" (opt_noSimilar==false) or "0" (opt_noSimilar==true).
         * @param opt_xmlHttpFactory Specify the XmlHttpFactory used to retrieve
         * the matches.
         */
        constructor(
            url: string, opt_noSimilar?: boolean,
            opt_xmlHttpFactory?: ಠ_ಠ.clutz.goog.net.XmlHttpFactory|null);
        /**
         * Builds a complete GET-style URL, given the base URI and autocomplete
         * related parameter values. <b>Override this to build any customized
         * lookup URLs.</b> <b>Can be used to change request method and any post
         * content as well.</b>
         * @param uri The base URI of the request target.
         * @param token Current token in autocomplete.
         * @param maxMatches Maximum number of matches required.
         * @param useSimilar A hint to the server.
         * @param opt_fullString Complete text in the input element.
         */
        buildUrl(
            uri: string, token: string, maxMatches: number, useSimilar: boolean,
            opt_fullString?: string): string|null;
        disposeInternal(): void;
        /**
         * Parses and retrieves the array of suggestions from XHR response.
         * <b>Override this if the response is not a simple JSON array.</b>
         * @param responseText The XHR response text.
         */
        parseResponseText(responseText: string): string[]|null;
        /**
         * Retrieve a set of matching rows from the server via ajax.
         * @param token The text that should be matched; passed to the server as
         * the 'token' query param.
         * @param maxMatches The maximum number of matches requested from the
         * server; passed as the 'max_matches' query param.  The server is
         * responsible for limiting the number of matches that are returned.
         * @param matchHandler Callback to execute on the result after matching.
         * @param opt_fullString The full string from the input box.
         */
        requestMatchingRows(
            token: string, maxMatches: number,
            matchHandler: (...a: any[]) => any, opt_fullString?: string): void;
        /**
         * Set the post data.
         * @param content Post data.
         */
        setContent(content: string): void;
        /**
         * Set the HTTP headers.
         * @param headers Map of headers to add to the request.
         */
        setHeaders(headers: GlobalObject|null): void;
        /**
         * Set the send method ("GET", "POST").
         * @param method The send method; default: GET.
         */
        setMethod(method: string): void;
        /**
         * Set the timeout interval.
         * @param interval Number of milliseconds after which an incomplete
         * request will be aborted; 0 means no timeout is set.
         */
        setTimeoutInterval(interval: number): void;
        /**
         * Returns whether the suggestions should be updated?
         * <b>Override this to prevent updates eg - when token is empty.</b>
         * @param uri The base URI of the request target.
         * @param token Current token in autocomplete.
         * @param maxMatches Maximum number of matches required.
         * @param useSimilar A hint to the server.
         * @param opt_fullString Complete text in the input element.
         */
        shouldRequestMatches(
            uri: string, token: string, maxMatches: number, useSimilar: boolean,
            opt_fullString?: string): boolean;
        /**
         * Handles the XHR response.
         * @param token The XHR autocomplete token.
         * @param matchHandler The AutoComplete match handler.
         * @param event The XHR success event.
         */
        xhrCallback(
            token: string, matchHandler: (...a: any[]) => any,
            event: ಠ_ಠ.clutz.goog.events.Event|null): void;
    }
}
declare module 'goog:goog.ui.ac.RemoteArrayMatcher' {
    import alias = ಠ_ಠ.clutz.goog.ui.ac.RemoteArrayMatcher;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.ac {
    /**
     * A simple class that contains options for rendering a set of autocomplete
     * matches.  Used as an optional argument in the callback from the matcher.
     */
    class RenderOptions extends RenderOptions_Instance {}
    class RenderOptions_Instance {
        private noStructuralTyping_: any;
        getAutoHilite(): boolean|undefined;
        getPreserveHilited(): boolean;
        setAutoHilite(flag: boolean): void;
        setPreserveHilited(flag: boolean): void;
    }
}
declare module 'goog:goog.ui.ac.RenderOptions' {
    import alias = ಠ_ಠ.clutz.goog.ui.ac.RenderOptions;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.ac {
    /**
     * Class for rendering the results of an auto-complete in a drop down list.
     */
    class Renderer extends Renderer_Instance {
        /**
         * The delay before mouseover events are registered, in milliseconds
         */
        static DELAY_BEFORE_MOUSEOVER: number;
    }
    class Renderer_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * Class for rendering the results of an auto-complete in a drop down
         * list.
         * @param opt_parentNode optional reference to the parent element that
         * will hold the autocomplete elements. goog.dom.getDocument().body will
         * be used if this is null.
         * @param opt_customRenderer Custom full renderer to render each row.
         * Should be something with a renderRow or render method.
         * @param opt_rightAlign Determines if the autocomplete will always be
         * right aligned. False by default.
         * @param opt_useStandardHighlighting Determines if standard
         * highlighting should be applied to each row of data. Standard
         * highlighting bolds every matching substring for a given token in each
         * row. True by default.
         */
        constructor(
            opt_parentNode?: GlobalElement|null,
            opt_customRenderer?: {renderRow: any}|{render: any}|null,
            opt_rightAlign?: boolean, opt_useStandardHighlighting?: boolean);
        /**
         * Class name for active row div.  This must be a single valid class
         * name. Active row will have rowClassName & activeClassName &
         * legacyActiveClassName.
         */
        activeClassName: string;
        /**
         * Animation in progress, if any.
         */
        animation_?: ಠ_ಠ.clutz.goog.fx.Animation|null;
        /**
         * Classname for the main element.  This must be a single valid class
         * name.
         */
        className: string;
        /**
         * Class name for the bold tag highlighting the matched part of the
         * text.
         */
        highlightedClassName: string;
        /**
         * The index of the currently highlighted row
         */
        hilitedRow_: number;
        /**
         * Classname for row divs.  This must be a single valid class name.
         */
        rowClassName: string;
        /**
         * Array of the node divs that hold each result that is being displayed.
         */
        rowDivs_: (GlobalElement|null)[]|null;
        /**
         * The time that the rendering of the menu rows started
         */
        startRenderingRows_: number;
        /**
         * Hide the object.
         */
        dismiss(): void;
        /**
         * Disposes of the renderer and its associated HTML.
         */
        disposeInternal(): void;
        getAnchorCorner(): ಠ_ಠ.clutz.goog.positioning.Corner;
        getAnchorElement(): GlobalElement|null;
        getAutoPosition(): boolean;
        /**
         * Gets the renderer's element.
         */
        getElement(): GlobalElement|null;
        getRightAlign(): boolean;
        getTarget(): GlobalElement|null;
        getTopAlign(): boolean;
        /**
         * Sets the 'active' class of the item with a given id.
         * @param id Id of the row to hilight. If id is -1 then no rows get
         * hilited.
         */
        hiliteId(id: number): void;
        /**
         * Removes the 'active' class from the currently selected row.
         */
        hiliteNone(): void;
        /**
         * Sets the 'active' class of the nth item.
         * @param index Index of the item to highlight.
         */
        hiliteRow(index: number): void;
        isVisible(): boolean;
        /**
         * Redraw (or draw if this is the first call) the rendered auto-complete
         * drop down.
         */
        redraw(): void;
        /**
         * Render a row by creating a div and then calling row rendering
         * callback or default row handler
         * @param row Object representing row.
         * @param token Token to highlight.
         */
        renderRowHtml(row: GlobalObject|null, token: string): GlobalElement;
        /**
         * Render the autocomplete UI
         * @param rows Matching UI rows.
         * @param token Token we are currently matching against.
         * @param opt_target Current HTML node, will position popup beneath this
         * node.
         */
        renderRows(
            rows: GlobalObject[]|null, token: string,
            opt_target?: GlobalElement|null): void;
        /**
         * Repositions the auto complete popup relative to the location node, if
         * it exists and the auto position has been set.
         */
        reposition(): void;
        /**
         * Sets the anchor element for the subsequent call to renderRows.
         * @param anchor The anchor element.
         */
        setAnchorElement(anchor: GlobalElement|null): void;
        /**
         * Sets whether the renderer should try to determine where to position
         * the drop down.
         * @param auto Whether to autoposition the drop down.
         */
        setAutoPosition(auto: boolean): void;
        /**
         * Set whether or not to highlight all matching tokens rather than just
         * the first.
         * @param highlightAllTokens Whether to highlight all matching tokens
         * rather than just the first.
         */
        setHighlightAllTokens(highlightAllTokens: boolean): void;
        setMatchWordBoundary(matchWordBoundary: boolean): void;
        /**
         * Sets the duration (in msec) of the fade animation when menu is
         * shown/hidden. Setting to 0 (default) disables animation entirely.
         * @param duration Duration (in msec) of the fade animation (or 0 for no
         * animation).
         */
        setMenuFadeDuration(duration: number): void;
        /**
         * Set whether to align autocomplete to the right of the target element.
         * @param align If true, align to right.
         */
        setRightAlign(align: boolean): void;
        setShowScrollbarsIfTooLarge(show: boolean): void;
        /**
         * Set whether to align autocomplete to top of target element
         * @param align If true, align to top.
         */
        setTopAlign(align: boolean): void;
        /**
         * Set whether or not standard highlighting should be used when
         * rendering rows.
         * @param useStandardHighlighting true if standard highlighting used.
         */
        setUseStandardHighlighting(useStandardHighlighting: boolean): void;
        /**
         * Sets the width provider element. The provider is only used on redraw
         * and as such will not automatically update on resize.
         * @param widthProvider The element whose width should be mirrored.
         * @param opt_borderWidth The with of the border of the autocomplete,
         * which will be subtracted from the width of the autocomplete dropdown.
         */
        setWidthProvider(widthProvider: Node|null, opt_borderWidth?: number):
            void;
        /**
         * Show the object.
         */
        show(): void;
        /**
         * The anchor element to position the rendered autocompleter against.
         */
        target_?: GlobalElement|null;
        /**
         * The element on which to base the width of the autocomplete.
         */
        widthProvider_: Node|null;
    }
}
declare module 'goog:goog.ui.ac.Renderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.ac.Renderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.ac.Renderer {
    /**
     * Class allowing different implementations to custom render the
     * autocomplete. Extending classes should override the render function.
     */
    class CustomRenderer extends CustomRenderer_Instance {}
    class CustomRenderer_Instance {
        private noStructuralTyping_: any;
        /**
         * Renders the autocomplete box. May be set to null.
         *
         * Because of the type, this function cannot be documented with param
         * JSDoc.
         *
         * The function expects the following parameters:
         *
         * renderer, goog.ui.ac.Renderer: The autocomplete renderer.
         * element, Element: The main element that controls the rendered
         * autocomplete. rows, Array: The current set of rows being displayed.
         * token, string: The current token that has been entered. *
         */
        render?:
            ((a: ಠ_ಠ.clutz.goog.ui.ac.Renderer | null, b: GlobalElement|null,
              c: any[]|null, d: string) => any)|null;
        /**
         * Generic function that takes a row and renders a DOM structure for
         * that row.
         * @param row Object representing row.
         * @param token Token to highlight.
         * @param node The node to render into.
         */
        renderRow(row: GlobalObject|null, token: string, node: Node|null): void;
    }
}
declare module 'goog:goog.ui.ac.Renderer.CustomRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.ac.Renderer.CustomRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.ac {
    /**
     * Class for managing the interaction between an autocomplete object and a
     * text-input or textarea.
     */
    class RichInputHandler extends RichInputHandler_Instance {}
    class RichInputHandler_Instance extends
        ಠ_ಠ.clutz.goog.ui.ac.InputHandler_Instance {
        /**
         * Class for managing the interaction between an autocomplete object and
         * a text-input or textarea.
         * @param opt_separators Seperators to split multiple entries.
         * @param opt_literals Characters used to delimit text literals.
         * @param opt_multi Whether to allow multiple entries (Default: true).
         * @param opt_throttleTime Number of milliseconds to throttle keyevents
         * with (Default: 150).
         */
        constructor(
            opt_separators?: string|null, opt_literals?: string|null,
            opt_multi?: boolean|null, opt_throttleTime?: number|null);
        /**
         * Selects the given rich row.  The row's select(target) method is
         * called.
         * @param row The row to select.
         */
        selectRow(row: GlobalObject|null, a?: boolean): boolean;
    }
}
declare module 'goog:goog.ui.ac.RichInputHandler' {
    import alias = ಠ_ಠ.clutz.goog.ui.ac.RichInputHandler;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.ac {
    /**
     * Factory class to create a rich autocomplete widget that autocompletes an
     * inputbox or textarea from data provided via ajax.  The server returns a
     * complex data structure that is used with client-side javascript functions
     * to render the results.
     */
    class RichRemote extends RichRemote_Instance {}
    class RichRemote_Instance extends ಠ_ಠ.clutz.goog.ui.ac.Remote_Instance {
        /**
         * Factory class to create a rich autocomplete widget that autocompletes
         * an inputbox or textarea from data provided via ajax.  The server
         * returns a complex data structure that is used with client-side
         * javascript functions to render the results.
         * @param url The Uri which generates the auto complete matches.
         * @param input Input element or text area.
         * @param opt_multi Whether to allow multiple entries; defaults to
         * false.
         * @param opt_useSimilar Whether to use similar matches; e.g. "gost" =>
         * "ghost".
         */
        constructor(
            url: string, input: GlobalElement|null, opt_multi?: boolean,
            opt_useSimilar?: boolean);
        /**
         * Sets the function building the rows.
         * @param rowBuilder A function(type, response) converting the type and
         * the server response to an object with two methods: render(node,
         * token) and select(target).
         */
        setRowBuilder(rowBuilder: ಠ_ಠ.clutz.goog.ui.ac.RichRemoteArrayMatcher
                          .RowBuilder): void;
        /**
         * Set the filter that is called before the array matches are returned.
         * @param rowFilter A function(rows) that returns an array of rows as a
         * subset of the rows input array.
         */
        setRowFilter(rowFilter: (...a: any[]) => any): void;
    }
}
declare module 'goog:goog.ui.ac.RichRemote' {
    import alias = ಠ_ಠ.clutz.goog.ui.ac.RichRemote;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.ac {
    /**
     * An array matcher that requests rich matches via ajax and converts them
     * into rich rows.
     */
    class RichRemoteArrayMatcher extends RichRemoteArrayMatcher_Instance {}
    class RichRemoteArrayMatcher_Instance extends
        ಠ_ಠ.clutz.goog.ui.ac.RemoteArrayMatcher_Instance {
        /**
         * An array matcher that requests rich matches via ajax and converts
         * them into rich rows.
         * @param url The Uri which generates the auto complete matches.  The
         * search term is passed to the server as the 'token' query param.
         * @param opt_noSimilar If true, request that the server does not do
         * similarity matches for the input token against the dictionary. The
         * value is sent to the server as the 'use_similar' query param which is
         * either "1" (opt_noSimilar==false) or "0" (opt_noSimilar==true).
         */
        constructor(url: string, opt_noSimilar?: boolean);
        /**
         * Retrieve a set of matching rows from the server via ajax and convert
         * them into rich rows.
         * @param token The text that should be matched; passed to the server as
         * the 'token' query param.
         * @param maxMatches The maximum number of matches requested from the
         * server; passed as the 'max_matches' query param. The server is
         * responsible for limiting the number of matches that are returned.
         * @param matchHandler Callback to execute on the result after matching.
         */
        requestMatchingRows(
            token: string, maxMatches: number,
            matchHandler: (...a: any[]) => any, a?: string): void;
        /**
         * Sets the function building the rows.
         * @param rowBuilder A function(type, response) converting the type and
         * the server response to an object with two methods: render(node,
         * token) and select(target).
         */
        setRowBuilder(rowBuilder: ಠ_ಠ.clutz.goog.ui.ac.RichRemoteArrayMatcher
                          .RowBuilder): void;
        /**
         * Set the filter that is called before the array matches are returned.
         * @param rowFilter A function(rows) that returns an array of rows as a
         * subset of the rows input array.
         */
        setRowFilter(rowFilter: (...a: any[]) => any): void;
    }
}
declare namespace ಠ_ಠ.clutz.goog.ui.ac.RichRemoteArrayMatcher {
    type RowBuilder = (a: string, b: any) => {
        render?: (a: GlobalElement, b: string) => any,
                                       select?: (a: GlobalElement) => any
    };
}
declare module 'goog:goog.ui.ac.RichRemoteArrayMatcher' {
    import alias = ಠ_ಠ.clutz.goog.ui.ac.RichRemoteArrayMatcher;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    /**
     * Decorates the element with a suitable {@link goog.ui.Component} instance,
     * if a matching decorator is found.
     * @param element Element to decorate.
     */
    function decorate(element: GlobalElement|null): ಠ_ಠ.clutz.goog.ui.Component|
        null;
}
declare module 'goog:goog.ui.decorate' {
    import alias = ಠ_ಠ.clutz.goog.ui.decorate;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.editor {
    /**
     * Creates an object that represents a dialog box.
     */
    class AbstractDialog extends AbstractDialog_Instance {}
    class AbstractDialog_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * Creates an object that represents a dialog box.
         * @param domHelper DomHelper to be used to create the dialog's dom
         * structure.
         */
        constructor(domHelper: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * Creates and returns the goog.ui.Dialog control that is being wrapped
         * by this object.
         */
        createDialogControl(): ಠ_ಠ.clutz.goog.ui.Dialog;
        /**
         * Creates and returns the event object to be used when dispatching the
         * OK event to listeners, or returns null to prevent the dialog from
         * closing. Subclasses should override this to return their own subclass
         * of goog.events.Event that includes all data a plugin would need from
         * the dialog.
         * @param e The event object dispatched by the wrapped dialog.
         */
        createOkEvent(a: ಠ_ಠ.clutz.goog.events.Event|
                      null): ಠ_ಠ.clutz.goog.events.Event|null;
        /**
         * Disposes of the dialog. If the dialog is open, it will be hidden and
         * AFTER_HIDE will be dispatched.
         */
        disposeInternal(): void;
        /**
         * The DOM helper for the parent document.
         */
        dom: ಠ_ಠ.clutz.goog.dom.DomHelper|null;
        /**
         * Returns the HTML Button element for the button added to this dialog
         * with the given button id.
         * @param buttonId The id of the button to get.
         */
        getButtonElement(buttonId: string): GlobalElement|null;
        /**
         * Returns the HTML Button element for the Cancel button in this dialog.
         */
        getCancelButtonElement(): GlobalElement|null;
        /**
         * Returns the HTML Button element for the OK button in this dialog.
         */
        getOkButtonElement(): GlobalElement|null;
        /**
         * Handles the event dispatched by the wrapped dialog control when the
         * user clicks the Cancel button. Simply dispatches a CANCEL event.
         */
        handleCancel(): boolean;
        /**
         * Handles the event dispatched by the wrapped dialog control when the
         * user clicks the OK button. Attempts to create the OK event object and
         * dispatches it if successful.
         * @param e wrapped dialog OK event object.
         */
        handleOk(e: ಠ_ಠ.clutz.goog.ui.Dialog.Event|null): boolean;
        /**
         * Hides the dialog, causing AFTER_HIDE to fire.
         */
        hide(): void;
        isOpen(): boolean;
        /**
         * Runs the handler registered on the OK button event and closes the
         * dialog if that handler succeeds. This is useful in cases such as
         * double-clicking an item in the dialog is equivalent to selecting it
         * and clicking the default button.
         */
        processOkAndClose(): void;
        /**
         * Causes the dialog box to appear, centered on the screen. Lazily
         * creates the dialog if needed.
         */
        show(): void;
    }
}
declare module 'goog:goog.ui.editor.AbstractDialog' {
    import alias = ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog {
    /**
     * A builder class for the dialog control. All methods except build return
     * this.
     */
    class Builder extends Builder_Instance {}
    class Builder_Instance {
        private noStructuralTyping_: any;
        /**
         * A builder class for the dialog control. All methods except build
         * return this.
         * @param editorDialog Editor dialog object that will wrap the wrapped
         * dialog object this builder will create.
         */
        constructor(editorDialog: ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog|null);
        /**
         * Adds a custom button to the dialog.
         * @param label The caption for the button.
         * @param handler Function called when the button is clicked. It is
         * recommended that this function be a method in the concrete subclass
         * of AbstractDialog using this Builder, and that it dispatch an event
         * (see {@link handleOk}).
         * @param opt_buttonId Identifier to be used to access the button when
         * calling AbstractDialog.getButtonElement().
         */
        addButton(
            label: string,
            handler: (a: ಠ_ಠ.clutz.goog.ui.Dialog.EventType) => any,
            opt_buttonId?: string):
            ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog.Builder;
        /**
         * Adds a Cancel button to the dialog. Clicking this button will cause
         * {@link handleCancel} to run, subsequently dispatching a CANCEL event.
         * @param opt_label The caption for the button, if not "Cancel".
         */
        addCancelButton(opt_label?: string):
            ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog.Builder;
        /**
         * Puts a CSS class on the dialog's main element.
         * @param className The class to add.
         */
        addClassName(className: string):
            ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog.Builder;
        /**
         * Adds an OK button to the dialog. Clicking this button will cause
         * {@link handleOk} to run, subsequently dispatching an OK event.
         * @param opt_label The caption for the button, if not "OK".
         */
        addOkButton(opt_label?: string):
            ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog.Builder;
        /**
         * Builds the wrapped dialog control. May only be called once, after
         * which no more methods may be called on this builder.
         */
        build(): ಠ_ಠ.clutz.goog.ui.Dialog;
        /**
         * Sets the content element of the dialog.
         * @param contentElem An element for the main body.
         */
        setContent(contentElem: GlobalElement|
                   null): ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog.Builder;
        /**
         * Sets the title of the dialog.
         * @param title Title HTML (escaped).
         */
        setTitle(title: string):
            ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog.Builder;
    }
}
declare module 'goog:goog.ui.editor.AbstractDialog.Builder' {
    import alias = ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog.Builder;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog {
    /**
     * Event type constants for events the dialog fires.
     */
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        AFTER_HIDE: EventType,
        CANCEL: EventType,
        OK: EventType,
    };
}
declare module 'goog:goog.ui.editor.AbstractDialog.EventType' {
    import alias = ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.editor {
    /**
     * Property bubble UI element.
     */
    class Bubble extends Bubble_Instance {
        /**
         * The css class name of the bubble container element.
         */
        static BUBBLE_CLASSNAME: string;
    }
    class Bubble_Instance extends ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * Property bubble UI element.
         * @param parent The parent element for this bubble.
         * @param zIndex The z index to draw the bubble at.
         */
        constructor(parent: GlobalElement|null, zIndex: number);
        /**
         * Adds a panel to the bubble.
         * @param type The type of bubble panel this is.  Should usually be the
         * same as the tagName of the targetElement.  This ensures multiple
         * bubble panels don't appear for the same element.
         * @param title The title of the panel.
         * @param targetElement The target element of the bubble.
         * @param contentFn Function that when called with a container element,
         * will add relevant panel content to it.
         * @param opt_preferTopPosition Whether to prefer placing the bubble
         * above the element instead of below it.  Defaults to preferring below.
         * If any panel prefers the top position, the top position is used.
         */
        addPanel(
            type: string, title: string, targetElement: GlobalElement|null,
            contentFn: (a: GlobalElement|null) => void,
            opt_preferTopPosition?: boolean): string;
        /**
         * Creates and adds DOM for the bubble UI to the given container.  This
         * default implementation just returns the container itself.
         * @param dom DOM helper to use.
         * @param container Element to add the new elements to.
         */
        createBubbleDom(
            dom: ಠ_ಠ.clutz.goog.dom.DomHelper,
            container: GlobalElement): GlobalElement;
        disposeInternal(): void;
        getContainerElement(): GlobalElement|null;
        getContentElement(): GlobalElement|null;
        getEventHandler(): ಠ_ಠ.clutz.goog.events.EventHandler<this>|null;
        /**
         * Returns the margin box.
         */
        getMarginBox(): ಠ_ಠ.clutz.goog.math.Box|null;
        /**
         * Returns the viewport box to use when positioning the bubble.
         */
        getViewportBox(): ಠ_ಠ.clutz.goog.math.Box|null;
        /**
         * Handles the popup's hide event by removing all panels and dispatching
         * a HIDE event.
         */
        handlePopupHide(): void;
        /**
         * Returns whether there is already a panel of the given type.
         * @param type Type of panel to check.
         */
        hasPanelOfType(type: string): boolean;
        /**
         * Returns the visibility of the bubble.
         */
        isVisible(): boolean;
        /**
         * A logger for goog.ui.editor.Bubble.
         */
        logger: ಠ_ಠ.clutz.goog.debug.Logger|null;
        /**
         * Removes the panel with the given id.
         * @param id The id of the panel.
         */
        removePanel(id: string): void;
        /**
         * Positions and displays this bubble below its targetElement. Assumes
         * that the bubbleContainer is already contained in the document object
         * it applies to.
         */
        reposition(): void;
        /**
         * Sets whether the bubble dismisses itself when the user clicks outside
         * of it.
         * @param autoHide Whether to autohide on an external click.
         */
        setAutoHide(autoHide: boolean): void;
    }
}
declare namespace ಠ_ಠ.clutz.goog.ui.editor.Bubble {
    class Panel_ extends Panel__Instance {}
    class Panel__Instance {
        private noStructuralTyping_: any;
        /**
         * The element containing this panel.
         */
        element: any;
        /**
         * Whether the panel prefers to be placed below the target element.
         */
        preferBottomPosition: boolean;
        /**
         * The target element of this bubble panel.
         */
        targetElement: GlobalElement|null;
        /**
         * The type of bubble panel.
         */
        type: string;
        getContentElement(): GlobalElement|null;
    }
}
declare module 'goog:goog.ui.editor.Bubble' {
    import alias = ಠ_ಠ.clutz.goog.ui.editor.Bubble;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.editor {
    type ButtonDescriptor = {
        caption: string | Node | null | Node[] | NodeListOf<Node>,
        classes: string | null,
        command: string,
        factory:
            ((a: string, b: string, c: string|Node|null|Node[]|NodeListOf<Node>,
              d: string|null, e: ಠ_ಠ.clutz.goog.ui.ButtonRenderer|null,
              f: ಠ_ಠ.clutz.goog.dom.DomHelper|null) =>
                 ಠ_ಠ.clutz.goog.ui.Button|null) |
            null,
        queryable: boolean | null,
        tooltip: string | null
    };
}
declare module 'goog:goog.ui.editor.ButtonDescriptor' {
    import alias = ಠ_ಠ.clutz.goog.ui.editor.ButtonDescriptor;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.editor.DefaultToolbar {
    /**
     * A set of built-in buttons to display in the default editor toolbar.
     */
    var DEFAULT_BUTTONS: string[];
    /**
     * A set of built-in buttons to display in the default editor toolbar when
     * the editor chrome is right-to-left (BiDi mode only).
     */
    var DEFAULT_BUTTONS_RTL: string[];
    /**
     * Initializes the given font size menu button by adding default font sizes
     * to it.
     * @param button Font size menu button.
     */
    function addDefaultFontSizes(button: ಠ_ಠ.clutz.goog.ui.Select): void;
    /**
     * Initializes the given font menu button by adding default fonts to the
     * menu. If goog.ui.editor.DefaultToolbar.setLocale was called to specify a
     * locale for which locale-specific default fonts exist, those are added
     * before common fonts.
     * @param button Font menu button.
     */
    function addDefaultFonts(button: ಠ_ಠ.clutz.goog.ui.Select): void;
    /**
     * Initializes the given "Format block" menu button by adding default format
     * options to the menu.
     * @param button "Format block" menu button.
     */
    function addDefaultFormatOptions(button: ಠ_ಠ.clutz.goog.ui.Select): void;
    /**
     * Creates an instance of a subclass of {@link goog.ui.Button} for the given
     * {@link goog.editor.Command}, or null if no built-in button exists for the
     * command.  Note that this function is only intended to create built-in
     * buttons; please don't try to hack it!
     * @param command Editor command ID.
     * @param opt_domHelper DOM helper, used for DOM creation; defaults to the
     * current document if unspecified.
     */
    function makeBuiltInToolbarButton(
        command: string, opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null):
        ಠ_ಠ.clutz.goog.ui.Button|null;
    /**
     * Creates a {@link goog.ui.Toolbar} containing a default set of editor
     * toolbar buttons, and renders it into the given parent element.
     * @param elem Toolbar parent element.
     * @param opt_isRightToLeft Whether the editor chrome is right-to-left;
     * defaults to the directionality of the toolbar parent element.
     */
    function makeDefaultToolbar(
        elem: GlobalElement,
        opt_isRightToLeft?: boolean): ಠ_ಠ.clutz.goog.ui.Toolbar;
    /**
     * Creates a {@link goog.ui.Toolbar} containing the specified set of
     * toolbar buttons, and renders it into the given parent element.  Each
     * item in the {@code items} array must either be a
     * {@link goog.editor.Command} (to create a built-in button) or a subclass
     * of {@link goog.ui.Control} (to create a custom control).
     * @param items Toolbar items; each must be a {@link goog.editor.Command} or
     * a {@link goog.ui.Control}.
     * @param elem Toolbar parent element.
     * @param opt_isRightToLeft Whether the editor chrome is right-to-left;
     * defaults to the directionality of the toolbar parent element.
     */
    function makeToolbar(
        items: (string|ಠ_ಠ.clutz.goog.ui.Control|null)[], elem: GlobalElement,
        opt_isRightToLeft?: boolean): ಠ_ಠ.clutz.goog.ui.Toolbar;
    /**
     * Sets the locale for the font names.  If not set, defaults to 'en-us'.
     * Used only for default creation of font names name.  Must be set
     * before font name menu is created.
     * @param locale Locale to use for the toolbar font names.
     */
    function setLocale(locale: string): void;
    var MSG_ALIGN_CENTER_TITLE: string;
    var MSG_ALIGN_LEFT_TITLE: string;
    var MSG_ALIGN_RIGHT_TITLE: string;
    var MSG_BACKGROUND_COLOR_TITLE: string;
    var MSG_BLOCKQUOTE_TITLE: string;
    var MSG_BOLD_TITLE: string;
    var MSG_DIR_LTR_TITLE: string;
    var MSG_DIR_RTL_TITLE: string;
    var MSG_EDIT_HTML_CAPTION: string;
    var MSG_EDIT_HTML_TITLE: string;
    var MSG_FONT_COLOR_TITLE: string;
    var MSG_FONT_FACE_TITLE: string;
    var MSG_FONT_NORMAL: string;
    var MSG_FONT_NORMAL_SERIF: string;
    var MSG_FONT_SIZE_HUGE: string;
    var MSG_FONT_SIZE_LARGE: string;
    var MSG_FONT_SIZE_NORMAL: string;
    var MSG_FONT_SIZE_SMALL: string;
    var MSG_FONT_SIZE_TITLE: string;
    var MSG_FORMAT_BLOCK_CAPTION: string;
    var MSG_FORMAT_BLOCK_TITLE: string;
    var MSG_FORMAT_HEADING: string;
    var MSG_FORMAT_MINOR_HEADING: string;
    var MSG_FORMAT_NORMAL: string;
    var MSG_FORMAT_SUBHEADING: string;
    var MSG_IMAGE_TITLE: string;
    var MSG_INDENT_TITLE: string;
    var MSG_ITALIC_TITLE: string;
    var MSG_JUSTIFY_TITLE: string;
    var MSG_LINK_TITLE: string;
    var MSG_ORDERED_LIST_TITLE: string;
    var MSG_OUTDENT_TITLE: string;
    var MSG_REDO_TITLE: string;
    var MSG_REMOVE_FORMAT_TITLE: string;
    var MSG_STRIKE_THROUGH_TITLE: string;
    var MSG_SUBSCRIPT: string;
    var MSG_SUPERSCRIPT: string;
    var MSG_UNDERLINE_TITLE: string;
    var MSG_UNDO_TITLE: string;
    var MSG_UNORDERED_LIST_TITLE: string;
}
declare module 'goog:goog.ui.editor.DefaultToolbar' {
    import alias = ಠ_ಠ.clutz.goog.ui.editor.DefaultToolbar;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.editor {
    /**
     * A type of goog.ui.editor.AbstractDialog for editing/creating a link.
     */
    class LinkDialog extends LinkDialog_Instance {
        /**
         * Checks if {@code str} contains {@code "nofollow"} as a separate word.
         * @param str String to be tested.  This is usually {@code rel}
         * attribute of an {@code HTMLAnchorElement} object.
         */
        static hasNoFollow(str: string): boolean;
        /**
         * Removes {@code "nofollow"} from {@code rel} if it's present as a
         * separate word.
         * @param rel Input string.  This is usually {@code rel} attribute of an
         * {@code HTMLAnchorElement} object.
         */
        static removeNoFollow(rel: string): string;
    }
    class LinkDialog_Instance extends
        ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog_Instance {
        /**
         * A type of goog.ui.editor.AbstractDialog for editing/creating a link.
         * @param domHelper DomHelper to be used to create the dialog's dom
         * structure.
         * @param link The target link.
         */
        constructor(
            domHelper: ಠ_ಠ.clutz.goog.dom.DomHelper|null,
            link: ಠ_ಠ.clutz.goog.editor.Link|null);
        createDialogControl(): ಠ_ಠ.clutz.goog.ui.Dialog;
        /**
         * Creates and returns the event object to be used when dispatching the
         * OK event to listeners based on which tab is currently selected and
         * the contents of the input fields of that tab.
         */
        createOkEvent(a?: ಠ_ಠ.clutz.goog.events.Event|
                      null): ಠ_ಠ.clutz.goog.ui.editor.LinkDialog.OkEvent;
        hide(): void;
        /**
         * Tells the dialog whether the autogeneration of text to display is to
         * be enabled.
         * @param enable Whether to enable the feature.
         */
        setAutogenFeatureEnabled(enable: boolean): void;
        /**
         * Sets the warning message to show to users about including email
         * addresses on public web pages.
         * @param emailWarning Warning message to show users about including
         * email addresses on the web.
         */
        setEmailWarning(emailWarning: ಠ_ಠ.clutz.goog.html.SafeHtml): void;
        /**
         * Tells the plugin whether to stop leaking the page's url via the
         * referrer header when the "test this link" link is clicked.
         * @param stop Whether to stop leaking the referrer.
         */
        setStopReferrerLeaks(stop: boolean): void;
        /**
         * Tells the dialog whether to show the 'text to display' div.
         * When the target element of the dialog is an image, there is no link
         * text to modify. This function can be used for this kind of
         * situations.
         * @param visible Whether to make 'text to display' div visible.
         */
        setTextToDisplayVisible(visible: boolean): void;
        show(): void;
        /**
         * Tells the dialog to show a checkbox where the user can choose to have
         * the link open in a new window.
         * @param startChecked Whether to check the checkbox the first time the
         * dialog is shown. Subesquent times the checkbox will remember its
         * previous state.
         */
        showOpenLinkInNewWindow(startChecked: boolean): void;
        /**
         * Tells the dialog to show a checkbox where the user can choose to add
         * 'rel=nofollow' attribute to the link.
         */
        showRelNoFollow(): void;
    }
}
declare module 'goog:goog.ui.editor.LinkDialog' {
    import alias = ಠ_ಠ.clutz.goog.ui.editor.LinkDialog;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.editor.LinkDialog {
    /**
     * Event fired before testing a link by opening it in another window.
     * Calling preventDefault will stop the link from being opened.
     */
    class BeforeTestLinkEvent extends BeforeTestLinkEvent_Instance {}
    class BeforeTestLinkEvent_Instance extends
        ಠ_ಠ.clutz.goog.events.Event_Instance {
        /**
         * Event fired before testing a link by opening it in another window.
         * Calling preventDefault will stop the link from being opened.
         * @param url Url of the link being tested.
         */
        constructor(url: string);
        /**
         * The url of the link being tested.
         */
        url: string;
    }
}
declare module 'goog:goog.ui.editor.LinkDialog.BeforeTestLinkEvent' {
    import alias = ಠ_ಠ.clutz.goog.ui.editor.LinkDialog.BeforeTestLinkEvent;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.editor.LinkDialog {
    /**
     * Events specific to the link dialog.
     */
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        BEFORE_TEST_LINK: EventType,
    };
}
declare module 'goog:goog.ui.editor.LinkDialog.EventType' {
    import alias = ಠ_ಠ.clutz.goog.ui.editor.LinkDialog.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.editor.LinkDialog {
    /**
     * OK event object for the link dialog.
     */
    class OkEvent extends OkEvent_Instance {}
    class OkEvent_Instance extends ಠ_ಠ.clutz.goog.events.Event_Instance {
        /**
         * OK event object for the link dialog.
         * @param linkText Text the user chose to display for the link.
         * @param linkUrl Url the user chose for the link to point to.
         * @param openInNewWindow Whether the link should open in a new window
         * when clicked.
         * @param noFollow Whether the link should have 'rel=nofollow'
         * attribute.
         */
        constructor(
            linkText: string, linkUrl: string, openInNewWindow: boolean,
            noFollow: boolean);
        /**
         * The text of the link edited in the dialog.
         */
        linkText: string;
        /**
         * The url of the link edited in the dialog.
         */
        linkUrl: string;
        /**
         * Whether the link should have 'rel=nofollow' attribute.
         */
        noFollow: boolean;
        /**
         * Whether the link should open in a new window when clicked.
         */
        openInNewWindow: boolean;
    }
}
declare module 'goog:goog.ui.editor.LinkDialog.OkEvent' {
    import alias = ಠ_ಠ.clutz.goog.ui.editor.LinkDialog.OkEvent;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.editor {
    /**
     * Creates a new Editor-style tab pane.
     */
    class TabPane extends TabPane_Instance {}
    class TabPane_Instance extends ಠ_ಠ.clutz.goog.ui.Component_Instance {
        /**
         * Creates a new Editor-style tab pane.
         * @param dom The dom helper for the window to create this tab pane in.
         * @param opt_caption Optional caption of the tab pane.
         */
        constructor(
            dom: ಠ_ಠ.clutz.goog.dom.DomHelper|null, opt_caption?: string);
        /**
         * Adds a tab to the tab pane.
         * @param id The id of the tab to add.
         * @param caption The caption of the tab.
         * @param tooltip The tooltip for the tab.
         * @param groupName for the radio button group.
         * @param content The content element to show when this tab is selected.
         */
        addTab(
            id: string, caption: string, tooltip: string, groupName: string,
            content: GlobalElement|null): void;
        enterDocument(): void;
        getCurrentTabId(): string;
        /**
         * Selects the tab with the given id.
         * @param id Id of the tab to select.
         */
        setSelectedTabId(id: string): void;
    }
}
declare module 'goog:goog.ui.editor.TabPane' {
    import alias = ಠ_ಠ.clutz.goog.ui.editor.TabPane;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.editor {
    /**
     * A class for managing the editor toolbar.  Acts as a bridge between
     * a {@link goog.editor.Field} and a {@link goog.ui.Toolbar}.
     *
     * The {@code toolbar} argument must be an instance of {@link
     * goog.ui.Toolbar} or a subclass.  This class doesn't care how the toolbar
     * was created.  As long as one or more controls hosted  in the toolbar have
     * IDs that match built-in {@link goog.editor.Command}s, they will function
     * as expected.  It is the caller's responsibility to ensure that the
     * toolbar is already rendered or that it decorates an existing element.
     */
    class ToolbarController extends ToolbarController_Instance {}
    class ToolbarController_Instance extends
        ಠ_ಠ.clutz.goog.events.EventTarget_Instance {
        /**
         * A class for managing the editor toolbar.  Acts as a bridge between
         * a {@link goog.editor.Field} and a {@link goog.ui.Toolbar}.
         *
         * The {@code toolbar} argument must be an instance of {@link
         * goog.ui.Toolbar} or a subclass.  This class doesn't care how the
         * toolbar was created.  As long as one or more controls hosted  in the
         * toolbar have IDs that match built-in {@link goog.editor.Command}s,
         * they will function as expected.  It is the caller's responsibility to
         * ensure that the toolbar is already rendered or that it decorates an
         * existing element.
         * @param field Editable field to be controlled by the toolbar.
         * @param toolbar Toolbar to control the editable field.
         */
        constructor(
            field: ಠ_ಠ.clutz.goog.editor.Field,
            toolbar: ಠ_ಠ.clutz.goog.ui.Toolbar);
        /**
         * Programmatically blurs the editor toolbar, un-highlighting the
         * currently highlighted item, and closing the currently open menu (if
         * any).
         */
        blur(): void;
        disposeInternal(): void;
        /**
         * Returns the {@link goog.editor.Command} constant
         * that corresponds to the given Closure component ID.  Subclasses may
         * override this method if they want to use a custom mapping scheme from
         * controls to commands.
         * @param id Closure component ID of a toolbar control.
         */
        getCommand(id: string): string;
        /**
         * Returns the Closure component ID of the control that corresponds to
         * the given {@link goog.editor.Command} constant. Subclasses may
         * override this method if they want to use a custom mapping scheme from
         * commands to controls.
         * @param command Editor command.
         */
        getComponentId(command: string): string;
        /**
         * Returns the field instance managed by the toolbar.  Useful for
         * classes that extend {@code goog.ui.editor.ToolbarController}.
         */
        getField(): ಠ_ಠ.clutz.goog.editor.Field;
        /**
         * Returns the event handler object for the editor toolbar.  Useful for
         * classes that extend {@code goog.ui.editor.ToolbarController}.
         */
        getHandler(): ಠ_ಠ.clutz.goog.events.EventHandler<this>;
        /**
         * Returns the toolbar UI component that manages the editor.  Useful for
         * classes that extend {@code goog.ui.editor.ToolbarController}.
         */
        getToolbar(): ಠ_ಠ.clutz.goog.ui.Toolbar;
        /**
         * Handles {@code ACTION} events dispatched by toolbar buttons in
         * response to user actions by executing the corresponding field
         * command.
         * @param e Action event to handle.
         */
        handleAction(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        isEnabled(): boolean;
        isVisible(): boolean;
        /**
         * Enables or disables the toolbar.
         * @param enabled Whether to enable or disable the toolbar.
         */
        setEnabled(enabled: boolean): void;
        /**
         * Shows or hides the toolbar.
         * @param visible Whether to show or hide the toolbar.
         */
        setVisible(visible: boolean): void;
        /**
         * Updates the toolbar in response to editor events.  Specifically,
         * updates button states based on {@code COMMAND_VALUE_CHANGE} events,
         * reflecting the effective formatting of the selection.
         * @param e Editor event to handle.
         */
        updateToolbar(e: ಠ_ಠ.clutz.goog.events.Event|null): void;
        /**
         * Updates the toolbar to reflect a given state.
         * @param state Object mapping editor commands to values.
         */
        updateToolbarFromState(state: GlobalObject|null): void;
    }
}
declare module 'goog:goog.ui.editor.ToolbarController' {
    import alias = ಠ_ಠ.clutz.goog.ui.editor.ToolbarController;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.editor.ToolbarFactory {
    /**
     * Adds a menu item to the given font menu button.  The first font listed in
     * the {@code value} argument is considered the font ID, so adding two items
     * whose CSS style starts with the same font may lead to unpredictable
     * results.
     * @param button Font menu button.
     * @param caption Caption to show for the font menu.
     * @param value Value for the corresponding 'font-family' CSS style.
     */
    function addFont(
        button: ಠ_ಠ.clutz.goog.ui.Select, caption: string, value: string): void;
    /**
     * Adds a menu item to the given font size menu button.  The {@code value}
     * argument must be a legacy HTML font size in the 0-7 range.
     * @param button Font size menu button.
     * @param caption Caption to show in the font size menu.
     * @param value Value for the corresponding HTML font size.
     */
    function addFontSize(
        button: ಠ_ಠ.clutz.goog.ui.Select, caption: string, value: number): void;
    /**
     * Bulk-adds font sizes to the given font size menu button.  The argument
     * must be an array of font size descriptor objects, each of which must have
     * the following attributes: <ul> <li>{@code caption} - Caption to show in
     * the font size menu (e.g. 'Huge') <li>{@code value} - Value for the
     * corresponding HTML font size (e.g. 6)
     * </ul>
     * @param button Font size menu button.
     * @param sizes Array of font size descriptors.
     */
    function addFontSizes(
        button: ಠ_ಠ.clutz.goog.ui.Select,
        sizes: {caption: string, value: number}[]): void;
    /**
     * Bulk-adds fonts to the given font menu button.  The argument must be an
     * array of font descriptor objects, each of which must have the following
     * attributes:
     * <ul>
     * <li>{@code caption} - Caption to show in the font menu (e.g. 'Tahoma')
     * <li>{@code value} - Value for the corresponding 'font-family' CSS style
     * (e.g. 'Tahoma, Arial, sans-serif')
     * </ul>
     * @param button Font menu button.
     * @param fonts Array of font descriptors.
     */
    function addFonts(
        button: ಠ_ಠ.clutz.goog.ui.Select,
        fonts: {caption: string, value: string}[]): void;
    /**
     * Adds a menu item to the given "Format block" menu button.
     * @param button "Format block" menu button.
     * @param caption Caption to show in the menu.
     * @param tag Corresponding block format tag.
     */
    function addFormatOption(
        button: ಠ_ಠ.clutz.goog.ui.Select, caption: string,
        tag: ಠ_ಠ.clutz.goog.dom.TagName<any>): void;
    /**
     * Bulk-adds format options to the given "Format block" menu button.  The
     * argument must be an array of format option descriptor objects, each of
     * which must have the following attributes:
     * <ul>
     * <li>{@code caption} - Caption to show in the menu (e.g. 'Minor heading')
     * <li>{@code command} - Corresponding {@link goog.dom.TagName} (e.g.
     * 'H4')
     * </ul>
     * @param button "Format block" menu button.
     * @param formats Array of format option descriptors.
     */
    function addFormatOptions(
        button: ಠ_ಠ.clutz.goog.ui.Select,
        formats: {caption: string, command: ಠ_ಠ.clutz.goog.dom.TagName<any>}[]):
        void;
    /**
     * Converts a pixel font size specification into an equivalent legacy size.
     * For example, {@code font-size: 32px;} is {@code &lt;font size="6"&gt;},
     * etc. If the given pixel size doesn't exactly match one of the legacy
     * sizes, -1 is returned.
     * @param px Pixel font size.
     */
    function getLegacySizeFromPx(px: number): number;
    /**
     * Takes a font spec (e.g. "Arial, Helvetica, sans-serif") and returns the
     * primary font name, normalized to lowercase (e.g. "arial").
     * @param fontSpec Font specification.
     */
    function getPrimaryFont(fontSpec: string): string;
    /**
     * Converts a legacy font size specification into an equivalent pixel size.
     * For example, {@code &lt;font size="6"&gt;} is {@code font-size: 32px;},
     * etc.
     * @param fontSize Legacy font size spec in the 0-7 range.
     */
    function getPxFromLegacySize(fontSize: number): number;
    /**
     * Creates a toolbar button with the given ID, tooltip, and caption. Applies
     * any custom CSS class names to the button's caption element.
     * @param id Button ID; must equal a {@link goog.editor.Command} for
     * built-in buttons, anything else for custom buttons.
     * @param tooltip Tooltip to be shown on hover.
     * @param caption Button caption.
     * @param opt_classNames CSS class name(s) to apply to the caption element.
     * @param opt_renderer Button renderer; defaults to {@link
     * goog.ui.ToolbarButtonRenderer} if unspecified.
     * @param opt_domHelper DOM helper, used for DOM creation; defaults to the
     * current document if unspecified.
     */
    function makeButton(
        id: string, tooltip: string,
        caption: string|Node|null|Node[]|NodeListOf<Node>,
        opt_classNames?: string,
        opt_renderer?: ಠ_ಠ.clutz.goog.ui.ButtonRenderer|null,
        opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|
        null): ಠ_ಠ.clutz.goog.ui.Button;
    /**
     * Creates a color menu button with the given ID, tooltip, and caption.
     * Applies any custom CSS class names to the button's caption element.  The
     * button is created with a default color menu containing standard color
     * palettes.
     * @param id Button ID; must equal a {@link goog.editor.Command} for
     * built-in toolbar buttons, but can be anything else for custom buttons.
     * @param tooltip Tooltip to be shown on hover.
     * @param caption Button caption.
     * @param opt_classNames CSS class name(s) to apply to the caption element.
     * @param opt_renderer Button renderer; defaults to {@link
     * goog.ui.ToolbarColorMenuButtonRenderer} if unspecified.
     * @param opt_domHelper DOM helper, used for DOM creation; defaults to the
     * current document if unspecified.
     */
    function makeColorMenuButton(
        id: string, tooltip: string,
        caption: string|Node|null|Node[]|NodeListOf<Node>,
        opt_classNames?: string,
        opt_renderer?: ಠ_ಠ.clutz.goog.ui.ColorMenuButtonRenderer|null,
        opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|
        null): ಠ_ಠ.clutz.goog.ui.ColorMenuButton;
    /**
     * Creates a menu button with the given ID, tooltip, and caption. Applies
     * any custom CSS class names to the button's caption element.  The button
     * returned doesn't have an actual menu attached; use {@link
     * goog.ui.MenuButton#setMenu} to attach a {@link goog.ui.Menu} to the
     * button.
     * @param id Button ID; must equal a {@link goog.editor.Command} for
     * built-in buttons, anything else for custom buttons.
     * @param tooltip Tooltip to be shown on hover.
     * @param caption Button caption.
     * @param opt_classNames CSS class name(s) to apply to the caption element.
     * @param opt_renderer Button renderer; defaults to {@link
     * goog.ui.ToolbarMenuButtonRenderer} if unspecified.
     * @param opt_domHelper DOM helper, used for DOM creation; defaults to the
     * current document if unspecified.
     */
    function makeMenuButton(
        id: string, tooltip: string,
        caption: string|Node|null|Node[]|NodeListOf<Node>,
        opt_classNames?: string,
        opt_renderer?: ಠ_ಠ.clutz.goog.ui.ButtonRenderer|null,
        opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|
        null): ಠ_ಠ.clutz.goog.ui.MenuButton;
    /**
     * Creates a select button with the given ID, tooltip, and caption. Applies
     * any custom CSS class names to the button's root element.  The button
     * returned doesn't have an actual menu attached; use {@link
     * goog.ui.Select#setMenu} to attach a {@link goog.ui.Menu} containing
     * {@link goog.ui.Option}s to the select button.
     * @param id Button ID; must equal a {@link goog.editor.Command} for
     * built-in buttons, anything else for custom buttons.
     * @param tooltip Tooltip to be shown on hover.
     * @param caption Button caption; used as the default caption when nothing
     * is selected.
     * @param opt_classNames CSS class name(s) to apply to the button's root
     * element.
     * @param opt_renderer Button renderer; defaults to {@link
     * goog.ui.ToolbarMenuButtonRenderer} if unspecified.
     * @param opt_domHelper DOM helper, used for DOM creation; defaults to the
     * current document if unspecified.
     */
    function makeSelectButton(
        id: string, tooltip: string,
        caption: string|Node|null|Node[]|NodeListOf<Node>,
        opt_classNames?: string,
        opt_renderer?: ಠ_ಠ.clutz.goog.ui.MenuButtonRenderer|null,
        opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|
        null): ಠ_ಠ.clutz.goog.ui.Select;
    /**
     * Creates a toggle button with the given ID, tooltip, and caption. Applies
     * any custom CSS class names to the button's caption element. The button
     * returned has checkbox-like toggle semantics.
     * @param id Button ID; must equal a {@link goog.editor.Command} for
     * built-in buttons, anything else for custom buttons.
     * @param tooltip Tooltip to be shown on hover.
     * @param caption Button caption.
     * @param opt_classNames CSS class name(s) to apply to the caption element.
     * @param opt_renderer Button renderer; defaults to {@link
     * goog.ui.ToolbarButtonRenderer} if unspecified.
     * @param opt_domHelper DOM helper, used for DOM creation; defaults to the
     * current document if unspecified.
     */
    function makeToggleButton(
        id: string, tooltip: string,
        caption: string|Node|null|Node[]|NodeListOf<Node>,
        opt_classNames?: string,
        opt_renderer?: ಠ_ಠ.clutz.goog.ui.ButtonRenderer|null,
        opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|
        null): ಠ_ಠ.clutz.goog.ui.Button;
    /**
     * Creates a {@link goog.ui.Toolbar} containing the specified set of
     * toolbar buttons, and renders it into the given parent element.  Each
     * item in the {@code items} array must a {@link goog.ui.Control}.
     * @param items Toolbar items; each must be a {@link goog.ui.Control}.
     * @param elem Toolbar parent element.
     * @param opt_isRightToLeft Whether the editor chrome is right-to-left;
     * defaults to the directionality of the toolbar parent element.
     */
    function makeToolbar(
        items: (ಠ_ಠ.clutz.goog.ui.Control|null)[], elem: GlobalElement,
        opt_isRightToLeft?: boolean): ಠ_ಠ.clutz.goog.ui.Toolbar;
}
declare module 'goog:goog.ui.editor.ToolbarFactory' {
    import alias = ಠ_ಠ.clutz.goog.ui.editor.ToolbarFactory;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.editor.messages {
    function getEmailExplanationSafeHtml(): ಠ_ಠ.clutz.goog.html.SafeHtml;
    function getTrLinkExplanationSafeHtml(): ಠ_ಠ.clutz.goog.html.SafeHtml;
    var MSG_EDIT_LINK: string;
    var MSG_EMAIL_ADDRESS: string;
    var MSG_EMAIL_ADDRESS_TIP: string;
    var MSG_IMAGE_CAPTION: string;
    var MSG_INVALID_EMAIL: string;
    var MSG_LINK_CAPTION: string;
    var MSG_LINK_TO: string;
    var MSG_ON_THE_WEB: string;
    var MSG_ON_THE_WEB_TIP: string;
    var MSG_OPEN_IN_NEW_WINDOW: string;
    var MSG_TEST_THIS_LINK: string;
    var MSG_TEXT_TO_DISPLAY: string;
    var MSG_WHAT_EMAIL: string;
    var MSG_WHAT_URL: string;
}
declare module 'goog:goog.ui.editor.messages' {
    import alias = ಠ_ಠ.clutz.goog.ui.editor.messages;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.emoji {
    /**
     * Creates an emoji.
     *
     * A simple wrapper for an emoji.
     */
    class Emoji extends Emoji_Instance {
        /**
         * The name of the goomoji attribute, used for emoji image elements.
         */
        static ATTRIBUTE: string;
        /**
         * The name of the goomoji data-attribute, used for emoji image
         * elements. Data attributes are the preferred way in HTML5 to set
         * custom attributes.
         */
        static DATA_ATTRIBUTE: string;
    }
    class Emoji_Instance {
        private noStructuralTyping_: any;
        /**
         * Creates an emoji.
         *
         * A simple wrapper for an emoji.
         * @param url URL pointing to the source image for the emoji.
         * @param id The id of the emoji, e.g., 'std.1'.
         * @param opt_height The height of the emoji, if undefined the natural
         * height of the emoji is used.
         * @param opt_width The width of the emoji, if undefined the natural
         * width of the emoji is used.
         * @param opt_altText The alt text for the emoji image, eg. the unicode
         * character representation of the emoji.
         */
        constructor(
            url: string, id: string, opt_height?: number, opt_width?: number,
            opt_altText?: string);
        getAltText(): string|null;
        getHeight(): number|null;
        getId(): string;
        getUrl(): string;
        getWidth(): number|null;
    }
}
declare module 'goog:goog.ui.emoji.Emoji' {
    import alias = ಠ_ಠ.clutz.goog.ui.emoji.Emoji;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.emoji {
    /**
     * A page of emoji to be displayed in an EmojiPicker.
     */
    class EmojiPalette extends EmojiPalette_Instance {}
    class EmojiPalette_Instance extends ಠ_ಠ.clutz.goog.ui.Palette_Instance {
        /**
         * A page of emoji to be displayed in an EmojiPicker.
         * @param emoji List of emoji for this page.
         * @param opt_urlPrefix Prefix that should be prepended to all URL.
         * @param opt_renderer Renderer used to render or decorate the palette;
         * defaults to {@link goog.ui.PaletteRenderer}.
         * @param opt_domHelper Optional DOM helper.
         */
        constructor(
            emoji: (any[]|null)[]|null, opt_urlPrefix?: string|null,
            opt_renderer?: ಠ_ಠ.clutz.goog.ui.PaletteRenderer|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        disposeInternal(): void;
        /**
         * Returns the index of the specified emoji within this palette.
         * @param id Id of the emoji to look up.
         */
        getEmojiIndex(id: string): number;
        /**
         * Returns the image loader that this palette uses. Used for testing.
         */
        getImageLoader(): ಠ_ಠ.clutz.goog.net.ImageLoader|null;
        getNumberOfEmoji(): number;
        getSelectedEmoji(): ಠ_ಠ.clutz.goog.ui.emoji.Emoji|null;
        /**
         * Sends off requests for all the animated emoji and replaces their
         * static sprites when the images are done downloading.
         */
        loadAnimatedEmoji(): void;
    }
}
declare module 'goog:goog.ui.emoji.EmojiPalette' {
    import alias = ಠ_ಠ.clutz.goog.ui.emoji.EmojiPalette;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.emoji {
    /**
     * Renders an emoji palette.
     */
    class EmojiPaletteRenderer extends EmojiPaletteRenderer_Instance {
        static getCssClass(): any;
    }
    class EmojiPaletteRenderer_Instance extends
        ಠ_ಠ.clutz.goog.ui.PaletteRenderer_Instance {
        /**
         * Renders an emoji palette.
         * @param defaultImgUrl Url of the img that should be used to fill up
         * the cells in the emoji table, to prevent jittering. Will be stretched
         * to the emoji cell size. A good image is a transparent dot.
         */
        constructor(defaultImgUrl: string|null);
        /**
         * Builds the inner contents of a palette item out of sprite metadata.
         * @param dom DOM helper for constructing DOM elements.
         * @param spriteInfo The metadata to create the css for the sprite.
         * @param displayUrl The URL of the image for this cell.
         */
        buildElementFromSpriteMetadata(
            dom: ಠ_ಠ.clutz.goog.dom.DomHelper|null,
            spriteInfo: ಠ_ಠ.clutz.goog.ui.emoji.SpriteInfo|null,
            displayUrl: string): HTMLDivElement|null;
        createCell(
            node: Node|null|string,
            dom: ಠ_ಠ.clutz.goog.dom.DomHelper|null): GlobalElement;
        /**
         * Creates a palette item from the given emoji data.
         * @param dom DOM helper for constructing DOM elements.
         * @param id Goomoji id for the emoji.
         * @param spriteInfo Spriting info for the emoji.
         * @param displayUrl URL of the image served for this cell, whether an
         * individual emoji image or a sprite.
         */
        createPaletteItem(
            dom: ಠ_ಠ.clutz.goog.dom.DomHelper|null, id: string,
            spriteInfo: ಠ_ಠ.clutz.goog.ui.emoji.SpriteInfo|null,
            displayUrl: string): HTMLDivElement;
        /**
         * Returns the item corresponding to the given node, or null if the node
         * is neither a palette cell nor part of a palette item.
         * @param palette Palette in which to look for the item.
         * @param node Node to look for.
         */
        getContainingItem(
            palette: ಠ_ಠ.clutz.goog.ui.Palette|null, node: Node|null): Node
            |null;
        /**
         * Modifies a palette item containing an animated emoji, in response to
         * the animated emoji being successfully downloaded.
         * @param item The palette item to update.
         * @param animatedImg An Image object containing the animated emoji.
         */
        updateAnimatedPaletteItem(
            item: GlobalElement|null, animatedImg: Image|null): void;
    }
}
declare module 'goog:goog.ui.emoji.EmojiPaletteRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.emoji.EmojiPaletteRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.emoji {
    /**
     * Creates a new, empty emoji picker. An emoji picker is a grid of emoji,
     * each cell of the grid containing a single emoji. The picker may contain
     * multiple pages of emoji.
     *
     * When a user selects an emoji, by either clicking or pressing enter, the
     * picker fires a goog.ui.Component.EventType.ACTION event with the id. The
     * client listens on this event and in the handler can retrieve the id of
     * the selected emoji and do something with it, for instance, inserting an
     * image tag into a rich text control. An emoji picker does not maintain
     * state. That is, once an emoji is selected, the emoji picker does not
     * remember which emoji was selected.
     *
     * The emoji picker is implemented as a tabpane with each tabpage being a
     * table. Each of the tables are the same size to prevent jittering when
     * switching between pages.
     */
    class EmojiPicker extends EmojiPicker_Instance {
        /**
         * Default number of columns per grid of emoji.
         */
        static DEFAULT_NUM_COLS: number;
        /**
         * Default number of rows per grid of emoji.
         */
        static DEFAULT_NUM_ROWS: number;
        /**
         * Default location of the tabs in relation to the emoji grids.
         */
        static DEFAULT_TAB_LOCATION: ಠ_ಠ.clutz.goog.ui.TabPane.TabLocation;
    }
    class EmojiPicker_Instance extends ಠ_ಠ.clutz.goog.ui.Component_Instance {
        /**
         * Creates a new, empty emoji picker. An emoji picker is a grid of
         * emoji, each cell of the grid containing a single emoji. The picker
         * may contain multiple pages of emoji.
         *
         * When a user selects an emoji, by either clicking or pressing enter,
         * the picker fires a goog.ui.Component.EventType.ACTION event with the
         * id. The client listens on this event and in the handler can retrieve
         * the id of the selected emoji and do something with it, for instance,
         * inserting an image tag into a rich text control. An emoji picker does
         * not maintain state. That is, once an emoji is selected, the emoji
         * picker does not remember which emoji was selected.
         *
         * The emoji picker is implemented as a tabpane with each tabpage being
         * a table. Each of the tables are the same size to prevent jittering
         * when switching between pages.
         * @param defaultImgUrl Url of the img that should be used to fill up
         * the cells in the emoji table, to prevent jittering. Should be the
         * same size as the emoji.
         * @param opt_domHelper Optional DOM helper.
         */
        constructor(
            defaultImgUrl: string,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * Adds a group of emoji to the picker.
         * @param title Title for the group.
         * @param emojiGroup A new group of emoji to be added Each internal
         * array contains [emojiUrl, emojiId].
         */
        addEmojiGroup(
            title: string|GlobalElement|null,
            emojiGroup: (string[]|null)[]|null): void;
        /**
         * EmojiPickers cannot be used to decorate pre-existing html, since the
         * structure they build is fairly complicated.
         * @param element Element to decorate.
         */
        canDecorate(element: GlobalElement|null): boolean;
        createDom(): void;
        disposeInternal(): void;
        enterDocument(): void;
        exitDocument(): void;
        getCssClass(): string;
        /**
         * Gets the number of columns per grid in the emoji picker.
         */
        getNumColumns(): number;
        /**
         * Returns the number of emoji groups in this picker.
         */
        getNumEmojiGroups(): number;
        /**
         * Gets the number of rows per grid in the emoji picker.
         */
        getNumRows(): number;
        /**
         * Returns a page from the picker. This should be considered protected,
         * and is ONLY FOR TESTING.
         * @param index Index of the page to return.
         */
        getPage(index: number): ಠ_ಠ.clutz.goog.ui.emoji.EmojiPalette|null;
        /**
         * Returns all the pages from the picker. This should be considered
         * protected, and is ONLY FOR TESTING.
         */
        getPages(): (ಠ_ಠ.clutz.goog.ui.emoji.EmojiPalette|null)[]|null;
        /**
         * Returns the currently selected emoji from this picker. If the picker
         * is using the URL prefix optimization, allocates a new emoji object
         * with the full URL. This method is meant to be used by clients of the
         * emojipicker, e.g., in a listener on
         * goog.ui.component.EventType.ACTION that wants to use the
         * just-selected emoji.
         */
        getSelectedEmoji(): ಠ_ಠ.clutz.goog.ui.emoji.Emoji|null;
        /**
         * Returns the tabpane if this is a multipage picker. This should be
         * considered protected, and is ONLY FOR TESTING.
         */
        getTabPane(): ಠ_ಠ.clutz.goog.ui.TabPane|null;
        /**
         * Returns true if the component is focusable, false otherwise.  The
         * default is true.  Focusable components always have a tab index and
         * allocate a key handler to handle keyboard events while focused.
         */
        isFocusable(): boolean;
        /**
         * Causes the emoji imgs to be loaded into the picker. Used for delayed
         * loading. No-op if delayed loading is not set.
         */
        loadImages(): void;
        /**
         * Used by unittests to manually load the animated emoji for this
         * picker.
         */
        manuallyLoadAnimatedEmoji(): void;
        /**
         * Sets whether to automatically size the emojipicker based on the
         * number of columns and the number of emoji in each group, so as to
         * reduce jitter.
         * @param autoSize Whether to automatically size the picker.
         */
        setAutoSizeByColumnCount(autoSize: boolean): void;
        /**
         * Sets whether loading of images should be delayed until after dom
         * creation. Thus, this function must be called before {@link
         * #createDom}. If set to true, the client must call {@link #loadImages}
         * when they wish the images to be loaded.
         * @param shouldDelay Whether to delay loading the images.
         */
        setDelayedLoad(shouldDelay: boolean): void;
        /**
         * Sets whether the component is focusable.  The default is true.
         * Focusable components always have a tab index and allocate a key
         * handler to handle keyboard events while focused.
         * @param focusable Whether the component is focusable.
         */
        setFocusable(focusable: boolean): void;
        /**
         * Sets whether to require the caller to manually specify when to start
         * loading animated emoji. This is primarily for unittests to be able to
         * test the structure of the emojipicker palettes before and after the
         * animated emoji have been loaded. This only affects sprited
         * emojipickers with sprite data for animated emoji.
         * @param manual Whether to load animated emoji manually.
         */
        setManualLoadOfAnimatedEmoji(manual: boolean): void;
        /**
         * Sets the number of columns per grid in the emoji picker. This should
         * only be called before the picker has been rendered.
         * @param numCols Number of columns per grid.
         */
        setNumColumns(numCols: number): void;
        /**
         * Sets the number of rows per grid in the emoji picker. This should
         * only be called before the picker has been rendered.
         * @param numRows Number of rows per grid.
         */
        setNumRows(numRows: number): void;
        /**
         * Sets the progressive rendering aspect of this emojipicker. Must be
         * called before createDom to have an effect.
         * @param progressive Whether this picker should render progressively.
         */
        setProgressiveRender(progressive: boolean): void;
        /**
         * Sets the location of the tabs in relation to the emoji grids. This
         * should only be called before the picker has been rendered.
         * @param tabLocation The location of the tabs.
         */
        setTabLocation(tabLocation: ಠ_ಠ.clutz.goog.ui.TabPane.TabLocation):
            void;
        /**
         * Sets the URL prefix for the emoji URLs.
         * @param urlPrefix Prefix that should be prepended to all URLs.
         */
        setUrlPrefix(urlPrefix: string): void;
    }
}
declare module 'goog:goog.ui.emoji.EmojiPicker' {
    import alias = ಠ_ಠ.clutz.goog.ui.emoji.EmojiPicker;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.emoji {
    /**
     * Constructs a popup emoji picker widget.
     */
    class PopupEmojiPicker extends PopupEmojiPicker_Instance {}
    class PopupEmojiPicker_Instance extends
        ಠ_ಠ.clutz.goog.ui.Component_Instance {
        /**
         * Constructs a popup emoji picker widget.
         * @param defaultImgUrl Url of the img that should be used to fill up
         * the cells in the emoji table, to prevent jittering. Should be the
         * same size as the emoji.
         * @param opt_domHelper Optional DOM helper.
         */
        constructor(
            defaultImgUrl: string,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * Adds a group of emoji to the picker.
         * @param title Title for the group.
         * @param emojiGroup A new group of emoji to be added. Each internal
         * array contains [emojiUrl, emojiId].
         */
        addEmojiGroup(
            title: string|GlobalElement|null,
            emojiGroup: (any[]|null)[]|null): void;
        /**
         * Attaches the popup emoji picker to an element.
         * @param element The element to attach to.
         */
        attach(element: GlobalElement|null): void;
        createDom(): void;
        /**
         * Detatches the popup emoji picker from an element.
         * @param element The element to detach from.
         */
        detach(element: GlobalElement|null): void;
        disposeInternal(): void;
        /**
         * Returns whether the Popup dismisses itself when the user clicks
         * outside of it.
         */
        getAutoHide(): boolean;
        /**
         * Returns the region inside which the Popup dismisses itself when the
         * user clicks, or null if it was not set. Null indicates the entire
         * document is the autohide region.
         */
        getAutoHideRegion(): GlobalElement|null;
        getEmojiPicker(): ಠ_ಠ.clutz.goog.ui.emoji.EmojiPicker|null;
        getLastTarget(): GlobalElement|null;
        /**
         * Returns the number of emoji groups in this picker.
         */
        getNumEmojiGroups(): number;
        /**
         * Returns the {@link goog.ui.PopupBase} from this picker. Returns null
         * if the popup has not yet been created.
         *
         * NOTE: This should *ONLY* be called from tests. If called before
         * createDom(), this should return null.
         */
        getPopup(): ಠ_ಠ.clutz.goog.ui.PopupBase|null;
        getSelectedEmoji(): ಠ_ಠ.clutz.goog.ui.emoji.Emoji|null;
        /**
         * Gets whether the emojipicker is in toggle mode
         */
        getToggleMode(): boolean;
        /**
         * Causes the emoji imgs to be loaded into the picker. Used for delayed
         * loading.
         */
        loadImages(): void;
        /**
         * Sets whether the Popup dismisses itself when the user clicks outside
         * of it - must be called after the Popup has been created (in
         * createDom()), otherwise it does nothing.
         * @param autoHide Whether to autohide on an external click.
         */
        setAutoHide(autoHide: boolean): void;
        /**
         * Sets the region inside which the Popup dismisses itself when the user
         * clicks - must be called after the Popup has been created (in
         * createDom()), otherwise it does nothing.
         * @param element The DOM element for autohide.
         */
        setAutoHideRegion(element: GlobalElement|null): void;
        /**
         * Sets whether loading of images should be delayed until after dom
         * creation. Thus, this function must be called before {@link
         * #createDom}. If set to true, the client must call {@link #loadImages}
         * when they wish the images to be loaded.
         * @param shouldDelay Whether to delay loading the images.
         */
        setDelayedLoad(shouldDelay: boolean): void;
        /**
         * Sets whether the emoji picker can accept focus.
         * @param focusable Whether the emoji picker should accept focus.
         */
        setFocusable(focusable: boolean): void;
        /**
         * Sets the number of columns per grid in the emoji picker. This should
         * only be called before the picker has been rendered.
         * @param numCols Number of columns per grid.
         */
        setNumColumns(numCols: number): void;
        /**
         * Sets the number of rows per grid in the emoji picker. This should
         * only be called before the picker has been rendered.
         * @param numRows Number of rows per grid.
         */
        setNumRows(numRows: number): void;
        /**
         * Sets the progressive rendering aspect of this emojipicker. Must be
         * called before createDom to have an effect.
         * @param progressive Whether the picker should render progressively.
         */
        setProgressiveRender(progressive: boolean): void;
        /**
         * Sets the location of the tabs in relation to the emoji grids. This
         * should only be called before the picker has been rendered.
         * @param tabLocation The location of the tabs.
         */
        setTabLocation(tabLocation: ಠ_ಠ.clutz.goog.ui.TabPane.TabLocation):
            void;
        /**
         * Sets whether the emoji picker should toggle if it is already open.
         * @param toggle The toggle mode to use.
         */
        setToggleMode(toggle: boolean): void;
        /**
         * Sets the URL prefix for the emoji URLs.
         * @param urlPrefix Prefix that should be prepended to all URLs.
         */
        setUrlPrefix(urlPrefix: string): void;
    }
}
declare module 'goog:goog.ui.emoji.PopupEmojiPicker' {
    import alias = ಠ_ಠ.clutz.goog.ui.emoji.PopupEmojiPicker;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.emoji {
    /**
     * Progressively renders an emoji palette. The progressive renderer tries to
     * use img tags instead of background-image for sprited emoji, since most
     * browsers render img tags progressively (i.e., as the data comes in),
     * while only very new browsers render background-image progressively.
     */
    class ProgressiveEmojiPaletteRenderer extends
        ProgressiveEmojiPaletteRenderer_Instance {}
    class ProgressiveEmojiPaletteRenderer_Instance extends
        ಠ_ಠ.clutz.goog.ui.emoji.EmojiPaletteRenderer_Instance {
        /**
         * Progressively renders an emoji palette. The progressive renderer
         * tries to use img tags instead of background-image for sprited emoji,
         * since most browsers render img tags progressively (i.e., as the data
         * comes in), while only very new browsers render background-image
         * progressively.
         * @param defaultImgUrl Url of the img that should be used to fill up
         * the cells in the emoji table, to prevent jittering. Will be stretched
         * to the emoji cell size. A good image is a transparent dot.
         */
        constructor(defaultImgUrl: string);
        buildElementFromSpriteMetadata(
            dom: ಠ_ಠ.clutz.goog.dom.DomHelper|null,
            spriteInfo: ಠ_ಠ.clutz.goog.ui.emoji.SpriteInfo|null,
            displayUrl: string): HTMLDivElement|null;
        updateAnimatedPaletteItem(
            item: GlobalElement|null, animatedImg: Image|null): void;
    }
}
declare module 'goog:goog.ui.emoji.ProgressiveEmojiPaletteRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.emoji.ProgressiveEmojiPaletteRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.emoji {
    /**
     * Creates a SpriteInfo object with the specified properties. If the image
     * is sprited via CSS, then only the first parameter needs a value. If the
     * image is sprited via metadata, then the first parameter should be left
     * null.
     */
    class SpriteInfo extends SpriteInfo_Instance {}
    class SpriteInfo_Instance {
        private noStructuralTyping_: any;
        /**
         * Creates a SpriteInfo object with the specified properties. If the
         * image is sprited via CSS, then only the first parameter needs a
         * value. If the image is sprited via metadata, then the first parameter
         * should be left null.
         * @param cssClass CSS class to properly display the sprited image.
         * @param opt_url Url of the sprite image.
         * @param opt_width Width of the image being sprited.
         * @param opt_height Height of the image being sprited.
         * @param opt_xOffset Positive x offset of the image being sprited
         * within the sprite.
         * @param opt_yOffset Positive y offset of the image being sprited
         * within the sprite.
         * @param opt_animated Whether the sprite is animated.
         */
        constructor(
            cssClass: string|null, opt_url?: string, opt_width?: number,
            opt_height?: number, opt_xOffset?: number, opt_yOffset?: number,
            opt_animated?: boolean);
        /**
         * Returns the css class of the sprited image.
         */
        getCssClass(): string|null;
        /**
         * Returns the height of the image being sprited, appropriate for a CSS
         * value.
         */
        getHeightCssValue(): string;
        /**
         * Returns the url of the sprite image.
         */
        getUrl(): string|null;
        /**
         * Returns the width of the image being sprited, appropriate for a CSS
         * value.
         */
        getWidthCssValue(): string;
        /**
         * Returns the x offset of the image being sprited within the sprite,
         * appropriate for a CSS value.
         */
        getXOffsetCssValue(): string;
        /**
         * Returns the positive y offset of the image being sprited within the
         * sprite, appropriate for a CSS value.
         */
        getYOffsetCssValue(): string;
        /**
         * Returns whether the emoji specified by this sprite is animated.
         */
        isAnimated(): boolean;
    }
}
declare module 'goog:goog.ui.emoji.SpriteInfo' {
    import alias = ಠ_ಠ.clutz.goog.ui.emoji.SpriteInfo;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.media {
    /**
     * A very simple flash wrapper, that allows you to create flash object
     * programmatically, instead of embedding your own HTML. It extends
     * {@link goog.ui.Component}, which makes it very easy to be embedded on the
     * page.
     */
    class FlashObject extends FlashObject_Instance {
        /**
         * The component CSS namespace.
         */
        static CSS_CLASS: string;
        /**
         * The flash object CSS class.
         */
        static FLASH_CSS_CLASS: string;
    }
    class FlashObject_Instance extends ಠ_ಠ.clutz.goog.ui.Component_Instance {
        /**
         * A very simple flash wrapper, that allows you to create flash object
         * programmatically, instead of embedding your own HTML. It extends
         * {@link goog.ui.Component}, which makes it very easy to be embedded on
         * the page.
         * @param flashUrl The Flash SWF URL.
         * @param opt_domHelper An optional DomHelper.
         */
        constructor(
            flashUrl: ಠ_ಠ.clutz.goog.html.TrustedResourceUrl,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * Adds flash variables.
         * @param map A key-value map of variables.
         */
        addFlashVars(map: null|
                     GlobalObject): ಠ_ಠ.clutz.goog.ui.media.FlashObject;
        /**
         * Creates the DOM structure.
         */
        createDom(): void;
        disposeInternal(): void;
        /**
         * Writes the Flash embedding {@code HTMLObjectElement} to this
         * components root element and adds listeners for all events to handle
         * them consistently.
         */
        enterDocument(): void;
        getAllowScriptAccess(): string;
        getBackgroundColor(): string;
        getFlashElement(): HTMLObjectElement|null;
        getFlashVars(): ಠ_ಠ.clutz.goog.structs.Map<any, any>|null;
        getRequiredVersion(): string|null;
        getWmode(): string;
        /**
         * Returns whether this SWF has a minimum required flash version.
         */
        hasRequiredVersion(): boolean;
        isLoaded(): boolean;
        /**
         * Sets the allowScriptAccess setting of the movie.
         * @param value The new value to be set.
         */
        setAllowScriptAccess(value: string):
            ಠ_ಠ.clutz.goog.ui.media.FlashObject;
        /**
         * Sets the background color of the movie.
         * @param color The new color to be set.
         */
        setBackgroundColor(color: string): ಠ_ಠ.clutz.goog.ui.media.FlashObject;
        /**
         * Sets a flash variable.
         * @param key The name of the flash variable.
         * @param value The value of the flash variable.
         */
        setFlashVar(key: string, value: string):
            ಠ_ಠ.clutz.goog.ui.media.FlashObject;
        /**
         * Sets flash variables. You can either pass a Map of key->value pairs
         * or you can pass a key, value pair to set a specific variable.
         *
         * TODO(user, martino): Get rid of this method.
         * @param flashVar A map of variables (given as a goog.structs.Map or an
         * Object literal) or a key to the optional {@code opt_value}.
         * @param opt_value The optional value for the flashVar key.
         */
        setFlashVars(flashVar: null|GlobalObject|string, opt_value?: string):
            ಠ_ಠ.clutz.goog.ui.media.FlashObject;
        /**
         * Sets the minimum flash required version.
         * @param version The minimum required version for this movie to work,
         * or null if you want to unset it.
         */
        setRequiredVersion(version: string|
                           null): ಠ_ಠ.clutz.goog.ui.media.FlashObject;
        /**
         * Sets the width and height of the movie.
         * @param width The width of the movie.
         * @param height The height of the movie.
         */
        setSize(width: number|string, height: number|string):
            ಠ_ಠ.clutz.goog.ui.media.FlashObject;
        /**
         * Sets the flash movie Wmode.
         * @param wmode the flash movie Wmode.
         */
        setWmode(wmode: ಠ_ಠ.clutz.goog.ui.media.FlashObject.Wmodes):
            ಠ_ಠ.clutz.goog.ui.media.FlashObject;
    }
}
declare module 'goog:goog.ui.media.FlashObject' {
    import alias = ಠ_ಠ.clutz.goog.ui.media.FlashObject;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.media.FlashObject {
    /**
     * The different levels of allowScriptAccess.
     *
     * Talked about at:
     * http://kb2.adobe.com/cps/164/tn_16494.html
     */
    type ScriptAccessLevel = string&{clutzEnumBrand: never};
    var ScriptAccessLevel: {
        ALWAYS: ScriptAccessLevel,
        NEVER: ScriptAccessLevel,
        SAME_DOMAIN: ScriptAccessLevel,
    };
}
declare module 'goog:goog.ui.media.FlashObject.ScriptAccessLevel' {
    import alias = ಠ_ಠ.clutz.goog.ui.media.FlashObject.ScriptAccessLevel;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.media.FlashObject {
    /**
     * The different modes for displaying a SWF. Note that different wmodes
     * can result in different bugs in different browsers and also that
     * both OPAQUE and TRANSPARENT will result in a performance hit.
     */
    type Wmodes = string&{clutzEnumBrand: never};
    var Wmodes: {
        OPAQUE: Wmodes,
        TRANSPARENT: Wmodes,
        WINDOW: Wmodes,
    };
}
declare module 'goog:goog.ui.media.FlashObject.Wmodes' {
    import alias = ಠ_ಠ.clutz.goog.ui.media.FlashObject.Wmodes;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.media {
    /**
     * Subclasses a goog.ui.media.MediaRenderer to provide a FlickrSet specific
     * media renderer.
     *
     * This class knows how to parse FlickrSet URLs, and render the DOM
     * structure of flickr set players. This class is meant to be used as a
     * singleton static stateless class, that takes {@code goog.ui.media.Media}
     * instances and renders it. It expects {@code goog.ui.media.Media.getModel}
     * to return a well formed,
     * previously constructed, set id {@see goog.ui.media.FlickrSet.parseUrl},
     * which is the data model this renderer will use to construct the DOM
     * structure. {@see goog.ui.media.FlickrSet.newControl} for a example of
     * constructing a control with this renderer.
     *
     * This design is patterned after
     * http://go/closure_control_subclassing
     *
     * It uses {@link goog.ui.media.FlashObject} to embed the flash object.
     */
    class FlickrSet extends FlickrSet_Instance {
        /**
         * Default CSS class to be applied to the root element of components
         * rendered by this renderer.
         */
        static CSS_CLASS: string;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.media.FlickrSet;
        static instance_: ಠ_ಠ.clutz.goog.ui.media.FlickrSet;
        /**
         * A static convenient method to construct a goog.ui.media.Media control
         * out of a FlickrSet URL. It extracts the set id information on the
         * URL, sets it as the data model goog.ui.media.FlickrSet renderer uses,
         * sets the states supported by the renderer, and returns a Control that
         * binds everything together. This is what you should be using for
         * constructing FlickrSet videos, except if you need more fine control
         * over the configuration.
         * @param dataModel The Flickr Set data model.
         * @param opt_domHelper Optional DOM helper, used for document
         * interaction.
         */
        static newControl(
            dataModel: ಠ_ಠ.clutz.goog.ui.media.FlickrSetModel|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|
            null): ಠ_ಠ.clutz.goog.ui.media.Media;
        /**
         * A static method that sets which flash URL this class should use. Use
         * this if you want to host your own flash flickr player.
         * @param flashUrl The URL of the flash flickr player.
         */
        static setFlashUrl(flashUrl: ಠ_ಠ.clutz.goog.html.TrustedResourceUrl):
            void;
    }
    class FlickrSet_Instance extends
        ಠ_ಠ.clutz.goog.ui.media.MediaRenderer_Instance {
        /**
         * Creates the initial DOM structure of the flickr set, which is
         * basically a the flash object pointing to a flickr set player.
         * @param c The media control.
         */
        createDom(c: ಠ_ಠ.clutz.goog.ui.Control|null): GlobalElement;
        /**
         * Returns the CSS class to be applied to the root element of components
         * rendered using this renderer.
         */
        getCssClass(): string;
    }
}
declare module 'goog:goog.ui.media.FlickrSet' {
    import alias = ಠ_ಠ.clutz.goog.ui.media.FlickrSet;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.media {
    /**
     * The {@code goog.ui.media.FlickrAlbum} media data model. It stores a
     * required
     * {@code userId} and {@code setId} fields, sets the flickr Set URL, and
     * allows a few optional parameters.
     */
    class FlickrSetModel extends FlickrSetModel_Instance {
        /**
         * Takes a flickr username and set id and returns an URL.
         * @param userId The owner of the set.
         * @param setId The set id.
         */
        static buildUrl(userId: string, setId: string): string;
        /**
         * Takes a {@code flickrSetUrl} and extracts the flickr username and set
         * id.
         * @param flickrSetUrl A Flickr set URL.
         * @param opt_caption An optional caption of the flickr set.
         * @param opt_description An optional description of the flickr set.
         */
        static newInstance(
            flickrSetUrl: string, opt_caption?: string,
            opt_description?: string): ಠ_ಠ.clutz.goog.ui.media.FlickrSetModel;
    }
    class FlickrSetModel_Instance extends
        ಠ_ಠ.clutz.goog.ui.media.MediaModel_Instance {
        /**
         * The {@code goog.ui.media.FlickrAlbum} media data model. It stores a
         * required
         * {@code userId} and {@code setId} fields, sets the flickr Set URL, and
         * allows a few optional parameters.
         * @param userId The flickr userId associated with this set.
         * @param setId The flickr setId associated with this set.
         * @param opt_caption An optional caption of the flickr set.
         * @param opt_description An optional description of the flickr set.
         */
        constructor(
            userId: string, setId: string, opt_caption?: string,
            opt_description?: string);
        /**
         * Gets the Flickr set id.
         */
        getSetId(): string;
        /**
         * Gets the Flickr user id.
         */
        getUserId(): string;
    }
}
declare module 'goog:goog.ui.media.FlickrSetModel' {
    import alias = ಠ_ಠ.clutz.goog.ui.media.FlickrSetModel;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.media {
    /**
     * Subclasses a goog.ui.media.MediaRenderer to provide a GoogleVideo
     * specific media renderer.
     *
     * This class knows how to parse GoogleVideo URLs, and render the DOM
     * structure of GoogleVideo video players. This class is meant to be used as
     * a singleton static stateless class, that takes {@code
     * goog.ui.media.Media} instances and renders it. It expects {@code
     * goog.ui.media.Media.getModel} to return a well formed, previously
     * constructed, GoogleVideo video id, which is the data model this renderer
     * will use to construct the DOM structure.
     * {@see goog.ui.media.GoogleVideo.newControl} for a example of constructing a
     * control with this renderer.
     *
     * This design is patterned after http://go/closure_control_subclassing
     *
     * It uses {@link goog.ui.media.FlashObject} to embed the flash object.
     */
    class GoogleVideo extends GoogleVideo_Instance {
        /**
         * Default CSS class to be applied to the root element of components
         * rendered by this renderer.
         */
        static CSS_CLASS: string;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.media.GoogleVideo;
        static instance_: ಠ_ಠ.clutz.goog.ui.media.GoogleVideo;
        /**
         * A static convenient method to construct a goog.ui.media.Media control
         * out of a GoogleVideo model. It sets it as the data model
         * goog.ui.media.GoogleVideo renderer uses, sets the states supported by
         * the renderer, and returns a Control that binds everything together.
         * This is what you should be using for constructing GoogleVideo videos,
         * except if you need finer control over the configuration.
         * @param dataModel The GoogleVideo data model.
         * @param opt_domHelper Optional DOM helper, used for document
         * interaction.
         */
        static newControl(
            dataModel: ಠ_ಠ.clutz.goog.ui.media.GoogleVideoModel|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|
            null): ಠ_ಠ.clutz.goog.ui.media.Media;
    }
    class GoogleVideo_Instance extends
        ಠ_ಠ.clutz.goog.ui.media.MediaRenderer_Instance {
        /**
         * Creates the initial DOM structure of the GoogleVideo video, which is
         * basically a the flash object pointing to a GoogleVideo video player.
         * @param c The media control.
         */
        createDom(c: ಠ_ಠ.clutz.goog.ui.Control|null): GlobalElement;
        /**
         * Returns the CSS class to be applied to the root element of components
         * rendered using this renderer.
         */
        getCssClass(): string;
    }
}
declare module 'goog:goog.ui.media.GoogleVideo' {
    import alias = ಠ_ಠ.clutz.goog.ui.media.GoogleVideo;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.media {
    /**
     * The {@code goog.ui.media.GoogleVideo} media data model. It stores a
     * required
     * {@code videoId} field, sets the GoogleVideo URL, and allows a few
     * optional parameters.
     */
    class GoogleVideoModel extends GoogleVideoModel_Instance {
        /**
         * An auxiliary method that builds URL of the flash movie to be
         * embedded, out of the GoogleVideo video id.
         * @param videoId The GoogleVideo video ID.
         * @param opt_autoplay Whether the flash movie should start playing as
         * soon as it is shown, or if it should show a 'play' button.
         */
        static buildFlashUrl(videoId: string, opt_autoplay?: boolean):
            ಠ_ಠ.clutz.goog.html.TrustedResourceUrl;
        /**
         * The opposite of {@code goog.ui.media.GoogleVideo.newInstance}: it
         * takes a videoId and returns a GoogleVideo URL.
         * @param videoId The GoogleVideo video ID.
         */
        static buildUrl(videoId: string): string;
        /**
         * A auxiliary static method that parses a GoogleVideo URL, extracting
         * the ID of the video, and builds a GoogleVideoModel.
         * @param googleVideoUrl A GoogleVideo video URL.
         * @param opt_caption An optional caption of the GoogleVideo video.
         * @param opt_description An optional description of the GoogleVideo
         * video.
         * @param opt_autoplay Whether to autoplay video.
         */
        static newInstance(
            googleVideoUrl: string, opt_caption?: string,
            opt_description?: string,
            opt_autoplay?: boolean): ಠ_ಠ.clutz.goog.ui.media.GoogleVideoModel;
    }
    class GoogleVideoModel_Instance extends
        ಠ_ಠ.clutz.goog.ui.media.MediaModel_Instance {
        /**
         * The {@code goog.ui.media.GoogleVideo} media data model. It stores a
         * required
         * {@code videoId} field, sets the GoogleVideo URL, and allows a few
         * optional parameters.
         * @param videoId The GoogleVideo video id.
         * @param opt_caption An optional caption of the GoogleVideo video.
         * @param opt_description An optional description of the GoogleVideo
         * video.
         * @param opt_autoplay Whether to autoplay video.
         */
        constructor(
            videoId: string, opt_caption?: string, opt_description?: string,
            opt_autoplay?: boolean);
        /**
         * Gets the GoogleVideo video id.
         */
        getVideoId(): string;
    }
}
declare module 'goog:goog.ui.media.GoogleVideoModel' {
    import alias = ಠ_ಠ.clutz.goog.ui.media.GoogleVideoModel;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.media {
    /**
     * Provides the control mechanism of media types.
     */
    class Media extends Media_Instance {}
    class Media_Instance extends ಠ_ಠ.clutz.goog.ui.Control_Instance {
        /**
         * Provides the control mechanism of media types.
         * @param dataModel The data model to be used by the renderer.
         * @param opt_renderer Renderer used to render or decorate the
         * component; defaults to {@link goog.ui.ControlRenderer}.
         * @param opt_domHelper Optional DOM helper, used for document
         * interaction.
         */
        constructor(
            dataModel: ಠ_ಠ.clutz.goog.ui.media.MediaModel|null,
            opt_renderer?: ಠ_ಠ.clutz.goog.ui.ControlRenderer|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * Gets the media model renderer is using.
         */
        getDataModel(): ಠ_ಠ.clutz.goog.ui.media.MediaModel|null;
        /**
         * Sets the media model to be used on the renderer.
         * @param dataModel The media model the renderer should use.
         */
        setDataModel(dataModel: ಠ_ಠ.clutz.goog.ui.media.MediaModel|null): void;
    }
}
declare module 'goog:goog.ui.media.Media' {
    import alias = ಠ_ಠ.clutz.goog.ui.media.Media;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.media {
    /**
     * An base data value class for all media data models.
     *
     * MediaModels are exact matches to the fields defined in the Yahoo RSS
     * media specification {@link http://search.yahoo.com/mrss/}.
     *
     * The current common data shared by medias is to have URLs, mime types,
     * captions, descriptions, thumbnails and players. Some of these may not be
     * available, or applications may not want to render them, so {@code null}
     * values are allowed. {@code goog.ui.media.MediaRenderer} checks whether
     * the values are available before creating DOMs for them.
     */
    class MediaModel extends MediaModel_Instance {}
    class MediaModel_Instance {
        private noStructuralTyping_: any;
        /**
         * An base data value class for all media data models.
         *
         * MediaModels are exact matches to the fields defined in the Yahoo RSS
         * media specification {@link http://search.yahoo.com/mrss/}.
         *
         * The current common data shared by medias is to have URLs, mime types,
         * captions, descriptions, thumbnails and players. Some of these may not
         * be available, or applications may not want to render them, so {@code
         * null} values are allowed. {@code goog.ui.media.MediaRenderer} checks
         * whether the values are available before creating DOMs for them.
         * @param opt_url An optional URL of the media.
         * @param opt_caption An optional caption of the media.
         * @param opt_description An optional description of the media.
         * @param opt_type The type of the media.
         * @param opt_medium The medium of the media.
         * @param opt_duration The duration of the media in seconds.
         * @param opt_width The width of the media in pixels.
         * @param opt_height The height of the media in pixels.
         */
        constructor(
            opt_url?: string, opt_caption?: string, opt_description?: string,
            opt_type?: ಠ_ಠ.clutz.goog.ui.media.MediaModel.MimeType,
            opt_medium?: ಠ_ಠ.clutz.goog.ui.media.MediaModel.Medium,
            opt_duration?: number, opt_width?: number, opt_height?: number);
        /**
         * Finds the first category with the given scheme.
         * @param scheme The scheme to search for.
         */
        findCategoryWithScheme(scheme: string):
            ಠ_ಠ.clutz.goog.ui.media.MediaModel.Category|null;
        /**
         * Finds all credits with the given role.
         * @param role The role to search for.
         */
        findCreditsWithRole(role: string):
            ಠ_ಠ.clutz.goog.ui.media.MediaModel.Credit[];
        /**
         * Gets the caption of this media.
         */
        getCaption(): string|undefined;
        /**
         * Gets the categories of the media.
         */
        getCategories(): (ಠ_ಠ.clutz.goog.ui.media.MediaModel.Category|
                          null)[]|null;
        /**
         * Gets the credits of the media.
         */
        getCredits(): (ಠ_ಠ.clutz.goog.ui.media.MediaModel.Credit|null)[];
        /**
         * Gets the description of this media.
         */
        getDescription(): string|undefined;
        /**
         * Gets the duration of the media.
         */
        getDuration(): number|undefined;
        /**
         * Gets the height of the media in pixels.
         */
        getHeight(): number|undefined;
        /**
         * Gets the media medium.
         */
        getMedium(): ಠ_ಠ.clutz.goog.ui.media.MediaModel.Medium|undefined;
        /**
         * Gets the player data.
         */
        getPlayer(): ಠ_ಠ.clutz.goog.ui.media.MediaModel.Player|null|undefined;
        /**
         * Gets the subtitles for the media.
         */
        getSubTitles(): (ಠ_ಠ.clutz.goog.ui.media.MediaModel.SubTitle|
                         null)[]|null;
        /**
         * Gets the thumbnail urls.
         */
        getThumbnails(): (ಠ_ಠ.clutz.goog.ui.media.MediaModel.Thumbnail|
                          null)[]|null;
        /**
         * Gets the media mime type.
         */
        getType(): ಠ_ಠ.clutz.goog.ui.media.MediaModel.MimeType|undefined;
        /**
         * Gets the URL of this media.
         */
        getUrl(): string|undefined;
        /**
         * Gets the width of the media in pixels.
         */
        getWidth(): number|undefined;
        /**
         * Sets the caption of this media.
         * @param caption The caption of the media.
         */
        setCaption(caption: string): ಠ_ಠ.clutz.goog.ui.media.MediaModel;
        /**
         * Sets the categories of the media
         * @param categories The categories of the media.
         */
        setCategories(categories:
                          (ಠ_ಠ.clutz.goog.ui.media.MediaModel.Category|null)[]|
                      null): ಠ_ಠ.clutz.goog.ui.media.MediaModel;
        /**
         * Sets the credits of the media
         * @param credits The credits of the media.
         */
        setCredits(credits: (ಠ_ಠ.clutz.goog.ui.media.MediaModel.Credit|null)[]):
            ಠ_ಠ.clutz.goog.ui.media.MediaModel;
        /**
         * Sets the description of this media.
         * @param description The description of the media.
         */
        setDescription(description: string): ಠ_ಠ.clutz.goog.ui.media.MediaModel;
        /**
         * Sets duration of the media.
         * @param duration The duration of the media, in seconds.
         */
        setDuration(duration: number): ಠ_ಠ.clutz.goog.ui.media.MediaModel;
        /**
         * Sets the height of the media.
         * @param height The height of the media, in pixels.
         */
        setHeight(height: number): ಠ_ಠ.clutz.goog.ui.media.MediaModel;
        /**
         * Sets the media medium.
         * @param medium The media medium.
         */
        setMedium(medium: ಠ_ಠ.clutz.goog.ui.media.MediaModel.Medium):
            ಠ_ಠ.clutz.goog.ui.media.MediaModel;
        /**
         * Sets the player data.
         * @param player The media player data.
         */
        setPlayer(player: ಠ_ಠ.clutz.goog.ui.media.MediaModel.Player|
                  null): ಠ_ಠ.clutz.goog.ui.media.MediaModel;
        /**
         * Sets the subtitles for the media
         * @param subtitles The subtitles.
         */
        setSubTitles(subtitles:
                         (ಠ_ಠ.clutz.goog.ui.media.MediaModel.SubTitle|null)[]|
                     null): ಠ_ಠ.clutz.goog.ui.media.MediaModel;
        /**
         * Sets the thumbnail list.
         * @param thumbnails The list of thumbnail.
         */
        setThumbnails(thumbnails:
                          (ಠ_ಠ.clutz.goog.ui.media.MediaModel.Thumbnail|null)[]|
                      null): ಠ_ಠ.clutz.goog.ui.media.MediaModel;
        /**
         * Sets the media mime type.
         * @param type The media mime type.
         */
        setType(type: ಠ_ಠ.clutz.goog.ui.media.MediaModel.MimeType):
            ಠ_ಠ.clutz.goog.ui.media.MediaModel;
        /**
         * Sets the URL of this media.
         * @param url The URL of the media.
         */
        setUrl(url: string): ಠ_ಠ.clutz.goog.ui.media.MediaModel;
        /**
         * Sets the width of the media.
         * @param width The width of the media, in pixels.
         */
        setWidth(width: number): ಠ_ಠ.clutz.goog.ui.media.MediaModel;
    }
}
declare module 'goog:goog.ui.media.MediaModel' {
    import alias = ಠ_ಠ.clutz.goog.ui.media.MediaModel;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.media.MediaModel {
    /**
     * A taxonomy to be set that gives an indication of the type of media
     * content, and its particular contents.
     */
    class Category extends Category_Instance {}
    class Category_Instance {
        private noStructuralTyping_: any;
        /**
         * A taxonomy to be set that gives an indication of the type of media
         * content, and its particular contents.
         * @param scheme The URI that identifies the categorization scheme.
         * @param value The value of the category.
         * @param opt_label The human readable label that can be displayed in
         * end user applications.
         */
        constructor(scheme: string, value: string, opt_label?: string);
        /**
         * Gets the label of the category.
         */
        getLabel(): string;
        /**
         * Gets the category scheme.
         */
        getScheme(): string;
        /**
         * Gets the categor's value.
         */
        getValue(): string;
        /**
         * Sets the label of the category.
         * @param label The label of the category.
         */
        setLabel(label: string): ಠ_ಠ.clutz.goog.ui.media.MediaModel.Category;
        /**
         * Sets the category scheme.
         * @param scheme The category's scheme.
         */
        setScheme(scheme: string): ಠ_ಠ.clutz.goog.ui.media.MediaModel.Category;
        /**
         * Sets the category value.
         * @param value The category value to be set.
         */
        setValue(value: string): ಠ_ಠ.clutz.goog.ui.media.MediaModel.Category;
    }
}
declare module 'goog:goog.ui.media.MediaModel.Category' {
    import alias = ಠ_ಠ.clutz.goog.ui.media.MediaModel.Category;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.media.MediaModel {
    /**
     * Indicates an entity that has contributed to a media object. Based on
     * 'media.credit' in the rss spec.
     */
    class Credit extends Credit_Instance {}
    class Credit_Instance {
        private noStructuralTyping_: any;
        /**
         * Indicates an entity that has contributed to a media object. Based on
         * 'media.credit' in the rss spec.
         * @param value The name of the entity being credited.
         * @param opt_role The role the entity played.
         * @param opt_scheme The URI that identifies the role scheme.
         */
        constructor(
            value: string,
            opt_role?: ಠ_ಠ.clutz.goog.ui.media.MediaModel.Credit.Role,
            opt_scheme?: ಠ_ಠ.clutz.goog.ui.media.MediaModel.Credit.Scheme);
        /**
         * Gets the role of the entity being credited.
         */
        getRole(): ಠ_ಠ.clutz.goog.ui.media.MediaModel.Credit.Role|undefined;
        /**
         * Gets the scheme of the credit object.
         */
        getScheme(): ಠ_ಠ.clutz.goog.ui.media.MediaModel.Credit.Scheme|undefined;
        /**
         * Gets the name of the entity being credited.
         */
        getValue(): string;
        /**
         * Sets the role of the credit object.
         * @param role The role.
         */
        setRole(role: ಠ_ಠ.clutz.goog.ui.media.MediaModel.Credit.Role):
            ಠ_ಠ.clutz.goog.ui.media.MediaModel.Credit;
        /**
         * Sets the scheme of the credit object.
         * @param scheme The scheme.
         */
        setScheme(scheme: ಠ_ಠ.clutz.goog.ui.media.MediaModel.Credit.Scheme):
            ಠ_ಠ.clutz.goog.ui.media.MediaModel.Credit;
        /**
         * Sets the value of the credit object.
         * @param value The value.
         */
        setValue(value: string): ಠ_ಠ.clutz.goog.ui.media.MediaModel.Credit;
    }
}
declare module 'goog:goog.ui.media.MediaModel.Credit' {
    import alias = ಠ_ಠ.clutz.goog.ui.media.MediaModel.Credit;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.media.MediaModel.Credit {
    /**
     * The types of known roles.
     */
    type Role = string&{clutzEnumBrand: never};
    var Role: {
        OWNER: Role,
        UPLOADER: Role,
    };
}
declare module 'goog:goog.ui.media.MediaModel.Credit.Role' {
    import alias = ಠ_ಠ.clutz.goog.ui.media.MediaModel.Credit.Role;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.media.MediaModel.Credit {
    /**
     * The types of known schemes.
     */
    type Scheme = string&{clutzEnumBrand: never};
    var Scheme: {
        EUROPEAN_BROADCASTING: Scheme,
        YAHOO: Scheme,
        YOUTUBE: Scheme,
    };
}
declare module 'goog:goog.ui.media.MediaModel.Credit.Scheme' {
    import alias = ಠ_ಠ.clutz.goog.ui.media.MediaModel.Credit.Scheme;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.media.MediaModel {
    /**
     * Supported mediums, found here:
     * {@link http://video.search.yahoo.com/mrss}
     */
    type Medium = string&{clutzEnumBrand: never};
    var Medium: {
        AUDIO: Medium,
        DOCUMENT: Medium,
        EXECUTABLE: Medium,
        IMAGE: Medium,
        VIDEO: Medium,
    };
}
declare module 'goog:goog.ui.media.MediaModel.Medium' {
    import alias = ಠ_ಠ.clutz.goog.ui.media.MediaModel.Medium;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.media.MediaModel {
    /**
     * The supported media mime types, a subset of the media types found here:
     * {@link http://www.iana.org/assignments/media-types/} and here
     * {@link http://en.wikipedia.org/wiki/Internet_media_type}
     */
    type MimeType = string&{clutzEnumBrand: never};
    var MimeType: {
        FLASH: MimeType,
        GIF: MimeType,
        HTML: MimeType,
        JPEG: MimeType,
        PLAIN: MimeType,
        PNG: MimeType,
    };
}
declare module 'goog:goog.ui.media.MediaModel.MimeType' {
    import alias = ಠ_ಠ.clutz.goog.ui.media.MediaModel.MimeType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.media.MediaModel {
    /**
     * Constructs a player containing details of the player's URL and
     * optionally its size.
     */
    class Player extends Player_Instance {}
    class Player_Instance {
        private noStructuralTyping_: any;
        /**
         * Constructs a player containing details of the player's URL and
         * optionally its size.
         * @param url The URL of the player.
         * @param opt_vars Optional map of arguments to the player.
         * @param opt_size The size of the player if known.
         */
        constructor(
            url: ಠ_ಠ.clutz.goog.html.TrustedResourceUrl,
            opt_vars?: GlobalObject|null,
            opt_size?: ಠ_ಠ.clutz.goog.math.Size|null);
        /**
         * Gets the size of the player.
         */
        getSize(): ಠ_ಠ.clutz.goog.math.Size|null;
        /**
         * Gets the player URL.
         */
        getTrustedResourceUrl(): ಠ_ಠ.clutz.goog.html.TrustedResourceUrl;
        /**
         * Gets the player URL.
         */
        getUrl(): string;
        /**
         * Gets the player arguments.
         */
        getVars(): GlobalObject|null;
        /**
         * Sets the size of the player.
         * @param size The size of the player.
         */
        setSize(size: ಠ_ಠ.clutz.goog.math.Size|
                null): ಠ_ಠ.clutz.goog.ui.media.MediaModel.Player;
        /**
         * Sets the player URL.
         * @param url The player's URL.
         */
        setUrl(url: ಠ_ಠ.clutz.goog.html.TrustedResourceUrl):
            ಠ_ಠ.clutz.goog.ui.media.MediaModel.Player;
        /**
         * Sets the player arguments.
         * @param vars The media player arguments.
         */
        setVars(vars: GlobalObject|
                null): ಠ_ಠ.clutz.goog.ui.media.MediaModel.Player;
    }
}
declare module 'goog:goog.ui.media.MediaModel.Player' {
    import alias = ಠ_ಠ.clutz.goog.ui.media.MediaModel.Player;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.media.MediaModel {
    /**
     * A reference to the subtitle URI for a media object.
     * Implements the 'media.subTitle' in the rss spec.
     */
    class SubTitle extends SubTitle_Instance {}
    class SubTitle_Instance {
        private noStructuralTyping_: any;
        /**
         * A reference to the subtitle URI for a media object.
         * Implements the 'media.subTitle' in the rss spec.
         * @param href The subtitle's URI. to fetch the subtitle file.
         * @param lang An RFC 3066 language.
         * @param type The MIME type of the URI.
         */
        constructor(href: string, lang: string, type: string);
        /**
         * Get the href for the subtitle object.
         */
        getHref(): string;
        /**
         * Get the lang for the subtitle object.
         */
        getLang(): string;
        /**
         * Get the type for the subtitle object.
         */
        getType(): string;
        /**
         * Sets the href for the subtitle object.
         * @param href The subtitle's URI.
         */
        setHref(href: string): ಠ_ಠ.clutz.goog.ui.media.MediaModel.SubTitle;
        /**
         * Sets the language for the subtitle object.
         * @param lang The RFC 3066 language.
         */
        setLang(lang: string): ಠ_ಠ.clutz.goog.ui.media.MediaModel.SubTitle;
        /**
         * Sets the type for the subtitle object.
         * @param type The MIME type.
         */
        setType(type: string): ಠ_ಠ.clutz.goog.ui.media.MediaModel.SubTitle;
    }
}
declare module 'goog:goog.ui.media.MediaModel.SubTitle' {
    import alias = ಠ_ಠ.clutz.goog.ui.media.MediaModel.SubTitle;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.media.MediaModel {
    /**
     * Constructs a thumbnail containing details of the thumbnail's image URL
     * and optionally its size.
     */
    class Thumbnail extends Thumbnail_Instance {}
    class Thumbnail_Instance {
        private noStructuralTyping_: any;
        /**
         * Constructs a thumbnail containing details of the thumbnail's image
         * URL and optionally its size.
         * @param url The URL of the thumbnail's image.
         * @param opt_size The size of the thumbnail's image if known.
         */
        constructor(url: string, opt_size?: ಠ_ಠ.clutz.goog.math.Size|null);
        /**
         * Gets the thumbnail size.
         */
        getSize(): ಠ_ಠ.clutz.goog.math.Size|null;
        /**
         * Gets the thumbnail URL.
         */
        getUrl(): string;
        /**
         * Sets the thumbnail size.
         * @param size The size of the thumbnail's image.
         */
        setSize(size: ಠ_ಠ.clutz.goog.math.Size|
                null): ಠ_ಠ.clutz.goog.ui.media.MediaModel.Thumbnail;
        /**
         * Sets the thumbnail URL.
         * @param url The thumbnail's image URL.
         */
        setUrl(url: string): ಠ_ಠ.clutz.goog.ui.media.MediaModel.Thumbnail;
    }
}
declare module 'goog:goog.ui.media.MediaModel.Thumbnail' {
    import alias = ಠ_ಠ.clutz.goog.ui.media.MediaModel.Thumbnail;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.media {
    /**
     * Base class of all media renderers. Provides the common renderer
     * functionality of medias.
     *
     * The current common functionality shared by Medias is to have an outer
     * frame that gets highlighted on mouse hover.
     *
     * TODO(user): implement more common UI behavior, as needed.
     *
     * NOTE(user): I am not enjoying how the subclasses are changing their state
     * through setState() ... maybe provide abstract methods like
     * goog.ui.media.MediaRenderer.prototype.preview = goog.abstractMethod;
     * goog.ui.media.MediaRenderer.prototype.play = goog.abstractMethod;
     * goog.ui.media.MediaRenderer.prototype.minimize = goog.abstractMethod;
     * goog.ui.media.MediaRenderer.prototype.maximize = goog.abstractMethod;
     * and call them on this parent class setState ?
     */
    class MediaRenderer extends MediaRenderer_Instance {}
    class MediaRenderer_Instance extends
        ಠ_ಠ.clutz.goog.ui.ControlRenderer_Instance {
        /**
         * Builds the common DOM structure of medias. Builds an outer div, and
         * appends a child div with the {@code goog.ui.Control.getContent}
         * content. Marks the caption with a {@code this.getClassClass()} +
         * '-caption' css flag, so that specific renderers can hide/show the
         * caption as desired.
         * @param control The control instance.
         */
        createDom(control: ಠ_ಠ.clutz.goog.ui.Control|null): GlobalElement;
        /**
         * Returns a renamable CSS class name for a numbered thumbnail. The
         * default implementation generates the class names
         * goog-ui-media-thumbnail0, goog-ui-media-thumbnail1, and the generic
         * goog-ui-media-thumbnailn. Subclasses can override this method when
         * their media requires additional specific class names (Applications
         * are supposed to know how many thumbnails media will have).
         * @param index The thumbnail index.
         */
        getThumbnailCssName(index: number): string;
    }
}
declare module 'goog:goog.ui.media.MediaRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.media.MediaRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.media {
    /**
     * Subclasses a goog.ui.media.MediaRenderer to provide a Mp3 specific media
     * renderer.
     *
     * This class knows how to parse mp3 URLs, and render the DOM structure
     * of mp3 flash players. This class is meant to be used as a singleton
     * static stateless class, that takes {@code goog.ui.media.Media} instances
     * and renders it. It expects {@code goog.ui.media.Media.getModel} to return
     * a well formed,
     * previously checked, mp3 URL {@see goog.ui.media.PicasaAlbum.parseUrl},
     * which is the data model this renderer will use to construct the DOM
     * structure. {@see goog.ui.media.PicasaAlbum.newControl} for an example of
     * constructing a control with this renderer.
     *
     * This design is patterned after http://go/closure_control_subclassing
     *
     * It uses {@link goog.ui.media.FlashObject} to embed the flash object.
     */
    class Mp3 extends Mp3_Instance {
        /**
         * Default CSS class to be applied to the root element of components
         * rendered by this renderer.
         */
        static CSS_CLASS: string;
        /**
         * Regular expression to check if a given URL is a valid mp3 URL.
         *
         * Copied from http://go/markdownlite.js.
         *
         *
         * NOTE(user): although it would be easier to use
         * goog.string.endsWith('.mp3'), in the future, we want to provide media
         * inlining, which is basically getting a text and replacing all mp3
         * references with an mp3 player, so it makes sense to share the same
         * regular expression to match everything.
         */
        static MATCHER: RegExp|null;
        /**
         * A static method that builds a URL that will contain the flash player
         * that will play the {@code mp3Url}.
         * @param mp3Url The URL of the mp3 music.
         */
        static buildFlashUrl(mp3Url: string): string;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.media.Mp3;
        static instance_: ಠ_ಠ.clutz.goog.ui.media.Mp3;
        /**
         * A static convenient method to construct a goog.ui.media.Media control
         * out of a mp3 URL. It checks the mp3 URL, sets it as the data model
         * goog.ui.media.Mp3 renderer uses, sets the states supported by the
         * renderer, and returns a Control that binds everything together. This
         * is what you should be using for constructing Mp3 videos, except if
         * you need more fine control over the configuration.
         * @param dataModel A media model that must contain an mp3 url on {@code
         * dataModel.getUrl}.
         * @param opt_domHelper Optional DOM helper, used for document
         * interaction.
         */
        static newControl(
            dataModel: ಠ_ಠ.clutz.goog.ui.media.MediaModel|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|
            null): ಠ_ಠ.clutz.goog.ui.media.Media;
        /**
         * A static method that sets which flash URL this class should use. Use
         * this if you want to host your own flash mp3 player.
         * @param flashUrl The URL of the flash mp3 player.
         */
        static setFlashUrl(flashUrl: string): void;
    }
    class Mp3_Instance extends ಠ_ಠ.clutz.goog.ui.media.MediaRenderer_Instance {
        /**
         * Creates the initial DOM structure of a mp3 video, which is basically
         * a the flash object pointing to a flash mp3 player.
         * @param c The media control.
         */
        createDom(c: ಠ_ಠ.clutz.goog.ui.Control|null): GlobalElement;
        /**
         * Returns the CSS class to be applied to the root element of components
         * rendered using this renderer.
         */
        getCssClass(): string;
    }
}
declare module 'goog:goog.ui.media.Mp3' {
    import alias = ಠ_ಠ.clutz.goog.ui.media.Mp3;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.media {
    /**
     * Subclasses a goog.ui.media.MediaRenderer to provide a Photo specific
     * media renderer. Provides a base class for any other renderer that wants
     * to display photos.
     *
     * This class is meant to be used as a singleton static stateless class,
     * that takes {@code goog.ui.media.Media} instances and renders it.
     *
     * This design is patterned after
     * http://go/closure_control_subclassing
     */
    class Photo extends Photo_Instance {
        /**
         * Default CSS class to be applied to the root element of components
         * rendered by this renderer.
         */
        static CSS_CLASS: string;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.media.Photo;
        static instance_: ಠ_ಠ.clutz.goog.ui.media.Photo;
        /**
         * A static convenient method to construct a goog.ui.media.Media control
         * out of a photo {@code goog.ui.media.MediaModel}. It sets it as the
         * data model goog.ui.media.Photo renderer uses, sets the states
         * supported by the renderer, and returns a Control that binds
         * everything together. This is what you should be using for
         * constructing Photos, except if you need finer control over the
         * configuration.
         * @param dataModel The photo data model.
         */
        static newControl(dataModel: ಠ_ಠ.clutz.goog.ui.media.MediaModel|
                          null): ಠ_ಠ.clutz.goog.ui.media.Media;
    }
    class Photo_Instance extends
        ಠ_ಠ.clutz.goog.ui.media.MediaRenderer_Instance {
        /**
         * Creates the initial DOM structure of a photo.
         * @param c The media control.
         */
        createDom(c: ಠ_ಠ.clutz.goog.ui.Control|null): GlobalElement;
        /**
         * Returns the CSS class to be applied to the root element of components
         * rendered using this renderer.
         */
        getCssClass(): string;
    }
}
declare module 'goog:goog.ui.media.Photo' {
    import alias = ಠ_ಠ.clutz.goog.ui.media.Photo;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.media {
    /**
     * Subclasses a goog.ui.media.MediaRenderer to provide a Picasa specific
     * media renderer.
     *
     * This class knows how to parse picasa URLs, and render the DOM structure
     * of picasa album players and previews. This class is meant to be used as a
     * singleton static stateless class, that takes {@code goog.ui.media.Media}
     * instances and renders it. It expects {@code goog.ui.media.Media.getModel}
     * to return a well formed, previously constructed, object with a user and
     * album
     * fields {@see goog.ui.media.PicasaAlbum.parseUrl}, which is the data model
     * this renderer will use to construct the DOM structure.
     * {@see goog.ui.media.PicasaAlbum.newControl} for a example of constructing a
     * control with this renderer.
     *
     * goog.ui.media.PicasaAlbum currently displays a picasa-made flash
     * slideshow with the photos, but could possibly display a handwritten js
     * photo viewer, in case flash is not available.
     *
     * This design is patterned after http://go/closure_control_subclassing
     *
     * It uses {@link goog.ui.media.FlashObject} to embed the flash object.
     */
    class PicasaAlbum extends PicasaAlbum_Instance {
        /**
         * Default CSS class to be applied to the root element of components
         * rendered by this renderer.
         */
        static CSS_CLASS: string;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.media.PicasaAlbum;
        static instance_: ಠ_ಠ.clutz.goog.ui.media.PicasaAlbum;
        /**
         * A static convenient method to construct a goog.ui.media.Media control
         * out of a picasa data model. It sets it as the data model
         * goog.ui.media.PicasaAlbum renderer uses, sets the states supported by
         * the renderer, and returns a Control that binds everything together.
         * This is what you should be using for constructing Picasa albums,
         * except if you need finer control over the configuration.
         * @param dataModel A picasa album data model.
         * @param opt_domHelper Optional DOM helper, used for document
         * interaction.
         */
        static newControl(
            dataModel: ಠ_ಠ.clutz.goog.ui.media.PicasaAlbumModel|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|
            null): ಠ_ಠ.clutz.goog.ui.media.Media;
    }
    class PicasaAlbum_Instance extends
        ಠ_ಠ.clutz.goog.ui.media.MediaRenderer_Instance {
        /**
         * Creates the initial DOM structure of the picasa album, which is
         * basically a the flash object pointing to a flash picasa album player.
         * @param c The media control.
         */
        createDom(c: ಠ_ಠ.clutz.goog.ui.Control|null): GlobalElement;
        /**
         * Returns the CSS class to be applied to the root element of components
         * rendered using this renderer.
         */
        getCssClass(): string;
    }
}
declare module 'goog:goog.ui.media.PicasaAlbum' {
    import alias = ಠ_ಠ.clutz.goog.ui.media.PicasaAlbum;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.media {
    /**
     * The {@code goog.ui.media.PicasaAlbum} media data model. It stores a
     * required
     * {@code userId} and {@code albumId} fields, sets the picasa album URL, and
     * allows a few optional parameters.
     */
    class PicasaAlbumModel extends PicasaAlbumModel_Instance {
        /**
         * The opposite of {@code newInstance}: takes an {@code userId} and an
         * {@code albumId} and builds a URL.
         * @param userId The user that owns the album.
         * @param albumId The album id.
         */
        static buildUrl(userId: string, albumId: string): string;
        /**
         * Gets a {@code picasaUrl} and extracts the user and album id.
         * @param picasaUrl A picasa album URL.
         * @param opt_caption An optional caption of the picasa album.
         * @param opt_description An optional description of the picasa album.
         * @param opt_autoplay Whether to autoplay the slideshow.
         */
        static newInstance(
            picasaUrl: string, opt_caption?: string, opt_description?: string,
            opt_autoplay?: boolean): ಠ_ಠ.clutz.goog.ui.media.PicasaAlbumModel;
    }
    class PicasaAlbumModel_Instance extends
        ಠ_ಠ.clutz.goog.ui.media.MediaModel_Instance {
        /**
         * The {@code goog.ui.media.PicasaAlbum} media data model. It stores a
         * required
         * {@code userId} and {@code albumId} fields, sets the picasa album URL,
         * and allows a few optional parameters.
         * @param userId The picasa userId associated with this album.
         * @param albumId The picasa albumId associated with this album.
         * @param opt_authKey An optional authentication key, used on private
         * albums.
         * @param opt_caption An optional caption of the picasa album.
         * @param opt_description An optional description of the picasa album.
         * @param opt_autoplay Whether to autoplay the slideshow.
         */
        constructor(
            userId: string, albumId: string, opt_authKey?: string,
            opt_caption?: string, opt_description?: string,
            opt_autoplay?: boolean);
        /**
         * Gets the Picasa album id.
         */
        getAlbumId(): string;
        /**
         * Gets the Picasa album authentication key.
         */
        getAuthKey(): string|null;
        /**
         * Gets the Picasa user id.
         */
        getUserId(): string;
    }
}
declare module 'goog:goog.ui.media.PicasaAlbumModel' {
    import alias = ಠ_ಠ.clutz.goog.ui.media.PicasaAlbumModel;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.media {
    /**
     * Subclasses a goog.ui.media.MediaRenderer to provide a Vimeo specific
     * media renderer.
     *
     * This class knows how to parse Vimeo URLs, and render the DOM structure
     * of vimeo video players. This class is meant to be used as a singleton
     * static stateless class, that takes {@code goog.ui.media.Media} instances
     * and renders it. It expects {@code goog.ui.media.Media.getModel} to return
     * a well formed,
     * previously constructed, vimeoId {@see goog.ui.media.Vimeo.parseUrl}, which is
     * the data model this renderer will use to construct the DOM structure.
     * {@see goog.ui.media.Vimeo.newControl} for a example of constructing a control
     * with this renderer.
     *
     * This design is patterned after http://go/closure_control_subclassing
     *
     * It uses {@link goog.ui.media.FlashObject} to embed the flash object.
     */
    class Vimeo extends Vimeo_Instance {
        /**
         * Default CSS class to be applied to the root element of components
         * rendered by this renderer.
         */
        static CSS_CLASS: string;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.media.Vimeo;
        static instance_: ಠ_ಠ.clutz.goog.ui.media.Vimeo;
        /**
         * A static convenient method to construct a goog.ui.media.Media control
         * out of a Vimeo URL. It extracts the videoId information on the URL,
         * sets it as the data model goog.ui.media.Vimeo renderer uses, sets the
         * states supported by the renderer, and returns a Control that binds
         * everything together. This is what you should be using for
         * constructing Vimeo videos, except if you need more fine control over
         * the configuration.
         * @param dataModel A vimeo video URL.
         * @param opt_domHelper Optional DOM helper, used for document
         * interaction.
         */
        static newControl(
            dataModel: ಠ_ಠ.clutz.goog.ui.media.VimeoModel|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|
            null): ಠ_ಠ.clutz.goog.ui.media.Media;
    }
    class Vimeo_Instance extends
        ಠ_ಠ.clutz.goog.ui.media.MediaRenderer_Instance {
        /**
         * Creates the initial DOM structure of the vimeo video, which is
         * basically a the flash object pointing to a vimeo video player.
         * @param c The media control.
         */
        createDom(c: ಠ_ಠ.clutz.goog.ui.Control|null): GlobalElement;
        /**
         * Returns the CSS class to be applied to the root element of components
         * rendered using this renderer.
         */
        getCssClass(): string;
    }
}
declare module 'goog:goog.ui.media.Vimeo' {
    import alias = ಠ_ಠ.clutz.goog.ui.media.Vimeo;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.media {
    /**
     * The {@code goog.ui.media.Vimeo} media data model. It stores a required
     * {@code videoId} field, sets the vimeo URL, and allows a few optional
     * parameters.
     */
    class VimeoModel extends VimeoModel_Instance {
        /**
         * Builds a flash url from the vimeo {@code videoId}.
         * @param videoId The vimeo video ID.
         * @param opt_autoplay Whether the flash movie should start playing as
         * soon as it is shown, or if it should show a 'play' button.
         */
        static buildFlashUrl(videoId: string, opt_autoplay?: boolean):
            ಠ_ಠ.clutz.goog.html.TrustedResourceUrl;
        /**
         * The opposite of {@code goog.ui.media.Vimeo.parseUrl}: it takes a
         * videoId and returns a vimeo URL.
         * @param videoId The vimeo video ID.
         */
        static buildUrl(videoId: string): string;
        /**
         * Takes a {@code vimeoUrl} and extracts the video id.
         * @param vimeoUrl A vimeo video URL.
         * @param opt_caption An optional caption of the vimeo video.
         * @param opt_description An optional description of the vimeo video.
         * @param opt_autoplay Whether to autoplay video.
         */
        static newInstance(
            vimeoUrl: string, opt_caption?: string, opt_description?: string,
            opt_autoplay?: boolean): ಠ_ಠ.clutz.goog.ui.media.VimeoModel;
    }
    class VimeoModel_Instance extends
        ಠ_ಠ.clutz.goog.ui.media.MediaModel_Instance {
        /**
         * The {@code goog.ui.media.Vimeo} media data model. It stores a
         * required
         * {@code videoId} field, sets the vimeo URL, and allows a few optional
         * parameters.
         * @param videoId The vimeo video id.
         * @param opt_caption An optional caption of the vimeo video.
         * @param opt_description An optional description of the vimeo video.
         * @param opt_autoplay Whether to autoplay video.
         */
        constructor(
            videoId: string, opt_caption?: string, opt_description?: string,
            opt_autoplay?: boolean);
        /**
         * Gets the Vimeo video id.
         */
        getVideoId(): string;
    }
}
declare module 'goog:goog.ui.media.VimeoModel' {
    import alias = ಠ_ಠ.clutz.goog.ui.media.VimeoModel;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.media {
    /**
     * Subclasses a goog.ui.media.MediaRenderer to provide a Youtube specific
     * media renderer.
     *
     * This class knows how to parse youtube urls, and render the DOM structure
     * of youtube video players and previews. This class is meant to be used as
     * a singleton static stateless class, that takes {@code
     * goog.ui.media.Media} instances and renders it. It expects {@code
     * goog.ui.media.Media.getModel} to return a well formed, previously
     * constructed, youtube video id, which is the data model this renderer will
     * use to construct the DOM structure.
     * {@see goog.ui.media.Youtube.newControl} for a example of constructing a
     * control with this renderer.
     *
     * goog.ui.media.Youtube currently supports all {@link
     * goog.ui.Component.State}. It will change its DOM structure between
     * SELECTED and !SELECTED, and rely on CSS definitions on the others. On
     * !SELECTED, the renderer will render a youtube static `<img>`, with a
     * thumbnail of the video. On SELECTED, the renderer will append to the DOM
     * a flash object, that contains the youtube video.
     *
     * This design is patterned after http://go/closure_control_subclassing
     *
     * It uses {@link goog.ui.media.FlashObject} to embed the flash object.
     */
    class Youtube extends Youtube_Instance {
        /**
         * Default CSS class to be applied to the root element of components
         * rendered by this renderer.
         */
        static CSS_CLASS: string;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.media.Youtube;
        static instance_: ಠ_ಠ.clutz.goog.ui.media.Youtube;
        /**
         * A static convenient method to construct a goog.ui.media.Media control
         * out of a youtube model. It sets it as the data model
         * goog.ui.media.Youtube renderer uses, sets the states supported by the
         * renderer, and returns a Control that binds everything together. This
         * is what you should be using for constructing Youtube videos, except
         * if you need finer control over the configuration.
         * @param youtubeModel The youtube data model.
         * @param opt_domHelper Optional DOM helper, used for document
         * interaction.
         */
        static newControl(
            youtubeModel: ಠ_ಠ.clutz.goog.ui.media.YoutubeModel|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|
            null): ಠ_ಠ.clutz.goog.ui.media.Media;
    }
    class Youtube_Instance extends
        ಠ_ಠ.clutz.goog.ui.media.MediaRenderer_Instance {
        /**
         * Returns the CSS class to be applied to the root element of components
         * rendered using this renderer.
         */
        getCssClass(): string;
        /**
         * Changes the state of a {@code control}. Currently only changes the
         * DOM structure when the youtube movie is SELECTED (by default fired by
         * a MOUSEUP on the thumbnail), which means we have to embed the youtube
         * flash video and play it.
         * @param c The media control.
         * @param state The state to be set or cleared.
         * @param enable Whether the state is enabled or disabled.
         */
        setState(
            c: ಠ_ಠ.clutz.goog.ui.Control|null,
            state: ಠ_ಠ.clutz.goog.ui.Component.State, enable: boolean): void;
    }
}
declare module 'goog:goog.ui.media.Youtube' {
    import alias = ಠ_ಠ.clutz.goog.ui.media.Youtube;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.media {
    /**
     * The {@code goog.ui.media.Youtube} media data model. It stores a required
     * {@code videoId} field, sets the youtube URL, and allows a few optional
     * parameters.
     */
    class YoutubeModel extends YoutubeModel_Instance {
        /**
         * The opposite of {@code goog.ui.media.Youtube.newInstance}: it takes a
         * videoId and returns a youtube URL.
         * @param videoId The youtube video ID.
         */
        static buildUrl(videoId: string): string;
        /**
         * A static auxiliary method that builds URL of the flash movie to be
         * embedded, out of the youtube video id.
         * @param videoId The youtube video ID.
         * @param opt_autoplay Whether the flash movie should start playing as
         * soon as it is shown, or if it should show a 'play' button.
         */
        static getFlashUrl(videoId: string, opt_autoplay?: boolean):
            ಠ_ಠ.clutz.goog.html.TrustedResourceUrl;
        /**
         * A static auxiliary method that builds a static image URL with a
         * preview of the youtube video.
         *
         * NOTE(user): patterned after Gmail's gadgets/youtube,
         *
         * TODO(user): how do I specify the width/height of the resulting image
         * on the url ? is there an official API for https://ytimg.com ?
         * @param youtubeId The youtube video ID.
         */
        static getThumbnailUrl(youtubeId: string): string;
        /**
         * A auxiliary static method that parses a youtube URL, extracting the
         * ID of the video, and builds a YoutubeModel.
         * @param youtubeUrl A youtube URL.
         * @param opt_caption An optional caption of the youtube video.
         * @param opt_description An optional description of the youtube video.
         */
        static newInstance(
            youtubeUrl: string, opt_caption?: string,
            opt_description?: string): ಠ_ಠ.clutz.goog.ui.media.YoutubeModel;
    }
    class YoutubeModel_Instance extends
        ಠ_ಠ.clutz.goog.ui.media.MediaModel_Instance {
        /**
         * The {@code goog.ui.media.Youtube} media data model. It stores a
         * required
         * {@code videoId} field, sets the youtube URL, and allows a few
         * optional parameters.
         * @param videoId The youtube video id.
         * @param opt_caption An optional caption of the youtube video.
         * @param opt_description An optional description of the youtube video.
         */
        constructor(
            videoId: string, opt_caption?: string, opt_description?: string);
        /**
         * Gets the Youtube video id.
         */
        getVideoId(): string;
    }
}
declare module 'goog:goog.ui.media.YoutubeModel' {
    import alias = ಠ_ಠ.clutz.goog.ui.media.YoutubeModel;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.menuBar {
    /**
     * The menuBar factory creates a new menu bar.
     * @param opt_renderer Renderer used to render or decorate the menu bar;
     * defaults to {@link goog.ui.MenuBarRenderer}.
     * @param opt_domHelper DOM helper, used for document interaction.
     */
    function create(
        opt_renderer?: ಠ_ಠ.clutz.goog.ui.ContainerRenderer|null,
        opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|
        null): ಠ_ಠ.clutz.goog.ui.Container;
}
declare module 'goog:goog.ui.menuBar' {
    import alias = ಠ_ಠ.clutz.goog.ui.menuBar;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui {
    var menuBarDecorator: GlobalObject;
}
declare module 'goog:goog.ui.menuBarDecorator' {
    import alias = ಠ_ಠ.clutz.goog.ui.menuBarDecorator;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.registry {
    /**
     * Returns an instance of {@link goog.ui.Component} or a subclass suitable
     * to decorate the given element, based on its CSS class.
     *
     * TODO(nnaze): Type of element should be {!Element}.
     * @param element Element to decorate.
     */
    function getDecorator(element: GlobalElement|
                          null): ಠ_ಠ.clutz.goog.ui.Component|null;
    /**
     * Returns the {@link goog.ui.Component} instance created by the decorator
     * factory function registered for the given CSS class name, or null if no
     * decorator factory function was found.
     * @param className CSS class name.
     */
    function getDecoratorByClassName(className: string):
        ಠ_ಠ.clutz.goog.ui.Component|null;
    /**
     * Given a {@link goog.ui.Component} constructor, returns an instance of its
     * default renderer.  If the default renderer is a singleton, returns the
     * singleton instance; otherwise returns a new instance of the renderer
     * class.
     * @param componentCtor Component constructor function (for example {@code
     * goog.ui.Button}).
     */
    function getDefaultRenderer(componentCtor: (...a: any[]) => any):
        ಠ_ಠ.clutz.goog.ui.ControlRenderer|null;
    /**
     * Resets the global renderer and decorator registry.
     */
    function reset(): void;
    /**
     * Maps a CSS class name to a function that returns a new instance of
     * {@link goog.ui.Component} or a subclass, suitable to decorate an element
     * that has the specified CSS class.
     * @param className CSS class name.
     * @param decoratorFn No-argument function that returns a new instance of a
     * {@link goog.ui.Component} to decorate an element.
     */
    function setDecoratorByClassName(
        className: string, decoratorFn: (...a: any[]) => any): void;
    /**
     * Sets the default renderer for the given {@link goog.ui.Component}
     * constructor.
     * @param componentCtor Component constructor function (for example {@code
     * goog.ui.Button}).
     * @param rendererCtor Renderer constructor function (for example {@code
     * goog.ui.ButtonRenderer}).
     */
    function setDefaultRenderer(
        componentCtor: (...a: any[]) => any,
        rendererCtor: (...a: any[]) => any): void;
}
declare module 'goog:goog.ui.registry' {
    import alias = ಠ_ಠ.clutz.goog.ui.registry;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.style.app {
    /**
     * Custom renderer for {@link goog.ui.Button}s. Imageless buttons can
     * contain almost arbitrary HTML content, will flow like inline elements,
     * but can be styled like block-level elements.
     */
    class ButtonRenderer extends ButtonRenderer_Instance {
        /**
         * Default CSS class to be applied to the root element of components
         * rendered by this renderer.
         */
        static CSS_CLASS: string;
        /**
         * Array of arrays of CSS classes that we want composite classes added
         * and removed for in IE6 and lower as a workaround for lack of
         * multi-class CSS selector support.
         */
        static IE6_CLASS_COMBINATIONS: (string[]|null)[]|null;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.style.app.ButtonRenderer;
        static instance_: ಠ_ಠ.clutz.goog.ui.style.app.ButtonRenderer;
    }
    class ButtonRenderer_Instance extends
        ಠ_ಠ.clutz.goog.ui.CustomButtonRenderer_Instance {
        /**
         * Takes a text caption or existing DOM structure, and returns the
         * content wrapped in a pseudo-rounded-corner box.  Creates the
         * following DOM structure:
         *
         * <div class="goog-inline-block goog-button-base-outer-box">
         * <div class="goog-inline-block goog-button-base-inner-box">
         * <div class="goog-button-base-pos">
         * <div class="goog-button-base-top-shadow">&nbsp;</div>
         * <div class="goog-button-base-content">Contents...</div>
         * </div>
         * </div>
         * </div>
         *
         * Used by both {@link #createDom} and {@link #decorate}.  To be
         * overridden by subclasses.
         * @param content Text caption or DOM structure to wrap in a box.
         * @param dom DOM helper, used for document interaction.
         */
        createButton(
            content: string|Node|null|Node[]|NodeListOf<Node>,
            dom: ಠ_ಠ.clutz.goog.dom.DomHelper|null): GlobalElement|null;
        getContentElement(element: GlobalElement|null): GlobalElement|null;
        getCssClass(): string;
        getIe6ClassCombinations(): (string[]|null)[]|null;
        getStructuralCssClass(): string;
        /**
         * Check if the button's element has a box structure.
         * @param button Button instance whose structure is being checked.
         * @param element Element of the button.
         */
        hasBoxStructure(
            button: ಠ_ಠ.clutz.goog.ui.Button|null,
            element: GlobalElement|null): boolean;
    }
}
declare module 'goog:goog.ui.style.app.ButtonRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.style.app.ButtonRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.style.app {
    /**
     * Renderer for {@link goog.ui.style.app.MenuButton}s.  This implementation
     * overrides {@link goog.ui.style.app.ButtonRenderer#createButton} to insert
     * a dropdown element into the content element after the specified content.
     */
    class MenuButtonRenderer extends MenuButtonRenderer_Instance {
        /**
         * Default CSS class to be applied to the root element of components
         * rendered by this renderer.
         */
        static CSS_CLASS: string;
        /**
         * Array of arrays of CSS classes that we want composite classes added
         * and removed for in IE6 and lower as a workaround for lack of
         * multi-class CSS selector support.
         */
        static IE6_CLASS_COMBINATIONS: (string[]|null)[]|null;
        static getInstance(): ಠ_ಠ.clutz.goog.ui.style.app.MenuButtonRenderer;
        static instance_: ಠ_ಠ.clutz.goog.ui.style.app.MenuButtonRenderer;
    }
    class MenuButtonRenderer_Instance extends
        ಠ_ಠ.clutz.goog.ui.style.app.ButtonRenderer_Instance {
        /**
         * Takes a text caption or existing DOM structure, and returns the
         * content and a dropdown arrow element wrapped in a
         * pseudo-rounded-corner box.  Creates the following DOM structure:
         *
         * <div class="goog-inline-block goog-button-outer-box">
         * <div class="goog-inline-block goog-button-inner-box">
         * <div class="goog-button-pos">
         * <div class="goog-button-top-shadow">&nbsp;</div>
         * <div class="goog-button-content">
         * Contents...
         * <div class="goog-menu-button-dropdown"> </div>
         * </div>
         * </div>
         * </div>
         * </div>
         * @param content Text caption or DOM structure to wrap in a box.
         * @param dom DOM helper, used for document interaction.
         */
        createButton(
            content: string|Node|null|Node[]|NodeListOf<Node>,
            dom: ಠ_ಠ.clutz.goog.dom.DomHelper|null): GlobalElement|null;
        /**
         * Inserts dropdown element as last child of existing content.
         * @param content Text caption or DOM structure.
         * @param dom DOM helper, used for document ineraction.
         */
        createContentWithDropdown(
            content: string|Node|null|Node[]|NodeListOf<Node>,
            dom: ಠ_ಠ.clutz.goog.dom.DomHelper|null): (Node|null)[]|null;
        /**
         * Returns an appropriately-styled DIV containing a dropdown arrow.
         * Creates the following DOM structure:
         *
         * <div class="goog-menu-button-dropdown"> </div>
         * @param dom DOM helper, used for document interaction.
         */
        createDropdown(dom: ಠ_ಠ.clutz.goog.dom.DomHelper|null): GlobalElement
            |null;
        /**
         * Takes an element, decorates it with the menu button control, and
         * returns the element.  Overrides {@link
         * goog.ui.style.app.ButtonRenderer#decorate} by looking for a child
         * element that can be decorated by a menu, and if it finds one,
         * decorates it and attaches it to the menu button.
         * @param control goog.ui.MenuButton to decorate the element.
         * @param element Element to decorate.
         */
        decorate(
            control: ಠ_ಠ.clutz.goog.ui.Control|null,
            element: GlobalElement|null): GlobalElement|null;
        /**
         * Returns the ARIA role to be applied to menu buttons, which
         * have a menu attached to them.
         */
        getAriaRole(): ಠ_ಠ.clutz.goog.a11y.aria.Role;
        /**
         * Takes the button's root element and returns the parent element of the
         * button's contents.  Overrides the superclass implementation by taking
         * the nested DIV structure of menu buttons into account.
         * @param element Root element of the button whose content element is to
         * be returned.
         */
        getContentElement(element: GlobalElement|null): GlobalElement|null;
        /**
         * Returns the CSS class to be applied to the root element of components
         * rendered using this renderer.
         */
        getCssClass(): string;
        getIe6ClassCombinations(): (string[]|null)[]|null;
        setContent(
            element: GlobalElement|null,
            content: string|Node|null|Node[]|NodeListOf<Node>): void;
    }
}
declare module 'goog:goog.ui.style.app.MenuButtonRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.style.app.MenuButtonRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.style.app {
    /**
     * Custom renderer for {@link goog.ui.Button}s. This renderer supports the
     * "primary action" style for buttons.
     */
    class PrimaryActionButtonRenderer extends
        PrimaryActionButtonRenderer_Instance {
        /**
         * Default CSS class to be applied to the root element of components
         * rendered by this renderer.
         */
        static CSS_CLASS: string;
        /**
         * Array of arrays of CSS classes that we want composite classes added
         * and removed for in IE6 and lower as a workaround for lack of
         * multi-class CSS selector support.
         */
        static IE6_CLASS_COMBINATIONS: (string[]|null)[]|null;
        static getInstance():
            ಠ_ಠ.clutz.goog.ui.style.app.PrimaryActionButtonRenderer;
        static instance_:
            ಠ_ಠ.clutz.goog.ui.style.app.PrimaryActionButtonRenderer;
    }
    class PrimaryActionButtonRenderer_Instance extends
        ಠ_ಠ.clutz.goog.ui.style.app.ButtonRenderer_Instance {
        getCssClass(): string;
        getIe6ClassCombinations(): (string[]|null)[]|null;
    }
}
declare module 'goog:goog.ui.style.app.PrimaryActionButtonRenderer' {
    import alias = ಠ_ಠ.clutz.goog.ui.style.app.PrimaryActionButtonRenderer;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.tree {
    /**
     * An abstract base class for a node in the tree.
     */
    class BaseNode extends BaseNode_Instance {
        /**
         * Map of nodes in existence. Needed to route events to the appropriate
         * nodes. Nodes are added to the map at {@link #enterDocument} time and
         * removed at
         * {@link #exitDocument} time.
         */
        static allNodes: GlobalObject|null;
        /**
         * A default configuration for the tree.
         */
        static defaultConfig: GlobalObject;
    }
    class BaseNode_Instance extends ಠ_ಠ.clutz.goog.ui.Component_Instance {
        /**
         * An abstract base class for a node in the tree.
         * @param content The content of the node label. Strings are treated as
         * plain-text and will be HTML escaped.
         * @param opt_config The configuration for the tree. See {@link
         * goog.ui.tree.BaseNode.defaultConfig}. If not specified the default
         * config will be used.
         * @param opt_domHelper Optional DOM helper.
         */
        constructor(
            content: string|ಠ_ಠ.clutz.goog.html.SafeHtml,
            opt_config?: GlobalObject|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        tree: ಠ_ಠ.clutz.goog.ui.tree.TreeControl|null;
        /**
         * Adds a node as a child to the current node.
         * @param child The child to add.
         * @param opt_before If specified, the new child is added as a child
         * before this one. If not specified, it's appended to the end.
         */
        add(child: ಠ_ಠ.clutz.goog.ui.tree.BaseNode|null,
            opt_before?: ಠ_ಠ.clutz.goog.ui.tree.BaseNode|
            null): ಠ_ಠ.clutz.goog.ui.tree.BaseNode;
        /**
         * The method assumes that the child doesn't have parent node yet.
         * The {@code opt_render} argument is not used. If the parent node is
         * expanded, the child node's state will be the same as the parent's.
         * Otherwise the child's DOM tree won't be created.
         */
        addChildAt(
            child: ಠ_ಠ.clutz.goog.ui.Component|null, index: number,
            opt_render?: boolean): void;
        /**
         * Collapses the node.
         */
        collapse(): void;
        /**
         * Collapses the children and the node.
         */
        collapseAll(): void;
        /**
         * Collapses the children of the node.
         */
        collapseChildren(): void;
        /**
         * Returns true if the node is a descendant of this node
         * @param node The node to check.
         */
        contains(node: ಠ_ಠ.clutz.goog.ui.tree.BaseNode|null): boolean;
        createDom(): void;
        /**
         * Originally it was intended to deselect the node but never worked.
         */
        deselect(): void;
        disposeInternal(): void;
        enterDocument(): void;
        exitDocument(): void;
        /**
         * Expands the node.
         */
        expand(): void;
        /**
         * Expands the children and the node.
         */
        expandAll(): void;
        /**
         * Expands the children of the node.
         */
        expandChildren(): void;
        getAfterLabelElement(): GlobalElement|null;
        /**
         * Returns the html that appears after the label. This is useful if you
         * want to put extra UI on the row of the label but not inside the
         * anchor tag.
         */
        getAfterLabelHtml(): string;
        /**
         * Returns the html that appears after the label. This is useful if you
         * want to put extra UI on the row of the label but not inside the
         * anchor tag.
         */
        getAfterLabelSafeHtml(): ಠ_ಠ.clutz.goog.html.SafeHtml;
        getBackgroundPosition(): string;
        /**
         * Gets the calculated icon class.
         */
        getCalculatedIconClass(...a: any[]): any;
        getChildAt(a: number): ಠ_ಠ.clutz.goog.ui.tree.BaseNode|null;
        /**
         * Returns the children of this node.
         */
        getChildren(): ಠ_ಠ.clutz.goog.ui.tree.BaseNode[];
        getChildrenElement(): GlobalElement|null;
        getClientData(): any;
        getConfig(): GlobalObject|null;
        /**
         * Returns the depth of the node in the tree. Should not be overridden.
         */
        getDepth(): number;
        getElement(): GlobalElement|null;
        getExpandIconClass(): string;
        getExpandIconElement(): GlobalElement|null;
        getExpandIconSafeHtml(): ಠ_ಠ.clutz.goog.html.SafeHtml;
        getExpanded(): boolean;
        /**
         * Gets the icon class for when the node is expanded.
         */
        getExpandedIconClass(): string;
        getFirstChild(): ಠ_ಠ.clutz.goog.ui.tree.BaseNode|null;
        /**
         * Returns the html of the label.
         */
        getHtml(): string;
        /**
         * Gets the icon class for the node.
         */
        getIconClass(): string;
        getIconElement(): GlobalElement|null;
        getIconSafeHtml(): ಠ_ಠ.clutz.goog.html.SafeHtml;
        getLabelElement(): GlobalElement|null;
        getLabelSafeHtml(): ಠ_ಠ.clutz.goog.html.SafeHtml;
        getLastChild(): ಠ_ಠ.clutz.goog.ui.tree.BaseNode|null;
        getLastShownDescendant(): ಠ_ಠ.clutz.goog.ui.tree.BaseNode|null;
        getLineStyle(): ಠ_ಠ.clutz.goog.html.SafeStyle;
        getNextShownNode(): ಠ_ಠ.clutz.goog.ui.tree.BaseNode|null;
        getNextSibling(): ಠ_ಠ.clutz.goog.ui.tree.BaseNode|null;
        getPreviousShownNode(): ಠ_ಠ.clutz.goog.ui.tree.BaseNode|null;
        getPreviousSibling(): ಠ_ಠ.clutz.goog.ui.tree.BaseNode|null;
        getRowClassName(): string;
        getRowElement(): GlobalElement|null;
        getRowSafeHtml(): ಠ_ಠ.clutz.goog.html.SafeHtml;
        /**
         * Returns the html of the label.
         */
        getSafeHtml(): ಠ_ಠ.clutz.goog.html.SafeHtml;
        /**
         * Returns the text of the label. If the text was originally set as
         * HTML, the return value is unspecified.
         */
        getText(): string;
        /**
         * Returns the text of the tooltip.
         */
        getToolTip(): string|null;
        /**
         * Returns the tree.
         */
        getTree(): ಠ_ಠ.clutz.goog.ui.tree.TreeControl|null;
        /**
         * Adds roles and states.
         */
        initAccessibility(): void;
        isLastSibling(): boolean;
        isSelected(): boolean;
        isUserCollapsible(): boolean;
        /**
         * Handles a click event.
         * @param e The browser event.
         */
        onClick_(a: ಠ_ಠ.clutz.goog.events.BrowserEvent): any;
        /**
         * Handles a double click event.
         * @param e The browser event.
         */
        onDoubleClick_(e: ಠ_ಠ.clutz.goog.events.BrowserEvent): void;
        /**
         * Handles a key down event.
         * @param e The browser event.
         */
        onKeyDown(e: ಠ_ಠ.clutz.goog.events.BrowserEvent): boolean;
        /**
         * Handles mouse down event.
         * @param e The browser event.
         */
        onMouseDown(e: ಠ_ಠ.clutz.goog.events.BrowserEvent): void;
        remove(
            childNode: ಠ_ಠ.clutz.goog.ui.Component|null|string,
            opt_unrender?: boolean): ಠ_ಠ.clutz.goog.ui.tree.BaseNode;
        /**
         * Removes a child. The caller is responsible for disposing the node.
         * @param childNode The child to remove. Must be a {@link
         * goog.ui.tree.BaseNode}.
         * @param opt_unrender Unused. The child will always be unrendered.
         */
        removeChild(
            childNode: ಠ_ಠ.clutz.goog.ui.Component|null|string,
            opt_unrender?: boolean): ಠ_ಠ.clutz.goog.ui.tree.BaseNode;
        /**
         * Expands the parent chain of this node so that it is visible.
         */
        reveal(): void;
        /**
         * Selects the node.
         */
        select(): void;
        /**
         * Sets the html that appears after the label. This is useful if you
         * want to put extra UI on the row of the label but not inside the
         * anchor tag.
         * @param html The html.
         */
        setAfterLabelSafeHtml(html: ಠ_ಠ.clutz.goog.html.SafeHtml): void;
        /**
         * Sets client data to associate with the node.
         * @param data The client data to associate with the node.
         */
        setClientData(a: any): any;
        /**
         * Sets the node to be expanded.
         * @param expanded Whether to expand or close the node.
         */
        setExpanded(expanded: boolean): void;
        /**
         * Sets the icon class for when the node is expanded.
         * @param s The expanded icon class.
         */
        setExpandedIconClass(s: string): void;
        /**
         * Sets the node to be expanded internally, without state change events.
         * @param expanded Whether to expand or close the node.
         */
        setExpandedInternal(expanded: boolean): void;
        /**
         * Sets the icon class for the node.
         * @param s The icon class.
         */
        setIconClass(s: string): void;
        /**
         * Sets whether the node will allow the user to collapse it.
         * @param isCollapsible Whether to allow node collapse.
         */
        setIsUserCollapsible(isCollapsible: boolean): void;
        /**
         * Sets the HTML of the label.
         * @param html The HTML object for the label.
         */
        setSafeHtml(html: ಠ_ಠ.clutz.goog.html.SafeHtml): void;
        /**
         * Called from the tree to instruct the node change its selection state.
         * @param selected The new selection state.
         */
        setSelectedInternal(selected: boolean): void;
        /**
         * Sets the text of the label.
         * @param s The plain text of the label.
         */
        setText(s: string): void;
        /**
         * Sets the text of the tooltip.
         * @param s The tooltip text to set.
         */
        setToolTip(s: string): void;
        /**
         * Internal method that is used to set the tree control on the node.
         * @param tree The tree control.
         */
        setTreeInternal(tree: ಠ_ಠ.clutz.goog.ui.tree.TreeControl|null): void;
        /**
         * Creates HTML for the node.
         */
        toSafeHtml(): ಠ_ಠ.clutz.goog.html.SafeHtml;
        /**
         * Toggles the expanded state of the node.
         */
        toggle(): void;
        /**
         * Updates the expand icon of the node.
         */
        updateExpandIcon(): void;
        /**
         * Updates the row styles.
         */
        updateRow(): void;
    }
}
declare module 'goog:goog.ui.tree.BaseNode' {
    import alias = ಠ_ಠ.clutz.goog.ui.tree.BaseNode;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.tree.BaseNode {
    /**
     * The event types dispatched by this class.
     */
    type EventType = string&{clutzEnumBrand: never};
    var EventType: {
        BEFORE_COLLAPSE: EventType,
        BEFORE_EXPAND: EventType,
        COLLAPSE: EventType,
        EXPAND: EventType,
    };
}
declare module 'goog:goog.ui.tree.BaseNode.EventType' {
    import alias = ಠ_ಠ.clutz.goog.ui.tree.BaseNode.EventType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.tree {
    /**
     * This creates a TreeControl object. A tree control provides a way to
     * view a hierarchical set of data.
     */
    class TreeControl extends TreeControl_Instance {
        /**
         * A default configuration for the tree.
         */
        static defaultConfig: GlobalObject;
    }
    class TreeControl_Instance extends
        ಠ_ಠ.clutz.goog.ui.tree.BaseNode_Instance {
        /**
         * This creates a TreeControl object. A tree control provides a way to
         * view a hierarchical set of data.
         * @param content The content of the node label. Strings are treated as
         * plain-text and will be HTML escaped.
         * @param opt_config The configuration for the tree. See
         * goog.ui.tree.TreeControl.defaultConfig. If not specified, a default
         * config will be used.
         * @param opt_domHelper Optional DOM helper.
         */
        constructor(
            content: string|ಠ_ಠ.clutz.goog.html.SafeHtml,
            opt_config?: GlobalObject|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        selectedItem_: ಠ_ಠ.clutz.goog.ui.tree.BaseNode|null;
        /**
         * Clear the typeahead buffer.
         */
        clearTypeAhead(): void;
        /**
         * Creates a new tree node using the same config as the root.
         * @param opt_content The content of the node label. Strings are treated
         * as plain-text and will be HTML escaped. To set SafeHtml content, omit
         * opt_content and call setSafeHtml on the resulting node.
         */
        createNode(opt_content?: string): ಠ_ಠ.clutz.goog.ui.tree.TreeNode;
        enterDocument(): void;
        exitDocument(): void;
        /**
         * Returns the source for the icon.
         */
        getCalculatedIconClass(): string;
        getDepth(): number;
        getExpandIconElement(): GlobalElement|null;
        getExpandIconSafeHtml(): ಠ_ಠ.clutz.goog.html.SafeHtml;
        getExpanded(): boolean;
        getIconElement(): GlobalElement|null;
        getRowClassName(): string;
        /**
         * Returns the selected item.
         */
        getSelectedItem(): ಠ_ಠ.clutz.goog.ui.tree.BaseNode|null;
        getShowExpandIcons(): boolean;
        getShowLines(): boolean;
        getShowRootLines(): boolean;
        getShowRootNode(): boolean;
        getTree(): ಠ_ಠ.clutz.goog.ui.tree.TreeControl|null;
        /**
         * Handles key down on the tree.
         * @param e The browser event.
         */
        handleKeyEvent(e: ಠ_ಠ.clutz.goog.events.BrowserEvent): boolean;
        hasFocus(): boolean;
        /**
         * Add roles and states.
         */
        initAccessibility(): void;
        /**
         * Allows the caller to notify that the given node is being removed from
         * the tree.
         * @param node Node being removed.
         */
        removeNode(node: ಠ_ಠ.clutz.goog.ui.tree.BaseNode|null): void;
        /**
         * Expands the parent chain of this node so that it is visible.
         */
        reveal(): void;
        setExpanded(expanded: boolean): void;
        /**
         * Allows the caller to notify that the given node has been added or
         * just had been updated in the tree.
         * @param node New node being added or existing node that just had been
         * updated.
         */
        setNode(node: ಠ_ಠ.clutz.goog.ui.tree.BaseNode|null): void;
        /**
         * Sets the selected item.
         * @param node The item to select.
         */
        setSelectedItem(node: ಠ_ಠ.clutz.goog.ui.tree.BaseNode|null): void;
        /**
         * Sets whether to show expand icons.
         * @param b Whether to show expand icons.
         */
        setShowExpandIcons(b: boolean): void;
        /**
         * Sets whether to show lines.
         * @param b Whether to show lines.
         */
        setShowLines(b: boolean): void;
        /**
         * Sets whether to show root lines.
         * @param b Whether to show root lines.
         */
        setShowRootLines(b: boolean): void;
        /**
         * Sets whether to show the root node.
         * @param b Whether to show the root node.
         */
        setShowRootNode(b: boolean): void;
        updateExpandIcon(): void;
    }
}
declare module 'goog:goog.ui.tree.TreeControl' {
    import alias = ಠ_ಠ.clutz.goog.ui.tree.TreeControl;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.tree {
    /**
     * A single node in the tree.
     */
    class TreeNode extends TreeNode_Instance {}
    class TreeNode_Instance extends ಠ_ಠ.clutz.goog.ui.tree.BaseNode_Instance {
        /**
         * A single node in the tree.
         * @param content The content of the node label. Strings are treated as
         * plain-text and will be HTML escaped.
         * @param opt_config The configuration for the tree. See
         * goog.ui.tree.TreeControl.defaultConfig. If not specified, a default
         * config will be used.
         * @param opt_domHelper Optional DOM helper.
         */
        constructor(
            content: string|ಠ_ಠ.clutz.goog.html.SafeHtml,
            opt_config?: GlobalObject|null,
            opt_domHelper?: ಠ_ಠ.clutz.goog.dom.DomHelper|null);
        /**
         * Returns the source for the icon.
         */
        getCalculatedIconClass(): string;
        /**
         * Returns the tree.
         */
        getTree(): ಠ_ಠ.clutz.goog.ui.tree.TreeControl|null;
    }
}
declare module 'goog:goog.ui.tree.TreeNode' {
    import alias = ಠ_ಠ.clutz.goog.ui.tree.TreeNode;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.tree {
    /**
     * Constructs a TypeAhead object.
     */
    class TypeAhead extends TypeAhead_Instance {}
    class TypeAhead_Instance {
        private noStructuralTyping_: any;
        /**
         * Clears the typeahead buffer.
         */
        clear(): void;
        /**
         * Handles navigation keys.
         * @param e The browser event.
         */
        handleNavigation(e: ಠ_ಠ.clutz.goog.events.BrowserEvent|null): boolean;
        /**
         * Handles the character presses.
         * @param e The browser event. Expected event type is
         * goog.events.KeyHandler.EventType.KEY.
         */
        handleTypeAheadChar(e: ಠ_ಠ.clutz.goog.events.BrowserEvent|
                            null): boolean;
        /**
         * Removes the given node from the nodemap.
         * @param node Node to be removed.
         */
        removeNodeFromMap(node: ಠ_ಠ.clutz.goog.ui.tree.BaseNode|null): void;
        /**
         * Adds or updates the given node in the nodemap. The label text is used
         * as a key and the node id is used as a value. In the case that the key
         * already exists, such as when more than one node exists with the same
         * label, then this function creates an array to hold the multiple
         * nodes.
         * @param node Node to be added or updated.
         */
        setNodeInMap(node: ಠ_ಠ.clutz.goog.ui.tree.BaseNode|null): void;
    }
}
declare module 'goog:goog.ui.tree.TypeAhead' {
    import alias = ಠ_ಠ.clutz.goog.ui.tree.TypeAhead;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.ui.tree.TypeAhead {
    /**
     * Enum for offset values that are used for ctrl-key navigation among the
     * multiple matches of a given typeahead buffer.
     */
    enum Offset {
        DOWN,
        UP,
    }
}
declare module 'goog:goog.ui.tree.TypeAhead.Offset' {
    import alias = ಠ_ಠ.clutz.goog.ui.tree.TypeAhead.Offset;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.uri.utils {
    /**
     * Appends a single URI parameter.
     *
     * Repeated calls to this can exhibit quadratic behavior in IE6 due to the
     * way string append works, though it should be limited given the 2kb limit.
     * @param uri The original URI, which may already have query data.
     * @param key The key, which must already be URI encoded.
     * @param opt_value The value, which will be stringized and encoded (assumed
     * not already to be encoded).  If omitted, undefined, or null, the key will
     * be added as a valueless parameter.
     */
    function appendParam(uri: string, key: string, opt_value?: any): string;
    /**
     * Appends URI parameters to an existing URI.
     *
     * The variable arguments may contain alternating keys and values.  Keys are
     * assumed to be already URI encoded.  The values should not be URI-encoded,
     * and will instead be encoded by this function.
     * <pre>
     * appendParams('http://www.foo.com?existing=true',
     * 'key1', 'value1',
     * 'key2', 'value?willBeEncoded',
     * 'key3', ['valueA', 'valueB', 'valueC'],
     * 'key4', null);
     * result: 'http://www.foo.com?existing=true&' +
     * 'key1=value1&' +
     * 'key2=value%3FwillBeEncoded&' +
     * 'key3=valueA&key3=valueB&key3=valueC'
     * </pre>
     *
     * A single call to this function will not exhibit quadratic behavior in IE,
     * whereas multiple repeated calls may, although the effect is limited by
     * fact that URL's generally can't exceed 2kb.
     * @param uri The original URI, which may already have query data.
     * @param var_args An array or argument list conforming to
     * goog.uri.utils.QueryArray.
     */
    function appendParams(uri: string, ...var_args: any[]): string;
    /**
     * Appends query parameters from a map.
     * @param uri The original URI, which may already have query data.
     * @param map An object where keys are URI-encoded parameter keys, and the
     * values are arbitrary types or arrays. Keys with a null value are dropped.
     */
    function appendParamsFromMap(
        uri: string,
        map: {[/* warning: coerced from ? */ key: string]: any}): string;
    /**
     * Generates a URI path using a given URI and a path with checks to
     * prevent consecutive "//". The baseUri passed in must not contain
     * query or fragment identifiers. The path to append may not contain query
     * or fragment identifiers.
     * @param baseUri URI to use as the base.
     * @param path Path to append.
     */
    function appendPath(baseUri: string, path: string): string;
    /**
     * Builds a URI string from already-encoded parts.
     *
     * No encoding is performed.  Any component may be omitted as either null or
     * undefined.
     * @param opt_scheme The scheme such as 'http'.
     * @param opt_userInfo The user name before the '@'.
     * @param opt_domain The domain such as 'www.google.com', already
     * URI-encoded.
     * @param opt_port The port number.
     * @param opt_path The path, already URI-encoded.  If it is not empty, it
     * must begin with a slash.
     * @param opt_queryData The URI-encoded query data.
     * @param opt_fragment The URI-encoded fragment identifier.
     */
    function buildFromEncodedParts(
        opt_scheme?: string|null, opt_userInfo?: string|null,
        opt_domain?: string|null, opt_port?: string|number|null,
        opt_path?: string|null, opt_queryData?: string|null,
        opt_fragment?: string|null): string;
    /**
     * Builds a query data string from a sequence of alternating keys and
     * values. Currently generates "&key&" for empty args.
     * @param keysAndValues Alternating keys and values. See the QueryArray
     * typedef.
     * @param opt_startIndex A start offset into the arary, defaults to 0.
     */
    function buildQueryData(
        keysAndValues: ArrayLike<any>, opt_startIndex?: number): string;
    /**
     * Builds a query data string from a map.
     * Currently generates "&key&" for empty args.
     * @param map An object where keys are URI-encoded parameter keys, and the
     * values are arbitrary types or arrays. Keys with a null value are dropped.
     */
    function buildQueryDataFromMap(map: {[key: string]: any}): string;
    function getDomain(uri: string): string|null;
    function getDomainEncoded(uri: string): string|null;
    /**
     * Gets the effective scheme for the URL.  If the URL is relative then the
     * scheme is derived from the page's location.
     * @param uri The URI to examine.
     */
    function getEffectiveScheme(uri: string): string;
    function getFragment(uri: string): string|null;
    function getFragmentEncoded(uri: string): string|null;
    /**
     * Extracts everything up to the port of the URI.
     * @param uri The URI string.
     */
    function getHost(uri: string): string;
    /**
     * Returns the origin for a given URL.
     * @param uri The URI string.
     */
    function getOrigin(uri: string): string;
    /**
     * Gets the first value of a query parameter.
     * @param uri The URI to process.  May contain a fragment.
     * @param keyEncoded The URI-encoded key.  Case-sensitive.
     */
    function getParamValue(uri: string, keyEncoded: string): string|null;
    /**
     * Gets all values of a query parameter.
     * @param uri The URI to process.  May contain a fragment.
     * @param keyEncoded The URI-encoded key.  Case-sensitive.
     */
    function getParamValues(uri: string, keyEncoded: string): string[];
    function getPath(uri: string): string|null;
    /**
     * Extracts the path of the URL and everything after.
     * @param uri The URI string.
     */
    function getPathAndAfter(uri: string): string;
    function getPathEncoded(uri: string): string|null;
    function getPort(uri: string): number|null;
    function getQueryData(uri: string): string|null;
    function getScheme(uri: string): string|null;
    function getUserInfo(uri: string): string|null;
    function getUserInfoEncoded(uri: string): string|null;
    /**
     * Determines if the URI contains a specific key.
     *
     * Performs no object instantiations.
     * @param uri The URI to process.  May contain a fragment identifier.
     * @param keyEncoded The URI-encoded key.  Case-sensitive.
     */
    function hasParam(uri: string, keyEncoded: string): boolean;
    /**
     * Ensures that two URI's have the exact same domain, scheme, and port.
     *
     * Unlike the version in goog.Uri, this checks protocol, and therefore is
     * suitable for checking against the browser's same-origin policy.
     * @param uri1 The first URI.
     * @param uri2 The second URI.
     */
    function haveSameDomain(uri1: string, uri2: string): boolean;
    /**
     * Sets the zx parameter of a URI to a random value.
     * @param uri Any URI.
     */
    function makeUnique(uri: string): string;
    /**
     * Parses encoded query parameters and calls callback function for every
     * parameter found in the string.
     *
     * Missing value of parameter (e.g. “…&key&…”) is treated as if the value
     * was an empty string.  Keys may be empty strings (e.g. “…&=value&…”) which
     * also means that “…&=&…” and “…&&…” will result in an empty key and value.
     * @param encodedQuery Encoded query string excluding question mark at the
     * beginning.
     * @param callback Function called for every parameter found in query
     * string.  The first argument (name) will not be urldecoded (so the
     * function is consistent with buildQueryData), but the second will.  If the
     * parameter has no value (i.e. “=” was not present) the second argument
     * (value) will be an empty string.
     */
    function parseQueryData(
        encodedQuery: string, callback: (a: string, b: string) => any): void;
    /**
     * Gets the URI with the fragment identifier removed.
     * @param uri The URI to examine.
     */
    function removeFragment(uri: string): string;
    /**
     * Removes all instances of a query parameter.
     * @param uri The URI to process.  Must not contain a fragment.
     * @param keyEncoded The URI-encoded key.
     */
    function removeParam(uri: string, keyEncoded: string): string;
    function setFragmentEncoded(uri: string, fragment: string|null): string;
    /**
     * Replaces all existing definitions of a parameter with a single
     * definition.
     *
     * Repeated calls to this can exhibit quadratic behavior due to the need to
     * find existing instances and reconstruct the string, though it should be
     * limited given the 2kb limit.  Consider using appendParams or
     * setParamsFromMap to update multiple parameters in bulk.
     * @param uri The original URI, which may already have query data.
     * @param keyEncoded The key, which must already be URI encoded.
     * @param value The value, which will be stringized and encoded (assumed not
     * already to be encoded).
     */
    function setParam(uri: string, keyEncoded: string, value: any): string;
    /**
     * Effeciently set or remove multiple query parameters in a URI. Order of
     * unchanged parameters will not be modified, all updated parameters will be
     * appended to the end of the query. Params with values of null or undefined
     * are removed.
     * @param uri The URI to process.
     * @param params A list of parameters to update. If null or undefined, the
     * param will be removed.
     */
    function setParamsFromMap(
        uri: string, params: {[key: string]: any}): string;
    /**
     * Replaces the path.
     * @param uri URI to use as the base.
     * @param path New path.
     */
    function setPath(uri: string, path: string): string;
    /**
     * Splits a URI into its component parts.
     *
     * Each component can be accessed via the component indices; for example:
     * <pre>
     * goog.uri.utils.split(someStr)[goog.uri.utils.ComponentIndex.QUERY_DATA];
     * </pre>
     * @param uri The URI string to examine.
     */
    function split(uri: string): (string|undefined)[];
}
declare module 'goog:goog.uri.utils' {
    import alias = ಠ_ಠ.clutz.goog.uri.utils;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.uri.utils {
    /**
     * The index of each URI component in the return value of
     * goog.uri.utils.split.
     */
    enum ComponentIndex {
        DOMAIN,
        FRAGMENT,
        PATH,
        PORT,
        QUERY_DATA,
        SCHEME,
        USER_INFO,
    }
}
declare module 'goog:goog.uri.utils.ComponentIndex' {
    import alias = ಠ_ಠ.clutz.goog.uri.utils.ComponentIndex;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.uri.utils {
    /**
     * An array representing a set of query parameters with alternating keys
     * and values.
     *
     * Keys are assumed to be URI encoded already and live at even indices.  See
     * goog.uri.utils.QueryValue for details on how parameter values are
     * encoded.
     *
     * Example:
     * <pre>
     * var data = [
     * // Simple param: ?name=BobBarker
     * 'name', 'BobBarker',
     * // Conditional param -- may be omitted entirely.
     * 'specialDietaryNeeds', hasDietaryNeeds() ? getDietaryNeeds() : null,
     * // Multi-valued param: &house=LosAngeles&house=NewYork&house=null
     * 'house', ['LosAngeles', 'NewYork', null]
     * ];
     * </pre>
     */
    type QueryArray = any[];
}
declare module 'goog:goog.uri.utils.QueryArray' {
    import alias = ಠ_ಠ.clutz.goog.uri.utils.QueryArray;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.uri.utils {
    /**
     * Supported query parameter values by the parameter serializing utilities.
     *
     * If a value is null or undefined, the key-value pair is skipped, as an
     * easy way to omit parameters conditionally.  Non-array parameters are
     * converted to a string and URI encoded.  Array values are expanded into
     * multiple &key=value pairs, with each element stringized and URI-encoded.
     */
    type QueryValue = any;
}
declare module 'goog:goog.uri.utils.QueryValue' {
    import alias = ಠ_ಠ.clutz.goog.uri.utils.QueryValue;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.uri.utils {
    /**
     * Standard supported query parameters.
     */
    type StandardQueryParam = string&{clutzEnumBrand: never};
    var StandardQueryParam: {
        RANDOM: StandardQueryParam,
    };
}
declare module 'goog:goog.uri.utils.StandardQueryParam' {
    import alias = ಠ_ಠ.clutz.goog.uri.utils.StandardQueryParam;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.userAgent {
    /**
     * Whether the user agent is running on Android.
     */
    var ANDROID: boolean;
    var ASSUME_ANDROID: boolean;
    var ASSUME_ANY_VERSION: boolean;
    var ASSUME_EDGE: boolean;
    var ASSUME_GECKO: boolean;
    var ASSUME_IE: boolean;
    var ASSUME_IPAD: boolean;
    var ASSUME_IPHONE: boolean;
    var ASSUME_IPOD: boolean;
    var ASSUME_LINUX: boolean;
    var ASSUME_MAC: boolean;
    var ASSUME_MOBILE_WEBKIT: boolean;
    var ASSUME_OPERA: boolean;
    var ASSUME_WEBKIT: boolean;
    var ASSUME_WINDOWS: boolean;
    var ASSUME_X11: boolean;
    /**
     * For IE version < 7, documentMode is undefined, so attempt to use the
     * CSS1Compat property to see if we are in standards mode. If we are in
     * standards mode, treat the browser version as the document mode.
     * Otherwise, IE is emulating version 5.
     */
    var DOCUMENT_MODE: number|undefined;
    /**
     * Whether the user agent is Microsoft Edge.
     */
    var EDGE: boolean;
    /**
     * Whether the user agent is MS Internet Explorer or MS Edge.
     */
    var EDGE_OR_IE: boolean;
    /**
     * Whether the user agent is Gecko. Gecko is the rendering engine used by
     * Mozilla, Firefox, and others.
     */
    var GECKO: boolean;
    /**
     * Whether the user agent is Internet Explorer.
     */
    var IE: boolean;
    /**
     * Whether the user agent is running on iOS.
     */
    var IOS: boolean;
    /**
     * Whether the user agent is running on an iPad.
     */
    var IPAD: boolean;
    /**
     * Whether the user agent is running on an iPhone.
     */
    var IPHONE: boolean;
    /**
     * Whether the user agent is running on an iPod.
     */
    var IPOD: boolean;
    /**
     * Whether the user agent is running on a Linux operating system.
     *
     * Note that goog.userAgent.LINUX considers ChromeOS to be Linux,
     * while goog.labs.userAgent.platform considers ChromeOS and
     * Linux to be different OSes.
     */
    var LINUX: boolean;
    /**
     * Whether the user agent is running on a Macintosh operating system.
     */
    var MAC: boolean;
    /**
     * Whether the user agent is running on a mobile device.
     *
     * TODO(nnaze): Consider deprecating MOBILE when labs.userAgent
     * is promoted as the gecko/webkit logic is likely inaccurate.
     */
    var MOBILE: boolean;
    /**
     * Whether the user agent is Opera.
     */
    var OPERA: boolean;
    /**
     * The platform (operating system) the user agent is running on. Default to
     * empty string because navigator.platform may not be defined (on Rhino, for
     * example).
     */
    var PLATFORM: string;
    /**
     * Used while transitioning code to use WEBKIT instead.
     */
    var SAFARI: boolean;
    /**
     * The version of the user agent. This is a string because it might contain
     * 'b' (as in beta) as well as multiple dots.
     */
    var VERSION: string;
    /**
     * Whether the user agent is WebKit. WebKit is the rendering engine that
     * Safari, Android and others use.
     */
    var WEBKIT: boolean;
    /**
     * Whether the user agent is running on a Windows operating system.
     */
    var WINDOWS: boolean;
    /**
     * Whether the user agent is running on a X11 windowing system.
     */
    var X11: boolean;
    /**
     * Compares two version numbers.
     * @param v1 Version of first item.
     * @param v2 Version of second item.
     */
    function compare(v1: string, v2: string): number;
    /**
     * TODO(nnaze): Change type to "Navigator" and update compilation targets.
     */
    function getNavigator(): GlobalObject|null;
    /**
     * Returns the userAgent string for the current browser.
     */
    function getUserAgentString(): string;
    /**
     * Deprecated alias to {@code goog.userAgent.isDocumentModeOrHigher}.
     * @param version The version to check.
     */
    function isDocumentMode(a: number): boolean;
    /**
     * Whether the IE effective document mode is higher or the same as the given
     * document mode version.
     * NOTE: Only for IE, return false for another browser.
     * @param documentMode The document mode version to check.
     */
    function isDocumentModeOrHigher(documentMode: number): boolean;
    /**
     * Deprecated alias to {@code goog.userAgent.isVersionOrHigher}.
     * @param version The version to check.
     */
    function isVersion(a: string|number): boolean;
    /**
     * Whether the user agent version is higher or the same as the given
     * version. NOTE: When checking the version numbers for Firefox and Safari,
     * be sure to use the engine's version, not the browser's version number.
     * For example, Firefox 3.0 corresponds to Gecko 1.9 and Safari 3.0 to
     * Webkit 522.11. Opera and Internet Explorer versions match the product
     * release number.<br>
     * @param version The version to check.
     */
    function isVersionOrHigher(version: string|number): boolean;
}
declare module 'goog:goog.userAgent' {
    import alias = ಠ_ಠ.clutz.goog.userAgent;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.userAgent.adobeReader {
    /**
     * Whether we detect the user has the Adobe Reader browser plugin installed.
     */
    var HAS_READER: boolean;
    /**
     * On certain combinations of platform/browser/plugin, a print dialog
     * can be shown for PDF files without a download dialog or making the
     * PDF visible to the user, by loading the PDF into a hidden iframe.
     *
     * Currently this variable is true if Adobe Reader version 6 or later
     * is detected on Windows.
     */
    var SILENT_PRINT: boolean;
    /**
     * The version of the installed Adobe Reader plugin. Versions after 7
     * will all be reported as '7'.
     */
    var VERSION: string;
}
declare module 'goog:goog.userAgent.adobeReader' {
    import alias = ಠ_ಠ.clutz.goog.userAgent.adobeReader;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.userAgent.flash {
    var ASSUME_NO_FLASH: boolean;
    /**
     * Whether we can detect that the browser has flash
     */
    var HAS_FLASH: boolean;
    /**
     * Full version information of flash installed, in form 7.0.61
     */
    var VERSION: string;
    /**
     * Whether the installed flash version is as new or newer than a given
     * version.
     * @param version The version to check.
     */
    function isVersion(version: string): boolean;
}
declare module 'goog:goog.userAgent.flash' {
    import alias = ಠ_ಠ.clutz.goog.userAgent.flash;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.userAgent.iphoto {
    /**
     * Whether we can detect that the user has iPhoto installed.
     */
    var HAS_IPHOTO: boolean;
    /**
     * The version of iPhoto installed if found.
     */
    var VERSION: string;
    /**
     * Whether the installed version of iPhoto is as new or newer than a given
     * version.
     * @param version The version to check.
     */
    function isVersion(version: string): boolean;
}
declare module 'goog:goog.userAgent.iphoto' {
    import alias = ಠ_ಠ.clutz.goog.userAgent.iphoto;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.userAgent.jscript {
    var ASSUME_NO_JSCRIPT: boolean;
    /**
     * Whether we detect that the user agent is using Microsoft JScript.
     */
    var HAS_JSCRIPT: boolean;
    /**
     * The installed version of JScript.
     */
    var VERSION: string;
    /**
     * Initializer for goog.userAgent.jscript.  Detects if the user agent is
     * using Microsoft JScript and which version of it.
     *
     * This is a named function so that it can be stripped via the jscompiler
     * option for stripping types.
     */
    function init(): void;
    /**
     * Whether the installed version of JScript is as new or newer than a given
     * version.
     * @param version The version to check.
     */
    function isVersion(version: string): boolean;
}
declare module 'goog:goog.userAgent.jscript' {
    import alias = ಠ_ಠ.clutz.goog.userAgent.jscript;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.userAgent.keyboard {
    var ASSUME_MAC_KEYBOARD: boolean;
    /**
     * Whether the user agent is running in an environment that uses Mac-based
     * keyboard shortcuts.
     */
    var MAC_KEYBOARD: boolean;
}
declare module 'goog:goog.userAgent.keyboard' {
    import alias = ಠ_ಠ.clutz.goog.userAgent.keyboard;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.userAgent.platform {
    /**
     * The version of the platform. We don't determine the version of Linux.
     * For Windows, we only look at the NT version. Non-NT-based versions
     * (e.g. 95, 98, etc.) are given version 0.0.
     */
    var VERSION: string;
    /**
     * Whether the user agent platform version is higher or the same as the
     * given version.
     * @param version The version to check.
     */
    function isVersion(version: string|number): boolean;
}
declare module 'goog:goog.userAgent.platform' {
    import alias = ಠ_ಠ.clutz.goog.userAgent.platform;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.userAgent.product {
    /**
     * Whether the code is running on AOSP browser or WebView inside
     * a pre KitKat Android phone or tablet.
     */
    var ANDROID: boolean;
    var ASSUME_ANDROID: boolean;
    var ASSUME_CHROME: boolean;
    var ASSUME_FIREFOX: boolean;
    var ASSUME_IPAD: boolean;
    var ASSUME_IPHONE: boolean;
    var ASSUME_SAFARI: boolean;
    /**
     * Whether the code is running on the Chrome web browser on any platform
     * or AOSP browser or WebView in a KitKat+ Android phone or tablet.
     */
    var CHROME: boolean;
    /**
     * Whether the code is running on an Edge web browser.
     */
    var EDGE: boolean;
    /**
     * Whether the code is running on the Firefox web browser.
     */
    var FIREFOX: boolean;
    /**
     * Whether the code is running on an IE web browser.
     */
    var IE: boolean;
    /**
     * Whether the code is running on an iPad.
     */
    var IPAD: boolean;
    /**
     * Whether the code is running on an iPhone or iPod touch.
     *
     * iPod touch is considered an iPhone for legacy reasons.
     */
    var IPHONE: boolean;
    /**
     * Whether the code is running on the Opera web browser.
     */
    var OPERA: boolean;
    /**
     * Whether the code is running on the desktop Safari web browser.
     * Note: the legacy behavior here is only true for Safari not running
     * on iOS.
     */
    var SAFARI: boolean;
    /**
     * The version of the user agent. This is a string because it might contain
     * 'b' (as in beta) as well as multiple dots.
     */
    var VERSION: string;
}
declare module 'goog:goog.userAgent.product' {
    import alias = ಠ_ಠ.clutz.goog.userAgent.product;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.userAgent.product {
    /**
     * Whether the user agent product version is higher or the same as the given
     * version.
     * @param version The version to check.
     */
    function isVersion(version: string|number): boolean;
}
declare module 'goog:goog.userAgent.product.isVersion' {
    import alias = ಠ_ಠ.clutz.goog.userAgent.product.isVersion;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.vec {
    /**
     * For graphics work, 6 decimal places of accuracy are typically all that is
     * required.
     */
    var EPSILON: number;
}
declare module 'goog:goog.vec' {
    import alias = ಠ_ಠ.clutz.goog.vec;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.vec {
    type AnyType = Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
}
declare module 'goog:goog.vec.AnyType' {
    import alias = ಠ_ಠ.clutz.goog.vec.AnyType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.vec {
    type ArrayType = Float32Array|ಠ_ಠ.clutz.goog.vec.Number;
}
declare module 'goog:goog.vec.ArrayType' {
    import alias = ಠ_ಠ.clutz.goog.vec.ArrayType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.vec {
    type Float32 = Float32Array;
}
declare module 'goog:goog.vec.Float32' {
    import alias = ಠ_ಠ.clutz.goog.vec.Float32;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.vec {
    /**
     * Constructs a new Float32Array. The new array is initialized to all zeros.
     */
    class Float32Array extends Float32Array_Instance {
        /**
         * The number of bytes in an element (as defined by the Typed Array
         * specification).
         */
        static BYTES_PER_ELEMENT: number;
    }
    class Float32Array_Instance {
        private noStructuralTyping_: any;
        /**
         * Constructs a new Float32Array. The new array is initialized to all
         * zeros.
         * @param p0 The length of the array, or an array to initialize the
         * contents of the new Float32Array.
         */
        constructor(p0: ಠ_ಠ.clutz.goog.vec.Float32Array|null|any[]|ArrayBuffer|
                    number);
        length: number;
        /**
         * The number of bytes in an element (as defined by the Typed Array
         * specification).
         */
        BYTES_PER_ELEMENT: number;
        /**
         * Sets elements of the array.
         * @param values The array of values.
         * @param opt_offset The offset in this array to start.
         */
        set(values: ಠ_ಠ.clutz.goog.vec.Number|null|Float32Array,
            opt_offset?: number): void;
        /**
         * Creates a string representation of this array.
         */
        toString(): string;
    }
}
declare module 'goog:goog.vec.Float32Array' {
    import alias = ಠ_ಠ.clutz.goog.vec.Float32Array;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.vec {
    type Float64 = Float64Array;
}
declare module 'goog:goog.vec.Float64' {
    import alias = ಠ_ಠ.clutz.goog.vec.Float64;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.vec {
    /**
     * Constructs a new Float64Array. The new array is initialized to all zeros.
     */
    class Float64Array extends Float64Array_Instance {
        /**
         * The number of bytes in an element (as defined by the Typed Array
         * specification).
         */
        static BYTES_PER_ELEMENT: number;
    }
    class Float64Array_Instance {
        private noStructuralTyping_: any;
        /**
         * Constructs a new Float64Array. The new array is initialized to all
         * zeros.
         * @param p0 The length of the array, or an array to initialize the
         * contents of the new Float64Array.
         */
        constructor(p0: ಠ_ಠ.clutz.goog.vec.Float64Array|null|any[]|ArrayBuffer|
                    number);
        length: number;
        /**
         * The number of bytes in an element (as defined by the Typed Array
         * specification).
         */
        BYTES_PER_ELEMENT: number;
        /**
         * Sets elements of the array.
         * @param values The array of values.
         * @param opt_offset The offset in this array to start.
         */
        set(values: ಠ_ಠ.clutz.goog.vec.Number|null|Float64Array,
            opt_offset?: number): void;
        /**
         * Creates a string representation of this array.
         */
        toString(): string;
    }
}
declare module 'goog:goog.vec.Float64Array' {
    import alias = ಠ_ಠ.clutz.goog.vec.Float64Array;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.vec.Mat3 {
    type AnyType = Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    type Float32 = Float32Array;
    type Float64 = Float64Array;
    type Mat3Like = Float32Array|ಠ_ಠ.clutz.goog.vec.Number;
    type Number = number[];
    type Type = Float32Array|null;
    /**
     * Performs a per-component addition of the matrices mat0 and mat1, storing
     * the result into resultMat.
     * @param mat0 The first addend.
     * @param mat1 The second addend.
     * @param resultMat The matrix to receive the results (may be either mat0 or
     * mat1).
     */
    function addMat(
        mat0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        mat1: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        resultMat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Creates a clone of a 3x3 matrix of Float32.
     * @param matrix The source 3x3 matrix.
     */
    function clone(a: Float32Array|ಠ_ಠ.clutz.goog.vec.Number): Float32Array;
    /**
     * Creates a clone of a 3x3 matrix of Float32.
     * @param matrix The source 3x3 matrix.
     */
    function cloneFloat32(a: Float32Array): Float32Array;
    /**
     * Creates a clone of a 3x3 matrix of Float64.
     * @param matrix The source 3x3 matrix.
     */
    function cloneFloat64(a: Float64Array): Float64Array;
    /**
     * Creates the array representation of a 3x3 matrix of Float32.
     * The returned matrix is cleared to all zeros.
     */
    function create(): Float32Array;
    /**
     * Creates the array representation of a 3x3 matrix of Float32.
     * The use of the array directly instead of a class reduces overhead.
     * The returned matrix is cleared to all zeros.
     */
    function createFloat32(): Float32Array;
    /**
     * Creates a 3x3 matrix of Float32 initialized from the given array.
     * @param matrix The array containing the matrix values in column major
     * order.
     */
    function createFloat32FromArray(matrix: Float32Array|Float64Array|
                                    ಠ_ಠ.clutz.goog.vec.Number): Float32Array;
    /**
     * Creates a 3x3 matrix of Float32 initialized from the given values.
     * @param v00 The values at (0, 0).
     * @param v10 The values at (1, 0).
     * @param v20 The values at (2, 0).
     * @param v01 The values at (0, 1).
     * @param v11 The values at (1, 1).
     * @param v21 The values at (2, 1).
     * @param v02 The values at (0, 2).
     * @param v12 The values at (1, 2).
     * @param v22 The values at (2, 2).
     */
    function createFloat32FromValues(
        v00: number, v10: number, v20: number, v01: number, v11: number,
        v21: number, v02: number, v12: number, v22: number): Float32Array;
    /**
     * Creates a 3x3 identity matrix of Float32.
     */
    function createFloat32Identity(): Float32Array;
    /**
     * Creates the array representation of a 3x3 matrix of Float64.
     * The returned matrix is cleared to all zeros.
     */
    function createFloat64(): Float64Array;
    /**
     * Creates a 3x3 matrix of Float64 initialized from the given array.
     * @param matrix The array containing the matrix values in column major
     * order.
     */
    function createFloat64FromArray(matrix: Float32Array|Float64Array|
                                    ಠ_ಠ.clutz.goog.vec.Number): Float64Array;
    /**
     * Creates a 3x3 matrix of Float64 initialized from the given values.
     * @param v00 The values at (0, 0).
     * @param v10 The values at (1, 0).
     * @param v20 The values at (2, 0).
     * @param v01 The values at (0, 1).
     * @param v11 The values at (1, 1).
     * @param v21 The values at (2, 1).
     * @param v02 The values at (0, 2).
     * @param v12 The values at (1, 2).
     * @param v22 The values at (2, 2).
     */
    function createFloat64FromValues(
        v00: number, v10: number, v20: number, v01: number, v11: number,
        v21: number, v02: number, v12: number, v22: number): Float64Array;
    /**
     * Creates a 3x3 identity matrix of Float64.
     */
    function createFloat64Identity(): Float64Array;
    /**
     * Creates a 3x3 matrix of Float32 initialized from the given array.
     * @param matrix The array containing the matrix values in column major
     * order.
     */
    function createFromArray(matrix: Float32Array|
                             ಠ_ಠ.clutz.goog.vec.Number): Float32Array;
    /**
     * Creates a 3x3 matrix of Float32 initialized from the given values.
     * @param v00 The values at (0, 0).
     * @param v10 The values at (1, 0).
     * @param v20 The values at (2, 0).
     * @param v01 The values at (0, 1).
     * @param v11 The values at (1, 1).
     * @param v21 The values at (2, 1).
     * @param v02 The values at (0, 2).
     * @param v12 The values at (1, 2).
     * @param v22 The values at (2, 2).
     */
    function createFromValues(
        v00: number, v10: number, v20: number, v01: number, v11: number,
        v21: number, v02: number, v12: number, v22: number): Float32Array;
    /**
     * Creates the array representation of a 3x3 matrix of Float32.
     * The returned matrix is cleared to all zeros.
     */
    function createIdentity(): Float32Array;
    /**
     * Creates the array representation of a 3x3 matrix of Number.
     * The returned matrix is cleared to all zeros.
     */
    function createNumber(): ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Creates a 3x3 identity matrix of Number.
     * The returned matrix is cleared to all zeros.
     */
    function createNumberIdentity(): ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Returns true if the components of mat0 are equal to the components of
     * mat1.
     * @param mat0 The first matrix.
     * @param mat1 The second matrix.
     */
    function equals(
        mat0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        mat1: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number): boolean;
    /**
     * Retrieves the specified column from the matrix into the given vector
     * array.
     * @param mat The matrix supplying the values.
     * @param column The column to get the values from.
     * @param vec The vector elements to receive the column.
     */
    function getColumn(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        column: number,
        vec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number): Float32Array|
        Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Retrieves the column values from the given matrix into the given vector
     * elements.
     * @param mat The matrix supplying the columns.
     * @param vec0 The vector to receive column 0.
     * @param vec1 The vector to receive column 1.
     * @param vec2 The vector to receive column 2.
     */
    function getColumns(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec1: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec2: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number): void;
    /**
     * Retrieves the element at the requested row and column.
     * @param mat The matrix containing the value to retrieve.
     * @param row The row index.
     * @param column The column index.
     */
    function getElement(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number, row: number,
        column: number): number;
    /**
     * Retrieves the row values into the given vector.
     * @param mat The matrix supplying the values.
     * @param row The index of the row supplying the values.
     * @param vec The vector to receive the row.
     */
    function getRow(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number, row: number,
        vec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number): Float32Array|
        Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Retrieves the rows of the matrix into the supplied vectors.
     * @param mat The matrix to supplying the values.
     * @param vec0 The vector to receive row 0.
     * @param vec1 The vector to receive row 1.
     * @param vec2 The vector to receive row 2.
     */
    function getRows(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec1: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec2: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number): void;
    /**
     * Computes the inverse of mat0 storing the result into resultMat. If the
     * inverse is defined, this function returns true, false otherwise.
     * @param mat0 The matrix to invert.
     * @param resultMat The matrix to receive the result (may be mat0).
     */
    function invert(
        mat0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        resultMat: Float32Array|Float64Array|
        ಠ_ಠ.clutz.goog.vec.Number): boolean;
    /**
     * Makes the given 3x3 matrix a rotation matrix given Euler angles using
     * the ZXZ convention.
     * Given the euler angles [theta1, theta2, theta3], the rotation is defined
     * as rotation = rotation_z(theta1) * rotation_x(theta2) *
     * rotation_z(theta3), with theta1 in [0, 2 * pi], theta2 in [0, pi] and
     * theta3 in [0, 2 * pi]. rotation_x(theta) means rotation around the X axis
     * of theta radians.
     * @param mat The matrix.
     * @param theta1 The angle of rotation around the Z axis in radians.
     * @param theta2 The angle of rotation around the X axis in radians.
     * @param theta3 The angle of rotation around the Z axis in radians.
     */
    function makeEulerZXZ(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        theta1: number, theta2: number, theta3: number): Float32Array|
        Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Makes the given 3x3 matrix the identity matrix.
     * @param mat The matrix.
     */
    function makeIdentity(mat: Float32Array|Float64Array|
                          ಠ_ಠ.clutz.goog.vec.Number): Float32Array|Float64Array|
        ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Makes the given 3x3 matrix a rotation matrix with the given rotation
     * angle about the axis defined by the vector (ax, ay, az).
     * @param mat The matrix.
     * @param angle The rotation angle in radians.
     * @param ax The x component of the rotation axis.
     * @param ay The y component of the rotation axis.
     * @param az The z component of the rotation axis.
     */
    function makeRotate(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number, angle: number,
        ax: number, ay: number, az: number): Float32Array|Float64Array|
        ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Makes the given 3x3 matrix a rotation matrix with the given rotation
     * angle about the X axis.
     * @param mat The matrix.
     * @param angle The rotation angle in radians.
     */
    function makeRotateX(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        angle: number): Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Makes the given 3x3 matrix a rotation matrix with the given rotation
     * angle about the Y axis.
     * @param mat The matrix.
     * @param angle The rotation angle in radians.
     */
    function makeRotateY(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        angle: number): Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Makes the given 3x3 matrix a rotation matrix with the given rotation
     * angle about the Z axis.
     * @param mat The matrix.
     * @param angle The rotation angle in radians.
     */
    function makeRotateZ(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        angle: number): Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Makes the given 3x3 matrix a scale matrix with x, y, and z scale factors.
     * @param mat The 3x3 (9-element) matrix array to receive the new scale
     * matrix.
     * @param x The scale along the x axis.
     * @param y The scale along the y axis.
     * @param z The scale along the z axis.
     */
    function makeScale(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number, x: number,
        y: number, z: number): Float32Array|Float64Array|
        ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Makes the given 3x3 matrix a translation matrix with x and y
     * translation values.
     * @param mat The matrix.
     * @param x The translation along the x axis.
     * @param y The translation along the y axis.
     */
    function makeTranslate(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number, x: number,
        y: number): Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Makes the given 3x3 matrix the zero matrix.
     * @param mat The matrix.
     */
    function makeZero(mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Multiplies the two matrices mat0 and mat1 using matrix multiplication,
     * storing the result into resultMat.
     * @param mat0 The first (left hand) matrix.
     * @param mat1 The second (right hand) matrix.
     * @param resultMat The matrix to receive the results (may be either mat0 or
     * mat1).
     */
    function multMat(
        mat0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        mat1: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        resultMat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Multiplies matrix mat0 with the given scalar, storing the result
     * into resultMat.
     * @param mat The matrix.
     * @param scalar The scalar value to multiple to each element of mat.
     * @param resultMat The matrix to receive the results (may be mat).
     */
    function multScalar(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        scalar: number,
        resultMat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Transforms the given vector with the given matrix storing the resulting,
     * transformed matrix into resultVec.
     * @param mat The matrix supplying the transformation.
     * @param vec The vector to transform.
     * @param resultVec The vector to receive the results (may be vec).
     */
    function multVec3(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        resultVec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Rotate the given matrix by angle about the x,y,z axis.  Equivalent to:
     * goog.vec.Mat3.multMat(
     * mat,
     * goog.vec.Mat3.makeRotate(goog.vec.Mat3.create(), angle, x, y, z),
     * mat);
     * @param mat The matrix.
     * @param angle The angle in radians.
     * @param x The x component of the rotation axis.
     * @param y The y component of the rotation axis.
     * @param z The z component of the rotation axis.
     */
    function rotate(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number, angle: number,
        x: number, y: number, z: number): Float32Array|Float64Array|
        ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Rotate the given matrix by angle about the x axis.  Equivalent to:
     * goog.vec.Mat3.multMat(
     * mat,
     * goog.vec.Mat3.makeRotateX(goog.vec.Mat3.create(), angle),
     * mat);
     * @param mat The matrix.
     * @param angle The angle in radians.
     */
    function rotateX(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        angle: number): Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Rotate the given matrix by angle about the y axis.  Equivalent to:
     * goog.vec.Mat3.multMat(
     * mat,
     * goog.vec.Mat3.makeRotateY(goog.vec.Mat3.create(), angle),
     * mat);
     * @param mat The matrix.
     * @param angle The angle in radians.
     */
    function rotateY(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        angle: number): Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Rotate the given matrix by angle about the z axis.  Equivalent to:
     * goog.vec.Mat3.multMat(
     * mat,
     * goog.vec.Mat3.makeRotateZ(goog.vec.Mat3.create(), angle),
     * mat);
     * @param mat The matrix.
     * @param angle The angle in radians.
     */
    function rotateZ(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        angle: number): Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Sets the specified column with the value from the supplied array.
     * @param mat The matrix to receive the values.
     * @param column The column index to set the values on.
     * @param vec The vector elements for the column.
     */
    function setColumn(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        column: number,
        vec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number): Float32Array|
        Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Sets the specified column with the supplied values.
     * @param mat The matrix to receive the values.
     * @param column The column index to set the values on.
     * @param v0 The value for row 0.
     * @param v1 The value for row 1.
     * @param v2 The value for row 2.
     */
    function setColumnValues(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        column: number, v0: number, v1: number, v2: number): Float32Array|
        Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Sets the columns of the matrix from the set of vector elements.
     * @param mat The matrix to receive the values.
     * @param vec0 The values for column 0.
     * @param vec1 The values for column 1.
     * @param vec2 The values for column 2.
     */
    function setColumns(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec1: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec2: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Sets the diagonal values of the matrix from the given vector.
     * @param mat The matrix to receive the values.
     * @param vec The vector containing the values.
     */
    function setDiagonal(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number): Float32Array|
        Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Sets the diagonal values of the matrix from the given values.
     * @param mat The matrix to receive the values.
     * @param v00 The values for (0, 0).
     * @param v11 The values for (1, 1).
     * @param v22 The values for (2, 2).
     */
    function setDiagonalValues(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number, v00: number,
        v11: number, v22: number): Float32Array|Float64Array|
        ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Sets the element at the requested row and column.
     * @param mat The matrix containing the value to retrieve.
     * @param row The row index.
     * @param column The column index.
     * @param value The value to set at the requested row, column.
     */
    function setElement(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number, row: number,
        column: number, value: number): Float32Array|Float64Array|
        ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Sets the matrix from the array of values stored in column major order.
     * @param mat The matrix to receive the values.
     * @param values The column major ordered array of values to store in the
     * matrix.
     */
    function setFromArray(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        values: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Sets the matrix from the array of values stored in row major order.
     * @param mat The matrix to receive the values.
     * @param values The row major ordered array of values to store in the
     * matrix.
     */
    function setFromRowMajorArray(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        values: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Initializes the matrix from the set of values. Note the values supplied
     * are in column major order.
     * @param mat The matrix to receive the values.
     * @param v00 The values at (0, 0).
     * @param v10 The values at (1, 0).
     * @param v20 The values at (2, 0).
     * @param v01 The values at (0, 1).
     * @param v11 The values at (1, 1).
     * @param v21 The values at (2, 1).
     * @param v02 The values at (0, 2).
     * @param v12 The values at (1, 2).
     * @param v22 The values at (2, 2).
     */
    function setFromValues(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number, v00: number,
        v10: number, v20: number, v01: number, v11: number, v21: number,
        v02: number, v12: number, v22: number): Float32Array|Float64Array|
        ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Sets the row values from the supplied vector.
     * @param mat The matrix to receive the row values.
     * @param row The index of the row.
     * @param vec The vector containing the values.
     */
    function setRow(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number, row: number,
        vec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number): Float32Array|
        Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Sets the row values from the supplied values.
     * @param mat The matrix to receive the values.
     * @param row The index of the row to receive the values.
     * @param v0 The value for column 0.
     * @param v1 The value for column 1.
     * @param v2 The value for column 2.
     */
    function setRowValues(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number, row: number,
        v0: number, v1: number, v2: number): Float32Array|Float64Array|
        ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Sets the rows of the matrix from the supplied vectors.
     * @param mat The matrix to receive the values.
     * @param vec0 The values for row 0.
     * @param vec1 The values for row 1.
     * @param vec2 The values for row 2.
     */
    function setRows(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec1: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec2: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Performs a per-component subtraction of the matrices mat0 and mat1,
     * storing the result into resultMat.
     * @param mat0 The minuend.
     * @param mat1 The subtrahend.
     * @param resultMat The matrix to receive the results (may be either mat0 or
     * mat1).
     */
    function subMat(
        mat0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        mat1: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        resultMat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Decomposes a rotation matrix into Euler angles using the ZXZ convention
     * so that rotation = rotation_z(theta1) * rotation_x(theta2) *
     * rotation_z(theta3), with theta1 in [0, 2 * pi], theta2 in [0, pi] and
     * theta3 in [0, 2 * pi]. rotation_x(theta) means rotation around the X axis
     * of theta radians.
     * @param mat The matrix.
     * @param euler The ZXZ Euler angles in radians as [theta1, theta2, theta3].
     * @param opt_theta2IsNegative Whether theta2 is in [-pi, 0] instead of the
     * default [0, pi].
     */
    function toEulerZXZ(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        euler: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        opt_theta2IsNegative?: boolean): Float32Array|Float64Array|
        ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Transposes the given matrix mat storing the result into resultMat.
     * @param mat The matrix to transpose.
     * @param resultMat The matrix to receive the results (may be mat).
     */
    function transpose(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        resultMat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
}
declare module 'goog:goog.vec.Mat3' {
    import alias = ಠ_ಠ.clutz.goog.vec.Mat3;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.vec.Mat4 {
    type AnyType = Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    type Float32 = Float32Array;
    type Float64 = Float64Array;
    type Mat4Like = Float32Array|ಠ_ಠ.clutz.goog.vec.Number;
    type Number = number[];
    type Type = Float32Array;
    /**
     * Performs a per-component addition of the matrix mat0 and mat1, storing
     * the result into resultMat.
     * @param mat0 The first addend.
     * @param mat1 The second addend.
     * @param resultMat The matrix to receive the results (may be either mat0 or
     * mat1).
     */
    function addMat(
        mat0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        mat1: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        resultMat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Creates a clone of a 4x4 matrix of Float32.
     * @param matrix The source 4x4 matrix.
     */
    function clone(a: Float32Array|ಠ_ಠ.clutz.goog.vec.Number): Float32Array;
    /**
     * Creates a clone of a 4x4 matrix of Float32.
     * @param matrix The source 4x4 matrix.
     */
    function cloneFloat32(a: Float32Array): Float32Array;
    /**
     * Creates a clone of a 4x4 matrix of Float64.
     * @param matrix The source 4x4 matrix.
     */
    function cloneFloat64(a: Float64Array): Float64Array;
    /**
     * Creates the array representation of a 4x4 matrix of Float32.
     * The returned matrix is cleared to all zeros.
     */
    function create(): Float32Array;
    /**
     * Creates the array representation of a 4x4 matrix of Float32.
     * The use of the array directly instead of a class reduces overhead.
     * The returned matrix is cleared to all zeros.
     */
    function createFloat32(): Float32Array;
    /**
     * Creates a 4x4 matrix of Float32 initialized from the given array.
     * @param matrix The array containing the matrix values in column major
     * order.
     */
    function createFloat32FromArray(matrix: Float32Array|Float64Array|
                                    ಠ_ಠ.clutz.goog.vec.Number): Float32Array;
    /**
     * Creates a 4x4 matrix of Float32 initialized from the given values.
     * @param v00 The values at (0, 0).
     * @param v10 The values at (1, 0).
     * @param v20 The values at (2, 0).
     * @param v30 The values at (3, 0).
     * @param v01 The values at (0, 1).
     * @param v11 The values at (1, 1).
     * @param v21 The values at (2, 1).
     * @param v31 The values at (3, 1).
     * @param v02 The values at (0, 2).
     * @param v12 The values at (1, 2).
     * @param v22 The values at (2, 2).
     * @param v32 The values at (3, 2).
     * @param v03 The values at (0, 3).
     * @param v13 The values at (1, 3).
     * @param v23 The values at (2, 3).
     * @param v33 The values at (3, 3).
     */
    function createFloat32FromValues(
        v00: number, v10: number, v20: number, v30: number, v01: number,
        v11: number, v21: number, v31: number, v02: number, v12: number,
        v22: number, v32: number, v03: number, v13: number, v23: number,
        v33: number): Float32Array;
    /**
     * Creates a 4x4 identity matrix of Float32.
     */
    function createFloat32Identity(): Float32Array;
    /**
     * Creates the array representation of a 4x4 matrix of Float64.
     * The returned matrix is cleared to all zeros.
     */
    function createFloat64(): Float64Array;
    /**
     * Creates a 4x4 matrix of Float64 initialized from the given array.
     * @param matrix The array containing the matrix values in column major
     * order.
     */
    function createFloat64FromArray(matrix: Float32Array|Float64Array|
                                    ಠ_ಠ.clutz.goog.vec.Number): Float64Array;
    /**
     * Creates a 4x4 matrix of Float64 initialized from the given values.
     * @param v00 The values at (0, 0).
     * @param v10 The values at (1, 0).
     * @param v20 The values at (2, 0).
     * @param v30 The values at (3, 0).
     * @param v01 The values at (0, 1).
     * @param v11 The values at (1, 1).
     * @param v21 The values at (2, 1).
     * @param v31 The values at (3, 1).
     * @param v02 The values at (0, 2).
     * @param v12 The values at (1, 2).
     * @param v22 The values at (2, 2).
     * @param v32 The values at (3, 2).
     * @param v03 The values at (0, 3).
     * @param v13 The values at (1, 3).
     * @param v23 The values at (2, 3).
     * @param v33 The values at (3, 3).
     */
    function createFloat64FromValues(
        v00: number, v10: number, v20: number, v30: number, v01: number,
        v11: number, v21: number, v31: number, v02: number, v12: number,
        v22: number, v32: number, v03: number, v13: number, v23: number,
        v33: number): Float64Array;
    /**
     * Creates a 4x4 identity matrix of Float64.
     */
    function createFloat64Identity(): Float64Array;
    /**
     * Creates a 4x4 matrix of Float32 initialized from the given array.
     * @param matrix The array containing the matrix values in column major
     * order.
     */
    function createFromArray(matrix: Float32Array|
                             ಠ_ಠ.clutz.goog.vec.Number): Float32Array;
    /**
     * Creates a 4x4 matrix of Float32 initialized from the given values.
     * @param v00 The values at (0, 0).
     * @param v10 The values at (1, 0).
     * @param v20 The values at (2, 0).
     * @param v30 The values at (3, 0).
     * @param v01 The values at (0, 1).
     * @param v11 The values at (1, 1).
     * @param v21 The values at (2, 1).
     * @param v31 The values at (3, 1).
     * @param v02 The values at (0, 2).
     * @param v12 The values at (1, 2).
     * @param v22 The values at (2, 2).
     * @param v32 The values at (3, 2).
     * @param v03 The values at (0, 3).
     * @param v13 The values at (1, 3).
     * @param v23 The values at (2, 3).
     * @param v33 The values at (3, 3).
     */
    function createFromValues(
        v00: number, v10: number, v20: number, v30: number, v01: number,
        v11: number, v21: number, v31: number, v02: number, v12: number,
        v22: number, v32: number, v03: number, v13: number, v23: number,
        v33: number): Float32Array;
    /**
     * Creates the array representation of a 4x4 matrix of Float32.
     * The returned matrix is cleared to all zeros.
     */
    function createIdentity(): Float32Array;
    /**
     * Creates the array representation of a 4x4 matrix of Number.
     * The returned matrix is cleared to all zeros.
     */
    function createNumber(): ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Creates a 4x4 identity matrix of Number.
     * The returned matrix is cleared to all zeros.
     */
    function createNumberIdentity(): ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Computes the determinant of the matrix.
     * @param mat The matrix to compute the matrix for.
     */
    function determinant(mat: Float32Array|Float64Array|
                         ಠ_ಠ.clutz.goog.vec.Number): number;
    /**
     * Returns true if the components of mat0 are equal to the components of
     * mat1.
     * @param mat0 The first matrix.
     * @param mat1 The second matrix.
     */
    function equals(
        mat0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        mat1: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number): boolean;
    /**
     * Retrieves the specified column from the matrix into the given vector.
     * @param mat The matrix supplying the values.
     * @param column The column to get the values from.
     * @param vec The vector of elements to receive the column.
     */
    function getColumn(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        column: number,
        vec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number): Float32Array|
        Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Retrieves the column values from the given matrix into the given vectors.
     * @param mat The matrix supplying the columns.
     * @param vec0 The vector to receive column 0.
     * @param vec1 The vector to receive column 1.
     * @param vec2 The vector to receive column 2.
     * @param vec3 The vector to receive column 3.
     */
    function getColumns(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec1: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec2: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec3: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number): void;
    /**
     * Gets the diagonal values of the matrix into the given vector.
     * @param mat The matrix containing the values.
     * @param vec The vector to receive the values.
     * @param opt_diagonal Which diagonal to get. A value of 0 selects the main
     * diagonal, a positive number selects a super diagonal and a negative
     * number selects a sub diagonal.
     */
    function getDiagonal(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        opt_diagonal?: number): Float32Array|Float64Array|
        ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Retrieves the element at the requested row and column.
     * @param mat The matrix containing the value to retrieve.
     * @param row The row index.
     * @param column The column index.
     */
    function getElement(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number, row: number,
        column: number): number;
    /**
     * Retrieves the row values into the given vector.
     * @param mat The matrix supplying the values.
     * @param row The index of the row supplying the values.
     * @param vec The vector to receive the row.
     */
    function getRow(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number, row: number,
        vec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number): Float32Array|
        Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Retrieves the rows of the matrix into the supplied vectors.
     * @param mat The matrix to supply the values.
     * @param vec0 The vector to receive row 0.
     * @param vec1 The vector to receive row 1.
     * @param vec2 The vector to receive row 2.
     * @param vec3 The vector to receive row 3.
     */
    function getRows(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec1: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec2: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec3: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number): void;
    /**
     * Retrieves the translation component of the transformation matrix.
     * @param mat The transformation matrix.
     * @param translation The vector for storing the result.
     */
    function getTranslation(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        translation: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Computes the inverse of mat storing the result into resultMat. If the
     * inverse is defined, this function returns true, false otherwise.
     * @param mat The matrix to invert.
     * @param resultMat The matrix to receive the result (may be mat).
     */
    function invert(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        resultMat: Float32Array|Float64Array|
        ಠ_ಠ.clutz.goog.vec.Number): boolean;
    /**
     * Makes the given 4x4 matrix a rotation matrix given Euler angles using
     * the ZXZ convention.
     * Given the euler angles [theta1, theta2, theta3], the rotation is defined
     * as rotation = rotation_z(theta1) * rotation_x(theta2) *
     * rotation_z(theta3), with theta1 in [0, 2 * pi], theta2 in [0, pi] and
     * theta3 in [0, 2 * pi]. rotation_x(theta) means rotation around the X axis
     * of theta radians,
     * @param mat The matrix.
     * @param theta1 The angle of rotation around the Z axis in radians.
     * @param theta2 The angle of rotation around the X axis in radians.
     * @param theta3 The angle of rotation around the Z axis in radians.
     */
    function makeEulerZXZ(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        theta1: number, theta2: number, theta3: number): Float32Array|
        Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Makes the given 4x4 matrix a perspective projection matrix.
     * @param mat The matrix.
     * @param left The coordinate of the left clipping plane.
     * @param right The coordinate of the right clipping plane.
     * @param bottom The coordinate of the bottom clipping plane.
     * @param top The coordinate of the top clipping plane.
     * @param near The distance to the near clipping plane.
     * @param far The distance to the far clipping plane.
     */
    function makeFrustum(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number, left: number,
        right: number, bottom: number, top: number, near: number,
        far: number): Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Makes the given 4x4 matrix the identity matrix.
     * @param mat The matrix.
     */
    function makeIdentity(mat: Float32Array|Float64Array|
                          ಠ_ಠ.clutz.goog.vec.Number): Float32Array|Float64Array|
        ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Makes the given 4x4 matrix a modelview matrix of a camera so that
     * the camera is 'looking at' the given center point.
     * @param mat The matrix.
     * @param eyePt The position of the eye point (camera origin).
     * @param centerPt The point to aim the camera at.
     * @param worldUpVec The vector that identifies the up direction for the
     * camera.
     */
    function makeLookAt(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        eyePt: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        centerPt: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        worldUpVec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Makes the given 4x4 matrix an orthographic projection matrix.
     * @param mat The matrix.
     * @param left The coordinate of the left clipping plane.
     * @param right The coordinate of the right clipping plane.
     * @param bottom The coordinate of the bottom clipping plane.
     * @param top The coordinate of the top clipping plane.
     * @param near The distance to the near clipping plane.
     * @param far The distance to the far clipping plane.
     */
    function makeOrtho(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number, left: number,
        right: number, bottom: number, top: number, near: number,
        far: number): Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Makes the given 4x4 matrix  perspective projection matrix given a
     * field of view and aspect ratio.
     * @param mat The matrix.
     * @param fovy The field of view along the y (vertical) axis in radians.
     * @param aspect The x (width) to y (height) aspect ratio.
     * @param near The distance to the near clipping plane.
     * @param far The distance to the far clipping plane.
     */
    function makePerspective(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number, fovy: number,
        aspect: number, near: number, far: number): Float32Array|Float64Array|
        ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Makes the given 4x4 matrix a rotation matrix with the given rotation
     * angle about the axis defined by the vector (ax, ay, az).
     * @param mat The matrix.
     * @param angle The rotation angle in radians.
     * @param ax The x component of the rotation axis.
     * @param ay The y component of the rotation axis.
     * @param az The z component of the rotation axis.
     */
    function makeRotate(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number, angle: number,
        ax: number, ay: number, az: number): Float32Array|Float64Array|
        ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Makes the given 4x4 matrix a rotation matrix with the given rotation
     * angle about the X axis.
     * @param mat The matrix.
     * @param angle The rotation angle in radians.
     */
    function makeRotateX(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        angle: number): Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Makes the given 4x4 matrix a rotation matrix with the given rotation
     * angle about the Y axis.
     * @param mat The matrix.
     * @param angle The rotation angle in radians.
     */
    function makeRotateY(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        angle: number): Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Makes the given 4x4 matrix a rotation matrix with the given rotation
     * angle about the Z axis.
     * @param mat The matrix.
     * @param angle The rotation angle in radians.
     */
    function makeRotateZ(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        angle: number): Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Makes the given 4x4 matrix as a scale matrix with x, y and z scale
     * factors.
     * @param mat The matrix.
     * @param x The scale along the x axis.
     * @param y The scale along the y axis.
     * @param z The scale along the z axis.
     */
    function makeScale(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number, x: number,
        y: number, z: number): Float32Array|Float64Array|
        ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Makes the given 4x4 matrix a translation matrix with x, y and z
     * translation factors.
     * @param mat The matrix.
     * @param x The translation along the x axis.
     * @param y The translation along the y axis.
     * @param z The translation along the z axis.
     */
    function makeTranslate(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number, x: number,
        y: number, z: number): Float32Array|Float64Array|
        ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Makes the given 4x4 matrix the zero matrix.
     * @param mat The matrix.
     */
    function makeZero(mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Multiplies the two matrices mat0 and mat1 using matrix multiplication,
     * storing the result into resultMat.
     * @param mat0 The first (left hand) matrix.
     * @param mat1 The second (right hand) matrix.
     * @param resultMat The matrix to receive the results (may be either mat0 or
     * mat1).
     */
    function multMat(
        mat0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        mat1: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        resultMat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Multiplies matrix mat with the given scalar, storing the result
     * into resultMat.
     * @param mat The matrix.
     * @param scalar The scalar value to multiply to each element of mat.
     * @param resultMat The matrix to receive the results (may be mat).
     */
    function multScalar(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        scalar: number,
        resultMat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Transforms the given vector with the given matrix storing the resulting,
     * transformed vector into resultVec. The input vector is multiplied against
     * the upper 3x4 matrix omitting the projective component.
     * @param mat The matrix supplying the transformation.
     * @param vec The 3 element vector to transform.
     * @param resultVec The 3 element vector to receive the results (may be
     * vec).
     */
    function multVec3(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        resultVec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Transforms the given vector with the given matrix storing the resulting,
     * transformed vector into resultVec. The input vector is multiplied against
     * the upper 3x3 matrix omitting the projective component and translation
     * components.
     * @param mat The matrix supplying the transformation.
     * @param vec The 3 element vector to transform.
     * @param resultVec The 3 element vector to receive the results (may be
     * vec).
     */
    function multVec3NoTranslate(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        resultVec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Transforms the given vector with the given matrix storing the resulting,
     * transformed vector into resultVec. The input vector is multiplied against
     * the full 4x4 matrix with the homogeneous divide applied to reduce the 4
     * element vector to a 3 element vector.
     * @param mat The matrix supplying the transformation.
     * @param vec The 3 element vector to transform.
     * @param resultVec The 3 element vector to receive the results (may be
     * vec).
     */
    function multVec3Projective(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        resultVec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Transforms the given vector with the given matrix storing the resulting,
     * transformed vector into resultVec.
     * @param mat The matrix supplying the transformation.
     * @param vec The vector to transform.
     * @param resultVec The vector to receive the results (may be vec).
     */
    function multVec4(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        resultVec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Rotate the given matrix by angle about the x,y,z axis.  Equivalent to:
     * goog.vec.Mat4.multMat(
     * mat,
     * goog.vec.Mat4.makeRotate(goog.vec.Mat4.create(), angle, x, y, z),
     * mat);
     * @param mat The matrix.
     * @param angle The angle in radians.
     * @param x The x component of the rotation axis.
     * @param y The y component of the rotation axis.
     * @param z The z component of the rotation axis.
     */
    function rotate(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number, angle: number,
        x: number, y: number, z: number): Float32Array|Float64Array|
        ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Rotate the given matrix by angle about the x axis.  Equivalent to:
     * goog.vec.Mat4.multMat(
     * mat,
     * goog.vec.Mat4.makeRotateX(goog.vec.Mat4.create(), angle),
     * mat);
     * @param mat The matrix.
     * @param angle The angle in radians.
     */
    function rotateX(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        angle: number): Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Rotate the given matrix by angle about the y axis.  Equivalent to:
     * goog.vec.Mat4.multMat(
     * mat,
     * goog.vec.Mat4.makeRotateY(goog.vec.Mat4.create(), angle),
     * mat);
     * @param mat The matrix.
     * @param angle The angle in radians.
     */
    function rotateY(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        angle: number): Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Rotate the given matrix by angle about the z axis.  Equivalent to:
     * goog.vec.Mat4.multMat(
     * mat,
     * goog.vec.Mat4.makeRotateZ(goog.vec.Mat4.create(), angle),
     * mat);
     * @param mat The matrix.
     * @param angle The angle in radians.
     */
    function rotateZ(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        angle: number): Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Scales the given matrix by x,y,z.  Equivalent to:
     * goog.vec.Mat4.multMat(
     * mat,
     * goog.vec.Mat4.makeScale(goog.vec.Mat4.create(), x, y, z),
     * mat);
     * @param mat The matrix.
     * @param x The x scale factor.
     * @param y The y scale factor.
     * @param z The z scale factor.
     */
    function scale(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number, x: number,
        y: number, z: number): Float32Array|Float64Array|
        ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Sets the specified column with the value from the supplied vector.
     * @param mat The matrix to receive the values.
     * @param column The column index to set the values on.
     * @param vec The vector of elements for the column.
     */
    function setColumn(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        column: number,
        vec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number): Float32Array|
        Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Sets the specified column with the supplied values.
     * @param mat The matrix to receive the values.
     * @param column The column index to set the values on.
     * @param v0 The value for row 0.
     * @param v1 The value for row 1.
     * @param v2 The value for row 2.
     * @param v3 The value for row 3.
     */
    function setColumnValues(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        column: number, v0: number, v1: number, v2: number,
        v3: number): Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Sets the columns of the matrix from the given vectors.
     * @param mat The matrix to receive the values.
     * @param vec0 The values for column 0.
     * @param vec1 The values for column 1.
     * @param vec2 The values for column 2.
     * @param vec3 The values for column 3.
     */
    function setColumns(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec1: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec2: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec3: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Sets the diagonal values of the matrix from the given vector.
     * @param mat The matrix to receive the values.
     * @param vec The vector containing the values.
     */
    function setDiagonal(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number): Float32Array|
        Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Sets the diagonal values of the matrix from the given values.
     * @param mat The matrix to receive the values.
     * @param v00 The values for (0, 0).
     * @param v11 The values for (1, 1).
     * @param v22 The values for (2, 2).
     * @param v33 The values for (3, 3).
     */
    function setDiagonalValues(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number, v00: number,
        v11: number, v22: number, v33: number): Float32Array|Float64Array|
        ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Sets the element at the requested row and column.
     * @param mat The matrix to set the value on.
     * @param row The row index.
     * @param column The column index.
     * @param value The value to set at the requested row, column.
     */
    function setElement(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number, row: number,
        column: number, value: number): Float32Array|Float64Array|
        ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Sets the matrix from the array of values stored in column major order.
     * @param mat The matrix to receive the values.
     * @param values The column major ordered array of values to store in the
     * matrix.
     */
    function setFromArray(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        values: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Sets the matrix from the array of values stored in row major order.
     * @param mat The matrix to receive the values.
     * @param values The row major ordered array of values to store in the
     * matrix.
     */
    function setFromRowMajorArray(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        values: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Initializes the matrix from the set of values. Note the values supplied
     * are in column major order.
     * @param mat The matrix to receive the values.
     * @param v00 The values at (0, 0).
     * @param v10 The values at (1, 0).
     * @param v20 The values at (2, 0).
     * @param v30 The values at (3, 0).
     * @param v01 The values at (0, 1).
     * @param v11 The values at (1, 1).
     * @param v21 The values at (2, 1).
     * @param v31 The values at (3, 1).
     * @param v02 The values at (0, 2).
     * @param v12 The values at (1, 2).
     * @param v22 The values at (2, 2).
     * @param v32 The values at (3, 2).
     * @param v03 The values at (0, 3).
     * @param v13 The values at (1, 3).
     * @param v23 The values at (2, 3).
     * @param v33 The values at (3, 3).
     */
    function setFromValues(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number, v00: number,
        v10: number, v20: number, v30: number, v01: number, v11: number,
        v21: number, v31: number, v02: number, v12: number, v22: number,
        v32: number, v03: number, v13: number, v23: number,
        v33: number): Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Sets the row values from the supplied vector.
     * @param mat The matrix to receive the row values.
     * @param row The index of the row.
     * @param vec The vector containing the values.
     */
    function setRow(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number, row: number,
        vec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number): Float32Array|
        Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Sets the row values from the supplied values.
     * @param mat The matrix to receive the values.
     * @param row The index of the row to receive the values.
     * @param v0 The value for column 0.
     * @param v1 The value for column 1.
     * @param v2 The value for column 2.
     * @param v3 The value for column 3.
     */
    function setRowValues(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number, row: number,
        v0: number, v1: number, v2: number, v3: number): Float32Array|
        Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Sets the rows of the matrix from the supplied vectors.
     * @param mat The matrix to receive the values.
     * @param vec0 The values for row 0.
     * @param vec1 The values for row 1.
     * @param vec2 The values for row 2.
     * @param vec3 The values for row 3.
     */
    function setRows(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec1: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec2: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec3: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Performs a per-component subtraction of the matrix mat0 and mat1,
     * storing the result into resultMat.
     * @param mat0 The minuend.
     * @param mat1 The subtrahend.
     * @param resultMat The matrix to receive the results (may be either mat0 or
     * mat1).
     */
    function subMat(
        mat0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        mat1: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        resultMat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Decomposes a rotation matrix into Euler angles using the ZXZ convention
     * so that rotation = rotation_z(theta1) * rotation_x(theta2) *
     * rotation_z(theta3), with theta1 in [0, 2 * pi], theta2 in [0, pi] and
     * theta3 in [0, 2 * pi]. rotation_x(theta) means rotation around the X axis
     * of theta radians.
     * @param mat The matrix.
     * @param euler The ZXZ Euler angles in radians as [theta1, theta2, theta3].
     * @param opt_theta2IsNegative Whether theta2 is in [-pi, 0] instead of the
     * default [0, pi].
     */
    function toEulerZXZ(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        euler: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        opt_theta2IsNegative?: boolean): Float32Array|Float64Array|
        ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Decomposes a matrix into the lookAt vectors eyePt, fwdVec and worldUpVec.
     * The matrix represents the modelview matrix of a camera. It is the inverse
     * of lookAt except for the output of the fwdVec instead of centerPt.
     * The centerPt itself cannot be recovered from a modelview matrix.
     * @param mat The matrix.
     * @param eyePt The position of the eye point (camera origin).
     * @param fwdVec The vector describing where the camera points to.
     * @param worldUpVec The vector that identifies the up direction for the
     * camera.
     */
    function toLookAt(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        eyePt: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        fwdVec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        worldUpVec: Float32Array|Float64Array|
        ಠ_ಠ.clutz.goog.vec.Number): boolean;
    /**
     * Translates the given matrix by x,y,z.  Equvialent to:
     * goog.vec.Mat4.multMat(
     * mat,
     * goog.vec.Mat4.makeTranslate(goog.vec.Mat4.create(), x, y, z),
     * mat);
     * @param mat The matrix.
     * @param x The translation along the x axis.
     * @param y The translation along the y axis.
     * @param z The translation along the z axis.
     */
    function translate(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number, x: number,
        y: number, z: number): Float32Array|Float64Array|
        ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Transposes the given matrix mat storing the result into resultMat.
     * @param mat The matrix to transpose.
     * @param resultMat The matrix to receive the results (may be mat).
     */
    function transpose(
        mat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        resultMat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
}
declare module 'goog:goog.vec.Mat4' {
    import alias = ಠ_ಠ.clutz.goog.vec.Mat4;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.vec {
    type Number = number[];
}
declare module 'goog:goog.vec.Number' {
    import alias = ಠ_ಠ.clutz.goog.vec.Number;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.vec.Quaternion {
    type Float32 = Float32Array;
    type Float64 = Float64Array;
    type Number = number[];
    /**
     * Adds the two quaternions.
     * @param quat0 The first addend.
     * @param quat1 The second addend.
     * @param resultQuat The quaternion to receive the result. May be quat0 or
     * quat1.
     */
    function add(
        a: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        b: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        c: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number): any;
    /**
     * Creates a clone of the given Float32 quaternion.
     * @param q The source quaternion.
     */
    function cloneFloat32(a: Float32Array): Float32Array;
    /**
     * Creates a clone of the given Float64 quaternion.
     * @param q The source quaternion.
     */
    function cloneFloat64(a: Float64Array): Float64Array;
    /**
     * Concatenates the two quaternions storing the result into resultQuat.
     * @param quat0 The first quaternion.
     * @param quat1 The second quaternion.
     * @param resultQuat The quaternion to receive the result.
     */
    function concat(
        quat0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        quat1: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        resultQuat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Computes the conjugate of the quaternion in quat, storing the result into
     * resultQuat.
     *
     * If the quaternion is normalized already, this function is faster than
     * goog.Quaternion.inverse and produces the same result.
     * @param quat The source quaternion.
     * @param resultQuat The quaternion to receive the result.
     */
    function conjugate(
        quat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        resultQuat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Creates a Float32 quaternion, initialized to zero.
     */
    function createFloat32(): Float32Array;
    /**
     * Creates a new Float32 quaternion initialized with the values from the
     * supplied array.
     * @param vec The source 4 element array.
     */
    function createFloat32FromArray(a: Float32Array|Float64Array|
                                    ಠ_ಠ.clutz.goog.vec.Number): Float32Array;
    /**
     * Creates a new Float32 quaternion initialized with the supplied values.
     * @param v0 The value for element at index 0.
     * @param v1 The value for element at index 1.
     * @param v2 The value for element at index 2.
     * @param v3 The value for element at index 3.
     */
    function createFloat32FromValues(
        a: number, b: number, c: number, d: number): Float32Array;
    /**
     * Creates a Float64 quaternion, initialized to zero.
     */
    function createFloat64(): Float64Array;
    /**
     * Creates a new Float64 quaternion initialized with the values from the
     * supplied array.
     * @param vec The source 4 element array.
     */
    function createFloat64FromArray(a: Float32Array|Float64Array|
                                    ಠ_ಠ.clutz.goog.vec.Number): Float64Array;
    /**
     * Creates a new Float64 quaternion initialized with the supplied values.
     * @param v0 The value for element at index 0.
     * @param v1 The value for element at index 1.
     * @param v2 The value for element at index 2.
     * @param v3 The value for element at index 3.
     */
    function createFloat64FromValues(
        a: number, b: number, c: number, d: number): Float64Array;
    /**
     * Creates a Float32 quaternion, initialized to the identity.
     */
    function createIdentityFloat32(): Float32Array;
    /**
     * Creates a Float64 quaternion, initialized to the identity.
     */
    function createIdentityFloat64(): Float64Array;
    /**
     * Creates a Number quaternion, initialized to zero.
     */
    function createNumber(): ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Computes the dot (scalar) product of two quaternions.
     * @param q0 The first quaternion.
     * @param q1 The second quaternion.
     */
    function dot(
        a: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        b: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number): number;
    /**
     * Generates a unit quaternion from the given angle-axis rotation pair.
     * The rotation axis is not required to be a unit vector, but should
     * have non-zero length.  The angle should be specified in radians.
     * @param angle The angle (in radians) to rotate about the axis.
     * @param axis Unit vector specifying the axis of rotation.
     * @param quat Unit quaternion to store the result.
     */
    function fromAngleAxis(
        angle: number,
        axis: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        quat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Generates the quaternion from the given 3x3 rotation matrix.
     *
     * Perf: http://jsperf.com/conversion-of-3x3-matrix-to-quaternion
     * http://jsperf.com/goog-vec-fromrotationmatrix3-a
     * @param matrix The source matrix.
     * @param quat The resulting quaternion.
     */
    function fromRotationMatrix3(
        matrix: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        quat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Generates the quaternion from the given 4x4 rotation matrix.
     *
     * Perf: http://jsperf.com/goog-vec-fromrotationmatrix4
     *
     * Implementation is the same as fromRotationMatrix3 but using indices from
     * the top left 3x3 in a 4x4 matrix.
     * @param matrix The source matrix.
     * @param quat The resulting quaternion.
     */
    function fromRotationMatrix4(
        matrix: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        quat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Computes the inverse of the quaternion in quat, storing the result into
     * resultQuat.
     *
     * If the quaternion is already normalized, goog.vec.Quaternion.conjugate
     * is faster than this function and produces the same result.
     * @param quat The quaternion to invert.
     * @param resultQuat The quaternion to receive the result.
     */
    function invert(
        quat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        resultQuat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Returns the magnitude of the given quaternion.
     * @param quat0 The quaternion.
     */
    function magnitude(a: Float32Array|Float64Array|
                       ಠ_ಠ.clutz.goog.vec.Number): number;
    /**
     * Returns the square magnitude of the given quaternion.
     * @param quat0 The quaternion.
     */
    function magnitudeSquared(a: Float32Array|Float64Array|
                              ಠ_ಠ.clutz.goog.vec.Number): number;
    /**
     * Makes the given quaternion the identity quaternion (0, 0, 0, 1).
     * @param quat The quaternion.
     */
    function makeIdentity(quat: Float32Array|Float64Array|
                          ಠ_ಠ.clutz.goog.vec.Number): Float32Array|Float64Array|
        ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Negates a quaternion, storing the result into resultQuat.
     * @param quat0 The quaternion to negate.
     * @param resultQuat The quaternion to receive the result. May be quat0.
     */
    function negate(
        a: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        b: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number): any;
    /**
     * Compute the simple linear interpolation of the two quaternions q0 and q1
     * according to the coefficient t. The resulting quaternion is stored in
     * resultVec.
     * @param q0 The first quaternion.
     * @param q1 The second quaternion.
     * @param t The interpolation factor.
     * @param resultQuat The quaternion to receive the results (may be q0 or
     * q1).
     */
    function nlerp(
        a: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        b: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number, c: number,
        d: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number): any;
    /**
     * Normalizes the given quaternion storing the result into resultVec.
     * @param quat0 The quaternion to normalize.
     * @param resultQuat The quaternion to receive the result. May be quat0.
     */
    function normalize(
        a: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        b: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number): any;
    /**
     * Rotates a quaternion by the given angle about the X axis.
     * @param quat The quaternion.
     * @param angle The angle in radians.
     * @param resultQuat The quaternion to receive the result.
     */
    function rotateX(
        quat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        angle: number,
        resultQuat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Rotates a quaternion by the given angle about the Y axis.
     * @param quat The quaternion.
     * @param angle The angle in radians.
     * @param resultQuat The quaternion to receive the result.
     */
    function rotateY(
        quat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        angle: number,
        resultQuat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Rotates a quaternion by the given angle about the Z axis.
     * @param quat The quaternion.
     * @param angle The angle in radians.
     * @param resultQuat The quaternion to receive the result.
     */
    function rotateZ(
        quat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        angle: number,
        resultQuat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Multiplies each component of quat0 with scalar storing the product into
     * resultVec.
     * @param quat0 The source quaternion.
     * @param scalar The value to multiply with each component of quat0.
     * @param resultQuat The quaternion to receive the result. May be quat0.
     */
    function scale(
        a: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number, b: number,
        c: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number): any;
    /**
     * Initializes the quaternion with the given array of values.
     * @param q The quaternion to receive the values.
     * @param values The array of values.
     */
    function setFromArray(
        a: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        b: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number): Float32Array|
        Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Initializes the quaternion with the given values.
     * @param q The quaternion to receive the values.
     * @param v0 The value for element at index 0.
     * @param v1 The value for element at index 1.
     * @param v2 The value for element at index 2.
     * @param v3 The value for element at index 3.
     */
    function setFromValues(
        a: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number, b: number,
        c: number, d: number, e: number): Float32Array|Float64Array|
        ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Computes the spherical linear interpolated value from the given
     * quaternions q0 and q1 according to the coefficient t. The resulting
     * quaternion is stored in resultQuat.
     * @param q0 The first quaternion.
     * @param q1 The second quaternion.
     * @param t The interpolating coefficient.
     * @param resultQuat The quaternion to receive the result.
     */
    function slerp(
        q0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        q1: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number, t: number,
        resultQuat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Generates an angle-axis rotation pair from a unit quaternion.
     * The quaternion is assumed to be of unit length.  The calculated
     * values are returned via the passed 'axis' object and the 'angle'
     * number returned by the function itself. The returned rotation axis
     * is a non-zero length unit vector, and the returned angle is in
     * radians in the range of [-PI, +PI].
     * @param quat Unit quaternion to convert.
     * @param axis Vector to store the returned rotation axis.
     */
    function toAngleAxis(
        quat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        axis: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number): number;
    /**
     * Generates the 3x3 rotation matrix from the given quaternion.
     * @param quat The source quaternion.
     * @param matrix The resulting matrix.
     */
    function toRotationMatrix3(
        quat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        matrix: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Generates the 4x4 rotation matrix from the given quaternion.
     * @param quat The source quaternion.
     * @param matrix The resulting matrix.
     */
    function toRotationMatrix4(
        quat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        matrix: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Transforms a vec with a quaternion. Works on both vec3s and vec4s.
     * @param vec The vec to transform.
     * @param quat The quaternion.
     * @param resultVec The vec to receive the result.
     */
    function transformVec(
        vec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        quat: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        resultVec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
}
declare module 'goog:goog.vec.Quaternion' {
    import alias = ಠ_ಠ.clutz.goog.vec.Quaternion;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.vec.Quaternion {
    type AnyType = Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
}
declare module 'goog:goog.vec.Quaternion.AnyType' {
    import alias = ಠ_ಠ.clutz.goog.vec.Quaternion.AnyType;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.vec {
    /**
     * Constructs a new ray with an optional origin and direction. If not
     * specified, the default is [0, 0, 0].
     */
    class Ray extends Ray_Instance {}
    class Ray_Instance {
        private noStructuralTyping_: any;
        /**
         * Constructs a new ray with an optional origin and direction. If not
         * specified, the default is [0, 0, 0].
         * @param opt_origin The optional origin.
         * @param opt_dir The optional direction.
         */
        constructor(
            opt_origin?: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
            opt_dir?: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number);
        dir: Float64Array;
        origin: Float64Array;
        /**
         * Returns true if this ray is equal to the other ray.
         * @param other The other ray.
         */
        equals(other: ಠ_ಠ.clutz.goog.vec.Ray|null): boolean;
        /**
         * Sets the origin and direction of the ray.
         * @param origin The new origin.
         * @param dir The new direction.
         */
        set(origin: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
            dir: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number): void;
        /**
         * Sets the direction of the ray.
         * @param dir The new direction.
         */
        setDir(dir: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number): void;
        /**
         * Sets the origin of the ray.
         * @param origin the new origin.
         */
        setOrigin(origin: Float32Array|Float64Array|
                  ಠ_ಠ.clutz.goog.vec.Number): void;
    }
}
declare module 'goog:goog.vec.Ray' {
    import alias = ಠ_ಠ.clutz.goog.vec.Ray;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.vec.Vec2 {
    type AnyType = Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    type Float32 = Float32Array;
    type Float64 = Float64Array;
    type Number = number[];
    /**
     * Takes the absolute value of each component of vec0 storing the result in
     * resultVec.
     * @param vec0 The source vector.
     * @param resultVec The vector to receive the result. May be vec0.
     */
    function abs(
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        resultVec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Performs a component-wise addition of vec0 and vec1 together storing the
     * result into resultVec.
     * @param vec0 The first addend.
     * @param vec1 The second addend.
     * @param resultVec The vector to receive the result. May be vec0 or vec1.
     */
    function add(
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec1: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        resultVec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Creates a clone of the given 2 element Float32 vector.
     * @param vec The source 2 element vector.
     */
    function cloneFloat32(a: Float32Array): Float32Array;
    /**
     * Creates a clone of the given 2 element vector.
     * @param vec The source 2 element vector.
     */
    function cloneFloat64(a: Float64Array): Float64Array;
    /**
     * Creates a 2 element vector of Float32. The array is initialized to zero.
     */
    function createFloat32(): Float32Array;
    /**
     * Creates a new 2 element FLoat32 vector initialized with the value from
     * the given array.
     * @param vec The source 2 element array.
     */
    function createFloat32FromArray(vec: Float32Array|Float64Array|
                                    ಠ_ಠ.clutz.goog.vec.Number): Float32Array;
    /**
     * Creates a new 2 element Float32 vector initialized with the supplied
     * values.
     * @param vec0 The value for element at index 0.
     * @param vec1 The value for element at index 1.
     */
    function createFloat32FromValues(vec0: number, vec1: number): Float32Array;
    /**
     * Creates a 2 element vector of Float64. The array is initialized to zero.
     */
    function createFloat64(): Float64Array;
    /**
     * Creates a new 2 element Float64 vector initialized with the value from
     * the given array.
     * @param vec The source 2 element array.
     */
    function createFloat64FromArray(vec: Float32Array|Float64Array|
                                    ಠ_ಠ.clutz.goog.vec.Number): Float64Array;
    /**
     * Creates a new 2 element Float64 vector initialized with the supplied
     * values.
     * @param vec0 The value for element at index 0.
     * @param vec1 The value for element at index 1.
     */
    function createFloat64FromValues(vec0: number, vec1: number): Float64Array;
    /**
     * Creates a 2 element vector of Number. The array is initialized to zero.
     */
    function createNumber(): ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Returns a unit vector pointing from one point to another.
     * If the input points are equal then the result will be all zeros.
     * @param vec0 Origin point.
     * @param vec1 Target point.
     * @param resultVec The vector to receive the results (may be vec0 or vec1).
     */
    function direction(
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec1: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        resultVec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Returns the distance between two points.
     * @param vec0 First point.
     * @param vec1 Second point.
     */
    function distance(
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec1: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number): number;
    /**
     * Returns the squared distance between two points.
     * @param vec0 First point.
     * @param vec1 Second point.
     */
    function distanceSquared(
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec1: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number): number;
    /**
     * Returns the scalar product of vectors vec0 and vec1.
     * @param vec0 The first vector.
     * @param vec1 The second vector.
     */
    function dot(
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec1: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number): number;
    /**
     * Returns true if the components of vec0 are equal to the components of
     * vec1.
     * @param vec0 The first vector.
     * @param vec1 The second vector.
     */
    function equals(
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec1: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number): boolean;
    /**
     * Linearly interpolate from vec0 to vec1 according to f. The value of f
     * should be in the range [0..1] otherwise the results are undefined.
     * @param vec0 The first vector.
     * @param vec1 The second vector.
     * @param f The interpolation factor.
     * @param resultVec The vector to receive the results (may be vec0 or vec1).
     */
    function lerp(
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec1: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number, f: number,
        resultVec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Returns the magnitude of the given vector.
     * @param vec0 The vector.
     */
    function magnitude(vec0: Float32Array|Float64Array|
                       ಠ_ಠ.clutz.goog.vec.Number): number;
    /**
     * Returns the magnitudeSquared of the given vector.
     * @param vec0 The vector.
     */
    function magnitudeSquared(vec0: Float32Array|Float64Array|
                              ಠ_ಠ.clutz.goog.vec.Number): number;
    /**
     * Compares the components of vec0 with the components of another vector or
     * scalar, storing the larger values in resultVec.
     * @param vec0 The source vector.
     * @param limit The limit vector or scalar.
     * @param resultVec The vector to receive the results (may be vec0 or
     * limit).
     */
    function max(
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        limit: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number|number,
        resultVec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Compares the components of vec0 with the components of another vector or
     * scalar, storing the smaller values in resultVec.
     * @param vec0 The source vector.
     * @param limit The limit vector or scalar.
     * @param resultVec The vector to receive the results (may be vec0 or
     * limit).
     */
    function min(
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        limit: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number|number,
        resultVec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Negates vec0, storing the result into resultVec.
     * @param vec0 The vector to negate.
     * @param resultVec The vector to receive the result. May be vec0.
     */
    function negate(
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        resultVec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Normalizes the given vector storing the result into resultVec.
     * @param vec0 The vector to normalize.
     * @param resultVec The vector to receive the result. May be vec0.
     */
    function normalize(
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        resultVec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Multiplies each component of vec0 with scalar storing the product into
     * resultVec.
     * @param vec0 The source vector.
     * @param scalar The value to multiply with each component of vec0.
     * @param resultVec The vector to receive the result. May be vec0.
     */
    function scale(
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        scalar: number,
        resultVec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Initializes the vector with the given array of values.
     * @param vec The vector to receive the values.
     * @param values The array of values.
     */
    function setFromArray(
        vec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        values: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Initializes the vector with the given values.
     * @param vec The vector to receive the values.
     * @param vec0 The value for element at index 0.
     * @param vec1 The value for element at index 1.
     */
    function setFromValues(
        vec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number, vec0: number,
        vec1: number): Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Performs a component-wise subtraction of vec1 from vec0 storing the
     * result into resultVec.
     * @param vec0 The minuend.
     * @param vec1 The subtrahend.
     * @param resultVec The vector to receive the result. May be vec0 or vec1.
     */
    function subtract(
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec1: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        resultVec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
}
declare module 'goog:goog.vec.Vec2' {
    import alias = ಠ_ಠ.clutz.goog.vec.Vec2;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.vec.Vec3 {
    type AnyType = Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    type Float32 = Float32Array;
    type Float64 = Float64Array;
    type Number = number[];
    type Type = Float32Array|null;
    type Vec3Like = Float32Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Takes the absolute value of each component of vec0 storing the result in
     * resultVec.
     * @param vec0 The source vector.
     * @param resultVec The vector to receive the result. May be vec0.
     */
    function abs(
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        resultVec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Performs a component-wise addition of vec0 and vec1 together storing the
     * result into resultVec.
     * @param vec0 The first addend.
     * @param vec1 The second addend.
     * @param resultVec The vector to receive the result. May be vec0 or vec1.
     */
    function add(
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec1: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        resultVec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Creates a clone of the given 3 element vector.
     * @param vec The source 3 element vector.
     */
    function clone(vec: Float32Array|ಠ_ಠ.clutz.goog.vec.Number): Float32Array;
    /**
     * Creates a clone of the given 3 element Float32 vector.
     * @param vec The source 3 element vector.
     */
    function cloneFloat32(a: Float32Array): Float32Array;
    /**
     * Creates a clone of the given 3 element vector.
     * @param vec The source 3 element vector.
     */
    function cloneFloat64(a: Float64Array): Float64Array;
    /**
     * Creates a 3 element vector of Float32Array. The array is initialized to
     * zero.
     */
    function create(): Float32Array;
    /**
     * Creates a 3 element vector of Float32. The array is initialized to zero.
     */
    function createFloat32(): Float32Array;
    /**
     * Creates a new 3 element Float32 vector initialized with the value from
     * the given array.
     * @param vec The source 3 element array.
     */
    function createFloat32FromArray(vec: Float32Array|Float64Array|
                                    ಠ_ಠ.clutz.goog.vec.Number): Float32Array;
    /**
     * Creates a new 3 element Float32 vector initialized with the supplied
     * values.
     * @param v0 The value for element at index 0.
     * @param v1 The value for element at index 1.
     * @param v2 The value for element at index 2.
     */
    function createFloat32FromValues(
        v0: number, v1: number, v2: number): Float32Array;
    /**
     * Creates a 3 element vector of Float64. The array is initialized to zero.
     */
    function createFloat64(): Float64Array;
    /**
     * Creates a new 3 element Float64 vector initialized with the value from
     * the given array.
     * @param vec The source 3 element array.
     */
    function createFloat64FromArray(vec: Float32Array|Float64Array|
                                    ಠ_ಠ.clutz.goog.vec.Number): Float64Array;
    /**
     * Creates a new 3 element Float64 vector initialized with the supplied
     * values.
     * @param v0 The value for element at index 0.
     * @param v1 The value for element at index 1.
     * @param v2 The value for element at index 2.
     */
    function createFloat64FromValues(
        v0: number, v1: number, v2: number): Float64Array;
    /**
     * Creates a new 3 element vector initialized with the value from the given
     * array.
     * @param vec The source 3 element array.
     */
    function createFromArray(vec: Float32Array|
                             ಠ_ಠ.clutz.goog.vec.Number): Float32Array;
    /**
     * Creates a new 3 element vector initialized with the supplied values.
     * @param v0 The value for element at index 0.
     * @param v1 The value for element at index 1.
     * @param v2 The value for element at index 2.
     */
    function createFromValues(v0: number, v1: number, v2: number): Float32Array;
    /**
     * Creates a 3 element vector of Number. The array is initialized to zero.
     */
    function createNumber(): ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Computes the vector (cross) product of v0 and v1 storing the result into
     * resultVec.
     * @param v0 The first vector.
     * @param v1 The second vector.
     * @param resultVec The vector to receive the results. May be either v0 or
     * v1.
     */
    function cross(
        v0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        v1: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        resultVec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Returns a unit vector pointing from one point to another.
     * If the input points are equal then the result will be all zeros.
     * @param vec0 Origin point.
     * @param vec1 Target point.
     * @param resultVec The vector to receive the results (may be vec0 or vec1).
     */
    function direction(
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec1: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        resultVec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Returns the distance between two points.
     * @param vec0 First point.
     * @param vec1 Second point.
     */
    function distance(
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec1: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number): number;
    /**
     * Returns the squared distance between two points.
     * @param vec0 First point.
     * @param vec1 Second point.
     */
    function distanceSquared(
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec1: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number): number;
    /**
     * Returns the scalar product of vectors v0 and v1.
     * @param v0 The first vector.
     * @param v1 The second vector.
     */
    function dot(
        v0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        v1: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number): number;
    /**
     * Returns true if the components of v0 are equal to the components of v1.
     * @param v0 The first vector.
     * @param v1 The second vector.
     */
    function equals(
        v0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        v1: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number): boolean;
    /**
     * Linearly interpolate from vec0 to v1 according to f. The value of f
     * should be in the range [0..1] otherwise the results are undefined.
     * @param v0 The first vector.
     * @param v1 The second vector.
     * @param f The interpolation factor.
     * @param resultVec The vector to receive the results (may be v0 or v1).
     */
    function lerp(
        v0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        v1: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number, f: number,
        resultVec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Returns the magnitude of the given vector.
     * @param vec0 The vector.
     */
    function magnitude(vec0: Float32Array|Float64Array|
                       ಠ_ಠ.clutz.goog.vec.Number): number;
    /**
     * Returns the magnitudeSquared of the given vector.
     * @param vec0 The vector.
     */
    function magnitudeSquared(vec0: Float32Array|Float64Array|
                              ಠ_ಠ.clutz.goog.vec.Number): number;
    /**
     * Compares the components of vec0 with the components of another vector or
     * scalar, storing the larger values in resultVec.
     * @param vec0 The source vector.
     * @param limit The limit vector or scalar.
     * @param resultVec The vector to receive the results (may be vec0 or
     * limit).
     */
    function max(
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        limit: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number|number,
        resultVec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Compares the components of vec0 with the components of another vector or
     * scalar, storing the smaller values in resultVec.
     * @param vec0 The source vector.
     * @param limit The limit vector or scalar.
     * @param resultVec The vector to receive the results (may be vec0 or
     * limit).
     */
    function min(
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        limit: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number|number,
        resultVec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Negates vec0, storing the result into resultVec.
     * @param vec0 The vector to negate.
     * @param resultVec The vector to receive the result. May be vec0.
     */
    function negate(
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        resultVec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Normalizes the given vector storing the result into resultVec.
     * @param vec0 The vector to normalize.
     * @param resultVec The vector to receive the result. May be vec0.
     */
    function normalize(
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        resultVec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Multiplies each component of vec0 with scalar storing the product into
     * resultVec.
     * @param vec0 The source vector.
     * @param scalar The value to multiply with each component of vec0.
     * @param resultVec The vector to receive the result. May be vec0.
     */
    function scale(
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        scalar: number,
        resultVec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Initializes the vector with the given array of values.
     * @param vec The vector to receive the values.
     * @param values The array of values.
     */
    function setFromArray(
        vec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        values: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Initializes the vector with the given values.
     * @param vec The vector to receive the values.
     * @param v0 The value for element at index 0.
     * @param v1 The value for element at index 1.
     * @param v2 The value for element at index 2.
     */
    function setFromValues(
        vec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number, v0: number,
        v1: number, v2: number): Float32Array|Float64Array|
        ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Performs a component-wise subtraction of vec1 from vec0 storing the
     * result into resultVec.
     * @param vec0 The minuend.
     * @param vec1 The subtrahend.
     * @param resultVec The vector to receive the result. May be vec0 or vec1.
     */
    function subtract(
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec1: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        resultVec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
}
declare module 'goog:goog.vec.Vec3' {
    import alias = ಠ_ಠ.clutz.goog.vec.Vec3;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.vec.Vec4 {
    type AnyType = Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    type Float32 = Float32Array;
    type Float64 = Float64Array;
    type Number = number[];
    type Type = Float32Array|null;
    type Vec4Like = Float32Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Takes the absolute value of each component of vec0 storing the result in
     * resultVec.
     * @param vec0 The source vector.
     * @param resultVec The vector to receive the result. May be vec0.
     */
    function abs(
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        resultVec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Performs a component-wise addition of vec0 and vec1 together storing the
     * result into resultVec.
     * @param vec0 The first addend.
     * @param vec1 The second addend.
     * @param resultVec The vector to receive the result. May be vec0 or vec1.
     */
    function add(
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec1: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        resultVec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Creates a clone of the given 4 element vector.
     * @param vec The source 4 element vector.
     */
    function clone(a: Float32Array|ಠ_ಠ.clutz.goog.vec.Number): Float32Array;
    /**
     * Creates a clone of the given 4 element Float32 vector.
     * @param vec The source 3 element vector.
     */
    function cloneFloat32(a: Float32Array): Float32Array;
    /**
     * Creates a clone of the given 4 element vector.
     * @param vec The source 4 element vector.
     */
    function cloneFloat64(a: Float64Array): Float64Array;
    /**
     * Creates a 4 element vector of Float32Array. The array is initialized to
     * zero.
     */
    function create(): Float32Array;
    /**
     * Creates a 4 element vector of Float32. The array is initialized to zero.
     */
    function createFloat32(): Float32Array;
    /**
     * Creates a new 4 element FLoat32 vector initialized with the value from
     * the given array.
     * @param vec The source 3 element array.
     */
    function createFloat32FromArray(vec: Float32Array|Float64Array|
                                    ಠ_ಠ.clutz.goog.vec.Number): Float32Array;
    /**
     * Creates a new 4 element Float32 vector initialized with the supplied
     * values.
     * @param v0 The value for element at index 0.
     * @param v1 The value for element at index 1.
     * @param v2 The value for element at index 2.
     * @param v3 The value for element at index 3.
     */
    function createFloat32FromValues(
        v0: number, v1: number, v2: number, v3: number): Float32Array;
    /**
     * Creates a 4 element vector of Float64. The array is initialized to zero.
     */
    function createFloat64(): Float64Array;
    /**
     * Creates a new 4 element Float64 vector initialized with the value from
     * the given array.
     * @param vec The source 4 element array.
     */
    function createFloat64FromArray(vec: Float32Array|Float64Array|
                                    ಠ_ಠ.clutz.goog.vec.Number): Float64Array;
    /**
     * Creates a new 4 element Float64 vector initialized with the supplied
     * values.
     * @param v0 The value for element at index 0.
     * @param v1 The value for element at index 1.
     * @param v2 The value for element at index 2.
     * @param v3 The value for element at index 3.
     */
    function createFloat64FromValues(
        v0: number, v1: number, v2: number, v3: number): Float64Array;
    /**
     * Creates a new 4 element vector initialized with the value from the given
     * array.
     * @param vec The source 4 element array.
     */
    function createFromArray(vec: Float32Array|
                             ಠ_ಠ.clutz.goog.vec.Number): Float32Array;
    /**
     * Creates a new 4 element vector initialized with the supplied values.
     * @param v0 The value for element at index 0.
     * @param v1 The value for element at index 1.
     * @param v2 The value for element at index 2.
     * @param v3 The value for element at index 3.
     */
    function createFromValues(
        v0: number, v1: number, v2: number, v3: number): Float32Array;
    /**
     * Creates a 4 element vector of Number. The array is initialized to zero.
     */
    function createNumber(): ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Returns the scalar product of vectors v0 and v1.
     * @param v0 The first vector.
     * @param v1 The second vector.
     */
    function dot(
        v0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        v1: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number): number;
    /**
     * Returns true if the components of v0 are equal to the components of v1.
     * @param v0 The first vector.
     * @param v1 The second vector.
     */
    function equals(
        v0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        v1: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number): boolean;
    /**
     * Linearly interpolate from v0 to v1 according to f. The value of f should
     * be in the range [0..1] otherwise the results are undefined.
     * @param v0 The first vector.
     * @param v1 The second vector.
     * @param f The interpolation factor.
     * @param resultVec The vector to receive the results (may be v0 or v1).
     */
    function lerp(
        v0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        v1: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number, f: number,
        resultVec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Returns the magnitude of the given vector.
     * @param vec0 The vector.
     */
    function magnitude(vec0: Float32Array|Float64Array|
                       ಠ_ಠ.clutz.goog.vec.Number): number;
    /**
     * Returns the magnitudeSquared of the given vector.
     * @param vec0 The vector.
     */
    function magnitudeSquared(vec0: Float32Array|Float64Array|
                              ಠ_ಠ.clutz.goog.vec.Number): number;
    /**
     * Compares the components of vec0 with the components of another vector or
     * scalar, storing the larger values in resultVec.
     * @param vec0 The source vector.
     * @param limit The limit vector or scalar.
     * @param resultVec The vector to receive the results (may be vec0 or
     * limit).
     */
    function max(
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        limit: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number|number,
        resultVec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Compares the components of vec0 with the components of another vector or
     * scalar, storing the smaller values in resultVec.
     * @param vec0 The source vector.
     * @param limit The limit vector or scalar.
     * @param resultVec The vector to receive the results (may be vec0 or
     * limit).
     */
    function min(
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        limit: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number|number,
        resultVec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Negates vec0, storing the result into resultVec.
     * @param vec0 The vector to negate.
     * @param resultVec The vector to receive the result. May be vec0.
     */
    function negate(
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        resultVec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Normalizes the given vector storing the result into resultVec.
     * @param vec0 The vector to normalize.
     * @param resultVec The vector to receive the result. May be vec0.
     */
    function normalize(
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        resultVec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Multiplies each component of vec0 with scalar storing the product into
     * resultVec.
     * @param vec0 The source vector.
     * @param scalar The value to multiply with each component of vec0.
     * @param resultVec The vector to receive the result. May be vec0.
     */
    function scale(
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        scalar: number,
        resultVec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Initializes the vector with the given array of values.
     * @param vec The vector to receive the values.
     * @param values The array of values.
     */
    function setFromArray(
        vec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        values: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Initializes the vector with the given values.
     * @param vec The vector to receive the values.
     * @param v0 The value for element at index 0.
     * @param v1 The value for element at index 1.
     * @param v2 The value for element at index 2.
     * @param v3 The value for element at index 3.
     */
    function setFromValues(
        vec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number, v0: number,
        v1: number, v2: number, v3: number): Float32Array|Float64Array|
        ಠ_ಠ.clutz.goog.vec.Number;
    /**
     * Performs a component-wise subtraction of vec1 from vec0 storing the
     * result into resultVec.
     * @param vec0 The minuend.
     * @param vec1 The subtrahend.
     * @param resultVec The vector to receive the result. May be vec0 or vec1.
     */
    function subtract(
        vec0: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        vec1: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        resultVec: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number):
        Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number;
}
declare module 'goog:goog.vec.Vec4' {
    import alias = ಠ_ಠ.clutz.goog.vec.Vec4;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.vec.mat3d {
    /**
     * Performs a per-component addition of the matrices mat0 and mat1, storing
     * the result into resultMat.
     * @param mat0 The first addend.
     * @param mat1 The second addend.
     * @param resultMat The matrix to receive the results (may be either mat0 or
     * mat1).
     */
    function addMat(
        mat0: Float64Array, mat1: Float64Array,
        resultMat: Float64Array): Float64Array;
    /**
     * Creates a mat3d with all elements initialized to zero.
     */
    function create(): Float64Array;
    /**
     * Creates a mat3d identity matrix.
     */
    function createIdentity(): Float64Array;
    /**
     * Returns true if the components of mat0 are equal to the components of
     * mat1.
     * @param mat0 The first matrix.
     * @param mat1 The second matrix.
     */
    function equals(mat0: Float64Array, mat1: Float64Array): boolean;
    /**
     * Retrieves the specified column from the matrix into the given vector
     * array.
     * @param mat The matrix supplying the values.
     * @param column The column to get the values from.
     * @param vec The vector elements to receive the column.
     */
    function getColumn(
        mat: Float64Array, column: number, vec: Float64Array): Float64Array;
    /**
     * Retrieves the column values from the given matrix into the given vector
     * elements.
     * @param mat The matrix supplying the columns.
     * @param vec0 The vector to receive column 0.
     * @param vec1 The vector to receive column 1.
     * @param vec2 The vector to receive column 2.
     */
    function getColumns(
        mat: Float64Array, vec0: Float64Array, vec1: Float64Array,
        vec2: Float64Array): void;
    /**
     * Retrieves the element at the requested row and column.
     * @param mat The matrix containing the value to retrieve.
     * @param row The row index.
     * @param column The column index.
     */
    function getElement(mat: Float64Array, row: number, column: number): number;
    /**
     * Retrieves the row values into the given vector.
     * @param mat The matrix supplying the values.
     * @param row The index of the row supplying the values.
     * @param vec The vector to receive the row.
     */
    function getRow(
        mat: Float64Array, row: number, vec: Float64Array): Float64Array;
    /**
     * Retrieves the rows of the matrix into the supplied vectors.
     * @param mat The matrix to supplying the values.
     * @param vec0 The vector to receive row 0.
     * @param vec1 The vector to receive row 1.
     * @param vec2 The vector to receive row 2.
     */
    function getRows(
        mat: Float64Array, vec0: Float64Array, vec1: Float64Array,
        vec2: Float64Array): void;
    /**
     * Computes the inverse of mat0 storing the result into resultMat. If the
     * inverse is defined, this function returns true, false otherwise.
     * @param mat0 The matrix to invert.
     * @param resultMat The matrix to receive the result (may be mat0).
     */
    function invert(mat0: Float64Array, resultMat: Float64Array): boolean;
    /**
     * Makes the given 3x3 matrix a rotation matrix given Euler angles using
     * the ZXZ convention.
     * Given the euler angles [theta1, theta2, theta3], the rotation is defined
     * as rotation = rotation_z(theta1) * rotation_x(theta2) *
     * rotation_z(theta3), with theta1 in [0, 2 * pi], theta2 in [0, pi] and
     * theta3 in [0, 2 * pi]. rotation_x(theta) means rotation around the X axis
     * of theta radians.
     * @param mat The matrix.
     * @param theta1 The angle of rotation around the Z axis in radians.
     * @param theta2 The angle of rotation around the X axis in radians.
     * @param theta3 The angle of rotation around the Z axis in radians.
     */
    function makeEulerZXZ(
        mat: Float64Array, theta1: number, theta2: number,
        theta3: number): Float64Array;
    /**
     * Makes the given 3x3 matrix the identity matrix.
     * @param mat The matrix.
     */
    function makeIdentity(mat: Float64Array): Float64Array;
    /**
     * Makes the given 3x3 matrix a rotation matrix with the given rotation
     * angle about the axis defined by the vector (ax, ay, az).
     * @param mat The matrix.
     * @param angle The rotation angle in radians.
     * @param ax The x component of the rotation axis.
     * @param ay The y component of the rotation axis.
     * @param az The z component of the rotation axis.
     */
    function makeRotate(
        mat: Float64Array, angle: number, ax: number, ay: number,
        az: number): Float64Array;
    /**
     * Makes the given 3x3 matrix a rotation matrix with the given rotation
     * angle about the X axis.
     * @param mat The matrix.
     * @param angle The rotation angle in radians.
     */
    function makeRotateX(mat: Float64Array, angle: number): Float64Array;
    /**
     * Makes the given 3x3 matrix a rotation matrix with the given rotation
     * angle about the Y axis.
     * @param mat The matrix.
     * @param angle The rotation angle in radians.
     */
    function makeRotateY(mat: Float64Array, angle: number): Float64Array;
    /**
     * Makes the given 3x3 matrix a rotation matrix with the given rotation
     * angle about the Z axis.
     * @param mat The matrix.
     * @param angle The rotation angle in radians.
     */
    function makeRotateZ(mat: Float64Array, angle: number): Float64Array;
    /**
     * Makes the given 3x3 matrix a scale matrix with x, y, and z scale factors.
     * @param mat The 3x3 (9-element) matrix array to receive the new scale
     * matrix.
     * @param x The scale along the x axis.
     * @param y The scale along the y axis.
     * @param z The scale along the z axis.
     */
    function makeScale(
        mat: Float64Array, x: number, y: number, z: number): Float64Array;
    /**
     * Makes the given 3x3 matrix a translation matrix with x and y
     * translation values.
     * @param mat The matrix.
     * @param x The translation along the x axis.
     * @param y The translation along the y axis.
     */
    function makeTranslate(
        mat: Float64Array, x: number, y: number): Float64Array;
    /**
     * Makes the given 3x3 matrix the zero matrix.
     * @param mat The matrix.
     */
    function makeZero(mat: Float64Array): Float64Array;
    /**
     * Multiplies the two matrices mat0 and mat1 using matrix multiplication,
     * storing the result into resultMat.
     * @param mat0 The first (left hand) matrix.
     * @param mat1 The second (right hand) matrix.
     * @param resultMat The matrix to receive the results (may be either mat0 or
     * mat1).
     */
    function multMat(
        mat0: Float64Array, mat1: Float64Array,
        resultMat: Float64Array): Float64Array;
    /**
     * Multiplies matrix mat0 with the given scalar, storing the result
     * into resultMat.
     * @param mat The matrix.
     * @param scalar The scalar value to multiple to each element of mat.
     * @param resultMat The matrix to receive the results (may be mat).
     */
    function multScalar(
        mat: Float64Array, scalar: number,
        resultMat: Float64Array): Float64Array;
    /**
     * Transforms the given vector with the given matrix storing the resulting,
     * transformed matrix into resultVec.
     * @param mat The matrix supplying the transformation.
     * @param vec The vector to transform.
     * @param resultVec The vector to receive the results (may be vec).
     */
    function multVec3(
        mat: Float64Array, vec: Float64Array,
        resultVec: Float64Array): Float64Array;
    /**
     * Rotate the given matrix by angle about the x,y,z axis.  Equivalent to:
     * goog.vec.mat3d.multMat(
     * mat,
     * goog.vec.mat3d.makeRotate(goog.vec.mat3d.create(), angle, x, y, z),
     * mat);
     * @param mat The matrix.
     * @param angle The angle in radians.
     * @param x The x component of the rotation axis.
     * @param y The y component of the rotation axis.
     * @param z The z component of the rotation axis.
     */
    function rotate(
        mat: Float64Array, angle: number, x: number, y: number,
        z: number): Float64Array;
    /**
     * Rotate the given matrix by angle about the x axis.  Equivalent to:
     * goog.vec.mat3d.multMat(
     * mat,
     * goog.vec.mat3d.makeRotateX(goog.vec.mat3d.create(), angle),
     * mat);
     * @param mat The matrix.
     * @param angle The angle in radians.
     */
    function rotateX(mat: Float64Array, angle: number): Float64Array;
    /**
     * Rotate the given matrix by angle about the y axis.  Equivalent to:
     * goog.vec.mat3d.multMat(
     * mat,
     * goog.vec.mat3d.makeRotateY(goog.vec.mat3d.create(), angle),
     * mat);
     * @param mat The matrix.
     * @param angle The angle in radians.
     */
    function rotateY(mat: Float64Array, angle: number): Float64Array;
    /**
     * Rotate the given matrix by angle about the z axis.  Equivalent to:
     * goog.vec.mat3d.multMat(
     * mat,
     * goog.vec.mat3d.makeRotateZ(goog.vec.mat3d.create(), angle),
     * mat);
     * @param mat The matrix.
     * @param angle The angle in radians.
     */
    function rotateZ(mat: Float64Array, angle: number): Float64Array;
    /**
     * Sets the specified column with the value from the supplied array.
     * @param mat The matrix to receive the values.
     * @param column The column index to set the values on.
     * @param vec The vector elements for the column.
     */
    function setColumn(
        mat: Float64Array, column: number, vec: Float64Array): Float64Array;
    /**
     * Sets the specified column with the supplied values.
     * @param mat The matrix to receive the values.
     * @param column The column index to set the values on.
     * @param v0 The value for row 0.
     * @param v1 The value for row 1.
     * @param v2 The value for row 2.
     */
    function setColumnValues(
        mat: Float64Array, column: number, v0: number, v1: number,
        v2: number): Float64Array;
    /**
     * Sets the columns of the matrix from the set of vector elements.
     * @param mat The matrix to receive the values.
     * @param vec0 The values for column 0.
     * @param vec1 The values for column 1.
     * @param vec2 The values for column 2.
     */
    function setColumns(
        mat: Float64Array, vec0: Float64Array, vec1: Float64Array,
        vec2: Float64Array): Float64Array;
    /**
     * Sets the diagonal values of the matrix from the given vector.
     * @param mat The matrix to receive the values.
     * @param vec The vector containing the values.
     */
    function setDiagonal(mat: Float64Array, vec: Float64Array): Float64Array;
    /**
     * Sets the diagonal values of the matrix from the given values.
     * @param mat The matrix to receive the values.
     * @param v00 The values for (0, 0).
     * @param v11 The values for (1, 1).
     * @param v22 The values for (2, 2).
     */
    function setDiagonalValues(
        mat: Float64Array, v00: number, v11: number, v22: number): Float64Array;
    /**
     * Sets the element at the requested row and column.
     * @param mat The matrix containing the value to retrieve.
     * @param row The row index.
     * @param column The column index.
     * @param value The value to set at the requested row, column.
     */
    function setElement(
        mat: Float64Array, row: number, column: number,
        value: number): Float64Array;
    /**
     * Initializes mat3d mat from Array src.
     * @param mat The destination matrix.
     * @param src The source matrix.
     */
    function setFromArray(
        mat: Float64Array, src: ಠ_ಠ.clutz.goog.vec.Number|null): Float64Array;
    /**
     * Initializes mat3d mat from mat3d src.
     * @param mat The destination matrix.
     * @param src The source matrix.
     */
    function setFromMat3d(mat: Float64Array, src: Float64Array): Float64Array;
    /**
     * Initializes mat3d mat from mat3f src (typed as a Float32Array to
     * avoid circular goog.requires).
     * @param mat The destination matrix.
     * @param src The source matrix.
     */
    function setFromMat3f(
        mat: Float64Array, src: Float32Array|null): Float64Array;
    /**
     * Initializes the matrix from the set of values. Note the values supplied
     * are in column major order.
     * @param mat The matrix to receive the values.
     * @param v00 The values at (0, 0).
     * @param v10 The values at (1, 0).
     * @param v20 The values at (2, 0).
     * @param v01 The values at (0, 1).
     * @param v11 The values at (1, 1).
     * @param v21 The values at (2, 1).
     * @param v02 The values at (0, 2).
     * @param v12 The values at (1, 2).
     * @param v22 The values at (2, 2).
     */
    function setFromValues(
        mat: Float64Array, v00: number, v10: number, v20: number, v01: number,
        v11: number, v21: number, v02: number, v12: number,
        v22: number): Float64Array;
    /**
     * Sets the row values from the supplied vector.
     * @param mat The matrix to receive the row values.
     * @param row The index of the row.
     * @param vec The vector containing the values.
     */
    function setRow(
        mat: Float64Array, row: number, vec: Float64Array): Float64Array;
    /**
     * Sets the row values from the supplied values.
     * @param mat The matrix to receive the values.
     * @param row The index of the row to receive the values.
     * @param v0 The value for column 0.
     * @param v1 The value for column 1.
     * @param v2 The value for column 2.
     */
    function setRowValues(
        mat: Float64Array, row: number, v0: number, v1: number,
        v2: number): Float64Array;
    /**
     * Sets the rows of the matrix from the supplied vectors.
     * @param mat The matrix to receive the values.
     * @param vec0 The values for row 0.
     * @param vec1 The values for row 1.
     * @param vec2 The values for row 2.
     */
    function setRows(
        mat: Float64Array, vec0: Float64Array, vec1: Float64Array,
        vec2: Float64Array): Float64Array;
    /**
     * Performs a per-component subtraction of the matrices mat0 and mat1,
     * storing the result into resultMat.
     * @param mat0 The minuend.
     * @param mat1 The subtrahend.
     * @param resultMat The matrix to receive the results (may be either mat0 or
     * mat1).
     */
    function subMat(
        mat0: Float64Array, mat1: Float64Array,
        resultMat: Float64Array): Float64Array;
    /**
     * Decomposes a rotation matrix into Euler angles using the ZXZ convention
     * so that rotation = rotation_z(theta1) * rotation_x(theta2) *
     * rotation_z(theta3), with theta1 in [0, 2 * pi], theta2 in [0, pi] and
     * theta3 in [0, 2 * pi]. rotation_x(theta) means rotation around the X axis
     * of theta radians.
     * @param mat The matrix.
     * @param euler The ZXZ Euler angles in radians as [theta1, theta2, theta3].
     * @param opt_theta2IsNegative Whether theta2 is in [-pi, 0] instead of the
     * default [0, pi].
     */
    function toEulerZXZ(
        mat: Float64Array, euler: Float64Array,
        opt_theta2IsNegative?: boolean): Float64Array;
    /**
     * Transposes the given matrix mat storing the result into resultMat.
     * @param mat The matrix to transpose.
     * @param resultMat The matrix to receive the results (may be mat).
     */
    function transpose(
        mat: Float64Array, resultMat: Float64Array): Float64Array;
}
declare module 'goog:goog.vec.mat3d' {
    import alias = ಠ_ಠ.clutz.goog.vec.mat3d;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.vec.mat3d {
    type Type = Float64Array;
}
declare module 'goog:goog.vec.mat3d.Type' {
    import alias = ಠ_ಠ.clutz.goog.vec.mat3d.Type;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.vec.mat3f {
    /**
     * Performs a per-component addition of the matrices mat0 and mat1, storing
     * the result into resultMat.
     * @param mat0 The first addend.
     * @param mat1 The second addend.
     * @param resultMat The matrix to receive the results (may be either mat0 or
     * mat1).
     */
    function addMat(
        mat0: Float32Array, mat1: Float32Array,
        resultMat: Float32Array): Float32Array;
    /**
     * Creates a mat3f with all elements initialized to zero.
     */
    function create(): Float32Array;
    /**
     * Creates a mat3f identity matrix.
     */
    function createIdentity(): Float32Array;
    /**
     * Returns true if the components of mat0 are equal to the components of
     * mat1.
     * @param mat0 The first matrix.
     * @param mat1 The second matrix.
     */
    function equals(mat0: Float32Array, mat1: Float32Array): boolean;
    /**
     * Retrieves the specified column from the matrix into the given vector
     * array.
     * @param mat The matrix supplying the values.
     * @param column The column to get the values from.
     * @param vec The vector elements to receive the column.
     */
    function getColumn(
        mat: Float32Array, column: number, vec: Float32Array): Float32Array;
    /**
     * Retrieves the column values from the given matrix into the given vector
     * elements.
     * @param mat The matrix supplying the columns.
     * @param vec0 The vector to receive column 0.
     * @param vec1 The vector to receive column 1.
     * @param vec2 The vector to receive column 2.
     */
    function getColumns(
        mat: Float32Array, vec0: Float32Array, vec1: Float32Array,
        vec2: Float32Array): void;
    /**
     * Retrieves the element at the requested row and column.
     * @param mat The matrix containing the value to retrieve.
     * @param row The row index.
     * @param column The column index.
     */
    function getElement(mat: Float32Array, row: number, column: number): number;
    /**
     * Retrieves the row values into the given vector.
     * @param mat The matrix supplying the values.
     * @param row The index of the row supplying the values.
     * @param vec The vector to receive the row.
     */
    function getRow(
        mat: Float32Array, row: number, vec: Float32Array): Float32Array;
    /**
     * Retrieves the rows of the matrix into the supplied vectors.
     * @param mat The matrix to supplying the values.
     * @param vec0 The vector to receive row 0.
     * @param vec1 The vector to receive row 1.
     * @param vec2 The vector to receive row 2.
     */
    function getRows(
        mat: Float32Array, vec0: Float32Array, vec1: Float32Array,
        vec2: Float32Array): void;
    /**
     * Computes the inverse of mat0 storing the result into resultMat. If the
     * inverse is defined, this function returns true, false otherwise.
     * @param mat0 The matrix to invert.
     * @param resultMat The matrix to receive the result (may be mat0).
     */
    function invert(mat0: Float32Array, resultMat: Float32Array): boolean;
    /**
     * Makes the given 3x3 matrix a rotation matrix given Euler angles using
     * the ZXZ convention.
     * Given the euler angles [theta1, theta2, theta3], the rotation is defined
     * as rotation = rotation_z(theta1) * rotation_x(theta2) *
     * rotation_z(theta3), with theta1 in [0, 2 * pi], theta2 in [0, pi] and
     * theta3 in [0, 2 * pi]. rotation_x(theta) means rotation around the X axis
     * of theta radians.
     * @param mat The matrix.
     * @param theta1 The angle of rotation around the Z axis in radians.
     * @param theta2 The angle of rotation around the X axis in radians.
     * @param theta3 The angle of rotation around the Z axis in radians.
     */
    function makeEulerZXZ(
        mat: Float32Array, theta1: number, theta2: number,
        theta3: number): Float32Array;
    /**
     * Makes the given 3x3 matrix the identity matrix.
     * @param mat The matrix.
     */
    function makeIdentity(mat: Float32Array): Float32Array;
    /**
     * Makes the given 3x3 matrix a rotation matrix with the given rotation
     * angle about the axis defined by the vector (ax, ay, az).
     * @param mat The matrix.
     * @param angle The rotation angle in radians.
     * @param ax The x component of the rotation axis.
     * @param ay The y component of the rotation axis.
     * @param az The z component of the rotation axis.
     */
    function makeRotate(
        mat: Float32Array, angle: number, ax: number, ay: number,
        az: number): Float32Array;
    /**
     * Makes the given 3x3 matrix a rotation matrix with the given rotation
     * angle about the X axis.
     * @param mat The matrix.
     * @param angle The rotation angle in radians.
     */
    function makeRotateX(mat: Float32Array, angle: number): Float32Array;
    /**
     * Makes the given 3x3 matrix a rotation matrix with the given rotation
     * angle about the Y axis.
     * @param mat The matrix.
     * @param angle The rotation angle in radians.
     */
    function makeRotateY(mat: Float32Array, angle: number): Float32Array;
    /**
     * Makes the given 3x3 matrix a rotation matrix with the given rotation
     * angle about the Z axis.
     * @param mat The matrix.
     * @param angle The rotation angle in radians.
     */
    function makeRotateZ(mat: Float32Array, angle: number): Float32Array;
    /**
     * Makes the given 3x3 matrix a scale matrix with x, y, and z scale factors.
     * @param mat The 3x3 (9-element) matrix array to receive the new scale
     * matrix.
     * @param x The scale along the x axis.
     * @param y The scale along the y axis.
     * @param z The scale along the z axis.
     */
    function makeScale(
        mat: Float32Array, x: number, y: number, z: number): Float32Array;
    /**
     * Makes the given 3x3 matrix a translation matrix with x and y
     * translation values.
     * @param mat The matrix.
     * @param x The translation along the x axis.
     * @param y The translation along the y axis.
     */
    function makeTranslate(
        mat: Float32Array, x: number, y: number): Float32Array;
    /**
     * Makes the given 3x3 matrix the zero matrix.
     * @param mat The matrix.
     */
    function makeZero(mat: Float32Array): Float32Array;
    /**
     * Multiplies the two matrices mat0 and mat1 using matrix multiplication,
     * storing the result into resultMat.
     * @param mat0 The first (left hand) matrix.
     * @param mat1 The second (right hand) matrix.
     * @param resultMat The matrix to receive the results (may be either mat0 or
     * mat1).
     */
    function multMat(
        mat0: Float32Array, mat1: Float32Array,
        resultMat: Float32Array): Float32Array;
    /**
     * Multiplies matrix mat0 with the given scalar, storing the result
     * into resultMat.
     * @param mat The matrix.
     * @param scalar The scalar value to multiple to each element of mat.
     * @param resultMat The matrix to receive the results (may be mat).
     */
    function multScalar(
        mat: Float32Array, scalar: number,
        resultMat: Float32Array): Float32Array;
    /**
     * Transforms the given vector with the given matrix storing the resulting,
     * transformed matrix into resultVec.
     * @param mat The matrix supplying the transformation.
     * @param vec The vector to transform.
     * @param resultVec The vector to receive the results (may be vec).
     */
    function multVec3(
        mat: Float32Array, vec: Float32Array,
        resultVec: Float32Array): Float32Array;
    /**
     * Rotate the given matrix by angle about the x,y,z axis.  Equivalent to:
     * goog.vec.mat3f.multMat(
     * mat,
     * goog.vec.mat3f.makeRotate(goog.vec.mat3f.create(), angle, x, y, z),
     * mat);
     * @param mat The matrix.
     * @param angle The angle in radians.
     * @param x The x component of the rotation axis.
     * @param y The y component of the rotation axis.
     * @param z The z component of the rotation axis.
     */
    function rotate(
        mat: Float32Array, angle: number, x: number, y: number,
        z: number): Float32Array;
    /**
     * Rotate the given matrix by angle about the x axis.  Equivalent to:
     * goog.vec.mat3f.multMat(
     * mat,
     * goog.vec.mat3f.makeRotateX(goog.vec.mat3f.create(), angle),
     * mat);
     * @param mat The matrix.
     * @param angle The angle in radians.
     */
    function rotateX(mat: Float32Array, angle: number): Float32Array;
    /**
     * Rotate the given matrix by angle about the y axis.  Equivalent to:
     * goog.vec.mat3f.multMat(
     * mat,
     * goog.vec.mat3f.makeRotateY(goog.vec.mat3f.create(), angle),
     * mat);
     * @param mat The matrix.
     * @param angle The angle in radians.
     */
    function rotateY(mat: Float32Array, angle: number): Float32Array;
    /**
     * Rotate the given matrix by angle about the z axis.  Equivalent to:
     * goog.vec.mat3f.multMat(
     * mat,
     * goog.vec.mat3f.makeRotateZ(goog.vec.mat3f.create(), angle),
     * mat);
     * @param mat The matrix.
     * @param angle The angle in radians.
     */
    function rotateZ(mat: Float32Array, angle: number): Float32Array;
    /**
     * Sets the specified column with the value from the supplied array.
     * @param mat The matrix to receive the values.
     * @param column The column index to set the values on.
     * @param vec The vector elements for the column.
     */
    function setColumn(
        mat: Float32Array, column: number, vec: Float32Array): Float32Array;
    /**
     * Sets the specified column with the supplied values.
     * @param mat The matrix to receive the values.
     * @param column The column index to set the values on.
     * @param v0 The value for row 0.
     * @param v1 The value for row 1.
     * @param v2 The value for row 2.
     */
    function setColumnValues(
        mat: Float32Array, column: number, v0: number, v1: number,
        v2: number): Float32Array;
    /**
     * Sets the columns of the matrix from the set of vector elements.
     * @param mat The matrix to receive the values.
     * @param vec0 The values for column 0.
     * @param vec1 The values for column 1.
     * @param vec2 The values for column 2.
     */
    function setColumns(
        mat: Float32Array, vec0: Float32Array, vec1: Float32Array,
        vec2: Float32Array): Float32Array;
    /**
     * Sets the diagonal values of the matrix from the given vector.
     * @param mat The matrix to receive the values.
     * @param vec The vector containing the values.
     */
    function setDiagonal(mat: Float32Array, vec: Float32Array): Float32Array;
    /**
     * Sets the diagonal values of the matrix from the given values.
     * @param mat The matrix to receive the values.
     * @param v00 The values for (0, 0).
     * @param v11 The values for (1, 1).
     * @param v22 The values for (2, 2).
     */
    function setDiagonalValues(
        mat: Float32Array, v00: number, v11: number, v22: number): Float32Array;
    /**
     * Sets the element at the requested row and column.
     * @param mat The matrix containing the value to retrieve.
     * @param row The row index.
     * @param column The column index.
     * @param value The value to set at the requested row, column.
     */
    function setElement(
        mat: Float32Array, row: number, column: number,
        value: number): Float32Array;
    /**
     * Initializes mat3f mat from Array src.
     * @param mat The destination matrix.
     * @param src The source matrix.
     */
    function setFromArray(
        mat: Float32Array, src: ಠ_ಠ.clutz.goog.vec.Number|null): Float32Array;
    /**
     * Initializes mat3f mat from mat3d src (typed as a Float64Array to
     * avoid circular goog.requires).
     * @param mat The destination matrix.
     * @param src The source matrix.
     */
    function setFromMat3d(
        mat: Float32Array, src: Float64Array|null): Float32Array;
    /**
     * Initializes mat3f mat from mat3f src.
     * @param mat The destination matrix.
     * @param src The source matrix.
     */
    function setFromMat3f(mat: Float32Array, src: Float32Array): Float32Array;
    /**
     * Initializes the matrix from the set of values. Note the values supplied
     * are in column major order.
     * @param mat The matrix to receive the values.
     * @param v00 The values at (0, 0).
     * @param v10 The values at (1, 0).
     * @param v20 The values at (2, 0).
     * @param v01 The values at (0, 1).
     * @param v11 The values at (1, 1).
     * @param v21 The values at (2, 1).
     * @param v02 The values at (0, 2).
     * @param v12 The values at (1, 2).
     * @param v22 The values at (2, 2).
     */
    function setFromValues(
        mat: Float32Array, v00: number, v10: number, v20: number, v01: number,
        v11: number, v21: number, v02: number, v12: number,
        v22: number): Float32Array;
    /**
     * Sets the row values from the supplied vector.
     * @param mat The matrix to receive the row values.
     * @param row The index of the row.
     * @param vec The vector containing the values.
     */
    function setRow(
        mat: Float32Array, row: number, vec: Float32Array): Float32Array;
    /**
     * Sets the row values from the supplied values.
     * @param mat The matrix to receive the values.
     * @param row The index of the row to receive the values.
     * @param v0 The value for column 0.
     * @param v1 The value for column 1.
     * @param v2 The value for column 2.
     */
    function setRowValues(
        mat: Float32Array, row: number, v0: number, v1: number,
        v2: number): Float32Array;
    /**
     * Sets the rows of the matrix from the supplied vectors.
     * @param mat The matrix to receive the values.
     * @param vec0 The values for row 0.
     * @param vec1 The values for row 1.
     * @param vec2 The values for row 2.
     */
    function setRows(
        mat: Float32Array, vec0: Float32Array, vec1: Float32Array,
        vec2: Float32Array): Float32Array;
    /**
     * Performs a per-component subtraction of the matrices mat0 and mat1,
     * storing the result into resultMat.
     * @param mat0 The minuend.
     * @param mat1 The subtrahend.
     * @param resultMat The matrix to receive the results (may be either mat0 or
     * mat1).
     */
    function subMat(
        mat0: Float32Array, mat1: Float32Array,
        resultMat: Float32Array): Float32Array;
    /**
     * Decomposes a rotation matrix into Euler angles using the ZXZ convention
     * so that rotation = rotation_z(theta1) * rotation_x(theta2) *
     * rotation_z(theta3), with theta1 in [0, 2 * pi], theta2 in [0, pi] and
     * theta3 in [0, 2 * pi]. rotation_x(theta) means rotation around the X axis
     * of theta radians.
     * @param mat The matrix.
     * @param euler The ZXZ Euler angles in radians as [theta1, theta2, theta3].
     * @param opt_theta2IsNegative Whether theta2 is in [-pi, 0] instead of the
     * default [0, pi].
     */
    function toEulerZXZ(
        mat: Float32Array, euler: Float32Array,
        opt_theta2IsNegative?: boolean): Float32Array;
    /**
     * Transposes the given matrix mat storing the result into resultMat.
     * @param mat The matrix to transpose.
     * @param resultMat The matrix to receive the results (may be mat).
     */
    function transpose(
        mat: Float32Array, resultMat: Float32Array): Float32Array;
}
declare module 'goog:goog.vec.mat3f' {
    import alias = ಠ_ಠ.clutz.goog.vec.mat3f;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.vec.mat3f {
    type Type = Float32Array;
}
declare module 'goog:goog.vec.mat3f.Type' {
    import alias = ಠ_ಠ.clutz.goog.vec.mat3f.Type;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.vec.mat4d {
    /**
     * Performs a per-component addition of the matrix mat0 and mat1, storing
     * the result into resultMat.
     * @param mat0 The first addend.
     * @param mat1 The second addend.
     * @param resultMat The matrix to receive the results (may be either mat0 or
     * mat1).
     */
    function addMat(
        mat0: Float64Array, mat1: Float64Array,
        resultMat: Float64Array): Float64Array;
    /**
     * Creates a mat4d with all elements initialized to zero.
     */
    function create(): Float64Array;
    /**
     * Creates a mat4d identity matrix.
     */
    function createIdentity(): Float64Array;
    /**
     * Computes the determinant of the matrix.
     * @param mat The matrix to compute the matrix for.
     */
    function determinant(mat: Float64Array): number;
    /**
     * Returns true if the components of mat0 are equal to the components of
     * mat1.
     * @param mat0 The first matrix.
     * @param mat1 The second matrix.
     */
    function equals(mat0: Float64Array, mat1: Float64Array): boolean;
    /**
     * Retrieves the specified column from the matrix into the given vector.
     * @param mat The matrix supplying the values.
     * @param column The column to get the values from.
     * @param vec The vector of elements to receive the column.
     */
    function getColumn(
        mat: Float64Array, column: number, vec: Float64Array): Float64Array;
    /**
     * Retrieves the column values from the given matrix into the given vectors.
     * @param mat The matrix supplying the columns.
     * @param vec0 The vector to receive column 0.
     * @param vec1 The vector to receive column 1.
     * @param vec2 The vector to receive column 2.
     * @param vec3 The vector to receive column 3.
     */
    function getColumns(
        mat: Float64Array, vec0: Float64Array, vec1: Float64Array,
        vec2: Float64Array, vec3: Float64Array): void;
    /**
     * Gets the diagonal values of the matrix into the given vector.
     * @param mat The matrix containing the values.
     * @param vec The vector to receive the values.
     * @param opt_diagonal Which diagonal to get. A value of 0 selects the main
     * diagonal, a positive number selects a super diagonal and a negative
     * number selects a sub diagonal.
     */
    function getDiagonal(
        mat: Float64Array, vec: Float64Array,
        opt_diagonal?: number): Float64Array;
    /**
     * Retrieves the element at the requested row and column.
     * @param mat The matrix containing the value to retrieve.
     * @param row The row index.
     * @param column The column index.
     */
    function getElement(mat: Float64Array, row: number, column: number): number;
    /**
     * Retrieves the row values into the given vector.
     * @param mat The matrix supplying the values.
     * @param row The index of the row supplying the values.
     * @param vec The vector to receive the row.
     */
    function getRow(
        mat: Float64Array, row: number, vec: Float64Array): Float64Array;
    /**
     * Retrieves the rows of the matrix into the supplied vectors.
     * @param mat The matrix to supply the values.
     * @param vec0 The vector to receive row 0.
     * @param vec1 The vector to receive row 1.
     * @param vec2 The vector to receive row 2.
     * @param vec3 The vector to receive row 3.
     */
    function getRows(
        mat: Float64Array, vec0: Float64Array, vec1: Float64Array,
        vec2: Float64Array, vec3: Float64Array): void;
    /**
     * Retrieves the translation component of the transformation matrix.
     * @param mat The transformation matrix.
     * @param translation The vector for storing the result.
     */
    function getTranslation(
        mat: Float64Array, translation: Float64Array): Float64Array;
    /**
     * Computes the inverse of mat storing the result into resultMat. If the
     * inverse is defined, this function returns true, false otherwise.
     * @param mat The matrix to invert.
     * @param resultMat The matrix to receive the result (may be mat).
     */
    function invert(mat: Float64Array, resultMat: Float64Array): boolean;
    /**
     * Makes the given 4x4 matrix a rotation matrix given Euler angles using
     * the ZXZ convention.
     * Given the euler angles [theta1, theta2, theta3], the rotation is defined
     * as rotation = rotation_z(theta1) * rotation_x(theta2) *
     * rotation_z(theta3), with theta1 in [0, 2 * pi], theta2 in [0, pi] and
     * theta3 in [0, 2 * pi]. rotation_x(theta) means rotation around the X axis
     * of theta radians,
     * @param mat The matrix.
     * @param theta1 The angle of rotation around the Z axis in radians.
     * @param theta2 The angle of rotation around the X axis in radians.
     * @param theta3 The angle of rotation around the Z axis in radians.
     */
    function makeEulerZXZ(
        mat: Float64Array, theta1: number, theta2: number,
        theta3: number): Float64Array;
    /**
     * Makes the given 4x4 matrix a perspective projection matrix.
     * @param mat The matrix.
     * @param left The coordinate of the left clipping plane.
     * @param right The coordinate of the right clipping plane.
     * @param bottom The coordinate of the bottom clipping plane.
     * @param top The coordinate of the top clipping plane.
     * @param near The distance to the near clipping plane.
     * @param far The distance to the far clipping plane.
     */
    function makeFrustum(
        mat: Float64Array, left: number, right: number, bottom: number,
        top: number, near: number, far: number): Float64Array;
    /**
     * Makes the given 4x4 matrix the identity matrix.
     * @param mat The matrix.
     */
    function makeIdentity(mat: Float64Array): Float64Array;
    /**
     * Makes the given 4x4 matrix a modelview matrix of a camera so that
     * the camera is 'looking at' the given center point.
     *
     * Note that unlike most other goog.vec functions where we inline
     * everything, this function does not inline various goog.vec
     * functions.  This makes the code more readable, but somewhat
     * less efficient.
     * @param mat The matrix.
     * @param eyePt The position of the eye point (camera origin).
     * @param centerPt The point to aim the camera at.
     * @param worldUpVec The vector that identifies the up direction for the
     * camera.
     */
    function makeLookAt(
        mat: Float64Array, eyePt: Float64Array, centerPt: Float64Array,
        worldUpVec: Float64Array): Float64Array;
    /**
     * Makes the given 4x4 matrix an orthographic projection matrix.
     * @param mat The matrix.
     * @param left The coordinate of the left clipping plane.
     * @param right The coordinate of the right clipping plane.
     * @param bottom The coordinate of the bottom clipping plane.
     * @param top The coordinate of the top clipping plane.
     * @param near The distance to the near clipping plane.
     * @param far The distance to the far clipping plane.
     */
    function makeOrtho(
        mat: Float64Array, left: number, right: number, bottom: number,
        top: number, near: number, far: number): Float64Array;
    /**
     * Makes the given 4x4 matrix  perspective projection matrix given a
     * field of view and aspect ratio.
     * @param mat The matrix.
     * @param fovy The field of view along the y (vertical) axis in radians.
     * @param aspect The x (width) to y (height) aspect ratio.
     * @param near The distance to the near clipping plane.
     * @param far The distance to the far clipping plane.
     */
    function makePerspective(
        mat: Float64Array, fovy: number, aspect: number, near: number,
        far: number): Float64Array;
    /**
     * Makes the given 4x4 matrix a rotation matrix with the given rotation
     * angle about the axis defined by the vector (ax, ay, az).
     * @param mat The matrix.
     * @param angle The rotation angle in radians.
     * @param ax The x component of the rotation axis.
     * @param ay The y component of the rotation axis.
     * @param az The z component of the rotation axis.
     */
    function makeRotate(
        mat: Float64Array, angle: number, ax: number, ay: number,
        az: number): Float64Array;
    /**
     * Makes the given 4x4 matrix a rotation matrix with the given rotation
     * angle about the X axis.
     * @param mat The matrix.
     * @param angle The rotation angle in radians.
     */
    function makeRotateX(mat: Float64Array, angle: number): Float64Array;
    /**
     * Makes the given 4x4 matrix a rotation matrix with the given rotation
     * angle about the Y axis.
     * @param mat The matrix.
     * @param angle The rotation angle in radians.
     */
    function makeRotateY(mat: Float64Array, angle: number): Float64Array;
    /**
     * Makes the given 4x4 matrix a rotation matrix with the given rotation
     * angle about the Z axis.
     * @param mat The matrix.
     * @param angle The rotation angle in radians.
     */
    function makeRotateZ(mat: Float64Array, angle: number): Float64Array;
    /**
     * Creates a matrix from a quaternion rotation and vector translation.
     *
     * This is a specialization of makeRotationTranslationScaleOrigin.
     *
     * This is equivalent to, but faster than:
     * goog.vec.mat4d.makeIdentity(m);
     * goog.vec.mat4d.translate(m, tx, ty, tz);
     * goog.vec.mat4d.rotate(m, theta, rx, ry, rz);
     * and:
     * goog.vec.Quaternion.toRotationMatrix4(rotation, mat);
     * mat[12] = translation[0];
     * mat[13] = translation[1];
     * mat[14] = translation[2];
     * See http://jsperf.com/goog-vec-makerotationtranslation2 .
     * @param mat The matrix.
     * @param rotation The quaternion rotation. Note: this quaternion is assumed
     * to already be normalized.
     * @param translation The vector translation.
     */
    function makeRotationTranslation(
        mat: Float64Array,
        rotation: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        translation: Float64Array): Float64Array;
    /**
     * Creates a matrix from a quaternion rotation, vector translation, and
     * vector scale.
     *
     * This is a specialization of makeRotationTranslationScaleOrigin.
     *
     * This is equivalent to, but faster than:
     * goog.vec.mat4d.makeIdentity(m);
     * goog.vec.mat4d.translate(m, tx, ty, tz);
     * goog.vec.mat4d.rotate(m, theta, rx, ry, rz);
     * goog.vec.mat4d.scale(m, sx, sy, sz);
     * @param mat The matrix.
     * @param rotation The quaternion rotation. Note: this quaternion is assumed
     * to already be normalized.
     * @param translation The vector translation.
     * @param scale The vector scale.
     */
    function makeRotationTranslationScale(
        mat: Float64Array,
        rotation: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        translation: Float64Array, scale: Float64Array): Float64Array;
    /**
     * Creates a matrix from a quaternion rotation, vector translation, and
     * vector scale, rotating and scaling about the given origin.
     *
     * This is equivalent to, but faster than:
     * goog.vec.mat4d.makeIdentity(m);
     * goog.vec.mat4d.translate(m, tx, ty, tz);
     * goog.vec.mat4d.translate(m, ox, oy, oz);
     * goog.vec.mat4d.rotate(m, theta, rx, ry, rz);
     * goog.vec.mat4d.scale(m, sx, sy, sz);
     * goog.vec.mat4d.translate(m, -ox, -oy, -oz);
     * See http://jsperf.com/glmatrix-matrix-variant-test/3 for performance
     * results of a similar function in the glmatrix library.
     * @param mat The matrix.
     * @param rotation The quaternion rotation. Note: this quaternion is assumed
     * to already be normalized.
     * @param translation The vector translation.
     * @param scale The vector scale.
     * @param origin The origin about which to scale and rotate.
     */
    function makeRotationTranslationScaleOrigin(
        mat: Float64Array,
        rotation: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        translation: Float64Array, scale: Float64Array,
        origin: Float64Array): Float64Array;
    /**
     * Makes the given 4x4 matrix as a scale matrix with x, y and z scale
     * factors.
     * @param mat The matrix.
     * @param x The scale along the x axis.
     * @param y The scale along the y axis.
     * @param z The scale along the z axis.
     */
    function makeScale(
        mat: Float64Array, x: number, y: number, z: number): Float64Array;
    /**
     * Makes the given 4x4 matrix a translation matrix with x, y and z
     * translation factors.
     * @param mat The matrix.
     * @param x The translation along the x axis.
     * @param y The translation along the y axis.
     * @param z The translation along the z axis.
     */
    function makeTranslate(
        mat: Float64Array, x: number, y: number, z: number): Float64Array;
    /**
     * Makes the given 4x4 matrix the zero matrix.
     * @param mat The matrix.
     */
    function makeZero(mat: Float64Array): Float64Array;
    /**
     * Multiplies the two matrices mat0 and mat1 using matrix multiplication,
     * storing the result into resultMat.
     * @param mat0 The first (left hand) matrix.
     * @param mat1 The second (right hand) matrix.
     * @param resultMat The matrix to receive the results (may be either mat0 or
     * mat1).
     */
    function multMat(
        mat0: Float64Array, mat1: Float64Array,
        resultMat: Float64Array): Float64Array;
    /**
     * Multiplies matrix mat with the given scalar, storing the result
     * into resultMat.
     * @param mat The matrix.
     * @param scalar The scalar value to multiply to each element of mat.
     * @param resultMat The matrix to receive the results (may be mat).
     */
    function multScalar(
        mat: Float64Array, scalar: number,
        resultMat: Float64Array): Float64Array;
    /**
     * Transforms the given vector with the given matrix storing the resulting,
     * transformed vector into resultVec. The input vector is multiplied against
     * the upper 3x4 matrix omitting the projective component.
     * @param mat The matrix supplying the transformation.
     * @param vec The 3 element vector to transform.
     * @param resultVec The 3 element vector to receive the results (may be
     * vec).
     */
    function multVec3(
        mat: Float64Array, vec: Float64Array,
        resultVec: Float64Array): Float64Array;
    /**
     * Transforms the given vector with the given matrix storing the resulting,
     * transformed vector into resultVec. The input vector is multiplied against
     * the upper 3x3 matrix omitting the projective component and translation
     * components.
     * @param mat The matrix supplying the transformation.
     * @param vec The 3 element vector to transform.
     * @param resultVec The 3 element vector to receive the results (may be
     * vec).
     */
    function multVec3NoTranslate(
        mat: Float64Array, vec: Float64Array,
        resultVec: Float64Array): Float64Array;
    /**
     * Transforms the given vector with the given matrix storing the resulting,
     * transformed vector into resultVec. The input vector is multiplied against
     * the full 4x4 matrix with the homogeneous divide applied to reduce the 4
     * element vector to a 3 element vector.
     * @param mat The matrix supplying the transformation.
     * @param vec The 3 element vector to transform.
     * @param resultVec The 3 element vector to receive the results (may be
     * vec).
     */
    function multVec3Projective(
        mat: Float64Array, vec: Float64Array,
        resultVec: Float64Array): Float64Array;
    /**
     * Transforms the given vector with the given matrix storing the resulting,
     * transformed vector into resultVec.
     * @param mat The matrix supplying the transformation.
     * @param vec The vector to transform.
     * @param resultVec The vector to receive the results (may be vec).
     */
    function multVec4(
        mat: Float64Array, vec: Float64Array,
        resultVec: Float64Array): Float64Array;
    /**
     * Rotate the given matrix by angle about the x,y,z axis.  Equivalent to:
     * goog.vec.mat4d.multMat(
     * mat,
     * goog.vec.mat4d.makeRotate(goog.vec.mat4d.create(), angle, x, y, z),
     * mat);
     * @param mat The matrix.
     * @param angle The angle in radians.
     * @param x The x component of the rotation axis.
     * @param y The y component of the rotation axis.
     * @param z The z component of the rotation axis.
     */
    function rotate(
        mat: Float64Array, angle: number, x: number, y: number,
        z: number): Float64Array;
    /**
     * Rotate the given matrix by angle about the x axis.  Equivalent to:
     * goog.vec.mat4d.multMat(
     * mat,
     * goog.vec.mat4d.makeRotateX(goog.vec.mat4d.create(), angle),
     * mat);
     * @param mat The matrix.
     * @param angle The angle in radians.
     */
    function rotateX(mat: Float64Array, angle: number): Float64Array;
    /**
     * Rotate the given matrix by angle about the y axis.  Equivalent to:
     * goog.vec.mat4d.multMat(
     * mat,
     * goog.vec.mat4d.makeRotateY(goog.vec.mat4d.create(), angle),
     * mat);
     * @param mat The matrix.
     * @param angle The angle in radians.
     */
    function rotateY(mat: Float64Array, angle: number): Float64Array;
    /**
     * Rotate the given matrix by angle about the z axis.  Equivalent to:
     * goog.vec.mat4d.multMat(
     * mat,
     * goog.vec.mat4d.makeRotateZ(goog.vec.mat4d.create(), angle),
     * mat);
     * @param mat The matrix.
     * @param angle The angle in radians.
     */
    function rotateZ(mat: Float64Array, angle: number): Float64Array;
    /**
     * Scales the given matrix by x,y,z.  Equivalent to:
     * goog.vec.mat4d.multMat(
     * mat,
     * goog.vec.mat4d.makeScale(goog.vec.mat4d.create(), x, y, z),
     * mat);
     * @param mat The matrix.
     * @param x The x scale factor.
     * @param y The y scale factor.
     * @param z The z scale factor.
     */
    function scale(
        mat: Float64Array, x: number, y: number, z: number): Float64Array;
    /**
     * Sets the specified column with the value from the supplied vector.
     * @param mat The matrix to receive the values.
     * @param column The column index to set the values on.
     * @param vec The vector of elements for the column.
     */
    function setColumn(
        mat: Float64Array, column: number, vec: Float64Array): Float64Array;
    /**
     * Sets the specified column with the supplied values.
     * @param mat The matrix to receive the values.
     * @param column The column index to set the values on.
     * @param v0 The value for row 0.
     * @param v1 The value for row 1.
     * @param v2 The value for row 2.
     * @param v3 The value for row 3.
     */
    function setColumnValues(
        mat: Float64Array, column: number, v0: number, v1: number, v2: number,
        v3: number): Float64Array;
    /**
     * Sets the columns of the matrix from the given vectors.
     * @param mat The matrix to receive the values.
     * @param vec0 The values for column 0.
     * @param vec1 The values for column 1.
     * @param vec2 The values for column 2.
     * @param vec3 The values for column 3.
     */
    function setColumns(
        mat: Float64Array, vec0: Float64Array, vec1: Float64Array,
        vec2: Float64Array, vec3: Float64Array): Float64Array;
    /**
     * Sets the diagonal values of the matrix from the given vector.
     * @param mat The matrix to receive the values.
     * @param vec The vector containing the values.
     */
    function setDiagonal(mat: Float64Array, vec: Float64Array): Float64Array;
    /**
     * Sets the diagonal values of the matrix from the given values.
     * @param mat The matrix to receive the values.
     * @param v00 The values for (0, 0).
     * @param v11 The values for (1, 1).
     * @param v22 The values for (2, 2).
     * @param v33 The values for (3, 3).
     */
    function setDiagonalValues(
        mat: Float64Array, v00: number, v11: number, v22: number,
        v33: number): Float64Array;
    /**
     * Sets the element at the requested row and column.
     * @param mat The matrix containing the value to retrieve.
     * @param row The row index.
     * @param column The column index.
     * @param value The value to set at the requested row, column.
     */
    function setElement(
        mat: Float64Array, row: number, column: number,
        value: number): Float64Array;
    /**
     * Initializes mat4d mat from Array src.
     * @param mat The destination matrix.
     * @param src The source matrix.
     */
    function setFromArray(
        mat: Float64Array, src: ಠ_ಠ.clutz.goog.vec.Number|null): Float64Array;
    /**
     * Initializes mat4d mat from mat4d src.
     * @param mat The destination matrix.
     * @param src The source matrix.
     */
    function setFromMat4d(mat: Float64Array, src: Float64Array): Float64Array;
    /**
     * Initializes mat4d mat from mat4f src (typed as a Float32Array to
     * avoid circular goog.requires).
     * @param mat The destination matrix.
     * @param src The source matrix.
     */
    function setFromMat4f(
        mat: Float64Array, src: Float32Array|null): Float64Array;
    /**
     * Initializes the matrix from the set of values. Note the values supplied
     * are in column major order.
     * @param mat The matrix to receive the values.
     * @param v00 The values at (0, 0).
     * @param v10 The values at (1, 0).
     * @param v20 The values at (2, 0).
     * @param v30 The values at (3, 0).
     * @param v01 The values at (0, 1).
     * @param v11 The values at (1, 1).
     * @param v21 The values at (2, 1).
     * @param v31 The values at (3, 1).
     * @param v02 The values at (0, 2).
     * @param v12 The values at (1, 2).
     * @param v22 The values at (2, 2).
     * @param v32 The values at (3, 2).
     * @param v03 The values at (0, 3).
     * @param v13 The values at (1, 3).
     * @param v23 The values at (2, 3).
     * @param v33 The values at (3, 3).
     */
    function setFromValues(
        mat: Float64Array, v00: number, v10: number, v20: number, v30: number,
        v01: number, v11: number, v21: number, v31: number, v02: number,
        v12: number, v22: number, v32: number, v03: number, v13: number,
        v23: number, v33: number): Float64Array;
    /**
     * Sets the row values from the supplied vector.
     * @param mat The matrix to receive the row values.
     * @param row The index of the row.
     * @param vec The vector containing the values.
     */
    function setRow(
        mat: Float64Array, row: number, vec: Float64Array): Float64Array;
    /**
     * Sets the row values from the supplied values.
     * @param mat The matrix to receive the values.
     * @param row The index of the row to receive the values.
     * @param v0 The value for column 0.
     * @param v1 The value for column 1.
     * @param v2 The value for column 2.
     * @param v3 The value for column 3.
     */
    function setRowValues(
        mat: Float64Array, row: number, v0: number, v1: number, v2: number,
        v3: number): Float64Array;
    /**
     * Sets the rows of the matrix from the supplied vectors.
     * @param mat The matrix to receive the values.
     * @param vec0 The values for row 0.
     * @param vec1 The values for row 1.
     * @param vec2 The values for row 2.
     * @param vec3 The values for row 3.
     */
    function setRows(
        mat: Float64Array, vec0: Float64Array, vec1: Float64Array,
        vec2: Float64Array, vec3: Float64Array): Float64Array;
    /**
     * Performs a per-component subtraction of the matrix mat0 and mat1,
     * storing the result into resultMat.
     * @param mat0 The minuend.
     * @param mat1 The subtrahend.
     * @param resultMat The matrix to receive the results (may be either mat0 or
     * mat1).
     */
    function subMat(
        mat0: Float64Array, mat1: Float64Array,
        resultMat: Float64Array): Float64Array;
    /**
     * Decomposes a rotation matrix into Euler angles using the ZXZ convention
     * so that rotation = rotation_z(theta1) * rotation_x(theta2) *
     * rotation_z(theta3), with theta1 in [0, 2 * pi], theta2 in [0, pi] and
     * theta3 in [0, 2 * pi]. rotation_x(theta) means rotation around the X axis
     * of theta radians.
     * @param mat The matrix.
     * @param euler The ZXZ Euler angles in radians as [theta1, theta2, theta3].
     * @param opt_theta2IsNegative Whether theta2 is in [-pi, 0] instead of the
     * default [0, pi].
     */
    function toEulerZXZ(
        mat: Float64Array, euler: Float64Array,
        opt_theta2IsNegative?: boolean): Float64Array;
    /**
     * Decomposes a matrix into the lookAt vectors eyePt, fwdVec and worldUpVec.
     * The matrix represents the modelview matrix of a camera. It is the inverse
     * of lookAt except for the output of the fwdVec instead of centerPt.
     * The centerPt itself cannot be recovered from a modelview matrix.
     *
     * Note that unlike most other goog.vec functions where we inline
     * everything, this function does not inline various goog.vec
     * functions.  This makes the code more readable, but somewhat
     * less efficient.
     * @param mat The matrix.
     * @param eyePt The position of the eye point (camera origin).
     * @param fwdVec The vector describing where the camera points to.
     * @param worldUpVec The vector that identifies the up direction for the
     * camera.
     */
    function toLookAt(
        mat: Float64Array, eyePt: Float64Array, fwdVec: Float64Array,
        worldUpVec: Float64Array): boolean;
    /**
     * Translates the given matrix by x,y,z.  Equvialent to:
     * goog.vec.mat4d.multMat(
     * mat,
     * goog.vec.mat4d.makeTranslate(goog.vec.mat4d.create(), x, y, z),
     * mat);
     * @param mat The matrix.
     * @param x The translation along the x axis.
     * @param y The translation along the y axis.
     * @param z The translation along the z axis.
     */
    function translate(
        mat: Float64Array, x: number, y: number, z: number): Float64Array;
    /**
     * Transposes the given matrix mat storing the result into resultMat.
     * @param mat The matrix to transpose.
     * @param resultMat The matrix to receive the results (may be mat).
     */
    function transpose(
        mat: Float64Array, resultMat: Float64Array): Float64Array;
}
declare module 'goog:goog.vec.mat4d' {
    import alias = ಠ_ಠ.clutz.goog.vec.mat4d;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.vec.mat4d {
    type Type = Float64Array;
}
declare module 'goog:goog.vec.mat4d.Type' {
    import alias = ಠ_ಠ.clutz.goog.vec.mat4d.Type;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.vec.mat4f {
    /**
     * Performs a per-component addition of the matrix mat0 and mat1, storing
     * the result into resultMat.
     * @param mat0 The first addend.
     * @param mat1 The second addend.
     * @param resultMat The matrix to receive the results (may be either mat0 or
     * mat1).
     */
    function addMat(
        mat0: Float32Array, mat1: Float32Array,
        resultMat: Float32Array): Float32Array;
    /**
     * Creates a mat4f with all elements initialized to zero.
     */
    function create(): Float32Array;
    /**
     * Creates a mat4f identity matrix.
     */
    function createIdentity(): Float32Array;
    /**
     * Computes the determinant of the matrix.
     * @param mat The matrix to compute the matrix for.
     */
    function determinant(mat: Float32Array): number;
    /**
     * Returns true if the components of mat0 are equal to the components of
     * mat1.
     * @param mat0 The first matrix.
     * @param mat1 The second matrix.
     */
    function equals(mat0: Float32Array, mat1: Float32Array): boolean;
    /**
     * Retrieves the specified column from the matrix into the given vector.
     * @param mat The matrix supplying the values.
     * @param column The column to get the values from.
     * @param vec The vector of elements to receive the column.
     */
    function getColumn(
        mat: Float32Array, column: number, vec: Float32Array): Float32Array;
    /**
     * Retrieves the column values from the given matrix into the given vectors.
     * @param mat The matrix supplying the columns.
     * @param vec0 The vector to receive column 0.
     * @param vec1 The vector to receive column 1.
     * @param vec2 The vector to receive column 2.
     * @param vec3 The vector to receive column 3.
     */
    function getColumns(
        mat: Float32Array, vec0: Float32Array, vec1: Float32Array,
        vec2: Float32Array, vec3: Float32Array): void;
    /**
     * Gets the diagonal values of the matrix into the given vector.
     * @param mat The matrix containing the values.
     * @param vec The vector to receive the values.
     * @param opt_diagonal Which diagonal to get. A value of 0 selects the main
     * diagonal, a positive number selects a super diagonal and a negative
     * number selects a sub diagonal.
     */
    function getDiagonal(
        mat: Float32Array, vec: Float32Array,
        opt_diagonal?: number): Float32Array;
    /**
     * Retrieves the element at the requested row and column.
     * @param mat The matrix containing the value to retrieve.
     * @param row The row index.
     * @param column The column index.
     */
    function getElement(mat: Float32Array, row: number, column: number): number;
    /**
     * Retrieves the row values into the given vector.
     * @param mat The matrix supplying the values.
     * @param row The index of the row supplying the values.
     * @param vec The vector to receive the row.
     */
    function getRow(
        mat: Float32Array, row: number, vec: Float32Array): Float32Array;
    /**
     * Retrieves the rows of the matrix into the supplied vectors.
     * @param mat The matrix to supply the values.
     * @param vec0 The vector to receive row 0.
     * @param vec1 The vector to receive row 1.
     * @param vec2 The vector to receive row 2.
     * @param vec3 The vector to receive row 3.
     */
    function getRows(
        mat: Float32Array, vec0: Float32Array, vec1: Float32Array,
        vec2: Float32Array, vec3: Float32Array): void;
    /**
     * Retrieves the translation component of the transformation matrix.
     * @param mat The transformation matrix.
     * @param translation The vector for storing the result.
     */
    function getTranslation(
        mat: Float32Array, translation: Float32Array): Float32Array;
    /**
     * Computes the inverse of mat storing the result into resultMat. If the
     * inverse is defined, this function returns true, false otherwise.
     * @param mat The matrix to invert.
     * @param resultMat The matrix to receive the result (may be mat).
     */
    function invert(mat: Float32Array, resultMat: Float32Array): boolean;
    /**
     * Makes the given 4x4 matrix a rotation matrix given Euler angles using
     * the ZXZ convention.
     * Given the euler angles [theta1, theta2, theta3], the rotation is defined
     * as rotation = rotation_z(theta1) * rotation_x(theta2) *
     * rotation_z(theta3), with theta1 in [0, 2 * pi], theta2 in [0, pi] and
     * theta3 in [0, 2 * pi]. rotation_x(theta) means rotation around the X axis
     * of theta radians,
     * @param mat The matrix.
     * @param theta1 The angle of rotation around the Z axis in radians.
     * @param theta2 The angle of rotation around the X axis in radians.
     * @param theta3 The angle of rotation around the Z axis in radians.
     */
    function makeEulerZXZ(
        mat: Float32Array, theta1: number, theta2: number,
        theta3: number): Float32Array;
    /**
     * Makes the given 4x4 matrix a perspective projection matrix.
     * @param mat The matrix.
     * @param left The coordinate of the left clipping plane.
     * @param right The coordinate of the right clipping plane.
     * @param bottom The coordinate of the bottom clipping plane.
     * @param top The coordinate of the top clipping plane.
     * @param near The distance to the near clipping plane.
     * @param far The distance to the far clipping plane.
     */
    function makeFrustum(
        mat: Float32Array, left: number, right: number, bottom: number,
        top: number, near: number, far: number): Float32Array;
    /**
     * Makes the given 4x4 matrix the identity matrix.
     * @param mat The matrix.
     */
    function makeIdentity(mat: Float32Array): Float32Array;
    /**
     * Makes the given 4x4 matrix a modelview matrix of a camera so that
     * the camera is 'looking at' the given center point.
     *
     * Note that unlike most other goog.vec functions where we inline
     * everything, this function does not inline various goog.vec
     * functions.  This makes the code more readable, but somewhat
     * less efficient.
     * @param mat The matrix.
     * @param eyePt The position of the eye point (camera origin).
     * @param centerPt The point to aim the camera at.
     * @param worldUpVec The vector that identifies the up direction for the
     * camera.
     */
    function makeLookAt(
        mat: Float32Array, eyePt: Float32Array, centerPt: Float32Array,
        worldUpVec: Float32Array): Float32Array;
    /**
     * Makes the given 4x4 matrix an orthographic projection matrix.
     * @param mat The matrix.
     * @param left The coordinate of the left clipping plane.
     * @param right The coordinate of the right clipping plane.
     * @param bottom The coordinate of the bottom clipping plane.
     * @param top The coordinate of the top clipping plane.
     * @param near The distance to the near clipping plane.
     * @param far The distance to the far clipping plane.
     */
    function makeOrtho(
        mat: Float32Array, left: number, right: number, bottom: number,
        top: number, near: number, far: number): Float32Array;
    /**
     * Makes the given 4x4 matrix  perspective projection matrix given a
     * field of view and aspect ratio.
     * @param mat The matrix.
     * @param fovy The field of view along the y (vertical) axis in radians.
     * @param aspect The x (width) to y (height) aspect ratio.
     * @param near The distance to the near clipping plane.
     * @param far The distance to the far clipping plane.
     */
    function makePerspective(
        mat: Float32Array, fovy: number, aspect: number, near: number,
        far: number): Float32Array;
    /**
     * Makes the given 4x4 matrix a rotation matrix with the given rotation
     * angle about the axis defined by the vector (ax, ay, az).
     * @param mat The matrix.
     * @param angle The rotation angle in radians.
     * @param ax The x component of the rotation axis.
     * @param ay The y component of the rotation axis.
     * @param az The z component of the rotation axis.
     */
    function makeRotate(
        mat: Float32Array, angle: number, ax: number, ay: number,
        az: number): Float32Array;
    /**
     * Makes the given 4x4 matrix a rotation matrix with the given rotation
     * angle about the X axis.
     * @param mat The matrix.
     * @param angle The rotation angle in radians.
     */
    function makeRotateX(mat: Float32Array, angle: number): Float32Array;
    /**
     * Makes the given 4x4 matrix a rotation matrix with the given rotation
     * angle about the Y axis.
     * @param mat The matrix.
     * @param angle The rotation angle in radians.
     */
    function makeRotateY(mat: Float32Array, angle: number): Float32Array;
    /**
     * Makes the given 4x4 matrix a rotation matrix with the given rotation
     * angle about the Z axis.
     * @param mat The matrix.
     * @param angle The rotation angle in radians.
     */
    function makeRotateZ(mat: Float32Array, angle: number): Float32Array;
    /**
     * Creates a matrix from a quaternion rotation and vector translation.
     *
     * This is a specialization of makeRotationTranslationScaleOrigin.
     *
     * This is equivalent to, but faster than:
     * goog.vec.mat4f.makeIdentity(m);
     * goog.vec.mat4f.translate(m, tx, ty, tz);
     * goog.vec.mat4f.rotate(m, theta, rx, ry, rz);
     * and:
     * goog.vec.Quaternion.toRotationMatrix4(rotation, mat);
     * mat[12] = translation[0];
     * mat[13] = translation[1];
     * mat[14] = translation[2];
     * See http://jsperf.com/goog-vec-makerotationtranslation2 .
     * @param mat The matrix.
     * @param rotation The quaternion rotation. Note: this quaternion is assumed
     * to already be normalized.
     * @param translation The vector translation.
     */
    function makeRotationTranslation(
        mat: Float32Array,
        rotation: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        translation: Float32Array): Float32Array;
    /**
     * Creates a matrix from a quaternion rotation, vector translation, and
     * vector scale.
     *
     * This is a specialization of makeRotationTranslationScaleOrigin.
     *
     * This is equivalent to, but faster than:
     * goog.vec.mat4f.makeIdentity(m);
     * goog.vec.mat4f.translate(m, tx, ty, tz);
     * goog.vec.mat4f.rotate(m, theta, rx, ry, rz);
     * goog.vec.mat4f.scale(m, sx, sy, sz);
     * @param mat The matrix.
     * @param rotation The quaternion rotation. Note: this quaternion is assumed
     * to already be normalized.
     * @param translation The vector translation.
     * @param scale The vector scale.
     */
    function makeRotationTranslationScale(
        mat: Float32Array,
        rotation: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        translation: Float32Array, scale: Float32Array): Float32Array;
    /**
     * Creates a matrix from a quaternion rotation, vector translation, and
     * vector scale, rotating and scaling about the given origin.
     *
     * This is equivalent to, but faster than:
     * goog.vec.mat4f.makeIdentity(m);
     * goog.vec.mat4f.translate(m, tx, ty, tz);
     * goog.vec.mat4f.translate(m, ox, oy, oz);
     * goog.vec.mat4f.rotate(m, theta, rx, ry, rz);
     * goog.vec.mat4f.scale(m, sx, sy, sz);
     * goog.vec.mat4f.translate(m, -ox, -oy, -oz);
     * See http://jsperf.com/glmatrix-matrix-variant-test/3 for performance
     * results of a similar function in the glmatrix library.
     * @param mat The matrix.
     * @param rotation The quaternion rotation. Note: this quaternion is assumed
     * to already be normalized.
     * @param translation The vector translation.
     * @param scale The vector scale.
     * @param origin The origin about which to scale and rotate.
     */
    function makeRotationTranslationScaleOrigin(
        mat: Float32Array,
        rotation: Float32Array|Float64Array|ಠ_ಠ.clutz.goog.vec.Number,
        translation: Float32Array, scale: Float32Array,
        origin: Float32Array): Float32Array;
    /**
     * Makes the given 4x4 matrix as a scale matrix with x, y and z scale
     * factors.
     * @param mat The matrix.
     * @param x The scale along the x axis.
     * @param y The scale along the y axis.
     * @param z The scale along the z axis.
     */
    function makeScale(
        mat: Float32Array, x: number, y: number, z: number): Float32Array;
    /**
     * Makes the given 4x4 matrix a translation matrix with x, y and z
     * translation factors.
     * @param mat The matrix.
     * @param x The translation along the x axis.
     * @param y The translation along the y axis.
     * @param z The translation along the z axis.
     */
    function makeTranslate(
        mat: Float32Array, x: number, y: number, z: number): Float32Array;
    /**
     * Makes the given 4x4 matrix the zero matrix.
     * @param mat The matrix.
     */
    function makeZero(mat: Float32Array): Float32Array;
    /**
     * Multiplies the two matrices mat0 and mat1 using matrix multiplication,
     * storing the result into resultMat.
     * @param mat0 The first (left hand) matrix.
     * @param mat1 The second (right hand) matrix.
     * @param resultMat The matrix to receive the results (may be either mat0 or
     * mat1).
     */
    function multMat(
        mat0: Float32Array, mat1: Float32Array,
        resultMat: Float32Array): Float32Array;
    /**
     * Multiplies matrix mat with the given scalar, storing the result
     * into resultMat.
     * @param mat The matrix.
     * @param scalar The scalar value to multiply to each element of mat.
     * @param resultMat The matrix to receive the results (may be mat).
     */
    function multScalar(
        mat: Float32Array, scalar: number,
        resultMat: Float32Array): Float32Array;
    /**
     * Transforms the given vector with the given matrix storing the resulting,
     * transformed vector into resultVec. The input vector is multiplied against
     * the upper 3x4 matrix omitting the projective component.
     * @param mat The matrix supplying the transformation.
     * @param vec The 3 element vector to transform.
     * @param resultVec The 3 element vector to receive the results (may be
     * vec).
     */
    function multVec3(
        mat: Float32Array, vec: Float32Array,
        resultVec: Float32Array): Float32Array;
    /**
     * Transforms the given vector with the given matrix storing the resulting,
     * transformed vector into resultVec. The input vector is multiplied against
     * the upper 3x3 matrix omitting the projective component and translation
     * components.
     * @param mat The matrix supplying the transformation.
     * @param vec The 3 element vector to transform.
     * @param resultVec The 3 element vector to receive the results (may be
     * vec).
     */
    function multVec3NoTranslate(
        mat: Float32Array, vec: Float32Array,
        resultVec: Float32Array): Float32Array;
    /**
     * Transforms the given vector with the given matrix storing the resulting,
     * transformed vector into resultVec. The input vector is multiplied against
     * the full 4x4 matrix with the homogeneous divide applied to reduce the 4
     * element vector to a 3 element vector.
     * @param mat The matrix supplying the transformation.
     * @param vec The 3 element vector to transform.
     * @param resultVec The 3 element vector to receive the results (may be
     * vec).
     */
    function multVec3Projective(
        mat: Float32Array, vec: Float32Array,
        resultVec: Float32Array): Float32Array;
    /**
     * Transforms the given vector with the given matrix storing the resulting,
     * transformed vector into resultVec.
     * @param mat The matrix supplying the transformation.
     * @param vec The vector to transform.
     * @param resultVec The vector to receive the results (may be vec).
     */
    function multVec4(
        mat: Float32Array, vec: Float32Array,
        resultVec: Float32Array): Float32Array;
    /**
     * Rotate the given matrix by angle about the x,y,z axis.  Equivalent to:
     * goog.vec.mat4f.multMat(
     * mat,
     * goog.vec.mat4f.makeRotate(goog.vec.mat4f.create(), angle, x, y, z),
     * mat);
     * @param mat The matrix.
     * @param angle The angle in radians.
     * @param x The x component of the rotation axis.
     * @param y The y component of the rotation axis.
     * @param z The z component of the rotation axis.
     */
    function rotate(
        mat: Float32Array, angle: number, x: number, y: number,
        z: number): Float32Array;
    /**
     * Rotate the given matrix by angle about the x axis.  Equivalent to:
     * goog.vec.mat4f.multMat(
     * mat,
     * goog.vec.mat4f.makeRotateX(goog.vec.mat4f.create(), angle),
     * mat);
     * @param mat The matrix.
     * @param angle The angle in radians.
     */
    function rotateX(mat: Float32Array, angle: number): Float32Array;
    /**
     * Rotate the given matrix by angle about the y axis.  Equivalent to:
     * goog.vec.mat4f.multMat(
     * mat,
     * goog.vec.mat4f.makeRotateY(goog.vec.mat4f.create(), angle),
     * mat);
     * @param mat The matrix.
     * @param angle The angle in radians.
     */
    function rotateY(mat: Float32Array, angle: number): Float32Array;
    /**
     * Rotate the given matrix by angle about the z axis.  Equivalent to:
     * goog.vec.mat4f.multMat(
     * mat,
     * goog.vec.mat4f.makeRotateZ(goog.vec.mat4f.create(), angle),
     * mat);
     * @param mat The matrix.
     * @param angle The angle in radians.
     */
    function rotateZ(mat: Float32Array, angle: number): Float32Array;
    /**
     * Scales the given matrix by x,y,z.  Equivalent to:
     * goog.vec.mat4f.multMat(
     * mat,
     * goog.vec.mat4f.makeScale(goog.vec.mat4f.create(), x, y, z),
     * mat);
     * @param mat The matrix.
     * @param x The x scale factor.
     * @param y The y scale factor.
     * @param z The z scale factor.
     */
    function scale(
        mat: Float32Array, x: number, y: number, z: number): Float32Array;
    /**
     * Sets the specified column with the value from the supplied vector.
     * @param mat The matrix to receive the values.
     * @param column The column index to set the values on.
     * @param vec The vector of elements for the column.
     */
    function setColumn(
        mat: Float32Array, column: number, vec: Float32Array): Float32Array;
    /**
     * Sets the specified column with the supplied values.
     * @param mat The matrix to receive the values.
     * @param column The column index to set the values on.
     * @param v0 The value for row 0.
     * @param v1 The value for row 1.
     * @param v2 The value for row 2.
     * @param v3 The value for row 3.
     */
    function setColumnValues(
        mat: Float32Array, column: number, v0: number, v1: number, v2: number,
        v3: number): Float32Array;
    /**
     * Sets the columns of the matrix from the given vectors.
     * @param mat The matrix to receive the values.
     * @param vec0 The values for column 0.
     * @param vec1 The values for column 1.
     * @param vec2 The values for column 2.
     * @param vec3 The values for column 3.
     */
    function setColumns(
        mat: Float32Array, vec0: Float32Array, vec1: Float32Array,
        vec2: Float32Array, vec3: Float32Array): Float32Array;
    /**
     * Sets the diagonal values of the matrix from the given vector.
     * @param mat The matrix to receive the values.
     * @param vec The vector containing the values.
     */
    function setDiagonal(mat: Float32Array, vec: Float32Array): Float32Array;
    /**
     * Sets the diagonal values of the matrix from the given values.
     * @param mat The matrix to receive the values.
     * @param v00 The values for (0, 0).
     * @param v11 The values for (1, 1).
     * @param v22 The values for (2, 2).
     * @param v33 The values for (3, 3).
     */
    function setDiagonalValues(
        mat: Float32Array, v00: number, v11: number, v22: number,
        v33: number): Float32Array;
    /**
     * Sets the element at the requested row and column.
     * @param mat The matrix containing the value to retrieve.
     * @param row The row index.
     * @param column The column index.
     * @param value The value to set at the requested row, column.
     */
    function setElement(
        mat: Float32Array, row: number, column: number,
        value: number): Float32Array;
    /**
     * Initializes mat4f mat from Array src.
     * @param mat The destination matrix.
     * @param src The source matrix.
     */
    function setFromArray(
        mat: Float32Array, src: ಠ_ಠ.clutz.goog.vec.Number|null): Float32Array;
    /**
     * Initializes mat4f mat from mat4d src (typed as a Float64Array to
     * avoid circular goog.requires).
     * @param mat The destination matrix.
     * @param src The source matrix.
     */
    function setFromMat4d(
        mat: Float32Array, src: Float64Array|null): Float32Array;
    /**
     * Initializes mat4f mat from mat4f src.
     * @param mat The destination matrix.
     * @param src The source matrix.
     */
    function setFromMat4f(mat: Float32Array, src: Float32Array): Float32Array;
    /**
     * Initializes the matrix from the set of values. Note the values supplied
     * are in column major order.
     * @param mat The matrix to receive the values.
     * @param v00 The values at (0, 0).
     * @param v10 The values at (1, 0).
     * @param v20 The values at (2, 0).
     * @param v30 The values at (3, 0).
     * @param v01 The values at (0, 1).
     * @param v11 The values at (1, 1).
     * @param v21 The values at (2, 1).
     * @param v31 The values at (3, 1).
     * @param v02 The values at (0, 2).
     * @param v12 The values at (1, 2).
     * @param v22 The values at (2, 2).
     * @param v32 The values at (3, 2).
     * @param v03 The values at (0, 3).
     * @param v13 The values at (1, 3).
     * @param v23 The values at (2, 3).
     * @param v33 The values at (3, 3).
     */
    function setFromValues(
        mat: Float32Array, v00: number, v10: number, v20: number, v30: number,
        v01: number, v11: number, v21: number, v31: number, v02: number,
        v12: number, v22: number, v32: number, v03: number, v13: number,
        v23: number, v33: number): Float32Array;
    /**
     * Sets the row values from the supplied vector.
     * @param mat The matrix to receive the row values.
     * @param row The index of the row.
     * @param vec The vector containing the values.
     */
    function setRow(
        mat: Float32Array, row: number, vec: Float32Array): Float32Array;
    /**
     * Sets the row values from the supplied values.
     * @param mat The matrix to receive the values.
     * @param row The index of the row to receive the values.
     * @param v0 The value for column 0.
     * @param v1 The value for column 1.
     * @param v2 The value for column 2.
     * @param v3 The value for column 3.
     */
    function setRowValues(
        mat: Float32Array, row: number, v0: number, v1: number, v2: number,
        v3: number): Float32Array;
    /**
     * Sets the rows of the matrix from the supplied vectors.
     * @param mat The matrix to receive the values.
     * @param vec0 The values for row 0.
     * @param vec1 The values for row 1.
     * @param vec2 The values for row 2.
     * @param vec3 The values for row 3.
     */
    function setRows(
        mat: Float32Array, vec0: Float32Array, vec1: Float32Array,
        vec2: Float32Array, vec3: Float32Array): Float32Array;
    /**
     * Performs a per-component subtraction of the matrix mat0 and mat1,
     * storing the result into resultMat.
     * @param mat0 The minuend.
     * @param mat1 The subtrahend.
     * @param resultMat The matrix to receive the results (may be either mat0 or
     * mat1).
     */
    function subMat(
        mat0: Float32Array, mat1: Float32Array,
        resultMat: Float32Array): Float32Array;
    /**
     * Decomposes a rotation matrix into Euler angles using the ZXZ convention
     * so that rotation = rotation_z(theta1) * rotation_x(theta2) *
     * rotation_z(theta3), with theta1 in [0, 2 * pi], theta2 in [0, pi] and
     * theta3 in [0, 2 * pi]. rotation_x(theta) means rotation around the X axis
     * of theta radians.
     * @param mat The matrix.
     * @param euler The ZXZ Euler angles in radians as [theta1, theta2, theta3].
     * @param opt_theta2IsNegative Whether theta2 is in [-pi, 0] instead of the
     * default [0, pi].
     */
    function toEulerZXZ(
        mat: Float32Array, euler: Float32Array,
        opt_theta2IsNegative?: boolean): Float32Array;
    /**
     * Decomposes a matrix into the lookAt vectors eyePt, fwdVec and worldUpVec.
     * The matrix represents the modelview matrix of a camera. It is the inverse
     * of lookAt except for the output of the fwdVec instead of centerPt.
     * The centerPt itself cannot be recovered from a modelview matrix.
     *
     * Note that unlike most other goog.vec functions where we inline
     * everything, this function does not inline various goog.vec
     * functions.  This makes the code more readable, but somewhat
     * less efficient.
     * @param mat The matrix.
     * @param eyePt The position of the eye point (camera origin).
     * @param fwdVec The vector describing where the camera points to.
     * @param worldUpVec The vector that identifies the up direction for the
     * camera.
     */
    function toLookAt(
        mat: Float32Array, eyePt: Float32Array, fwdVec: Float32Array,
        worldUpVec: Float32Array): boolean;
    /**
     * Translates the given matrix by x,y,z.  Equvialent to:
     * goog.vec.mat4f.multMat(
     * mat,
     * goog.vec.mat4f.makeTranslate(goog.vec.mat4f.create(), x, y, z),
     * mat);
     * @param mat The matrix.
     * @param x The translation along the x axis.
     * @param y The translation along the y axis.
     * @param z The translation along the z axis.
     */
    function translate(
        mat: Float32Array, x: number, y: number, z: number): Float32Array;
    /**
     * Transposes the given matrix mat storing the result into resultMat.
     * @param mat The matrix to transpose.
     * @param resultMat The matrix to receive the results (may be mat).
     */
    function transpose(
        mat: Float32Array, resultMat: Float32Array): Float32Array;
}
declare module 'goog:goog.vec.mat4f' {
    import alias = ಠ_ಠ.clutz.goog.vec.mat4f;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.vec.mat4f {
    type Type = Float32Array;
}
declare module 'goog:goog.vec.mat4f.Type' {
    import alias = ಠ_ಠ.clutz.goog.vec.mat4f.Type;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.vec.vec2d {
    /**
     * Takes the absolute value of each component of vec0 storing the result in
     * resultVec.
     * @param vec0 The source vector.
     * @param resultVec The vector to receive the result. May be vec0.
     */
    function abs(vec0: Float64Array, resultVec: Float64Array): Float64Array;
    /**
     * Performs a component-wise addition of vec0 and vec1 together storing the
     * result into resultVec.
     * @param vec0 The first addend.
     * @param vec1 The second addend.
     * @param resultVec The vector to receive the result. May be vec0 or vec1.
     */
    function add(
        vec0: Float64Array, vec1: Float64Array,
        resultVec: Float64Array): Float64Array;
    /**
     * Creates a clone of the given vec2d.
     * @param vec The source vec2d.
     */
    function clone(vec: Float64Array): Float64Array;
    /**
     * Divides each component of vec0 with the matching element of vec0
     * storing the divisor into resultVec.
     * @param vec0 The first vector.
     * @param vec1 The second vector.
     * @param resultVec The vector to receive the result. May be vec0.
     */
    function componentDivide(
        vec0: Float64Array, vec1: Float64Array,
        resultVec: Float64Array): Float64Array;
    /**
     * Multiplies each component of vec0 with the matching element of vec0
     * storing the products into resultVec.
     * @param vec0 The first vector.
     * @param vec1 The second vector.
     * @param resultVec The vector to receive the result. May be vec0.
     */
    function componentMultiply(
        vec0: Float64Array, vec1: Float64Array,
        resultVec: Float64Array): Float64Array;
    /**
     * Creates a vec2d with all elements initialized to zero.
     */
    function create(): Float64Array;
    /**
     * Creates a new vec2d initialized with the value from the given array.
     * @param vec The source 2 element array.
     */
    function createFromArray(vec: ಠ_ಠ.clutz.goog.vec.Number): Float64Array;
    /**
     * Creates a new vec2d initialized with the supplied values.
     * @param v0 The value for element at index 0.
     * @param v1 The value for element at index 1.
     */
    function createFromValues(v0: number, v1: number): Float64Array;
    /**
     * Returns a unit vector pointing from one point to another.
     * If the input points are equal then the result will be all zeros.
     * @param vec0 Origin point.
     * @param vec1 Target point.
     * @param resultVec The vector to receive the results (may be vec0 or vec1).
     */
    function direction(
        vec0: Float64Array, vec1: Float64Array,
        resultVec: Float64Array): Float64Array;
    /**
     * Returns the distance between two points.
     * @param vec0 First point.
     * @param vec1 Second point.
     */
    function distance(vec0: Float64Array, vec1: Float64Array): number;
    /**
     * Returns the squared distance between two points.
     * @param vec0 First point.
     * @param vec1 Second point.
     */
    function distanceSquared(vec0: Float64Array, vec1: Float64Array): number;
    /**
     * Returns the scalar product of vectors vec0 and vec1.
     * @param vec0 The first vector.
     * @param vec1 The second vector.
     */
    function dot(vec0: Float64Array, vec1: Float64Array): number;
    /**
     * Returns true if the components of vec0 are equal to the components of
     * vec1.
     * @param vec0 The first vector.
     * @param vec1 The second vector.
     */
    function equals(vec0: Float64Array, vec1: Float64Array): boolean;
    /**
     * Linearly interpolate from vec0 to vec1 according to f. The value of f
     * should be in the range [0..1] otherwise the results are undefined.
     * @param vec0 The first vector.
     * @param vec1 The second vector.
     * @param f The interpolation factor.
     * @param resultVec The vector to receive the results (may be vec0 or vec1).
     */
    function lerp(
        vec0: Float64Array, vec1: Float64Array, f: number,
        resultVec: Float64Array): Float64Array;
    /**
     * Returns the magnitude of the given vector.
     * @param vec0 The vector.
     */
    function magnitude(vec0: Float64Array): number;
    /**
     * Returns the magnitudeSquared of the given vector.
     * @param vec0 The vector.
     */
    function magnitudeSquared(vec0: Float64Array): number;
    /**
     * Compares the components of vec0 with the components of another vector or
     * scalar, storing the larger values in resultVec.
     * @param vec0 The source vector.
     * @param limit The limit vector or scalar.
     * @param resultVec The vector to receive the results (may be vec0 or
     * limit).
     */
    function max(
        vec0: Float64Array, limit: Float64Array|number,
        resultVec: Float64Array): Float64Array;
    /**
     * Compares the components of vec0 with the components of another vector or
     * scalar, storing the smaller values in resultVec.
     * @param vec0 The source vector.
     * @param limit The limit vector or scalar.
     * @param resultVec The vector to receive the results (may be vec0 or
     * limit).
     */
    function min(
        vec0: Float64Array, limit: Float64Array|number,
        resultVec: Float64Array): Float64Array;
    /**
     * Negates vec0, storing the result into resultVec.
     * @param vec0 The vector to negate.
     * @param resultVec The vector to receive the result. May be vec0.
     */
    function negate(vec0: Float64Array, resultVec: Float64Array): Float64Array;
    /**
     * Normalizes the given vector storing the result into resultVec.
     * @param vec0 The vector to normalize.
     * @param resultVec The vector to receive the result. May be vec0.
     */
    function normalize(
        vec0: Float64Array, resultVec: Float64Array): Float64Array;
    /**
     * Multiplies each component of vec0 with scalar storing the product into
     * resultVec.
     * @param vec0 The source vector.
     * @param scalar The value to multiply with each component of vec0.
     * @param resultVec The vector to receive the result. May be vec0.
     */
    function scale(vec0: Float64Array, scalar: number, resultVec: Float64Array):
        Float64Array;
    /**
     * Initializes vec2d vec from Array src.
     * @param vec The destination vector.
     * @param src The source vector.
     */
    function setFromArray(
        vec: Float64Array, src: ಠ_ಠ.clutz.goog.vec.Number|null): Float64Array;
    /**
     * Initializes the vector with the given values.
     * @param vec The vector to receive the values.
     * @param v0 The value for element at index 0.
     * @param v1 The value for element at index 1.
     */
    function setFromValues(
        vec: Float64Array, v0: number, v1: number): Float64Array;
    /**
     * Initializes vec2d vec from vec2d src.
     * @param vec The destination vector.
     * @param src The source vector.
     */
    function setFromVec2d(vec: Float64Array, src: Float64Array): Float64Array;
    /**
     * Initializes vec2d vec from vec2f src (typed as a Float32Array to
     * avoid circular goog.requires).
     * @param vec The destination vector.
     * @param src The source vector.
     */
    function setFromVec2f(
        vec: Float64Array, src: Float32Array|null): Float64Array;
    /**
     * Performs a component-wise subtraction of vec1 from vec0 storing the
     * result into resultVec.
     * @param vec0 The minuend.
     * @param vec1 The subtrahend.
     * @param resultVec The vector to receive the result. May be vec0 or vec1.
     */
    function subtract(
        vec0: Float64Array, vec1: Float64Array,
        resultVec: Float64Array): Float64Array;
}
declare module 'goog:goog.vec.vec2d' {
    import alias = ಠ_ಠ.clutz.goog.vec.vec2d;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.vec.vec2d {
    type Type = Float64Array;
}
declare module 'goog:goog.vec.vec2d.Type' {
    import alias = ಠ_ಠ.clutz.goog.vec.vec2d.Type;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.vec.vec2f {
    /**
     * Takes the absolute value of each component of vec0 storing the result in
     * resultVec.
     * @param vec0 The source vector.
     * @param resultVec The vector to receive the result. May be vec0.
     */
    function abs(vec0: Float32Array, resultVec: Float32Array): Float32Array;
    /**
     * Performs a component-wise addition of vec0 and vec1 together storing the
     * result into resultVec.
     * @param vec0 The first addend.
     * @param vec1 The second addend.
     * @param resultVec The vector to receive the result. May be vec0 or vec1.
     */
    function add(
        vec0: Float32Array, vec1: Float32Array,
        resultVec: Float32Array): Float32Array;
    /**
     * Creates a clone of the given vec2f.
     * @param vec The source vec2f.
     */
    function clone(vec: Float32Array): Float32Array;
    /**
     * Divides each component of vec0 with the matching element of vec0
     * storing the divisor into resultVec.
     * @param vec0 The first vector.
     * @param vec1 The second vector.
     * @param resultVec The vector to receive the result. May be vec0.
     */
    function componentDivide(
        vec0: Float32Array, vec1: Float32Array,
        resultVec: Float32Array): Float32Array;
    /**
     * Multiplies each component of vec0 with the matching element of vec0
     * storing the products into resultVec.
     * @param vec0 The first vector.
     * @param vec1 The second vector.
     * @param resultVec The vector to receive the result. May be vec0.
     */
    function componentMultiply(
        vec0: Float32Array, vec1: Float32Array,
        resultVec: Float32Array): Float32Array;
    /**
     * Creates a vec2f with all elements initialized to zero.
     */
    function create(): Float32Array;
    /**
     * Creates a new vec2f initialized with the value from the given array.
     * @param vec The source 2 element array.
     */
    function createFromArray(vec: ಠ_ಠ.clutz.goog.vec.Number): Float32Array;
    /**
     * Creates a new vec2f initialized with the supplied values.
     * @param v0 The value for element at index 0.
     * @param v1 The value for element at index 1.
     */
    function createFromValues(v0: number, v1: number): Float32Array;
    /**
     * Returns a unit vector pointing from one point to another.
     * If the input points are equal then the result will be all zeros.
     * @param vec0 Origin point.
     * @param vec1 Target point.
     * @param resultVec The vector to receive the results (may be vec0 or vec1).
     */
    function direction(
        vec0: Float32Array, vec1: Float32Array,
        resultVec: Float32Array): Float32Array;
    /**
     * Returns the distance between two points.
     * @param vec0 First point.
     * @param vec1 Second point.
     */
    function distance(vec0: Float32Array, vec1: Float32Array): number;
    /**
     * Returns the squared distance between two points.
     * @param vec0 First point.
     * @param vec1 Second point.
     */
    function distanceSquared(vec0: Float32Array, vec1: Float32Array): number;
    /**
     * Returns the scalar product of vectors vec0 and vec1.
     * @param vec0 The first vector.
     * @param vec1 The second vector.
     */
    function dot(vec0: Float32Array, vec1: Float32Array): number;
    /**
     * Returns true if the components of vec0 are equal to the components of
     * vec1.
     * @param vec0 The first vector.
     * @param vec1 The second vector.
     */
    function equals(vec0: Float32Array, vec1: Float32Array): boolean;
    /**
     * Linearly interpolate from vec0 to vec1 according to f. The value of f
     * should be in the range [0..1] otherwise the results are undefined.
     * @param vec0 The first vector.
     * @param vec1 The second vector.
     * @param f The interpolation factor.
     * @param resultVec The vector to receive the results (may be vec0 or vec1).
     */
    function lerp(
        vec0: Float32Array, vec1: Float32Array, f: number,
        resultVec: Float32Array): Float32Array;
    /**
     * Returns the magnitude of the given vector.
     * @param vec0 The vector.
     */
    function magnitude(vec0: Float32Array): number;
    /**
     * Returns the magnitudeSquared of the given vector.
     * @param vec0 The vector.
     */
    function magnitudeSquared(vec0: Float32Array): number;
    /**
     * Compares the components of vec0 with the components of another vector or
     * scalar, storing the larger values in resultVec.
     * @param vec0 The source vector.
     * @param limit The limit vector or scalar.
     * @param resultVec The vector to receive the results (may be vec0 or
     * limit).
     */
    function max(
        vec0: Float32Array, limit: Float32Array|number,
        resultVec: Float32Array): Float32Array;
    /**
     * Compares the components of vec0 with the components of another vector or
     * scalar, storing the smaller values in resultVec.
     * @param vec0 The source vector.
     * @param limit The limit vector or scalar.
     * @param resultVec The vector to receive the results (may be vec0 or
     * limit).
     */
    function min(
        vec0: Float32Array, limit: Float32Array|number,
        resultVec: Float32Array): Float32Array;
    /**
     * Negates vec0, storing the result into resultVec.
     * @param vec0 The vector to negate.
     * @param resultVec The vector to receive the result. May be vec0.
     */
    function negate(vec0: Float32Array, resultVec: Float32Array): Float32Array;
    /**
     * Normalizes the given vector storing the result into resultVec.
     * @param vec0 The vector to normalize.
     * @param resultVec The vector to receive the result. May be vec0.
     */
    function normalize(
        vec0: Float32Array, resultVec: Float32Array): Float32Array;
    /**
     * Multiplies each component of vec0 with scalar storing the product into
     * resultVec.
     * @param vec0 The source vector.
     * @param scalar The value to multiply with each component of vec0.
     * @param resultVec The vector to receive the result. May be vec0.
     */
    function scale(vec0: Float32Array, scalar: number, resultVec: Float32Array):
        Float32Array;
    /**
     * Initializes vec2f vec from Array src.
     * @param vec The destination vector.
     * @param src The source vector.
     */
    function setFromArray(
        vec: Float32Array, src: ಠ_ಠ.clutz.goog.vec.Number|null): Float32Array;
    /**
     * Initializes the vector with the given values.
     * @param vec The vector to receive the values.
     * @param v0 The value for element at index 0.
     * @param v1 The value for element at index 1.
     */
    function setFromValues(
        vec: Float32Array, v0: number, v1: number): Float32Array;
    /**
     * Initializes vec2f vec from vec2d src (typed as a Float64Array to
     * avoid circular goog.requires).
     * @param vec The destination vector.
     * @param src The source vector.
     */
    function setFromVec2d(
        vec: Float32Array, src: Float64Array|null): Float32Array;
    /**
     * Initializes vec2f vec from vec2f src.
     * @param vec The destination vector.
     * @param src The source vector.
     */
    function setFromVec2f(vec: Float32Array, src: Float32Array): Float32Array;
    /**
     * Performs a component-wise subtraction of vec1 from vec0 storing the
     * result into resultVec.
     * @param vec0 The minuend.
     * @param vec1 The subtrahend.
     * @param resultVec The vector to receive the result. May be vec0 or vec1.
     */
    function subtract(
        vec0: Float32Array, vec1: Float32Array,
        resultVec: Float32Array): Float32Array;
}
declare module 'goog:goog.vec.vec2f' {
    import alias = ಠ_ಠ.clutz.goog.vec.vec2f;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.vec.vec2f {
    type Type = Float32Array;
}
declare module 'goog:goog.vec.vec2f.Type' {
    import alias = ಠ_ಠ.clutz.goog.vec.vec2f.Type;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.vec.vec3d {
    /**
     * Takes the absolute value of each component of vec0 storing the result in
     * resultVec.
     * @param vec0 The source vector.
     * @param resultVec The vector to receive the result. May be vec0.
     */
    function abs(vec0: Float64Array, resultVec: Float64Array): Float64Array;
    /**
     * Performs a component-wise addition of vec0 and vec1 together storing the
     * result into resultVec.
     * @param vec0 The first addend.
     * @param vec1 The second addend.
     * @param resultVec The vector to receive the result. May be vec0 or vec1.
     */
    function add(
        vec0: Float64Array, vec1: Float64Array,
        resultVec: Float64Array): Float64Array;
    /**
     * Creates a clone of the given vec3d.
     * @param vec The source vec3d.
     */
    function clone(vec: Float64Array): Float64Array;
    /**
     * Creates a vec3d with all elements initialized to zero.
     */
    function create(): Float64Array;
    /**
     * Creates a new vec3d initialized with the value from the given array.
     * @param vec The source 3 element array.
     */
    function createFromArray(vec: ಠ_ಠ.clutz.goog.vec.Number): Float64Array;
    /**
     * Creates a new vec3d initialized with the supplied values.
     * @param v0 The value for element at index 0.
     * @param v1 The value for element at index 1.
     * @param v2 The value for element at index 2.
     */
    function createFromValues(v0: number, v1: number, v2: number): Float64Array;
    /**
     * Computes the vector (cross) product of v0 and v1 storing the result into
     * resultVec.
     * @param v0 The first vector.
     * @param v1 The second vector.
     * @param resultVec The vector to receive the results. May be either v0 or
     * v1.
     */
    function cross(v0: Float64Array, v1: Float64Array, resultVec: Float64Array):
        Float64Array;
    /**
     * Returns a unit vector pointing from one point to another.
     * If the input points are equal then the result will be all zeros.
     * @param vec0 Origin point.
     * @param vec1 Target point.
     * @param resultVec The vector to receive the results (may be vec0 or vec1).
     */
    function direction(
        vec0: Float64Array, vec1: Float64Array,
        resultVec: Float64Array): Float64Array;
    /**
     * Returns the distance between two points.
     * @param vec0 First point.
     * @param vec1 Second point.
     */
    function distance(vec0: Float64Array, vec1: Float64Array): number;
    /**
     * Returns the squared distance between two points.
     * @param vec0 First point.
     * @param vec1 Second point.
     */
    function distanceSquared(vec0: Float64Array, vec1: Float64Array): number;
    /**
     * Returns the scalar product of vectors v0 and v1.
     * @param v0 The first vector.
     * @param v1 The second vector.
     */
    function dot(v0: Float64Array, v1: Float64Array): number;
    /**
     * Returns true if the components of v0 are equal to the components of v1.
     * @param v0 The first vector.
     * @param v1 The second vector.
     */
    function equals(v0: Float64Array, v1: Float64Array): boolean;
    /**
     * Linearly interpolate from vec0 to v1 according to f. The value of f
     * should be in the range [0..1] otherwise the results are undefined.
     * @param v0 The first vector.
     * @param v1 The second vector.
     * @param f The interpolation factor.
     * @param resultVec The vector to receive the results (may be v0 or v1).
     */
    function lerp(
        v0: Float64Array, v1: Float64Array, f: number,
        resultVec: Float64Array): Float64Array;
    /**
     * Returns the magnitude of the given vector.
     * @param vec0 The vector.
     */
    function magnitude(vec0: Float64Array): number;
    /**
     * Returns the magnitudeSquared of the given vector.
     * @param vec0 The vector.
     */
    function magnitudeSquared(vec0: Float64Array): number;
    /**
     * Compares the components of vec0 with the components of another vector or
     * scalar, storing the larger values in resultVec.
     * @param vec0 The source vector.
     * @param limit The limit vector or scalar.
     * @param resultVec The vector to receive the results (may be vec0 or
     * limit).
     */
    function max(
        vec0: Float64Array, limit: Float64Array|number,
        resultVec: Float64Array): Float64Array;
    /**
     * Compares the components of vec0 with the components of another vector or
     * scalar, storing the smaller values in resultVec.
     * @param vec0 The source vector.
     * @param limit The limit vector or scalar.
     * @param resultVec The vector to receive the results (may be vec0 or
     * limit).
     */
    function min(
        vec0: Float64Array, limit: Float64Array|number,
        resultVec: Float64Array): Float64Array;
    /**
     * Negates vec0, storing the result into resultVec.
     * @param vec0 The vector to negate.
     * @param resultVec The vector to receive the result. May be vec0.
     */
    function negate(vec0: Float64Array, resultVec: Float64Array): Float64Array;
    /**
     * Normalizes the given vector storing the result into resultVec.
     * @param vec0 The vector to normalize.
     * @param resultVec The vector to receive the result. May be vec0.
     */
    function normalize(
        vec0: Float64Array, resultVec: Float64Array): Float64Array;
    /**
     * Multiplies each component of vec0 with scalar storing the product into
     * resultVec.
     * @param vec0 The source vector.
     * @param scalar The value to multiply with each component of vec0.
     * @param resultVec The vector to receive the result. May be vec0.
     */
    function scale(vec0: Float64Array, scalar: number, resultVec: Float64Array):
        Float64Array;
    /**
     * Initializes vec3d vec from Array src.
     * @param vec The destination vector.
     * @param src The source vector.
     */
    function setFromArray(
        vec: Float64Array, src: ಠ_ಠ.clutz.goog.vec.Number|null): Float64Array;
    /**
     * Initializes the vector with the given values.
     * @param vec The vector to receive the values.
     * @param v0 The value for element at index 0.
     * @param v1 The value for element at index 1.
     * @param v2 The value for element at index 2.
     */
    function setFromValues(
        vec: Float64Array, v0: number, v1: number, v2: number): Float64Array;
    /**
     * Initializes vec3d vec from vec3d src.
     * @param vec The destination vector.
     * @param src The source vector.
     */
    function setFromVec3d(vec: Float64Array, src: Float64Array): Float64Array;
    /**
     * Initializes vec3d vec from vec3f src (typed as a Float32Array to
     * avoid circular goog.requires).
     * @param vec The destination vector.
     * @param src The source vector.
     */
    function setFromVec3f(
        vec: Float64Array, src: Float32Array|null): Float64Array;
    /**
     * Perform a spherical linear interpolation from v0 to v1 according to f.
     * The value of f should be in the range [0..1] otherwise the results are
     * undefined.
     *
     * Slerp is normally used to interpolate quaternions, but there is a
     * geometric formula for interpolating vectors directly, see "Geometric
     * Slerp" in: https://en.wikipedia.org/wiki/Slerp.
     *
     * This interpolates the vectors' directions via slerp, but linearly
     * interpolates the vectors' magnitudes.
     *
     * Results are undefined if v0 or v1 are of zero magnitude.
     * @param v0 The first vector.
     * @param v1 The second vector.
     * @param f The interpolation factor.
     * @param resultVec The vector to receive the results (may be v0 or v1).
     */
    function slerp(
        v0: Float64Array, v1: Float64Array, f: number,
        resultVec: Float64Array): Float64Array;
    /**
     * Performs a component-wise subtraction of vec1 from vec0 storing the
     * result into resultVec.
     * @param vec0 The minuend.
     * @param vec1 The subtrahend.
     * @param resultVec The vector to receive the result. May be vec0 or vec1.
     */
    function subtract(
        vec0: Float64Array, vec1: Float64Array,
        resultVec: Float64Array): Float64Array;
}
declare module 'goog:goog.vec.vec3d' {
    import alias = ಠ_ಠ.clutz.goog.vec.vec3d;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.vec.vec3d {
    type Type = Float64Array;
}
declare module 'goog:goog.vec.vec3d.Type' {
    import alias = ಠ_ಠ.clutz.goog.vec.vec3d.Type;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.vec.vec3f {
    /**
     * Takes the absolute value of each component of vec0 storing the result in
     * resultVec.
     * @param vec0 The source vector.
     * @param resultVec The vector to receive the result. May be vec0.
     */
    function abs(vec0: Float32Array, resultVec: Float32Array): Float32Array;
    /**
     * Performs a component-wise addition of vec0 and vec1 together storing the
     * result into resultVec.
     * @param vec0 The first addend.
     * @param vec1 The second addend.
     * @param resultVec The vector to receive the result. May be vec0 or vec1.
     */
    function add(
        vec0: Float32Array, vec1: Float32Array,
        resultVec: Float32Array): Float32Array;
    /**
     * Creates a clone of the given vec3f.
     * @param vec The source vec3f.
     */
    function clone(vec: Float32Array): Float32Array;
    /**
     * Creates a vec3f with all elements initialized to zero.
     */
    function create(): Float32Array;
    /**
     * Creates a new vec3f initialized with the value from the given array.
     * @param vec The source 3 element array.
     */
    function createFromArray(vec: ಠ_ಠ.clutz.goog.vec.Number): Float32Array;
    /**
     * Creates a new vec3f initialized with the supplied values.
     * @param v0 The value for element at index 0.
     * @param v1 The value for element at index 1.
     * @param v2 The value for element at index 2.
     */
    function createFromValues(v0: number, v1: number, v2: number): Float32Array;
    /**
     * Computes the vector (cross) product of v0 and v1 storing the result into
     * resultVec.
     * @param v0 The first vector.
     * @param v1 The second vector.
     * @param resultVec The vector to receive the results. May be either v0 or
     * v1.
     */
    function cross(v0: Float32Array, v1: Float32Array, resultVec: Float32Array):
        Float32Array;
    /**
     * Returns a unit vector pointing from one point to another.
     * If the input points are equal then the result will be all zeros.
     * @param vec0 Origin point.
     * @param vec1 Target point.
     * @param resultVec The vector to receive the results (may be vec0 or vec1).
     */
    function direction(
        vec0: Float32Array, vec1: Float32Array,
        resultVec: Float32Array): Float32Array;
    /**
     * Returns the distance between two points.
     * @param vec0 First point.
     * @param vec1 Second point.
     */
    function distance(vec0: Float32Array, vec1: Float32Array): number;
    /**
     * Returns the squared distance between two points.
     * @param vec0 First point.
     * @param vec1 Second point.
     */
    function distanceSquared(vec0: Float32Array, vec1: Float32Array): number;
    /**
     * Returns the scalar product of vectors v0 and v1.
     * @param v0 The first vector.
     * @param v1 The second vector.
     */
    function dot(v0: Float32Array, v1: Float32Array): number;
    /**
     * Returns true if the components of v0 are equal to the components of v1.
     * @param v0 The first vector.
     * @param v1 The second vector.
     */
    function equals(v0: Float32Array, v1: Float32Array): boolean;
    /**
     * Linearly interpolate from vec0 to v1 according to f. The value of f
     * should be in the range [0..1] otherwise the results are undefined.
     * @param v0 The first vector.
     * @param v1 The second vector.
     * @param f The interpolation factor.
     * @param resultVec The vector to receive the results (may be v0 or v1).
     */
    function lerp(
        v0: Float32Array, v1: Float32Array, f: number,
        resultVec: Float32Array): Float32Array;
    /**
     * Returns the magnitude of the given vector.
     * @param vec0 The vector.
     */
    function magnitude(vec0: Float32Array): number;
    /**
     * Returns the magnitudeSquared of the given vector.
     * @param vec0 The vector.
     */
    function magnitudeSquared(vec0: Float32Array): number;
    /**
     * Compares the components of vec0 with the components of another vector or
     * scalar, storing the larger values in resultVec.
     * @param vec0 The source vector.
     * @param limit The limit vector or scalar.
     * @param resultVec The vector to receive the results (may be vec0 or
     * limit).
     */
    function max(
        vec0: Float32Array, limit: Float32Array|number,
        resultVec: Float32Array): Float32Array;
    /**
     * Compares the components of vec0 with the components of another vector or
     * scalar, storing the smaller values in resultVec.
     * @param vec0 The source vector.
     * @param limit The limit vector or scalar.
     * @param resultVec The vector to receive the results (may be vec0 or
     * limit).
     */
    function min(
        vec0: Float32Array, limit: Float32Array|number,
        resultVec: Float32Array): Float32Array;
    /**
     * Negates vec0, storing the result into resultVec.
     * @param vec0 The vector to negate.
     * @param resultVec The vector to receive the result. May be vec0.
     */
    function negate(vec0: Float32Array, resultVec: Float32Array): Float32Array;
    /**
     * Normalizes the given vector storing the result into resultVec.
     * @param vec0 The vector to normalize.
     * @param resultVec The vector to receive the result. May be vec0.
     */
    function normalize(
        vec0: Float32Array, resultVec: Float32Array): Float32Array;
    /**
     * Multiplies each component of vec0 with scalar storing the product into
     * resultVec.
     * @param vec0 The source vector.
     * @param scalar The value to multiply with each component of vec0.
     * @param resultVec The vector to receive the result. May be vec0.
     */
    function scale(vec0: Float32Array, scalar: number, resultVec: Float32Array):
        Float32Array;
    /**
     * Initializes vec3f vec from Array src.
     * @param vec The destination vector.
     * @param src The source vector.
     */
    function setFromArray(
        vec: Float32Array, src: ಠ_ಠ.clutz.goog.vec.Number|null): Float32Array;
    /**
     * Initializes the vector with the given values.
     * @param vec The vector to receive the values.
     * @param v0 The value for element at index 0.
     * @param v1 The value for element at index 1.
     * @param v2 The value for element at index 2.
     */
    function setFromValues(
        vec: Float32Array, v0: number, v1: number, v2: number): Float32Array;
    /**
     * Initializes vec3f vec from vec3d src (typed as a Float64Array to
     * avoid circular goog.requires).
     * @param vec The destination vector.
     * @param src The source vector.
     */
    function setFromVec3d(
        vec: Float32Array, src: Float64Array|null): Float32Array;
    /**
     * Initializes vec3f vec from vec3f src.
     * @param vec The destination vector.
     * @param src The source vector.
     */
    function setFromVec3f(vec: Float32Array, src: Float32Array): Float32Array;
    /**
     * Perform a spherical linear interpolation from v0 to v1 according to f.
     * The value of f should be in the range [0..1] otherwise the results are
     * undefined.
     *
     * Slerp is normally used to interpolate quaternions, but there is a
     * geometric formula for interpolating vectors directly, see "Geometric
     * Slerp" in: https://en.wikipedia.org/wiki/Slerp.
     *
     * This interpolates the vectors' directions via slerp, but linearly
     * interpolates the vectors' magnitudes.
     *
     * Results are undefined if v0 or v1 are of zero magnitude.
     * @param v0 The first vector.
     * @param v1 The second vector.
     * @param f The interpolation factor.
     * @param resultVec The vector to receive the results (may be v0 or v1).
     */
    function slerp(
        v0: Float32Array, v1: Float32Array, f: number,
        resultVec: Float32Array): Float32Array;
    /**
     * Performs a component-wise subtraction of vec1 from vec0 storing the
     * result into resultVec.
     * @param vec0 The minuend.
     * @param vec1 The subtrahend.
     * @param resultVec The vector to receive the result. May be vec0 or vec1.
     */
    function subtract(
        vec0: Float32Array, vec1: Float32Array,
        resultVec: Float32Array): Float32Array;
}
declare module 'goog:goog.vec.vec3f' {
    import alias = ಠ_ಠ.clutz.goog.vec.vec3f;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.vec.vec3f {
    type Type = Float32Array;
}
declare module 'goog:goog.vec.vec3f.Type' {
    import alias = ಠ_ಠ.clutz.goog.vec.vec3f.Type;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.vec.vec4d {
    /**
     * Takes the absolute value of each component of vec0 storing the result in
     * resultVec.
     * @param vec0 The source vector.
     * @param resultVec The vector to receive the result. May be vec0.
     */
    function abs(vec0: Float64Array, resultVec: Float64Array): Float64Array;
    /**
     * Performs a component-wise addition of vec0 and vec1 together storing the
     * result into resultVec.
     * @param vec0 The first addend.
     * @param vec1 The second addend.
     * @param resultVec The vector to receive the result. May be vec0 or vec1.
     */
    function add(
        vec0: Float64Array, vec1: Float64Array,
        resultVec: Float64Array): Float64Array;
    /**
     * Creates a clone of the given vec4d.
     * @param vec The source vec4d.
     */
    function clone(vec: Float64Array): Float64Array;
    /**
     * Creates a vec4d with all elements initialized to zero.
     */
    function create(): Float64Array;
    /**
     * Creates a new vec4d initialized with the value from the given array.
     * @param vec The source 4 element array.
     */
    function createFromArray(vec: ಠ_ಠ.clutz.goog.vec.Number): Float64Array;
    /**
     * Creates a new vec4d initialized with the supplied values.
     * @param v0 The value for element at index 0.
     * @param v1 The value for element at index 1.
     * @param v2 The value for element at index 2.
     * @param v3 The value for element at index 3.
     */
    function createFromValues(
        v0: number, v1: number, v2: number, v3: number): Float64Array;
    /**
     * Returns the scalar product of vectors v0 and v1.
     * @param v0 The first vector.
     * @param v1 The second vector.
     */
    function dot(v0: Float64Array, v1: Float64Array): number;
    /**
     * Returns true if the components of v0 are equal to the components of v1.
     * @param v0 The first vector.
     * @param v1 The second vector.
     */
    function equals(v0: Float64Array, v1: Float64Array): boolean;
    /**
     * Linearly interpolate from v0 to v1 according to f. The value of f should
     * be in the range [0..1] otherwise the results are undefined.
     * @param v0 The first vector.
     * @param v1 The second vector.
     * @param f The interpolation factor.
     * @param resultVec The vector to receive the results (may be v0 or v1).
     */
    function lerp(
        v0: Float64Array, v1: Float64Array, f: number,
        resultVec: Float64Array): Float64Array;
    /**
     * Returns the magnitude of the given vector.
     * @param vec0 The vector.
     */
    function magnitude(vec0: Float64Array): number;
    /**
     * Returns the magnitudeSquared of the given vector.
     * @param vec0 The vector.
     */
    function magnitudeSquared(vec0: Float64Array): number;
    /**
     * Compares the components of vec0 with the components of another vector or
     * scalar, storing the larger values in resultVec.
     * @param vec0 The source vector.
     * @param limit The limit vector or scalar.
     * @param resultVec The vector to receive the results (may be vec0 or
     * limit).
     */
    function max(
        vec0: Float64Array, limit: Float64Array|number,
        resultVec: Float64Array): Float64Array;
    /**
     * Compares the components of vec0 with the components of another vector or
     * scalar, storing the smaller values in resultVec.
     * @param vec0 The source vector.
     * @param limit The limit vector or scalar.
     * @param resultVec The vector to receive the results (may be vec0 or
     * limit).
     */
    function min(
        vec0: Float64Array, limit: Float64Array|number,
        resultVec: Float64Array): Float64Array;
    /**
     * Negates vec0, storing the result into resultVec.
     * @param vec0 The vector to negate.
     * @param resultVec The vector to receive the result. May be vec0.
     */
    function negate(vec0: Float64Array, resultVec: Float64Array): Float64Array;
    /**
     * Normalizes the given vector storing the result into resultVec.
     * @param vec0 The vector to normalize.
     * @param resultVec The vector to receive the result. May be vec0.
     */
    function normalize(
        vec0: Float64Array, resultVec: Float64Array): Float64Array;
    /**
     * Multiplies each component of vec0 with scalar storing the product into
     * resultVec.
     * @param vec0 The source vector.
     * @param scalar The value to multiply with each component of vec0.
     * @param resultVec The vector to receive the result. May be vec0.
     */
    function scale(vec0: Float64Array, scalar: number, resultVec: Float64Array):
        Float64Array;
    /**
     * Initializes vec4d vec from Array src.
     * @param vec The destination vector.
     * @param src The source vector.
     */
    function setFromArray(
        vec: Float64Array, src: ಠ_ಠ.clutz.goog.vec.Number|null): Float64Array;
    /**
     * Initializes the vector with the given values.
     * @param vec The vector to receive the values.
     * @param v0 The value for element at index 0.
     * @param v1 The value for element at index 1.
     * @param v2 The value for element at index 2.
     * @param v3 The value for element at index 3.
     */
    function setFromValues(
        vec: Float64Array, v0: number, v1: number, v2: number,
        v3: number): Float64Array;
    /**
     * Initializes vec4d vec from vec4d src.
     * @param vec The destination vector.
     * @param src The source vector.
     */
    function setFromVec4d(vec: Float64Array, src: Float64Array): Float64Array;
    /**
     * Initializes vec4d vec from vec4f src (typed as a Float32Array to
     * avoid circular goog.requires).
     * @param vec The destination vector.
     * @param src The source vector.
     */
    function setFromVec4f(
        vec: Float64Array, src: Float32Array|null): Float64Array;
    /**
     * Performs a component-wise subtraction of vec1 from vec0 storing the
     * result into resultVec.
     * @param vec0 The minuend.
     * @param vec1 The subtrahend.
     * @param resultVec The vector to receive the result. May be vec0 or vec1.
     */
    function subtract(
        vec0: Float64Array, vec1: Float64Array,
        resultVec: Float64Array): Float64Array;
}
declare module 'goog:goog.vec.vec4d' {
    import alias = ಠ_ಠ.clutz.goog.vec.vec4d;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.vec.vec4d {
    type Type = Float64Array;
}
declare module 'goog:goog.vec.vec4d.Type' {
    import alias = ಠ_ಠ.clutz.goog.vec.vec4d.Type;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.vec.vec4f {
    /**
     * Takes the absolute value of each component of vec0 storing the result in
     * resultVec.
     * @param vec0 The source vector.
     * @param resultVec The vector to receive the result. May be vec0.
     */
    function abs(vec0: Float32Array, resultVec: Float32Array): Float32Array;
    /**
     * Performs a component-wise addition of vec0 and vec1 together storing the
     * result into resultVec.
     * @param vec0 The first addend.
     * @param vec1 The second addend.
     * @param resultVec The vector to receive the result. May be vec0 or vec1.
     */
    function add(
        vec0: Float32Array, vec1: Float32Array,
        resultVec: Float32Array): Float32Array;
    /**
     * Creates a clone of the given vec4f.
     * @param vec The source vec4f.
     */
    function clone(vec: Float32Array): Float32Array;
    /**
     * Creates a vec4f with all elements initialized to zero.
     */
    function create(): Float32Array;
    /**
     * Creates a new vec4f initialized with the value from the given array.
     * @param vec The source 4 element array.
     */
    function createFromArray(vec: ಠ_ಠ.clutz.goog.vec.Number): Float32Array;
    /**
     * Creates a new vec4f initialized with the supplied values.
     * @param v0 The value for element at index 0.
     * @param v1 The value for element at index 1.
     * @param v2 The value for element at index 2.
     * @param v3 The value for element at index 3.
     */
    function createFromValues(
        v0: number, v1: number, v2: number, v3: number): Float32Array;
    /**
     * Returns the scalar product of vectors v0 and v1.
     * @param v0 The first vector.
     * @param v1 The second vector.
     */
    function dot(v0: Float32Array, v1: Float32Array): number;
    /**
     * Returns true if the components of v0 are equal to the components of v1.
     * @param v0 The first vector.
     * @param v1 The second vector.
     */
    function equals(v0: Float32Array, v1: Float32Array): boolean;
    /**
     * Linearly interpolate from v0 to v1 according to f. The value of f should
     * be in the range [0..1] otherwise the results are undefined.
     * @param v0 The first vector.
     * @param v1 The second vector.
     * @param f The interpolation factor.
     * @param resultVec The vector to receive the results (may be v0 or v1).
     */
    function lerp(
        v0: Float32Array, v1: Float32Array, f: number,
        resultVec: Float32Array): Float32Array;
    /**
     * Returns the magnitude of the given vector.
     * @param vec0 The vector.
     */
    function magnitude(vec0: Float32Array): number;
    /**
     * Returns the magnitudeSquared of the given vector.
     * @param vec0 The vector.
     */
    function magnitudeSquared(vec0: Float32Array): number;
    /**
     * Compares the components of vec0 with the components of another vector or
     * scalar, storing the larger values in resultVec.
     * @param vec0 The source vector.
     * @param limit The limit vector or scalar.
     * @param resultVec The vector to receive the results (may be vec0 or
     * limit).
     */
    function max(
        vec0: Float32Array, limit: Float32Array|number,
        resultVec: Float32Array): Float32Array;
    /**
     * Compares the components of vec0 with the components of another vector or
     * scalar, storing the smaller values in resultVec.
     * @param vec0 The source vector.
     * @param limit The limit vector or scalar.
     * @param resultVec The vector to receive the results (may be vec0 or
     * limit).
     */
    function min(
        vec0: Float32Array, limit: Float32Array|number,
        resultVec: Float32Array): Float32Array;
    /**
     * Negates vec0, storing the result into resultVec.
     * @param vec0 The vector to negate.
     * @param resultVec The vector to receive the result. May be vec0.
     */
    function negate(vec0: Float32Array, resultVec: Float32Array): Float32Array;
    /**
     * Normalizes the given vector storing the result into resultVec.
     * @param vec0 The vector to normalize.
     * @param resultVec The vector to receive the result. May be vec0.
     */
    function normalize(
        vec0: Float32Array, resultVec: Float32Array): Float32Array;
    /**
     * Multiplies each component of vec0 with scalar storing the product into
     * resultVec.
     * @param vec0 The source vector.
     * @param scalar The value to multiply with each component of vec0.
     * @param resultVec The vector to receive the result. May be vec0.
     */
    function scale(vec0: Float32Array, scalar: number, resultVec: Float32Array):
        Float32Array;
    /**
     * Initializes vec4f vec from Array src.
     * @param vec The destination vector.
     * @param src The source vector.
     */
    function setFromArray(
        vec: Float32Array, src: ಠ_ಠ.clutz.goog.vec.Number|null): Float32Array;
    /**
     * Initializes the vector with the given values.
     * @param vec The vector to receive the values.
     * @param v0 The value for element at index 0.
     * @param v1 The value for element at index 1.
     * @param v2 The value for element at index 2.
     * @param v3 The value for element at index 3.
     */
    function setFromValues(
        vec: Float32Array, v0: number, v1: number, v2: number,
        v3: number): Float32Array;
    /**
     * Initializes vec4f vec from vec4d src (typed as a Float64Array to
     * avoid circular goog.requires).
     * @param vec The destination vector.
     * @param src The source vector.
     */
    function setFromVec4d(
        vec: Float32Array, src: Float64Array|null): Float32Array;
    /**
     * Initializes vec4f vec from vec4f src.
     * @param vec The destination vector.
     * @param src The source vector.
     */
    function setFromVec4f(vec: Float32Array, src: Float32Array): Float32Array;
    /**
     * Performs a component-wise subtraction of vec1 from vec0 storing the
     * result into resultVec.
     * @param vec0 The minuend.
     * @param vec1 The subtrahend.
     * @param resultVec The vector to receive the result. May be vec0 or vec1.
     */
    function subtract(
        vec0: Float32Array, vec1: Float32Array,
        resultVec: Float32Array): Float32Array;
}
declare module 'goog:goog.vec.vec4f' {
    import alias = ಠ_ಠ.clutz.goog.vec.vec4f;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.vec.vec4f {
    type Type = Float32Array;
}
declare module 'goog:goog.vec.vec4f.Type' {
    import alias = ಠ_ಠ.clutz.goog.vec.vec4f.Type;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.webgl {
    var ACTIVE_ATTRIBUTES: number;
    var ACTIVE_TEXTURE: number;
    var ACTIVE_UNIFORMS: number;
    var ALIASED_LINE_WIDTH_RANGE: number;
    var ALIASED_POINT_SIZE_RANGE: number;
    var ALPHA: number;
    var ALPHA_BITS: number;
    var ALWAYS: number;
    var ARRAY_BUFFER: number;
    var ARRAY_BUFFER_BINDING: number;
    var ATTACHED_SHADERS: number;
    var BACK: number;
    var BLEND: number;
    var BLEND_COLOR: number;
    var BLEND_DST_ALPHA: number;
    var BLEND_DST_RGB: number;
    var BLEND_EQUATION: number;
    var BLEND_EQUATION_ALPHA: number;
    /**
     * Same as BLEND_EQUATION
     */
    var BLEND_EQUATION_RGB: number;
    var BLEND_SRC_ALPHA: number;
    var BLEND_SRC_RGB: number;
    var BLUE_BITS: number;
    var BOOL: number;
    var BOOL_VEC2: number;
    var BOOL_VEC3: number;
    var BOOL_VEC4: number;
    var BROWSER_DEFAULT_WEBGL: number;
    var BUFFER_SIZE: number;
    var BUFFER_USAGE: number;
    var BYTE: number;
    var CCW: number;
    var CLAMP_TO_EDGE: number;
    var COLOR_ATTACHMENT0: number;
    var COLOR_BUFFER_BIT: number;
    var COLOR_CLEAR_VALUE: number;
    var COLOR_WRITEMASK: number;
    var COMPILE_STATUS: number;
    /**
     * From the WEBGL_compressed_texture_s3tc extension.
     * http://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_s3tc/
     */
    var COMPRESSED_RGBA_S3TC_DXT1_EXT: number;
    /**
     * From the WEBGL_compressed_texture_s3tc extension.
     * http://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_s3tc/
     */
    var COMPRESSED_RGBA_S3TC_DXT3_EXT: number;
    /**
     * From the WEBGL_compressed_texture_s3tc extension.
     * http://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_s3tc/
     */
    var COMPRESSED_RGBA_S3TC_DXT5_EXT: number;
    /**
     * From the WEBGL_compressed_texture_s3tc extension.
     * http://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_s3tc/
     */
    var COMPRESSED_RGB_S3TC_DXT1_EXT: number;
    var COMPRESSED_TEXTURE_FORMATS: number;
    var CONSTANT_ALPHA: number;
    var CONSTANT_COLOR: number;
    var CONTEXT_LOST_WEBGL: number;
    var CULL_FACE: number;
    var CULL_FACE_MODE: number;
    var CURRENT_PROGRAM: number;
    var CURRENT_VERTEX_ATTRIB: number;
    var CW: number;
    var DECR: number;
    var DECR_WRAP: number;
    var DELETE_STATUS: number;
    var DEPTH_ATTACHMENT: number;
    var DEPTH_BITS: number;
    var DEPTH_BUFFER_BIT: number;
    var DEPTH_CLEAR_VALUE: number;
    var DEPTH_COMPONENT: number;
    var DEPTH_COMPONENT16: number;
    var DEPTH_FUNC: number;
    var DEPTH_RANGE: number;
    var DEPTH_STENCIL: number;
    var DEPTH_STENCIL_ATTACHMENT: number;
    var DEPTH_TEST: number;
    var DEPTH_WRITEMASK: number;
    var DITHER: number;
    var DONT_CARE: number;
    var DST_ALPHA: number;
    var DST_COLOR: number;
    var DYNAMIC_DRAW: number;
    var ELEMENT_ARRAY_BUFFER: number;
    var ELEMENT_ARRAY_BUFFER_BINDING: number;
    var EQUAL: number;
    var FASTEST: number;
    var FLOAT: number;
    var FLOAT_MAT2: number;
    var FLOAT_MAT3: number;
    var FLOAT_MAT4: number;
    var FLOAT_VEC2: number;
    var FLOAT_VEC3: number;
    var FLOAT_VEC4: number;
    var FRAGMENT_SHADER: number;
    /**
     * From the OES_standard_derivatives extension.
     * http://www.khronos.org/registry/webgl/extensions/OES_standard_derivatives/
     */
    var FRAGMENT_SHADER_DERIVATIVE_HINT_OES: number;
    var FRAMEBUFFER: number;
    var FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: number;
    var FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: number;
    var FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: number;
    var FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: number;
    var FRAMEBUFFER_BINDING: number;
    var FRAMEBUFFER_COMPLETE: number;
    var FRAMEBUFFER_INCOMPLETE_ATTACHMENT: number;
    var FRAMEBUFFER_INCOMPLETE_DIMENSIONS: number;
    var FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: number;
    var FRAMEBUFFER_UNSUPPORTED: number;
    var FRONT: number;
    var FRONT_AND_BACK: number;
    var FRONT_FACE: number;
    var FUNC_ADD: number;
    var FUNC_REVERSE_SUBTRACT: number;
    var FUNC_SUBTRACT: number;
    var GENERATE_MIPMAP_HINT: number;
    var GEQUAL: number;
    var GREATER: number;
    var GREEN_BITS: number;
    /**
     * From the OES_texture_half_float extension.
     * http://www.khronos.org/registry/webgl/extensions/OES_texture_half_float/
     */
    var HALF_FLOAT_OES: number;
    var HIGH_FLOAT: number;
    var HIGH_INT: number;
    var INCR: number;
    var INCR_WRAP: number;
    var INT: number;
    var INT_VEC2: number;
    var INT_VEC3: number;
    var INT_VEC4: number;
    var INVALID_ENUM: number;
    var INVALID_FRAMEBUFFER_OPERATION: number;
    var INVALID_OPERATION: number;
    var INVALID_VALUE: number;
    var INVERT: number;
    var KEEP: number;
    var LEQUAL: number;
    var LESS: number;
    var LINEAR: number;
    var LINEAR_MIPMAP_LINEAR: number;
    var LINEAR_MIPMAP_NEAREST: number;
    var LINES: number;
    var LINE_LOOP: number;
    var LINE_STRIP: number;
    var LINE_WIDTH: number;
    var LINK_STATUS: number;
    var LOW_FLOAT: number;
    var LOW_INT: number;
    var LUMINANCE: number;
    var LUMINANCE_ALPHA: number;
    var MAX_COMBINED_TEXTURE_IMAGE_UNITS: number;
    var MAX_CUBE_MAP_TEXTURE_SIZE: number;
    var MAX_FRAGMENT_UNIFORM_VECTORS: number;
    var MAX_RENDERBUFFER_SIZE: number;
    var MAX_TEXTURE_IMAGE_UNITS: number;
    /**
     * From the EXT_texture_filter_anisotropic extension.
     * http://www.khronos.org/registry/webgl/extensions/EXT_texture_filter_anisotropic/
     */
    var MAX_TEXTURE_MAX_ANISOTROPY_EXT: number;
    var MAX_TEXTURE_SIZE: number;
    var MAX_VARYING_VECTORS: number;
    var MAX_VERTEX_ATTRIBS: number;
    var MAX_VERTEX_TEXTURE_IMAGE_UNITS: number;
    var MAX_VERTEX_UNIFORM_VECTORS: number;
    var MAX_VIEWPORT_DIMS: number;
    var MEDIUM_FLOAT: number;
    var MEDIUM_INT: number;
    var MIRRORED_REPEAT: number;
    var NEAREST: number;
    var NEAREST_MIPMAP_LINEAR: number;
    var NEAREST_MIPMAP_NEAREST: number;
    var NEVER: number;
    var NICEST: number;
    var NONE: number;
    var NOTEQUAL: number;
    var NO_ERROR: number;
    var ONE: number;
    var ONE_MINUS_CONSTANT_ALPHA: number;
    var ONE_MINUS_CONSTANT_COLOR: number;
    var ONE_MINUS_DST_ALPHA: number;
    var ONE_MINUS_DST_COLOR: number;
    var ONE_MINUS_SRC_ALPHA: number;
    var ONE_MINUS_SRC_COLOR: number;
    var OUT_OF_MEMORY: number;
    var PACK_ALIGNMENT: number;
    var POINTS: number;
    var POLYGON_OFFSET_FACTOR: number;
    var POLYGON_OFFSET_FILL: number;
    var POLYGON_OFFSET_UNITS: number;
    var RED_BITS: number;
    var RENDERBUFFER: number;
    var RENDERBUFFER_ALPHA_SIZE: number;
    var RENDERBUFFER_BINDING: number;
    var RENDERBUFFER_BLUE_SIZE: number;
    var RENDERBUFFER_DEPTH_SIZE: number;
    var RENDERBUFFER_GREEN_SIZE: number;
    var RENDERBUFFER_HEIGHT: number;
    var RENDERBUFFER_INTERNAL_FORMAT: number;
    var RENDERBUFFER_RED_SIZE: number;
    var RENDERBUFFER_STENCIL_SIZE: number;
    var RENDERBUFFER_WIDTH: number;
    var RENDERER: number;
    var REPEAT: number;
    var REPLACE: number;
    var RGB: number;
    var RGB565: number;
    var RGB5_A1: number;
    var RGBA: number;
    var RGBA4: number;
    var SAMPLER_2D: number;
    var SAMPLER_CUBE: number;
    var SAMPLES: number;
    var SAMPLE_ALPHA_TO_COVERAGE: number;
    var SAMPLE_BUFFERS: number;
    var SAMPLE_COVERAGE: number;
    var SAMPLE_COVERAGE_INVERT: number;
    var SAMPLE_COVERAGE_VALUE: number;
    var SCISSOR_BOX: number;
    var SCISSOR_TEST: number;
    var SHADER_TYPE: number;
    var SHADING_LANGUAGE_VERSION: number;
    var SHORT: number;
    var SRC_ALPHA: number;
    var SRC_ALPHA_SATURATE: number;
    var SRC_COLOR: number;
    var STATIC_DRAW: number;
    var STENCIL_ATTACHMENT: number;
    var STENCIL_BACK_FAIL: number;
    var STENCIL_BACK_FUNC: number;
    var STENCIL_BACK_PASS_DEPTH_FAIL: number;
    var STENCIL_BACK_PASS_DEPTH_PASS: number;
    var STENCIL_BACK_REF: number;
    var STENCIL_BACK_VALUE_MASK: number;
    var STENCIL_BACK_WRITEMASK: number;
    var STENCIL_BITS: number;
    var STENCIL_BUFFER_BIT: number;
    var STENCIL_CLEAR_VALUE: number;
    var STENCIL_FAIL: number;
    var STENCIL_FUNC: number;
    var STENCIL_INDEX: number;
    var STENCIL_INDEX8: number;
    var STENCIL_PASS_DEPTH_FAIL: number;
    var STENCIL_PASS_DEPTH_PASS: number;
    var STENCIL_REF: number;
    var STENCIL_TEST: number;
    var STENCIL_VALUE_MASK: number;
    var STENCIL_WRITEMASK: number;
    var STREAM_DRAW: number;
    var SUBPIXEL_BITS: number;
    var TEXTURE: number;
    var TEXTURE0: number;
    var TEXTURE1: number;
    var TEXTURE10: number;
    var TEXTURE11: number;
    var TEXTURE12: number;
    var TEXTURE13: number;
    var TEXTURE14: number;
    var TEXTURE15: number;
    var TEXTURE16: number;
    var TEXTURE17: number;
    var TEXTURE18: number;
    var TEXTURE19: number;
    var TEXTURE2: number;
    var TEXTURE20: number;
    var TEXTURE21: number;
    var TEXTURE22: number;
    var TEXTURE23: number;
    var TEXTURE24: number;
    var TEXTURE25: number;
    var TEXTURE26: number;
    var TEXTURE27: number;
    var TEXTURE28: number;
    var TEXTURE29: number;
    var TEXTURE3: number;
    var TEXTURE30: number;
    var TEXTURE31: number;
    var TEXTURE4: number;
    var TEXTURE5: number;
    var TEXTURE6: number;
    var TEXTURE7: number;
    var TEXTURE8: number;
    var TEXTURE9: number;
    var TEXTURE_2D: number;
    var TEXTURE_BINDING_2D: number;
    var TEXTURE_BINDING_CUBE_MAP: number;
    var TEXTURE_CUBE_MAP: number;
    var TEXTURE_CUBE_MAP_NEGATIVE_X: number;
    var TEXTURE_CUBE_MAP_NEGATIVE_Y: number;
    var TEXTURE_CUBE_MAP_NEGATIVE_Z: number;
    var TEXTURE_CUBE_MAP_POSITIVE_X: number;
    var TEXTURE_CUBE_MAP_POSITIVE_Y: number;
    var TEXTURE_CUBE_MAP_POSITIVE_Z: number;
    var TEXTURE_MAG_FILTER: number;
    /**
     * From the EXT_texture_filter_anisotropic extension.
     * http://www.khronos.org/registry/webgl/extensions/EXT_texture_filter_anisotropic/
     */
    var TEXTURE_MAX_ANISOTROPY_EXT: number;
    var TEXTURE_MIN_FILTER: number;
    var TEXTURE_WRAP_S: number;
    var TEXTURE_WRAP_T: number;
    var TRIANGLES: number;
    var TRIANGLE_FAN: number;
    var TRIANGLE_STRIP: number;
    /**
     * From the WEBGL_debug_renderer_info extension.
     * http://www.khronos.org/registry/webgl/extensions/WEBGL_debug_renderer_info/
     */
    var UNMASKED_RENDERER_WEBGL: number;
    /**
     * From the WEBGL_debug_renderer_info extension.
     * http://www.khronos.org/registry/webgl/extensions/WEBGL_debug_renderer_info/
     */
    var UNMASKED_VENDOR_WEBGL: number;
    var UNPACK_ALIGNMENT: number;
    var UNPACK_COLORSPACE_CONVERSION_WEBGL: number;
    var UNPACK_FLIP_Y_WEBGL: number;
    var UNPACK_PREMULTIPLY_ALPHA_WEBGL: number;
    var UNSIGNED_BYTE: number;
    var UNSIGNED_INT: number;
    var UNSIGNED_SHORT: number;
    var UNSIGNED_SHORT_4_4_4_4: number;
    var UNSIGNED_SHORT_5_5_5_1: number;
    var UNSIGNED_SHORT_5_6_5: number;
    var VALIDATE_STATUS: number;
    var VENDOR: number;
    var VERSION: number;
    /**
     * From the OES_vertex_array_object extension.
     * http://www.khronos.org/registry/webgl/extensions/OES_vertex_array_object/
     */
    var VERTEX_ARRAY_BINDING_OES: number;
    var VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: number;
    var VERTEX_ATTRIB_ARRAY_ENABLED: number;
    var VERTEX_ATTRIB_ARRAY_NORMALIZED: number;
    var VERTEX_ATTRIB_ARRAY_POINTER: number;
    var VERTEX_ATTRIB_ARRAY_SIZE: number;
    var VERTEX_ATTRIB_ARRAY_STRIDE: number;
    var VERTEX_ATTRIB_ARRAY_TYPE: number;
    var VERTEX_SHADER: number;
    var VIEWPORT: number;
    var ZERO: number;
}
declare module 'goog:goog.webgl' {
    import alias = ಠ_ಠ.clutz.goog.webgl;
    export = alias;
}
declare namespace ಠ_ಠ.clutz.goog.window {
    /**
     * Default height for popup windows
     */
    var DEFAULT_POPUP_HEIGHT: number;
    /**
     * Default target for popup windows
     */
    var DEFAULT_POPUP_TARGET: string;
    /**
     * Default width for popup windows
     */
    var DEFAULT_POPUP_WIDTH: number;
    /**
     * Opens a new window.
     * @param linkRef If an Object with an 'href' attribute (such as
     * HTMLAnchorElement) is passed then the value of 'href' is used, otherwise
     * its toString method is called. Note that if a string|Object is used, it
     * will be sanitized with SafeUrl.sanitize().
     * @param opt_options supports the following options: 'target': (string)
     * target (window name). If null, linkRef.target will be used. 'width':
     * (number) window width. 'height': (number) window height. 'top': (number)
     * distance from top of screen 'left': (number) distance from left of screen
     * 'toolbar': (boolean) show toolbar 'scrollbars': (boolean) show scrollbars
     * 'location': (boolean) show location 'statusbar': (boolean) show statusbar
     * 'menubar': (boolean) show menubar 'resizable': (boolean) resizable
     * 'noreferrer': (boolean) whether to attempt to remove the referrer header
     * from the request headers. Does this by opening a blank window that then
     * redirects to the target url, so users may see some flickering.
     * @param opt_parentWin Parent window that should be used to open the new
     * window.
     */
    function open(
        linkRef: null|string|GlobalObject, opt_options?: GlobalObject|null,
        opt_parentWin?: Window|null): Window|null;
    /**
     * Opens a new window without any real content in it.
     *
     * This can be used to get around popup blockers if you need to open a
     * window in response to a user event, but need to do asynchronous work to
     * determine the URL to open, and then set the URL later.
     *
     * Example usage:
     *
     * var newWin = goog.window.openBlank('Loading...');
     * setTimeout(
     * function() {
     * newWin.location.href = 'http://www.google.com';
     * }, 100);
     * @param opt_message String to show in the new window. This string will be
     * HTML-escaped to avoid XSS issues.
     * @param opt_options Options to open window with. {@see goog.window.open for exact option semantics}.
     * @param opt_parentWin Parent window that should be used to open the new
     * window.
     */
    function openBlank(
        opt_message?: string, opt_options?: GlobalObject|null,
        opt_parentWin?: Window|null): Window|null;
    /**
     * Raise a help popup window, defaulting to "Google standard" size and name.
     *
     * (If your project is using GXPs, consider using {@link PopUpLink.gxp}.)
     * @param linkRef If an Object with an 'href' attribute (such as
     * HTMLAnchorElement) is passed then the value of 'href' is used, otherwise
     * otherwise its toString method is called. Note that if a string|Object is
     * used, it will be sanitized with SafeUrl.sanitize().
     * @param opt_options Options to open window with. {@see goog.window.open for exact option semantics} Additional wrinkles to the options: - if 'target' field is null, linkRef.target will be used. If *that's* null, the default is "google_popup". - if 'width' field is not specified, the default is 690. - if 'height' field is not specified, the default is 500.
     */
    function popup(
        linkRef: null|string|GlobalObject,
        opt_options?: GlobalObject|null): boolean;
}
declare module 'goog:goog.window' {
    import alias = ಠ_ಠ.clutz.goog.window;
    export = alias;
}
declare namespace ಠ_ಠ.clutz {
    var module$external$com_google_javascript_closure_library$closure$goog$transitionalforwarddeclarations:
        any;
}
declare module 'goog:module$external$com_google_javascript_closure_library$closure$goog$transitionalforwarddeclarations' {
    import alias = ಠ_ಠ.clutz.module$external$com_google_javascript_closure_library$closure$goog$transitionalforwarddeclarations;
    export default alias;
}
declare namespace ಠ_ಠ.clutz.goog.defineClass {
    type ClassDescriptor = {
        constructor?: (...a: any[]) => any,
        statics?: GlobalObject | null
    };
}
declare namespace ಠ_ಠ.clutz.goog.debug.Trace_ {
    /**
     * A class to specify the types of the callback functions used by
     * {@code addTraceCallbacks}.
     */
    interface TracerCallbacks {
        /**
         * A callback function to be called at {@code addComment} with two
         * parameters: a string as the comment on the trace and an optional time
         * stamp number (in milliseconds since epoch) when the comment should be
         * added as a trace.
         */
        comment?: (a: string, b?: number|null) => any;
        /**
         * A callback function to be called at {@code startTrace} with two
         * parameters: a number as the started trace id and a string as the
         * comment on the trace.
         */
        start?: (a: number, b: string) => any;
        /**
         * A callback function to be called at {@code stopTrace} with one
         * parameter: a number as the trace id being stopped.
         */
        stop?: (a: number) => any;
    }
}
declare namespace ಠ_ಠ.clutz {
    /**
     * Base class for delegate registries.  Does not specify a policy for
     * handling multiple delegates.
     */
    class module$contents$goog$delegate$DelegateRegistry_DelegateRegistryBase<
        T = any> extends
        module$contents$goog$delegate$DelegateRegistry_DelegateRegistryBase_Instance<
            T> {}
    class
        module$contents$goog$delegate$DelegateRegistry_DelegateRegistryBase_Instance<
            T = any> {
        private noStructuralTyping_: any;
        /**
         * Configures this registry to allow late registration.  Normally it is
         * an error to register a delegate after calling `delegate()` or
         * `delegates()`. If late registration is allowed, then this is no
         * longer an error.  This check only ever happens in debug mode.
         * Returns this.
         */
        allowLateRegistration(): this;
        /**
         * Configures this registry to automatically cache instantiated
         * instances, rather than calling the constructor every time
         * `delegates()` is called. Returns this.
         */
        cacheInstantiation(): this;
        /**
         * Returns the first (highest priority) registered delegate, or
         * undefined if none was registered.
         * @param instantiate A function to instantiated constructors registered
         * with `registerClass`.  By default, this just calls the constructor
         * with no arguments.
         */
        delegate(instantiate?: (a: {new(): T}) => T): T|undefined;
        /**
         * Returns an array of all registered delegates, creating a fresh
         * instance of any registered classes.  The `instantiate` argument can
         * be passed to override how constructors are called.  The array will be
         * frozen in debug mode.
         * @param instantiate A function to instantiated constructors registered
         * with `registerClass`.  By default, this just calls the constructor
         * with no arguments.
         */
        delegates(instantiate?: (a: {new(): T}) => T): T[];
    }
}
declare namespace ಠ_ಠ.clutz {
    /**
     * Concrete (private) implementation of a non-iterator iterable.  This is
     * separate from the iterator versions since it supports iterables that
     * are not "one-shot".
     */
    class module$contents$goog$iter$es6_ShimIterableImpl<VALUE = any> extends
        module$contents$goog$iter$es6_ShimIterableImpl_Instance<VALUE> {}
    class module$contents$goog$iter$es6_ShimIterableImpl_Instance<VALUE = any>
        implements ಠ_ಠ.clutz.module$exports$goog$iter$es6.ShimIterable<any> {
        private noStructuralTyping_: any;
        /**
         * Concrete (private) implementation of a non-iterator iterable.  This
         * is separate from the iterator versions since it supports iterables
         * that are not "one-shot".
         */
        constructor(func: PrivateType);
        __iterator__(): any;
        toEs6(): any;
        toGoog(): any;
        [Symbol.iterator](): IterableIterator<VALUE>;
    }
}
declare namespace ಠ_ಠ.clutz {
    /**
     * This class represents the state of all forward channel requests.
     */
    class module$contents$goog$labs$net$webChannel$ForwardChannelRequestPool_ForwardChannelRequestPool
        extends
            module$contents$goog$labs$net$webChannel$ForwardChannelRequestPool_ForwardChannelRequestPool_Instance {
    }
    class
        module$contents$goog$labs$net$webChannel$ForwardChannelRequestPool_ForwardChannelRequestPool_Instance {
        private noStructuralTyping_: any;
        /**
         * This class represents the state of all forward channel requests.
         * @param opt_maxPoolSize The maximum pool size.
         */
        constructor(opt_maxPoolSize?: number);
        /**
         * Records pending messages, e.g. when a request receives a failed
         * response.
         * @param messages Pending messages.
         */
        addPendingMessages(messages: (
            ಠ_ಠ.clutz.goog.labs.net.webChannel.Wire.QueuedMap|null)[]): void;
        /**
         * Adds a new request to the pool.
         * @param req The new channel request.
         */
        addRequest(req: ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest):
            void;
        /**
         * Once we know the client protocol (from the handshake), check if we
         * need enable the request pool accordingly. This is more robust than
         * using browser-internal APIs (specific to Chrome).
         * @param clientProtocol The client protocol
         */
        applyClientProtocol(clientProtocol: string): void;
        /**
         * Clears the pool and cancel all the pending requests.
         */
        cancel(): void;
        /**
         * Clears any recorded pending messages.
         */
        clearPendingMessages(): void;
        /**
         * Cancels all pending requests and force the completion of channel
         * requests.
         *
         * Need go through the standard onRequestComplete logic to expose the
         * max-retry failure in the standard way.
         * @param onComplete The completion callback.
         */
        forceComplete(
            onComplete:
                (a: ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest) => any):
            boolean;
        getMaxSize(): number;
        getPendingMessages():
            (ಠ_ಠ.clutz.goog.labs.net.webChannel.Wire.QueuedMap|null)[];
        getRequestCount(): number;
        hasPendingRequest(): boolean;
        hasRequest(req: ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest|
                   null): boolean;
        isFull(): boolean;
        /**
         * Removes the given request from the pool.
         * @param req The channel request.
         */
        removeRequest(req: ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest|
                      null): boolean;
    }
}
declare namespace ಠ_ಠ.clutz.goog.proto2.TextFormatSerializer.Tokenizer_ {
    type Token = {
        type: ಠ_ಠ.clutz.goog.proto2.TextFormatSerializer.Tokenizer_.TokenTypes,
        value: string | null
    };
}
declare namespace ಠ_ಠ.clutz.goog.proto2.TextFormatSerializer.Tokenizer_ {
    /**
     * An enumeration of all the token types.
     */
    type TokenTypes = RegExp&{clutzEnumBrand: never};
    var TokenTypes: {
        CLOSE_BRACE: TokenTypes,
        CLOSE_LIST: TokenTypes,
        CLOSE_TAG: TokenTypes,
        COLON: TokenTypes,
        COMMA: TokenTypes,
        COMMENT: TokenTypes,
        END: TokenTypes,
        IDENTIFIER: TokenTypes,
        NUMBER: TokenTypes,
        OPEN_BRACE: TokenTypes,
        OPEN_LIST: TokenTypes,
        OPEN_TAG: TokenTypes,
        SEMI: TokenTypes,
        STRING: TokenTypes,
        WHITESPACE: TokenTypes,
    };
}
