import type * as CleanCSS from "clean-css";
import type * as RelateUrl from "relateurl";
import type * as Terser from "terser" with { "resolution-mode": "import" };

/**
 * Most of the options are disabled by default
 */
export interface MinifierOptions {
    /**
     * Treat attributes in case-sensitive manner (useful for custom HTML tags)
     * @default false
     */
    caseSensitive?: boolean;

    /**
     * [Omit attribute values from boolean attributes](http://perfectionkills.com/experimenting-with-html-minifier#collapse_boolean_attributes)
     * @default false
     */
    collapseBooleanAttributes?: boolean;

    /**
     * Don't leave any spaces between `display:inline;` elements when collapsing.
     * Must be used in conjunction with `collapseWhitespace=true`
     *
     * @default false
     */
    collapseInlineTagWhitespace?: boolean;

    /**
     * [Collapse white space that contributes to text nodes in a document tree](http://perfectionkills.com/experimenting-with-html-minifier#collapse_whitespace)
     * @default false
     */
    collapseWhitespace?: boolean;

    /**
     * Always collapse to 1 space (never remove it entirely).
     * Must be used in conjunction with `collapseWhitespace=true`
     *
     * @default false
     */
    conservativeCollapse?: boolean;

    /**
     * [Handle parse errors](https://html.spec.whatwg.org/multipage/parsing.html#parse-errors) instead of aborting
     * @default false
     */
    continueOnParseError?: boolean;

    /**
     * Arrays of regexes that allow to support custom attribute assign expressions
     * (e.g. `'<div flex?="{{mode != cover}}"></div>'`)
     *
     * @default []
     */
    customAttrAssign?: RegExp[];

    /**
     * Regex that specifies custom attribute to strip newlines from (e.g. `/ng-class/`)
     */
    customAttrCollapse?: RegExp;

    /**
     * Arrays of regexes that allow to support custom attribute surround expressions
     * (e.g. `<input {{#if value}}checked="checked"{{/if}}>`)
     *
     * @default []
     */
    customAttrSurround?: RegExp[];

    /**
     * Arrays of regexes that allow to support custom event attributes for `minifyJS` (e.g. `ng-click`)
     * @default [/^on[a-z]{3,}$/]
     */
    customEventAttributes?: RegExp[];

    /**
     * Set maximum quantifier limit for custom fragments to prevent ReDoS attacks
     * @default 200
     */
    customFragmentQuantifierLimit?: number;

    /**
     * Use direct Unicode characters whenever possible
     * @default false
     */
    decodeEntities?: boolean;

    /**
     * Parse input according to HTML5 specifications
     * @default true
     */
    html5?: boolean;

    /**
     * Array of regexes that allow to ignore certain comments, when matched
     * @default [/^!/, /^\s*#/]
     */
    ignoreCustomComments?: RegExp[];

    /**
     * Array of regexes that allow to ignore certain fragments, when matched
     * (e.g. `<?php ... ?>`, `{{ ... }}`, etc.)
     *
     * @default [/<%[\s\S]*?%>/, /<\?[\s\S]*?\?>/]
     */
    ignoreCustomFragments?: RegExp[];

    /**
     * Insert tags generated by HTML parser
     * @default true
     */
    includeAutoGeneratedTags?: boolean;

    /**
     * Array of custom element names to treat as inline, along with the built-in ones
     * @default []
     */
    inlineCustomElements?: ArrayLike<string>;

    /**
     * Keep the trailing slash on singleton elements
     * @default false
     */
    keepClosingSlash?: boolean;

    /**
     * Function for logging (`message` is usually a string or an Error)
     * @default undefined
     */
    log?: (message: unknown) => void;

    /**
     * Maximum input length to prevent ReDoS attacks (disabled by default)
     * @default undefined
     */
    maxInputLength?: number;

    /**
     * Specify a maximum line length.
     * Compressed output will be split by newlines at valid HTML split-points
     */
    maxLineLength?: number;

    /**
     * Minify CSS in style elements and style attributes
     * (uses [clean-css](https://github.com/jakubpawlowicz/clean-css))
     *
     * @default false
     */
    minifyCSS?: boolean | CleanCSS.Options | ((text: string, type?: string) => string | Promise<string>);

    /**
     * Minify JavaScript in script elements and event attributes
     * (uses [Terser](https://github.com/terser/terser))
     *
     * @default false
     */
    minifyJS?: boolean | Terser.MinifyOptions | ((text: string, inline?: boolean) => string | Promise<string>);

    /**
     * Minify URLs in various attributes
     * (uses [relateurl](https://github.com/stevenvachon/relateurl))
     *
     * @default false
     */
    minifyURLs?: boolean | string | RelateUrl.Options | ((text: string) => string | Promise<string>);

    /**
     * Never add a newline before a tag that closes an element
     * @default false
     */
    noNewlinesBeforeTagClose?: boolean;

    /**
     * Always collapse to 1 line break (never remove it entirely) when whitespace between tags include a line break.
     * Must be used in conjunction with `collapseWhitespace=true`
     *
     * @default false
     */
    preserveLineBreaks?: boolean;

    /**
     * Prevents the escaping of the values of attributes
     * @default false
     */
    preventAttributesEscaping?: boolean;

    /**
     * Process contents of conditional comments through minifier
     * @default false
     */
    processConditionalComments?: boolean;

    /**
     * Array of strings corresponding to types of script elements to process through minifier
     * (e.g. `text/ng-template`, `text/x-handlebars-template`, etc.)
     *
     * @default []
     */
    processScripts?: string[];

    /**
     * Type of quote to use for attribute values (`'` or `"`)
     */
    quoteCharacter?: "'" | "\"";

    /**
     * [Remove quotes around attributes when possible](http://perfectionkills.com/experimenting-with-html-minifier#remove_attribute_quotes)
     * @default false
     */
    removeAttributeQuotes?: boolean;

    /**
     * [Strip HTML comments](http://perfectionkills.com/experimenting-with-html-minifier#remove_comments)
     * @default false
     */
    removeComments?: boolean;

    /**
     * [Remove all attributes with whitespace-only values](http://perfectionkills.com/experimenting-with-html-minifier#remove_empty_or_blank_attributes)
     * @default false
     */
    removeEmptyAttributes?: boolean | ((attrName: string, tag: string) => boolean);

    /**
     * [Remove all elements with empty contents](http://perfectionkills.com/experimenting-with-html-minifier#remove_empty_elements)
     * @default false
     */
    removeEmptyElements?: boolean;

    /**
     * [Remove optional tags](http://perfectionkills.com/experimenting-with-html-minifier#remove_optional_tags)
     * @default false
     */
    removeOptionalTags?: boolean;

    /**
     * [Remove attributes when value matches default](http://perfectionkills.com/experimenting-with-html-minifier#remove_redundant_attributes)
     * @default false
     */
    removeRedundantAttributes?: boolean;

    /**
     * Remove `type="text/javascript"` from `script` tags.
     * Other `type` attribute values are left intact
     *
     * @default false
     */
    removeScriptTypeAttributes?: boolean;

    /**
     * Remove `type="text/css"` from `style` and `link` tags.
     * Other `type` attribute values are left intact
     *
     * @default false
     */
    removeStyleLinkTypeAttributes?: boolean;

    /**
     * Remove space between attributes whenever possible. **Note that this will result in invalid HTML!**
     * @default false
     */
    removeTagWhitespace?: boolean;

    /**
     * [Sort attributes by frequency](https://github.com/j9t/html-minifier-next?tab=readme-ov-file#sorting-attributes--style-classes)
     * @default false
     */
    sortAttributes?: boolean;

    /**
     * [Sort style classes by frequency](https://github.com/j9t/html-minifier-next?tab=readme-ov-file#sorting-attributes--style-classes)
     * @default false
     */
    sortClassName?: boolean;

    /**
     * Trim white space around `ignoreCustomFragments`
     * @default false
     */
    trimCustomFragments?: boolean;

    /**
     * Replaces the `doctype` with the short (HTML5) doctype
     * @default false
     */
    useShortDoctype?: boolean;
}

export function minify(value: string, options?: MinifierOptions): Promise<string>;

declare const _default: { minify: typeof minify };
export default _default;
