export = GridField;
declare function GridField(name: string, type: string, size: number | null, ...args: any[]): void;
declare class GridField {
    constructor(name: string, type: string, size: number | null, ...args: any[]);
    private logger_;
    value: any;
    private beforeValue;
    private clientValue;
    private clientCanModify;
    private fieldIndexCache;
    private _readOnlyChangedByGrid;
    private dispatchEvent;
    private handleDispatchFocusEvent;
    private handleDispatchBlurEvent;
    private handleOpenKey;
    private handleActions;
    private handleFieldActionsFunctions;
    canModify: boolean;
    private write;
    alignment: any;
    private written_;
    lookup(): void;
    grid: DetailGrid;
    private tree;
    private defaultLookupMultipleInsertListener_;
    private checkIfCanModify_;
    private calc;
    private requiresFilling;
    private appendInTreeStructure;
    private prepareTreeView;
    fieldIndexesToTreeSync: any[];
    dsOriginalTree: any;
    dsTreeIndexSuffix: string;
    dsTreeStructure: DataSet;
    private getNextFieldAtView;
    private getPriorFieldAtView;
    private getNextEditableFieldAtView;
    private getPriorEditableFieldAtView;
    private visibleAtView;
    private _checkInformedFields;
    private validateClassFieldChange_;
    validateInput: (value: any) => any;
    protected _checkSaveInputAsDefault(context: {
        processKey: number;
        interactionName: string;
        gridName: string;
    }): void;
    private loadSavedProfileValues;
    emit(event: any, ...args: any[]): any;
    focus(): void;
    private notFoundKeysCache_;
    private lastDBCacheRefresh_;
    private dbCacheKeyExists_;
    private valueToServerValue;
    private valueToClientValue;
    private validateLookupLicenseDependencies_;
    setValue(value: any, ...args: any[]): void;
    inSetValue: boolean;
    changed: any;
    resyncPending: boolean;
    setValueOnly(value: any): void;
    getValue(): any;
    private fillFirstValue;
    fillingFirstValue: boolean;
    private getUserInformedProperty;
    private checkValueError;
    private getLookupDisplay;
    getSavedValue(context: { processKey: number; interactionName: string; gridName: string }): any;
    private getFileDisplay;
    getComboValue(value: any): number | Record<any, any>;
    private getComboDisplay;
    private refreshClientValue;
    private getWriteInformation;
    private removeClassEvents;
    private getComboOptionDisplay;
    private _configWidth;
    height: any;
    private _width;
    private _tableViewWidth;
}
declare namespace GridField {
    export { LookupMultipleInsertEvent, DetailGrid };
}
type DetailGrid = import('./DetailGrid');
import DataSet = require('@nginstack/engine/lib/dataset/DataSet.js');
type LookupMultipleInsertEvent = import('../classdef/LookupMultipleInsertEvent');
