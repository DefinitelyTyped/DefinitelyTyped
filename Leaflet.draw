//declare module L.Map{
//	export function on(type: string,			fn: (e: L.LeafletEvent					) => void, context?: any): Map;
//	export function on(type: "draw:created",	fn: (e: L.Control.Draw.CreateEvent		) => void, context?: any);
//	export function on(type: "draw:edited",		fn: (e: L.Control.Draw.EditEvent		) => void, context?: any);
//	export function on(type: "draw:deleted",	fn: (e: L.Control.Draw.DeleteEvent		) => void, context?: any);
//	export function on(type: "draw:drawstart",	fn: (e: L.Control.Draw.DrawStartEvent	) => void, context?: any);
//	export function on(type: "draw:drawstop",	fn: (e: L.Control.Draw.DrawStopEvent	) => void, context?: any);
//	export function on(type: "draw:editstart",	fn: (e: L.Control.Draw.EditStartEvent	) => void, context?: any);
//	export function on(type: "draw:editstop",	fn: (e: L.Control.Draw.EditStopEvent	) => void, context?: any);
//	export function on(type: "draw:deletestart",fn: (e: L.Control.Draw.DeleteStartEvent	) => void, context?: any);
//	export function on(type: "draw:deletestop",	fn: (e: L.Control.Draw.DeleteStopEvent	) => void, context?: any);
//}
//can't figure how extend the overload signatures....

declare module L.Control{
	export class Draw extends L.Control{
		constructor(options:L.Control.Draw.ControlOptions);
		options:L.Control.Draw.ControlOptions;
		initialize:(options:L.Control.Draw.ControlOptions)=>void;
		setDrawingOptions:()=>void;
		callInitHooks:()=>void;
	}
}

declare module L.Control.Draw{
	export interface CreateEvent extends L.LeafletEvent{
		/** Layer that was just created.*/
		layer: ILayer;
		/** The type of layer this is. One of: polyline, polygon, rectangle, circle, marker*/
		layerType: string;
	}

	export interface EditEvent extends L.LeafletEvent{
		/** List of all layers just edited on the map.*/
		layers: LayerGroup;
	}
	export interface DeleteEvent extends L.LeafletEvent{
		/** List of all layers just removed from the map.*/
		layers: LayerGroup;
	}

	export interface DrawStartEvent extends L.LeafletEvent{
		/** The type of layer this is. One of: polyline, polygon, rectangle, circle, marker*/
		layerType: string;
	}
	export interface DrawStopEvent extends L.LeafletEvent{
		/** The type of layer this is. One of: polyline, polygon, rectangle, circle, marker*/
		layerType: string;
	}

	export interface EditStartEvent extends L.LeafletEvent{
		/** The type of edit this is. One of: edit*/
		handler: string;
	}
	export interface EditStopEvent extends L.LeafletEvent{
		/** The type of edit this is. One of: edit*/
		handler: string;
	}

	export interface DeleteStartEvent extends L.LeafletEvent{
		/** The type of edit this is. One of: remove*/
		handler: string;
	}
	export interface DeleteStopEvent extends L.LeafletEvent{
		/** The type of edit this is. One of: remove*/
		handler: string;
	}

	export interface ControlOptions extends L.ControlOptions{

		/**
		  * The options used to configure the draw toolbar.
		  * Default value: {}.
		  */
		draw?: DrawOptions;

		
		/**
		  * The options used to configure the edit toolbar.
		  * Default value: false.
		  */
		edit?: EditOptions;
	}
	export interface DrawOptions {

		/**
		  * Polyline draw handler options. Set to false to disable handler.
		  * Default value: {}.
		  */
		polyline?: PolylineDrawOptions;

		/**
		  * Polygon draw handler options. Set to false to disable handler.
		  * Default value:  {}.
		  */
		polygon?: PolygonOptions;

		/**
		  * Rectangle draw handler options. Set to false to disable handler.
		  * Default value:  {}.
		  */
		rectangle?: RectangleOptions;

		/**
		  * Circle draw handler options. Set to false to disable handler.
		  * Default value:  {}.
		  */
		circle?: CircleOptions;

		/**
		  * Marker draw handler options. Set to false to disable handler.
		  * Default value:  {}.
		  */
		marker?: MarkerOptions;
	}
	export interface PolylineDrawOptions{

		/**
		  * Determines if line segments can cross.
		  * Default value: true.
		  */
		allowIntersection?: boolean;

		/**
		  * Configuration options for the error that displays if an intersection is detected.
		  * Default value: {color: '#b00b00',timeout: 2500}.
		  */
		drawError?: {color:string;timeout:number;};

		/**
		  * Distance in pixels between each guide dash.
		  * Default value: 20.
		  */
		guidelineDistance?: number;

		/**
		  * The options used when drawing the polyline/polygon on the map.
		  * Default value: {
				stroke: true,
				color: '#f06eaa',
				weight: 4,
				opacity: 0.5,
				fill: false,
				clickable: true
			}*/
		shapeOptions?: PolylineOptions;

		/**
		  * Determines which measurement system (metric or imperial) is used.
		  * Default value: true.
		  */
		metric?: boolean;

		/**
		  * This should be a high number to ensure that you can draw over all other layers on the map.
		  * Default value: 2000.
		  */
		zIndexOffset?: number;

		/**
		  * Determines if the draw tool remains enabled after drawing a shape.
		  * Default value: false.
		  */
		repeatMode?: boolean;
	}
	export interface PolygonOptions extends PolylineDrawOptions{

		/**
		  * Show the area of the drawn polygon in m², ha or km². The area is only approximate and become less accurate the larger the polygon is.
		  * Default value: false.
		  */
		showArea?: boolean;
	}
	export interface RectangleOptions{

		/**
		  * The options used when drawing the rectangle on the map.
		  * Default value: Default value: {
				stroke: true,
				color: '#f06eaa',
				weight: 4,
				opacity: 0.5,
				fill: true,
				fillColor: null, //same as color by default
				fillOpacity: 0.2,
				clickable: true
			}*/
		shapeOptions?: PathOptions;

		/**
		  * Determines if the draw tool remains enabled after drawing a shape.
		  * Default value: false.
		  */
		repeatMode?: boolean;
	}
	export interface CircleOptions{

		/** The options used when drawing the circle on the map.
		  * Default value: Default value: {
				stroke: true,
				color: '#f06eaa',
				weight: 4,
				opacity: 0.5,
				fill: true,
				fillColor: null, //same as color by default
				fillOpacity: 0.2,
				clickable: true
			}*/
		shapeOptions?: PathOptions;

		/**
		  * Determines if the draw tool remains enabled after drawing a shape.
		  * Default value: false.
		  */
		repeatMode?: boolean;
	}
	export interface EditOptions{

		/**
		  * This is the FeatureGroup that stores all editable shapes. THIS IS REQUIRED FOR THE EDIT TOOLBAR TO WORK
		  * Default value: null.
		  */
		featureGroup?: FeatureGroup;

		/**
		  * Edit handler options. Set to false to disable handler.
		  * Default value:  {}.
		  */
		edit?: EditHandlerOptions;

		/**
		  * Delete handler options. Set to false to disable handler.
		  * Default value:  {}.
		  */
		remove?: DeleteHandlerOptions;
	}
	export interface EditHandlerOptions{

		/**
		  * The path options for how the layers will look while in edit mode. If this is set to null the editable path options will not be set.
		  * Default value: ???.
		  */
		selectedPathOptions?: PathOptions;
	}
	export interface DeleteHandlerOptions{

	}
}
