// Type definitions for aurelia-fetch-client v1.0.0-beta.1.2.1 
// Project: https://github.com/aurelia/fetch-client/
// Definitions by: Behzad abbai <https://github.com/behzad888>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

declare module 'aurelia-fetch-client' {
  
  /* eslint-disable */
  /**
  * Interceptors can process requests before they are sent, and responses
  * before they are returned to callers.
  */
  export interface Interceptor {
    
    /**
      * Called with the request before it is sent. Request interceptors can modify and
      * return the request, or return a new one to be sent. If desired, the interceptor
      * may return a Response in order to short-circuit the HTTP request itself.
      *
      * @param request - The request to be sent.
      */
    request?: (request: Request) => Request | Response | Promise<Request | Response>;
    
    /**
      * Handles errors generated by previous request interceptors. This function acts
      * as a Promise rejection handler. It may rethrow the error to propagate the
      * failure, or return a new Request or Response to recover.
      *
      * @param error - The rejection value from the previous interceptor.
      */
    requestError?: (error: any) => Request | Response | Promise<Request | Response>;
    
    /**
      * Called with the response after it is received. Response interceptors can modify
      * and return the Response, or create a new one to be returned to the caller.
      *
      * @param response - The response.
      */
    response?: (response: Response, request?: Request) => Response | Promise<Response>;
    
    /**
       * Handles fetch errors and errors generated by previous interceptors. This
       * function acts as a Promise rejection handler. It may rethrow the error
       * to propagate the failure, or return a new Response to recover.
       *
       * @param error - The rejection value from the fetch request or from a
       * previous interceptor.
       */
    responseError?: (error: any, request?: Request) => Response | Promise<Response>;
  }
  
  /**
  * The init object used to initialize a fetch Request.
  * See https://developer.mozilla.org/en-US/docs/Web/API/Request/Request
  */
  /**
  * The init object used to initialize a fetch Request.
  * See https://developer.mozilla.org/en-US/docs/Web/API/Request/Request
  */
  export interface RequestInit {
    method?: string;
    headers?: Headers | Object;
    body?: Blob | BufferSource | FormData | URLSearchParams | string;
    mode?: string;
    credentials?: string;
    cache?: string;
  }
  
  /**
  * Create a Blob containing JSON-serialized data.
  * Useful for easily creating JSON fetch request bodies.
  *
  * @param body - The object to be serialized to JSON.
  */
  export function json(body: any): Blob;
  
  /**
  * A class for configuring HttpClients.
  */
  /**
  * A class for configuring HttpClients.
  */
  export class HttpClientConfiguration {
    
    /**
      * The base URL to be prepended to each Request's url before sending.
      */
    baseUrl: string;
    
    /**
      * Default values to apply to init objects when creating Requests. Note that
      * defaults cannot be applied when Request objects are manually created because
      * Request provides its own defaults and discards the original init object.
      * See also https://developer.mozilla.org/en-US/docs/Web/API/Request/Request
      */
    defaults: RequestInit;
    
    /**
      * Interceptors to be added to the HttpClient.
      */
    interceptors: Interceptor[];
    
    /**
      * Sets the baseUrl.
      *
      * @param baseUrl - The base URL.
      * @chainable
      */
    withBaseUrl(baseUrl: string): HttpClientConfiguration;
    
    /**
      * Sets the defaults.
      *
      * @param defaults - The defaults.
      * @chainable
      */
    withDefaults(defaults: RequestInit): HttpClientConfiguration;
    
    /**
      * Adds an interceptor to be run on all requests or responses.
      *
      * @param interceptor - An object with request, requestError,
      * response, or responseError methods. request and requestError act as
      * resolve and reject handlers for the Request before it is sent.
      * response and responseError act as resolve and reject handlers for
      * the Response after it has been received.
      * @chainable
      */
    withInterceptor(interceptor: Interceptor): HttpClientConfiguration;
    
    /**
      * Applies a configuration that addresses common application needs, including
      * configuring same-origin credentials, and using rejectErrorResponses.
      *
      * @chainable
      */
    useStandardConfiguration(): HttpClientConfiguration;
    
    /**
      * Causes Responses whose status codes fall outside the range 200-299 to reject.
      * The fetch API only rejects on network errors or other conditions that prevent
      * the request from completing, meaning consumers must inspect Response.ok in the
      * Promise continuation to determine if the server responded with a success code.
      * This method adds a response interceptor that causes Responses with error codes
      * to be rejected, which is common behavior in HTTP client libraries.
      *
      * @chainable
      */
    rejectErrorResponses(): HttpClientConfiguration;
  }
  
  /**
  * An HTTP client based on the Fetch API.
  */
  export class HttpClient {
    
    /**
      * The current number of active requests.
      * Requests being processed by interceptors are considered active.
      */
    activeRequestCount: number;
    
    /**
      * Indicates whether or not the client is currently making one or more requests.
      */
    isRequesting: boolean;
    
    /**
      * Indicates whether or not the client has been configured.
      */
    isConfigured: boolean;
    
    /**
      * The base URL set by the config.
      */
    baseUrl: string;
    
    /**
      * The default request init to merge with values specified at request time.
      */
    defaults: RequestInit;
    
    /**
      * The interceptors to be run during requests.
      */
    interceptors: Interceptor[];
    constructor();
    
    /**
      * Configure this client with default settings to be used by all requests.
      *
      * @param config - A configuration object, or a function that takes a config
      * object and configures it.
      *
      * @chainable
      */
    configure(config: RequestInit | ((config: HttpClientConfiguration) => void | HttpClientConfiguration)): HttpClient;
    
    /**
      * Starts the process of fetching a resource. Default configuration parameters
      * will be applied to the Request. The constructed Request will be passed to
      * registered request interceptors before being sent. The Response will be passed
      * to registered Response interceptors before it is returned.
      *
      * See also https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API
      *
      * @param input - The resource that you wish to fetch. Either a
      * Request object, or a string containing the URL of the resource.
      * @param - An options object containing settings to be applied to
      * the Request.
      */
    fetch(input: Request | string, init?: RequestInit): Promise<Response>;
  }
}
// Type definitions for fetch API
// Project: https://github.com/github/fetch
// Definitions by: Ryan Graham <https://github.com/ryan-codingintrigue>
// Definitions: https://github.com/borisyankov/DefinitelyTyped

// @cmichaelgraham - removed explicit external reference

// @cmichaelgraham - added BufferSource and URLSearchParams interfaces to help compilation
interface BufferSource {}
interface URLSearchParams {}

declare class Request {
	constructor(input: string|Request, init?:RequestInit);
	method: string;
	url: string;
	headers: Headers;
	context: RequestContext;
	referrer: string;
	mode: RequestMode;
	credentials: RequestCredentials;
	cache: RequestCache;
}

interface RequestInit {
	method?: string;
	headers?: HeaderInit|{ [index: string]: string };
	body?: BodyInit;
	mode?: RequestMode;
	credentials?: RequestCredentials;
	cache?: RequestCache;
}

declare enum RequestContext {
	"audio", "beacon", "cspreport", "download", "embed", "eventsource", "favicon", "fetch",
	"font", "form", "frame", "hyperlink", "iframe", "image", "imageset", "import",
	"internal", "location", "manifest", "object", "ping", "plugin", "prefetch", "script",
	"serviceworker", "sharedworker", "subresource", "style", "track", "video", "worker",
	"xmlhttprequest", "xslt"
}
declare enum RequestMode { "same-origin", "no-cors", "cors" }
declare enum RequestCredentials { "omit", "same-origin", "include" }
declare enum RequestCache { "default", "no-store", "reload", "no-cache", "force-cache", "only-if-cached" }

declare class Headers {
	append(name: string, value: string): void;
	delete(name: string):void;
	get(name: string): string;
	getAll(name: string): Array<string>;
	has(name: string): boolean;
	set(name: string, value: string): void;
}

declare class Body {
	bodyUsed: boolean;
	arrayBuffer(): Promise<ArrayBuffer>;
	blob(): Promise<Blob>;
	formData(): Promise<FormData>;
	json(): Promise<any>;
	text(): Promise<string>;
}
declare class Response extends Body {
	constructor(body?: BodyInit, init?: ResponseInit);
	error(): Response;
	redirect(url: string, status: number): Response;
	type: ResponseType;
	url: string;
	status: number;
	ok: boolean;
	statusText: string;
	headers: Headers;
	clone(): Response;
}

declare enum ResponseType { "basic", "cors", "default", "error", "opaque" }

declare class ResponseInit {
	status: number;
	statusText: string;
	headers: HeaderInit;
}

declare type HeaderInit = Headers|Array<string>;
declare type BodyInit = Blob|FormData|string;
declare type RequestInfo = Request|string;

interface Window {
	fetch(url: string, init?: RequestInit): Promise<Response>;
}