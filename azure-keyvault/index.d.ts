/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { ServiceClientOptions, RequestOptions, ServiceCallback, ServiceClientCredentials } from 'ms-rest';
import * as models from "./models";

declare class KeyVaultClient {
    /**
     * @class
     * Initializes a new instance of the KeyVaultClient class.
     * @constructor
     *
     * @param {credentials} credentials - Credentials needed for the client to connect to Azure.
     *
     * @param {object} [options] - The parameter options
     *
     * @param {Array} [options.filters] - Filters to be added to the request pipeline
     *
     * @param {object} [options.requestOptions] - Options for the underlying request object
     * {@link https://github.com/request/request#requestoptions-callback Options doc}
     *
     * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
     *
     * @param {string} [options.apiVersion] - Client Api Version.
     *
     * @param {string} [options.acceptLanguage] - Gets or sets the preferred language for the response.
     *
     * @param {number} [options.longRunningOperationRetryTimeout] - Gets or sets the retry timeout in seconds for Long Running Operations. Default value is 30.
     *
     * @param {boolean} [options.generateClientRequestId] - When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.
     *
     */
    constructor(credentials: ServiceClientCredentials, options: ServiceClientOptions);

    credentials: ServiceClientCredentials;

    apiVersion: string;

    acceptLanguage: string;

    longRunningOperationRetryTimeout: number;

    generateClientRequestId: boolean;

            /**
         * Creates a new, named, key in the specified vault.
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {string} keyName The name of the key
         * 
         * @param {string} kty The type of key to create. Valid key types, see
         * JsonWebKeyType. Supported JsonWebKey key types (kty) for Elliptic Curve,
         * RSA, HSM, Octet. Possible values include: 'EC', 'RSA', 'RSA-HSM', 'oct'
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {number} [options.keySize] The key size in bytes. e.g. 1024 or 2048.
         * 
         * @param {array} [options.keyOps]
         * 
         * @param {object} [options.keyAttributes]
         * 
         * @param {boolean} [options.keyAttributes.enabled] Determines whether the
         * object is enabled
         * 
         * @param {date} [options.keyAttributes.notBefore] Not before date in UTC
         * 
         * @param {date} [options.keyAttributes.expires] Expiry date in UTC
         * 
         * @param {object} [options.tags] Application-specific metadata in the form of
         * key-value pairs
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        createKey(vaultBaseUrl: string, keyName: string, kty: string, options: { keySize? : number, keyOps? : string[], keyAttributes? : models.KeyAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KeyBundle>): void;
        createKey(vaultBaseUrl: string, keyName: string, kty: string, callback: ServiceCallback<models.KeyBundle>): void;

        /**
         * Imports a key into the specified vault
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {string} keyName The name of the key
         * 
         * @param {object} key The Json web key
         * 
         * @param {string} [key.kid] Key Identifier
         * 
         * @param {string} [key.kty] Supported JsonWebKey key types (kty) for Elliptic
         * Curve, RSA, HSM, Octet, usually RSA. Possible values include: 'EC', 'RSA',
         * 'RSA-HSM', 'oct'
         * 
         * @param {array} [key.keyOps]
         * 
         * @param {buffer} [key.n] RSA modulus
         * 
         * @param {buffer} [key.e] RSA public exponent
         * 
         * @param {buffer} [key.d] RSA private exponent
         * 
         * @param {buffer} [key.dp] RSA Private Key Parameter
         * 
         * @param {buffer} [key.dq] RSA Private Key Parameter
         * 
         * @param {buffer} [key.qi] RSA Private Key Parameter
         * 
         * @param {buffer} [key.p] RSA secret prime
         * 
         * @param {buffer} [key.q] RSA secret prime, with p < q
         * 
         * @param {buffer} [key.k] Symmetric key
         * 
         * @param {buffer} [key.t] HSM Token, used with Bring Your Own Key
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {boolean} [options.hsm] Whether to import as a hardware key (HSM) or
         * software key
         * 
         * @param {object} [options.keyAttributes] The key management attributes
         * 
         * @param {boolean} [options.keyAttributes.enabled] Determines whether the
         * object is enabled
         * 
         * @param {date} [options.keyAttributes.notBefore] Not before date in UTC
         * 
         * @param {date} [options.keyAttributes.expires] Expiry date in UTC
         * 
         * @param {object} [options.tags] Application-specific metadata in the form of
         * key-value pairs
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        importKey(vaultBaseUrl: string, keyName: string, key: models.JsonWebKey, options: { hsm? : boolean, keyAttributes? : models.KeyAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KeyBundle>): void;
        importKey(vaultBaseUrl: string, keyName: string, key: models.JsonWebKey, callback: ServiceCallback<models.KeyBundle>): void;

        /**
         * Deletes the specified key
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {string} keyName The name of the key
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        deleteKey(vaultBaseUrl: string, keyName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KeyBundle>): void;
        deleteKey(vaultBaseUrl: string, keyName: string, callback: ServiceCallback<models.KeyBundle>): void;

        /**
         * Updates the Key Attributes associated with the specified key
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {string} keyName The name of the key
         * 
         * @param {string} keyVersion The version of the key
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {array} [options.keyOps] Json web key operations. For more
         * information on possible key operations, see JsonWebKeyOperation.
         * 
         * @param {object} [options.keyAttributes]
         * 
         * @param {boolean} [options.keyAttributes.enabled] Determines whether the
         * object is enabled
         * 
         * @param {date} [options.keyAttributes.notBefore] Not before date in UTC
         * 
         * @param {date} [options.keyAttributes.expires] Expiry date in UTC
         * 
         * @param {object} [options.tags] Application-specific metadata in the form of
         * key-value pairs
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        updateKey(vaultBaseUrl: string, keyName: string, keyVersion: string, options: { keyOps? : string[], keyAttributes? : models.KeyAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KeyBundle>): void;
        updateKey(vaultBaseUrl: string, keyName: string, keyVersion: string, callback: ServiceCallback<models.KeyBundle>): void;

        /**
         * Retrieves the public portion of a key plus its attributes
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {string} keyName The name of the key
         * 
         * @param {string} keyVersion The version of the key
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getKey(vaultBaseUrl: string, keyName: string, keyVersion: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KeyBundle>): void;
        getKey(vaultBaseUrl: string, keyName: string, keyVersion: string, callback: ServiceCallback<models.KeyBundle>): void;

        /**
         * List the versions of the specified key
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {string} keyName The name of the key
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {number} [options.maxresults] Maximum number of results to return in
         * a page. If not specified the service will return up to 25 results.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getKeyVersions(vaultBaseUrl: string, keyName: string, options: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KeyListResult>): void;
        getKeyVersions(vaultBaseUrl: string, keyName: string, callback: ServiceCallback<models.KeyListResult>): void;

        /**
         * List keys in the specified vault
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {number} [options.maxresults] Maximum number of results to return in
         * a page. If not specified the service will return up to 25 results.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getKeys(vaultBaseUrl: string, options: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KeyListResult>): void;
        getKeys(vaultBaseUrl: string, callback: ServiceCallback<models.KeyListResult>): void;

        /**
         * Requests that a backup of the specified key be downloaded to the client.
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {string} keyName The name of the key
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        backupKey(vaultBaseUrl: string, keyName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupKeyResult>): void;
        backupKey(vaultBaseUrl: string, keyName: string, callback: ServiceCallback<models.BackupKeyResult>): void;

        /**
         * Restores the backup key in to a vault
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {buffer} keyBundleBackup the backup blob associated with a key bundle
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        restoreKey(vaultBaseUrl: string, keyBundleBackup: Buffer, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KeyBundle>): void;
        restoreKey(vaultBaseUrl: string, keyBundleBackup: Buffer, callback: ServiceCallback<models.KeyBundle>): void;

        /**
         * Encrypts an arbitrary sequence of bytes using an encryption key that is
         * stored in Azure Key Vault.
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {string} keyName The name of the key
         * 
         * @param {string} keyVersion The version of the key
         * 
         * @param {string} algorithm algorithm identifier. Possible values include:
         * 'RSA-OAEP', 'RSA1_5'
         * 
         * @param {buffer} value
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        encrypt(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: string, value: Buffer, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KeyOperationResult>): void;
        encrypt(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: string, value: Buffer, callback: ServiceCallback<models.KeyOperationResult>): void;

        /**
         * Decrypts a single block of encrypted data
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {string} keyName The name of the key
         * 
         * @param {string} keyVersion The version of the key
         * 
         * @param {string} algorithm algorithm identifier. Possible values include:
         * 'RSA-OAEP', 'RSA1_5'
         * 
         * @param {buffer} value
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        decrypt(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: string, value: Buffer, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KeyOperationResult>): void;
        decrypt(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: string, value: Buffer, callback: ServiceCallback<models.KeyOperationResult>): void;

        /**
         * Creates a signature from a digest using the specified key in the vault
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {string} keyName The name of the key
         * 
         * @param {string} keyVersion The version of the key
         * 
         * @param {string} algorithm The signing/verification algorithm identifier. For
         * more information on possible algorithm types, see
         * JsonWebKeySignatureAlgorithm. Possible values include: 'RS256', 'RS384',
         * 'RS512', 'RSNULL'
         * 
         * @param {buffer} value
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        sign(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: string, value: Buffer, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KeyOperationResult>): void;
        sign(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: string, value: Buffer, callback: ServiceCallback<models.KeyOperationResult>): void;

        /**
         * Verifies a signature using the specified key
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {string} keyName The name of the key
         * 
         * @param {string} keyVersion The version of the key
         * 
         * @param {string} algorithm The signing/verification algorithm. For more
         * information on possible algorithm types, see JsonWebKeySignatureAlgorithm.
         * Possible values include: 'RS256', 'RS384', 'RS512', 'RSNULL'
         * 
         * @param {buffer} digest The digest used for signing
         * 
         * @param {buffer} signature The signature to be verified
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        verify(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: string, digest: Buffer, signature: Buffer, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KeyVerifyResult>): void;
        verify(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: string, digest: Buffer, signature: Buffer, callback: ServiceCallback<models.KeyVerifyResult>): void;

        /**
         * Wraps a symmetric key using the specified key
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {string} keyName The name of the key
         * 
         * @param {string} keyVersion The version of the key
         * 
         * @param {string} algorithm algorithm identifier. Possible values include:
         * 'RSA-OAEP', 'RSA1_5'
         * 
         * @param {buffer} value
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        wrapKey(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: string, value: Buffer, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KeyOperationResult>): void;
        wrapKey(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: string, value: Buffer, callback: ServiceCallback<models.KeyOperationResult>): void;

        /**
         * Unwraps a symmetric key using the specified key in the vault that has
         * initially been used for wrapping the key.
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {string} keyName The name of the key
         * 
         * @param {string} keyVersion The version of the key
         * 
         * @param {string} algorithm algorithm identifier. Possible values include:
         * 'RSA-OAEP', 'RSA1_5'
         * 
         * @param {buffer} value
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        unwrapKey(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: string, value: Buffer, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KeyOperationResult>): void;
        unwrapKey(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: string, value: Buffer, callback: ServiceCallback<models.KeyOperationResult>): void;

        /**
         * Sets a secret in the specified vault.
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {string} secretName The name of the secret in the given vault
         * 
         * @param {string} value The value of the secret
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.tags] Application-specific metadata in the form of
         * key-value pairs
         * 
         * @param {string} [options.contentType] Type of the secret value such as a
         * password
         * 
         * @param {object} [options.secretAttributes] The secret management attributes
         * 
         * @param {boolean} [options.secretAttributes.enabled] Determines whether the
         * object is enabled
         * 
         * @param {date} [options.secretAttributes.notBefore] Not before date in UTC
         * 
         * @param {date} [options.secretAttributes.expires] Expiry date in UTC
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        setSecret(vaultBaseUrl: string, secretName: string, value: string, options: { tags? : { [propertyName: string]: string }, contentType? : string, secretAttributes? : models.SecretAttributes, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecretBundle>): void;
        setSecret(vaultBaseUrl: string, secretName: string, value: string, callback: ServiceCallback<models.SecretBundle>): void;

        /**
         * Deletes a secret from the specified vault.
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {string} secretName The name of the secret in the given vault
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        deleteSecret(vaultBaseUrl: string, secretName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecretBundle>): void;
        deleteSecret(vaultBaseUrl: string, secretName: string, callback: ServiceCallback<models.SecretBundle>): void;

        /**
         * Updates the attributes associated with the specified secret
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {string} secretName The name of the secret in the given vault
         * 
         * @param {string} secretVersion The version of the secret
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {string} [options.contentType] Type of the secret value such as a
         * password
         * 
         * @param {object} [options.secretAttributes] The secret management attributes
         * 
         * @param {boolean} [options.secretAttributes.enabled] Determines whether the
         * object is enabled
         * 
         * @param {date} [options.secretAttributes.notBefore] Not before date in UTC
         * 
         * @param {date} [options.secretAttributes.expires] Expiry date in UTC
         * 
         * @param {object} [options.tags] Application-specific metadata in the form of
         * key-value pairs
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        updateSecret(vaultBaseUrl: string, secretName: string, secretVersion: string, options: { contentType? : string, secretAttributes? : models.SecretAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecretBundle>): void;
        updateSecret(vaultBaseUrl: string, secretName: string, secretVersion: string, callback: ServiceCallback<models.SecretBundle>): void;

        /**
         * Gets a secret.
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {string} secretName The name of the secret in the given vault
         * 
         * @param {string} secretVersion The version of the secret
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getSecret(vaultBaseUrl: string, secretName: string, secretVersion: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecretBundle>): void;
        getSecret(vaultBaseUrl: string, secretName: string, secretVersion: string, callback: ServiceCallback<models.SecretBundle>): void;

        /**
         * List secrets in the specified vault
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {number} [options.maxresults] Maximum number of results to return in
         * a page. If not specified the service will return up to 25 results.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getSecrets(vaultBaseUrl: string, options: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecretListResult>): void;
        getSecrets(vaultBaseUrl: string, callback: ServiceCallback<models.SecretListResult>): void;

        /**
         * List the versions of the specified secret
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {string} secretName The name of the secret in the given vault
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {number} [options.maxresults] Maximum number of results to return in
         * a page. If not specified the service will return up to 25 results.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getSecretVersions(vaultBaseUrl: string, secretName: string, options: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecretListResult>): void;
        getSecretVersions(vaultBaseUrl: string, secretName: string, callback: ServiceCallback<models.SecretListResult>): void;

        /**
         * List certificates in the specified vault
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {number} [options.maxresults] Maximum number of results to return in
         * a page. If not specified the service will return up to 25 results.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getCertificates(vaultBaseUrl: string, options: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateListResult>): void;
        getCertificates(vaultBaseUrl: string, callback: ServiceCallback<models.CertificateListResult>): void;

        /**
         * Deletes a certificate from the specified vault.
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {string} certificateName The name of the certificate in the given
         * vault
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        deleteCertificate(vaultBaseUrl: string, certificateName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateBundle>): void;
        deleteCertificate(vaultBaseUrl: string, certificateName: string, callback: ServiceCallback<models.CertificateBundle>): void;

        /**
         * Sets the certificate contacts for the specified vault.
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {object} contacts The contacts for the vault certificates.
         * 
         * @param {array} [contacts.contactList] The contact list for the vault
         * certificates.
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        setCertificateContacts(vaultBaseUrl: string, contacts: models.Contacts, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Contacts>): void;
        setCertificateContacts(vaultBaseUrl: string, contacts: models.Contacts, callback: ServiceCallback<models.Contacts>): void;

        /**
         * Gets the certificate contacts for the specified vault.
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getCertificateContacts(vaultBaseUrl: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Contacts>): void;
        getCertificateContacts(vaultBaseUrl: string, callback: ServiceCallback<models.Contacts>): void;

        /**
         * Deletes the certificate contacts for the specified vault.
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        deleteCertificateContacts(vaultBaseUrl: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Contacts>): void;
        deleteCertificateContacts(vaultBaseUrl: string, callback: ServiceCallback<models.Contacts>): void;

        /**
         * List certificate issuers for the specified vault.
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {number} [options.maxresults] Maximum number of results to return in
         * a page. If not specified the service will return up to 25 results.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getCertificateIssuers(vaultBaseUrl: string, options: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateIssuerListResult>): void;
        getCertificateIssuers(vaultBaseUrl: string, callback: ServiceCallback<models.CertificateIssuerListResult>): void;

        /**
         * Sets the specified certificate issuer.
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {string} issuerName The name of the issuer.
         * 
         * @param {string} provider The issuer provider.
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.credentials] The credentials to be used for the
         * issuer.
         * 
         * @param {string} [options.credentials.accountId] The user name/account
         * name/account id.
         * 
         * @param {string} [options.credentials.password] The password/secret/account
         * key.
         * 
         * @param {object} [options.organizationDetails] Details of the organization as
         * provided to the issuer.
         * 
         * @param {string} [options.organizationDetails.id] Id of the organization.
         * 
         * @param {array} [options.organizationDetails.adminDetails] Details of the
         * organization administrator.
         * 
         * @param {object} [options.attributes] Attributes of the issuer object.
         * 
         * @param {boolean} [options.attributes.enabled] Determines whether the issuer
         * is enabled
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        setCertificateIssuer(vaultBaseUrl: string, issuerName: string, provider: string, options: { credentials? : models.IssuerCredentials, organizationDetails? : models.OrganizationDetails, attributes? : models.IssuerAttributes, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IssuerBundle>): void;
        setCertificateIssuer(vaultBaseUrl: string, issuerName: string, provider: string, callback: ServiceCallback<models.IssuerBundle>): void;

        /**
         * Updates the specified certificate issuer.
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {string} issuerName The name of the issuer.
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {string} [options.provider] The issuer provider.
         * 
         * @param {object} [options.credentials] The credentials to be used for the
         * issuer.
         * 
         * @param {string} [options.credentials.accountId] The user name/account
         * name/account id.
         * 
         * @param {string} [options.credentials.password] The password/secret/account
         * key.
         * 
         * @param {object} [options.organizationDetails] Details of the organization as
         * provided to the issuer.
         * 
         * @param {string} [options.organizationDetails.id] Id of the organization.
         * 
         * @param {array} [options.organizationDetails.adminDetails] Details of the
         * organization administrator.
         * 
         * @param {object} [options.attributes] Attributes of the issuer object.
         * 
         * @param {boolean} [options.attributes.enabled] Determines whether the issuer
         * is enabled
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        updateCertificateIssuer(vaultBaseUrl: string, issuerName: string, options: { provider? : string, credentials? : models.IssuerCredentials, organizationDetails? : models.OrganizationDetails, attributes? : models.IssuerAttributes, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IssuerBundle>): void;
        updateCertificateIssuer(vaultBaseUrl: string, issuerName: string, callback: ServiceCallback<models.IssuerBundle>): void;

        /**
         * Gets the specified certificate issuer.
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {string} issuerName The name of the issuer.
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getCertificateIssuer(vaultBaseUrl: string, issuerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IssuerBundle>): void;
        getCertificateIssuer(vaultBaseUrl: string, issuerName: string, callback: ServiceCallback<models.IssuerBundle>): void;

        /**
         * Deletes the specified certificate issuer.
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {string} issuerName The name of the issuer.
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        deleteCertificateIssuer(vaultBaseUrl: string, issuerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IssuerBundle>): void;
        deleteCertificateIssuer(vaultBaseUrl: string, issuerName: string, callback: ServiceCallback<models.IssuerBundle>): void;

        /**
         * Creates a new certificate version. If this is the first version, the
         * certificate resource is created.
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {string} certificateName The name of the certificate
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.certificatePolicy] The management policy for the
         * certificate
         * 
         * @param {object} [options.certificatePolicy.keyProperties] Properties of the
         * key backing a certificate.
         * 
         * @param {boolean} [options.certificatePolicy.keyProperties.exportable]
         * Indicates if the private key can be exported.
         * 
         * @param {string} [options.certificatePolicy.keyProperties.keyType] The key
         * type.
         * 
         * @param {number} [options.certificatePolicy.keyProperties.keySize] The key
         * size in bytes. e.g. 2048.
         * 
         * @param {boolean} [options.certificatePolicy.keyProperties.reuseKey]
         * Indicates if the same key pair will be used on certificate renewal.
         * 
         * @param {object} [options.certificatePolicy.secretProperties] Properties of
         * the secret backing a certificate.
         * 
         * @param {string} [options.certificatePolicy.secretProperties.contentType] The
         * media type (MIME type).
         * 
         * @param {object} [options.certificatePolicy.x509CertificateProperties]
         * Properties of the X509 component of a certificate.
         * 
         * @param {string}
         * [options.certificatePolicy.x509CertificateProperties.subject] The subject
         * name. Should be a valid X509 Distinguished Name.
         * 
         * @param {array} [options.certificatePolicy.x509CertificateProperties.ekus]
         * The enhanced key usage.
         * 
         * @param {object}
         * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames]
         * The subject alternative names.
         * 
         * @param {array}
         * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames.emails]
         * Email addresses.
         * 
         * @param {array}
         * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames.dnsNames]
         * Domain names.
         * 
         * @param {array}
         * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames.upns]
         * User principal names.
         * 
         * @param {array}
         * [options.certificatePolicy.x509CertificateProperties.keyUsage] List of key
         * usages.
         * 
         * @param {number}
         * [options.certificatePolicy.x509CertificateProperties.validityInMonths] The
         * duration that the ceritifcate is valid in months.
         * 
         * @param {array} [options.certificatePolicy.lifetimeActions] Actions that will
         * be performed by Key Vault over the lifetime of a certificate.
         * 
         * @param {object} [options.certificatePolicy.issuerParameters] Parameters for
         * the issuer of the X509 component of a certificate.
         * 
         * @param {string} [options.certificatePolicy.issuerParameters.name] Name of
         * the referenced issuer object or reserved names e.g. 'Self', 'Unknown'.
         * 
         * @param {string} [options.certificatePolicy.issuerParameters.certificateType]
         * Type of certificate to be requested from the issuer provider.
         * 
         * @param {object} [options.certificatePolicy.attributes] The certificate
         * attributes.
         * 
         * @param {object} [options.certificateAttributes] The attributes of the
         * certificate (optional)
         * 
         * @param {boolean} [options.certificateAttributes.enabled] Determines whether
         * the object is enabled
         * 
         * @param {date} [options.certificateAttributes.notBefore] Not before date in
         * UTC
         * 
         * @param {date} [options.certificateAttributes.expires] Expiry date in UTC
         * 
         * @param {object} [options.tags] Application-specific metadata in the form of
         * key-value pairs
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        createCertificate(vaultBaseUrl: string, certificateName: string, options: { certificatePolicy? : models.CertificatePolicy, certificateAttributes? : models.CertificateAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateOperation>): void;
        createCertificate(vaultBaseUrl: string, certificateName: string, callback: ServiceCallback<models.CertificateOperation>): void;

        /**
         * Imports a certificate into the specified vault
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {string} certificateName The name of the certificate
         * 
         * @param {string} base64EncodedCertificate Base64 encoded representation of
         * the certificate object to import. This certificate needs to contain the
         * private key.
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {string} [options.password] If the private key in
         * base64EncodedCertificate is encrypted, the password used for encryption
         * 
         * @param {object} [options.certificatePolicy] The management policy for the
         * certificate
         * 
         * @param {object} [options.certificatePolicy.keyProperties] Properties of the
         * key backing a certificate.
         * 
         * @param {boolean} [options.certificatePolicy.keyProperties.exportable]
         * Indicates if the private key can be exported.
         * 
         * @param {string} [options.certificatePolicy.keyProperties.keyType] The key
         * type.
         * 
         * @param {number} [options.certificatePolicy.keyProperties.keySize] The key
         * size in bytes. e.g. 2048.
         * 
         * @param {boolean} [options.certificatePolicy.keyProperties.reuseKey]
         * Indicates if the same key pair will be used on certificate renewal.
         * 
         * @param {object} [options.certificatePolicy.secretProperties] Properties of
         * the secret backing a certificate.
         * 
         * @param {string} [options.certificatePolicy.secretProperties.contentType] The
         * media type (MIME type).
         * 
         * @param {object} [options.certificatePolicy.x509CertificateProperties]
         * Properties of the X509 component of a certificate.
         * 
         * @param {string}
         * [options.certificatePolicy.x509CertificateProperties.subject] The subject
         * name. Should be a valid X509 Distinguished Name.
         * 
         * @param {array} [options.certificatePolicy.x509CertificateProperties.ekus]
         * The enhanced key usage.
         * 
         * @param {object}
         * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames]
         * The subject alternative names.
         * 
         * @param {array}
         * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames.emails]
         * Email addresses.
         * 
         * @param {array}
         * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames.dnsNames]
         * Domain names.
         * 
         * @param {array}
         * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames.upns]
         * User principal names.
         * 
         * @param {array}
         * [options.certificatePolicy.x509CertificateProperties.keyUsage] List of key
         * usages.
         * 
         * @param {number}
         * [options.certificatePolicy.x509CertificateProperties.validityInMonths] The
         * duration that the ceritifcate is valid in months.
         * 
         * @param {array} [options.certificatePolicy.lifetimeActions] Actions that will
         * be performed by Key Vault over the lifetime of a certificate.
         * 
         * @param {object} [options.certificatePolicy.issuerParameters] Parameters for
         * the issuer of the X509 component of a certificate.
         * 
         * @param {string} [options.certificatePolicy.issuerParameters.name] Name of
         * the referenced issuer object or reserved names e.g. 'Self', 'Unknown'.
         * 
         * @param {string} [options.certificatePolicy.issuerParameters.certificateType]
         * Type of certificate to be requested from the issuer provider.
         * 
         * @param {object} [options.certificatePolicy.attributes] The certificate
         * attributes.
         * 
         * @param {object} [options.certificateAttributes] The attributes of the
         * certificate (optional)
         * 
         * @param {boolean} [options.certificateAttributes.enabled] Determines whether
         * the object is enabled
         * 
         * @param {date} [options.certificateAttributes.notBefore] Not before date in
         * UTC
         * 
         * @param {date} [options.certificateAttributes.expires] Expiry date in UTC
         * 
         * @param {object} [options.tags] Application-specific metadata in the form of
         * key-value pairs
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        importCertificate(vaultBaseUrl: string, certificateName: string, base64EncodedCertificate: string, options: { password? : string, certificatePolicy? : models.CertificatePolicy, certificateAttributes? : models.CertificateAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateBundle>): void;
        importCertificate(vaultBaseUrl: string, certificateName: string, base64EncodedCertificate: string, callback: ServiceCallback<models.CertificateBundle>): void;

        /**
         * List the versions of a certificate.
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {string} certificateName The name of the certificate
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {number} [options.maxresults] Maximum number of results to return in
         * a page. If not specified the service will return up to 25 results.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getCertificateVersions(vaultBaseUrl: string, certificateName: string, options: { maxresults? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateListResult>): void;
        getCertificateVersions(vaultBaseUrl: string, certificateName: string, callback: ServiceCallback<models.CertificateListResult>): void;

        /**
         * Gets the policy for a certificate.
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {string} certificateName The name of the certificate in the given
         * vault.
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getCertificatePolicy(vaultBaseUrl: string, certificateName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificatePolicy>): void;
        getCertificatePolicy(vaultBaseUrl: string, certificateName: string, callback: ServiceCallback<models.CertificatePolicy>): void;

        /**
         * Updates the policy for a certificate. Set appropriate members in the
         * certificatePolicy that must be updated. Leave others as null.
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {string} certificateName The name of the certificate in the given
         * vault.
         * 
         * @param {object} certificatePolicy The policy for the certificate.
         * 
         * @param {object} [certificatePolicy.keyProperties] Properties of the key
         * backing a certificate.
         * 
         * @param {boolean} [certificatePolicy.keyProperties.exportable] Indicates if
         * the private key can be exported.
         * 
         * @param {string} [certificatePolicy.keyProperties.keyType] The key type.
         * 
         * @param {number} [certificatePolicy.keyProperties.keySize] The key size in
         * bytes. e.g. 2048.
         * 
         * @param {boolean} [certificatePolicy.keyProperties.reuseKey] Indicates if the
         * same key pair will be used on certificate renewal.
         * 
         * @param {object} [certificatePolicy.secretProperties] Properties of the
         * secret backing a certificate.
         * 
         * @param {string} [certificatePolicy.secretProperties.contentType] The media
         * type (MIME type).
         * 
         * @param {object} [certificatePolicy.x509CertificateProperties] Properties of
         * the X509 component of a certificate.
         * 
         * @param {string} [certificatePolicy.x509CertificateProperties.subject] The
         * subject name. Should be a valid X509 Distinguished Name.
         * 
         * @param {array} [certificatePolicy.x509CertificateProperties.ekus] The
         * enhanced key usage.
         * 
         * @param {object}
         * [certificatePolicy.x509CertificateProperties.subjectAlternativeNames] The
         * subject alternative names.
         * 
         * @param {array}
         * [certificatePolicy.x509CertificateProperties.subjectAlternativeNames.emails]
         * Email addresses.
         * 
         * @param {array}
         * [certificatePolicy.x509CertificateProperties.subjectAlternativeNames.dnsNames]
         * Domain names.
         * 
         * @param {array}
         * [certificatePolicy.x509CertificateProperties.subjectAlternativeNames.upns]
         * User principal names.
         * 
         * @param {array} [certificatePolicy.x509CertificateProperties.keyUsage] List
         * of key usages.
         * 
         * @param {number}
         * [certificatePolicy.x509CertificateProperties.validityInMonths] The duration
         * that the ceritifcate is valid in months.
         * 
         * @param {array} [certificatePolicy.lifetimeActions] Actions that will be
         * performed by Key Vault over the lifetime of a certificate.
         * 
         * @param {object} [certificatePolicy.issuerParameters] Parameters for the
         * issuer of the X509 component of a certificate.
         * 
         * @param {string} [certificatePolicy.issuerParameters.name] Name of the
         * referenced issuer object or reserved names e.g. 'Self', 'Unknown'.
         * 
         * @param {string} [certificatePolicy.issuerParameters.certificateType] Type of
         * certificate to be requested from the issuer provider.
         * 
         * @param {object} [certificatePolicy.attributes] The certificate attributes.
         * 
         * @param {boolean} [certificatePolicy.attributes.enabled] Determines whether
         * the object is enabled
         * 
         * @param {date} [certificatePolicy.attributes.notBefore] Not before date in
         * UTC
         * 
         * @param {date} [certificatePolicy.attributes.expires] Expiry date in UTC
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        updateCertificatePolicy(vaultBaseUrl: string, certificateName: string, certificatePolicy: models.CertificatePolicy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificatePolicy>): void;
        updateCertificatePolicy(vaultBaseUrl: string, certificateName: string, certificatePolicy: models.CertificatePolicy, callback: ServiceCallback<models.CertificatePolicy>): void;

        /**
         * Updates the attributes associated with the specified certificate
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {string} certificateName The name of the certificate in the given
         * vault
         * 
         * @param {string} certificateVersion The version of the certificate
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.certificatePolicy] The management policy for the
         * certificate
         * 
         * @param {object} [options.certificatePolicy.keyProperties] Properties of the
         * key backing a certificate.
         * 
         * @param {boolean} [options.certificatePolicy.keyProperties.exportable]
         * Indicates if the private key can be exported.
         * 
         * @param {string} [options.certificatePolicy.keyProperties.keyType] The key
         * type.
         * 
         * @param {number} [options.certificatePolicy.keyProperties.keySize] The key
         * size in bytes. e.g. 2048.
         * 
         * @param {boolean} [options.certificatePolicy.keyProperties.reuseKey]
         * Indicates if the same key pair will be used on certificate renewal.
         * 
         * @param {object} [options.certificatePolicy.secretProperties] Properties of
         * the secret backing a certificate.
         * 
         * @param {string} [options.certificatePolicy.secretProperties.contentType] The
         * media type (MIME type).
         * 
         * @param {object} [options.certificatePolicy.x509CertificateProperties]
         * Properties of the X509 component of a certificate.
         * 
         * @param {string}
         * [options.certificatePolicy.x509CertificateProperties.subject] The subject
         * name. Should be a valid X509 Distinguished Name.
         * 
         * @param {array} [options.certificatePolicy.x509CertificateProperties.ekus]
         * The enhanced key usage.
         * 
         * @param {object}
         * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames]
         * The subject alternative names.
         * 
         * @param {array}
         * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames.emails]
         * Email addresses.
         * 
         * @param {array}
         * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames.dnsNames]
         * Domain names.
         * 
         * @param {array}
         * [options.certificatePolicy.x509CertificateProperties.subjectAlternativeNames.upns]
         * User principal names.
         * 
         * @param {array}
         * [options.certificatePolicy.x509CertificateProperties.keyUsage] List of key
         * usages.
         * 
         * @param {number}
         * [options.certificatePolicy.x509CertificateProperties.validityInMonths] The
         * duration that the ceritifcate is valid in months.
         * 
         * @param {array} [options.certificatePolicy.lifetimeActions] Actions that will
         * be performed by Key Vault over the lifetime of a certificate.
         * 
         * @param {object} [options.certificatePolicy.issuerParameters] Parameters for
         * the issuer of the X509 component of a certificate.
         * 
         * @param {string} [options.certificatePolicy.issuerParameters.name] Name of
         * the referenced issuer object or reserved names e.g. 'Self', 'Unknown'.
         * 
         * @param {string} [options.certificatePolicy.issuerParameters.certificateType]
         * Type of certificate to be requested from the issuer provider.
         * 
         * @param {object} [options.certificatePolicy.attributes] The certificate
         * attributes.
         * 
         * @param {object} [options.certificateAttributes] The attributes of the
         * certificate (optional)
         * 
         * @param {boolean} [options.certificateAttributes.enabled] Determines whether
         * the object is enabled
         * 
         * @param {date} [options.certificateAttributes.notBefore] Not before date in
         * UTC
         * 
         * @param {date} [options.certificateAttributes.expires] Expiry date in UTC
         * 
         * @param {object} [options.tags] Application-specific metadata in the form of
         * key-value pairs
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        updateCertificate(vaultBaseUrl: string, certificateName: string, certificateVersion: string, options: { certificatePolicy? : models.CertificatePolicy, certificateAttributes? : models.CertificateAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateBundle>): void;
        updateCertificate(vaultBaseUrl: string, certificateName: string, certificateVersion: string, callback: ServiceCallback<models.CertificateBundle>): void;

        /**
         * Gets a Certificate.
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {string} certificateName The name of the certificate in the given
         * vault
         * 
         * @param {string} certificateVersion The version of the certificate
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getCertificate(vaultBaseUrl: string, certificateName: string, certificateVersion: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateBundle>): void;
        getCertificate(vaultBaseUrl: string, certificateName: string, certificateVersion: string, callback: ServiceCallback<models.CertificateBundle>): void;

        /**
         * Updates a certificate operation.
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {string} certificateName The name of the certificate
         * 
         * @param {boolean} cancellationRequested Indicates if cancellation was
         * requested on the certificate operation.
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        updateCertificateOperation(vaultBaseUrl: string, certificateName: string, cancellationRequested: boolean, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateOperation>): void;
        updateCertificateOperation(vaultBaseUrl: string, certificateName: string, cancellationRequested: boolean, callback: ServiceCallback<models.CertificateOperation>): void;

        /**
         * Gets the certificate operation response.
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {string} certificateName The name of the certificate
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getCertificateOperation(vaultBaseUrl: string, certificateName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateOperation>): void;
        getCertificateOperation(vaultBaseUrl: string, certificateName: string, callback: ServiceCallback<models.CertificateOperation>): void;

        /**
         * Deletes the certificate operation.
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {string} certificateName The name of the certificate
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        deleteCertificateOperation(vaultBaseUrl: string, certificateName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateOperation>): void;
        deleteCertificateOperation(vaultBaseUrl: string, certificateName: string, callback: ServiceCallback<models.CertificateOperation>): void;

        /**
         * Merges a certificate or a certificate chain with a key pair existing on the
         * server.
         *
         * @param {string} vaultBaseUrl The vault name, e.g.
         * https://myvault.vault.azure.net
         * 
         * @param {string} certificateName The name of the certificate
         * 
         * @param {array} x509Certificates The certificate or the certificate chain to
         * merge
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.certificateAttributes] The attributes of the
         * certificate (optional)
         * 
         * @param {boolean} [options.certificateAttributes.enabled] Determines whether
         * the object is enabled
         * 
         * @param {date} [options.certificateAttributes.notBefore] Not before date in
         * UTC
         * 
         * @param {date} [options.certificateAttributes.expires] Expiry date in UTC
         * 
         * @param {object} [options.tags] Application-specific metadata in the form of
         * key-value pairs
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        mergeCertificate(vaultBaseUrl: string, certificateName: string, x509Certificates: Buffer[], options: { certificateAttributes? : models.CertificateAttributes, tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateBundle>): void;
        mergeCertificate(vaultBaseUrl: string, certificateName: string, x509Certificates: Buffer[], callback: ServiceCallback<models.CertificateBundle>): void;

        /**
         * List the versions of the specified key
         *
         * @param {string} nextPageLink The NextLink from the previous successful call
         * to List operation.
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getKeyVersionsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KeyListResult>): void;
        getKeyVersionsNext(nextPageLink: string, callback: ServiceCallback<models.KeyListResult>): void;

        /**
         * List keys in the specified vault
         *
         * @param {string} nextPageLink The NextLink from the previous successful call
         * to List operation.
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getKeysNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KeyListResult>): void;
        getKeysNext(nextPageLink: string, callback: ServiceCallback<models.KeyListResult>): void;

        /**
         * List secrets in the specified vault
         *
         * @param {string} nextPageLink The NextLink from the previous successful call
         * to List operation.
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getSecretsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecretListResult>): void;
        getSecretsNext(nextPageLink: string, callback: ServiceCallback<models.SecretListResult>): void;

        /**
         * List the versions of the specified secret
         *
         * @param {string} nextPageLink The NextLink from the previous successful call
         * to List operation.
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getSecretVersionsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecretListResult>): void;
        getSecretVersionsNext(nextPageLink: string, callback: ServiceCallback<models.SecretListResult>): void;

        /**
         * List certificates in the specified vault
         *
         * @param {string} nextPageLink The NextLink from the previous successful call
         * to List operation.
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getCertificatesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateListResult>): void;
        getCertificatesNext(nextPageLink: string, callback: ServiceCallback<models.CertificateListResult>): void;

        /**
         * List certificate issuers for the specified vault.
         *
         * @param {string} nextPageLink The NextLink from the previous successful call
         * to List operation.
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getCertificateIssuersNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateIssuerListResult>): void;
        getCertificateIssuersNext(nextPageLink: string, callback: ServiceCallback<models.CertificateIssuerListResult>): void;

        /**
         * List the versions of a certificate.
         *
         * @param {string} nextPageLink The NextLink from the previous successful call
         * to List operation.
         * 
         * @param {object} [options] Optional Parameters.
         * 
         * @param {object} [options.customHeaders] Headers that will be added to the
         * request
         * 
         * @param {ServiceCallback} [callback] callback function; see ServiceCallback
         * doc in ms-rest index.d.ts for details
         */
        getCertificateVersionsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateListResult>): void;
        getCertificateVersionsNext(nextPageLink: string, callback: ServiceCallback<models.CertificateListResult>): void;
}

export = KeyVaultClient;
