name: CI
on: pull_request

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.repository == 'DefinitelyTyped/DefinitelyTyped'

    steps:
      - uses: actions/checkout@v4
        with:
          # Need this to be able to inquire about origin/master
          filter: blob:none # https://github.blog/2020-12-21-get-up-to-speed-with-partial-clone-and-shallow-clone/
          fetch-depth: 0 # Default is 1; need to set to 0 to get the benefits of blob:none.
      - uses: actions/setup-node@v3
        with:
          node-version: '16'

      # forbid symlinks
      - name: 'Pre-run validation'
        run: |
          symlinks="$(find . -type l)"
          if [[ -n "$symlinks" ]]; then
            printf "Aborting: symlinks found:\n%s" "$symlinks"; exit 1
          fi

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: latest
          run_install: false

      # TODO(jakebailey): this won't work in PRs; we may need to once nightly
      # refresh a new cache based on master, and then consume it here read-only in PRs.
      # - name: Get pnpm cache info
      #   id: pnpm-cache
      #   shell: bash
      #   run: |
      #     echo "store=$(pnpm store path)" >> $GITHUB_OUTPUT
      #     echo "date=$(/bin/date -u "+%Y-%m-%d")" >> $GITHUB_OUTPUT

      # - uses: actions/cache@v3
      #   name: Setup pnpm cache
      #   with:
      #     path: ${{ steps.pnpm-cache.outputs.store }}
      #     key: ${{ runner.os }}-pnpm-store-cache-${{ steps.pnpm-cache.outputs.date }}

      - run: |
          # If we're deleting packages, pnpm won't know what other unrelated packages
          # need to be reinstalled that may now be sourced from npm instead of the
          # local repo. Just pay the cost of the full install.
          # TODO: enable this; see https://github.com/DefinitelyTyped/DefinitelyTyped/pull/67087#issuecomment-1767228131
          # if git diff --diff-filter=DR --name-only origin/master | grep -q 'package.json'; then
          #   pnpm install
          # else
          #   pnpm install --filter . --filter '...[origin/master]'
          # fi
          pnpm install
        name: pnpm install

      # Run tests
      - run: pnpm run test-all

      - name: 'Run Danger'
        env:
          # See https://github.com/danger/danger-js/issues/1042
          DANGER_GITHUB_API_BASE_URL: 'https://api.github.com'

        # Danger failing (for example through rate-limiting) shouldn't fail the build
        run: |
          # Exposing this token is safe because the user of it has no other public repositories
          # and has no permission to modify this repository. See #62638 for the discussion.
          TOKEN='ghp_i5wtj1l2AbpFv3OU96w6R'
          TOKEN+='On3bHOkcV2AmVY6'
          DANGER_GITHUB_API_TOKEN=$TOKEN pnpm danger ci || $( exit 0 )
